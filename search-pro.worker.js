const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":1662,\"nextId\":1662,\"documentIds\":{\"0\":\"v-79fdd481\",\"1\":\"v-184f4da6\",\"2\":\"v-0e503981\",\"3\":\"v-70bc2959\",\"4\":\"v-274a102e\",\"5\":\"v-274a102e#abstract\",\"6\":\"v-274a102e#模板\",\"7\":\"v-274a102e#例题解析\",\"8\":\"v-274a102e#lc17-电话号码的字母组合\",\"9\":\"v-274a102e#lc22-括号生成\",\"10\":\"v-274a102e#lc39-组合总数\",\"11\":\"v-274a102e#lc40-组合总数ii\",\"12\":\"v-274a102e#lc46-全排列\",\"13\":\"v-274a102e#lc47-全排列ii\",\"14\":\"v-274a102e#lc77-组合\",\"15\":\"v-274a102e#lc473-火柴拼正方形\",\"16\":\"v-5ab77a0c\",\"17\":\"v-5ab77a0c#summary\",\"18\":\"v-5ab77a0c#_1-二分搜索模板\",\"19\":\"v-5ab77a0c#_1-1-基本的二分搜索算法\",\"20\":\"v-5ab77a0c#_1-2-寻找左侧边界的二分搜索\",\"21\":\"v-5ab77a0c#_1-3-寻找右侧边界的二分搜索\",\"22\":\"v-5ab77a0c#_1-3-参考\",\"23\":\"v-5ab77a0c#二分查找思路整理\",\"24\":\"v-5ab77a0c#code\",\"25\":\"v-5ab77a0c#wiki-伪代码\",\"26\":\"v-5ab77a0c#查找插入位置\",\"27\":\"v-5ab77a0c#bisect\",\"28\":\"v-5ab77a0c#向上、下取整\",\"29\":\"v-5ab77a0c#problems\",\"30\":\"v-5ab77a0c#查找二维数组中是否存在某个元素\",\"31\":\"v-5ab77a0c#完全平方数\",\"32\":\"v-5ab77a0c#数字在排序数组中出现的次数\",\"33\":\"v-5ab77a0c#find-peak-element-寻找峰值\",\"34\":\"v-5ab77a0c#lc875-爱吃香蕉的珂珂\",\"35\":\"v-5ab77a0c#求根号-x-的值\",\"36\":\"v-5ab77a0c#lc719-找出第-k-小的数对距离\",\"37\":\"v-5ab77a0c#参考文献\",\"38\":\"v-5ab77a0c@0\",\"39\":\"v-5ab77a0c@1\",\"40\":\"v-64751ed4\",\"41\":\"v-64751ed4#二叉树的前序遍历\",\"42\":\"v-64751ed4#递归法\",\"43\":\"v-64751ed4#迭代法\",\"44\":\"v-64751ed4#二叉树的中序遍历\",\"45\":\"v-64751ed4#递归法-1\",\"46\":\"v-64751ed4#迭代法-1\",\"47\":\"v-64751ed4#二叉树的层次遍历\",\"48\":\"v-64751ed4#例题\",\"49\":\"v-64751ed4#lc606-根据二叉树创建字符串-前序遍历\",\"50\":\"v-64751ed4#lc101-对称二叉树\",\"51\":\"v-64751ed4#dfs-解法\",\"52\":\"v-64751ed4#bfs-解法\",\"53\":\"v-64751ed4#lc111-二叉树的最小深度\",\"54\":\"v-64751ed4#bfs-解法-1\",\"55\":\"v-64751ed4#lc104-二叉树的最大深度\",\"56\":\"v-64751ed4#dfs-解法-1\",\"57\":\"v-64751ed4#bfs-解法-2\",\"58\":\"v-64751ed4#lc102-二叉树的层序遍历\",\"59\":\"v-64751ed4#bfs-解法-3\",\"60\":\"v-64751ed4#lc107-二叉树的层序遍历ii\",\"61\":\"v-64751ed4#lc103-二叉树的锯齿形层序遍历\",\"62\":\"v-64751ed4#lc543-二叉树的直径\",\"63\":\"v-64751ed4#面试题-04-06-后继者\",\"64\":\"v-64751ed4#中序遍历\",\"65\":\"v-64751ed4#bst-特性解法\",\"66\":\"v-64751ed4@0\",\"67\":\"v-64751ed4@1\",\"68\":\"v-57bfcc9e\",\"69\":\"v-57bfcc9e#abstract\",\"70\":\"v-57bfcc9e#深度优先搜索算法\",\"71\":\"v-57bfcc9e#广度优先搜索算法\",\"72\":\"v-57bfcc9e#dfs\",\"73\":\"v-57bfcc9e#概览\",\"74\":\"v-57bfcc9e#lc329-矩阵中的最长递增路径\",\"75\":\"v-57bfcc9e#lc841-钥匙和房间\",\"76\":\"v-57bfcc9e#lc200-岛屿数量\",\"77\":\"v-57bfcc9e#lc386-字典序排数\",\"78\":\"v-57bfcc9e#lc417-太平洋大西洋水流问题\",\"79\":\"v-57bfcc9e#dfs-1\",\"80\":\"v-57bfcc9e#bfs\",\"81\":\"v-57bfcc9e#testcase\",\"82\":\"v-57bfcc9e#bfs-1\",\"83\":\"v-57bfcc9e#概览-1\",\"84\":\"v-57bfcc9e#lc841-钥匙和房间-1\",\"85\":\"v-57bfcc9e#lc200-岛屿数量-1\",\"86\":\"v-57bfcc9e#lc210-课程表\",\"87\":\"v-57bfcc9e#lc977-找到小镇的法官\",\"88\":\"v-57bfcc9e#lc752-打开转盘锁\",\"89\":\"v-57bfcc9e#lc133-克隆图\",\"90\":\"v-57bfcc9e#lc2039-网络空闲的时刻\",\"91\":\"v-57bfcc9e#lc365-水壶问题\",\"92\":\"v-57bfcc9e#lc433-基因变化\",\"93\":\"v-1d037c54\",\"94\":\"v-1d037c54#_1-1-fibonacci\",\"95\":\"v-1d037c54#_1-1-1-递归法\",\"96\":\"v-1d037c54#_1-1-2-动态规划\",\"97\":\"v-1d037c54#_1-1-3-记忆化搜索\",\"98\":\"v-1d037c54#_1-1-4-使用公式\",\"99\":\"v-1d037c54#_1-2-记忆化搜索\",\"100\":\"v-1d037c54#_1-2-1-记忆化搜索概览\",\"101\":\"v-1d037c54#_1-3-例题\",\"102\":\"v-1d037c54#_1-3-1-lc638-大礼包\",\"103\":\"v-1d037c54#_1-3-2-跳台阶游戏\",\"104\":\"v-1d037c54#_1-3-3-矩形覆盖\",\"105\":\"v-f567ae54\",\"106\":\"v-f567ae54#summary\",\"107\":\"v-f567ae54#最长公共子串\",\"108\":\"v-f567ae54#暴力求解\",\"109\":\"v-f567ae54@0\",\"110\":\"v-f567ae54@1\",\"111\":\"v-a88897a8\",\"112\":\"v-a88897a8#概览\",\"113\":\"v-a88897a8#例题索引\",\"114\":\"v-a88897a8#_0-1-背包\",\"115\":\"v-a88897a8#完全背包\",\"116\":\"v-a88897a8#_0-1-背包-1\",\"117\":\"v-a88897a8#递推公式\",\"118\":\"v-a88897a8#例题-经典背包问题\",\"119\":\"v-a88897a8#例题-lc474-1和0\",\"120\":\"v-a88897a8#_474-一和零\",\"121\":\"v-a88897a8#例题-lc-416-分割等和子集\",\"122\":\"v-a88897a8#_416-分割等和子集\",\"123\":\"v-a88897a8#例题-lc-494-目标和\",\"124\":\"v-a88897a8#_494-目标和\",\"125\":\"v-a88897a8#lc1049-最后一块石头的重量-iii\",\"126\":\"v-a88897a8#总结\",\"127\":\"v-a88897a8#完全背包-1\",\"128\":\"v-a88897a8#递推公式-1\",\"129\":\"v-a88897a8#例题-lc-322-零钱兑换\",\"130\":\"v-a88897a8#_322-零钱兑换\",\"131\":\"v-a88897a8#例题-lc-279-完全平方数\",\"132\":\"v-a88897a8#_279-完全平方数\",\"133\":\"v-a88897a8#例题-lc-518-零钱兑换2\",\"134\":\"v-a88897a8#_518-零钱兑换-ii\",\"135\":\"v-a88897a8#例题-lc-377-组合总数-iv\",\"136\":\"v-a88897a8#_377-组合总和-iv\",\"137\":\"v-a88897a8#例题-lc-139-单词拆分\",\"138\":\"v-a88897a8#_139-单词拆分\",\"139\":\"v-a88897a8#总结-1\",\"140\":\"v-a88897a8#参考文献\",\"141\":\"v-a88897a8@0\",\"142\":\"v-a88897a8@1\",\"143\":\"v-21dece18\",\"144\":\"v-21dece18#例题索引\",\"145\":\"v-21dece18#概述\",\"146\":\"v-21dece18#前缀和快速求解\",\"147\":\"v-21dece18#前缀和原理\",\"148\":\"v-21dece18#例题解析\",\"149\":\"v-21dece18#lc1588-所有奇数长度子数组的和\",\"150\":\"v-21dece18#lc2055-蜡烛之间的盘子\",\"151\":\"v-21dece18#lc560-和为-k-的子数组\",\"152\":\"v-21dece18#解法1-直接用前缀和-超时\",\"153\":\"v-21dece18#解法2-优化解法-hash-map\",\"154\":\"v-21dece18#解法3-对比理解\",\"155\":\"v-21dece18#lc1744-你能在你最喜欢的那天吃到你最喜欢的糖果吗\",\"156\":\"v-21dece18#lc523-连续的子数组和\",\"157\":\"v-21dece18#lc-560-解法3-模板\",\"158\":\"v-21dece18#lc525-连续数组\",\"159\":\"v-21dece18#解法一-模板\",\"160\":\"v-21dece18#lc209-长度最小的子数组\",\"161\":\"v-32338922\",\"162\":\"v-32338922#abstract\",\"163\":\"v-32338922#problems\",\"164\":\"v-32338922#lc2024-考试的最大困扰度\",\"165\":\"v-32338922#剑指offer-57-和为-s-的连续正数序列\",\"166\":\"v-32338922#和为-s-的两个数\",\"167\":\"v-32338922#lc1513-仅含-1-的子串数\",\"168\":\"v-32338922#面试题17-18-最短超串\",\"169\":\"v-32338922#lc905-按奇偶排序数组\",\"170\":\"v-4ffc68c2\",\"171\":\"v-4ffc68c2#abstract\",\"172\":\"v-4ffc68c2#base-sort-function-py\",\"173\":\"v-4ffc68c2#cmp-to-key\",\"174\":\"v-4ffc68c2#sort-1\",\"175\":\"v-4ffc68c2#insertion-sort\",\"176\":\"v-4ffc68c2#merge-sort\",\"177\":\"v-4ffc68c2#quick-sort\",\"178\":\"v-4ffc68c2#selection-sort\",\"179\":\"v-4ffc68c2#sort-template\",\"180\":\"v-4ffc68c2#swap\",\"181\":\"v-4ffc68c2#problems\",\"182\":\"v-4ffc68c2#lc179-最大数\",\"183\":\"v-4ffc68c2#冒泡排序-c-解法\",\"184\":\"v-4ffc68c2#一刷\",\"185\":\"v-4ffc68c2#二刷\",\"186\":\"v-4ffc68c2#lc953-验证外星语词典\",\"187\":\"v-63e82ae3\",\"188\":\"v-2d0a1dba\",\"189\":\"v-2d0a1dba#abstract\",\"190\":\"v-2d0a1dba#introduction\",\"191\":\"v-2d0a1dba#key-word\",\"192\":\"v-2d0a1dba#temporal-locality-spatial-locality\",\"193\":\"v-2d0a1dba#cache-abstract\",\"194\":\"v-2d0a1dba#way-set\",\"195\":\"v-2d0a1dba#cache-line\",\"196\":\"v-2d0a1dba#tag\",\"197\":\"v-2d0a1dba#valid\",\"198\":\"v-2d0a1dba#💯data\",\"199\":\"v-2d0a1dba#cache-映射方式\",\"200\":\"v-2d0a1dba#full-associative\",\"201\":\"v-2d0a1dba#direct-mapped\",\"202\":\"v-2d0a1dba#set-associative\",\"203\":\"v-2d0a1dba#arm-docs-set-associative-caches\",\"204\":\"v-2d0a1dba#arm-docs-a-real-life-example\",\"205\":\"v-2d0a1dba#qa\",\"206\":\"v-2d0a1dba#summary\",\"207\":\"v-2d0a1dba#hit-miss\",\"208\":\"v-2d0a1dba#why-cache-miss\",\"209\":\"v-2d0a1dba#ways-to-lower-miss-rate\",\"210\":\"v-2d0a1dba#使用较大的-block\",\"211\":\"v-2d0a1dba#hide-some-transfer-time\",\"212\":\"v-2d0a1dba#handling-cache-misses\",\"213\":\"v-2d0a1dba#置换策略\",\"214\":\"v-2d0a1dba#cache-write\",\"215\":\"v-2d0a1dba#write-through\",\"216\":\"v-2d0a1dba#write-buffer\",\"217\":\"v-2d0a1dba#write-back-dirty\",\"218\":\"v-2d0a1dba#write-miss\",\"219\":\"v-2d0a1dba#cache-一致性\",\"220\":\"v-2d0a1dba#example\",\"221\":\"v-2d0a1dba#write-invalidate\",\"222\":\"v-2d0a1dba#write-update\",\"223\":\"v-2d0a1dba#cache-一致性协议\",\"224\":\"v-2d0a1dba#mesi\",\"225\":\"v-2d0a1dba#other-mesi\",\"226\":\"v-2d0a1dba#片内可寻址存储器\",\"227\":\"v-2d0a1dba#bypass\",\"228\":\"v-2d0a1dba#others\",\"229\":\"v-2d0a1dba#内存对齐\",\"230\":\"v-2d0a1dba#reference\",\"231\":\"v-2d0a1dba@0\",\"232\":\"v-b1ecffde\",\"233\":\"v-b1ecffde#abstract\",\"234\":\"v-b1ecffde#what-is-pipeline\",\"235\":\"v-b1ecffde#risc-v-instruction-set\",\"236\":\"v-b1ecffde#the-classic-five-stage-pipeline-for-a-risc-processor\",\"237\":\"v-b1ecffde#the-major-hurdle-of-pipelining—pipeline-hazards\",\"238\":\"v-b1ecffde#performance-of-pipelines-with-stalls\",\"239\":\"v-b1ecffde#data-hazards\",\"240\":\"v-b1ecffde#branch-hazards\",\"241\":\"v-b1ecffde#reducing-the-cost-of-branches-through-prediction\",\"242\":\"v-b1ecffde#static-branch-prediction\",\"243\":\"v-b1ecffde#dynamic-branch-prediction-and-branch-prediction-buffers\",\"244\":\"v-b1ecffde#how-is-pipelining-implemented\",\"245\":\"v-b1ecffde#a-simple-implementation-of-risc-v\",\"246\":\"v-b1ecffde@0\",\"247\":\"v-158324fe\",\"248\":\"v-158324fe#abstract\",\"249\":\"v-158324fe#virtual-memory\",\"250\":\"v-158324fe#abstract-1\",\"251\":\"v-158324fe#虚拟内存与进程\",\"252\":\"v-158324fe#虚拟进程与页表\",\"253\":\"v-158324fe#understanding\",\"254\":\"v-158324fe#tlb\",\"255\":\"v-158324fe#what-is-tlb\",\"256\":\"v-158324fe#tlb-miss\",\"257\":\"v-158324fe#page\",\"258\":\"v-158324fe#页面大小的权衡\",\"259\":\"v-158324fe#page-fault\",\"260\":\"v-158324fe#virtual-page-number-and-page-offset\",\"261\":\"v-158324fe#virtual-page-number\",\"262\":\"v-158324fe#page-offset\",\"263\":\"v-158324fe#页表的映射方式\",\"264\":\"v-158324fe#tlb-和-cache-的映射方式\",\"265\":\"v-158324fe@0\",\"266\":\"v-14c69af4\",\"267\":\"v-f0383c18\",\"268\":\"v-f0383c18#why\",\"269\":\"v-f0383c18#linux\",\"270\":\"v-9537f870\",\"271\":\"v-63cd5dba\",\"272\":\"v-63cd5dba#install\",\"273\":\"v-63cd5dba#linux\",\"274\":\"v-63cd5dba#openssl-install\",\"275\":\"v-63cd5dba#venv\",\"276\":\"v-480fefb8\",\"277\":\"v-480fefb8#q-a\",\"278\":\"v-480fefb8#abstract\",\"279\":\"v-480fefb8#why-coroutiones\",\"280\":\"v-480fefb8#计算密集和i-o-密集\",\"281\":\"v-480fefb8#并发与并行\",\"282\":\"v-480fefb8#协程上下文切换\",\"283\":\"v-480fefb8#python-多线程结论\",\"284\":\"v-480fefb8#multiprocessing\",\"285\":\"v-480fefb8#基本使用\",\"286\":\"v-480fefb8#api\",\"287\":\"v-480fefb8#processpoolexecutor\",\"288\":\"v-480fefb8#实例\",\"289\":\"v-480fefb8#about-pool-map\",\"290\":\"v-a6404ca8\",\"291\":\"v-a6404ca8#时序语法\",\"292\":\"v-fe00e646\",\"293\":\"v-fe00e646#function-closure\",\"294\":\"v-fe00e646#generator\",\"295\":\"v-63f727de\",\"296\":\"v-63f727de#hash-map\",\"297\":\"v-63f727de#implement\",\"298\":\"v-63f727de#cache-result-pickle\",\"299\":\"v-63f727de#collections-counter\",\"300\":\"v-63f727de#ordereddict\",\"301\":\"v-63f727de#init\",\"302\":\"v-63f727de#move-to-end\",\"303\":\"v-63f727de#popitem\",\"304\":\"v-63f727de#sort-by-dict-value\",\"305\":\"v-63f727de@0\",\"306\":\"v-35e7cf0e\",\"307\":\"v-35e7cf0e#new-coder-input\",\"308\":\"v-35e7cf0e#format-output\",\"309\":\"v-35e7cf0e#input\",\"310\":\"v-6403b530\",\"311\":\"v-6403b530#more-itertools\",\"312\":\"v-6403b530#sliding-window\",\"313\":\"v-6403b530#stride-1-sliding\",\"314\":\"v-6403b530#grouper-sliding-non-overlapping\",\"315\":\"v-6403b530#example\",\"316\":\"v-6403b530#nth\",\"317\":\"v-6403b530#product\",\"318\":\"v-6403b530@0\",\"319\":\"v-52280bcf\",\"320\":\"v-52280bcf#abstract\",\"321\":\"v-52280bcf#log-level\",\"322\":\"v-52280bcf#logging-to-a-file\",\"323\":\"v-52280bcf#to-file\",\"324\":\"v-52280bcf#to-console\",\"325\":\"v-52280bcf#logging-format\",\"326\":\"v-52280bcf#logging-in-different-plarform\",\"327\":\"v-19aaf8a6\",\"328\":\"v-19aaf8a6#dataframe\",\"329\":\"v-19aaf8a6#read-csv\",\"330\":\"v-19aaf8a6#example\",\"331\":\"v-19aaf8a6#获取某列的数据\",\"332\":\"v-19aaf8a6@0\",\"333\":\"v-78ba0d48\",\"334\":\"v-78ba0d48#临时指定\",\"335\":\"v-78ba0d48#永久指定\",\"336\":\"v-78ba0d48#windows\",\"337\":\"v-78ba0d48#linux\",\"338\":\"v-1c7b93cb\",\"339\":\"v-1c7b93cb#slicing\",\"340\":\"v-1c7b93cb#list\",\"341\":\"v-1c7b93cb#sort-and-sorted\",\"342\":\"v-1c7b93cb#bisect\",\"343\":\"v-1c7b93cb#set\",\"344\":\"v-1c7b93cb#set-usage\",\"345\":\"v-5a69a8d3\",\"346\":\"v-5a69a8d3#file-api\",\"347\":\"v-5a69a8d3#exists\",\"348\":\"v-5a69a8d3#listdir\",\"349\":\"v-5a69a8d3#rename-folder\",\"350\":\"v-5a69a8d3#file-path\",\"351\":\"v-5a69a8d3#windows\",\"352\":\"v-5a69a8d3#linux\",\"353\":\"v-5a69a8d3#linecache\",\"354\":\"v-5a69a8d3#linecache-getline\",\"355\":\"v-5a69a8d3#linecache-getlines\",\"356\":\"v-5a69a8d3#mutil-lines\",\"357\":\"v-5a69a8d3#line-after-match-xx\",\"358\":\"v-5a69a8d3#no-1-itertools-islice\",\"359\":\"v-5a69a8d3#no-2-linecache-getline\",\"360\":\"v-5a69a8d3#no-3-linecache-getline\",\"361\":\"v-5a69a8d3#file-rights\",\"362\":\"v-5a69a8d3@0\",\"363\":\"v-5a69a8d3@1\",\"364\":\"v-363dd2b0\",\"365\":\"v-363dd2b0#ipython\",\"366\":\"v-363dd2b0#timeit\",\"367\":\"v-363dd2b0#personalized\",\"368\":\"v-363dd2b0#file-server\",\"369\":\"v-c82344b8\",\"370\":\"v-c82344b8#pytest-入门\",\"371\":\"v-c82344b8#捕获异常\",\"372\":\"v-c82344b8#标记函数-pytest-mark\",\"373\":\"v-c82344b8#跳过测试-pytest-mark-skip\",\"374\":\"v-c82344b8#预见的错误-pytest-mark-xfail\",\"375\":\"v-c82344b8#参数化-pytest-mark-parametrize\",\"376\":\"v-c82344b8#fixture-固件\",\"377\":\"v-c82344b8#fixture-定义\",\"378\":\"v-c82344b8#预处理和后处理\",\"379\":\"v-c82344b8#作用域\",\"380\":\"v-c82344b8#自动执行\",\"381\":\"v-c82344b8#重命名\",\"382\":\"v-c82344b8#参数化\",\"383\":\"v-c82344b8#内置固件\",\"384\":\"v-c82344b8#单元测试\",\"385\":\"v-c82344b8#基本例子\",\"386\":\"v-c82344b8#skip-测试用例\",\"387\":\"v-c82344b8#ddt-数据驱动\",\"388\":\"v-c82344b8#ddt-yml\",\"389\":\"v-2d45a18a\",\"390\":\"v-2d45a18a#str-maketrans\",\"391\":\"v-2d45a18a#python-import-string\",\"392\":\"v-2d45a18a#count\",\"393\":\"v-2d45a18a#map\",\"394\":\"v-2d45a18a#int2list-and-list2int\",\"395\":\"v-2d45a18a#isinstance\",\"396\":\"v-2d45a18a#zip\",\"397\":\"v-2d45a18a#enumerate\",\"398\":\"v-2d45a18a#reduce-lcd-and-gcd\",\"399\":\"v-2d45a18a#gcd-and-lcm\",\"400\":\"v-2d45a18a#bit-operation\",\"401\":\"v-2d45a18a#all\",\"402\":\"v-2d45a18a#filter\",\"403\":\"v-2d45a18a#name\",\"404\":\"v-2d45a18a#random\",\"405\":\"v-2d45a18a#collections\",\"406\":\"v-2d45a18a#ordereddict\",\"407\":\"v-2d45a18a#decorators\",\"408\":\"v-2d45a18a#property\",\"409\":\"v-2d45a18a#urllib\",\"410\":\"v-2d45a18a#reading-json-file-from-url\",\"411\":\"v-2d45a18a#regular-expression-re-正则表达式\",\"412\":\"v-2d45a18a#requests\",\"413\":\"v-2d45a18a#networks-and-interprocess-communication\",\"414\":\"v-2d45a18a#coroutines-协程\",\"415\":\"v-2d45a18a#asyncio\",\"416\":\"v-523b2742\",\"417\":\"v-523b2742#class\",\"418\":\"v-523b2742#作用域和命名空间\",\"419\":\"v-523b2742#self\",\"420\":\"v-523b2742#给类添加迭代器\",\"421\":\"v-523b2742#类方法-classmethod\",\"422\":\"v-523b2742#静态方法-staticmethod\",\"423\":\"v-523b2742#_3-继承与多态\",\"424\":\"v-523b2742#函数继承\",\"425\":\"v-523b2742#qa\",\"426\":\"v-523b2742#继承易错知识点\",\"427\":\"v-523b2742#super\",\"428\":\"v-523b2742#_4-魔法方法-magic-method\",\"429\":\"v-523b2742#_5-new\",\"430\":\"v-523b2742#qa-1\",\"431\":\"v-523b2742#_5-1-new\",\"432\":\"v-523b2742#_5-2-实例化的本质-new-与-init\",\"433\":\"v-523b2742#_5-3-new-返回其他实例\",\"434\":\"v-523b2742#_6-str\",\"435\":\"v-523b2742#_7-call\",\"436\":\"v-523b2742#_8-slot\",\"437\":\"v-523b2742#_9-元类-metaclass\",\"438\":\"v-523b2742#_9-1-什么是元类\",\"439\":\"v-523b2742#p-参考文献\",\"440\":\"v-ec04b8c2\",\"441\":\"v-ec04b8c2#abstract\",\"442\":\"v-ec04b8c2#python-调用-c-c\",\"443\":\"v-382c5f1d\",\"444\":\"v-382c5f1d#虚环境\",\"445\":\"v-382c5f1d#标准启动方式\",\"446\":\"v-382c5f1d#远程访问-visdom\",\"447\":\"v-382c5f1d#查看-python-路径\",\"448\":\"v-382c5f1d#设置-pip-源\",\"449\":\"v-382c5f1d#windows\",\"450\":\"v-382c5f1d#linux\",\"451\":\"v-5c66bb6e\",\"452\":\"v-5c66bb6e#hashmap\",\"453\":\"v-5c66bb6e#hashmap-in-python-counter\",\"454\":\"v-5c66bb6e#unordered-map\",\"455\":\"v-5c66bb6e#map\",\"456\":\"v-dd5bc3f8\",\"457\":\"v-dd5bc3f8#linked-list\",\"458\":\"v-dd5bc3f8#reverse-linked-list\",\"459\":\"v-dd5bc3f8#intersection-of-linked-list\",\"460\":\"v-dd5bc3f8#implement-lru\",\"461\":\"v-f3fdb184\",\"462\":\"v-160a850f\",\"463\":\"v-160a850f#abstract\",\"464\":\"v-160a850f#stack-problem\",\"465\":\"v-160a850f#valid-parentheses-括号匹配\",\"466\":\"v-160a850f#validate-stack-sequence\",\"467\":\"v-160a850f#next-greater-element\",\"468\":\"v-160a850f#用两个栈实现一个队列\",\"469\":\"v-160a850f#用两个队列实现一个栈\",\"470\":\"v-160a850f#括号匹配\",\"471\":\"v-160a850f#后缀表达式\",\"472\":\"v-204e6d2c\",\"473\":\"v-204e6d2c#string\",\"474\":\"v-204e6d2c#python-string\",\"475\":\"v-204e6d2c#求-string-长度\",\"476\":\"v-204e6d2c#c-string\",\"477\":\"v-204e6d2c#problems\",\"478\":\"v-204e6d2c#判断两个字符串是否只相差一个字母\",\"479\":\"v-204e6d2c#lc521-最长特殊序列1-判断子序列\",\"480\":\"v-204e6d2c#查找字符串中第一个出现的不重复的元素-阿里\",\"481\":\"v-204e6d2c#替换字符串中的空格\",\"482\":\"v-204e6d2c@0\",\"483\":\"v-204e6d2c@1\",\"484\":\"v-04547e7d\",\"485\":\"v-04547e7d#preorder-traversal\",\"486\":\"v-04547e7d#多叉树的前序遍历\",\"487\":\"v-04547e7d#二叉树的前序遍历\",\"488\":\"v-04547e7d#level-order-traversal\",\"489\":\"v-04547e7d#二叉树的层次遍历\",\"490\":\"v-04547e7d#inorder-traversal\",\"491\":\"v-04547e7d#trie-前缀树\",\"492\":\"v-04547e7d#bst\",\"493\":\"v-04547e7d#bst-中序遍历\",\"494\":\"v-04547e7d#lc653-两数之和-iv-输入-bst\",\"495\":\"v-04547e7d#解法1-dfs-hash-map\",\"496\":\"v-04547e7d#解法2-中序遍历-双指针\",\"497\":\"v-04547e7d#解法3-迭代-双指针\",\"498\":\"v-04547e7d#删除二叉搜索树中的节点\",\"499\":\"v-04547e7d#lc450-删除二叉搜索树中的节点\",\"500\":\"v-e7205a94\",\"501\":\"v-8f008b74\",\"502\":\"v-8f008b74#asm\",\"503\":\"v-8f008b74#output\",\"504\":\"v-8f008b74#input\",\"505\":\"v-8f008b74#clobbered-register-list\",\"506\":\"v-8f008b74#real-example\",\"507\":\"v-8f008b74#prfm\",\"508\":\"v-8f008b74#builtin-prefetch\",\"509\":\"v-8f008b74#prefetch-in-for-loop\",\"510\":\"v-8f008b74#mrs-pmu\",\"511\":\"v-8f008b74#memcpy\",\"512\":\"v-8f008b74@0\",\"513\":\"v-6f070438\",\"514\":\"v-6f070438#abstract\",\"515\":\"v-6f070438#instruction\",\"516\":\"v-6f070438#sub\",\"517\":\"v-6f070438#b\",\"518\":\"v-6f070438#tst\",\"519\":\"v-6f070438#fcvtz\",\"520\":\"v-6f070438#cbz\",\"521\":\"v-6f070438#tbnz\",\"522\":\"v-6f070438#sxtw\",\"523\":\"v-6f070438#内存读写\",\"524\":\"v-6f070438#ldr\",\"525\":\"v-6f070438#ldur\",\"526\":\"v-6f070438#ldp\",\"527\":\"v-6f070438#ldrb\",\"528\":\"v-6f070438#ldrh\",\"529\":\"v-6f070438#ldrsw\",\"530\":\"v-6f070438#adrp\",\"531\":\"v-6f070438#stp\",\"532\":\"v-6f070438#str\",\"533\":\"v-6f070438#strb\",\"534\":\"v-6f070438#stlxr\",\"535\":\"v-6f070438#位操作\",\"536\":\"v-6f070438#ubfx\",\"537\":\"v-6f070438#and\",\"538\":\"v-6f070438#lsl\",\"539\":\"v-6f070438#lsr\",\"540\":\"v-748d6736\",\"541\":\"v-40e90010\",\"542\":\"v-40e90010#abstract\",\"543\":\"v-40e90010#introduction\",\"544\":\"v-40e90010#questions\",\"545\":\"v-40e90010#related-work-on-vp\",\"546\":\"v-40e90010#motivation\",\"547\":\"v-40e90010#misprediction-recovery\",\"548\":\"v-40e90010#value-misprediction-scenarios\",\"549\":\"v-40e90010#validation-at-execution-vs-validation-at-commit-time\",\"550\":\"v-40e90010#reissue\",\"551\":\"v-40e90010#refetch\",\"552\":\"v-40e90010#back-to-back-prediction\",\"553\":\"v-40e90010#lvp\",\"554\":\"v-40e90010#stride\",\"555\":\"v-40e90010#fcm\",\"556\":\"v-40e90010#summary\",\"557\":\"v-40e90010#commit-time-validation-and-hardware-implications-on-the-out-of-order-engine\",\"558\":\"v-40e90010#maximizing-value-predictor-accuracy-through-confidence\",\"559\":\"v-40e90010#the-value-tagged-geometric-predictor\",\"560\":\"v-40e90010#evaluation-methodology\",\"561\":\"v-40e90010#value-predictors\",\"562\":\"v-40e90010#single-scheme-predictors\",\"563\":\"v-40e90010#hybrid-predictors\",\"564\":\"v-40e90010#simulator\",\"565\":\"v-40e90010#misprediction-recovery-1\",\"566\":\"v-40e90010#reference\",\"567\":\"v-2ae1f47c\",\"568\":\"v-2ae1f47c#value-prediction-in-a-nutshell\",\"569\":\"v-2ae1f47c#micro-29\",\"570\":\"v-2ae1f47c#abstract\",\"571\":\"v-2ae1f47c#taxonomy-of-speculative-execution\",\"572\":\"v-2ae1f47c#data-speculation\",\"573\":\"v-2ae1f47c#value-locality\",\"574\":\"v-2ae1f47c#exploiting-value-locality\",\"575\":\"v-2ae1f47c#value-prediction-unit\",\"576\":\"v-2ae1f47c#ct\",\"577\":\"v-2ae1f47c#vpt\",\"578\":\"v-2ae1f47c#verifying-predictions\",\"579\":\"v-2ae1f47c#hpca-19\",\"580\":\"v-2ae1f47c#abstract-1\",\"581\":\"v-2ae1f47c#summary\",\"582\":\"v-2ae1f47c#introduction\",\"583\":\"v-2ae1f47c#_4-predictors\",\"584\":\"v-2ae1f47c#lvp\",\"585\":\"v-2ae1f47c#cvp\",\"586\":\"v-2ae1f47c#cvp-1\",\"587\":\"v-2ae1f47c#cap\",\"588\":\"v-2ae1f47c#value-prediction\",\"589\":\"v-2ae1f47c#fpc-strategies\",\"590\":\"v-2ae1f47c#smart-training\",\"591\":\"v-2ae1f47c#accuracy-monitor-am\",\"592\":\"v-2ae1f47c#am\",\"593\":\"v-2ae1f47c#am-q-a\",\"594\":\"v-2ae1f47c#m-am\",\"595\":\"v-2ae1f47c#pc-am\",\"596\":\"v-2ae1f47c#heterogeneous-predictor-tables\",\"597\":\"v-2ae1f47c#discuss\",\"598\":\"v-2ae1f47c#asplos-96-lvp\",\"599\":\"v-2ae1f47c#abstract-2\",\"600\":\"v-2ae1f47c#value-locality-1\",\"601\":\"v-2ae1f47c#lvpt\",\"602\":\"v-2ae1f47c#lct-cvu\",\"603\":\"v-2ae1f47c#the-load-value-prediction-unit\",\"604\":\"v-2ae1f47c#conclusion\",\"605\":\"v-2ae1f47c#words\",\"606\":\"v-2ae1f47c#reference\",\"607\":\"v-b2869664\",\"608\":\"v-b2869664#docker-usage\",\"609\":\"v-b2869664#postgresql\",\"610\":\"v-b2869664#mysql\",\"611\":\"v-b2869664#mongodb\",\"612\":\"v-b2869664#jenkins\",\"613\":\"v-b2869664#tomcat\",\"614\":\"v-b2869664#spring-boot-with-docker\",\"615\":\"v-b2869664#tools\",\"616\":\"v-b2869664#portainer\",\"617\":\"v-b2869664#config\",\"618\":\"v-b2869664#wsl\",\"619\":\"v-b2869664#切换镜像仓到国内\",\"620\":\"v-b2869664#installation\",\"621\":\"v-b2869664#containers\",\"622\":\"v-b2869664#share-images\",\"623\":\"v-b2869664#services\",\"624\":\"v-b2869664#task\",\"625\":\"v-b2869664#swarms\",\"626\":\"v-b2869664@0\",\"627\":\"v-b2869664@1\",\"628\":\"v-23a1cfa6\",\"629\":\"v-23a1cfa6#设计模式总览\",\"630\":\"v-23a1cfa6@0\",\"631\":\"v-23a1cfa6@1\",\"632\":\"v-991cb39c\",\"633\":\"v-991cb39c@0\",\"634\":\"v-991cb39c@1\",\"635\":\"v-665918de\",\"636\":\"v-665918de#云计算基础\",\"637\":\"v-665918de#云计算的优点和缺点\",\"638\":\"v-665918de#云计算的部署\",\"639\":\"v-665918de#云服务的类型\",\"640\":\"v-665918de#云服务器的种类\",\"641\":\"v-665918de#华为公有云服务架构\",\"642\":\"v-665918de#华为云-cis-服务\",\"643\":\"v-665918de#cis-简介\",\"644\":\"v-665918de#ecs-弹性云服务器\",\"645\":\"v-665918de#冰山安全体系\",\"646\":\"v-665918de#云上安全挑战\",\"647\":\"v-665918de#防攻击体系\",\"648\":\"v-665918de#数据保护体系\",\"649\":\"v-665918de@0\",\"650\":\"v-665918de@1\",\"651\":\"v-47c7aec3\",\"652\":\"v-47c7aec3#art-概述\",\"653\":\"v-47c7aec3#aot-jit\",\"654\":\"v-47c7aec3#aot\",\"655\":\"v-47c7aec3#解释器与编译器\",\"656\":\"v-47c7aec3#aot-过程\",\"657\":\"v-47c7aec3#java-代码到-so\",\"658\":\"v-47c7aec3#使用-aot-产物\",\"659\":\"v-47c7aec3#aot-编译选项\",\"660\":\"v-47c7aec3#warm-up-which-class\",\"661\":\"v-47c7aec3#single-class\",\"662\":\"v-47c7aec3#分层编译\",\"663\":\"v-47c7aec3#class-文件格式\",\"664\":\"v-47c7aec3#abstract\",\"665\":\"v-47c7aec3#class-文件就是字节码么\",\"666\":\"v-47c7aec3#constant-pool\",\"667\":\"v-47c7aec3#jvm-基本结构\",\"668\":\"v-47c7aec3#dex-文件格式\",\"669\":\"v-47c7aec3#abstract-1\",\"670\":\"v-47c7aec3#dex-vs-class\",\"671\":\"v-47c7aec3#dex-文件格式-1\",\"672\":\"v-47c7aec3#java-内存布局\",\"673\":\"v-47c7aec3#length\",\"674\":\"v-47c7aec3#java-对象内存构成\",\"675\":\"v-47c7aec3#对象头-object-header\",\"676\":\"v-47c7aec3#mark-word\",\"677\":\"v-47c7aec3#klass-pointer\",\"678\":\"v-47c7aec3#实例数据-instance-data\",\"679\":\"v-47c7aec3#对齐填充-padding\",\"680\":\"v-47c7aec3#实战-demo\",\"681\":\"v-47c7aec3#基本构成研究\",\"682\":\"v-47c7aec3#数组的内存布局\",\"683\":\"v-47c7aec3@0\",\"684\":\"v-47c7aec3@1\",\"685\":\"v-584b32c2\",\"686\":\"v-584b32c2#栈-vs-寄存器虚拟机\",\"687\":\"v-584b32c2#对比\",\"688\":\"v-584b32c2#jvm\",\"689\":\"v-584b32c2#栈顶缓存\",\"690\":\"v-584b32c2#ir\",\"691\":\"v-584b32c2#ir-内存模型\",\"692\":\"v-584b32c2#汇编形式的-ir\",\"693\":\"v-584b32c2#ir-字节码解析\",\"694\":\"v-584b32c2#jni\",\"695\":\"v-584b32c2#概述\",\"696\":\"v-584b32c2#java-调用-native-的函数\",\"697\":\"v-584b32c2#jni-调用过程\",\"698\":\"v-584b32c2#jni-层分析\",\"699\":\"v-584b32c2#静态注册-vs-动态注册\",\"700\":\"v-584b32c2#art-启动过程\",\"701\":\"v-584b32c2#art-启动过程-1\",\"702\":\"v-584b32c2#zygote-创建-client\",\"703\":\"v-584b32c2#server-处理\",\"704\":\"v-584b32c2#jni-实例\",\"705\":\"v-584b32c2#native-java-analysis\",\"706\":\"v-584b32c2#jni-实现\",\"707\":\"v-584b32c2#initnativemethods\",\"708\":\"v-584b32c2#jninativeinterface\",\"709\":\"v-584b32c2@0\",\"710\":\"v-584b32c2@1\",\"711\":\"v-afc30e1e\",\"712\":\"v-afc30e1e#_1-预备工作\",\"713\":\"v-afc30e1e#_2-准备编译\",\"714\":\"v-afc30e1e#_3-开始编译\",\"715\":\"v-afc30e1e#_4-更新grub\",\"716\":\"v-afc30e1e#内核与内核模块\",\"717\":\"v-afc30e1e#内核模块\",\"718\":\"v-afc30e1e#内核模块的查看\",\"719\":\"v-afc30e1e#内核模块的加载与删除\",\"720\":\"v-afc30e1e@0\",\"721\":\"v-afc30e1e@1\",\"722\":\"v-a0ae48bc\",\"723\":\"v-a0ae48bc#kvm-介绍\",\"724\":\"v-a0ae48bc#虚拟化介绍\",\"725\":\"v-a0ae48bc#kvm-架构\",\"726\":\"v-a0ae48bc#网络虚拟化技术\",\"727\":\"v-a0ae48bc#虚拟机的网络模式\",\"728\":\"v-a0ae48bc#nat\",\"729\":\"v-a0ae48bc#host-only\",\"730\":\"v-a0ae48bc#bridged\",\"731\":\"v-a0ae48bc#internal\",\"732\":\"v-a0ae48bc#多网卡-bond-模式\",\"733\":\"v-a0ae48bc@0\",\"734\":\"v-a0ae48bc@1\",\"735\":\"v-8bc09bc2\",\"736\":\"v-8bc09bc2#thread-and-process\",\"737\":\"v-8bc09bc2#多进程\",\"738\":\"v-8bc09bc2#fork\",\"739\":\"v-8bc09bc2#exec\",\"740\":\"v-8bc09bc2#进程间通信\",\"741\":\"v-8bc09bc2#命名管道-fifo\",\"742\":\"v-8bc09bc2#ipc-消息\",\"743\":\"v-8bc09bc2#共享内存\",\"744\":\"v-8bc09bc2#ssh\",\"745\":\"v-8bc09bc2#python-file-server\",\"746\":\"v-8bc09bc2#program-status\",\"747\":\"v-8bc09bc2#system-information\",\"748\":\"v-8bc09bc2#add-choice-for-user-read-p\",\"749\":\"v-8bc09bc2#shell-array\",\"750\":\"v-8bc09bc2#sed\",\"751\":\"v-8bc09bc2#tr-and-awk\",\"752\":\"v-8bc09bc2#tar\",\"753\":\"v-8bc09bc2#查看端口号\",\"754\":\"v-8bc09bc2#守护进程\",\"755\":\"v-8bc09bc2@0\",\"756\":\"v-8bc09bc2@1\",\"757\":\"v-47356caa\",\"758\":\"v-47356caa#command\",\"759\":\"v-47356caa#configuration\",\"760\":\"v-47356caa#虚拟主机\",\"761\":\"v-47356caa#反向代理\",\"762\":\"v-47356caa#负载均衡\",\"763\":\"v-47356caa#概述\",\"764\":\"v-47356caa#ip-hash\",\"765\":\"v-47356caa#least-conn\",\"766\":\"v-47356caa#缓存\",\"767\":\"v-47356caa@0\",\"768\":\"v-47356caa@1\",\"769\":\"v-6e971449\",\"770\":\"v-6e971449#install\",\"771\":\"v-6e971449#hello-world\",\"772\":\"v-6e971449@0\",\"773\":\"v-6e971449@1\",\"774\":\"v-c9a9e278\",\"775\":\"v-c9a9e278#_1-abstract\",\"776\":\"v-c9a9e278#_2-dosbox-snap\",\"777\":\"v-c9a9e278#confinement\",\"778\":\"v-c9a9e278#parts\",\"779\":\"v-c9a9e278#_3-basic-about-snap\",\"780\":\"v-c9a9e278#install-snap-on-ubuntu\",\"781\":\"v-c9a9e278#using-the-snap-command\",\"782\":\"v-c9a9e278#_4-snapcraft\",\"783\":\"v-c9a9e278#setup-lxd\",\"784\":\"v-c9a9e278#test-a-container-build\",\"785\":\"v-c9a9e278#build-first-snap\",\"786\":\"v-c9a9e278#run-snapcraft\",\"787\":\"v-c9a9e278@0\",\"788\":\"v-c9a9e278@1\",\"789\":\"v-60405684\",\"790\":\"v-60405684#crud\",\"791\":\"v-60405684#cteate\",\"792\":\"v-60405684#read\",\"793\":\"v-60405684#update\",\"794\":\"v-60405684#delate\",\"795\":\"v-60405684#restore\",\"796\":\"v-60405684#flask-pymongo\",\"797\":\"v-60405684#python-sql\",\"798\":\"v-60405684#sqlite3\",\"799\":\"v-60405684@0\",\"800\":\"v-60405684@1\",\"801\":\"v-24140794\",\"802\":\"v-24140794#tools-mysql-工具软件\",\"803\":\"v-24140794#mysql-command\",\"804\":\"v-24140794#login\",\"805\":\"v-24140794#drop\",\"806\":\"v-24140794#alter\",\"807\":\"v-24140794#join\",\"808\":\"v-24140794#mysql-vs-dag\",\"809\":\"v-24140794#index-索引\",\"810\":\"v-24140794#explain\",\"811\":\"v-24140794#索引类型\",\"812\":\"v-24140794#索引内部数据结构\",\"813\":\"v-24140794#存储引擎\",\"814\":\"v-24140794#innodb\",\"815\":\"v-24140794#myisam\",\"816\":\"v-24140794@0\",\"817\":\"v-24140794@1\",\"818\":\"v-433f6675\",\"819\":\"v-433f6675#peewee\",\"820\":\"v-433f6675#query-operators\",\"821\":\"v-433f6675@0\",\"822\":\"v-433f6675@1\",\"823\":\"v-ba8dfb4a\",\"824\":\"v-ba8dfb4a#abstract\",\"825\":\"v-ba8dfb4a#redis-简述\",\"826\":\"v-ba8dfb4a#redis-原理\",\"827\":\"v-ba8dfb4a#数据淘汰策略\",\"828\":\"v-ba8dfb4a#redis-生产适用场景\",\"829\":\"v-ba8dfb4a#redis-优化\",\"830\":\"v-ba8dfb4a#redis-分布式锁\",\"831\":\"v-ba8dfb4a#分布式锁\",\"832\":\"v-ba8dfb4a#redis-分布式集群\",\"833\":\"v-ba8dfb4a#redis-分布式锁-1\",\"834\":\"v-ba8dfb4a#redis-cluster-槽\",\"835\":\"v-ba8dfb4a#redis-py\",\"836\":\"v-ba8dfb4a#strictredis\",\"837\":\"v-ba8dfb4a#append\",\"838\":\"v-ba8dfb4a@0\",\"839\":\"v-ba8dfb4a@1\",\"840\":\"v-069d6eb4\",\"841\":\"v-069d6eb4#abstract\",\"842\":\"v-069d6eb4#config\",\"843\":\"v-069d6eb4#初始化\",\"844\":\"v-069d6eb4#调用-task\",\"845\":\"v-069d6eb4@0\",\"846\":\"v-069d6eb4@1\",\"847\":\"v-65f5e0ae\",\"848\":\"v-65f5e0ae#reference\",\"849\":\"v-65f5e0ae#socketio\",\"850\":\"v-65f5e0ae#flask-structure\",\"851\":\"v-65f5e0ae#blueprint\",\"852\":\"v-65f5e0ae#virtual-environment\",\"853\":\"v-65f5e0ae#installation\",\"854\":\"v-65f5e0ae#usage\",\"855\":\"v-65f5e0ae#requirement-txt\",\"856\":\"v-65f5e0ae#pipenv\",\"857\":\"v-65f5e0ae#video-streaming-with-flask\",\"858\":\"v-65f5e0ae#flask-script\",\"859\":\"v-65f5e0ae#web-server\",\"860\":\"v-65f5e0ae#wsgi\",\"861\":\"v-65f5e0ae#nginx\",\"862\":\"v-65f5e0ae#django\",\"863\":\"v-65f5e0ae#installation-1\",\"864\":\"v-65f5e0ae#establish-application\",\"865\":\"v-65f5e0ae#new-words\",\"866\":\"v-65f5e0ae@0\",\"867\":\"v-65f5e0ae@1\",\"868\":\"v-0a40c72e\",\"869\":\"v-0a40c72e#什么是-spring\",\"870\":\"v-0a40c72e#ioc\",\"871\":\"v-0a40c72e#什么是-ioc\",\"872\":\"v-0a40c72e#bean-的注册\",\"873\":\"v-0a40c72e#applicationcontext-和-beanfactory\",\"874\":\"v-0a40c72e#bean-的生命周期\",\"875\":\"v-0a40c72e#spring-bean-的作用域\",\"876\":\"v-0a40c72e#spring-singleton-是线程安全吗\",\"877\":\"v-0a40c72e#aop\",\"878\":\"v-0a40c72e#什么是-aop\",\"879\":\"v-0a40c72e#enableaspectjautoproxy\",\"880\":\"v-0a40c72e#如何解决循环依赖\",\"881\":\"v-0a40c72e#循环依赖与-ioc\",\"882\":\"v-0a40c72e#spring-三大缓存\",\"883\":\"v-0a40c72e#一级缓存-singletonobjects\",\"884\":\"v-0a40c72e#二级缓存-earlysingletonobjects\",\"885\":\"v-0a40c72e#三级缓存-singletonfactories\",\"886\":\"v-0a40c72e@0\",\"887\":\"v-0a40c72e@1\",\"888\":\"v-47830055\",\"889\":\"v-47830055#installation\",\"890\":\"v-47830055#npm-install\",\"891\":\"v-47830055#responsive-charts\",\"892\":\"v-47830055#sample\",\"893\":\"v-47830055@0\",\"894\":\"v-47830055@1\",\"895\":\"v-6f9b9b5c\",\"896\":\"v-6f9b9b5c#insert-css\",\"897\":\"v-6f9b9b5c#multiple-style-sheets\",\"898\":\"v-6f9b9b5c#colors\",\"899\":\"v-6f9b9b5c@0\",\"900\":\"v-6f9b9b5c@1\",\"901\":\"v-50149ed0\",\"902\":\"v-50149ed0#json-string\",\"903\":\"v-50149ed0#foreach\",\"904\":\"v-50149ed0#eval\",\"905\":\"v-50149ed0#date-and-time\",\"906\":\"v-50149ed0#formatting\",\"907\":\"v-50149ed0#month-full-name\",\"908\":\"v-50149ed0#split-date\",\"909\":\"v-50149ed0#timestamp\",\"910\":\"v-50149ed0#sort-date\",\"911\":\"v-50149ed0#performance\",\"912\":\"v-50149ed0#var-let-and-const\",\"913\":\"v-50149ed0@0\",\"914\":\"v-50149ed0@1\",\"915\":\"v-f0ca0956\",\"916\":\"v-f0ca0956#install-node-js-and-npm-latest\",\"917\":\"v-f0ca0956#update-yarn\",\"918\":\"v-f0ca0956#安装-node-sass-的-bug-解决\",\"919\":\"v-f0ca0956@0\",\"920\":\"v-f0ca0956@1\",\"921\":\"v-773a8db9\",\"922\":\"v-773a8db9#animating-state\",\"923\":\"v-773a8db9#axios\",\"924\":\"v-773a8db9#localstorage\",\"925\":\"v-773a8db9#example\",\"926\":\"v-773a8db9#watch\",\"927\":\"v-773a8db9#usage\",\"928\":\"v-773a8db9#devtools\",\"929\":\"v-773a8db9#components\",\"930\":\"v-773a8db9#register\",\"931\":\"v-773a8db9#filters\",\"932\":\"v-773a8db9#directives\",\"933\":\"v-773a8db9#v-for\",\"934\":\"v-773a8db9#v-cloak\",\"935\":\"v-773a8db9#v-text\",\"936\":\"v-773a8db9#v-html\",\"937\":\"v-773a8db9#v-bind\",\"938\":\"v-773a8db9#v-on\",\"939\":\"v-773a8db9#key-modifiers\",\"940\":\"v-773a8db9#v-model\",\"941\":\"v-773a8db9#custom-directives\",\"942\":\"v-773a8db9#pre-processors\",\"943\":\"v-773a8db9#vue-cli\",\"944\":\"v-773a8db9#animate-css\",\"945\":\"v-773a8db9@0\",\"946\":\"v-773a8db9@1\",\"947\":\"v-af5a71f0\",\"948\":\"v-af5a71f0#socket\",\"949\":\"v-af5a71f0#data-struct\",\"950\":\"v-af5a71f0#值-结果参数\",\"951\":\"v-af5a71f0#listen\",\"952\":\"v-af5a71f0#accept\",\"953\":\"v-af5a71f0#select-poll-and-epoll\",\"954\":\"v-af5a71f0#select-的缺点\",\"955\":\"v-af5a71f0#epoll\",\"956\":\"v-af5a71f0#epoll-三种工作模式\",\"957\":\"v-af5a71f0#突破文件描述符上限\",\"958\":\"v-af5a71f0#libevent-install\",\"959\":\"v-af5a71f0#linux-install\",\"960\":\"v-af5a71f0#window-install\",\"961\":\"v-af5a71f0#libevent-框架概述\",\"962\":\"v-af5a71f0#bufferevent\",\"963\":\"v-af5a71f0@0\",\"964\":\"v-af5a71f0@1\",\"965\":\"v-6581599e\",\"966\":\"v-6581599e#http-2\",\"967\":\"v-6581599e#spdy\",\"968\":\"v-6581599e@0\",\"969\":\"v-6581599e@1\",\"970\":\"v-5ca32dc1\",\"971\":\"v-5ca32dc1#ip\",\"972\":\"v-5ca32dc1#ip-地址的长度\",\"973\":\"v-5ca32dc1#ip-地址的类别\",\"974\":\"v-5ca32dc1#tcp\",\"975\":\"v-5ca32dc1#questions\",\"976\":\"v-5ca32dc1#tcp-basics\",\"977\":\"v-5ca32dc1#tcp-四层模型\",\"978\":\"v-5ca32dc1#tcp-header\",\"979\":\"v-5ca32dc1#mtu\",\"980\":\"v-5ca32dc1#mss\",\"981\":\"v-5ca32dc1#ip-分片\",\"982\":\"v-5ca32dc1#tcp-三次握手\",\"983\":\"v-5ca32dc1#tcp-状态机\",\"984\":\"v-5ca32dc1#连接队列\",\"985\":\"v-5ca32dc1#指数退避\",\"986\":\"v-5ca32dc1#超时和重传\",\"987\":\"v-5ca32dc1#拥塞控制算法\",\"988\":\"v-5ca32dc1#tcp-data-flow\",\"989\":\"v-5ca32dc1#流量控制\",\"990\":\"v-5ca32dc1#model\",\"991\":\"v-5ca32dc1#tcp-udp\",\"992\":\"v-5ca32dc1#ftp\",\"993\":\"v-5ca32dc1#arp-网络层\",\"994\":\"v-5ca32dc1#工作原理\",\"995\":\"v-5ca32dc1#http\",\"996\":\"v-5ca32dc1#http-和-https\",\"997\":\"v-5ca32dc1#dns-解析\",\"998\":\"v-5ca32dc1#get-and-post\",\"999\":\"v-5ca32dc1#request-and-response\",\"1000\":\"v-5ca32dc1#tcp-socket\",\"1001\":\"v-5ca32dc1@0\",\"1002\":\"v-5ca32dc1@1\",\"1003\":\"v-23868300\",\"1004\":\"v-23868300#vuehello-and-welcome\",\"1005\":\"v-23868300@0\",\"1006\":\"v-23868300@1\",\"1007\":\"v-5f46fc24\",\"1008\":\"v-5f46fc24#abstract\",\"1009\":\"v-5f46fc24#objectives\",\"1010\":\"v-5f46fc24@0\",\"1011\":\"v-4be45edd\",\"1012\":\"v-4be45edd#开始\",\"1013\":\"v-4be45edd#选题背景\",\"1014\":\"v-4be45edd#精确的定位系统十分重要\",\"1015\":\"v-4be45edd#室内定位的发展过程\",\"1016\":\"v-4be45edd#室内定位的国内外研究现状\",\"1017\":\"v-4be45edd#论文结构\",\"1018\":\"v-4be45edd#研究方法\",\"1019\":\"v-4be45edd#多径效应\",\"1020\":\"v-4be45edd#csi\",\"1021\":\"v-4be45edd#计算机视觉相关理论\",\"1022\":\"v-4be45edd#特征金字塔\",\"1023\":\"v-4be45edd#基于-wifi-的室内定位算法\",\"1024\":\"v-4be45edd#csi-相位误差消除\",\"1025\":\"v-4be45edd#aoa-室内定位算法\",\"1026\":\"v-4be45edd@0\",\"1027\":\"v-4be45edd@1\",\"1028\":\"v-d3fb4212\",\"1029\":\"v-d3fb4212#_1-职业\",\"1030\":\"v-d3fb4212#_2-从非同凡响开始-绝不要做他人都在做的事\",\"1031\":\"v-d3fb4212#_2-1-如何像企业一样思考\",\"1032\":\"v-d3fb4212#_3-思考未来-你的目标是什么\",\"1033\":\"v-d3fb4212#设定大目标\",\"1034\":\"v-d3fb4212#追踪你的目标\",\"1035\":\"v-d3fb4212@0\",\"1036\":\"v-d3fb4212@1\",\"1037\":\"v-3fb526f6\",\"1038\":\"v-3fb526f6#_2018\",\"1039\":\"v-3fb526f6#_2018-11-20\",\"1040\":\"v-3fb526f6#_2018-11-22\",\"1041\":\"v-3fb526f6#_2018-11-29\",\"1042\":\"v-3fb526f6#_2018-12-14\",\"1043\":\"v-3fb526f6#_2019\",\"1044\":\"v-3fb526f6#_2019-1-24\",\"1045\":\"v-3fb526f6#_2020\",\"1046\":\"v-3fb526f6#_2020年3月26日\",\"1047\":\"v-3fb526f6#_2021\",\"1048\":\"v-3fb526f6#_2021年10月18日\",\"1049\":\"v-3fb526f6@0\",\"1050\":\"v-3fb526f6@1\",\"1051\":\"v-d02a9b4a\",\"1052\":\"v-d02a9b4a#july\",\"1053\":\"v-d02a9b4a#august\",\"1054\":\"v-d02a9b4a#september\",\"1055\":\"v-d02a9b4a#october\",\"1056\":\"v-d02a9b4a#november\",\"1057\":\"v-d02a9b4a#december\",\"1058\":\"v-d02a9b4a@0\",\"1059\":\"v-d02a9b4a@1\",\"1060\":\"v-760cfeb4\",\"1061\":\"v-760cfeb4@0\",\"1062\":\"v-760cfeb4@1\",\"1063\":\"v-0e7d25b1\",\"1064\":\"v-0e7d25b1#博客更新计划\",\"1065\":\"v-0e7d25b1#二分\",\"1066\":\"v-0e7d25b1#dfs、bfs\",\"1067\":\"v-0e7d25b1#动态规划\",\"1068\":\"v-0e7d25b1#背包\",\"1069\":\"v-0e7d25b1@0\",\"1070\":\"v-0e7d25b1@1\",\"1071\":\"v-55f83552\",\"1072\":\"v-55f83552#github-pages\",\"1073\":\"v-55f83552#install\",\"1074\":\"v-55f83552#build-site\",\"1075\":\"v-55f83552#blog-directory-structure\",\"1076\":\"v-55f83552#add-post\",\"1077\":\"v-55f83552#publish-blog\",\"1078\":\"v-55f83552#highlight-code\",\"1079\":\"v-55f83552#including-images-and-resources\",\"1080\":\"v-55f83552#add-https\",\"1081\":\"v-55f83552#highlight-js\",\"1082\":\"v-55f83552@0\",\"1083\":\"v-55f83552@1\",\"1084\":\"v-2568e49a\",\"1085\":\"v-2568e49a#features\",\"1086\":\"v-2568e49a#key-concept\",\"1087\":\"v-2568e49a#useful-skills\",\"1088\":\"v-2568e49a@0\",\"1089\":\"v-2568e49a@1\",\"1090\":\"v-49009b50\",\"1091\":\"v-49009b50#overview\",\"1092\":\"v-49009b50#plugin\",\"1093\":\"v-49009b50#create-a-bot\",\"1094\":\"v-49009b50#urllib-url-request\",\"1095\":\"v-49009b50#timed-transmission\",\"1096\":\"v-49009b50@0\",\"1097\":\"v-49009b50@1\",\"1098\":\"v-048f01ef\",\"1099\":\"v-048f01ef#installation-and-configration\",\"1100\":\"v-048f01ef#vuepress-update\",\"1101\":\"v-048f01ef#update-plugin-vuepress\",\"1102\":\"v-048f01ef#icons\",\"1103\":\"v-048f01ef#tags\",\"1104\":\"v-048f01ef#markdown-extend\",\"1105\":\"v-048f01ef#letex-formula\",\"1106\":\"v-048f01ef#custom-containers\",\"1107\":\"v-048f01ef#vuepress-plugin-tabs\",\"1108\":\"v-048f01ef#asset-handing-image\",\"1109\":\"v-048f01ef#引入代码块的方法\",\"1110\":\"v-048f01ef#代码块折叠\",\"1111\":\"v-048f01ef#格式化文件标准\",\"1112\":\"v-048f01ef#bug-fix\",\"1113\":\"v-048f01ef#momment-js-时区问题\",\"1114\":\"v-048f01ef#vueblog-出现崩溃\",\"1115\":\"v-048f01ef@0\",\"1116\":\"v-048f01ef@1\",\"1117\":\"v-0c49d9aa\",\"1118\":\"v-0c49d9aa#abstract\",\"1119\":\"v-0c49d9aa#signal-fade\",\"1120\":\"v-0c49d9aa#two-abservations\",\"1121\":\"v-0c49d9aa#challenge\",\"1122\":\"v-0c49d9aa#key-observation\",\"1123\":\"v-0c49d9aa#aoa\",\"1124\":\"v-0c49d9aa#design\",\"1125\":\"v-0c49d9aa#downconversion\",\"1126\":\"v-0c49d9aa#useful-word\",\"1127\":\"v-0c49d9aa#relevant-document\",\"1128\":\"v-0c49d9aa@0\",\"1129\":\"v-0c49d9aa@1\",\"1130\":\"v-79c3cda8\",\"1131\":\"v-79c3cda8#简介\",\"1132\":\"v-79c3cda8#rf-pose\",\"1133\":\"v-79c3cda8#计算机视觉模型\",\"1134\":\"v-79c3cda8#rf信号的获得和性能\",\"1135\":\"v-79c3cda8#方法\",\"1136\":\"v-79c3cda8#交叉监督模型\",\"1137\":\"v-79c3cda8#关键点检测\",\"1138\":\"v-79c3cda8#实现细节\",\"1139\":\"v-79c3cda8#new-words\",\"1140\":\"v-79c3cda8@0\",\"1141\":\"v-79c3cda8@1\",\"1142\":\"v-4461ee93\",\"1143\":\"v-7566c1b6\",\"1144\":\"v-7566c1b6#_1-1-预备工作\",\"1145\":\"v-7566c1b6#_1-2-配置csi-tool\",\"1146\":\"v-7566c1b6@0\",\"1147\":\"v-7566c1b6@1\",\"1148\":\"v-61849ea7\",\"1149\":\"v-61849ea7#no-bounding-boxs\",\"1150\":\"v-1c2d4f07\",\"1151\":\"v-1c2d4f07#_1-abstract\",\"1152\":\"v-1c2d4f07#_2-yolo\",\"1153\":\"v-1c2d4f07#_2-1-sliding-window\",\"1154\":\"v-1c2d4f07#_2-2-yolo\",\"1155\":\"v-1c2d4f07#_2-2-1-unified-detection\",\"1156\":\"v-1c2d4f07#_2-2-2-design\",\"1157\":\"v-1c2d4f07#_2-2-3-nms\",\"1158\":\"v-1c2d4f07#_3-face-recognition\",\"1159\":\"v-1c2d4f07#_3-1-dataset\",\"1160\":\"v-1c2d4f07#_3-2-darknet\",\"1161\":\"v-1c2d4f07#_3-2-1-installing-darknet\",\"1162\":\"v-1c2d4f07#_3-2-2-face-recognition\",\"1163\":\"v-1c2d4f07@0\",\"1164\":\"v-1c2d4f07@1\",\"1165\":\"v-4678a1a4\",\"1166\":\"v-4678a1a4#abstrcat\",\"1167\":\"v-4678a1a4#works\",\"1168\":\"v-4678a1a4#_1-相关工作\",\"1169\":\"v-4678a1a4#_2-mope\",\"1170\":\"v-4678a1a4#_3-改进的mope方法\",\"1171\":\"v-4678a1a4#_4-算法效率分析\",\"1172\":\"v-4678a1a4@0\",\"1173\":\"v-4678a1a4@1\",\"1174\":\"v-b22a90f8\",\"1175\":\"v-b22a90f8#tools-and-enviroment-installation\",\"1176\":\"v-b22a90f8#tex-tools\",\"1177\":\"v-b22a90f8#install-texlive-of-windows\",\"1178\":\"v-b22a90f8#install-texstdio\",\"1179\":\"v-b22a90f8#latex-项目结构\",\"1180\":\"v-b22a90f8#latex-formual-公式\",\"1181\":\"v-b22a90f8#矩阵转置\",\"1182\":\"v-b22a90f8#tools\",\"1183\":\"v-b22a90f8@0\",\"1184\":\"v-b22a90f8@1\",\"1185\":\"v-ec768da6\",\"1186\":\"v-ec768da6#lenet实现mnist\",\"1187\":\"v-ec768da6@0\",\"1188\":\"v-ec768da6@1\",\"1189\":\"v-5d13685f\",\"1190\":\"v-5d13685f#basic\",\"1191\":\"v-5d13685f#load-and-display-an-image\",\"1192\":\"v-5d13685f#imread\",\"1193\":\"v-5d13685f#namedwindow\",\"1194\":\"v-5d13685f#modify-and-save-an-image\",\"1195\":\"v-5d13685f#cvtcolor\",\"1196\":\"v-5d13685f#imwrite\",\"1197\":\"v-5d13685f#core-module\",\"1198\":\"v-5d13685f#mat\",\"1199\":\"v-5d13685f@0\",\"1200\":\"v-5d13685f@1\",\"1201\":\"v-1a5513e0\",\"1202\":\"v-1a5513e0#power-delay-profile\",\"1203\":\"v-1a5513e0#bandwidth-and-resolution\",\"1204\":\"v-1a5513e0#splicer\",\"1205\":\"v-1a5513e0#error-correction\",\"1206\":\"v-1a5513e0#sources-of-csi-measurement-errors\",\"1207\":\"v-1a5513e0#amplitude-error-correction\",\"1208\":\"v-1a5513e0#phase-error-correction\",\"1209\":\"v-1a5513e0#conclusion\",\"1210\":\"v-1a5513e0@0\",\"1211\":\"v-1a5513e0@1\",\"1212\":\"v-2d973c55\",\"1213\":\"v-2d973c55@0\",\"1214\":\"v-2d973c55@1\",\"1215\":\"v-5dde87ef\",\"1216\":\"v-5dde87ef#data-download-and-extract\",\"1217\":\"v-5dde87ef#tensorflow-persistent-storage\",\"1218\":\"v-5dde87ef#command-parameter\",\"1219\":\"v-5dde87ef#argparse\",\"1220\":\"v-5dde87ef#file-io\",\"1221\":\"v-5dde87ef#arrays\",\"1222\":\"v-5dde87ef@0\",\"1223\":\"v-5dde87ef@1\",\"1224\":\"v-5e4b461c\",\"1225\":\"v-5e4b461c#basic\",\"1226\":\"v-5e4b461c#重命名-move-文件夹\",\"1227\":\"v-5e4b461c#usage-android\",\"1228\":\"v-5e4b461c#滑动屏幕\",\"1229\":\"v-5e4b461c#usage-with-python\",\"1230\":\"v-5e4b461c#在-bat-中使用-python-脚本\",\"1231\":\"v-5e4b461c#for-loop\",\"1232\":\"v-5e4b461c#timeout\",\"1233\":\"v-5e4b461c@0\",\"1234\":\"v-5e4b461c@1\",\"1235\":\"v-369ba352\",\"1236\":\"v-369ba352#github-host-加速\",\"1237\":\"v-369ba352#ssh-server\",\"1238\":\"v-369ba352#repo\",\"1239\":\"v-369ba352#workflow-usage\",\"1240\":\"v-369ba352#repo-init\",\"1241\":\"v-369ba352#git-reset\",\"1242\":\"v-369ba352#删除新增文件\",\"1243\":\"v-369ba352#git-config\",\"1244\":\"v-369ba352#github-accelerate\",\"1245\":\"v-369ba352#git-clone\",\"1246\":\"v-369ba352#tag\",\"1247\":\"v-369ba352#status\",\"1248\":\"v-369ba352#gitignore\",\"1249\":\"v-369ba352#differ\",\"1250\":\"v-369ba352#remote\",\"1251\":\"v-369ba352#git-别名\",\"1252\":\"v-369ba352#git-branch\",\"1253\":\"v-369ba352#分支管理\",\"1254\":\"v-369ba352#reference\",\"1255\":\"v-369ba352@0\",\"1256\":\"v-369ba352@1\",\"1257\":\"v-40db580a\",\"1258\":\"v-40db580a#reference\",\"1259\":\"v-40db580a#plugin-manager\",\"1260\":\"v-40db580a@0\",\"1261\":\"v-40db580a@1\",\"1262\":\"v-8537eaea\",\"1263\":\"v-8537eaea#_1-配置shadowsocks客户端\",\"1264\":\"v-8537eaea#_2-配置91云一键加速工具\",\"1265\":\"v-8537eaea#_3-kcptun-加速工具\",\"1266\":\"v-1d0c7e2e\",\"1267\":\"v-1d0c7e2e#base\",\"1268\":\"v-1d0c7e2e#devices\",\"1269\":\"v-1d0c7e2e#锁定、解锁\",\"1270\":\"v-1d0c7e2e#重启、关机\",\"1271\":\"v-1d0c7e2e#蓝牙\",\"1272\":\"v-1d0c7e2e#wi-fi\",\"1273\":\"v-1d0c7e2e#app\",\"1274\":\"v-1d0c7e2e#安装、删除\",\"1275\":\"v-1d0c7e2e#获取-app-activity\",\"1276\":\"v-1d0c7e2e#启动-app\",\"1277\":\"v-1d0c7e2e#关闭-app\",\"1278\":\"v-1d0c7e2e#获取-pid\",\"1279\":\"v-1d0c7e2e#获取-tid\",\"1280\":\"v-1d0c7e2e#tap-and-slide\",\"1281\":\"v-1d0c7e2e#slide\",\"1282\":\"v-1d0c7e2e#tap\",\"1283\":\"v-1d0c7e2e#other-skill\",\"1284\":\"v-1d0c7e2e#等待设备重启\",\"1285\":\"v-1d0c7e2e#写-sn\",\"1286\":\"v-1d0c7e2e#push-path\",\"1287\":\"v-1d0c7e2e#art\",\"1288\":\"v-1d0c7e2e@0\",\"1289\":\"v-1d0c7e2e@1\",\"1290\":\"v-0244025b\",\"1291\":\"v-0244025b#overview\",\"1292\":\"v-0244025b#ipc-通信\",\"1293\":\"v-0244025b#binder-线程池\",\"1294\":\"v-0244025b#startthreadpool\",\"1295\":\"v-0244025b#spawnpooledthread\",\"1296\":\"v-0244025b#poolthread\",\"1297\":\"v-0244025b#summary\",\"1298\":\"v-0244025b#ipc-jointhreadpool\",\"1299\":\"v-0244025b#source-code\",\"1300\":\"v-0244025b#getandexecutecommand\",\"1301\":\"v-0244025b#talkwithdriver\",\"1302\":\"v-0244025b#binder-application-layer\",\"1303\":\"v-0244025b#binder-framework-native\",\"1304\":\"v-0244025b#bbinder\",\"1305\":\"v-0244025b#bpbinder\",\"1306\":\"v-0244025b#binder-driver\",\"1307\":\"v-0244025b#binder-ioctl\",\"1308\":\"v-0244025b#binder-transaction\",\"1309\":\"v-0244025b#binder-protocol\",\"1310\":\"v-0244025b#abstract-of-bc-protocol\",\"1311\":\"v-0244025b#bc-transaction-bc-reply\",\"1312\":\"v-0244025b#binder-thread-write\",\"1313\":\"v-0244025b#binder-ioctl-1\",\"1314\":\"v-0244025b#binder-ioctl-write-read\",\"1315\":\"v-0244025b#bc-free-buffer\",\"1316\":\"v-0244025b#br-transaction-complete\",\"1317\":\"v-0244025b#br-transaction\",\"1318\":\"v-0244025b#mmap-技术\",\"1319\":\"v-0244025b#pracel\",\"1320\":\"v-0244025b#call-stack\",\"1321\":\"v-0244025b#pracel-object-java\",\"1322\":\"v-0244025b#reference\",\"1323\":\"v-0244025b@0\",\"1324\":\"v-0244025b@1\",\"1325\":\"v-fb839d12\",\"1326\":\"v-fb839d12#phases-overview\",\"1327\":\"v-fb839d12#phase-1\",\"1328\":\"v-fb839d12#ohos\",\"1329\":\"v-fb839d12#android\",\"1330\":\"v-fb839d12#phase-1-summary\",\"1331\":\"v-fb839d12#phase-2\",\"1332\":\"v-fb839d12#ohos-1\",\"1333\":\"v-fb839d12#android-1\",\"1334\":\"v-fb839d12#phase-2-summary\",\"1335\":\"v-fb839d12@0\",\"1336\":\"v-fb839d12@1\",\"1337\":\"v-f819ebd4\",\"1338\":\"v-f819ebd4#概览\",\"1339\":\"v-f819ebd4#数据结构分析\",\"1340\":\"v-f819ebd4#binder-alloc\",\"1341\":\"v-f819ebd4#binder-buffer\",\"1342\":\"v-f819ebd4#mmap-的两个函数\",\"1343\":\"v-f819ebd4#binder-alloc-mmap-handler\",\"1344\":\"v-f819ebd4#binder-alloc-copy-user-to-buffer\",\"1345\":\"v-f819ebd4#caller-binder-transaction\",\"1346\":\"v-f819ebd4#callee\",\"1347\":\"v-f819ebd4@0\",\"1348\":\"v-f819ebd4@1\",\"1349\":\"v-4ed4f65e\",\"1350\":\"v-4ed4f65e#abstract\",\"1351\":\"v-4ed4f65e#binder-优缺点\",\"1352\":\"v-4ed4f65e#优点\",\"1353\":\"v-4ed4f65e#缺点\",\"1354\":\"v-4ed4f65e#其他选择-dipc\",\"1355\":\"v-4ed4f65e#dipc-设计理念\",\"1356\":\"v-4ed4f65e#dipc-优点\",\"1357\":\"v-4ed4f65e#dipc-缺点\",\"1358\":\"v-4ed4f65e#axx\",\"1359\":\"v-4ed4f65e#总结\",\"1360\":\"v-4ed4f65e@0\",\"1361\":\"v-4ed4f65e@1\",\"1362\":\"v-3704c261\",\"1363\":\"v-3704c261#abstract\",\"1364\":\"v-3704c261#art-create\",\"1365\":\"v-3704c261#jni-createjavavm\",\"1366\":\"v-3704c261#runtime-create\",\"1367\":\"v-3704c261#runtime-init\",\"1368\":\"v-3704c261@0\",\"1369\":\"v-3704c261@1\",\"1370\":\"v-b86e3ea4\",\"1371\":\"v-b86e3ea4#abstract\",\"1372\":\"v-b86e3ea4#art-oat\",\"1373\":\"v-b86e3ea4#oat-文件的产生\",\"1374\":\"v-b86e3ea4#dex2oat-什么时候被触发\",\"1375\":\"v-b86e3ea4#dex2oat-code\",\"1376\":\"v-b86e3ea4#main\",\"1377\":\"v-b86e3ea4@0\",\"1378\":\"v-b86e3ea4@1\",\"1379\":\"v-479a5591\",\"1380\":\"v-479a5591#forwarding-ptr\",\"1381\":\"v-479a5591#read-barrier-in-art-gc\",\"1382\":\"v-479a5591#concepts\",\"1383\":\"v-479a5591#reference-of-object\",\"1384\":\"v-479a5591#colors-in-gc\",\"1385\":\"v-479a5591#overview\",\"1386\":\"v-479a5591#cc-gc-colors\",\"1387\":\"v-479a5591#gc-phases\",\"1388\":\"v-479a5591#marking-phase\",\"1389\":\"v-479a5591#copying-phase\",\"1390\":\"v-479a5591@0\",\"1391\":\"v-479a5591@1\",\"1392\":\"v-48b40460\",\"1393\":\"v-48b40460#abstract\",\"1394\":\"v-48b40460#jni\",\"1395\":\"v-48b40460#abstract-1\",\"1396\":\"v-48b40460#java-world-to-native-world\",\"1397\":\"v-48b40460#jni-层分析\",\"1398\":\"v-48b40460#静态注册-vs-动态注册\",\"1399\":\"v-48b40460#jni-code-analysis\",\"1400\":\"v-48b40460#java-native\",\"1401\":\"v-48b40460#jni-定义\",\"1402\":\"v-48b40460#register-java-lang-string\",\"1403\":\"v-48b40460#register-native-methods\",\"1404\":\"v-48b40460#jni-注册\",\"1405\":\"v-48b40460#initnativemethods\",\"1406\":\"v-48b40460#runtime-start\",\"1407\":\"v-48b40460@0\",\"1408\":\"v-48b40460@1\",\"1409\":\"v-43ef4cb5\",\"1410\":\"v-9c9c2c4a\",\"1411\":\"v-9c9c2c4a#abstract\",\"1412\":\"v-511c2d1d\",\"1413\":\"v-511c2d1d#abstract\",\"1414\":\"v-511c2d1d#concepts\",\"1415\":\"v-511c2d1d#argument\",\"1416\":\"v-511c2d1d#verbose\",\"1417\":\"v-511c2d1d#destdir\",\"1418\":\"v-511c2d1d#env\",\"1419\":\"v-511c2d1d#binary-directory\",\"1420\":\"v-511c2d1d#functions\",\"1421\":\"v-511c2d1d#target-include-directories\",\"1422\":\"v-511c2d1d#add-library\",\"1423\":\"v-511c2d1d#target-link-libraries\",\"1424\":\"v-511c2d1d#install\",\"1425\":\"v-511c2d1d#target-compile-definitions\",\"1426\":\"v-511c2d1d#find-package\",\"1427\":\"v-511c2d1d#set\",\"1428\":\"v-511c2d1d#target-compile-features\",\"1429\":\"v-511c2d1d#message\",\"1430\":\"v-511c2d1d#compiler-option\",\"1431\":\"v-511c2d1d#clang\",\"1432\":\"v-511c2d1d#ninja\",\"1433\":\"v-511c2d1d#sub-projects\",\"1434\":\"v-511c2d1d#add-subdirectory\",\"1435\":\"v-511c2d1d#reference\",\"1436\":\"v-2718de28\",\"1437\":\"v-2718de28#abstract\",\"1438\":\"v-2718de28#基础概念\",\"1439\":\"v-2718de28#makefile-的规则\",\"1440\":\"v-2718de28#hello-world\",\"1441\":\"v-2718de28#makefile-变量\",\"1442\":\"v-2718de28#实战-makefile\",\"1443\":\"v-2718de28#概览\",\"1444\":\"v-2718de28#单文件夹例子\",\"1445\":\"v-2718de28#hello-world-1\",\"1446\":\"v-2718de28#自定义的头文件\",\"1447\":\"v-2718de28#多文件夹例子\",\"1448\":\"v-2718de28#例子01\",\"1449\":\"v-2718de28#例子02\",\"1450\":\"v-2718de28#problems\",\"1451\":\"v-2718de28#reference\",\"1452\":\"v-6039c4ba\",\"1453\":\"v-6039c4ba#scp\",\"1454\":\"v-6039c4ba#压缩-解压缩\",\"1455\":\"v-6039c4ba@0\",\"1456\":\"v-1dcf5881\",\"1457\":\"v-1dcf5881#abstract\",\"1458\":\"v-1dcf5881#目标文件\",\"1459\":\"v-1dcf5881#目标文件的格式\",\"1460\":\"v-1dcf5881#segement\",\"1461\":\"v-1dcf5881#section\",\"1462\":\"v-1dcf5881#objdump\",\"1463\":\"v-1dcf5881#example\",\"1464\":\"v-1dcf5881#readelf\",\"1465\":\"v-1dcf5881#use-readelf\",\"1466\":\"v-1dcf5881@0\",\"1467\":\"v-dc6459e4\",\"1468\":\"v-dc6459e4#abstract\",\"1469\":\"v-dc6459e4#size-t-1\",\"1470\":\"v-dc6459e4#why-size-t-matters\",\"1471\":\"v-dc6459e4#size-t-2\",\"1472\":\"v-dc6459e4#reference\",\"1473\":\"v-00429853\",\"1474\":\"v-00429853#introduction\",\"1475\":\"v-00429853#clod-boot\",\"1476\":\"v-00429853#cloud-boot-path\",\"1477\":\"v-00429853#summary\",\"1478\":\"v-00429853#bl1\",\"1479\":\"v-00429853#el0-el3\",\"1480\":\"v-00429853#bl1-实现\",\"1481\":\"v-00429853#determination-of-boot-path\",\"1482\":\"v-00429853#architectural-initialization\",\"1483\":\"v-00429853#exception-vectors\",\"1484\":\"v-00429853#mmu-setup\",\"1485\":\"v-00429853#control-register-setup\",\"1486\":\"v-00429853#platform-initialization\",\"1487\":\"v-00429853#bl2-image-load-and-execution\",\"1488\":\"v-00429853#summary-1\",\"1489\":\"v-00429853#bl2\",\"1490\":\"v-00429853#abstract\",\"1491\":\"v-00429853#architectural-initialization-1\",\"1492\":\"v-00429853#platform-initialization-1\",\"1493\":\"v-00429853#bl3-0-system-control-processor-firmware-image-load\",\"1494\":\"v-00429853#bl3-1-el3-runtime-firmware-image-load\",\"1495\":\"v-00429853#bl3-2-secure-el1-payload-image-load\",\"1496\":\"v-00429853#bl3-3-non-trusted-firmware-image-load\",\"1497\":\"v-00429853#bl3-1-1\",\"1498\":\"v-00429853#architectural-initialization-2\",\"1499\":\"v-00429853#platform-initialization-2\",\"1500\":\"v-00429853#about\",\"1501\":\"v-00429853#firmware\",\"1502\":\"v-00429853#refenence\",\"1503\":\"v-1cd9ff1e\",\"1504\":\"v-5a6c019d\",\"1505\":\"v-5a6c019d#abstract\",\"1506\":\"v-5a6c019d#i2c-and-i3c\",\"1507\":\"v-5a6c019d#i2c\",\"1508\":\"v-5a6c019d#i3c\",\"1509\":\"v-5a6c019d#i2c-vs-i3c\",\"1510\":\"v-5a6c019d#i2c-problem\",\"1511\":\"v-5a6c019d#reference\",\"1512\":\"v-73cae827\",\"1513\":\"v-73cae827#abstract\",\"1514\":\"v-73cae827#function-flow\",\"1515\":\"v-73cae827#cpu-startup-entry\",\"1516\":\"v-73cae827#do-idle\",\"1517\":\"v-73cae827#local-irq-dis-en-able\",\"1518\":\"v-73cae827#cpuidle-idle-call\",\"1519\":\"v-73cae827#call-cpuidle\",\"1520\":\"v-73cae827#cpuidle-enter-state\",\"1521\":\"v-73cae827#broadcast\",\"1522\":\"v-73cae827#cpuidle-flag-tlb-flushed\",\"1523\":\"v-73cae827#sched-idle-set-state\",\"1524\":\"v-73cae827#rcu-idle-enter\",\"1525\":\"v-73cae827#enter\",\"1526\":\"v-73cae827#rcu-idle-exit\",\"1527\":\"v-73cae827#critical-timings\",\"1528\":\"v-73cae827#idle-polling\",\"1529\":\"v-73cae827#define-per-cpu\",\"1530\":\"v-73cae827#idle-data-struct\",\"1531\":\"v-73cae827#abstract-1\",\"1532\":\"v-73cae827#cpuidle-core\",\"1533\":\"v-73cae827#cpuidle-device\",\"1534\":\"v-73cae827#cpuidle-driver\",\"1535\":\"v-73cae827#something-else\",\"1536\":\"v-73cae827#tickless\",\"1537\":\"v-73cae827#wfi\",\"1538\":\"v-73cae827@0\",\"1539\":\"v-a01fc562\",\"1540\":\"v-a01fc562#abstract\",\"1541\":\"v-a01fc562#tick-nohz-idle-stop-tick\",\"1542\":\"v-a01fc562#tick-broadcast-oneshot-control\",\"1543\":\"v-a01fc562#tick-oneshot-wakeup-control\",\"1544\":\"v-a01fc562#tick-broadcast-oneshot-control-1\",\"1545\":\"v-a01fc562#tick-broadcast-enter\",\"1546\":\"v-a01fc562#tick-broadcast-exit\",\"1547\":\"v-a01fc562@0\",\"1548\":\"v-a5adecbc\",\"1549\":\"v-a5adecbc#abstract\",\"1550\":\"v-a5adecbc#initcall\",\"1551\":\"v-a5adecbc#initcall-n-init\",\"1552\":\"v-a5adecbc#thermal-postcore-initcall\",\"1553\":\"v-a5adecbc#section\",\"1554\":\"v-a5adecbc#attribute\",\"1555\":\"v-a5adecbc#linux-内核初始化\",\"1556\":\"v-a5adecbc#start-kernel\",\"1557\":\"v-a5adecbc#init-线程\",\"1558\":\"v-a5adecbc#reference\",\"1559\":\"v-7e64a095\",\"1560\":\"v-7e64a095#abstract\",\"1561\":\"v-7e64a095#notifier-struct\",\"1562\":\"v-7e64a095#notifier-chain-notifier-head\",\"1563\":\"v-7e64a095#atomic-notifier-head\",\"1564\":\"v-7e64a095#blocking-notifier-head\",\"1565\":\"v-7e64a095#raw-notifier-head\",\"1566\":\"v-7e64a095#srcu-notifier-head\",\"1567\":\"v-7e64a095#notifier-block\",\"1568\":\"v-7e64a095#apis\",\"1569\":\"v-7e64a095#abstract-1\",\"1570\":\"v-7e64a095#notifier-chain-register\",\"1571\":\"v-7e64a095#notifier-chain-register-1\",\"1572\":\"v-7e64a095#notifier-chain-unregister\",\"1573\":\"v-7e64a095#notifier-call-chain\",\"1574\":\"v-7e64a095#usage\",\"1575\":\"v-7e64a095#usage-init\",\"1576\":\"v-7e64a095#usage-register-unregister-and-call\",\"1577\":\"v-7e64a095#usage-example\",\"1578\":\"v-7e64a095#how-notifier-works\",\"1579\":\"v-7e64a095#summary\",\"1580\":\"v-7e64a095#something\",\"1581\":\"v-7e64a095#reference\",\"1582\":\"v-401f2813\",\"1583\":\"v-401f2813#rcu\",\"1584\":\"v-401f2813#qs\",\"1585\":\"v-401f2813#rcu-idle-enter\",\"1586\":\"v-401f2813#note-gp-changes\",\"1587\":\"v-401f2813@0\",\"1588\":\"v-782a11c0\",\"1589\":\"v-782a11c0#abstract\",\"1590\":\"v-782a11c0#thermal-zone-device\",\"1591\":\"v-782a11c0#thermal-zone-params-tzp\",\"1592\":\"v-782a11c0#thermal-bind-params\",\"1593\":\"v-782a11c0#thermal-zone-device-ops-ops\",\"1594\":\"v-782a11c0#int-get-temp\",\"1595\":\"v-782a11c0#int-get-trip-temp\",\"1596\":\"v-782a11c0#int-set-trip-temp\",\"1597\":\"v-782a11c0#trip-point\",\"1598\":\"v-782a11c0#source-code\",\"1599\":\"v-782a11c0#thermal-governal\",\"1600\":\"v-782a11c0#thermal-cooling-device\",\"1601\":\"v-782a11c0#thermal-core\",\"1602\":\"v-782a11c0#struct-thermal-governor\",\"1603\":\"v-782a11c0#reference\",\"1604\":\"v-7fee27c3\",\"1605\":\"v-7fee27c3#abstract\",\"1606\":\"v-7fee27c3#thermal-register-governors\",\"1607\":\"v-7fee27c3#thermal-register-governor\",\"1608\":\"v-7fee27c3#find-governor\",\"1609\":\"v-7fee27c3#thermal-set-governor\",\"1610\":\"v-7fee27c3#thermal-zone-device-set-policy\",\"1611\":\"v-7fee27c3#thermal-zone-device-register\",\"1612\":\"v-7fee27c3#class-register\",\"1613\":\"v-7fee27c3#of-parse-thermal-zones\",\"1614\":\"v-7fee27c3#register-pm-notifier\",\"1615\":\"v-7fee27c3#reference\",\"1616\":\"v-30fb4bff\",\"1617\":\"v-30fb4bff#foreword-and-acknowledgements\",\"1618\":\"v-30fb4bff#risc-v-risk-five\",\"1619\":\"v-30fb4bff#xv6\",\"1620\":\"v-30fb4bff#register\",\"1621\":\"v-30fb4bff#operation-system-interfaces\",\"1622\":\"v-30fb4bff#references\",\"1623\":\"v-d3ee1044\",\"1624\":\"v-ad41f4c0\",\"1625\":\"v-ad41f4c0#demo-实现\",\"1626\":\"v-ad41f4c0#_1-定义-handler\",\"1627\":\"v-ad41f4c0#_2-创建处理器-chain\",\"1628\":\"v-ad41f4c0#annotationawareordercomparator\",\"1629\":\"v-ad41f4c0#_3-定义-invocation-类\",\"1630\":\"v-ad41f4c0#_4-业务逻辑和责任链整合\",\"1631\":\"v-00589c8b\",\"1632\":\"v-d58c61d4\",\"1633\":\"v-cb731cb0\",\"1634\":\"v-53fbc771\",\"1635\":\"v-2da4bd44\",\"1636\":\"v-9fc4f522\",\"1637\":\"v-4cc05387\",\"1638\":\"v-4cc05387#vscode-themes\",\"1639\":\"v-24fc3ea5\",\"1640\":\"v-24fc3ea5#tools\",\"1641\":\"v-24fc3ea5#source\",\"1642\":\"v-24fc3ea5#linux\",\"1643\":\"v-24fc3ea5#windows\",\"1644\":\"v-8b61eff2\",\"1645\":\"v-8b61eff2#_1-配置shadowsocks客户端\",\"1646\":\"v-8b61eff2#_2-配置91云一键加速工具\",\"1647\":\"v-8b61eff2#_3-kcptun-加速工具\",\"1648\":\"v-6b46e46e\",\"1649\":\"v-f46f2e2a\",\"1650\":\"v-76fdf177\",\"1651\":\"v-2930025d\",\"1652\":\"v-bd2f22ba\",\"1653\":\"v-465c18a6\",\"1654\":\"v-8cab0dda\",\"1655\":\"v-f3972896\",\"1656\":\"v-0960db3e\",\"1657\":\"v-934d5386\",\"1658\":\"v-6fb21a0b\",\"1659\":\"v-3324fe94\",\"1660\":\"v-6cf459c0\",\"1661\":\"v-25b47c13\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,12],\"1\":[1,2],\"2\":[1],\"3\":[1,2],\"4\":[1],\"5\":[1,31],\"6\":[1,23],\"7\":[1],\"8\":[2,91],\"9\":[2,66],\"10\":[2,115],\"11\":[2,96],\"12\":[2,43],\"13\":[2,68],\"14\":[2,46],\"15\":[2,83],\"16\":[2],\"17\":[1],\"18\":[2],\"19\":[2,37],\"20\":[3,70],\"21\":[3,52],\"22\":[3,53],\"23\":[1,34],\"24\":[1],\"25\":[2,40],\"26\":[1,25],\"27\":[1,21],\"28\":[2,26],\"29\":[1],\"30\":[1,50],\"31\":[1,30],\"32\":[1,32],\"33\":[4,50],\"34\":[2,108],\"35\":[3,41],\"36\":[4,78],\"37\":[1,3],\"38\":[null,null,1],\"39\":[null,null,3],\"40\":[2,4],\"41\":[1],\"42\":[1,51],\"43\":[1,29],\"44\":[1],\"45\":[1,15],\"46\":[1,57],\"47\":[1,83],\"48\":[1],\"49\":[4,54],\"50\":[2,9],\"51\":[2,42],\"52\":[2,57],\"53\":[2,12],\"54\":[2,44],\"55\":[2],\"56\":[2,68],\"57\":[2,36],\"58\":[2,20],\"59\":[2,62],\"60\":[2,23],\"61\":[2,71],\"62\":[2,33],\"63\":[4,12],\"64\":[1,36],\"65\":[2,5],\"66\":[null,null,1],\"67\":[null,null,2],\"68\":[1],\"69\":[1,3],\"70\":[1,14],\"71\":[1,14],\"72\":[1],\"73\":[1,15],\"74\":[2,81],\"75\":[2,92],\"76\":[2,61],\"77\":[2,68],\"78\":[2,16],\"79\":[1,63],\"80\":[1,50],\"81\":[1,34],\"82\":[1],\"83\":[1,18],\"84\":[2,48],\"85\":[2,44],\"86\":[2,126],\"87\":[2,82],\"88\":[2,169],\"89\":[2,87],\"90\":[2,75],\"91\":[2,102],\"92\":[2,96],\"93\":[1],\"94\":[2,21],\"95\":[2,18],\"96\":[3,27],\"97\":[3,19],\"98\":[3,24],\"99\":[3],\"100\":[3,28],\"101\":[3],\"102\":[4,118],\"103\":[4,42],\"104\":[3,30],\"105\":[1],\"106\":[1,8],\"107\":[1],\"108\":[1,44],\"109\":[null,null,1],\"110\":[null,null,3],\"111\":[1],\"112\":[1,16],\"113\":[1],\"114\":[3,31],\"115\":[1,36],\"116\":[3,7],\"117\":[1,27],\"118\":[2,115],\"119\":[3],\"120\":[2,122],\"121\":[4],\"122\":[2,59],\"123\":[4],\"124\":[2,78],\"125\":[3,66],\"126\":[1,29],\"127\":[1,10],\"128\":[1,21],\"129\":[4],\"130\":[2,62],\"131\":[4],\"132\":[2,69],\"133\":[4],\"134\":[3,47],\"135\":[5],\"136\":[3,57],\"137\":[4],\"138\":[2,60],\"139\":[1,30],\"140\":[1,3],\"141\":[null,null,1],\"142\":[null,null,2],\"143\":[2],\"144\":[1,28],\"145\":[1],\"146\":[1,29],\"147\":[1,58],\"148\":[1],\"149\":[2,56],\"150\":[2,82],\"151\":[4,29],\"152\":[4,37],\"153\":[5,66],\"154\":[2,46],\"155\":[3,102],\"156\":[2,86],\"157\":[4,34],\"158\":[2,44],\"159\":[2,41],\"160\":[2,97],\"161\":[2],\"162\":[1,3],\"163\":[1],\"164\":[2,40],\"165\":[5,117],\"166\":[3,32],\"167\":[4,52],\"168\":[3,51],\"169\":[2,80],\"170\":[1,3],\"171\":[1],\"172\":[4,31],\"173\":[3,55],\"174\":[1],\"175\":[2,15],\"176\":[2,17],\"177\":[2,62],\"178\":[2,18],\"179\":[2,20],\"180\":[1,20],\"181\":[1],\"182\":[2,44],\"183\":[3,21],\"184\":[1,54],\"185\":[1,66],\"186\":[2,83],\"187\":[1,2],\"188\":[1],\"189\":[1],\"190\":[1,30],\"191\":[2,18],\"192\":[3,41],\"193\":[2,57],\"194\":[2,175],\"195\":[2,86],\"196\":[1,114],\"197\":[1,37],\"198\":[1,74],\"199\":[2,11],\"200\":[2,20],\"201\":[2,22],\"202\":[2,26],\"203\":[5,76],\"204\":[6,137],\"205\":[1,34],\"206\":[1,25],\"207\":[2,15],\"208\":[4,25],\"209\":[5],\"210\":[2,38],\"211\":[4,14],\"212\":[3,70],\"213\":[1,28],\"214\":[2,14],\"215\":[2,12],\"216\":[2,35],\"217\":[3,72],\"218\":[2,28],\"219\":[2],\"220\":[1,32],\"221\":[2,23],\"222\":[2,6],\"223\":[2],\"224\":[1,71],\"225\":[2,37],\"226\":[1,34],\"227\":[1,113],\"228\":[1],\"229\":[1,12],\"230\":[1,15],\"231\":[null,null,1],\"232\":[1],\"233\":[1,24],\"234\":[4,113],\"235\":[4,116],\"236\":[9,310],\"237\":[7,171],\"238\":[5,3],\"239\":[2,2],\"240\":[2,2],\"241\":[7,64],\"242\":[3,2],\"243\":[5,136],\"244\":[5,19],\"245\":[6,366],\"246\":[null,null,1],\"247\":[2],\"248\":[1,9],\"249\":[2],\"250\":[1,58],\"251\":[1,52],\"252\":[1,75],\"253\":[1,56],\"254\":[1],\"255\":[4,89],\"256\":[2,154],\"257\":[1,5],\"258\":[1,28],\"259\":[2,21],\"260\":[6,10],\"261\":[3,100],\"262\":[2,21],\"263\":[2,11],\"264\":[5,6],\"265\":[null,null,1],\"266\":[3,25],\"267\":[3],\"268\":[2,11],\"269\":[1,20],\"270\":[2,42],\"271\":[1,60],\"272\":[1],\"273\":[1,40],\"274\":[2,59],\"275\":[1,23],\"276\":[1,15],\"277\":[2,22],\"278\":[1],\"279\":[2,15],\"280\":[3,37],\"281\":[1,8],\"282\":[1,23],\"283\":[2,11],\"284\":[1,5],\"285\":[1,95],\"286\":[1,4],\"287\":[1,7],\"288\":[1,85],\"289\":[3,121],\"290\":[1,7],\"291\":[1,31],\"292\":[2],\"293\":[2,36],\"294\":[1,16],\"295\":[3,7],\"296\":[2,6],\"297\":[1,45],\"298\":[3,43],\"299\":[3,56],\"300\":[1],\"301\":[1,20],\"302\":[4,25],\"303\":[2,35],\"304\":[4,19],\"305\":[null,null,1],\"306\":[2],\"307\":[3,30],\"308\":[2,59],\"309\":[1,51],\"310\":[1,19],\"311\":[2,11],\"312\":[2],\"313\":[3,30],\"314\":[4,46],\"315\":[1,37],\"316\":[1,21],\"317\":[1,45],\"318\":[null,null,1],\"319\":[1],\"320\":[1,15],\"321\":[2,130],\"322\":[4],\"323\":[2,18],\"324\":[2,13],\"325\":[2,24],\"326\":[4,53],\"327\":[1,4],\"328\":[1,7],\"329\":[3,56],\"330\":[1],\"331\":[1,35],\"332\":[null,null,1],\"333\":[1],\"334\":[1,10],\"335\":[1],\"336\":[1,44],\"337\":[1,17],\"338\":[3],\"339\":[1,45],\"340\":[1,53],\"341\":[3,127],\"342\":[1,18],\"343\":[1,56],\"344\":[2,41],\"345\":[2,11],\"346\":[2],\"347\":[1,24],\"348\":[2,22],\"349\":[2,28],\"350\":[2],\"351\":[1,16],\"352\":[1,17],\"353\":[1,7],\"354\":[3,59],\"355\":[3,22],\"356\":[2,36],\"357\":[4,15],\"358\":[4,30],\"359\":[4,29],\"360\":[4,63],\"361\":[2,89],\"362\":[null,null,1],\"363\":[null,null,2],\"364\":[2],\"365\":[1,5],\"366\":[2,20],\"367\":[1,10],\"368\":[2,10],\"369\":[1,7],\"370\":[2],\"371\":[1,30],\"372\":[3,45],\"373\":[4,34],\"374\":[4,39],\"375\":[4,49],\"376\":[2,4],\"377\":[2,36],\"378\":[1,17],\"379\":[1,45],\"380\":[1,18],\"381\":[1,19],\"382\":[1,51],\"383\":[1,49],\"384\":[1],\"385\":[1,31],\"386\":[2,23],\"387\":[2,78],\"388\":[3,89],\"389\":[3],\"390\":[3,58],\"391\":[3,15],\"392\":[2,38],\"393\":[2,27],\"394\":[3,24],\"395\":[2,11],\"396\":[2,31],\"397\":[2,40],\"398\":[4,23],\"399\":[3,10],\"400\":[2,43],\"401\":[2,71],\"402\":[2,21],\"403\":[1,24],\"404\":[2,18],\"405\":[1],\"406\":[1,44],\"407\":[1],\"408\":[2,72],\"409\":[1],\"410\":[5,27],\"411\":[4,46],\"412\":[1,37],\"413\":[4],\"414\":[2,26],\"415\":[1,14],\"416\":[2],\"417\":[1],\"418\":[1,88],\"419\":[1,20],\"420\":[1,37],\"421\":[2,48],\"422\":[2,41],\"423\":[2],\"424\":[1,72],\"425\":[1,45],\"426\":[1,32],\"427\":[2,64],\"428\":[4,20],\"429\":[3],\"430\":[1,35],\"431\":[4,66],\"432\":[6,78],\"433\":[4,30],\"434\":[3,22],\"435\":[3,41],\"436\":[3,59],\"437\":[3],\"438\":[3,10],\"439\":[2,5],\"440\":[4],\"441\":[1,7],\"442\":[4,8],\"443\":[2],\"444\":[1,18],\"445\":[1,61],\"446\":[2,23],\"447\":[3,9],\"448\":[3],\"449\":[1,20],\"450\":[1,6],\"451\":[1],\"452\":[1],\"453\":[4,34],\"454\":[2,53],\"455\":[1,40],\"456\":[2],\"457\":[2],\"458\":[3,38],\"459\":[4,48],\"460\":[2,83],\"461\":[2,9],\"462\":[1],\"463\":[1,1],\"464\":[2],\"465\":[4,95],\"466\":[3,38],\"467\":[3,47],\"468\":[1,44],\"469\":[1],\"470\":[1],\"471\":[1],\"472\":[1],\"473\":[1],\"474\":[2],\"475\":[3],\"476\":[2],\"477\":[1,9],\"478\":[1,32],\"479\":[3,58],\"480\":[3,73],\"481\":[1,48],\"482\":[null,null,1],\"483\":[null,null,3],\"484\":[1],\"485\":[2],\"486\":[1,79],\"487\":[1,3],\"488\":[3],\"489\":[1],\"490\":[2],\"491\":[2,20],\"492\":[1,63],\"493\":[2,19],\"494\":[5,16],\"495\":[5,41],\"496\":[4,51],\"497\":[4,3],\"498\":[1],\"499\":[2,98],\"500\":[1,6],\"501\":[4],\"502\":[2,65],\"503\":[1,10],\"504\":[1,29],\"505\":[3,5],\"506\":[2],\"507\":[1,29],\"508\":[3,43],\"509\":[4,50],\"510\":[2,35],\"511\":[1,42],\"512\":[null,null,1],\"513\":[2],\"514\":[1,47],\"515\":[1,5],\"516\":[1,3],\"517\":[1,64],\"518\":[1,11],\"519\":[1,2],\"520\":[1,23],\"521\":[1,24],\"522\":[1,14],\"523\":[1,25],\"524\":[1,33],\"525\":[1,10],\"526\":[1,9],\"527\":[1,25],\"528\":[1,25],\"529\":[1,57],\"530\":[1,54],\"531\":[1,3],\"532\":[1,13],\"533\":[1,17],\"534\":[1,52],\"535\":[1],\"536\":[1,29],\"537\":[1,25],\"538\":[1,19],\"539\":[1,29],\"540\":[1,9],\"541\":[3,21],\"542\":[1,191],\"543\":[1,254],\"544\":[1,19],\"545\":[4,107],\"546\":[1,61],\"547\":[2,71],\"548\":[3,142],\"549\":[6,188],\"550\":[1,87],\"551\":[1,39],\"552\":[4,194],\"553\":[1,53],\"554\":[1,2],\"555\":[1,33],\"556\":[1,124],\"557\":[12,242],\"558\":[6,279],\"559\":[5,386],\"560\":[2],\"561\":[2],\"562\":[3,237],\"563\":[2,7],\"564\":[1,57],\"565\":[2,60],\"566\":[1,39],\"567\":[4],\"568\":[5,51],\"569\":[2],\"570\":[1,14],\"571\":[4,26],\"572\":[2,22],\"573\":[2,99],\"574\":[3],\"575\":[3,49],\"576\":[1,112],\"577\":[1,31],\"578\":[2,4],\"579\":[2],\"580\":[1,117],\"581\":[1,34],\"582\":[1,40],\"583\":[2,44],\"584\":[1,104],\"585\":[1,14],\"586\":[1,39],\"587\":[1,30],\"588\":[2],\"589\":[2,12],\"590\":[2,29],\"591\":[4],\"592\":[1,40],\"593\":[3,33],\"594\":[2,11],\"595\":[2,22],\"596\":[3],\"597\":[1,10],\"598\":[4],\"599\":[1,127],\"600\":[2,131],\"601\":[1,68],\"602\":[2,107],\"603\":[5,41],\"604\":[1,42],\"605\":[1,54],\"606\":[1,103],\"607\":[2],\"608\":[2],\"609\":[1,70],\"610\":[1,32],\"611\":[1,16],\"612\":[1,46],\"613\":[1,21],\"614\":[4,26],\"615\":[1],\"616\":[1,26],\"617\":[1],\"618\":[1,32],\"619\":[1,18],\"620\":[1,34],\"621\":[1,40],\"622\":[2,24],\"623\":[1,47],\"624\":[1,31],\"625\":[1,5],\"626\":[null,null,2],\"627\":[null,null,1],\"628\":[1],\"629\":[1,5],\"630\":[null,null,1],\"631\":[null,null,2],\"632\":[3],\"633\":[null,null,1],\"634\":[null,null,1],\"635\":[3,4],\"636\":[1],\"637\":[1,10],\"638\":[1,3],\"639\":[1,24],\"640\":[1,46],\"641\":[1,23],\"642\":[3],\"643\":[2,80],\"644\":[2,18],\"645\":[1],\"646\":[1,42],\"647\":[1,4],\"648\":[1,28],\"649\":[null,null,1],\"650\":[null,null,2],\"651\":[4,14],\"652\":[2,36],\"653\":[2,33],\"654\":[1,11],\"655\":[1,41],\"656\":[2],\"657\":[3,35],\"658\":[3,62],\"659\":[2,23],\"660\":[4,11],\"661\":[2,12],\"662\":[1,26],\"663\":[2],\"664\":[1,171],\"665\":[3,22],\"666\":[2,17],\"667\":[2,43],\"668\":[2],\"669\":[1,31],\"670\":[3,46],\"671\":[2,74],\"672\":[2,8],\"673\":[2,48],\"674\":[2,63],\"675\":[4,79],\"676\":[2,128],\"677\":[2,32],\"678\":[4,3],\"679\":[3,19],\"680\":[2],\"681\":[1,81],\"682\":[1,115],\"683\":[null,null,1],\"684\":[null,null,2],\"685\":[6,10],\"686\":[3],\"687\":[1,83],\"688\":[1,60],\"689\":[1,39],\"690\":[1,51],\"691\":[2,125],\"692\":[2,201],\"693\":[2,117],\"694\":[1],\"695\":[1,40],\"696\":[4,74],\"697\":[2,6],\"698\":[2,2],\"699\":[3],\"700\":[2],\"701\":[2,30],\"702\":[3,107],\"703\":[2,175],\"704\":[2,14],\"705\":[3,43],\"706\":[2,155],\"707\":[1,187],\"708\":[1,51],\"709\":[null,null,1],\"710\":[null,null,2],\"711\":[4],\"712\":[2,32],\"713\":[2,15],\"714\":[2,14],\"715\":[2,12],\"716\":[1],\"717\":[1,36],\"718\":[1,19],\"719\":[1,23],\"720\":[null,null,2],\"721\":[null,null,1],\"722\":[3,6],\"723\":[2],\"724\":[1,70],\"725\":[2,48],\"726\":[1,3],\"727\":[1,14],\"728\":[1,41],\"729\":[2,20],\"730\":[1,19],\"731\":[1,11],\"732\":[3,11],\"733\":[null,null,1],\"734\":[null,null,1],\"735\":[2],\"736\":[3,63],\"737\":[1],\"738\":[2,68],\"739\":[2,26],\"740\":[1,14],\"741\":[2,61],\"742\":[2,36],\"743\":[1,34],\"744\":[1,23],\"745\":[3,10],\"746\":[2,33],\"747\":[2,52],\"748\":[6,69],\"749\":[2,14],\"750\":[1,60],\"751\":[3,109],\"752\":[1,11],\"753\":[1,10],\"754\":[1,5],\"755\":[null,null,1],\"756\":[null,null,2],\"757\":[2,3],\"758\":[1,24],\"759\":[1,68],\"760\":[1,60],\"761\":[1,56],\"762\":[1],\"763\":[1,44],\"764\":[2,29],\"765\":[2,12],\"766\":[1,40],\"767\":[null,null,1],\"768\":[null,null,2],\"769\":[2],\"770\":[1,28],\"771\":[2,7],\"772\":[null,null,1],\"773\":[null,null,2],\"774\":[3,74],\"775\":[2,43],\"776\":[3,87],\"777\":[1,32],\"778\":[1,29],\"779\":[4],\"780\":[4,28],\"781\":[4,33],\"782\":[2],\"783\":[2,24],\"784\":[4,24],\"785\":[3,81],\"786\":[2,40],\"787\":[null,null,1],\"788\":[null,null,1],\"789\":[2,40],\"790\":[1,8],\"791\":[1,14],\"792\":[1,14],\"793\":[1,73],\"794\":[1,44],\"795\":[1,9],\"796\":[2,43],\"797\":[2,34],\"798\":[1,35],\"799\":[null,null,1],\"800\":[null,null,1],\"801\":[2,11],\"802\":[3,6],\"803\":[2],\"804\":[1,16],\"805\":[1,13],\"806\":[1,17],\"807\":[1,19],\"808\":[3,12],\"809\":[2],\"810\":[1,15],\"811\":[1,10],\"812\":[1,25],\"813\":[1],\"814\":[1,18],\"815\":[1,14],\"816\":[null,null,1],\"817\":[null,null,1],\"818\":[3],\"819\":[1,27],\"820\":[2,57],\"821\":[null,null,1],\"822\":[null,null,2],\"823\":[4],\"824\":[1,31],\"825\":[2,37],\"826\":[2],\"827\":[1,37],\"828\":[2,34],\"829\":[2,12],\"830\":[2],\"831\":[1,15],\"832\":[2,3],\"833\":[2,25],\"834\":[3],\"835\":[2],\"836\":[2,19],\"837\":[2,8],\"838\":[null,null,1],\"839\":[null,null,2],\"840\":[2],\"841\":[1,19],\"842\":[1,20],\"843\":[1,42],\"844\":[2,60],\"845\":[null,null,1],\"846\":[null,null,1],\"847\":[1,22],\"848\":[1,27],\"849\":[1,5],\"850\":[2,55],\"851\":[1,68],\"852\":[2],\"853\":[1,9],\"854\":[1,29],\"855\":[2,15],\"856\":[1,22],\"857\":[4],\"858\":[2,45],\"859\":[2,7],\"860\":[1,7],\"861\":[1,11],\"862\":[1],\"863\":[1,10],\"864\":[2,38],\"865\":[2,15],\"866\":[null,null,1],\"867\":[null,null,2],\"868\":[1],\"869\":[3,24],\"870\":[1],\"871\":[3,30],\"872\":[2,17],\"873\":[3,17],\"874\":[2,2],\"875\":[3,10],\"876\":[4,27],\"877\":[1],\"878\":[3,21],\"879\":[2,30],\"880\":[2],\"881\":[2,37],\"882\":[2,12],\"883\":[2,5],\"884\":[2,9],\"885\":[2,10],\"886\":[null,null,1],\"887\":[null,null,1],\"888\":[2,28],\"889\":[1,23],\"890\":[2,44],\"891\":[2,29],\"892\":[1,178],\"893\":[null,null,1],\"894\":[null,null,2],\"895\":[1],\"896\":[2,63],\"897\":[3,54],\"898\":[1,47],\"899\":[null,null,1],\"900\":[null,null,1],\"901\":[4],\"902\":[2,10],\"903\":[2,7],\"904\":[2,24],\"905\":[3,33],\"906\":[1,46],\"907\":[3,26],\"908\":[2,12],\"909\":[1,22],\"910\":[2,20],\"911\":[1,8],\"912\":[4],\"913\":[null,null,1],\"914\":[null,null,2],\"915\":[5],\"916\":[6,27],\"917\":[2,16],\"918\":[6,20],\"919\":[null,null,1],\"920\":[null,null,4],\"921\":[3],\"922\":[2,4],\"923\":[1,57],\"924\":[1],\"925\":[1,32],\"926\":[2,25],\"927\":[1,40],\"928\":[1,9],\"929\":[1],\"930\":[1,20],\"931\":[1,43],\"932\":[1],\"933\":[2,47],\"934\":[2,30],\"935\":[2,13],\"936\":[2,25],\"937\":[2,23],\"938\":[2,30],\"939\":[2,58],\"940\":[2,61],\"941\":[2,88],\"942\":[2,41],\"943\":[2,15],\"944\":[2,37],\"945\":[null,null,1],\"946\":[null,null,3],\"947\":[6],\"948\":[1],\"949\":[2,43],\"950\":[2,67],\"951\":[2,61],\"952\":[2,32],\"953\":[4],\"954\":[2,48],\"955\":[1,101],\"956\":[2,103],\"957\":[1,32],\"958\":[2,13],\"959\":[2,30],\"960\":[2,35],\"961\":[2,59],\"962\":[1,68],\"963\":[null,null,1],\"964\":[null,null,2],\"965\":[3,12],\"966\":[2,18],\"967\":[1,21],\"968\":[null,null,1],\"969\":[null,null,1],\"970\":[3,7],\"971\":[1,9],\"972\":[2,40],\"973\":[2,35],\"974\":[1,10],\"975\":[1,36],\"976\":[2,28],\"977\":[2,83],\"978\":[2,142],\"979\":[1,55],\"980\":[1,94],\"981\":[2,94],\"982\":[2,103],\"983\":[2,71],\"984\":[1,81],\"985\":[1,62],\"986\":[1,56],\"987\":[1,99],\"988\":[3,103],\"989\":[1,26],\"990\":[1],\"991\":[2,22],\"992\":[1,36],\"993\":[2,33],\"994\":[1,18],\"995\":[1],\"996\":[3,8],\"997\":[2,37],\"998\":[3,47],\"999\":[3,43],\"1000\":[2,23],\"1001\":[null,null,1],\"1002\":[null,null,2],\"1003\":[2],\"1004\":[5,99],\"1005\":[null,null,1],\"1006\":[null,null,1],\"1007\":[2],\"1008\":[1,12],\"1009\":[1,21],\"1010\":[null,null,1],\"1011\":[2,2],\"1012\":[1,295],\"1013\":[1],\"1014\":[1,13],\"1015\":[1,1],\"1016\":[1,3],\"1017\":[1,16],\"1018\":[1],\"1019\":[1,25],\"1020\":[1,86],\"1021\":[1,79],\"1022\":[1,61],\"1023\":[3],\"1024\":[2,106],\"1025\":[2,53],\"1026\":[null,null,1],\"1027\":[null,null,1],\"1028\":[8,17],\"1029\":[2,4],\"1030\":[3,13],\"1031\":[4,10],\"1032\":[4,11],\"1033\":[1,11],\"1034\":[1,3],\"1035\":[null,null,1],\"1036\":[null,null,1],\"1037\":[1],\"1038\":[1,6],\"1039\":[3,2],\"1040\":[3,5],\"1041\":[3,10],\"1042\":[3,9],\"1043\":[1],\"1044\":[3,3],\"1045\":[1],\"1046\":[1,2],\"1047\":[1],\"1048\":[1,11],\"1049\":[null,null,1],\"1050\":[null,null,1],\"1051\":[3],\"1052\":[1,84],\"1053\":[1,44],\"1054\":[1,111],\"1055\":[1,97],\"1056\":[1,143],\"1057\":[1,55],\"1058\":[null,null,1],\"1059\":[null,null,2],\"1060\":[4,130],\"1061\":[null,null,2],\"1062\":[null,null,1],\"1063\":[3],\"1064\":[1,19],\"1065\":[1,12],\"1066\":[2,9],\"1067\":[1,5],\"1068\":[1,14],\"1069\":[null,null,1],\"1070\":[null,null,1],\"1071\":[4,25],\"1072\":[2,54],\"1073\":[1,46],\"1074\":[2,42],\"1075\":[3,99],\"1076\":[2,60],\"1077\":[2,30],\"1078\":[2,33],\"1079\":[4,73],\"1080\":[2,44],\"1081\":[2,32],\"1082\":[null,null,1],\"1083\":[null,null,1],\"1084\":[5,41],\"1085\":[1,8],\"1086\":[2],\"1087\":[2],\"1088\":[null,null,1],\"1089\":[null,null,3],\"1090\":[2],\"1091\":[1,22],\"1092\":[1,5],\"1093\":[3],\"1094\":[3,75],\"1095\":[2,30],\"1096\":[null,null,1],\"1097\":[null,null,1],\"1098\":[3,22],\"1099\":[3,127],\"1100\":[2],\"1101\":[3,43],\"1102\":[1,32],\"1103\":[1,11],\"1104\":[2],\"1105\":[2,58],\"1106\":[2,8],\"1107\":[3,14],\"1108\":[3,9],\"1109\":[1,20],\"1110\":[1,17],\"1111\":[1,34],\"1112\":[2],\"1113\":[3,54],\"1114\":[2,14],\"1115\":[null,null,1],\"1116\":[null,null,3],\"1117\":[1],\"1118\":[1,72],\"1119\":[2],\"1120\":[2,30],\"1121\":[1,14],\"1122\":[2,14],\"1123\":[1,37],\"1124\":[1,79],\"1125\":[1,60],\"1126\":[2,25],\"1127\":[2,23],\"1128\":[null,null,1],\"1129\":[null,null,2],\"1130\":[2,57],\"1131\":[1,51],\"1132\":[2,60],\"1133\":[1,46],\"1134\":[1,36],\"1135\":[1,8],\"1136\":[1,8],\"1137\":[1,16],\"1138\":[1,22],\"1139\":[2,8],\"1140\":[null,null,1],\"1141\":[null,null,3],\"1142\":[1,93],\"1143\":[2,85],\"1144\":[2,31],\"1145\":[4,154],\"1146\":[null,null,1],\"1147\":[null,null,2],\"1148\":[2],\"1149\":[3,4],\"1150\":[3,15],\"1151\":[2,64],\"1152\":[2],\"1153\":[4,108],\"1154\":[2],\"1155\":[4,88],\"1156\":[2,51],\"1157\":[3,69],\"1158\":[3,3],\"1159\":[3,74],\"1160\":[3,3],\"1161\":[5,70],\"1162\":[4,107],\"1163\":[null,null,1],\"1164\":[null,null,3],\"1165\":[8],\"1166\":[1,33],\"1167\":[1],\"1168\":[3,16],\"1169\":[3,129],\"1170\":[3,114],\"1171\":[3,22],\"1172\":[null,null,1],\"1173\":[null,null,1],\"1174\":[2,4],\"1175\":[4],\"1176\":[2,14],\"1177\":[4,27],\"1178\":[2,18],\"1179\":[2,75],\"1180\":[3],\"1181\":[1,12],\"1182\":[1,7],\"1183\":[null,null,1],\"1184\":[null,null,2],\"1185\":[2,198],\"1186\":[1,115],\"1187\":[null,null,1],\"1188\":[null,null,2],\"1189\":[1,123],\"1190\":[1],\"1191\":[5,14],\"1192\":[2,28],\"1193\":[2,3],\"1194\":[5],\"1195\":[2,6],\"1196\":[2,23],\"1197\":[2],\"1198\":[1,37],\"1199\":[null,null,1],\"1200\":[null,null,2],\"1201\":[1,68],\"1202\":[3,106],\"1203\":[3,81],\"1204\":[1,68],\"1205\":[2],\"1206\":[5,49],\"1207\":[3,40],\"1208\":[3,67],\"1209\":[1,44],\"1210\":[null,null,1],\"1211\":[null,null,2],\"1212\":[2,219],\"1213\":[null,null,1],\"1214\":[null,null,3],\"1215\":[3],\"1216\":[4,109],\"1217\":[3,62],\"1218\":[2],\"1219\":[1,149],\"1220\":[2],\"1221\":[1,65],\"1222\":[null,null,1],\"1223\":[null,null,3],\"1224\":[2],\"1225\":[1],\"1226\":[3,25],\"1227\":[2,8],\"1228\":[1,65],\"1229\":[3],\"1230\":[5,2],\"1231\":[2,51],\"1232\":[1,15],\"1233\":[null,null,1],\"1234\":[null,null,1],\"1235\":[1],\"1236\":[3,20],\"1237\":[2,25],\"1238\":[1],\"1239\":[2,66],\"1240\":[2,58],\"1241\":[2,35],\"1242\":[1,9],\"1243\":[2,25],\"1244\":[2,41],\"1245\":[2,6],\"1246\":[1,21],\"1247\":[1,10],\"1248\":[2,37],\"1249\":[1,25],\"1250\":[1,40],\"1251\":[2,15],\"1252\":[2,45],\"1253\":[1,76],\"1254\":[1,6],\"1255\":[null,null,1],\"1256\":[null,null,1],\"1257\":[2],\"1258\":[1,15],\"1259\":[2,68],\"1260\":[null,null,1],\"1261\":[null,null,1],\"1262\":[3],\"1263\":[2,41],\"1264\":[2,37],\"1265\":[3,66],\"1266\":[4],\"1267\":[1],\"1268\":[1,5],\"1269\":[2,42],\"1270\":[2,7],\"1271\":[1,11],\"1272\":[2,21],\"1273\":[1],\"1274\":[2,12],\"1275\":[3,42],\"1276\":[2,18],\"1277\":[2,18],\"1278\":[2,50],\"1279\":[2,28],\"1280\":[3],\"1281\":[1,14],\"1282\":[1,8],\"1283\":[2],\"1284\":[1,10],\"1285\":[2,23],\"1286\":[2,6],\"1287\":[1,43],\"1288\":[null,null,1],\"1289\":[null,null,1],\"1290\":[3],\"1291\":[1,20],\"1292\":[2,7],\"1293\":[2,63],\"1294\":[2,21],\"1295\":[2,39],\"1296\":[1,31],\"1297\":[1,14],\"1298\":[3,47],\"1299\":[2,61],\"1300\":[2,17],\"1301\":[2,71],\"1302\":[3,4],\"1303\":[3,8],\"1304\":[1,19],\"1305\":[1,18],\"1306\":[2],\"1307\":[3,136],\"1308\":[3,32],\"1309\":[2,50],\"1310\":[4,60],\"1311\":[3,22],\"1312\":[4,41],\"1313\":[3,37],\"1314\":[5,52],\"1315\":[3,32],\"1316\":[3,115],\"1317\":[2,19],\"1318\":[2,28],\"1319\":[1],\"1320\":[2,179],\"1321\":[4,6],\"1322\":[1,21],\"1323\":[null,null,1],\"1324\":[null,null,2],\"1325\":[2,7],\"1326\":[2,36],\"1327\":[2,22],\"1328\":[1,77],\"1329\":[1,82],\"1330\":[3,15],\"1331\":[2,8],\"1332\":[1,8],\"1333\":[1,268],\"1334\":[3,11],\"1335\":[null,null,1],\"1336\":[null,null,3],\"1337\":[2],\"1338\":[1,19],\"1339\":[1],\"1340\":[2,54],\"1341\":[2,62],\"1342\":[2,27],\"1343\":[5,1],\"1344\":[7,61],\"1345\":[4,101],\"1346\":[1],\"1347\":[null,null,2],\"1348\":[null,null,3],\"1349\":[3],\"1350\":[1,19],\"1351\":[2],\"1352\":[1,41],\"1353\":[1,65],\"1354\":[2,22],\"1355\":[2,70],\"1356\":[2,19],\"1357\":[2,28],\"1358\":[1,10],\"1359\":[1,6],\"1360\":[null,null,1],\"1361\":[null,null,3],\"1362\":[2],\"1363\":[1,6],\"1364\":[2],\"1365\":[2,124],\"1366\":[2,82],\"1367\":[3,15],\"1368\":[null,null,1],\"1369\":[null,null,2],\"1370\":[2],\"1371\":[1,25],\"1372\":[2],\"1373\":[2,8],\"1374\":[2,51],\"1375\":[2],\"1376\":[2,66],\"1377\":[null,null,1],\"1378\":[null,null,2],\"1379\":[3,13],\"1380\":[2,82],\"1381\":[5,95],\"1382\":[1],\"1383\":[3,77],\"1384\":[3],\"1385\":[1,65],\"1386\":[3,48],\"1387\":[2],\"1388\":[2,129],\"1389\":[2,66],\"1390\":[null,null,1],\"1391\":[null,null,2],\"1392\":[2,17],\"1393\":[1,13],\"1394\":[1],\"1395\":[1,40],\"1396\":[4,74],\"1397\":[2,2],\"1398\":[3,2],\"1399\":[3,14],\"1400\":[2,43],\"1401\":[2],\"1402\":[4,100],\"1403\":[3,80],\"1404\":[2],\"1405\":[1,166],\"1406\":[2,35],\"1407\":[null,null,1],\"1408\":[null,null,2],\"1409\":[1,3],\"1410\":[2],\"1411\":[1,3],\"1412\":[1],\"1413\":[1,14],\"1414\":[1,10],\"1415\":[1],\"1416\":[1,9],\"1417\":[1,11],\"1418\":[1,86],\"1419\":[2,61],\"1420\":[1],\"1421\":[3,39],\"1422\":[2,26],\"1423\":[3,15],\"1424\":[1,125],\"1425\":[3,32],\"1426\":[2,36],\"1427\":[1,36],\"1428\":[3,34],\"1429\":[1,30],\"1430\":[2],\"1431\":[1,39],\"1432\":[1,16],\"1433\":[2],\"1434\":[2,39],\"1435\":[1,15],\"1436\":[1],\"1437\":[1,6],\"1438\":[1,11],\"1439\":[2,28],\"1440\":[2,69],\"1441\":[2,31],\"1442\":[2],\"1443\":[1,10],\"1444\":[1],\"1445\":[2,77],\"1446\":[1,52],\"1447\":[1],\"1448\":[1,65],\"1449\":[1,70],\"1450\":[1,5],\"1451\":[1,4],\"1452\":[2,5],\"1453\":[1,54],\"1454\":[2,69],\"1455\":[null,null,2],\"1456\":[2,12],\"1457\":[1,4],\"1458\":[1],\"1459\":[1,58],\"1460\":[1,58],\"1461\":[1,11],\"1462\":[1,25],\"1463\":[1,271],\"1464\":[1,152],\"1465\":[2,13],\"1466\":[null,null,1],\"1467\":[2],\"1468\":[1,12],\"1469\":[2,76],\"1470\":[4,47],\"1471\":[2,26],\"1472\":[1,10],\"1473\":[2,6],\"1474\":[1,112],\"1475\":[2,65],\"1476\":[3,65],\"1477\":[1,19],\"1478\":[1],\"1479\":[2,71],\"1480\":[2,3],\"1481\":[4,96],\"1482\":[2,19],\"1483\":[2,174],\"1484\":[2,41],\"1485\":[3,108],\"1486\":[2,41],\"1487\":[5,124],\"1488\":[1,12],\"1489\":[1],\"1490\":[1,43],\"1491\":[2,60],\"1492\":[2,90],\"1493\":[8,55],\"1494\":[7,52],\"1495\":[7,66],\"1496\":[7,71],\"1497\":[2,45],\"1498\":[2,143],\"1499\":[2,106],\"1500\":[1],\"1501\":[1,190],\"1502\":[1,22],\"1503\":[1,2],\"1504\":[2],\"1505\":[1,6],\"1506\":[3],\"1507\":[1,122],\"1508\":[1,139],\"1509\":[3,114],\"1510\":[2,39],\"1511\":[1,16],\"1512\":[1],\"1513\":[1,6],\"1514\":[2,11],\"1515\":[3,88],\"1516\":[2,58],\"1517\":[5,49],\"1518\":[3,70],\"1519\":[2,35],\"1520\":[4,72],\"1521\":[1,62],\"1522\":[4,47],\"1523\":[4,74],\"1524\":[3,79],\"1525\":[1,11],\"1526\":[3,42],\"1527\":[2,22],\"1528\":[2,61],\"1529\":[3,63],\"1530\":[3],\"1531\":[1,36],\"1532\":[2,40],\"1533\":[2,13],\"1534\":[2,138],\"1535\":[2],\"1536\":[1,64],\"1537\":[1,47],\"1538\":[null,null,1],\"1539\":[3],\"1540\":[1,18],\"1541\":[4,41],\"1542\":[5,107],\"1543\":[4,54],\"1544\":[5,55],\"1545\":[3,202],\"1546\":[3,2],\"1547\":[null,null,1],\"1548\":[4],\"1549\":[1,10],\"1550\":[1],\"1551\":[3,103],\"1552\":[4,22],\"1553\":[2,91],\"1554\":[2,17],\"1555\":[2],\"1556\":[2,24],\"1557\":[2,40],\"1558\":[1,8],\"1559\":[1],\"1560\":[1,20],\"1561\":[2],\"1562\":[4,46],\"1563\":[3,36],\"1564\":[3,29],\"1565\":[3,22],\"1566\":[3,36],\"1567\":[2,65],\"1568\":[1],\"1569\":[1,6],\"1570\":[3,71],\"1571\":[3,60],\"1572\":[3,16],\"1573\":[3,119],\"1574\":[1],\"1575\":[2,57],\"1576\":[5,36],\"1577\":[2,41],\"1578\":[3,16],\"1579\":[1],\"1580\":[1,9],\"1581\":[1,1],\"1582\":[3],\"1583\":[1,28],\"1584\":[1,80],\"1585\":[3,27],\"1586\":[3,40],\"1587\":[null,null,1],\"1588\":[2],\"1589\":[1,16],\"1590\":[3,86],\"1591\":[4,120],\"1592\":[3,113],\"1593\":[4,27],\"1594\":[4,15],\"1595\":[5,40],\"1596\":[5,70],\"1597\":[2,57],\"1598\":[2,36],\"1599\":[2,30],\"1600\":[3,57],\"1601\":[2,32],\"1602\":[3,74],\"1603\":[1,3],\"1604\":[2],\"1605\":[1,58],\"1606\":[3,41],\"1607\":[3,159],\"1608\":[3,58],\"1609\":[3,48],\"1610\":[5,21],\"1611\":[4,113],\"1612\":[2,2],\"1613\":[4,46],\"1614\":[3],\"1615\":[1,9],\"1616\":[4,9],\"1617\":[3],\"1618\":[5,15],\"1619\":[1,22],\"1620\":[1,125],\"1621\":[3,9],\"1622\":[1,5],\"1623\":[1,432],\"1624\":[1],\"1625\":[2],\"1626\":[3,32],\"1627\":[3,30],\"1628\":[1,2],\"1629\":[4,24],\"1630\":[2],\"1631\":[1,3],\"1632\":[2,15],\"1633\":[1,17],\"1634\":[2,17],\"1635\":[3,24],\"1636\":[2,6],\"1637\":[1,2],\"1638\":[2,7],\"1639\":[2],\"1640\":[1,4],\"1641\":[1,3],\"1642\":[1,2],\"1643\":[1],\"1644\":[3],\"1645\":[2,41],\"1646\":[2,37],\"1647\":[3,66],\"1648\":[1,10],\"1649\":[2],\"1650\":[1],\"1651\":[1],\"1652\":[1],\"1653\":[1],\"1654\":[1],\"1655\":[1],\"1656\":[1],\"1657\":[1],\"1658\":[1],\"1659\":[1],\"1660\":[1],\"1661\":[1]},\"averageFieldLength\":[2.0212047355173466,44.170830109064255,0.3704385421803698],\"storedFields\":{\"0\":{\"h\":\"项目主页\",\"t\":[\"这是普通主页的案例。你可以在这里放置你的主体内容。\",\"想要使用此布局，你需要在页面 front matter 中设置 home: true。\",\"配置项的相关说明详见 项目主页配置。\"]},\"1\":{\"h\":\"Author\",\"t\":[\"啥都不说了。\"]},\"2\":{\"h\":\"幻灯片页\"},\"3\":{\"h\":\"Algorithm\",\"t\":[\"这个模块主要是研究算法和数据结构。\"]},\"4\":{\"h\":\"Backtrack\"},\"5\":{\"h\":\"Abstract\",\"t\":[\"回溯法（英语：backtracking）是暴力搜索法中的一种。\",\"对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束补偿问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。\",\"在经典的教科书中，八皇后问题展示了回溯法的用例。（八皇后问题是在标准国际象棋棋盘中寻找八个皇后的所有分布，使得没有一个皇后能攻击到另外一个。）\",\"回溯法采用试错的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现，现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：\",\"找到一个可能存在的正确的答案\",\"在尝试了所有可能的分步方法后宣告该问题没有答案\",\"在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。\"]},\"6\":{\"h\":\"模板\",\"t\":[\"总结回溯的模板如下：\",\"result = [] def back_track(path, choices): if OK: result.append(path) return else: for choice in choices: make_choices() back_tarack(path, choices) undo_choices() \",\"其中 path 表示路径，choices 表示做出的选择。\"]},\"7\":{\"h\":\"例题解析\"},\"8\":{\"h\":\"LC17 电话号码的字母组合\",\"t\":[\"给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。\",\"给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\",\"输入：digits = \\\"23\\\"\",\"输出：[\\\"ad\\\", \\\"ae\\\", \\\"af\\\", \\\"bd\\\", \\\"be\\\", \\\"bf\\\", \\\"cd\\\", \\\"ce\\\", \\\"cf\\\"]\",\"来源：力扣（LeetCode）\",\"链接：https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"解法：标准回溯：\",\"class Solution: def letterCombinations(self, digits: str) -> List[str]: if not digits: return list() dig2alph = { '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz' } def back_track(index): if index == len(digits): res.append(''.join(combination)) else: digit = digits[index] for ch in dig2alph[digit]: combination.append(ch) back_track(index + 1) combination.pop() combination = list() res = list() back_track(0) return res \"]},\"9\":{\"h\":\"LC22 括号生成\",\"t\":[\"数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。\",\"有效括号组合需满足：左括号必须以正确的顺序闭合。\",\"解法：回溯。通过 left 和 right 是否\\\"平衡\\\"来筛选一下数据。\",\"class Solution: def generateParenthesis(self, n: int) -> List[str]: res = [] def back_track(A: list, left, right): # 比如 n == 3 时，生成的括号总数为 2*3 个 if len(A) == 2 * n: res.append(''.join(A)) return if left < n: A.append('(') back_track(A, left + 1, right) A.pop() if right < left: A.append(')') back_track(A, left, right + 1) A.pop() back_track([], 0, 0) return res \",\"如果不使用该方法的话，可能需要使用较为“暴力”的解法： (不过该解法比较适合用来理解回溯的思想)\",\" def generateParenthesis(self, n: int) -> List[str]: def generate(A: list): if len(A) == 2 * n: if is_valid(A): res.append(\\\"\\\".join(A)) else: A.append('(') generate(A) A.pop() A.append(')') generate(A) A.pop() def is_valid(A): balance = 0 for ch in A: if ch == '(': balance += 1 else: balance -= 1 if balance < 0: return False return balance == 0 res = list() generate([]) return res \"]},\"10\":{\"h\":\"LC39 组合总数\",\"t\":[\"给定一个无重复元素的正整数数组 candidates 和一个正整数 target ，找出 candidates 中所有可以使数字和为目标数 target 的唯一组合。\",\"candidates 中的数字可以无限制重复被选取。如果至少一个所选数字数量不同，则两种组合是唯一的。\",\"输入: candidates = [2, 3, 6, 7], target = 7\",\"输出: [[7], [2, 2, 3]]\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/combination-sum 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"套用上述的公式，写出的解法如下：\",\"class Solution: def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]: res = [] def back_track(A): if sum(A) == target and sorted(A) not in res: res.append(sorted(A[:])) return if sum(A) > target: return for c in candidates: A.append(c) back_track(A) A.pop() back_track([]) return res \",\"注意到 sum(A) 大于 target 被剪枝，这样就减少了计算量。第二是通过排序的操作筛选出了已经存在的组合。\",\"但是该算法还存在很大的优化点，因为我们的“剪枝”操作过于原始，在这种不需要考虑顺序的题目中，应当考虑更加高效的方法。\",\"class Solution2: def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]: res = [] def back_track(A: list, cur_sum, begin): if cur_sum == target: res.append(sorted(A[:])) return if cur_sum > target: return for i in range(begin, len(candidates)): # 剪枝 if cur_sum + candidates[i] > target: return cur_sum += candidates[i] A.append(candidates[i]) // 不用i+1，表示可以重复读取当前的数 back_track(A, cur_sum, i) cur_sum -= candidates[i] A.pop() candidates.sort() back_track([], 0, 0) return res \",\"注意到这个回溯之前我们先进行了排序 candidates.sort() , 这个剪枝相比于上面的解法高明之处在哪里呢？\",\"如果题目要求，结果集不计算顺序，此时需要按顺序搜索，才能做到不重不漏。（为何排序？按照特定搜索指定了 begin）\",\"使用了一个 begin变量，这个变量用于组合问题，不讲究顺序（即 [2, 2, 3] 与 [2, 3, 2] 视为相同列表时），需要按照某种顺序搜索。\",\"理解 cur_sum 的优点在于：对于刚开始的原始解法，，对于sum已经大于target的情况，其实是依然进入了下一层递归，只是下一层递归结束判断的时候，会判断sum > target的话就返回。其实如果已经知道下一层的sum会大于target，就没有必要进入下一层递归了。所以我们在 for 循环中做了文章，使用 cur_sum 来判断如果下一层的 sum 已经大于 target，就没有必要走下去了，而是直接结束本轮 for 循环的遍历。\",\"参考该blog\"]},\"11\":{\"h\":\"LC40 组合总数II\",\"t\":[\"不同于 LC39 组合总数，LC40 要求 candidates 中的每个数字在每个组合中只能使用一次。\",\"举例而言：\",\"输入: candidates = [10, 1, 2, 7, 6, 1, 5], target = 8,\",\"输出: [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ]\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/combination-sum-ii 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"题目的意思是，每个数字在每一个答案里面只能用一次，无法重复使用，因此如何达到这个限制是本题目的难点，解决方案是使用比较高级的剪枝，与上述题目只有一点不同，具体看代码：\",\"class Solution: def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]: res = [] def back_track(A: list, cur_sum, begin): if cur_sum == target: res.append(A[:]) return if cur_sum > target: return for i in range(begin, len(candidates)): if cur_sum + candidates[i] > target: return if i > begin and candidates[i] == candidates[i - 1]: continue cur_sum += candidates[i] A.append(candidates[i]) back_track(A, cur_sum, i + 1) cur_sum -= candidates[i] A.pop() candidates.sort() back_track([], 0, 0) return res \",\"可以看到，我们在代码中增加了一段剪枝：\",\"if i > begin and candidates[i] == candidates[i - 1]: continue \",\"并且在回溯的时候把 begin 设置为了 i+1 ，个人的理解是，这一步操作排除了当前层的节点，从下一层开始找，达到了我们剪枝的目的。（去重“同一树层上使用过的”元素）\",\"back_track(A, cur_sum, i + 1) \",\"对这个 begin 的理解是：其作用相当于标记了 used 元素（使用 used 数组标记效果相同），我们在 sort() 的情况下用 begin 是可以的。\",\"（需要加深理解，不一定正确。）\"]},\"12\":{\"h\":\"LC46 全排列\",\"t\":[\"在解决了上面的那些问题以后，全排列问题就变得简单了，全排列问题举例如下：\",\"给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。\",\"输入：nums = [1, 2, 3]\",\"输出：[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\",\"该题目使用回溯可以很方便的求解：\",\"class Solution: def permute(self, nums: List[int]) -> List[List[int]]: res = [] def back_track(path): if len(path) == len(nums): res.append(path[:]) return for i in range(len(nums)): if nums[i] in path: continue path.append(nums[i]) back_track(path) path.pop() back_track([]) return res \",\"全排列是经典的回溯问题，套用回溯模板可以很轻松求解。\"]},\"13\":{\"h\":\"LC47 全排列II\",\"t\":[\"给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。\",\"输入：nums = [1, 1, 2]\",\"输出： [[1, 1, 2], [1, 2, 1], [2, 1, 1]]\",\"解法如下：\",\"class Solution: def permuteUnique(self, nums: List[int]) -> List[List[int]]: res = [] def back_track(path: List, visited: List): if len(path) == len(nums): res.append(path[:]) return for i in range(len(nums)): if visited[i] == 1: continue # visited[i - 1] == 1 在该题目中同理，但是性能较差 if i > 0 and nums[i] == nums[i - 1] and visited[i - 1] == 0: continue visited[i] = 1 path.append(nums[i]) back_track(path, visited) visited[i] = 0 path.pop() nums.sort() visited = [0 for _ in nums] back_track([], visited) return res \",\"这道题目不同于全排列的点在于：\",\"集合中有重复的元素，但是最后的结果中不能有重复的组合。我们需要对结果进行去重（直观的思路是用set，但是容易超时）\",\"nums[i] 和 nums[i - 1] 可以理解为同一层的当前选项和同一层的前一个选项\",\"该题目中有两个变量去重，如果仅有num[i] == num[i-1]条件存在，递归时会把相同元素去除，显然不是我们想要的，所以加上了 vistied，防止漏掉元素\",\"如果 visited[i - 1] == 1，说明在同一层，并且 num[i] == num[i-1]，所有可能的组合都早已被这一层第一次出现的那个相同数穷尽了，不需要再画蛇添足。\",\"todo\",\"需要拿 iPad 画图分析一下 visited[i - 1] == 1 和 visited[i - 1] == 0 的剪枝差异，可以参考 题解\"]},\"14\":{\"h\":\"LC77 组合\",\"t\":[\"给定两个整数 n 和 k ，返回范围 [1, n] 中所有可能的 k 个数的组合。\",\"你可以按 任何顺序 返回答案。\",\"输入：n = 4, k = 2 输出： [ [2, 4], [3, 4], [2, 3], [1, 2], [1, 3], [1, 4], ]\",\"class Solution: def combine(self, n: int, k: int) -> List[List[int]]: res = [] nums = [i + 1 for i in range(n)] def back_track(path: List, begin): if len(path) == k: res.append(path[:]) return for i in range(begin, len(nums)): if i > begin and nums[i] == nums[i - 1]: continue path.append(nums[i]) back_track(path, i + 1) path.pop() back_track([], 0) return res \"]},\"15\":{\"h\":\"LC473 火柴拼正方形\",\"t\":[\"题目链接见：473. 火柴拼正方形\",\"这道题目需要注意以下几点：\",\"火柴可以拼接成正方形的条件是，所有火柴的和必须是 4 的倍数\",\"火柴数量小于 4 只的话非法\",\"这两个条件可以作为我们的剪枝条件，我们给出这个题目的求解：\",\"class Solution: def makesquare(self, matchsticks: List[int]) -> bool: if len(matchsticks) < 4 or sum(matchsticks) % 4 != 0: return False target = sum(matchsticks) // 4 # 从大到小排序保证回溯的次数比较少 matchsticks.sort(reverse=True) # 把每一个 bucket 都放满 target bucket = [0] * 4 def backtrack(index: int): if index >= len(matchsticks): return True for i in range(4): if bucket[i] + matchsticks[index] > target: continue bucket[i] += matchsticks[index] if backtrack(index + 1): return True bucket[i] -= matchsticks[index] return False return backtrack(0) \",\"对于上述解法的，需要有以下注意的点：\",\"我们把火柴数量从大到小排列，这样做的好处可以避免过多的回溯\",\"我们给了四个桶 bucket, 每一个桶中最终的数量都是等于正方形的边长\",\"第 16 行，如果当前的火柴加上当前的桶的和超过了 target, 我们则继续遍历其他的桶\",\"剩下的就是回溯的基本步骤\",\"除此之外，我们还能给出一个暴力的 DFS 解法，这个解法也是有助于我们理解这个题目的：\",\"class Solution: def makesquare(self, matchsticks: List[int]) -> bool: if sum(matchsticks) % 4 != 0 or len(matchsticks) < 4: return False # 每个边长可以计算出来 target = sum(matchsticks) // 4 matchsticks.sort(reverse=True) self.res = False @lru_cache(None) def dfs(a, b, c, d, i): if i == len(matchsticks) and a == b == c == d == target: self.res = True return if a + matchsticks[i] <= target: dfs(a + matchsticks[i], b, c, d, i + 1) if b + matchsticks[i] <= target: dfs(a, b + matchsticks[i], c, d, i + 1) if c + matchsticks[i] <= target: dfs(a, b, c + matchsticks[i], d, i + 1) if d + matchsticks[i] <= target: dfs(a, b, c, d + matchsticks[i], i + 1) dfs(0, 0, 0, 0, 0) return self.res \",\"但是总体而言，这个解法是没有回溯的解法优雅的。\"]},\"16\":{\"h\":\"Binary Search\"},\"17\":{\"h\":\"Summary\"},\"18\":{\"h\":\"1. 二分搜索模板\"},\"19\":{\"h\":\"1.1 基本的二分搜索算法\",\"t\":[\"手工实现\",\"class Solution: def search(self, nums: List[int], target: int) -> int: if not nums: return -1 l, r = 0, len(nums) - 1 while l <= r: mid = l + (r - l) // 2 if nums[mid] < target: l = mid + 1 elif nums[mid] > target: r = mid - 1 else: return mid return -1 \",\"使用 Python bisect 库\",\" def search_2(self, nums: List[int], target: int) -> int: res = bisect.bisect_left(nums, target) if res != len(nums) and nums[res] == target: return res return -1 \"]},\"20\":{\"h\":\"1.2 寻找左侧边界的二分搜索\",\"t\":[\"手工实现\",\" def search(self, nums: List[int], target: int) -> int: l, r = 0, len(nums) - 1 while l <= r: mid = l + (r - l) // 2 if nums[mid] < target: l = mid + 1 elif nums[mid] > target: r = mid - 1 elif nums[mid] == target: # 暂时不能返回，需要收缩右边界，锁定左侧边界 r = mid - 1 # 检查越界情况。注意这边下面两个条件是二选一的 if l >= len(nums) or nums[l] != target: return -1 return l \",\"使用 bisect\",\"手工实现在很多情况下都需要调试，比较慢，因此使用 bisect 比较方便，其使用方式如下：\",\"找到 Find rightmost value less than target：找到小于目标元素，离目标元素最近的元素（肯定在左边）。如 [-1, 1, 3, 5, 9, 12] 目标元素 2, 则返回了 1，表示 2 可以插入到 1 和 3 之间。对应的下标 res - 1 就是 1 的下标。\",\"def search2(self, nums: List[int], target: int) -> int: res = bisect.bisect_left(nums, target) if res: return nums[res - 1] return -1 \",\"找到 Find rightmost value less than or equal to target\",\" def search3(self, nums: List[int], target: int) -> int: res = bisect.bisect_right(nums, target) if res: return nums[res - 1] return -1 \"]},\"21\":{\"h\":\"1.3 寻找右侧边界的二分搜索\",\"t\":[\"手工实现\",\" def search(self, nums: List[int], target: int) -> int: l, r = 0, len(nums) - 1 while l <= r: mid = l + (r - l) // 2 if nums[mid] < target: l = mid + 1 elif nums[mid] > target: r = mid - 1 elif nums[mid] == target: # 暂时不能返回，需要收缩左边界，锁定右侧边界 l = mid + 1 # 检查越界情况。注意这边下面两个条件是二选一的 if r < 0 or nums[l] != target: return -1 return r \",\"使用库\",\"def find_gt(a, x): 'Find leftmost value greater than x' i = bisect_right(a, x) if i != len(a): return a[i] raise ValueError def find_ge(a, x): 'Find leftmost item greater than or equal to x' i = bisect_left(a, x) if i != len(a): return a[i] raise ValueError \"]},\"22\":{\"h\":\"1.3 参考\",\"t\":[\"在二分查找中，要特别注意边界的问题，二分查找的边界，分为 [left, right) 和 [left, right].\",\"初始化时，形式为 left = 0, right = n, 其中 n 表示数组的长度，由于数组取不到下标 n, 故为左闭右开区间；\",\"初始化时，形式为 left = 0, right = n - 1, 故为左闭右闭区间。\",\"bug!!!\",\"对于左闭右开区间([left, right) )而言，应注意：\",\"在写代码时，应当注意边界条件：\",\"如果初始化为左闭右开区间，则当 mid 的值小于要查找的值的时候，left = mid + 1 是正确的\",\"而当 mid 的值大于要查找的值的时候（这时候需要向左查找），此时如果让 right 赋值为 mid - 1, 则有可能存在 mid - 1 正好是要查找的值的情况，要十分慎重。\",\"基于此，在写二分查找时，可以基于以下原则：标准程序参考链接\",\"使用左右闭区间初始化，查找后条件应当变成：left = mid + 1 and right = mid -1, 否则会出现死循环；\",\"使用左闭右开区间初始化，查找后条件应当是：left = mid + 1 and right = mid;\",\"left 初值为 -1, 循环条件使用 while(left + 1 != right);\",\"对边界条件专门进行判断。\"]},\"23\":{\"h\":\"二分查找思路整理\",\"t\":[\"有下面的例子，可以分为四种问题，提出二分查找：\",\"从一个新的角度区理解这个问题，该问题可以变为：找出图中的蓝红边界，即求出未知数K。\",\"针对此问题，可以写出伪代码如下所示：\",\"l = -1, r = N while l + 1 != r m = (l + r) / 2 取下界 if isBlue(m) l = m else r = m return l or r \",\"有了以上的伪代码，图1 中的问题答案分别为：\",\"参考视频：https://www.bilibili.com/video/BV1d54y1q7k7\"]},\"24\":{\"h\":\"Code\"},\"25\":{\"h\":\"wiki 伪代码\",\"t\":[\"记住口诀\",\"mid 在前，先小后大，先左后右\",\"解析：mid 总是在比较的左边：mid < target; 先写 mid 小于，对应左边 l = mid + 1; 再写 mid 大于，对应右边。\",\"function binary_search(A, n, T): L := 0 R := n − 1 while L <= R: m := floor((L + R) / 2) if A[m] < T: L := m + 1 else if A[m] > T: R := m - 1 else: return m return unsuccessful \"]},\"26\":{\"h\":\"查找插入位置\",\"t\":[\"二分查找有序序列中某个元素的位置，如果没找到，则返回其需要插入的位置(LC 035):\",\"def binarySearch(nums, target): l, r = 0, len(nums) - 1 while l <= r: mid = (l + r) // 2 if nums[mid] < target: l = mid + 1 else: r = mid - 1 return l \"]},\"27\":{\"h\":\"bisect\",\"t\":[\"或者使用 Python 自带的 bisect:\",\"import bisect nums = [1, 3, 4, 4, 6, 7] print(bisect.bisect(nums, 4)) print(bisect.bisect_left(nums, 4)) \",\"注意到，bisect() 默认会查找元素需要插入的位置，如果是重复的元素，则会返回其最右侧可以插入的位置，使用 bisect_left() 可以返回其左侧位置。\"]},\"28\":{\"h\":\"向上、下取整\",\"t\":[\"使用 B(A+B−1)​ 计算\",\"使用 math.ceil() 和 math.floor():\",\"imprt math math.ceil(7/4) # 2 math.floor(7/4) # 1 or 7//4 round(2.6) # 3 四舍五入 \",\"一般而言，我们在快速排序或者二分查找中如果要计算 mid, 则可以使用 mid=left+2right−left​ 来计算[1]。\"]},\"29\":{\"h\":\"Problems\"},\"30\":{\"h\":\"查找二维数组中是否存在某个元素\",\"t\":[\"在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\",\"\\\"\\\"\\\" 利用二分查找的思想： 需要遍历每一行得到最后的答案，这个操作顺便复习一下二分查找 \\\"\\\"\\\" def find_in_array_binary_search(self, alist, target) -> bool: for i in range(len(alist)): l = 0 r = len(alist[i]) - 1 while l <= r: mid = (l + r) // 2 # mid = l + (r - l) // 2 if target < alist[i][mid]: l = mid + 1 elif target > alist[i][mid]: r = mid - 1 else: return True return False \",\"提示\",\"注意到这里用到了 先小(<)后大(>), 先左(l)后右 的口诀。\"]},\"31\":{\"h\":\"完全平方数\",\"t\":[\"使用二分查找判断某个数是否完全平方数：\",\"def isPerfectSquare(self, num: int) -> bool: ''' using binary search ''' l, r = 0, num while l <= r: mid = (l + r) // 2 if mid * mid == num: return True elif mid * mid < num: l = mid + 1 else: r = mid - 1 return False \"]},\"32\":{\"h\":\"数字在排序数组中出现的次数\",\"t\":[\"统计一个数字在排序数组中出现的次数。\",\"使用二分查找，首先查找在前面出现的位置 start, 再查找在后面出现的位置 end, 然后相减得到答案。\",\"这个题目对查找插入位置的概念进行了强化：\",\"class Solution: def GetNumberOfK(self, data, k): start = self.get_start(data, k) end = self.get_end(data, k) return end - start def get_start(self, data, k): l, r = 0, len(data) - 1 while l <= r: mid = (l + r) // 2 if data[mid] < k: l = mid + 1 else: r = mid - 1 return l def get_end(self, data, k): l, r = 0, len(data) - 1 while l <= r: mid = (l + r) // 2 if data[mid] <= k: l = mid + 1 else: r = mid - 1 return l \"]},\"33\":{\"h\":\"Find Peak Element - 寻找峰值\",\"t\":[\"找寻一个数组的峰值\",\"输入: nums = [1,2,1,3,5,6,4]\",\"输出: 1 或 5\",\"解释: 你的函数可以返回索引 1，其峰值元素为 2；或者返回索引 5， 其峰值元素为 6。\",\"这道题目只要求返回一个峰值，所以可以从前往后遍历，遇到符合条件的返回即可，暴力解法和二分法的代码如下：\",\"# 暴力求解 class Solution: def findPeakElement(self, nums: 'List[int]') -> int: for i in range(1, len(nums)): if nums[i] < nums[i-1]: return i-1 return len(nums)-1 # 二分查找 class SolutionBinarySearch: def findPeakElement(self, nums: 'List[int]') -> int: n = len(nums) if n == 0: return 0 l = 0 r = len(nums) - 1 while l + 1 < r: mid = l + (r - l) // 2 if nums[mid] < nums[mid + 1]: l = mid + 1 else: r = mid if l == n - 1 or nums[l] > nums[l + 1]: return l else: return r \"]},\"34\":{\"h\":\"LC875 爱吃香蕉的珂珂\",\"t\":[\"珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。\",\"珂珂可以决定她吃香蕉的速度 K （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。\",\"珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。\",\"返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/koko-eating-bananas 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"下面两种解法展示了不同边界条件下该如何处理：\",\"class Solution: def minEatingSpeed(self, piles: List[int], h: int) -> int: l, r = 1, max(piles) while l < r: mid = l + (r - l) // 2 cost = self.check(mid, piles) # 耗时太多，说明速度太慢了 if cost > h: l = mid + 1 else: r = mid return l def check(self, mid, piles): cost = 0 for pile in piles: if mid >= pile: cost += 1 else: # 向上取整 cost += ceil(pile / mid) # cost += (pile + mid - 1) // mid return cost \",\"class Solution: def minEatingSpeed(self, piles: List[int], h: int) -> int: l, r = 1, max(piles) while l <= r: mid = l + (r - l) // 2 cost = self.check(mid, piles) if cost > h: l = mid + 1 else: r = mid - 1 return l \",\"上述代码的两种解法都是可以的，区别在于边界条件的不同，可以参考比较，加以掌握。\",\"除此之外，我们对上述代码进行一个简单的阐述：\",\"l, r 左右区间的取值。我们根据题目要求分析得知，要求解一个速度，这个速度是每次吃香蕉的速度，这个速度的最小值为 1, 最大值就是这一对香蕉里面最多的那个，速度介于 [1, max(piles)] 之间。分析这个也是求解二分问题的关键。\",\"check 函数的作用是，求解速度为 x 的时候，吃完所有香蕉所需要的时间，其中吃一堆香蕉的时间可以分情况计算，向上取整就是这个速度吃完当前堆的香蕉所需要的时间。我们计算出这个时间，和给定的时间进行比较，如果说计算出来的时间不够吃完所有的香蕉，那么我们需要在右边区间搜索，反之也一样。\"]},\"35\":{\"h\":\"求根号 x 的值\",\"t\":[\"可以使用二分法，解法一如下：\",\"class Solution: def mySqrt(self, x: int) -> int: # 二分法 delta = 1e-5 l, r = 1, x while l < r: mid = (l + r) * 0.5 if abs(mid ** 2 - x) < delta: return mid elif mid ** 2 > x: r = mid else: l = mid return l \",\"解法二如下：\",\" mid = (l + r) * 0.5 while True: if mid ** 2 > x: r = mid else: l = mid last = mid mid = (l + r) * 0.5 if abs(mid - last) < delta: break return mid \",\"解法一比解法二好很多，可以掌握一下！\",\"如果是要求结果是整数，则使用以下解法：\",\"class Solution: def mySqrt(self, x: int) -> int: # 二分法, 要求结果是取整的 l, r = 0, x res = -1 while l <= r: mid = (l + r) // 2 if mid ** 2 <= x: res = mid l = mid + 1 else: r = mid - 1 return res \"]},\"36\":{\"h\":\"LC719 找出第 K 小的数对距离\",\"t\":[\"719. 找出第 K 小的数对距离\",\"我们的解法如下：\",\"class Solution: def smallestDistancePair(self, nums: List[int], k: int) -> int: # 这道题目为什么可以使用二分？ def count(mid: int) -> int: # 这个函数求解，有多少对数字之间的距离小于等于 mid # 已知 num, 并且 abs(num - x) <= mid, 由于我们枚举右边界去寻找左边界，则一定存在 num(右边界) > x # 所以 num - x <= mid --> num - mid <= x, 我们需要找到 x 的位置, 范围是 0 ~ j # 找到了左边界以后，所有满足的数字对的个数就是 j - i res = 0 for j, num in enumerate(nums): i = bisect_left(nums, num - mid, 0, j) res += j - i return res # return bisect_left(range(nums[-1] - nums[0]), k, key=count) nums.sort() left, right = 0, max(nums) - min(nums) while left <= right: mid = left + (right - left) // 2 if count(mid) >= k: right = mid - 1 else: left = mid + 1 return left \",\"注释里面给出了一些思考的点，主要体现在以下方面：\",\"对数组 nums 进行排序\",\"我们假设存在一个 mid, 这个 mid 是我们找到的两个数之间的距离的最大值，我们找到符合条件的数字 x, 规定右边界，寻找左边界\",\"根据一个右边界，找到所有的左边界，然后统计符合条件的数量，这个数量作为二分查找的条件\",\"总结来说，这个题目的难点在于想到可以使用二分查找求解。\"]},\"37\":{\"h\":\"参考文献\",\"t\":[\"二分查找 python 代码↩︎\"]},\"38\":{\"c\":[\"Algorithm\"]},\"39\":{\"c\":[\"algorithm\",\"binary_search\"]},\"40\":{\"h\":\"Binary Tree\",\"t\":[\"本文主要研究了：\",\"二叉树的三种遍历方式：递归和迭代实现\",\"二叉树相关的例题解析\"]},\"41\":{\"h\":\"二叉树的前序遍历\"},\"42\":{\"h\":\"递归法\",\"t\":[\"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]: def preorder(node): if not node: return res.append(node.val) preorder(node.left) preorder(node.right) res = list() preorder(root) return res \",\"上述就是递归实现的而阐述的前序遍历。除此之外，还有一种不是很 Python 的但是较为通用、方便理解的方法：\",\"class Solution: # 前序遍历函数 def preOrder(self, root: TreeNode, res): if root == None: return res.append(root.val) self.preOrder(root.left, res) self.preOrder(root.right, res) def preorderTraversal(self, root: TreeNode) -> List[int]: res = [] self.preOrder(root, res) return res \",\"其本质上就是把递归的结果收集 res 增加到了递归中去了。\",\"我们还有一种很 Python 的实现方式如下：\",\"class Solution: def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]: if not root: return [] return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right) \",\"是不是很优雅？哈哈，值得深入去理解！\"]},\"43\":{\"h\":\"迭代法\",\"t\":[\"前序遍历的迭代实现依赖于栈结构，具体而言不是很好理解的，需要多加理解才可以，其实现如下：\",\"class Solution: def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]: res = [] stack = [] while stack or root: while root: res.append(root.val) stack.append(root.right) root = root.left root = stack.pop() return res \",\"从上述代码中可以看出来的规律如下：\",\"stack 中自始至终只加入了 root.right\",\"root.left 都是被遍历完毕了\"]},\"44\":{\"h\":\"二叉树的中序遍历\"},\"45\":{\"h\":\"递归法\",\"t\":[\"二叉树的中序遍历递归解法参考如下：\",\"def dfs(root: Optional[TreeNode], res): if not root: return dfs(root.left, res) res.append(root.val) dfs(root.right, res) \"]},\"46\":{\"h\":\"迭代法\",\"t\":[\"class Solution: def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]: stack = [] res = [] while stack or root: while root: stack.append(root) root = root.left root = stack.pop() res.append(root.val) root = root.right return res \",\"这种方法理解起来并不是很直观，我们需要加深对“中序遍历：左 -- 根 -- 右” 的理解，就是说我们先遍历左子树，然后遍历完之后再走到右子树。\",\"我们可以举例说：\",\"上述二叉树的中序遍历结果是 [4, 2, 5, 1, 6, 3]\",\"我们第一趟的时候，栈内元素是 [1, 2, 4], 然后 root 指向了 Null, 这时候我们给结果里面增加元素，到 root.right 不是 Null 了，再继续找。\",\"同样的，我们可以根据中序遍历的应用题目 面试题 04.06. 后继者 来加深印象。\"]},\"47\":{\"h\":\"二叉树的层次遍历\",\"t\":[\"LC102 - Binary Tree Level Order Traversal\",\"代码实现如下：\",\"Code GitHub - binary_tree\",\"def levelOrder(root): ''' 二叉树的层次遍历 ''' if not root: return [] result = [[root.data]] # 存储层次遍历的结果 current = [root] # 存储当前层次内的节点，在循环里面更新 while True: node_list = [] # 临时存储节点 for node in current: # 循环内遍历 if node.left: node_list.append(node.left) if node.right: node_list.append(node.right) if node_list == []: break vals = [node.data for node in node_list] # 拿出当前层次的节点的值 result.append(vals) current = node_list # 更新层次 return result \",\"这是目前可以写出的比较高效的一个算法，应当牢记。\",\"也可以参考下面的解法：\",\"class Solution: def levelOrder(self, root: TreeNode) -> List[List[int]]: if not root: return [] q = collections.deque([root]) res = [] while q: # 这个 node 已经取出了 size = len(q) tmp = [] for _ in range(size): # 在 for 循环中把 q 这个队列拿空 # 第一次 for 迭代循环的是 root 节点 node = q.popleft() if node.left: q.append(node.left) if node.right: q.append(node.right) tmp.append(node.val) if tmp: res.append(tmp) return res \",\"也可以使用递归的方法：\",\"class Solution: def levelOrder(self, root: TreeNode) -> List[List[int]]: if not root: return [] res = [] def dfs(root: TreeNode, res, level: int): if len(res) == level: res.append([]) res[level].append(root.val) if root.left: dfs(root.left, res, level + 1) if root.right: dfs(root.right, res, level + 1) dfs(root, res, 0) return res \",\"当遍历到一个新的深度 level，而最终结果 res 中还没有创建 level 对应的列表时，应该在 res 中新建一个列表用来保存该 level 的所有节点。\"]},\"48\":{\"h\":\"例题\"},\"49\":{\"h\":\"LC606 根据二叉树创建字符串（前序遍历）\",\"t\":[\"https://leetcode-cn.com/problems/construct-string-from-binary-tree/\",\"题目的大概意思是，前序遍历二叉树，但是给每个子节点都用括号包裹起来，如果子节点是空的话，就不用括号。是一道简单题。\",\"这道题目的核心难点在于，如何包裹。解法给出了一个讨论情况然后分别处理的方法：\",\"左右节点都没有了，返回；\",\"左节点有，右节点没有，左节点包裹后继续递归；\",\"左节点没有，右节点有，左节点用空括号（题目要求），右节点递归\",\"左右节点都有，都递归\",\"其实现方式如下：\",\"class Solution: def tree2str(self, root: Optional[TreeNode]) -> str: if not root: return '' res = str(root.val) if not root.left and not root.right: return res left = self.tree2str(root.left) right = self.tree2str(root.right) res += '(' + left + ')' if right: res += '(' + right + ')' return res \"]},\"50\":{\"h\":\"LC101 对称二叉树\",\"t\":[\"101. 对称二叉树\",\"给定二叉树，判断二叉树是否镜像对称。\",\" 1 / \\\\ 2 2 / \\\\ / \\\\ 3 4 4 3 \"]},\"51\":{\"h\":\"DFS 解法\",\"t\":[\"这是该题目的 DFS（递归）解法。\",\"代码如下：\",\"class SolutionDFS: def isSymmetric(self, root: TreeNode) -> bool: # 反例 [1] if not root.right and not root.left: return True # if not root.left or not root.right: # return False def dfs(left, right): # 递归终止条件，两个节点都为空 if not left and not right: return True if not left or not right: return False if left.val != right.val: return False return dfs(left.left, right.right) and dfs(left.right, right.left) return dfs(root.left, root.right) \",\"从代码中我们可以看出，我们定义递归终止条件：\",\"两个节点都为空，返回 True, 递归终止\",\"两个节点中有一个不存在，不对称，返回 False\",\"两个节点的值不相等，返回 False\",\"在这些条件满足以后，我们对 left.left 和 right.right等分别递归即可求出结果。\"]},\"52\":{\"h\":\"BFS 解法\",\"t\":[\"101. 对称二叉树\",\"给定二叉树，判断二叉树是否镜像对称。\",\" 1 / \\\\ 2 2 / \\\\ / \\\\ 3 4 4 3 \",\"可以看出，上述中就是一个对称的二叉树，我们得出一个简单的规律：\",\"对于某个节点，如果其没有左节点或者右节点，那么其肯定不是一个对称二叉树；\",\"对于某个节点，其兄弟节点的左右节点值要与自己的左右节点值对应相等。我们该如何保证这个呢？\",\"其对应的代码如下：\",\"class Solution: def isSymmetric(self, root: TreeNode) -> bool: if not root: return False q = collections.deque([(root, root)]) while q: left, right = q.popleft() if not left and not right: continue if not left or not right: return False if left.val != right.val: return False q.append((left.left, right.right)) q.append((left.right, right.left)) return True \",\"这种解法的思路在于，在队列中同时取出两个节点 left, right，然后判断其值是否相等，再将他们的孩子中按照 (left.left, right.right) 一组，(left.right, right.left)一组放入队列中。\",\"还有一种解法是，往队列中放 4 次元素，按照 left.left, right.right, left.right, right.left 的顺序，然后逐一判断即可。\"]},\"53\":{\"h\":\"LC111 二叉树的最小深度\",\"t\":[\"二叉树的最小深度\",\"🏀🏀🏀 我们根据“概览”中的原则对这个问题进行分析：起点就是 root 节点，终点就是最靠近根节点的那个叶子节点（叶子节点的左右子节点都是 null）。\"]},\"54\":{\"h\":\"BFS 解法\",\"t\":[\"其使用 BFS 的解法如下：\",\"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def minDepth(self, root: TreeNode) -> int: if not root: return 0 queue = collections.deque() first_node = (root, 1) queue.append(first_node) while queue: node, depth = queue.popleft() # 判断是否到达终点，终止条件 if not node.left and not node.right: return depth if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return 0 \"]},\"55\":{\"h\":\"LC104 二叉树的最大深度\"},\"56\":{\"h\":\"DFS 解法\",\"t\":[\"104. 二叉树的最大深度\",\"💓💓💓 思考 🧡🧡🧡\",\"如何用 DFS 的思维来思考这个问题呢？\",\"假设我们已经知道了左子树和右子树的最大深度 l, r, 那么整个二叉树的最大深度就是根节点的深度 1 加上左右子树中的最大深度，用公式表达是：\",\"depth=max(l,r)+1\",\"所以我们可以使用深度有限搜索来计算二叉树的最大深度，具体而言就是递归计算出二叉树左子树和右子树的最大深度，然后再使用上述公式直接计算出二叉树的最大深度。\",\"而二叉树左右子树的深度也都可以通过相同的方法递归获得，递归在访问到空节点时退出。\",\"复杂度分析\",\"该问题使用 DFS 求解，其时间复杂度为 O(n), 每个节点在递归中只被遍历一次。\",\"其空间复杂度为 O(height)，与二叉树的高度有关。由于递归需要栈空间，而栈空间取决于递归的深度，因此空间复杂度等价于二叉树的高度。\",\"问题求解\",\"这个题目存在 DFS 和 BFS 解法，下面是这个题目的 DFS 解法：\",\"解法：使用辅助函数来进行递归：\",\"class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 def dfs(node: TreeNode): if not node: return 0 return max(dfs(node.right), dfs(node.left)) + 1 return dfs(root) \",\"上述做法使用了一个 dfs()辅助函数进行递归，我们也可以不使用辅助函数。\",\"解法：直接递归：\",\"class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 return max(self.maxDepth(root.right), self.maxDepth(root.left)) + 1 \",\"这个不带辅助函数的解法是比带辅助函数的解法稍慢的，但是代码更加简洁。\"]},\"57\":{\"h\":\"BFS 解法\",\"t\":[\"对比求二叉树的最小深度，其代码如下：\",\"class Solution: def maxDepth(self, root: TreeNode) -> int: if not root: return 0 q = collections.deque([(root, 1)]) res = 1 while q: node, depth = q.popleft() res = max(res, depth) if node.left: q.append((node.left, depth + 1)) if node.right: q.append((node.right, depth + 1)) return res \",\"除此之外，该题目还存在 DFS 解法，可以参考上文。\"]},\"58\":{\"h\":\"LC102 二叉树的层序遍历\",\"t\":[\"102. 二叉树的层序遍历\",\"二叉树的层序遍历也会使用到 BFS 的思想，这个题目存在以下几个难点：\",\"如何构造最终的结果，即类似于 [[3], [9,20], [15,7]] 这样的 List of List 的形式？\",\"能否继续使用上面的解法模板来求解这个问题？模板是否具有普适性？\"]},\"59\":{\"h\":\"BFS 解法\",\"t\":[\"接下来看第一版本的代码：\",\"class Solution: def levelOrder(self, root: TreeNode) -> List[List[int]]: if not root: return [] q = collections.deque([root]) res = [] while q: size = len(q) tmp = [] for _ in range(size): # 在 for 循环中把 q 这个队列拿空 # 第一次 for 迭代循环的是 root 节点 node = q.popleft() if node.left: q.append(node.left) if node.right: q.append(node.right) tmp.append(node.val) if tmp: res.append(tmp) \",\"可以看出：\",\"在每次迭代中，我们都保证了把同一层的元素进行迭代；即队列中存储的元素永远是在同一层的元素，然后计算出这些元素的个数，用 for 循环逐一进行遍历。\",\"❗❗❗ BFS 为什么要使用队列？\",\"在这里我理解了为什么 BFS 要使用队列这个数据结构，我们用 for 循环逐一进行遍历的时候，还没被遍历到的“上一层”元素都是在队列头部的，使用队列能保证这些上一层元素都被“踢”出去，而不影响本层新进来的元素。\",\"这个题目的关键就是用 for 循环保证了同一层元素的遍历。\"]},\"60\":{\"h\":\"LC107 二叉树的层序遍历II\",\"t\":[\"107. 二叉树的层序遍历 II\",\"这个题目不同于二叉树层次遍历的地方在于，**给定一个二叉树，返回其节点值自底向上的层序遍历。 **\",\"为了达到这个效果，我们可以在每次遍历之后，将结果放在结果集的头部，这样就可以得到我们想要的输出形式了。\",\"其相对于上述代码的不同在于：\",\"res = collections.deque() # 向左端插入 res.appendleft(tmp) # 返回时进行类型转换 return list(res) \",\"当然也可以使用上面的代码直接将结果反转。\"]},\"61\":{\"h\":\"LC103 二叉树的锯齿形层序遍历\",\"t\":[\"103. 二叉树的锯齿形层序遍历\",\"这道题目是上面二叉树层序遍历的变种题目，题目的描述为：\",\"给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。\",\"我们对题目进行分析可以发现遍历顺序和层级的关系：\",\"层数\",\"遍历顺序\",\"第一层（root）\",\"从左往右\",\"第二层\",\"从右往左\",\"第三次\",\"从左往右\",\"第四层\",\"从右往左\",\"奇数层\",\"从左往右\",\"偶数层\",\"从右往左\",\"我们发现遍历的顺序是和层级有关的，因此我们可以根据层级来确定遍历顺序：\",\"🔴🔴🔴 遍历顺序，需要注意的是，我们一定要在队列中先添加左节点，再添加右节点，这个顺序需要保证，才能与后面的 depth % 2 == 0 配套。\",\"class Solution: def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]: if not root: return [] q = collections.deque([(root, 1)]) res = [] depth = 1 while q: size = len(q) tmp = [] for _ in range(size): node, depth = q.popleft() # 注意遍历顺序 if node.left: q.append((node.left, depth + 1)) if node.right: q.append((node.right, depth + 1)) tmp.append(node.val) if depth % 2 == 0: # 偶数层从右往左 tmp.reverse() if tmp: res.append(tmp) return res \"]},\"62\":{\"h\":\"LC543 二叉树的直径\",\"t\":[\"https://leetcode-cn.com/problems/diameter-of-binary-tree/\",\"class Solution: def __init__(self): self.res = 1 def diameterOfBinaryTree(self, root: TreeNode) -> int: def depth(node: TreeNode): if not node: return 0 left = depth(node.left) right = depth(node.right) self.res = max(self.res, left + right + 1) return max(left, right) + 1 depth(root) return self.res - 1 \"]},\"63\":{\"h\":\"面试题 04.06. 后继者\",\"t\":[\"面试题 04.06. 后继者\",\"设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。\",\"如果指定节点没有对应的“下一个”节点，则返回null。\"]},\"64\":{\"h\":\"中序遍历\",\"t\":[\"我们可以使用中序遍历的方法来求解这个问题，并且中序遍历过程中，维护上一个访问的节点。\",\"中序遍历部分，可以直接套用迭代的中序遍历模板。\",\"class Solution: def inorderSuccessor(self, root: TreeNode, p: TreeNode) -> TreeNode: pre, cur = None, root stack = [] while stack or cur: while cur: stack.append(cur) cur = cur.left cur = stack.pop() if pre == p: return cur pre = cur cur = cur.right return None \",\"在实现这个代码的时候，有几点我没有理解透彻，导致写错：\",\"pre, cur = None, root 初始值的赋值需要好好体会\",\"stack.append(cur) 这边是 cur 入栈，入栈以后再遍历左边\",\"cur = stack.pop() 出栈的步骤不要忘记\"]},\"65\":{\"h\":\"BST 特性解法\",\"t\":[\"这道题目除了可以根据中序遍历来求解外，也可以根据 BST 的特点进行求解。\",\"@todo\"]},\"66\":{\"c\":[\"Algorithm\"]},\"67\":{\"c\":[\"binary tree\"]},\"68\":{\"h\":\"DFS & DFS\"},\"69\":{\"h\":\"Abstract\",\"t\":[\"📑📑📑 深度优先搜索算法\",\"📑📑📑 广度优先搜索算法\"]},\"70\":{\"h\":\"深度优先搜索算法\",\"t\":[\"英语：Depth-First-Search，DFS是一种用于遍历或搜索树或图的算法。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次.\",\"因发明「深度优先搜索算法」，约翰 · 霍普克洛夫特与罗伯特 · 塔扬在1986年共同获得计算机领域的最高奖：图灵奖。\"]},\"71\":{\"h\":\"广度优先搜索算法\",\"t\":[\"Breadth-First Search，缩写为 BFS，又称为宽度优先搜索，是一种图形搜索算法。简单的说，BFS 是从根结点开始，沿着树的宽度遍历树的结点。如果所有结点均被访问，则算法中止。\",\"广度优先搜索也广泛应用在图论问题中。\"]},\"72\":{\"h\":\"DFS\"},\"73\":{\"h\":\"概览\",\"t\":[\"遇到一个问题，如何确定可以使用 DFS 求解？\",\"使用 DFS 求解的一般套路是什么？DFS 一般会用到了递归的概念，所以我们写出来的代码结构也应该是递归的。而对于递归，我们有的时候可以递归函数本身，有的时候需要写辅助函数来进行递归。\",\"上述 DFS 求解问题可以总结为 自底向上方法。\"]},\"74\":{\"h\":\"LC329 矩阵中的最长递增路径\",\"t\":[\"给定一个整数矩阵，找出最长递增路径的长度。\",\"对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。\",\"这是一道迷宫搜索问题，可以使用 DFS 搜索，这样可以熟悉 DFS 的步骤。实现代码如下所示：\",\"from typing import List class Solution: def __init__(self, *args, **kwargs): self.dirs = [ [0, 1], [1, 0], [0, -1], [-1, 0] ] self.m = None self.n = None def longestIncreasingPath(self, matrix: List[List[int]]) -> int: if len(matrix) == 0: return 0 self.m = len(matrix) self.n = len(matrix[0]) ans = 0 for i in range(self.m): for j in range(self.n): ans = max(ans, self.dfs(matrix, i, j)) return ans def dfs(self, matrix, i, j): ans = 0 for d in self.dirs: x = i + d[0] y = j + d[1] if x >= 0 and x < self.m and y >= 0 and y < self.n and matrix[x][y] > matrix[i][j]: ans = max(ans, self.dfs(matrix, x, y)) ans += 1 return ans nums = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] print(Solution().longestIncreasingPath(nums)) \",\"但是不幸的是，上述的解法会导致超时，所以我们要配合缓存，来求解这个问题：\",\"from re import M from typing import List class Solution: def __init__(self): self.directions = [ [0, 1], [0, -1], [1, 0], [-1, 0] ] def longestIncreasingPath(self, matrix: List[List[int]]) -> int: res = 0 memo = [[0] * len(matrix[0]) for _ in range(len(matrix))] def dfs(i, j): # 这一步很重要，在缓存里面有的话，直接返回 if memo[i][j] != 0: return memo[i][j] memo[i][j] = 1 for d in self.directions: x, y = i + d[0], j + d[1] if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] > matrix[i][j]: memo[i][j] = max(memo[i][j], dfs(x, y) + 1) return memo[i][j] if not matrix: return 0 for i in range(len(matrix)): for j in range(len(matrix[0])): if memo[i][j] != 0: res = max(res, memo[i][j]) else: res = max(res, dfs(i, j)) return res \"]},\"75\":{\"h\":\"LC841 钥匙和房间\",\"t\":[\"有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。\",\"在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。\",\"最初，除 0 号房间外的其余所有房间都被锁住。\",\"你可以自由地在房间之间来回走动。\",\"如果能进入每个房间返回 true，否则返回 false。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/keys-and-rooms 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"其 DFS 解法如下所示：\",\"class Solution: def canVisitAllRooms(self, rooms: List[List[int]]) -> bool: n = len(rooms) visited = set() num = 0 def dfs(i: int): visited.add(i) nonlocal num num += 1 for it in rooms[i]: if it not in visited: dfs(it) dfs(0) return num == n \",\"如果这个不好理解，可以参考如下 DFS 解法：\",\"class Solution: def canVisitAllRooms(self, rooms: List[List[int]]) -> bool: visited = set() visited.add(0) def dfs(i, visited): visited.add(i) for key in rooms[i]: if key not in visited: visited.add(key) dfs(key, visited) dfs(0, visited) return len(visited) == len(rooms) \",\"二刷的解法更加简洁：\",\"class Solution: def canVisitAllRooms(self, rooms: List[List[int]]) -> bool: visited = set() def dfs(i: int): visited.add(i) for key in rooms[i]: if key not in visited: visited.add(key) dfs(key) dfs(0) return len(visited) == len(rooms) \",\"使用 stack 的解法如下：\",\"class Solution: def canVisitAllRooms(self, rooms: List[List[int]]) -> bool: visited = set() visited.add(0) stack = [0] while stack: idx = stack.pop() for key in rooms[idx]: if key not in visited: visited.add(key) stack.append(key) return len(rooms) == len(visited) \",\"还有 BFS 解法，可参考下文。\"]},\"76\":{\"h\":\"LC200 岛屿数量\",\"t\":[\"给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。\",\"岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\",\"此外，你可以假设该网格的四条边均被水包围。\",\"示例 1：\",\"输入：grid = [ [\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"0\\\"], [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\"], [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"], [\\\"0\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"] ] \",\"输出：1\",\"来源：力扣（LeetCode）\",\"链接：https://leetcode-cn.com/problems/number-of-islands\",\"著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"DFS 解法如下：\",\"class Solution: def dfs(self, grid, i, j): if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1': return grid[i][j] = '#' self.dfs(grid, i + 1, j) self.dfs(grid, i - 1, j) self.dfs(grid, i, j + 1) self.dfs(grid, i, j - 1) def numIslands(self, grid): count = 0 if not grid: return count for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': self.dfs(grid, i, j) # mark the visited count += 1 return count \"]},\"77\":{\"h\":\"LC386 字典序排数\",\"t\":[\"输入：n = 13\",\"输出：[1,10,11,12,13,2,3,4,5,6,7,8,9]\",\"https://leetcode-cn.com/problems/lexicographical-numbers/\",\"其 DFS 的递归解法如下：\",\"class Solution: def lexicalOrder(self, n: int) -> List[int]: res = [] def dfs(cur: int): if cur > n: return res.append(cur) for _ in range(10): dfs(cur * 10 + _) for i in range(1, 10): dfs(i) return res \",\"注意到上述代码，我们在外层循环递归的时候从 1 开始而不是从 0 开始，因为我们不需要递归 0 开头的。\",\"但是题目中要求了你必须设计一个时间复杂度为 O(n) 且使用 O(1) 额外空间的算法，所以我们尝试使用迭代的方法来解决这个问题。\",\"class Solution: def lexicalOrder(self, n: int) -> List[int]: res = [0] * n num = 1 for i in range(n): res[i] = num if num * 10 <= n: num *= 10 else: while num % 10 == 9 or num + 1 > n: num //= 10 num += 1 return res \",\"这种解法的核心在于判断末尾是否已经搜索完成，搜索完成的话退回上一位。\"]},\"78\":{\"h\":\"LC417 太平洋大西洋水流问题\",\"t\":[\"题目描述见 https://leetcode-cn.com/problems/pacific-atlantic-water-flow/, 简单概括一下，这个题目就是给你一个二维的矩阵，然后看这个二维矩阵中的元素是不是都可以到太平洋和大西洋，其中太平洋在矩阵的左边和上边环绕，大西洋在矩阵的右边和下边环绕。\"]},\"79\":{\"h\":\"DFS\",\"t\":[\"我们给出这个问题的 DFS 解法：\",\"class Solution: def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]: # 水必须流进大西洋 and 太平洋 m, n = len(heights), len(heights[0]) def search(starts: List): visited = set() def dfs(x: int, y: int): if (x, y) in visited: return visited.add((x, y)) for nx, ny in ((x + 1, y), (x, y + 1), (x - 1, y), (x, y - 1)): if 0 <= nx < m and 0 <= ny < n \\\\ and heights[nx][ny] >= heights[x][y]: dfs(nx, ny) for x, y in starts: dfs(x, y) return visited # 从矩阵的上边界和左边界开始搜索, (0, 0) 不重复加 # [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (2, 0), (3, 0), (4, 0)] pacific = [(0, i) for i in range(n)] + [(i, 0) for i in range(1, m)] # 从矩阵的下边界和右边界开始 atlantic = [(m - 1, i) for i in range(n)] + [(i, n - 1) for i in range(m - 1)] return list(map(list, search(pacific) & search(atlantic))) \",\"这个题目中用到了一种“反向搜索”的概念，其实本质来说，就是从矩阵边界进行搜索。根绝题目含义，反向搜索的时候，每次只能移动到高度相同或者高度更大的单元格。\",\"注意到我们的初始化，pacific 和 atlantic 均表示边界元素的坐标。\"]},\"80\":{\"h\":\"BFS\",\"t\":[\"我们给出这个问题的 BFS 解法：\",\" def pacificAtlanticBfs(self, heights: List[List[int]]) -> List[List[int]]: # 水必须流进大西洋 and 太平洋 m, n = len(heights), len(heights[0]) def bfs(starts: List): visited = set(starts) q = collections.deque(starts) while q: x, y = q.popleft() for nx, ny in ((x + 1, y), (x, y + 1), (x - 1, y), (x, y - 1)): if 0 <= nx < m and 0 <= ny < n \\\\ and heights[nx][ny] >= heights[x][y] \\\\ and (nx, ny) not in visited: visited.add((nx, ny)) q.append((nx, ny)) return visited pacific = [(0, i) for i in range(n)] + [(i, 0) for i in range(1, m)] atlantic = [(m - 1, i) for i in range(n)] + [(i, n - 1) for i in range(m - 1)] return list(map(list, bfs(pacific) & bfs(atlantic))) \"]},\"81\":{\"h\":\"Testcase\",\"t\":[\"其对应的测试用例如下：\",\"class Test(unittest.TestCase): def setUp(self) -> None: self.s = Solution() def test01(self): heights = [[1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4]] res = self.s.pacificAtlantic(heights) print(res) self.assertCountEqual([[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]], res) \",\"需要注意的是，这个测试用例的 self.assertCountEqual 表示 list 的顺序不同，但是其中的元素出现个数相等。\"]},\"82\":{\"h\":\"BFS\"},\"83\":{\"h\":\"概览\",\"t\":[\"概览\",\"BFS 问题的本质就是让你在一副“图”中找到从起点 start 到终点 target 的最近距离；\",\"BFS 的核心数据结构是队列；\",\"BFS 常用 visited 结构来标记是否走过某段路程，避免走回头路；\",\"BFS 在队列初始化的时候一般会加入将起点加入队列中；\",\"在写 BFS 前要明确终止条件。\"]},\"84\":{\"h\":\"LC841 钥匙和房间\",\"t\":[\"很经典的一道题目，从举例看一下这道题目：\",\"输入：[[1,3],[3,0,1],[2],[0]]\",\"输出：false\",\"解释：我们不能进入 2 号房间。\",\"初始的时候是可以进入 0 号房间的，然后看能不能根据这个房间的钥匙把每个房间都走了。\",\"下面是上述问题的 BFS 解法：\",\"class Solution: def canVisitAllRooms(self, rooms: List[List[int]]) -> bool: n = len(rooms) queue = collections.deque([0]) visited = {0} while queue: x = queue.popleft() for it in rooms[x]: if it not in visited: visited.add(it) queue.append(it) return len(visited) == n \"]},\"85\":{\"h\":\"LC200 岛屿数量\",\"t\":[\"题目描述见 DFS 描述。\",\"BFS 解法如下：\",\"class Solution: def numIslands(self, grid): row = len(grid) if not row: return 0 col = len(grid[0]) res = 0 for r in range(row): for c in range(col): if grid[r][c] == '1': # 开始 BFS res += 1 q = collections.deque([(r, c)]) while q: nr, nc = q.popleft() for x, y in [(nr - 1, nc), (nr, nc - 1), (nr + 1, nc), (nr, nc + 1)]: if 0 <= x < row and 0 <= y < col and grid[x][y] == '1': q.append((x, y)) grid[x][y] = '0' return res \"]},\"86\":{\"h\":\"LC210 课程表\",\"t\":[\"210. 课程表 II\",\"现在你总共有 numCourses 门课需要选，记为 0 到 numCourses - 1。给你一个数组 prerequisites ，其中 prerequisites[i] = [ai, bi] ，表示在选修课程 ai 前 必须 先选修 bi 。\",\"例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示：[0,1] 。\",\"返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 任意一种 就可以了。如果不可能完成所有课程，返回 一个空数组 。\",\"示例 1：\",\"输入：numCourses = 2, prerequisites = [[1,0]]\",\"输出：[0,1]\",\"解释：总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。\",\"示例 2：\",\"输入：numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\",\"输出：[0,2,1,3]\",\"解释：总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。 因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/course-schedule-ii 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"这道题目比较综合，出的还是很不错的，我们整理思路如下：\",\"我们初始化每个课程，按照 index 把节点的入度全部初始化为 0, 注意到每个节点的入度我们都计算一下。\",\"我们维护一个 dict, key 是这个节点，value 是和这个节点的前驱\",\"然后对整体使用 BFS\",\"比如 [1,0] 这对数据，1 的入度这时候需要 +1, 而在字典中我们将 1 的前驱 0 （多个前驱用列表保存）存储起来。\",\"class Solution: def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]: res = [] edges = collections.defaultdict(list) # 存储节点的入度 indeg = [0] * numCourses # 选修 ai 前必须先选修 bi for ai, bi in prerequisites: indeg[ai] += 1 edges[bi].append(ai) # 将所有入度为0的节点放入队列中 q = collections.deque([_ for _ in range(numCourses) if indeg[_] == 0]) # bfs while q: node = q.popleft() res.append(node) for v in edges[node]: indeg[v] -= 1 if indeg[v] == 0: q.append(v) if len(res) != numCourses: return list() return res \"]},\"87\":{\"h\":\"LC977 找到小镇的法官\",\"t\":[\"997. 找到小镇的法官\",\"这道题目与LC210 类似，都是关于入度和出度的。\",\"在一个小镇里，按从 1 到 n 为 n 个人进行编号。传言称，这些人中有一个是小镇上的秘密法官。\",\"如果小镇的法官真的存在，那么：\",\"小镇的法官不相信任何人。\",\"每个人（除了小镇法官外）都信任小镇的法官。\",\"只有一个人同时满足条件 1 和条件 2 。\",\"给定数组 trust，该数组由信任对 trust[i] = [a, b] 组成，表示编号为 a 的人信任编号为 b 的人。\",\"如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的编号。否则，返回 -1。\",\"示例 1：\",\"输入：n = 2, trust = [[1,2]]\",\"输出：2\",\"示例 2：\",\"输入：n = 3, trust = [[1,3],[2,3]]\",\"输出：3\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/find-the-town-judge 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"class Solution: def findJudge(self, n: int, trust: List[List[int]]) -> int: trust_in = [0] * (n + 1) trust_out = [0] * (n + 1) for me, other in trust: # 我信任了别人 trust_out[me] += 1 # 别人信任了我 trust_in[other] += 1 for i in range(1, n + 1): if trust_in[i] == n - 1 and trust_out[i] == 0: return i return -1 \"]},\"88\":{\"h\":\"LC752 打开转盘锁\",\"t\":[\"752. 打开转盘锁\",\"问题分析：\",\"我们可以定义 add, minus 来表示转盘密码 +1 或者 -1 的操作，注意到 0、9 这些边界值，将这个操作单独拎出来。\",\"从题目中我们可以知道，有一些密码的组合是不能转到的，不然就算失败了，而为了达到不访问这些组合的效果，我们可以把这些组合和 visited 数组放到一起。\",\"对这个问题进行抽象，一个锁共有 4 个位置，每个位置都可以向下或者向上转动，所以每个位置都有 2 种转动的可能，4 个位置共有 8 个可能。也就是说，‘xxxx’ 这个组合对应着 8 种下一个状态，8 种下一个状态中的每一个也是这样的结构，对应 8 种下一个状态… 这就像是一幅图，每个节点有 8 个相邻的节点。\",\"编码：\",\"先写基础的 add, minus 方法\",\"def add(num: str): return '0' if num == '9' else str(int(num) + 1) def minus(num: str): return '9' if num == '0' else str(int(num) - 1) \",\"除此之外，我们还需要写一个辅助函数，计算某个状态在一次拨动以后能到达的所有下一个状态(前面分析过，这个状态有 8 个)，如0000可以到达的 1000, 0100等。\",\"这个在 Python 中有很多写法，其中最容易理解的写法为：\",\"# 给定一个 status, 计算出来他能拨到的所有 8 个 status def get_status(status: str) -> List[str]: # list 方便赋值 status_list = list(status) res = [] for i in range(4): # 存储起来，等复位 tmp = status_list[i] up = add(status[i]) status_list[i] = up res.append(''.join(status_list)) down = minus(status[i]) status_list[i] = down res.append(''.join(status_list)) # 复位 status_list[i] = tmp return res \",\"比较高级的技巧是使用 yield 生成器，在此给个参考：\",\"def get(status: str): status_list = list(status) for i in range(4): tmp = status_list[i] status_list[i] = add(tmp) yield ''.join(status_list) status_list[i] = minus(tmp) yield ''.join(status_list) status_list[i] = tmp \",\"套用 BFS 框架。\",\"根据题意，锁的初始数字为 '0000'，所以我们在队列中将这个元素初始化进去。\",\"关于队列初始化的基本语法技巧，需要注意\",\"Python 中我们一般这么初始化队列：q = collections.deque([1])\",\"❌🚫❌ q = collections.deque(1) 是错误的！会报错 TypeError: 'int' object is not iterable.\",\"而在添加的时候，直接使用 q.append(2) 即可，这时候结果是 [1,2]；\",\"❌🚫❌ 举个反例，如果觉得一次可以添加多个：q.append([3,4]), 就会得到这样的结果：deque([1, 2, [3, 4]])!\",\"一般而言，我们在求解 BFS 问题的时候，会给每个候选项加上其对应的次数，放在一个元组中，其初始化就类似于这样：q = collections.deque([('0000', 1)]), 这种做法与初始化一个空的队列，然后将元组 ('0000', 1) 添加进去是相同的效果(LC111. 二叉树的最小深度 使用了这个写法)。\",\"结合上面的分析，我们套用 BFS 的框架可以得出求解该题目的主题框架：\",\"q = collections.deque([('0000', 1)]) visited = {'0000'} # 将 deadends 这个 list 添加到 visited 这个 set 中 visited |= set(deadends) # 这种方法同理 # visited.update(deadends) while q: status, step = q.popleft() for state in get_status(status): if state not in visited: if state == target: return step visited.add(state) q.append((state, step + 1)) return -1 \",\"上述代码中有几个细节需要注意：\",\"初始化队列，我们初始化队列为 ('0000', 1)，最终在找到目标后返回了 step；其实我们初始化为 ('0000', 0)，在找到目标后返回 step + 1也是可以的。\",\"❓❓❓ 如何将一个 list 全部加入 set 中呢？有两种做法:\",\"visited |= set(deadends)\",\"visited.update(deadends)\",\"特殊场景考虑\",\"除了上述的解法之外，我们还需要考虑到几种特殊场景的用例：\",\"# 处理异常场景 if '0000' in deadends: return -1 if target == '0000': return 0 \"]},\"89\":{\"h\":\"LC133 克隆图\",\"t\":[\"133. 克隆图\",\"给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。\",\"初看这个题目，很难将其和 BFS 关联到，我们进行分析：\",\"输入：adjList = [[2,4],[1,3],[2,4],[1,3]] 输出：[[2,4],[1,3],[2,4],[1,3]] \",\"我们可以看到，题目是给出了邻接表，让我们按照这个邻接表对图进行深拷贝。这个邻接表的含义是：[2,4] 表示第一个节点 1的邻居为节点 2 和节点 4（节点 index 从 1 开始），以此类推。\",\"🎈🎈🎈 思考。\",\"从这个题目中，我们要明白：BFS 设立之初就是为的图的遍历，这个题目真可谓是返璞归真。\",\"那么，我们要怎么深拷贝这个图呢？\",\"我们解析邻接表，邻接表的两个无向边可以确定一个有向边。\",\"我们知道了邻接表，但是如果直接解析，可能会进入死循环，我们需要使用 visited 数组来进行标记。\",\"如何设计算法：\",\"使用一个哈希表来记录 visited 过的节点。将 key 设置为原始图中的节点， value 设置为克隆图中对应的节点。\",\"题目中给定的节点加入队列，克隆该节点并且存储到哈希表中。\",\"class Solution: def cloneGraph(self, node: 'Node') -> 'Node': if not node: return node q = collections.deque([node]) visited = dict() visited[node] = Node(node.val, []) while q: head = q.popleft() for neighbor in head.neighbors: if neighbor not in visited.keys(): q.append(neighbor) visited[neighbor] = Node(neighbor.val, []) visited[head].neighbors.append(visited[neighbor]) return visited[node] \",\"这个题目较为复杂，还需要多多理解！\"]},\"90\":{\"h\":\"LC2039 网络空闲的时刻\",\"t\":[\"这个题目描述比较复杂，核心思路是使用 BFS 对图进行遍历，看代码：\",\"class Solution: def networkBecomesIdle(self, edges: List[List[int]], patience: List[int]) -> int: n = len(patience) g = collections.defaultdict(list) for u, v in edges: g[u].append(v) g[v].append(u) q = collections.deque([0]) visited = [True] + [False] * (n-1) res = 0 dist = 1 while q: for _ in range(len(q)): u = q.popleft() for v in g[u]: if visited[v]: continue visited[v] = True q.append(v) res = max(res, (dist * 2 - 1) // patience[v] * patience[v] + dist * 2 + 1) dist += 1 return res \",\"其对应的测试代码如下：\",\"class Test(unittest.TestCase): def setUp(self): self.s = Solution() def test(self): edges = [[0, 1], [1, 2]] patience = [0, 2, 1] res = self.s.networkBecomesIdle(edges, patience) print(res) def test2(self): edges = [[5, 7], [15, 18], [12, 6], [5, 1], [11, 17], [3, 9], [6, 11], [14, 7], [19, 13], [13, 3], [ 4, 12], [9, 15], [2, 10], [18, 4], [5, 14], [17, 5], [16, 2], [7, 1], [0, 16], [10, 19], [1, 8]] patience = [0, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1] res = self.s.networkBecomesIdle(edges, patience) self.assertEqual(67, res) \"]},\"91\":{\"h\":\"LC365 水壶问题\",\"t\":[\"两个水壶 x, y 和无限多的水，能否通过使用这两个水壶，得到恰好 z 容量的水？\",\"我们把这个问题理解为一个 BFS 问题，其关键点在于：状态的转换。我们设置初始状态为 (0,0), 而经过转化后的中间状态为 (a,b), 其状态上限为 (x,y), 每一次递归的状态都放入 BFS 的队列中进行判断，而后向后搜索，其代码如下：\",\"class Solution: def canMeasureWater(self, x: int, y: int, z: int) -> bool: if x + y < z: return False if x > y: x, y = y, x q = collections.deque([(0, 0)]) visited = set() visited.add((0, 0)) while q: a, b = q.popleft() if a + b == z: return True states = set() states.add((a, 0)) states.add((0, b)) states.add((x, b)) states.add((a, y)) # y -> x states.add((min(x, b + a), 0 if a + b < x else b - (x - a))) # x -> y states.add((0 if a + b < y else a - (y - b), min(a + b, y))) for state in states: if state in visited: continue visited.add(state) q.append(state) return False \",\"在这个问题中，我们需要把所有的状态转化点都列举出来：\",\"动作\",\"状态\",\"(a,b)\",\"初始状态（后面用 a,b 标识壶号）\",\"(0,b)\",\"a 壶倒空\",\"(a,0)\",\"b 壶倒空\",\"(x,b)\",\"a 壶倒满\",\"(a,y)\",\"b 壶倒满\",\"(min(x,b+a),0) or (min(x,b+a),b−(x−a))\",\"将 b 壶全部倒入 a 壶\",\"(0,min(a+b,y)) or (a−(y−b),min(a+b,y))\",\"将 a 壶全部倒入 b 壶\",\"我们需要重点理解一下后面两种情况：\",\"将 b 壶倒入 a 壶：此时我们可以确定： \",\"如果 b 壶全被倒空了。那么这时候有两种情况：第一种是把全部的 b 都倒进去了，但是没有倒满（b+a）；第二种情况是到进去了，此时杯子的容量不够了(x)。\",\"如果 b 壶没有被倒空。那么此时 b 壶中应该是有剩下的水的，什么时候会剩下呢？如果 a+b 的容量小于 a 壶的容量 x 时候，肯定会有部分的水剩下在了 b 壶里面。那么剩下了多少呢？我们知道 a 壶可以倒入 x−a 容量的水，那么剩下的水就是 b 壶现有的水减去 a 壶可以倒入的水 b−(x−a)。\",\"将 a 壶倒入 b 壶：和上面的分析同理。\"]},\"92\":{\"h\":\"LC433 基因变化\",\"t\":[\"给你两个基因序列 start 和 end ，以及一个基因库 bank ，请你找出并返回能够使 start 变化为 end 所需的最少变化次数。如果无法完成此基因变化，返回 -1 。\",\"来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/minimum-genetic-mutation 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"这个题目描述比较长，可以参考一下原题目的描述，在此归纳一下这个题目的一些重点：\",\"最终的变化序列要在基因库 bank 里面，并且每一次的变化也要在基因库 bank 里面才算是合法的变化\",\"要求解 start –> end 的最小变化\",\"对于这道题目，我们的解法如下：\",\"class Solution: def minMutation(self, start: str, end: str, bank: List[str]) -> int: if start == end: return 0 if end not in bank: return -1 bank = set(bank) q = collections.deque([(start, 0)]) while q: gen, step = q.popleft() for i, ch in enumerate(gen): for y in \\\"ACGT\\\": if ch != y: new_gen = gen[:i] + y + gen[i + 1:] if new_gen in bank: if new_gen == end: return step + 1 bank.remove(new_gen) q.append((new_gen, step + 1)) return -1 \",\"上述代码有几个关键点我们需要注意的，现在逐一说明：\",\"题目要求是求最小变化，为什么 BFS 求解出来的答案是最小变化？\",\"对于广度优先搜索而言，我们找到的第一个叶子节点就是最短的。假设有两个同层的节点都能指向 end, 因为他们两个是同层，所以最终的结果也是一样的。\",\"有段时间没有刷 leetcode 了，犯了一些错误。\",\"gen, step = q.popleft() 注意是 popleft(), 不要写成 pop()\",\"new_gen = gen[:i] + y + gen[i + 1:] 这个按照 i 的思路很好，我是没有想到的，多多理解！之前我的想法是定义一个全局的 i, 等遍历完以后再恢复，明显是没有这种方式巧妙的。\"]},\"93\":{\"h\":\"DP\"},\"94\":{\"h\":\"1.1. Fibonacci\",\"t\":[\"斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ... 如果设F(n）为该数列的第n项（n∈N*），那么这句话可以写成如下形式：F(n)=F(n-1)+F(n-2)\"]},\"95\":{\"h\":\"1.1.1. 递归法\",\"t\":[\"Recursive approach：使用递归法，时间复杂度 O(n^2)，空间复杂度 O(n):\",\"def fib_recur(n): if n < 2: return n return fib_recur(n-1) + fib_recur(n-2) \"]},\"96\":{\"h\":\"1.1.2. 动态规划\",\"t\":[\"Dynamic programmming approach：使用 DP, 时间复杂度和空间复杂度均为 O(n)\",\"def fib_dyn(n): if n < 2: return n memo = [-1 for i in range(n+1)] # 使用 range(n) 会数组越界 memo[0] = 0 memo[1] = 1 for i in range(2, n + 1): memo[i] = memo[i - 1] + memo[i - 2] return memo[n] \"]},\"97\":{\"h\":\"1.1.3. 记忆化搜索\",\"t\":[\"Memoization of Fibonacci :\",\"def fib(N): cache = {} def recur_fib(N): if N in cache: return cache[N] if N < 2: result = N else: result = recur_fib(N - 1) + recur_fib(N - 2) cache[N] = result return result return recur_fib(N) \"]},\"98\":{\"h\":\"1.1.4. 使用公式\",\"t\":[\"Imperative approach使用公式，时间复杂度 O(n), 空间复杂度 O(1)\",\"def fib_imp(n): if n < 2: return n a = 0 b = 1 for i in range(1, n): a, b = b, a + b return b \"]},\"99\":{\"h\":\"1.2. 记忆化搜索\"},\"100\":{\"h\":\"1.2.1. 记忆化搜索概览\",\"t\":[\"记忆化搜索和 DP 是有很多相似之处的，所以把记忆化搜索放在 DP 里面进行研究。\",\"总的来说，我们写记忆化搜索算法的步骤大致为：\",\"使用BFS记忆化： \",\"写出这道题的暴力搜索程序（如 DFS）\",\"将这个 DFS 改写城“无需外部变量”的 DFS\",\"添加记忆化数组\",\"使用状态转移方程记忆化： \",\"把这道题目的 DP 和方程写出来\",\"根据它们写出 DFS 函数\",\"添加记忆化数组\",\"其优点在于：\",\"避免搜索到无用状态\",\"其缺点在于：\",\"不能滚动数组\",\"有些优化较难\",\"效率较低但是不至于 TLE\"]},\"101\":{\"h\":\"1.3. 例题\"},\"102\":{\"h\":\"1.3.1. LC638 大礼包\",\"t\":[\"638. 大礼包\",\"这道题目可以利用记忆化搜索的方式去求解。\",\"首先按照例子解释一下这个用例：\",\"price = [2, 5] // A, B 对应的价格\",\"special = [[3, 0, 5], [1, 2, 10]] // 表示折扣, 3A 0B 的大礼包价格是 5\",\"needs = [3, 2] // 需要买的总的数量\",\"我们该怎么合理使用大礼包呢？\",\"按照记忆化搜索的思路，我们首先过滤掉无用的状态，即过滤掉不需要计算的大礼包，可以分几种情况来判断哪些大礼包是我们不需要的：\",\"根据题目要求「不能购买超出购物清单指定数量的物品」，如果大礼包里面的所有物品加起来超过我们要买的物品总数了，那么这个大礼包不能要；\",\"大礼包不划算则不选这个大礼包（不划算指的是我单独买这些物品，下来大礼包反而贵了）\",\"大礼包内不包含我们要买的物品，也不能买\",\"以上的条件就是我们记忆化搜索时可以用来筛选的条件。\",\"根据题目要求，我们可以写出大致的状态转移方程。\",\"我们用 dp 表示满足购物清单 needs 需要的最小花费\",\"我们思考满足购物清单 needs 的最后一次购买，其可以分为两种情况：\",\"购买大礼包\",\"不购买大礼包\",\"我们如果购买大礼包的时候，可以遍历每一个大礼包，pricei​ 表示第 i 个大礼包的价格，needsi​ 表示大礼包中的物品清单，needs−needsi​ 表示购物清单 needs 减去第 i 个大礼包中包含的物品清单后剩余的物品清单。\",\"先附上官方题解，这个题解目前还有很多的疑问点：\",\"class Solution: def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int: n = len(price) filter_special = [] for sp in special: # 比如在第一个例子中 i == 2 # 第二个条件表示大礼包是有优惠的，这时候我们选择该礼包 if sum(sp[i] for i in range(n)) > 0 and sum(sp[i] * price[i] for i in range(n)) > sp[-1]: filter_special.append(sp) @lru_cache(None) def dfs(cur_needs): # 在不购买大礼包的时候，购买购物清单中所有物品需要的花费 min_price = sum(need * price[i] for i, need in enumerate(cur_needs)) for cur_special in filter_special: special_price = cur_special[-1] nxt_needs = [] for i in range(n): if cur_special[i] > cur_needs[i]: # 不购买多于当前订单数量的物品 break # 还剩下多少物品需要购买 nxt_needs.append(cur_needs[i] - cur_special[i]) # why, 如果上述遍历完成，满足数量条件，大礼包可以购买 if len(nxt_needs) == n: min_price = min(min_price, dfs(tuple(nxt_needs)) + special_price) return min_price return dfs(tuple(needs)) \",\"对应的测试用例：\",\"class Test(unittest.TestCase): def setUp(self) -> None: self.s = Solution() def test_1(self): # 折扣对应的价格 price = [2, 5] # 表示折扣 special = [[3, 0, 5], [1, 2, 10]] # 需要买的数量 needs = [3, 2] res = self.s.shoppingOffers(price, special, needs) self.assertEqual(14, res) \"]},\"103\":{\"h\":\"1.3.2. 跳台阶游戏\",\"t\":[\"一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。\",\"这是一个换了个考法的斐波那契数列问题：\",\"第一次跳台阶只有两种选择：\",\"跳 1 阶，则剩余的跳法为 f(n-1)\",\"跳 2 阶，则剩余的跳法为 f(n-2)\",\"所有的跳法就是 f(n-1) + f(n-2), 是不是和斐波那契数列一模一样？至此，就可以使用斐波那契数列的三种解法解决这个问题，只需要注意边界条件即可。\",\"class Solution: def jumpFloor(self, n): # write code here if n < 2: return n a = 1 b = 1 for i in range(1, n): a, b = b, a + b return b \",\"扩展问题：\",\"一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\",\"class Solution: def jumpFloorII(self, n): # write code here if n <= 1: return n return 2 ** (n-1) \"]},\"104\":{\"h\":\"1.3.3. 矩形覆盖\",\"t\":[\"我们可以用 2∗1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2∗1 的小矩形无重叠地覆盖一个 2∗n 的大矩形，总共有多少种方法？\",\"矩形覆盖无非就是两种情况：\",\"刚好填满一列：\",\"√\",\"√\",\"横向需要两个填满两列：\",\"√\",\"√\",\"×\",\"×\",\"这两种方式都可以实现填满，那么总的方式 f(n)=f(n−1)+f(n−2) ，f(n−1) 为方法1，填满其中的一列，剩余 n−1 列，f(n−2) 为方法2，填满其中的两列，剩余 n−2 列。\",\"所以代码的编写就和斐波那契数列相同。\"]},\"105\":{\"h\":\"LCS\"},\"106\":{\"h\":\"Summary\",\"t\":[\"LCS 问题有很多的子问题，大致包括以下：\",\"最长公共子串，要求子串在原字符串中是连续的\",\"最长公共子序列\",\"最大子序列\",\"最长递增子序列\"]},\"107\":{\"h\":\"最长公共子串\"},\"108\":{\"h\":\"暴力求解\",\"t\":[\"def LCSubStr(str1, str2, m, n): LCSuff = [[0 for i in range(n + 1)] for j in range(m + 1)] # 最长公共子串的长度 result = 0 # str1 中的最后相同的位置 p = 0 for i in range(m + 1): for j in range(n + 1): if(i == 0 or j == 0): LCSuff[i][j] = 0 elif(str1[i - 1] == str2[j - 1]): LCSuff[i][j] = LCSuff[i-1][j-1] + 1 result = max(result, LCSuff[i][j]) p = i else: LCSuff[i][j] = 0 return str1[p - result:p], result X = 'OldSite:GeeksforGeeks.org' Y = 'NewSite:GeeksQuiz.com' m = len(X) n = len(Y) print('Length of Longest Common Substring is', LCSubStr(X, Y, m, n)) \"]},\"109\":{\"c\":[\"Algorithm\"]},\"110\":{\"c\":[\"algorithm\",\"leetcode\",\"lcs\"]},\"111\":{\"h\":\"Knapsack\"},\"112\":{\"h\":\"概览\",\"t\":[\"背包问题可以大致分为三类，分别是：\",\"背包组合问题\",\"True/False 问题\",\"最大最小问题\",\"其基础的背包问题一般由两个模型演变而来：\",\"0-1 背包问题\",\"完全背包问题\",\"本文先研究 0-1 背包和完全背包，而后对其他问题进行研究。\"]},\"113\":{\"h\":\"例题索引\"},\"114\":{\"h\":\"0-1 背包\",\"t\":[\"问题\",\"类型\",\"递推公式\",\"备注\",\"例题 LC474：1和0\",\"0-1 背包最大最小值问题\",\"dp[i] = max(dp[i], dp[i-num] + 1)\",\"两个背包\",\"例题 LC416：分割等和子集\",\"0-1 背包True/False问题\",\"dp[i] = dp[i] or dp[i - num]\",\"例题 LC494：目标和\",\"0-1 背包组合问题\",\"dp[i] += dp[i - num]\",\"例题 LC1049：最后一块石头的重量 III\",\"0-1 背包最大最小值问题\",\"dp[i] = max(dp[i], dp[i-stone] + stone)\"]},\"115\":{\"h\":\"完全背包\",\"t\":[\"问题\",\"类型\",\"递推公式\",\"备注\",\"例题 LC322：零钱兑换\",\"完全背包最大最小值问题\",\"dp[i] = min(dp[i], dp[i - coin] + 1)\",\"例题 LC279：完全平方数\",\"完全背包最大最小值问题\",\"dp[i] = min(dp[i], dp[i - num] + 1)\",\"例题 LC518：零钱兑换2\",\"完全背包组合问题\",\"dp[i] += dp[i - coin]\",\"例题 LC377：组合总数 IV\",\"完全背包组合问题\",\"dp[i] += dp[i - num]\",\"考虑顺序，target 放在外循环\",\"例题 LC139：单词拆分\",\"完全背包 True/False问题\",\"dp[i] = dp[i] or dp[i - len(word)]\",\"考虑顺序\"]},\"116\":{\"h\":\"0-1 背包\",\"t\":[\"0-1 背包问题比较简单，其特点是每种物品仅有一件，可以选择放或者不放。求解将哪些物品装入背包可使价值总和最大。\"]},\"117\":{\"h\":\"递推公式\",\"t\":[\"F(i,v) 是前 i 件物品恰放入一个容量为 v 的背包可以获得的最大价值，其状态转移方程如下所示：\",\"F[i,v]=max(f[i−1,v],f[i−1,v−Ci​]+Wi​)\",\"这个递推公式表示在只考虑 将第 i 件物品放入容量为 v 的背包中 这个子问题，可以包含两种情况：\",\"不放第 i 件物品，问题等价于 前 i−1 件物品放入容量为 v 的背包中； \",\"放第 i 件物品，问题等价于 前 i−1 件物品放入剩下容量为 v−Ci​ 的背包中，再加上放第 i 件物品的重量 Wi​\"]},\"118\":{\"h\":\"例题 经典背包问题\",\"t\":[\"我们首先要会求解经典背包问题，举例来说：\",\"背包容量：size = 90\",\"每个物品的重量：costs = [71, 69, 1]\",\"每个物品的价值：values = [100, 1, 2]\",\"我们要求解在装更可能多的物品的条件下，使得背包内物品价值的总值最大。\",\"我们使用二维 dp 可以写出如下代码：\",\"class Solution: def solution(self, weights, values, size): if not size: return 0 n = len(weights) # 我们定义 dp 数组 dp[i][w], 对于前 i 个物品，当前背包容量为 w，可以装的最大价值是 dp[i][w] dp = [[0] * (size + 1) for _ in range(n)] # 循环中遍历物品 for i in range(1, n): # 内层循环遍历背包容量 # for j in range(size + 1) 等同 for j in range(size, weights[i] - 1, -1): # 当前背包装不下 if weights[i] > j: dp[i][j] = dp[i - 1][j] else: dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i]] + values[i]) return dp[n - 1][size] \",\"在上述代码中，我们踩了几个坑：\",\"二维 DP 数组的定义，dp = [[0] * (size + 1) for _ in range(n)] 中 size + 1 表示列，n 表示行。\",\"🆚🆚🆚🆚🆚 如果这样比较难记忆，不如直接使用 numpy 去定义，非常方便：dp = np.zeros(shape=(n, size + 1)).\",\"对于 dp 数组的定义，我们可以理解为：dp[i][j] 的含义为前 i 个物品，当前背包可用容量为 j，当前装下来的总价值\",\"对于递推公式，是一个经典的递推，不过多解释\",\"❗🔴🔴🔴 有一点需要特别注意，那就是两重 for 循环的遍历细节。\",\"第一重从 1 开始正向遍历\",\"第二重遍历是和背包的总容量有关的，我们从 0 开始遍历到背包的容量为止；我们也可以从背包的容量遍历到当前要放的物品的重量停止，因为再往下就没有意义了。这两种遍历方式在本题中都是 OK 的。\",\"🧡💛💚💙 优化\",\"我们靠二维 DP 的方法求解，加深理解以后，我们可以套公式写出一维 DP 的求解，套用公式的要点在于：\",\"0-1 背包倒着循环，不考虑物品顺序，物品循环放在外侧\",\"求解的是最大最小值问题，递推公式dp[i] = max(dp[i], dp[i-num] + 1)\",\" def solution2(self, weights, values, size): if not size: return 0 # 我们拿容量去定义 dp dp = [0] + [0] * size # 按照背包问题的套路，遍历物品 for idx, weight in enumerate(weights): for i in range(size, weight - 1, -1): dp[i] = max(dp[i], dp[i - weight] + values[idx]) return dp[-1] \",\"如此，我们就进行了统一。\"]},\"119\":{\"h\":\"例题 LC474：1和0\"},\"120\":{\"h\":\"474. 一和零\",\"t\":[\"问题分析：给你一个二进制字符串数组 strs 和两个整数 m 和 n 。请你找出并返回 strs 的最大子集的大小，该子集中最多有 m 个 0 和 n 个 1 。如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。\",\"输入：strs = [\\\"10\\\", \\\"0001\\\", \\\"111001\\\", \\\"1\\\", \\\"0\\\"], m = 5, n = 3\",\"输出：4\",\"解释：最多有 5 个 0 和 3 个 1 的最大子集是 {\\\"10\\\",\\\"0001\\\",\\\"1\\\",\\\"0\\\"} ，因此答案是 4 。 其他满足题意但较小的子集包括 {\\\"0001\\\",\\\"1\\\"} 和 {\\\"10\\\",\\\"1\\\",\\\"0\\\"} 。{\\\"111001\\\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\",\"初看这道题较难理解，需要翻译一下，给定 m 和 n，表示背包中最多有 5 个 0 和 3 个 1 -- target，要求是子集，则表示不能重复选 -- 0-1 背包。\",\"这就是 最大最小值的 0-1 背包问题。\",\"求解代码如下所示，掌握几个关键点：\",\"0-1 背包倒着循环。为什么要倒着循环？这是因为我们的递推公式中使用到了 i−1 这个中间状态，倒着循环能够保证在推 F[i,v] 的时候能够取用 F[i−1,v] 的值。\",\"背包问题外层循环物体、内层循环容量。\",\"最大最小问题的递推公式。\",\"状态转移数组初始化的时候初始化为 0\",\"class Solution: def findMaxForm(self, strs: List[str], m: int, n: int) -> int: if not strs: return 0 dp = [[0] * (n + 1) for _ in range(m + 1)] # 遍历 nums for s in strs: zero = s.count('0') one = s.count('1') # 0-1 背包从后往前 for i in range(m, zero - 1, -1): for j in range(n, one - 1, -1): dp[i][j] = max(dp[i][j], dp[i - zero][j - one] + 1) return dp[m][n] \",\"总结来说，这道题目并不是最典型的 0 - 1 背包问题，普通的 0-1 背包问题只有一种容量，但是该背包问题存在 0 和 1 两种容量，每个物品（字符串）均需要分别占用 0 和 1 的若干容量，并且所有物品的价值均为 1。是一个较为典型的二维动态规划问题。\",\"上述代码是经过了状态压缩后的结果，如果不考虑状态压缩的话，可以定义三维 dp，state: dp[i][j][k]，i 可以表示选择的物品为前 i 个，j 和 k 分别表示背包 0 和背包 1 的数量限制。在递推过程中，最外循环 i 对应的最新的值，dp[i][j][k] = max(dp[i-1][j-zeros][k-ones]+1, dp[i-1][j][k])，将第一维压缩后便得到和代码相同的递推公式。\"]},\"121\":{\"h\":\"例题 LC 416：分割等和子集\"},\"122\":{\"h\":\"416. 分割等和子集\",\"t\":[\"给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。\",\"示例 1：\",\"输入：nums = [1,5,11,5]\",\"输出：true\",\"解释：数组可以分割成 [1, 5, 5] 和 [11] 。\",\"分析题目可知：\",\"0-1 背包问题，循环倒着来\",\"Trur/False 问题，递推公式为：dp[i] = d[i] or dp[i -num]\",\"该题目的要求可以理解为：从背包中找若干个物品，其价值和正好为背包容量的一半。\",\"代码如下：\",\"class Solution: def canPartition(self, nums: List[int]) -> bool: if not nums: return False if sum(nums) % 2 == 1: return False left_target = sum(nums) // 2 dp = [True] + [False] * left_target for num in nums: for i in range(left_target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[left_target] \"]},\"123\":{\"h\":\"例题 LC 494：目标和\"},\"124\":{\"h\":\"494. 目标和\",\"t\":[\"给你一个整数数组 nums 和一个整数 target 。\",\"向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：\",\"例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 \\\"+2-1\\\" 。 返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。\",\"示例 1：\",\"输入：nums = [1,1,1,1,1], target = 3\",\"输出：5\",\"解释：一共有 5 种方法让最终目标和为 3 。 -1 + 1 + 1 + 1 + 1 = 3 +1 - 1 + 1 + 1 + 1 = 3 +1 + 1 - 1 + 1 + 1 = 3 +1 + 1 + 1 - 1 + 1 = 3 +1 + 1 + 1 + 1 - 1 = 3\",\"分析题目可知：\",\"0-1 背包问题，循环倒着来\",\"背包组合问题，递推公式：dp[i] += dp[i-num]\",\"该题目给出了目标和，可以根据这个条件求解出背包的目标，进而写出代码。需要找出的 目标 为(数组的和 + target) // 2。\",\"证明过程为：全部的可分为 +, -，分左右，左右的和为 left + right = sum(nums)，要的 target = left - right，相加可得 2 * left = sum(nums) + target， 由于 target 肯定有解，left * 2 则必须是偶数。\",\"代码如下：\",\"class Solution: def findTargetSumWays(self, nums: List[int], target: int) -> int: if target > sum(nums): return 0 left_target = (sum(nums) + target) // 2 if (sum(nums) + target) % 2 == 1: return 0 # 组合问题解 dp[i] += dp[i - num] dp = [1] + [0] * left_target for num in nums: for i in range(left_target, num - 1, -1): dp[i] += dp[i - num] return dp[left_target] \"]},\"125\":{\"h\":\"LC1049 最后一块石头的重量 III\",\"t\":[\"https://leetcode-cn.com/problems/last-stone-weight-ii/\",\"有一堆石头，每块石头的重量都是正整数。\",\"每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：\",\"如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头最小的可能重量。如果没有石头剩下，就返回 0。\",\"分析：这是一道比较隐晦的 0-1 背包问题，其 target 值是石头总重量的一半。\",\"0-1 背包倒着来，最大最小递推公式用 max!\",\"代码如下：\",\"class Solution: def lastStoneWeightII(self, stones: List[int]) -> int: left_target = sum(stones) // 2 dp = [0] + [0] * left_target for stone in stones: for i in range(left_target, stone - 1, -1): dp[i] = max(dp[i], dp[i - stone] + stone) return sum(stones) - 2 * dp[left_target] \"]},\"126\":{\"h\":\"总结\",\"t\":[\"对比而言，0-1 一维背包的实现方式是：\",\"def zero_one_pack(F, C, W): # 倒着来 for v <- V to C: F[v] <- max(F[v], F[v - C] + W) \",\"其中 C 表示某个物体的容量，W 表示其价值。\",\"0-1 背包的伪代码可以为：\",\"F[0..V] <- 0 for i <- 1 to N zero_one_pack(Fi, Ci, Wi) \",\"0-1背包倒着来\"]},\"127\":{\"h\":\"完全背包\",\"t\":[\"不同于 0-1背包，完全背包中的每种物品都有无限件可以用，求解：将哪些物品装入背包，可使这些物品的耗费的费用总 和不超过背包容量，且价值总和最大。\"]},\"128\":{\"h\":\"递推公式\",\"t\":[\"完全背包的递推公式和 0-1 背包十分相似，不同的点仅在于：\",\"完全背包的内层循环是正着来的。\",\"要解释这个原因，就需要一个推导的过程，其是由 0-1背包推导而来的，其递推公式 F[i,v]=maxF[i−1,v−kCi]+kWi∣0≤kCi≤v，本质上和 0-1 背包相同。\"]},\"129\":{\"h\":\"例题 LC 322：零钱兑换\"},\"130\":{\"h\":\"322. 零钱兑换\",\"t\":[\"编写一个函数来计算可以凑成总金额所需的最少的硬币个数。\",\"从题目中可以得出：\",\"完全背包问题：正着循环\",\"最大最小问题，递推公式为：dp[i] = max(dp[i], dp[i-1] + 1)\",\"不需要考虑顺序，正常循环\",\"题目表述较为简单，直接看代码实现：\",\"class Solution: def coinChange(self, coins: List[int], amount: int) -> int: if not coins: return -1 dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1) return -1 if dp[amount] == float('inf') else dp[amount] \",\"当然也可以改变顺序，这样稍微快一些：\",\"class Solution: def coinChange(self, coins: List[int], amount: int) -> int: if not coins: return -1 dp = [float('inf')] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): for coin in coins: if i >= coin: dp[i] = min(dp[i], dp[i - coin] + 1) return -1 if dp[amount] == float('inf') else dp[amount] \",\"通过代码可以看出，这个问题的实现和完全背包也不尽完全相同，其主要不同在于：\",\"循环的位置变了，现在外层循环了背包，内层循环了物品。这种方式在一定程度上可以提高性能，如果把循环顺序调换回来，代码也是可以通过的。但是上述的循环方式性能较好。\",\"在代码中进行了一些优化操作，如 if i >= coin 的判断，就是说背包的大小要大于物品才可以进行装载，这样可以提高性能。这一步省略调代码也是可以通过的。\",\"初始化问题：由于是最小化问题，所以初始化为了 float(inf)\"]},\"131\":{\"h\":\"例题 LC 279：完全平方数\"},\"132\":{\"h\":\"279. 完全平方数\",\"t\":[\"给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。\",\"给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。\",\"完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。\",\"示例 1：\",\"输入：n = 12\",\"输出：3\",\"解释：12 = 4 + 4 + 4\",\"从题目中可以得到信息：\",\"完全背包问题：正着循环\",\"最大最小问题，递推公式为：dp[i] = max(dp[i], dp[i-1] + 1)\",\"不需要考虑顺序，正常循环\",\"代码如下：\",\"class Solution: def numSquares(self, n: int) -> int: dp = [float('inf')] * (n + 1) dp[0] = 0 # 构造物品数组 nums = [_**2 for _ in range(1, n+1) if _**2 <= n] for num in nums: for i in range(num, n + 1): dp[i] = min(dp[i], dp[i - num] + 1) return -1 if dp[-1] == float('inf') else dp[-1] \"]},\"133\":{\"h\":\"例题 LC 518：零钱兑换2\"},\"134\":{\"h\":\"518. 零钱兑换 II\",\"t\":[\"给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。\",\"这个题目和上述例题都是完全背包问题，但是却存在些许不同：\",\"这是一个完全背包且不考虑顺序的组合问题，外层循环还是和 0-1背包保持一致\",\"上面题目求解的是凑成目标数量所需要的最小硬币数；改题目求解的是凑成目标数量的硬币组合数\",\"总结2：上面题目是最大最小问题，该题目是组合问题\",\"组合问题的递推公式为：dp[i] += dp[i -num]\",\"其代码如下：\",\"class Solution: def change(self, amount: int, coins: List[int]) -> int: if not coins: return 0 # 就是 dp[0] = 1 dp = [1] + [0] * amount for coin in coins: # 这是一个优化，可以从 1 开始循环，然后判断 i >= coin for i in range(coin, amount + 1): dp[i] += dp[i - coin] return dp[amount] \"]},\"135\":{\"h\":\"例题 LC 377： 组合总数 IV\"},\"136\":{\"h\":\"377. 组合总和 Ⅳ\",\"t\":[\"给你一个由 不同 整数组成的数组 nums ，和一个目标整数 target 。请你从 nums 中找出并返回总和为 target 的元素组合的个数。\",\"题目数据保证答案符合 32 位整数范围。\",\"输入：nums = [1,2,3], target = 4\",\"输出：7\",\"解释： 所有可能的组合为： (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) 请注意，顺序不同的序列被视作不同的组合。\",\"这是一个经典的考虑顺序的完全背包组合问题，看到这样的问题，首先确定模板：\",\"完全背包问题：正着循环\",\"组合问题：递推公式为：dp[i] += dp[i -num]\",\"考虑顺序，把背包放在外层循环\",\"很轻松写出代码：\",\"class Solution: def combinationSum4(self, nums: List[int], target: int) -> int: if not nums: return 0 dp = [0] * (target + 1) dp[0] = 1 # 考虑顺序，target 放在外面 for i in range(1, target + 1): for num in nums: if i >= num: dp[i] += dp[i - num] return dp[target] \"]},\"137\":{\"h\":\"例题 LC 139：单词拆分\"},\"138\":{\"h\":\"139. 单词拆分\",\"t\":[\"给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。\",\"说明：\",\"拆分时可以重复使用字典中的单词。 你可以假设字典中没有重复的单词。\",\"示例 1：\",\"输入: s = \\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"]\",\"输出: true\",\"解释: 返回 true 因为 \\\"leetcode\\\" 可以被拆分成 \\\"leet code\\\"。\",\"从题目中可以得出信息：\",\"完全背包问题，（拆分时可以重复使用字典中的单词）：正着循环\",\"true/false 问题，递推公式为：dp[i] = dp[i] or dp[i - num]\",\"考虑顺序，背包在外循环\",\"代码如下：\",\"class Solution: def wordBreak(self, s: str, wordDict: List[str]) -> bool: if not wordDict: return False # dp[0] = True dp = [True] + [False] * len(s) for i in range(1, len(s) + 1): for word in wordDict: if i - len(word) >= 0 and s[i - len(word):i] == word: dp[i] = dp[i] or dp[i - len(word)] return dp[-1] \"]},\"139\":{\"h\":\"总结\",\"t\":[\"完全背包问题的伪代码如下所示：\",\"def CompletePack(F, C, W) for v ← C to V F[v] ← max{F[v], f[v − C] + W} \",\"F[0..V ] ←0 for i ← 1 to N for v ← Ci to V F[v] ← max(F[v], F[v − Ci] + Wi) \",\"完全背包正着来\",\"如果与顺序有关，内循环 coins，外循环 target（背包容量在外）\"]},\"140\":{\"h\":\"参考文献\",\"t\":[\"一篇文章吃透背包问题！（细致引入+解题模板+例题分析+代码呈现）\"]},\"141\":{\"c\":[\"Algorithm\"]},\"142\":{\"c\":[\"algorithm\",\"dp\"]},\"143\":{\"h\":\"Prefix, Presum\"},\"144\":{\"h\":\"例题索引\",\"t\":[\"问题\",\"类型\",\"解法\",\"备注\",\"LC560 和为 k 的子数组\",\"前缀和 + dict\",\"最经典的前缀和用法！\",\"LC1744 你能在你最喜欢的那天吃到你最喜欢的糖果吗？\",\"前缀和综合应用问题\",\"使用到了 accumulate\",\"LC724 寻找数组的中心索引（下标）\",\"LC930 和相同的二元子数组\",\"前缀和 + dict\",\"同解法 LC560\",\"LC525 连续数组\",\"LC209 长度最小的子数组\",\"前缀和 + 二分\"]},\"145\":{\"h\":\"概述\"},\"146\":{\"h\":\"前缀和快速求解\",\"t\":[\"前缀和是一种非常有用的算法思路，应当加以总结。\",\"在 Python 中，可以很方便的求解一个数组的前缀和，如下所示：\",\">>> from itertools import accumulate >>> candiesCount = [7, 4, 5, 3, 8] >>> accumulate(candiesCount) <itertools.accumulate object at 0x037ACEA8> >>> list(accumulate(candiesCount)) [7, 11, 16, 19, 27] \"]},\"147\":{\"h\":\"前缀和原理\",\"t\":[\"前缀和关键问题在于：如何快速得到某个子数组的和？这就使用到了前缀和的技巧。\",\"写伪代码实现前缀和：\",\"n = len(nums) pre_sum = [0] + [0] * n for i in range(n): pre_sum[i + 1] = pre_sum[i] + nums[i] \",\"上面代码求出的前缀和 pre_sum 的含义为：pre_sum[i] 为 nums[0:i-1]的和。\",\"如果要求解 nums[i..j] 的和，则可以使用 pre_sum[j+1] - pre_sum[i] 即可。\",\"如果在实际的应用中，感觉到上述的方法较为复杂，要使用 accumulate 方法，则需要注意到以下问题：\",\"按照概述中的例子来举例：\",\"nums = [7, 4, 5, 3, 8] pre_sum = [7, 11, 16, 19, 27] # \",\"画个表格，方便理解：\",\"i\",\"0\",\"1\",\"2\",\"3\",\"4\",\"nums\",\"7\",\"4\",\"5\",\"3\",\"8\",\"pre_sum\",\"7\",\"11\",\"16\",\"19\",\"27\",\"要求解nums[1...3]，可以看到，其实际的区间和为 4 + 5 + 3 为 12，对应的 pre_sum[3] - pre_sum[0] 为 19 - 7 = 12。\",\"结论\",\"故得出结论：在实际的编写代码过程中，nums[i..j] = pre_sum[j] - pre_sum[i - 1]，但是这种方式要注意，数组越界！\",\"或者将 pre_sum 初始化为：[0] + accumulate(nums)，nums[i..j] = pre_sum[j+1] - pre_sum[i] 即可。\"]},\"148\":{\"h\":\"例题解析\"},\"149\":{\"h\":\"LC1588 所有奇数长度子数组的和\",\"t\":[\"LC1588\",\"这道题可以帮助理解：如何获取数组中所有奇数长度的子数组，并求和。比较基础的处理方法，考验编程的基础。\",\"import unittest from typing import List class Solution: def sumOddLengthSubarrays(self, arr: List[int]) -> int: \\\"\\\"\\\" 奇数子序列的和，如何与前缀和联系起来？ 前缀和的本质是为了求解数组区间的和，我们枚举所有的奇数数组区间，然后求和 \\\"\\\"\\\" presum = [0] * (len(arr) + 1) for i in range(len(arr)): presum[i + 1] = arr[i] + presum[i] res = 0 for start in range(len(arr)): length = 1 while length + start <= len(arr): end = start + length - 1 res += presum[end+1] - presum[start] length += 2 return res \",\"特别的，如果是 C++/C 实现，可以如下所示：\",\"for (int start = 0; start < n; start++) { for (int length = 1; start + length <= n; length += 2) { int end = start + length - 1; for (int i = start; i <= end; i++) { sum += arr[i]; } } } \"]},\"150\":{\"h\":\"LC2055 蜡烛之间的盘子\",\"t\":[\"LC2055\",\"直接看代码和测试用例：\",\"class Solution: def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]: \\\"\\\"\\\" 先找到最左边的 | 再找到最右边的 | 然后计算之间 * 的个数 但是暴力解法会超时，区间和一类的解法就使用前缀和的思想 \\\"\\\"\\\" # 先计算每个位置为止蜡烛的数量前缀和数组 n = len(s) presum = [0] * (n + 1) for i in range(n): if s[i] == '*': presum[i+1] = presum[i] + 1 else: presum[i+1] = presum[i] # 找到左右两个蜡烛的位置，注意到如果直接从左右两边搜索还是会超时，所以需要优化 # 我们尝试使用数组来维护这个边界 left, right = [0] * n, [0] * n l, r = -1, -1 for i in range(n): if s[i] == '|': l = i left[i] = l for i in range(n-1, -1, -1): if s[i] == '|': r = i right[i] = r res = [] for query in queries: # 注意理解这边：right, left x, y = right[query[0]], left[query[1]] if x < 0 or y < 0 or x >= y: res.append(0) else: res.append(presum[y] - presum[x]) return res \",\"测试用例如下：\",\"class TestSolution(unittest.TestCase): def setUp(self): self.s = Solution() return super().setUp() def tearDown(self): self.s = None def test_01(self): s = \\\"**|**|***|\\\" # presum = [0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7] queries = [[2, 5], [5, 9]] res = self.s.platesBetweenCandles(s, queries) self.assertEqual([2, 3], res) def test_02(self): s = \\\"***|**|*****|**||**|*\\\" queries = [[1, 17], [4, 5], [14, 17], [5, 11], [15, 16]] res = self.s.platesBetweenCandles(s, queries) self.assertEqual([9, 0, 0, 0, 0], res) if __name__ == '__main__': unittest.main() \"]},\"151\":{\"h\":\"LC560 和为 k 的子数组\",\"t\":[\"给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。\",\"示例 1 :\",\"输入:nums = [1,1,1], k = 2\",\"输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/subarray-sum-equals-k 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\"]},\"152\":{\"h\":\"解法1：直接用前缀和（超时）\",\"t\":[\"应用前缀和求解这个问题的时候，很容易写出如下的代码，但是该方法超时：\",\"def subarraySum(self, nums: List[int], k: int) -> int: # 求出前缀和数组 pre_sum = [0] + list(accumulate(nums)) count = 0 for i in range(len(nums)): for j in range(i, len(nums)): # nums[i..j] = pre_sum[j+1] - pre_sum[i] if pre_sum[j + 1] - pre_sum[i] == k: count += 1 return count # 小优化，j 从 i + 1 开始循环，提高可读性 def subarraySum(self, nums: List[int], k: int) -> int: pre_sum = [0] + list(accumulate(nums)) count = 0 for i in range(len(nums)): for j in range(i + 1, len(nums)): # nums[i..j] = pre_sum[j+1] - pre_sum[i] if pre_sum[j] - pre_sum[i] == k: count += 1 return count \"]},\"153\":{\"h\":\"解法2：优化解法（hash map）\",\"t\":[\"如果分析上面解法1的时间复杂度，不难看出，其时间复杂度为 O(n2)，所以进行如下优化：\",\"上述的判断语句：\",\"if pre_sum[j] - pre_sum[i] == k: count += 1 \",\"等价于：\",\"if pre_sum[i] == pre_sum[j] - k: count += 1 \",\"如此可以把循环进行颠倒：\",\"#原来的循环 for i in range(len(nums)): for j in range(i + 1, len(nums)): if pre_sum[j] - pre_sum[i] == k: count += 1 # 颠倒后的循环 for j in range(1, len(nums)): for i in range(j): if pre_sum[i] == pre_sum[j] - k: count += 1 \",\"其含义是，有多少个 i 满足 pre_sum[i] 的值为 pre_sum[j] - k。所以我们可以通过 hashmap 存储每一个 pre_sum[i] 的值，直接找到满足条件的 pre_sum[i] 的个数。\",\"因此我们使用 hashmap，在计算前缀和的同时把前缀和的每个值出现的次数都记录在 hashmap 中。\",\"（因此可以使用 hash map 记录下来有几个 pre_sum[i] 和 pre_sum[j+1] - k 相等，干掉内层的 for 循环。）\",\"def subarraySum(self, nums: List[int], k: int) -> int: # # 使用 hash 表优化 # # 存储前缀和出现的次数 _dict = collections.defaultdict(int) _dict[0] = 1 count = 0 # 前缀和 nums[0..i] sum_0_i = 0 for i in range(len(nums)): sum_0_i += nums[i] sum_0_j = sum_0_i - k if sum_0_j in _dict: count += _dict[sum_0_j] _dict[sum_0_i] += 1 return count \"]},\"154\":{\"h\":\"解法3：对比理解\",\"t\":[\"使用下面的解法，对比理解这个题目：\",\"首先看优化后的 for 循环:\",\"for j in range(1, len(nums)): for i in range(j): if pre_sum[i] == pre_sum[j] - k: count += 1 \",\"class Solution4: def subarraySum(self, nums: List[int], k: int) -> int: mapping = collections.defaultdict(int) # 前缀和 0 出现 1 次 mapping[0] = 1 count = 0 presum_j = 0 for num in nums: presum_j += num # 查找有多少个 presum[i] 等于 presum[j] - k # 要求解的 presum[i] 的个数 if presum_j - k in mapping: count += mapping.get(presum_j - k) # 更新 presum[j] 的个数 if presum_j in mapping: mapping[presum_j] += 1 else: mapping[presum_j] = 1 return count \"]},\"155\":{\"h\":\"LC1744 你能在你最喜欢的那天吃到你最喜欢的糖果吗？\",\"t\":[\"LC1744 你能在你最喜欢的那天吃到你最喜欢的糖果吗？\",\"这个题目描述比较复杂，关键在于从题目中进行抽象，得出可以用前缀和求解的思路。\",\"输入：candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\",\"输出：[true,false,true]\",\"提示：\",\"在第 0 天吃 2 颗糖果(类型 0），第 1 天吃 2 颗糖果（类型 0），第 2 天你可以吃到类型 0 的糖果。\",\"每天你最多吃 4 颗糖果。即使第 0 天吃 4 颗糖果（类型 0），第 1 天吃 4 颗糖果（类型 0 和类型 1），你也没办法在第 2 天吃到类型 4 的糖果。换言之，你没法在每天吃 4 颗糖果的限制下在第 2 天吃到第 4 类糖果。\",\"如果你每天吃 1 颗糖果，你可以在第 13 天吃到类型 2 的糖果。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"巧妙用到了前缀和，解法如下：\",\"class Solution: def canEat(self, candiesCount: List[int], queries: List[List[int]]) -> List[bool]: # 求前缀和 pre_sum = [0] + list(accumulate(candiesCount)) res = list() for _type, day, cap in queries: # 题意是从 0 开始，所以要 +1 min_can_eat, max_can_eat = day + 1, (day + 1) * cap # 表示自己喜欢吃的糖果的区间 first_favor_candy, last_favor_candy = pre_sum[_type] + 1, pre_sum[_type] + candiesCount[_type] res.append(min_can_eat <= last_favor_candy and max_can_eat >= first_favor_candy) return res \",\"其中有个题解非常形象，可以参考：题解\"]},\"156\":{\"h\":\"LC523 连续的子数组和\",\"t\":[\"给你一个整数数组 nums 和一个整数 k ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：\",\"子数组大小 至少为 2 ，且 子数组元素总和为 k 的倍数。 如果存在，返回 true ；否则，返回 false 。\",\"如果存在一个整数 n ，令整数 x 符合 x = n * k ，则称 x 是 k 的一个倍数。\",\"示例 1：\",\"输入：nums = [23,2,4,6,7], k = 6\",\"输出：true\",\"解释：[2,4] 是一个大小为 2 的子数组，并且和为 6 。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/continuous-subarray-sum 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"这道题目也是一个经典的前缀和应用，需要注意，直接暴力求解前缀和问题一般都会超时，需要进行优化，最终的代码如下所示：\",\"class Solution: def checkSubarraySum(self, nums: List[int], k: int) -> bool: mapping = {0: -1} for i, prefix in enumerate(accumulate(nums)): # 保证 k!=0 key = prefix % k if k else prefix if key not in mapping: mapping[key] = i elif i - mapping[key] >= 2: return True return False \"]},\"157\":{\"h\":\"LC 560 解法3：模板\",\"t\":[\"作为对比，如果要设计出来一个模板的话，可以将上述代码套入求解 LC560：\",\"class Solution: def subarraySum(self, nums: List[int], k: int) -> int: mapping = collections.defaultdict(int) mapping[0] = 1 count = 0 for i, prefix in enumerate(accumulate(nums)): key = prefix - k if key not in mapping: mapping[prefix] += 1 else: count += mapping[key] mapping[prefix] += 1 return count \"]},\"158\":{\"h\":\"LC525 连续数组\",\"t\":[\"给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。\",\"示例 1:\",\"输入: nums = [0,1]\",\"输出: 2\",\"说明: [0, 1] 是具有相同数量0和1的最长连续子数组。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/contiguous-array 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"题目分析：这道题目首先把数组中的 0 全部替换成 1，那就等价于找和为 0 的最长连续数组。不同于上面 LC560 的是，这道题目要求返回的是子数组的长度。\",\"如果这道题目按照上述模板进行的话，可能会有些难理解，所以，模板不能万能的，关键还是要理解！\"]},\"159\":{\"h\":\"解法一：模板\",\"t\":[\"class Solution: def findMaxLength(self, nums: List[int]) -> int: _nums = [] for num in nums: if num == 0: _nums.append(-1) else: _nums.append(1) # 遇到前缀和，首先联想到 hash map mapping = collections.defaultdict(int) mapping[0] = -1 max_len = 0 for i, prefix in enumerate(accumulate(_nums)): key = prefix - 0 # 如果存在1和0的数量差值相等的地方，那么说明后者到前者之前1和0的数量相等！ # 换句话说，就是前缀和相等的地方，求解前缀和数组出现相等地方的最大距离 if key not in mapping: mapping[prefix] = i else: max_len = max(max_len, i - mapping[key]) return max_len \"]},\"160\":{\"h\":\"LC209 长度最小的子数组\",\"t\":[\"给定一个含有 n 个正整数的数组和一个正整数 target 。\",\"找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\",\"示例 1：\",\"输入：target = 7, nums = [2,3,1,2,4,3]\",\"输出：2\",\"解释：子数组 [4,3] 是该条件下的长度最小的子数组。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"解析：可以使用前缀和来求解。\",\"牢记前缀和的推导：nums[i:j]的和等于 pre_sum[j + 1] - pre_sum[i]，当初始化为 [0] + presums 的时候。\",\"如果是初始化为 presums 的时候，前缀和就应该是 pre_sum[j] - pre_sum[i-1]，其实是等价的，就看下标的不同。\",\"class Solution: def minSubArrayLen(self, target: int, nums: List[int]) -> int: if not nums: return 0 ans = len(nums) + 1 # 求前缀和，这种方式求解的前缀和 nums[i:j] = pre[j+1] - pre[i] pre_sum = [0] + list(itertools.accumulate(nums)) # 推导一下：我们在确定左边界 i 的时候，需要求解 sum(nums[i:j]) >= target, 也就是说相当于 pre[j+1] - pre[i] >= target # 移项可得 pre[j+1] >= pre[i] + target # 也就是说需要找到那个 j 在数组中的插入位置 for i in range(len(pre_sum)): find = pre_sum[i] + target bound = bisect.bisect_left(pre_sum, find) if bound != len(pre_sum): ans = min(bound - i, ans) return 0 if ans == len(pre_sum) else ans \"]},\"161\":{\"h\":\"Slide Window\"},\"162\":{\"h\":\"Abstract\",\"t\":[\"双指针技术可以解决很多问题，在面试中往往能成为加分项。\"]},\"163\":{\"h\":\"Problems\"},\"164\":{\"h\":\"LC2024 考试的最大困扰度\",\"t\":[\"题目要求 输入：answerKey = \\\"TFFT\\\", k = 1\",\"输出：3\",\"解释：我们可以将最前面的 'T' 换成 'F' ，得到 answerKey = \\\"FFFT\\\" 。 或者，我们可以将第二个 'T' 换成 'F' ，得到 answerKey = \\\"TFFF\\\" 。 两种情况下，都有三个连续的 'F' 。\",\"来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\"]},\"165\":{\"h\":\"剑指offer 57 和为 S 的连续正数序列\",\"t\":[\"遇到连续序列，应当要想到双指针。\",\"小明很喜欢数学,有一天他在做数学作业时,要求计算出 9~16 的和,他马上就写出了正确答案是 100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为 100 (至少包括两个数)。没多久,他就得到另一组连续正数和为 100 的序列: 18,19,20,21,22。\",\"现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!\",\"这道题目在 leetcode 上也有类似的：\",\"输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。\",\"序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\",\"示例 1：\",\"输入：target = 9 输出：[[2, 3, 4],[4, 5]]\",\"剑指 Offer 57 - II. 和为s的连续正数序列\",\"其解法如下：\",\"class Solution: def findContinuousSequence(self, target: int) -> List[List[int]]: left = 1 right = 2 res = [] while left < right: sums = (left + right) * (right - left + 1) / 2 if sums == target: res.append(list(range(left, right + 1))) right += 1 sums += right elif sums < target: right += 1 sums += right else: left += 1 sums -= left return res \",\"注意到一个细节：在相等判断以后应当右移，以免陷入死循环。\",\"sum1 我们套入了区间求和公式：\",\"sum=(l+r)∗(r−l+1)/2\",\"公式的含义是，在 [l, r] 区间内的区间和，(首项 + 尾项) * 项数 / 2 的原理。\",\"我们起始的 right 从 2 开始，当区间和的值比较小的时候，我们把 right 指针右移，如果区间和比较大的时候，我们把 left 指针左移。\",\"来一个看不懂的解法，可以慢慢理解：\",\"class Solution: def findContinuousSequence(self, target: int) -> List[List[int]]: if target <= 2: # 最小的target应该是3 -> [1, 2] return [] res = [] for n in range(2, (target+1)//2): # 观察最大值为(target+1)//2，比如15最大值为8， temp = target - n*(n-1)//2 if temp <= 0: break if not temp % n: # 胜哥强 res.append([temp // n + i for i in range(n)]) return res[::-1] \"]},\"166\":{\"h\":\"和为 S 的两个数\",\"t\":[\"输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。\",\"class Solution: def FindNumbersWithSum(self, array, tsum): l = 0 r = len(array) - 1 while l < r: sum1 = array[l] + array[r] if sum1 == tsum: break elif sum1 > tsum: r -= 1 else: l += 1 if l >= r: return [] return [array[l], array[r]] \"]},\"167\":{\"h\":\"LC1513 仅含 1 的子串数\",\"t\":[\"给你一个二进制字符串 s（仅由 '0' 和 '1' 组成的字符串）。\",\"返回所有字符都为 1 的子字符串的数目。\",\"由于答案可能很大，请你将它对 10^9 + 7 取模后返回。\",\"示例 1：\",\"输入：s = \\\"0110111\\\" 输出：9 解释：共有 9 个子字符串仅由 '1' 组成 \\\"1\\\" -> 5 次 \\\"11\\\" -> 3 次 \\\"111\\\" -> 1 次\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/number-of-substrings-with-only-1s 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"这个题目可以用滑动窗口，但是也存在其他巧妙的方法。\"]},\"168\":{\"h\":\"面试题17.18 最短超串\",\"t\":[\"假设你有两个数组，一个长一个短，短的元素均不相同。找到长数组中包含短数组所有的元素的最短子数组，其出现顺序无关紧要。 返回最短子数组的左端点和右端点，如有多个满足条件的子数组，返回左端点最小的一个。若不存在，返回空数组。\",\"示例 1:\",\"输入:\",\"big = [7, 5, 9, 0, 2, 1, 3, 5, 7, 9, 1, 1, 5, 8, 8, 9, 7]\",\"small = [1, 5, 9]\",\"输出: [7, 10]\",\"来源：力扣（LeetCode） 链接：<https://leetcode-cn.com/problems/shortest-supersequence-lcci> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"求解思路：\",\"设置右指针，然后不停滑动右指针直到满足题目的条件，右指针滑动到最右边则不存在结果\",\"右指针位置确定后，滑动左指针，直到不满足要求\",\"使用一个 hash_map 来记录窗口中数字出现的次数\"]},\"169\":{\"h\":\"LC905 按奇偶排序数组\",\"t\":[\"给你一个整数数组 nums，将 nums 中的的所有偶数元素移动到数组的前面，后跟所有奇数元素。\",\"返回满足此条件的 任一数组 作为答案。\",\"示例 1：\",\"输入：nums = [3, 1, 2, 4] 输出：[2, 4, 3, 1] 解释：[4, 2, 3, 1]、[2 ,4, 1, 3] 和 [4, 2, 1, 3] 也会被视作正确答案。\",\"来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/sort-array-by-parity 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"这道题目是需要我们把所有的偶数移到奇数前面， 很容易想到双指针的解法:\",\"class Solution: def sortArrayByParity(self, nums: List[int]) -> List[int]: left, right = 0, len(nums) - 1 while left < right: while left < right and nums[left] % 2 == 0: left += 1 while left < right and nums[right] % 2 != 0: right -= 1 if left < right: nums[left], nums[right] = nums[right], nums[left] left += 1 right -= 1 return nums \",\"在实现这个解法的时候，需要注意以下几点：\",\"考虑到边界条件，如果 nums = [0] 这种情况下，双指针的适用性。我们的条件是符合的。\",\"考虑到每次需要 left +=1 或者 right -= 1, 再加上 while 的判断，我们需要在每次判断的时候判断下是否越界，这点很容易忽视。\",\"在代码第 5 行，我们判断了 nums[left] % 2 == 0, 也就是说，left 指针指向的到第 9 行代码的时候已经必然是一个奇数了，我们可以放心交换！\"]},\"170\":{\"h\":\"Sort\",\"t\":[\"GitHub Sort code\"]},\"171\":{\"h\":\"Abstract\"},\"172\":{\"h\":\"Base Sort Function Py\",\"t\":[\"在 Python 中，按照优先级进行排序可以使用 lis.sort(lombda x: (x[1], x[0])) 这样的方式。\",\"举例来说，对于要排序的数组：[(2, 0), (3, 1), (3, 2), (4, 3), (3, 4)], 我们对其进行排序：\",\"res.sort(key=lambda x: (-x[0], x[1])) # [(4, 3), (3, 1), (3, 2), (3, 4), (2, 0)] # example 2 # before [(3, 0), (3, 1), (3, 2), (3, 3), (3, 4)] # after [(3, 0), (3, 1), (3, 2), (3, 3), (3, 4)] \",\"此时达到的效果是，第一个元素降序，第二个元素升序。\",\"res.sort(key=lambda x: (x[0], x[1])) # [(2, 0), (3, 1), (3, 2), (3, 4), (4, 3)] \",\"此时达到的效果是，第一个元素升序，第二个元素升序。这个也是默认的情况。\",\"剩下的可以直接研究，总结来说：sort 默认的是升序。\"]},\"173\":{\"h\":\"cmp_to_key\",\"t\":[\"Python 自定义排序函数\",\"值得一提的是，上述代码我们实现了一个自定义的比较函数，在 python 中自定义比较函数，首先需要对其进行定义，而后使用 key=cmp_to_key(compare) 来进行自定义比较，其中 cmp_to_key 需要导入：\",\"from functools import cmp_to_key \",\"对于这个比较函数，还可以再研究一下：\",\"def compare_test(self, nums: List[int]) -> List[int]: def compare(x: int, y: int): return x - y nums = sorted(nums, key=cmp_to_key(compare)) return nums \",\"测试结果如下：\",\"def test01(self): nums = [3, 30, 34, 5, 9] res = self.s.compare_test(nums) self.assertEqual(sorted(nums), res) print(res) # [3, 5, 9, 30, 34] \",\"可以看到 x - y 比较的结果是使得其升序排列了。\",\"还有一个 leetcode 的例子是 cmp_to_key 的应用，953. 验证外星语词典，具体可以参考后面的实例章节。\"]},\"174\":{\"h\":\"Sort\"},\"175\":{\"h\":\"Insertion Sort\",\"t\":[\"直接使用 bisect 模块，可以直接插入某个元素，返回排序好的元素：\",\"import bisect nums = [1, 3, 4] bisect.insort(nums, 2) print(nums) # [1, 2, 3, 4] \"]},\"176\":{\"h\":\"Merge Sort\",\"t\":[\"T(n)=O(nlog2​n)\",\"another example:\",\"Counting Inversions\",\"Matrix Multiplication:\",\"Brute Force(暴力): O(n3) arithmetic operations\"]},\"177\":{\"h\":\"Quick Sort\",\"t\":[\"Worst-case running time O(n2) : \",\"input sorted or reverse sorted, partition around min or max element.\",\"one side of partition has no elements.\",\"T(n)=T(0)+T(n−1)+cn\",\"Expected running time O(nlgn)\",\"If we are really lucky, partition splits the array evenly n2​ : T(n)=2T(n/2)+Θ(n)=Θ(nlgn)\",\"def qsort(arr): if not arr: return [] else: pivot = arr[0] l = [_ for _ in arr if _ < pivot] r = [_ for _ in arr[1:] if _ >= pivot] return qsort(l) + [pivot] + qsort(r) \"]},\"178\":{\"h\":\"Selection Sort\",\"t\":[\"def selection_sort(arr): ​ for i in range(len(arr)): ​ minimum = i ​ for j in range(i+1, len(arr)): ​ if arr[j] < arr[minimum]: ​ minimum = j ​ arr[minimum], arr[i] = arr[i], arr[minimum] ​ return arr \"]},\"179\":{\"h\":\"Sort Template\",\"t\":[\"C++ 使用模板降序排列：\",\"struct greater { template<class T> bool operator()(T const &a, T const &b) const { return a > b; } }; std::sort(numbers.begin(), numbers.end(), greater()); \"]},\"180\":{\"h\":\"Swap\",\"t\":[\"基本实现：\",\"//引用实现 swap(int &x, int &y){ ​ int temp; ​ temp = x; ​ x= y; ​ y =x; } swap(x, y); //指针实现 swap(int *x, int *y){ ​ int temp; ​ temp = *x; ​ *x = *y; ​ *y = temp; } swap(&x, &y); \",\"异或实现：\",\"void swap(int &x, int &y){ ​ x ^= y; ​ y ^= x; ​ x ^= y; } swap(x, y); void swap(int *x, int *y){ ​ *x ^= *y; ​ *y ^= *x; ​ *x ^= *y; } swap(&x, &y); \",\"加减操作：\",\"void swap(int &x, int &y){ ​ x = x + y; ​ y = x - y; ​ x = x - y; } swap(x, y); void swap(int *x, int *y){ ​ *x = *x + *y; ​ *y = *x - *y; ​ *x = *x - *y; } swap(&x, &y); \",\"宏定义：\",\"#define swap(x, y) { x ^= y; y ^= x; x ^= y; } #define swap(x, y) { x = x + y; y = x - y; x = x - y; } swap(x, y); \"]},\"181\":{\"h\":\"Problems\"},\"182\":{\"h\":\"LC179 最大数\",\"t\":[\"Given a list of non negative integers, arrange them such that they form the largest number.\",\"给定一组非负整数 nums，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。\",\"Input: [10,2]\",\"Output: \\\"210\\\"\",\"https://leetcode-cn.com/problems/largest-number/\",\"对于这个题目，本质上是一个排序问题，要是不使用自带的排序方法，可以使用冒泡排序的方法。\",\"10 和 2 的大小关系（或者说前后顺序），可以根据 10 + 2 = 102 和 2 + 10 = 210 的大小来判断。\"]},\"183\":{\"h\":\"冒泡排序 C 解法\",\"t\":[\"这是百度百科冒泡排序算法的参考：\",\"void bubbleSort(elemType arr[], int len) { elemType temp; int i, j; for (i = 0; i < len - 1; i++) for (j = 0; j < len - 1 - i; j++) { if (arr[j] > arr[j + 1]) { temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } \"]},\"184\":{\"h\":\"一刷\",\"t\":[\"该题目的解法如下：\",\"def largestNumber(self, nums: List[int]) -> str: for i in range(len(nums) - 1): for j in range(len(nums) - i - 1): if int(str(nums[j]) + str(nums[j + 1])) < int(str(nums[j + 1]) + str(nums[j])): nums[j], nums[j + 1] = nums[j + 1], nums[j] if set(nums) == {0}: return '0' res = ''.join([str(_) for _ in nums]) i = 0 while i < len(res) and res[i] == '0': i += 1 res = res[1:] return res \",\"附上 leetcode 大神的解法：\",\"class Solution: def largestNumber(self, nums: List[int]) -> str: nums = list(map(str, nums)) max_len = max(map(len, nums)) nums.sort(key=lambda x: x*(max_len // len(x) + 1), reverse=True) return ''.join(nums) if nums[0] != '0' else '0' \",\"主要到 lambda 表达式中出现了一个 +1, 是因为有时候会遇到奇数的情况，比如说：[121, 12] 这种情况，会得出商为 1, 从而产生错误的结果。\"]},\"185\":{\"h\":\"二刷\",\"t\":[\"二刷于 2022年4月18日。\",\"我们需要对这个题目进行更加深入的理解，举例来说：\",\"[4,42]: 需要比较 442 和 424, 所以我们需要把 4 放在 42 的前面拼接成最大值 442, 此时我们可以知道，如果对 4 和 42 进行排序的话，那么必须满足：\",\"4>42\",\"在这个例子中，442 - 424 > 0\",\"[4,45]: 需要比较 445 和 454, 我们需要把 45 放在 4 的前面拼接成最大值 454.\",\"在这个例子中，445 - 454 < 0\",\"所以说，我们定义一个比较函数，这个比较函数实现上述比较关系的结果：\",\"def compare(x, y): return int(y+x) - int(x+y) \",\"如何理解这个比较函数呢？我们举例，如果要降序排列的话，对应的比较函数如下：\",\"def compare(x, y): return y - x \",\"最终的实现如下：\",\"from functools import cmp_to_key from typing import List class Solution: def largestNumber(self, nums: List[int]) -> str: def compare(x: str, y: str): return int(y + x) - int(x + y) nums = sorted(map(str, nums), key=cmp_to_key(compare)) return '0' if nums[0] == '0' else ''.join(nums) \"]},\"186\":{\"h\":\"LC953 验证外星语词典\",\"t\":[\"953. 验证外星语词典\",\"某种外星语也使用英文小写字母，但可能顺序 order 不同。字母表的顺序（order）是一些小写字母的排列。\",\"给定一组用外星语书写的单词 words，以及其字母表的顺序 order，只有当给定的单词在这种外星语中按字典序排列时，返回 true；否则，返回 false。\",\"示例 1：\",\"输入：words = [\\\"hello\\\",\\\"leetcode\\\"], order = \\\"hlabcdefgijkmnopqrstuvwxyz\\\"\",\"输出：true\",\"解释：在该语言的字母表中，'h' 位于 'l' 之前，所以单词序列是按字典序排列的。\",\"来源：力扣（LeetCode） 链接：https://leetcode.cn/problems/verifying-an-alien-dictionary 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\",\"我们使用 python 的 cmp_to_key 的解法如下：\",\"class Solution: def isAlienSorted(self, words: List[str], order: str) -> bool: dic = {v: i for i, v in enumerate(order)} def cmp(s1, s2): i = 0 while i < len(s1) and i < len(s2): if dic[s1[i]] > dic[s2[i]]: return -1 elif dic[s1[i]] < dic[s2[i]]: return 1 else: i += 1 return 1 if i < len(s1) else -1 words_sorted = sorted(words, key=cmp_to_key(cmp)) return words_sorted == words \"]},\"187\":{\"h\":\"Architecture\",\"t\":[\"本栏目主要是总结计算机体系结构中的一些知识点。\"]},\"188\":{\"h\":\"Cache\"},\"189\":{\"h\":\"Abstract\"},\"190\":{\"h\":\"Introduction\",\"t\":[\"哲学含义\",\"程序员总希望存储是无限的，我们通过一系列的技术手段让程序员产生这种错觉。\",\"本文主要研究存储层次结构中的 cache 环节，本文的行文构成包含如下：\",\"介绍空间局部性原理和时间局部性原理\",\"简单介绍 cache 的基本概念，包括 cache line 各个字段的解析\",\"介绍 cache 的 hit, miss 发生的原因、造成的影响以及可能的解决方案；包括两个重要的算法和通用的处理 cache miss 的方法\",\"介绍 cache 的几种映射方式和置换策略\",\"写 cache 相关的技术点，Write miss 相关介绍\",\"cache 一致性监听协议 MESI(x)\",\"其他的相关知识\"]},\"191\":{\"h\":\"Key Word\",\"t\":[\"key word\",\"means\",\"comments\",\"memory hierarchy\",\"内存层次结构\",\"principle of locality\",\"局部性原理\",\"temporal locality\",\"时间局部性\",\"spatial locality\",\"空间局部性\",\"Locality of reference\",\"访问局部性\"]},\"192\":{\"h\":\"temporal locality & spatial locality\",\"t\":[\"总体而言，可以归纳为访问局部性，其含义是计算机科学领域的应用程序在访问内存的时候，倾向于访问内存中较为靠近的值。\",\"时间局部性：以 loop 为例, 被引用过一次的存储器位置在未来会被多次引用\",\"空间局部性：指令是按照顺序执行的；如果一个存储器的位置被引用，那么将来他附近的位置也会被引用，典型的例子就是数组。\",\"🧡🧡 QA\",\"存储层次结构如何利用时间局部性和空间局部性？\",\"主要是 2 个：将经常访问的数据放在距离处理器更近的地方，将多个连续的“块”移动到上层存储中来利用空间局部性。\",\"接近处理器的存储是比较小和比较快的，除了成本考虑之外，接近处理器的存储比较小的话，其命中率也更高。\",\"理解 hit rate, miss rate, hit time, miss penalty\",\"局部性是计算机系统中的一种可预测的行为，系统的这种强访问局部性，可以被用来处理内核的指令流水线中的性能优化，如缓存、分支预测、内存预读取等。\"]},\"193\":{\"h\":\"Cache Abstract\",\"t\":[\"Caching is perhaps the most important example of the big idea of prediction. It relies on the principle of locality to try to find the desired data in the higher levels of the memory hierarchy, and provides mechanisms to ensure that when the prediction is wrong it finds and uses the proper data from the lower levels of the memory hierarchy. The hit rates of the cache prediction on modern computers are often above 95%.\",\"这句话从宏观维度总结了 cache 的一些作用：\",\"预测大思想的完美应用\",\"依赖了局部性原理\",\"其本质就是试图在存储层次结构的更高层次找到想要的数据。\",\"下图是一个关于 cache 结构的全局示意图：\"]},\"194\":{\"h\":\"way & set\",\"t\":[\"从上图中有一个疑问，way 和 set 的区别是什么？\",\"In a cache, a \\\"way\\\" refers to a set of cache entries that have the same index but different tags. The number of ways in a cache is determined by the cache's associativity, which is the number of cache entries that can map to the same index. Each way contains a set of cache entries that are grouped together based on their index.\",\"In contrast, a \\\"set\\\" in a cache refers to a group of cache entries that share the same index. A set can contain multiple cache entries, with each entry having a unique tag. The number of sets in a cache is determined by the cache size and block size.\",\"从上述文字也不是很好理解，再参考以下的引文：\",\"Suppose we have a 4-way set-associative cache with 8 cache entries and a block size of 64 bytes. This means that the cache has 8 sets, each with 4 ways.\",\"Here's an example of how the cache might be organized:\",\"Set 0: Way 0: [Tag 0][Data][Control] Way 1: [Tag 1][Data][Control] Way 2: [Tag 2][Data][Control] Way 3: [Tag 3][Data][Control] Set 1: Way 0: [Tag 4][Data][Control] Way 1: [Tag 5][Data][Control] Way 2: [Tag 6][Data][Control] Way 3: [Tag 7][Data][Control] ... Set 7: Way 0: [Tag 28][Data][Control] Way 1: [Tag 29][Data][Control] Way 2: [Tag 30][Data][Control] Way 3: [Tag 31][Data][Control] \",\"In this example, each set contains 4 ways, and each way contains a cache entry with a unique tag, data, and control bits. When the processor requests data from memory, the cache uses the memory address to determine the index and tag of the requested data. The cache then checks the corresponding set and looks for the requested data in each way of that set until it finds the data or determines that it is not in the cache.\",\"一个 way 多个 cacheline(通常而言)\",\"To add the cache line to the previous text figure, we can modify it as follows:\",\"Set 0: Way 0: [Tag 0][Data][Control] [Tag 1][Data][Control] [Tag 2][Data][Control] [Tag 3][Data][Control] \",\"上述的例子说明了：一个 way 是由很多个 cache entries 组成的（这点在下面的图中也可以得到印证）\",\"以下是一个例子：\",\"here's an example to illustrate the relationship between cache size, way, and set:\",\"Let's say we have a cache with a total size of 64 KB, a block size of 64 bytes, and a 4-way set-associative mapping.\",\"To determine the number of sets in the cache, we can divide the cache size by the product of the block size and the associativity. In this case, we have:\",\"Number of sets = cache size / (block size x associativity) Number of sets = 64 KB / (64 bytes x 4) Number of sets = 256\",\"This means that the cache has 256 sets. Each set contains four ways, as specified by the 4-way set-associative mapping.\",\"To determine the number of cache entries in the cache, we can multiply the number of sets by the number of ways. In this case, we have:\",\"Number of cache entries = number of sets x number of ways Number of cache entries = 256 x 4 Number of cache entries = 1024\",\"This means that the cache has a total of 1024 cache entries. Each cache entry consists of a block of 64 bytes, as specified by the block size.\",\"When the processor requests data from memory, the cache uses the memory address to determine the index and tag of the requested data. The cache then checks the corresponding set and looks for the requested data in each of the four ways of that set until it finds the data or determines that it is not in the cache.\",\"Overall, this example illustrates how the cache size, block size, and associativity determine the number of sets, ways, and cache entries in a cache, and how these components work together to efficiently cache frequently accessed data and reduce the time spent waiting for data to be fetched from main memory.\",\"量化研究方法如下所描述：\",\"The set associative organization has four sets with two blocks per set, called two-way set associative.\"]},\"195\":{\"h\":\"Cache line\",\"t\":[\"整个cache 空间被分成了 N 个 line，line 是 cache 交换的最小单位，每个 cache line 通常是 32 byte 或者 64 byte, 对于一个字节我们还需要更加注意，那就是 cache line 包含的内容：\",\"参考 arm 官方的示意图：\",\"有些时候也会用 tag, valid, block 表示，其中 block 表示 cache 中缓存的数据，tag 是该 cache line 对应的内存的地址，valid 表示该 cache line 中的数据是否有效。\",\"也有如下的表示方法：\",\"+-----------------+----------------------+---------------+ | Tag | Data | Control | +-----------------+----------------------+---------------+ | n bits | m bytes | k bits | +-----------------+----------------------+---------------+ \",\"在上述图中，cache line 被表示成了三个部分：\",\"Tag: identify the memory address associated with the cache entry\",\"Data: contains the actual data or instructions stored in the cache entry\",\"Control: contains the control bits used to manage the cache entry, such as indicating whether the entry is valid or not, whether it has been modified, and whether it is available for use.\",\"通过对比这两者的不同，我们明白，不同的体系结构中的 cacheline 设计都是存在差异的。\",\"下面章节解释一下 tag 和 valid 的作用[1]。\"]},\"196\":{\"h\":\"tag\",\"t\":[\"Because each cache location can contain the contents of a number of different memory locations, how do we know whether the data in the cache corresponds to a requested word? That is, how do we know whether a requested word is in the cache or not?\",\"为了解决上述的问题（我们要访问的内容是不是在 cache 里面），我们使用了 tag 这个字段，原始的对于 tag 的定义可以如下所示：\",\"A field in a table used for a memory hierarchy that contains the address information required to identify whether the associated block in the hierarchy corresponds to a requested word.\",\"其意思就是说对应了内存中的地址信息。\",\"（❌❌ 之前错误的理解）不过我们需要注意一个细节，那就是我们如果使用 direct-mapped（目前看来是这样的，这个以后再好好思考一下），那么这个 tag 就是不需要保存完整的地址信息的。\",\"✔️✔️ 对于上述说法的正确理解是：tag 所需要使用的位数大小是取决于微架构实际的设计的，和地址信息非强相关；为了更好理解，我们在此重复研究这张图片：\",\"从图（很重要，所以在本文中出现多次）中我们可以看出，我们取了虚拟地址的 19 位用于 tag 的匹配；而我们图中有 256 条 cache line, 其计算方式是根据 cache 的总大小(32KB/4 set) 除以每条 cacheline 的大小(32byte) 得到的。\",\"tag 匹配时需要全量比较吗？\",\"注意我们无论使用什么映射方式，要确定要访问的内存是不是在 cache 中，均是通过比较 tag 的方式来实现的。\",\"这就意味着：我们需要和所有的 entry 的 tag 字段进行比较。通常而言，这个过程是比较耗时的；但是硬件设计通过一些优化的手段，可以加速或者并行这个比较的过程。\",\"从另一个方面来说，cache 越大，那么我们需要比较的次数就越多；但是更小的 cache 会导致更高的 miss rate, 最终影响性能。\"]},\"197\":{\"h\":\"valid\",\"t\":[\"We also need a way to recognize that a cache block does not have valid information. For instance, when a processor starts up, the cache does not have good data, and the tag fields will be meaningless.\",\"valid 的存在是因为我们还需要标识 cache 中的信息是否有效，比如说这边举了一个例子，说的是如果处理器刚刚启动的时候，缓存中的数据肯定是无效的，valid 字段就是起到这样一个作用。\"]},\"198\":{\"h\":\"💯data\",\"t\":[\"剩下的是 data 或者 block 块，其实在实际的 cache 中，我们长这样（Intrinsity FastMATH data cache 为例）：\",\"valid\",\"tag\",\"block 1\",\"block 2\",\"…\",\"block n\",\"8\",\"18\",\"32\",\"32\",\"…\",\"32\",\"在上述的例子中，block 有多个，实际构成了总的 data, 而每个 block 的定位是依靠地址中的某几个字节分配的偏移量决定的，比如我们一共有 16 个 block, 则地址字段需要分配 4 bit 用于表示偏移量，有些英文文档中称作 multiplexor，那么我们每个 cache line(entry) 中可以保存的总的数据量为：32 bit * 16。\",\"我们举例一个地址字段来说明这个：\",\"31 .. 14\",\"13 .. 6\",\"5..2\",\"1..0\",\"tag\",\"index\",\"byte offset -> block offset\",\"这个例子中的 5..2 bit 就是用作定位偏移得的。\",\"Intrinsity FastMATH data cache 使用了数据 cache 和 指令 cache 分离的设计。\",\"上述的说明属于比较专业的说法，我们还可以使用较为简单的方式来进行理解（可能会缺少一些严谨性）\",\"访存地址可以被分为两部分：块地址+块内位移。其中块地址用于查找该块在 cache 中的位置，块内位移用于确定所访问的数据在块内的位置。\",\"分页 VS 分段\",\"上述的访存地址计算的方式是适用于页虚拟存储器， 对于段虚拟寄存器，可以用两个字来表示：段号+段内偏移。关于虚拟内存可以参考另外的一遍文章《Virtual Memory》\"]},\"199\":{\"h\":\"cache 映射方式\",\"t\":[\"映射方式主要由以下几种：\",\"全相联 cachem, full-associative cache\",\"直接映射 cache, direct-mapped cache\",\"组相联 cache, set-associative cache\"]},\"200\":{\"h\":\"full-associative\",\"t\":[\"悲剧的被比较对象，性能很烂，我们现在不研究这个。\",\"但是这种方式有个优点就是内存中的每个 line(注意到内存中是块存储的，为了方便理解这里也说得 line) 可以映射到任意的 cache line 中，从这个角度看，full-associate 效率更好，但是其查找过于复杂。\",\"🧡🧡 言外之意在于，优秀的查找算法前提下，这种方式还是可以应用的。\"]},\"201\":{\"h\":\"direct-mapped\",\"t\":[\"主要的思想是把内存分为 N 个 page, 每一个 page 的大小和 cache 相同，page 中的 Line 0 只能映射到 cache 中的 Line 0, 以此类推。\",\"其示意图如下所示：\",\"直接映射意味着确定的映射方式，如图中的 0x00, 0x40, 0x80 都只能映射到 Line 0 中。\"]},\"202\":{\"h\":\"set-associative\",\"t\":[\"direvt-mapped 的方式是处理器上比较常用的，但是在某些特定的情况下会存在很大的缺陷，所以现代的商用处理器都是用 set-associative cache 来解决这个问题，这也是我们这节要研究的。\",\"set-associative 将 cache 分成了多个 way, direvt-mapped == 1 way set-associative， 使用多少个 cache way 也是一种权衡的结果。\",\"举例，以下是四路组相联的结构（一路是直接映射）：\",\"set\",\"tag\",\"data\",\"tag\",\"data\",\"tag\",\"data\",\"tag\",\"data\",\"0\",\"way 0\",\"way 0\",\"way 1\",\"way 1\",\"way 2\",\"way 2\",\"way 3\",\"way 3\",\"1\",\"…\",\"n\"]},\"203\":{\"h\":\"Arm docs: Set associative caches\",\"t\":[\"With this kind of cache organization, the cache is divided into a number of equally-sized pieces, called ways.[2]\",\"cache 被分割成为了一些相同大小的块，称作 ways.\",\"A memory location can then map to a way rather than a line. The index field of the address continues to be used to select a particular line, but now it points to an individual line in each way. Commonly, there are 2- or 4-ways, but some ARM implementations have used higher numbers.\",\"如上图所示，这是一个 2-way cache 的结构示意图；在上图中：Data from address 0x00 (or 0x40, or 0x80) might be found in line 0 of either (but not both) of the two cache ways.\"]},\"204\":{\"h\":\"Arm docs: A real-life example\",\"t\":[\"Figure: a 4-way set associative 32KB data cache, with an 8-word(1 word equals 16 bits) cache line length. This kind of cache structure can be found on the Cortex-A7 or Cortex-A9 processors.\",\"cache line 的大小是 32 bytes(8 word = 8 * 32 bits =32 bytes, 注意一个 word 在 arm 中是 32bits)\",\"cache 总大小为 32KB\",\"连接方式是 4 路组相连\",\"由此我们可以计算出来，每个 way 的 cacheline 数量为：32KB/4/32=256, 所以我们每个 way 会有 256 条 cacheline. 这就意味着我们需要 8 bits 来在 way 中索引，在途中就是用 [12:5] 来索引的；除此之外，我们需要使用 [4:2] 来索引 cache line 中的 8 个 word. 剩下的 [31:13] 用于 tag.\",\"❤️ 有一点需要注意的是，图中出现了 4 个 way 叠加处理，每个 way 都是由 256 条 cacheline 组成的；图中并未体现出多个 set，只画了一个 set. 现在再体会一下这句话：A way is a subset of the cache entries in a set that have the same index but different tags.\",\"Arm 原文参考\",\"The cache line length is eight words (32 bytes) and you have 4-ways. 32KB divided by 4 (the number of ways), divided by 32 (the number of bytes in each line) gives you a figure of 256 lines in each way. This means that you require eight bits to index a line within a way (bits [12:5]). Here, you must use bits [4:2] of the address to select from the eight words within the line, though the number of bits which are required to index into the line depends on whether you are accessing a word, halfword, or byte. The remaining bits [31:13] in this case will be used as a tag.\"]},\"205\":{\"h\":\"QA\",\"t\":[\"我们知道，cacheline 包括 tag, set index 和 offset bit, 其中 offset bit 用于定位数据在 cacheline 中具体的偏移，那么是如何仅根据一个 offset 就能确定具体的数据要取多少个 byte 呢？\",\"要解答这个问题，我们需要知道，在 ldr 或者其他访存类指令发出以后，CPU 是知道这次访问需要的数据大小的(byte); 我之前想不明白的是，是如何知道的呢？其实很简单，我们在指令上已经指定了需要访问的数据大小，如 ldr x1, #234 就是通过寄存器指定我们需要的访问是 16 字节。\"]},\"206\":{\"h\":\"Summary\",\"t\":[\"三种方式的对比：\",\"机制\",\"组的数量\",\"每组中块的数量\",\"全相联\",\"1\",\"cache 中块的数量\",\"直接映射\",\"cache 中块的数量\",\"1\",\"组相联\",\"cache 中块的数量 / 相联度\",\"相联度（通常2~16）\",\"增加相联度的好处通常是降低失效率，失效率的改进来自于减少对于同一位置的竞争而产生的失效。\",\"三种方式进行查找的对比：\",\"机制\",\"定位方法\",\"需要比较的次数\",\"全相联\",\"查找所有cache 表项\",\"cache 容量\",\"独立的查找表\",\"0\",\"直接映射\",\"索引\",\"1\",\"组相联\",\"索引组，组中的元素\",\"相联度\"]},\"207\":{\"h\":\"hit & miss\",\"t\":[\"cache hit(命中)：读取时间 X 个 cycle\",\"cache miss：读取时间 XX 或者 XXX 个 cycle\",\"所以 hit 和 miss 有很大的性能差距。\"]},\"208\":{\"h\":\"Why cache miss?\",\"t\":[\"有三种情况会导致 cache misss:\",\"Compulsory miss, 必须的 miss，如第一次访问程序或者数据时，这些程序或者数据没有在 cache 中\",\"Capacity miss, cache 容量满了的时候，新数据到来，需要重新搬移，就 miss 了；或者还存在一种情况是 cache 无法包含程序执行期间所需的所有块。\",\"Conflict miss, 这种情况下，cache 可能还有空闲空间，但是这个地址对应的 cache line 已经被使用了，也会导致 cache miss.\"]},\"209\":{\"h\":\"Ways to lower miss rate\"},\"210\":{\"h\":\"使用较大的 block\",\"t\":[\"较大的 blocks 利用空间局部性原理来降低 miss rate, 通常而言，增加块的大小会降低 miss rate, 但是其存在一个阈值，如果 block 的大小成为缓存很大的一部分，最终 miss rate 反而会上升，这是因为缓存中可以保存的块的数量变少，导致了很多竞争。\",\"除此之外，使用较大的 blocks 会造成 cache 未命中的时候的代价变大，主要是体现在 cache 加载的时候(fetch the block), 这个过程分为两个部分：the latency to the first word and the transfer\",\"🧡🧡🧡 我们可以获得一个启发：如果我们可以设计方法降低较大的 block 的 transfer time, 那么我们就可以进一步改善缓存的性能。\"]},\"211\":{\"h\":\"hide some transfer time\",\"t\":[\"在使用较大的 block 的时候，我们采取一个隐藏一些传输时间的方法来减少未命中的惩罚。\",\"early start\",\"requested word first or critical word first\",\"❌❌❌ 后续需要重点研究这两个算法。\"]},\"212\":{\"h\":\"Handling cache misses\",\"t\":[\"缓存处理起来 hit 的工作相比于 miss 是微不足道的。\",\"cache miss handing 需要处理器控制单元和单独的控制器合作完成，这个单独的控制器启动内存访问、填充缓存\",\"缓存未命中的处理会导致流水线 stall, 此时需要保存所有寄存器的状态\",\"缓存未命中（处理指令未命中、处理数据未命中）会导致整个处理器暂停，冻结临时寄存器和程序员可见寄存器的内容，同时等待内存。（注意一下，乱序执行的处理器此时还可以允许执行指令）\",\"处理缓存 miss 的步骤大概可以总结如下（主要研究指令 miss）：\",\"发送 PC 值到内存\",\"Since the program counter is incremented in the first clock cycle of execution, the address of the instruction that generates an instruction cache miss is equal to the value of the program counter minus 4.\",\"如何理解 the instruction that generates an instruction cache miss? 其实我们只要了解到，cache miss 以后，PC 寄存器向前走了，所以这时候我们需要向后走去找到这个 miss 的指令的地址，然后再去内存中找，就可以了！\",\"控制主存执行读取，并等待内存完成访问\",\"写入缓存，将内存中的数据放入缓存的数据部分，tag 写入地址（from ALU）的高位，并打开有效位\",\"重启指令的执行，这将重新读取指令，这是在缓存中就可以找到该指令\"]},\"213\":{\"h\":\"置换策略\",\"t\":[\"随机\",\"FIFO 先进先出\",\"LRU 最近最少使用\",\"LRU 我们使用的最多，并且性能也最好。\",\"关于替换策略的选择，也有一些考量在里面，并不是 LRU 就一定是最好的，我们举例说明：\",\"在相联度不低（2，4）的层次结构中实现 LRU 的代价太高，所以一般使用近似实现\",\"随着 cache 容量变大，两种替换策略的性能差异也逐渐缩小\",\"在虚拟存储中，使用 LRU 是因为失效代价很大，失效率的微小降低都显得十分重要；并且其失效相对不那么频繁发生，LRU 也可以由软件近似实现\"]},\"214\":{\"h\":\"Cache Write\",\"t\":[\"所谓 cache 写，指的就是 cpu 修改了 cache 中的数据的时候，内存的数据也要随之改变。为了达到这个目的，cache 提供了几种写策略：\",\"Write through\",\"Write buffer\",\"Write back\"]},\"215\":{\"h\":\"Write through\",\"t\":[\"核心策略：每次 CPU 修改了 cache 中的内容，cache 立即更新（cache 控制器）内存中的内容。\",\"这种方式会有大量写内存的操作，所以效率较低。\"]},\"216\":{\"h\":\"Write buffer\",\"t\":[\"A queue that holds data while the data are waiting to be written to memory.\",\"Write buffer 中保存了准备写入内存的数据，处理器同时写入 cache 和 write buffer, 而在写入主存完成后，write buffer 中的数据就 free 掉了。\",\"这种方法的缺点在于，如果这个 write buffer 已经满了，那么处理器来写这个的时候必须停止，等待 write buffer 中出现新的空位。\",\"这个之中还有一个矛盾在于，如果处理器生成写入的速率大于内存可以完成的写入速率，那么拿什么 write buffer 都不会起作用的。\"]},\"217\":{\"h\":\"Write back: dirty\",\"t\":[\"核心策略：CPU 或者内核修改了 cache 中的内容的时候，cache 不会立即更新内存内容，而是等到这个 cache line 因为某种原因需要从 cache 中移除的时候，cache 才去更新内存中的内容。\",\"cache 为了知道某个 line 的内容有没有被修改，于是增加了一个新的标志位：dirty, 增加以后的 cache line 结构如下所示：\",\"dirty\",\"valid\",\"tag\",\"block\",\"具体的 dirty 的用法如下：\",\"dirty 位为 1, 表示这个数据已经被修改\",\"dirty 位为 0, 表示这个数据和内存中的数据是一致的\",\"程序 cache 不需要 dirty 标志位，数据 cache 需要 dirty 标志位。\",\"几个特点：\",\"By comparison, in a write-through cache, writes can always be done in one cycle.\",\"很多 write back 策略还包括着 write buffer 用于在 miss 的时候减少 miss 惩罚，是这么做的：修改后的块被移动到 write buffer 中，Assuming another miss does not occur immediately, this technique halves the miss penalty when a dirty block must be replaced.\"]},\"218\":{\"h\":\"Write miss\",\"t\":[\"Write miss 这个第一眼看过去似乎是比较奇特的，写也会 Miss 吗？当然会了，这里的写 miss 指的是没有写在缓存里面。\",\"考虑 write through 场景下的一个 write miss, 在 write through 中，有两种策略：\",\"write allocate\",\"在缓存中分配一个 block, 然后用内存中的 block 覆盖之。\",\"no write allocate\",\"更新内存中的 block, 但是不放入 cache 中。这种场景可能适用于计算机清零某一页的内容这样的情况，有些计算机是允许按页更改写入分配策略的。\"]},\"219\":{\"h\":\"cache 一致性\"},\"220\":{\"h\":\"Example\",\"t\":[\"定义：主要体现在不同 core 的 cache 中数据不同。\",\"----------------------------------------- | 多核处理器 | | ----------------- ---------------- | | | core 0 | | core 1 | | | | cache 0(x = 3)| | cache 1(x = 5)| | | ------------------ ----------------- | |-------------------------------------- | ------------------------------ | memory (x = 3) | | | ------------------------------- \",\"core 0 和 core 1 中的 x 容易出现数据不一致的情况，比如 core 0 将 x 进行了修改，但是 core 1 不知道 x 已经被修改了，还在使用旧值，这样就会导致数据不一致的问题。\",\"处理器提供了两个操作来保证 cache 的一致性：\",\"Wirte invalidate\",\"Write update\"]},\"221\":{\"h\":\"Write invalidate\",\"t\":[\"置无效，其核心思想为：当一个 core 修改了一份数据，其他 core 上如果有这份数据的复制，就置为无效。\",\"这种方法的优点在于，比较简单，而且无效标志位 valid 在 cache line 中有对应的字段，这意味着置无效就是把 cache 的一个 line 直接写为无效了，这个 cache line 中其他有效的数据也不能被使用了。\",\"大部分处理器都使用这个操作。\"]},\"222\":{\"h\":\"Write update\",\"t\":[\"写更新：当一个内核修改了一份数据，其他的地方如果有这份数据的赋值，就更新到最新值。\",\"其缺点是会产生频繁的更新动作。\"]},\"223\":{\"h\":\"cache 一致性协议\"},\"224\":{\"h\":\"MESI\",\"t\":[\"主要研究基于 Write invalidate 的一致性协议。比较经典的协议就是 MESI 协议。\",\"复习一下：cache line 中有两个字段是 dirty 和 valid, 分别表示数据是否被修改和数据是否有效。但是在多核处理器中，多个核会存在共享数据的情况，MESI 协议就可以描述这种共享状态。\",\"MESI 协议中有 2 bit 用于 cache line 的状态位，如下表：\",\"状态\",\"全程\",\"描述\",\"M\",\"Modified\",\"这行数据被修改了，和内存中的数据不一致\",\"E\",\"Exclusive\",\"这行数据有效，数据和内存中一致，数据只存在于本 core 的 cache 中\",\"S\",\"Shared\",\"这行数据有效，数据和内存中一致，数据存在于很多 cache 中\",\"I\",\"Invalid\",\"这行数据无效\",\"M 和 E 需要重点理解一下，很明显这四个状态是互斥的，也就是说：\",\"状态为 M 的时候，这行数据是 dirty 的，但是数据是这个 cache 独有的。除了这个 M 意外，其他的状态下数据都是 clean 的（无效状态是无效的）\",\"状态位 E 的时候，这行数据是 clean 的，并且数据是这个 cache 独有的\",\"状态位 S 的时候，这行数据是 clean 的，cache 可以从其他 cache 处同步数据，也可以从内存处同步，协议对此没有做任何要求。\",\"在 MESI 协议中，cache 控制器是可以监听 snoop 其他的 cache 的读写操作。\"]},\"225\":{\"h\":\"Other MESI\",\"t\":[\"AMD 演化了 MOESI 协议，多了一个 O 状态，这个状态是 S 和 M 状态的一种合体，表示本 cache line 中的数据和内存中的数据不一致，不过其他的核可以有这份数据的复制，复制了这份数据的核的这行 cache 的状态为 S.\",\"Intel I7 演化了 MESIF 协议，多的 F 状态表示 Forward, 其含义是可以把数据直接传给其他内核的 cache, 而 shared 则不能。\",\"MESIX 统一都可以称为监听协议(snoop)，监听协议的缺点在于沟通成本很高，所以有一种集中管理的目录协议，可以后续研究。\"]},\"226\":{\"h\":\"片内可寻址存储器\",\"t\":[\"通常而言，cache 对用户（程序员）是透明的，但是在 DSP 等性能要求很高的处理器中，处理器存储的一部分作为 cache, 另一部分作为可寻址寄存器，程序员可以直接访问这部分空间。\",\"这种在做法可以有效地控制 cache miss, 所以我们也称片内可寻址寄存器为：软件管理的 cache.\",\"片内可寻址寄存器的应用：一般而言，cache 是等到 CPU 要使用数据的时候，才从内存中去拿数据的，片内可寻址寄存器可以通过软件控制 DMA，将以后需要的数据提前搬到处理器内部，这就节省了很多 CPU 的等待时间。DMA 是专门负责数据搬移的模块。\",\"为什么会是软件去做这件事呢？因为程序是可以知道 CPU 什么时候将要访问数据的，而 cache 不知道。但是这种方法对软件的编写难度造成了很大的挑战。\"]},\"227\":{\"h\":\"Bypass\",\"t\":[\"In addition, some CPU instructions may be explicitly designed to bypass the cache. For example, some architectures have special instructions that allow the CPU to read or write data directly to main memory without going through the cache. These instructions are typically used for low-level system operations that require direct access to the main memory or for performance-critical applications where caching may introduce additional latency or overhead.\",\"在 ARM 中，无需访问 cache 直接获取数据的指令有：\",\"the ARM architecture has several special instructions that allow the CPU to bypass the cache and access data directly from the main memory or peripheral devices. Here are a few examples:\",\"LDM/STM instructions: The Load Multiple (LDM) and Store Multiple (STM) instructions allow the CPU to load or store multiple registers directly to or from the main memory without going through the cache. These instructions are commonly used for low-level system operations such as interrupt handling and context switching.\",\"LDR/STR instructions with the \\\"B\\\" flag: The Load Register (LDR) and Store Register (STR) instructions have a \\\"B\\\" flag that allows the CPU to bypass the cache and access data directly from the main memory. This flag is typically used for performance-critical applications where caching may introduce additional latency or overhead.\",\"DMA instructions: The Direct Memory Access (DMA) instructions allow the CPU to bypass the cache and transfer data directly between the main memory and peripheral devices. These instructions are commonly used for high-speed data transfer operations such as video and audio processing.\",\"Overall, the ARM architecture provides several special instructions that allow the CPU to bypass the cache and access data directly from the main memory or peripheral devices, depending on the specific requirements of the application or system.\"]},\"228\":{\"h\":\"Others\"},\"229\":{\"h\":\"内存对齐\",\"t\":[\"为什么要内存对齐(memory memory)[3]：\",\"平台原因：不是所有的硬件平台都可以访问任意地址上的任意数据，某些平台只能在特定的地址处取某些特定类型的数据，否则抛出硬件异常。\",\"性能原因：如果访问未对齐的内存，处理器需要两次访存操作；而对齐的内存只需要一次访存操作。\"]},\"230\":{\"h\":\"Reference\",\"t\":[\"Computer Organization and Design_ The Hardware Software Interface_ ARM Edition ↩︎\",\"Set associative caches↩︎\",\"一文轻松理解内存对齐↩︎\"]},\"231\":{\"c\":[\"Arm\"]},\"232\":{\"h\":\"Pipeline\"},\"233\":{\"h\":\"Abstract\",\"t\":[\"本文主要研究流水线技术在计算机体系结构中的应用。流水线技术分为两个大的部分，本部分统一研究流水线的基础知识部分，总体而言可以分为以下几类：\",\"data path implications, hazards and examining the performance of pipelines.\",\"interaction between pipelining and various aspects of instruction set design\",\"etc..\"]},\"234\":{\"h\":\"What is pipeline?\",\"t\":[\"Pipelining is an implementation technique whereby multiple instructions are overlapped in execution;\",\"流水线的概念理解较为简单。\",\"In a computer pipeline, each step in the pipeline completes a part of an instruction.\",\"Like the assembly line, different steps are completing different parts of different instructions in parallel. Each of these steps is called a pipe stage or a pipe segment. The stages are connected one to the next to form a pipe—instructions enter at one end, progress through the stages, and exit at the other end, just as cars would in an assembly line.\",\"在计算机 pipeline 中的每一个 step 都完成指令的一部分，这个 step 在流水线中称作 pipe stage.\",\"The time required between moving an instruction one step down the pipeline is a processor cycle.\",\"上述文字严格定义了 cycle 的概念，即指令向下移动一步所需要的时间。\",\"Because all stages proceed at the same time, the length of a processor cycle is determined by the time required for the slowest pipe stage.\",\"由于所有的 stage 都同时运行，所以处理器 cycle 的长度取决于最慢的 stage 所需的时间。\",\"In a computer, this processor cycle is almost always 1 clock cycle.\",\"阐述了一个公式：\",\"processcycle=1clockcycle\",\"Pipelining yields a reduction in the average execution time per instruction. If the starting point is a processor that takes multiple clock cycles per instruction, then pipelining reduces the CPI.\",\"流水线的主要作用还是降低指令的平均执行时间。另一方面，如果每个指令需要多个处理器时钟周期，那么流水线技术可以降低 CPI.\"]},\"235\":{\"h\":\"RISC V Instruction Set\",\"t\":[\"🟢🟢 RISC V 和 ARM 的关系是什么？\",\"都是 RISC 指令集，可以理解为竞争对手。RISC V 是开源的，授权费较低，但是 ARM 生态繁荣，目前国内外也有在做 RISC V 的企业。\",\"虽然阅读的这本书使用的是 RISC V 指令集，但是其他的 RISC 也是类似的。\",\"All RISC architectures are characterized by a few key properties:\",\"All operations on data apply to data in registers and typically change the entire register (32 or 64 bits per register).\",\"The only operations that affect memory are load and store operations that move data from memory to a register or to memory from a register, respectively. Load and store operations that load or store less than a full register (e.g., a byte, 16 bits, or 32 bits) are often available.\",\"The instruction formats are few in number, with all instructions typically being one size. In RISC V, the register specifiers: rs1, rs2, and rd are always in the same place simplifying the control.\",\"These simple properties lead to dramatic simplifications in the implementation of pipelining, which is why these instruction sets were designed this way.\",\"所有的 RISC 体系结构都具有以下的关键属性：\",\"对数据的所有操作都适用于寄存器中的数据，并且通常会更改整个寄存器。\",\"影响存储的唯一操作是 load 和 store. load 是将数据从内存移动到寄存器，store 是将数据从寄存器移动到内存。load 或者 store 小于完整寄存器也是可以的。\",\"❌❌❌ 第一条和第二条似乎有点矛盾？\",\"指令格式的数量很少，所有指令通常都是一个尺寸。\",\"以上简单的熟悉导致了流水线实现的显著简化。\"]},\"236\":{\"h\":\"The Classic Five-Stage Pipeline for a RISC Processor\",\"t\":[\"下图简单给出了 RISC V 五个 stage 的具体细节：\",\"IF: instruction fetch\",\"ID: instruction decode\",\"EX: execution\",\"MEM: memory access\",\"WB: write-back\",\"To start with, we have to determine what happens on every clock cycle of the processor and make sure we don’t try to perform two different operations with the same data path resource on the same clock cycle.\",\"防止在同一个 clock cycle, 同一个 data path resource 上执行两个不同的操作。\",\"For example, a single ALU cannot be asked to compute an effective address and perform a subtract operation at the same time. Thus, we must ensure that the overlap of instructions in the pipeline cannot cause such a conflict.\",\"比如说我们不能要求单个 ALU 去计算有效地址的同时执行减法操作。因此，我们必须确保管道中的指令的重叠不会产生这种冲突。\",\"⭐⭐ @todo C-7 的图片可以有效说明这个问题，将来可以添加进来\",\"First, we use separate instruction and data memories, which we would typically implement with separate instruction and data caches.\",\"使用单独的指令和数据缓存。\",\"The use of separate caches eliminates a conflict for a single memory that would arise between instruction fetch and data memory access.\",\"Notice that if our pipelined processor has a clock cycle that is equal to that of the unpipelined version, the memory system must deliver five times the bandwidth. This increased demand is one cost of higher performance.\",\"使用单独的缓存消除了指令获取数据访问之间可能存在的单个内存冲突。\",\"但是需要注意，其代价是内存系统必须提供五倍的带宽（5 clock cycle 的情况下）。\",\"Second, the register file is used in the two stages: one for reading in ID and one for writing in WB. These uses are distinct, so we simply show the register file in two places. Hence, we need to perform two reads and one write every clock cycle.\",\"To handle reads and a write to the same register (and for another reason, which will become obvious shortly), we perform the register write in the first half of the clock cycle and the read in the second half.\",\"register file 被两个 stages 用了：在 ID 中读取，在 WB 中写入，这两种用法是不同的。\",\"❌❌ 斜体的没有理解。\",\"为了处理对同一个寄存器的读和写，我们在时钟周期的前半部分执行寄存器写入，后半部分执行读取。\",\"Third, Figure C.2 does not deal with the PC. To start a new instruction every clock, we must increment and store the PC every clock, and this must be done during the IF stage in preparation for the next instruction. Furthermore, we must also have an adder to compute the potential branch target address during ID. One further problem is that we need the ALU in the ALU stage to evaluate the branch condition. Actually, we don’t really need a full ALU to evaluate the comparison between two registers, but we need enough of the function that it has to occur in this pipestage.\",\"上述描述暂时不是很关键。总的来说还是确保硬件资源如 PC, ALU 等不被同时使用。\",\"Although it is critical to ensure that instructions in the pipeline do not attempt to use the hardware resources at the same time, we must also ensure that instructions in different stages of the pipeline do not interfere with one another.\",\"This separation is done by introducing pipeline registers between successive stages of the pipeline, so that at the end of a clock cycle all the results from a given stage are stored into a register that is used as the input to the next stage on the next clock cycle. Figure C.3 shows the pipeline drawn with these pipeline registers.\",\"虽然确保 pipeline 中的指令不会同时尝试使用硬件资源至关重要，但是我们还必须确保 pipeline 不同阶段的指令不会互相干扰。\",\"这种分离是通过在流水线的连续 stage 之间引入流水线寄存器来实现的，以便于在时钟周期结束时，给定 stage 的结果都存储到一个寄存器中，该寄存器用作下一个 clock cycle 的输入。\",\"Although many figures will omit such registers for simplicity, they are required to make the pipeline operate properly and must be present. Of course, similar registers would be needed even in a multicycle data path that had no pipelining (because only values in registers are preserved across clock boundaries).\",\"In the case of a pipelined processor, the pipeline registers also play the key role of carrying intermediate results from one stage to another where the source and destination may not be directly adjacent. For example, the register value to be stored during a store instruction is read during ID, but not actually used until MEM; it is passed through two pipeline registers to reach the data memory during the MEM stage. Likewise, the result of an ALU instruction is computed during EX, but not actually stored until WB; it arrives there by passing through two pipeline registers. It is sometimes useful to name the pipeline registers, and we follow the convention of naming them by the pipeline stages they connect, so the registers are called IF/ID, ID/EX, EX/MEM, and MEM/WB.\",\"先说明了流水线寄存器虽然在很多的图里面没有被画出来，但是其必不可少。\",\"再说明了，寄存器中的数据可能不仅仅被严格相邻的两个指令使用。并且进行了举例。\"]},\"237\":{\"h\":\"The Major Hurdle of Pipelining—Pipeline Hazards\",\"t\":[\"There are situations, called hazards, that prevent the next instruction in the instruction stream from executing during its designated clock cycle. Hazards reduce the performance from the ideal speedup gained by pipelining. There are three classes of hazards:\",\"Structural hazards arise from resource conflicts when the hardware cannot support all possible combinations of instructions simultaneously in overlapped execution. In modern processors, structural hazards occur primarily in special purpose functional units that are less frequently used (such as floating point divide or other complex long running instructions). They are not a major performance factor, assuming programmers and compiler writers are aware of the lower throughput of these instructions. Instead of spending more time on this infrequent case, we focus on the two other hazards that are much more frequent.\",\"Data hazards arise when an instruction depends on the results of a previous instruction in a way that is exposed by the overlapping of instructions in the pipeline.\",\"Control hazards arise from the pipelining of branches and other instructions that change the PC.\",\"讲述了三种冒险方式。\",\"Hazards in pipelines can make it necessary to stall the pipeline. Avoiding a hazard often requires that some instructions in the pipeline be allowed to proceed while others are delayed. For the pipelines we discuss in this appendix, when an instruction is stalled, all instructions issued later than the stalled instruction—and hence not as far along in the pipeline—are also stalled. Instructions issued earlier than the stalled instruction—and hence farther along in the pipeline—must continue, because otherwise the hazard will never clear. As a result, no new instructions are fetched during the stall.Wewill see several examples of howpipeline stalls operate in this section— don’t worry, they aren’t as complex as they might sound!\",\"说了几个避免冒险的方式。\"]},\"238\":{\"h\":\"Performance of Pipelines With Stalls\",\"t\":[\"主要是讲述性能优化，暂不研究。\"]},\"239\":{\"h\":\"Data Hazards\",\"t\":[\"@todo\"]},\"240\":{\"h\":\"Branch Hazards\",\"t\":[\"@todo\"]},\"241\":{\"h\":\"Reducing the Cost of Branches Through Prediction\",\"t\":[\"As pipelines get deeper and the potential penalty of branches increases, using delayed branches and similar schemes becomes insufficient.\",\"Instead, we need to turn to more aggressive means for predicting branches. Such schemes fall into two classes: low-cost static schemes that rely on information available at compile time and strategies that predict branches dynamically based on program behavior. We discuss both approaches here.\",\"随着流水线的加深，其潜在的惩罚增加，使用一些弱鸡的方法已经不再那么高效了。\",\"🔴🔴🔴 @todo 分支预测的意义还需要再继续研究\",\"所以说我们需要转向更积极的方法来预测分支，此类方案分为两类：\",\"依赖编译时可用信息的低成本静态方案\",\"基于程序行为的动态分支预测\"]},\"242\":{\"h\":\"Static Branch Prediction\",\"t\":[\"@todo\"]},\"243\":{\"h\":\"Dynamic Branch Prediction and Branch-Prediction Buffers\",\"t\":[\"The simplest dynamic branch-prediction scheme is a branch-prediction buffer or branch history table. A branch-prediction buffer is a small memory indexed by the lower portion of the address of the branch instruction. The memory contains a bit that says whether the branch was recently taken or not. This scheme is the simplest sort of buffer; it has no tags and is useful only to reduce the branch delay when it is longer than the time to compute the possible target PCs.\",\"最简单的动态分支预测是分支预测 buffer 或者分支预测 table. 具体的细节较为简单，不多赘述。\",\"With such a buffer, we don’t know, in fact, if the prediction is correct—it may have been put there by another branch that has the same low-order address bits. But this doesn’t matter. The prediction is a hint that is assumed to be correct, and fetching begins in the predicted direction. If the hint turns out to be wrong, the prediction bit is inverted and stored back.\",\"即使有这个 buffer, 我们也无从得知，预测是否正确。但是这没关系，因为预测是被假定为一个正确的提示，fetch 从预测的方向开始，如果这个提示最终被证明是错误的，那么预测位的那个 bit 就被反转过来。\",\"❌❌❌ 此时有一个问题，分支预测错误之后，流水线被反转了么？\",\"This buffer is effectively a cache where every access is a hit, and, as we will see, the performance of the buffer depends on both how often the prediction is for the branch of interest and how accurate the prediction is when it matches. Before we analyze the performance, it is useful to make a small, but important, improvement in the accuracy of the branch-prediction scheme.\",\"buffer 的性能取决于预测兴趣分支的频率和预测匹配时的准确性。\"]},\"244\":{\"h\":\"How Is Pipelining Implemented?\",\"t\":[\"Before we proceed to basic pipelining, we need to review a simple implementation of an unpipelined version of RISC V.\",\"先研究一个没有流水线版本的 RISC V.\"]},\"245\":{\"h\":\"A Simple Implementation of RISC V\",\"t\":[\"In this subsection, we focus on a pipeline for an integer subset of RISC V that consists of load-store word, branch equal, and integer ALU operations.\",\"Later in this appendix we will incorporate the basic floating-point operations. Although we discuss only a subset of RISC V, the basic principles can be extended to handle all the instructions; for example, adding store involves some additional computing of the immediate field. We initially used a less aggressive implementation of a branch instruction. We show how to implement the more aggressive version at the end of this section.\",\"我们讨论 RISC V 的一个子集。\",\"Every RISC V instruction can be implemented in, at most, 5 clock cycles. The 5 clock cycles are as follows:\",\"接下来说明 5 个 clock cycle 的分别构成：\",\"Instruction fetch cycle(IF)\",\"IR <- Mem[PC]; NPC <- PC + 4; \",\"Operation—Send out the PC and fetch the instruction from memory into the instruction register (IR); increment the PC by 4 to address the next sequential instruction. The IR is used to hold the instruction that will be needed on subsequent clock cycles; likewise, the register NPC is used to hold the next sequential PC.\",\"其操作是发送出去 PC 并将指令从内存中读取出来到指令寄存器 IR；将 PC 递增 4 以寻址下一个顺序指令。IR 用于保存后续时钟周期所需的指令，同样，寄存器 NPC 用于保存下一个顺序 PC.\",\"Instruction decode/register fetch cycle (ID)\",\"A <- Regs[rs1]; B <- Regs[rs2]; Imm <- sign-extended immediate field of IR; \",\"Operation—Decode the instruction and access the register file to read the registers (rs1 and rs2 are the register specifiers). The outputs of the general-purpose registers are read into two temporary registers (A and B) for use in later clock cycles. The lower 16 bits of the IR are also sign extended and stored into the temporary register Imm, for use in the next cycle.\",\"Decoding is done in parallel with reading registers, which is possible because these fields are at a fixed location in the RISC V instruction format. Because the immediate portion of a load and an ALU immediate is located in an identical place in every RISC V instruction, the sign-extended immediate is also calculated during this cycle in case it is needed in the next cycle. For stores, a separate sign-extension is needed, because the immediate field is split in two pieces.\",\"其操作是解码指令并访问 register file 以读取寄存器，通用寄存器的输出被读入两个临时寄存器 A 和 B, 以便于在后续的时钟周期中使用。IR 的低 16 bit也被扩展并存储到临时寄存器 Imm 中，供下一个 cycle 使用。\",\"解码与读取寄存器并行完成，这是可能的，因为这些字段在 RISC V 指令格式中处于固定位置。\",\"❌❌ immediate filed 相关的研究。\",\"Execution/effective address cycle (EX)\",\"The ALU operates on the operands prepared in the prior cycle, performing one of four functions depending on the RISC V instruction type:\",\"Memory reference:ALU Output <- A + Imm; Operation—The ALU adds the operands to form the effective address and places the result into the register ALU Output.\",\"Register-register ALU instruction:ALU Output <- A func B; Operation—The ALU performs the operation specified by the function code (a combination of the func3 and func7 fields) on the value in register A and on the value in register B. The result is placed in the temporary register ALU Output.\",\"Register-Immediate ALU instruction:ALUOutput <- A op Imm; Operation—The ALU performs the operation specified by the opcode on the value in register A and on the value in register Imm. The result is placed in the temporary register ALU Output.\",\"Branch:ALU Output <- NPC + (Imm << 2);Cond <- (A == B) Operation—The ALU adds the NPC to the sign-extended immediate value in Imm, which is shifted left by 2 bits to create a word offset, to compute the address of the branch target. Register A, which has been read in the prior cycle, is checked to determine whether the branch is taken, by comparison with Register B, because we consider only branch equal.\",\"讲述 EX 步骤所做的事情。ALU 对上个 cycle 的操作数进行操作，根据 RISC V 指令类型操作下列四个函数中的一个：\",\"内存引用；寄存器的值加上立即数，计算出来有效地址并作为 ALU 的输出；\",\"寄存器之间；ALU 对寄存器 A 和 B 中的值执行指定功能代码，结果放在 ALU 输出寄存器；\",\"寄存器和立即数；寄存器 A 的值 op 立即数；\",\"分支；ALU 将 NPC 添加到 Imm 的符号扩展立即值中，该立即值偏移 2 位以创建字偏移，用于计算分支目标的地址。通过与寄存器 B 相比，检查在上一个周期中读取的寄存器 A, 以确定是否采用分支。\",\"The load-store architecture of RISC V means that effective address and execution cycles can be combined into a single clock cycle, because no instruction needs to simultaneously calculate a data address, calculate an instruction target address, and perform an operation on the data. The other integer instructions not included herein are jumps of various forms, which are similar to branches.\",\"Memory access/branch completion cycle (MEM)\",\"The PC is updated for all instructions: PC <- NPC;\",\"Memory reference:LMD <- Mem[ALUOutput] or Mem[ALUOutput] <- B; Operation—Access memory if needed. If the instruction is a load, data return from memory and are placed in the LMD (load memory data) register; if it is a store, then the data from the B register are written into memory. In either case, the address used is the one computed during the prior cycle and stored in the register ALU Output.\",\"Branch:if (cond) PC <- ALUOutput Operation—If the instruction branches, the PC is replaced with the branch destination address in the register ALU Output.\",\"​\",\"Write-back cycle (WB)\",\"Register-register or Register-immediate ALU instruction:Regs[rd] <- ALU Output;\",\"Load instruction:Regs[rd] <- LMD; Operation—Write the result into the register file, whether it comes from the memory system (which is in LMD) or from the ALU (which is in ALU Output) with rd designating the register.\",\"我们做一个简单的总结，首先第一步 IF，也就是我们经常知道的 fetch, 这一步是送出 PC, 将指令存储在 IR 中，PC + 4 到下一条指令的地址，并且存储在 NPC 中（为了方便理解，理解称为 Next-PC）；\",\"接下来进行指令的译码，注意这个和寄存器的读取是可以同时完成的，在这个步骤中，IR 的低 16 位进行了符号扩展，存储在了临时寄存器 Imm 中，供下一个周期使用；\",\"接下来是执行的过程，根据具体的指令决定要执行的类型，其结果存储在了临时寄存器 ALU Output 中；\",\"接下来是访存指令，即 memery access。需要注意到在这个步骤中，更新了 PC 寄存器；不管是寄存器写入还是写出，使用的地址都是上个步骤 ALU Output 的结果；如果是载入 load 指令，则将从 memory 返回的数据放入 LMD(load memory data) 寄存器中，如果是存储 store 指令，则将 B 寄存器的值写入到 memory 中。需要注意到，这一步骤可能是分支指令，如果是分支指令的话，则用寄存器 ALU Output 中的分支目标地址代替 PC.\",\"最后一步是写回操作；目标是写入寄存器堆中。\",\"🟢🟢 注意到上述是不考虑流水线的情况下的实现。\"]},\"246\":{\"c\":[\"Arm\"]},\"247\":{\"h\":\"Virtual Memory\"},\"248\":{\"h\":\"Abstract\",\"t\":[\"本文主要讲述和理解虚拟内存（后文简称 VM， VA 等）的概念，行文可能较为跳跃，需要特别注意。\"]},\"249\":{\"h\":\"Virtual Memory\"},\"250\":{\"h\":\"Abstract\",\"t\":[\"Virtual memory is a technique used by operating systems to enable programs to use more memory than is physically available in the system. When a program accesses memory, the address it uses is a virtual address, which is translated by the hardware into a physical address that corresponds to a location in physical memory. This translation process can be slow, especially if it has to be performed every time the program accesses memory.\",\"自己的简单理解 2023-03-02\",\"虚拟内存的存在使得程序可以使用比可用物理内存更多的存储空间（程序员想要无限多的存储空间）\",\"虚拟地址是由物理地址转化而来的\",\"这种转换过程一般会比较缓慢（引出后续 TLB）\"]},\"251\":{\"h\":\"虚拟内存与进程\",\"t\":[\"关于虚拟内存与进程的关系，有一些新的理解：虚拟内存是保证进程之间隔离的重要机制之一。\",\"从目前得到的信息而言，内核使用以下的技术来保证进程之间的隔离：\",\" 1. 虚拟内存 2. 进程控制块(PCB) \",\"对于虚拟内存而言，每个进程都有自己的地址空间，其中包含代码、数据和栈。这样，每个进程之间的内存空间都是相互隔离的，一个进程无法访问另一个进程的内存。\",\"🐇🐇🐇 那么，虚拟内存具体是如何实现进程之间的隔离的？ 虚拟内存为每个进程提供了单独的地址空间，以实现进程之间的隔离。这种隔离是把物理内存分成大小相等的页来实现的（从虚拟内存的角度看，页就是内存的最小单位）；当进程访问其虚拟地址空间中的某个页时，操作系统会加载虚拟页对应的物理页（MMU: 将虚拟地址转化为物理地址），在这个过程中，操作系统会检查当前进程是否有权限访问该页面。也就是说：一个进程无法访问其他进程的地址空间。\",\"问题：两个进程的虚拟地址空间可能会是什么样子的？\",\"进程 A 的虚拟地址空间：\",\"0x00000000 ~ 0x7fffffff 用户空间 0x80000000 ~ 0xffffffff 内核空间\",\"进程 B 的虚拟地址空间：\",\"0x00000000 ~ 0x7fffffff 用户空间 0x80000000 ~ 0xffffffff 内核空间\",\"A, B 是两个独立的进程，所以虽然用户空间的地址范围相同，但是使用的虚拟地址是不同的；哪怕虚拟地址相同，也会对应不同的物理地址。\"]},\"252\":{\"h\":\"虚拟进程与页表\",\"t\":[\"我们上面说，进程隔离的一个很重要的机制保证就是虚拟内存，那么从底层来看，是怎么实现的呢？答案是页表，笔者对页表的理解如下：\",\"每个进程都拥有自己的页表； 具体而言，Linux 为每个进程都维护一个 task_struct 结构体（进程描述符 PCB, 无论怎么称呼），task_struct -> mm_struct 结构体成员用来保存该进程的页表。\",\"在进程切换的过程中，内核把新的页表的地址写入 CR3 控制寄存器。CR3中含有页目录表的物理内存基地址，因此该寄存器也被称为页目录基地址寄存器 PDBR(Page-Directory Base address Register)[1]\",\"每个进程（线程）绑定到自己的页表，页表不同意味着物理页不同（MMU 负责地址转换，不同的页表无法对应到一个物理页）\",\"对于一个进程而言，操作系统如何保证其访问权限？检查当前操作系统进程是否可以访问目标内存地址，具体到指令级别：验证当前指令是否允许访问特定内存地址；这个过程的实现是通过 MMU 来做的：CPU生成一个虚拟地址，虚拟地址经过 MMU 进行转换，将虚拟地址分解为页号和页内偏移，然后 MMU 查找页表，计算出最终的物理地址，查找时会检测非法或者权限。\",\"OK，现在有一个很重要的问题：进程间通信的时候，我们都需要把数据 copy 到 kernel space, 因为进程的地址空间是隔离的，而 kernel space 是进程共享的；如果说，我们要绕过 kernel 直接进行进程间通信，需要解决以下问题：\",\"如何在用户态能看到其他进程的页表？（假设现在我们不用 Linux, 我们自己是可以实现这样的机制的）\",\"如果说直接访问其他进程的页表有安全隐患，那么我们是否可以在用户态创建一个共享的页表？\"]},\"253\":{\"h\":\"Understanding\",\"t\":[\"虚拟内存可以理解成在主存和辅存（磁盘、硬盘）之间进行数据缓存管理的一级存储层次。\",\"Virtual memory is the name for the level of memory hierarchy that manages caching between the main memory and secondary memory.\",\"从这个原文中我们理解，其本质还是可以理解为一个 cache.\",\"虚拟内存允许单个程序将其地址空间扩展到超出主存的限制。\",\"这句话我是这么理解的：虚拟内存一般可以设置为主存的 1.5 倍大小（建议值），主存也可以理解为辅存的 cache, 所以说虚拟内存在主存和辅存之间，其最大的大小限制应该是辅存的大小。\",\"虽然虚拟存储是为了小容量的存储看起来像大容量的存储，但是主存和辅存之间的性能差异意味着，如果程序经常访问比它拥有的物理存储更多的虚拟存储，程序运行会非常慢。这样的程序会不停的在主存和辅存之间交换页面，这种情况称作：thrashing\",\"虚拟内存支持以受保护的方式在多个同时活跃的进程之间共享主存。\",\"为什么要用受保护的方式，其原因有 2 点：\",\"保护多个应用程序不会同时访问到同一块物理地址。（官方行文：允许多个进程共享一个主存；保护机制确保：一个恶意进程不能写另一个用户进程或者操作系统的地址空间）\",\"防止一个进程读另一个进程的数据\",\"🟠🟠 这边还涉及到一个问题，就是进程切换的时候，页表是怎么处理的？\"]},\"254\":{\"h\":\"TLB\"},\"255\":{\"h\":\"What is TLB?\",\"t\":[\"TLB stands for Translation Lookaside Buffer, and it is a hardware cache that is used in computer architecture to speed up virtual memory access.\",\"The TLB is a cache that stores recently used virtual-to-physical address translations, making it possible to quickly retrieve the physical address for a given virtual address. When a program requests a memory access, the hardware first checks the TLB to see if it contains the translation for the virtual address. If the translation is in the TLB, the hardware can use it to quickly access the corresponding physical address. If the translation is not in the TLB, the hardware has to perform the translation, which takes more time.\",\"对上述描述的简单理解\",\"TLB 存储了最近使用过的 virtual-to-physical 地址转换；这也印证了为什么有些说法称 TLB 就像缓存中的一个条目，TLB 就是缓存了这一转换信息\",\"程序访存请求过来以后，硬件会首先检查 TLB, 命中的话，很快返回虚拟地址对应的物理地址；如果缺失的话，就需要花费较多的时间进行地址转换\",\"也可以这么称呼：加快地址转化：TLB。TLB 的一些描述可以参考如下：\",\"页表存储在主存中，所以程序的每次访存请求至少需要两次访问：查页表获得物理地址、获得物理地址中的数据。\",\"现代处理器设计了一个特殊的 cache 用于追踪最近使用过的地址转化（应用局部性原理），这个 cache 结构称为快表（TLB）\",\"简而言之：TLB 作为页表的 cache 而存在（注意页表是在主存中，方便理解 ）\",\"TLB 的结构和原理如下图：\",\"​ @todo 💚💚💚 TLB 结构图\"]},\"256\":{\"h\":\"TLB Miss\",\"t\":[\"A TLB miss occurs when the hardware attempts to translate a virtual memory address into a physical memory address and cannot find the translation in the Translation Lookaside Buffer (TLB). When this happens, the hardware has to perform a full page table walk to find the translation, which is a more time-consuming process than using the TLB.\",\"TLB 失效，顾名思义就是 TLB 中没有表项能与虚拟地址匹配。按照上面的说法就是，TLB 失效是在 TLB 中没有找到地址转换。\",\"TLB 失效表明两种可能性之一：\",\"页在内存中，但是 TLB 中没有创建\",\"页不在内存中，需要把控制权转接给操作系统处理缺页失效\",\"TLB misses can happen for several reasons. For example, if a program accesses memory that has not been recently accessed, the corresponding translation may have been evicted from the TLB due to space constraints. Similarly, TLB misses can occur when the operating system swaps pages in and out of physical memory, or when a program executes a system call that causes a context switch.\",\"TLB 失效的原因可能是：\",\"程序访问的地址近期没有被访问过，由于 TLB 空间的限制，这个 translation 可能就没有被存储在 TLB 中（page 在内存中）\",\"操作系统 swap pages(page 没在内存中)\",\"这两者就可以对应上述两点 TLB 失效的两种可能。\",\"如何处理缺页失效或者 TLB 失效？\",\"核心：通过例外机制来中断活跃进程，将控制转移到操作系统，然后再恢复执行被中断的进程。\",\"两个特殊的控制寄存器：SEPC 和 SCAUSE.\",\"除此之外，如果我们检测到某个系统的 TLB Miss 比较高的话，可以使用如下的措施：\",\"To mitigate the impact of TLB misses, modern processors often employ techniques such as multi-level TLBs, TLB prefetching, and hardware page table walkers, which can reduce the likelihood and latency of TLB misses. Additionally, operating systems can optimize memory management strategies to minimize the number of TLB misses, such as using huge pages or transparent huge pages to reduce the size of page tables and increase TLB hit rates.\",\"multi-level TLBs (two-level page table structure in arm)\",\"TLB prefetching\",\"hardware page table walkers\",\"huge pages(reduce page table size, increase TLB hit)\"]},\"257\":{\"h\":\"Page\",\"t\":[\"💚💚💚💚 @todo 这边附上图 5-28\"]},\"258\":{\"h\":\"页面大小的权衡\",\"t\":[\"页面大小是比较常见的体系结构参数。如果选择一个偏大的页面的话，其优点可以如下所示：\",\"页表的大小与页面的大小成反比；增大页面的大小可以节省存储器；\",\"较大页面可使得缓存更大；\",\"传递较大页面效率更高；\",\"TLB 的条目数量有限，较大页面意味着可以高效地映射更多存储器，最终可以减少 TLB 缺失\",\"较小页面则可以节省内存，防止内部碎片化；还有一个问题就是较大的页面可能会延长调用一个进程的时间，因为进程启动的时候，很多进程很小。\",\"页表和 TLB 的关系\",\"TLB 用于加速虚拟地址到物理地址的映射过程，而页表是实现虚拟内存管理的核心数据结构之一。如果 TLB 中没有缓存映射关系的话，CPU 就需要对页表进行查找，并将这个映射关系添加到 TLB 中以供下次使用。\"]},\"259\":{\"h\":\"Page Fault\",\"t\":[\"如果 virtual page 的有效位无效，那么就发生缺页失效。其本质是程序在执行过程中中需要访问的某一页数据或者代码不在内存中。\",\"缺页失效发生的时候，如果内存中的所有页表都在使用的话，需要选择一页进行替换。\",\"替换的时候使用近似 LRU 算法，因为实现完整的 LRU 算法代价太高。ARM V8 使用了一个 access bit 来实现这个。\"]},\"260\":{\"h\":\"Virtual page number and Page offset\",\"t\":[\"Virtual Address 可以分为两个部分：Virtual page number 和 Page offset, 可以翻译为虚拟页号和页内偏移量。\"]},\"261\":{\"h\":\"Virtual Page Number\",\"t\":[\"Virtual Page Number (VPN) 是用于标识要访问的 page, 这个字段会用于虚拟地址到物理地址的转换。\",\"VPN 的大小取决于虚拟地址空间的和虚拟存储系统使用的 page 大小；举例而言，一个系统有 32-bit 虚拟地址，4KB page, 则 VPN 的大小为 220 bit, 其需要在地址空间中表示 220 个 page. 对于为什么需要 20 bit, 其计算方法就是 32−12=20, 其中 4KB 的 page 占用了 12 bit 的标识，剩下的 20 位就留给了 VPN.\",\"❤️❤️❤️ VPN and TLB\",\"VPN 和 TLB 之间的关系需要加以理解：\",\"When a program accesses a virtual memory address, the processor extracts the virtual page number from the address and uses it as the index into the TLB cache.\",\"从上面可知：VPN 用于索引 TLB, 即 VPN -> PPN(Physical Page Number).\",\"个人理解 TLB 和 VPN\",\"对于上面的解释，如果我们假定有 20 bit 用于 VPN, 那么 TLB 的 tag compare address + TLB index (这两个合起来就是 TLB entry) 的大小就为 20 bit.\",\"(not sure) TLB index 的大小取决于 TLB 的映射方式，或者说，取决于 TLB entires 的数量 (The TLB contains entries that map virtual page numbers to physical page numbers, along with other metadata such as access permissions and cache coherency information.)。\",\"当 TLB index 确定的时候，TLB tag compare address 的位数也就确定了。\"]},\"262\":{\"h\":\"Page Offset\",\"t\":[\"Page Offset 用于确定页表中数据的具体位置，通常而言，其比 Virtual page number 要小。以一个 4KB 的 page 而言，其需要 12 bit 来标识在这个 4KB page 中的 byte offset.\"]},\"263\":{\"h\":\"页表的映射方式？\",\"t\":[\"页表通常选择使用全相联的方式，出于以下几个原因（页表使用全相联 + 额外的页表）：\",\"全相联具有优越性，因为失效代价比较高\",\"全相联允许软件使用负责的替换策略以降低失效率\",\"全相联很容易索引，并且不需要额外的硬件，也不需要进行查找\"]},\"264\":{\"h\":\"TLB 和 cache 的映射方式？\",\"t\":[\"通常选用组相连，一些系统使用直接映射，看中其访问时间短并且实现简单。\",\"知乎：操作系统中的多级页表到底是为了解决什么问题？↩︎\"]},\"265\":{\"c\":[\"Arm\"]},\"266\":{\"h\":\"Java and JVM\",\"t\":[\"本部分主要是研究 Java 和 JVM 相关的技术，现阶段主要是 JVM 相关。\",\"除此之外，也有一些安卓的基本知识。\",\"目前已经完成的有：\",\"Dirs\",\"title\",\"link\",\"description\",\"android\",\"Adb Command\",\"一些常见的 adb 命令\",\"android\",\"Simple understanding of IPC\",\"art\"]},\"267\":{\"h\":\"Linux and C\"},\"268\":{\"h\":\"Why?\",\"t\":[\"把 linux 和 C 归类在一起，是因为我觉得研究这两者是密不可分的，所以希望自己不要只专注于语言，更加应该去了解应用等。\",\"如果以后这个栏目数量太多了，可以考虑拆分出去。\"]},\"269\":{\"h\":\"Linux\",\"t\":[\"标题\",\"链接\",\"备注\",\"Thermal\",\"link\",\"主要介绍 Thermal 框架的原理、源码分析\",\"BL31\",\"link\",\"主要介绍 bootloader 的过程、重点研究 BL3-1\",\"init.h\",\"link\",\"主要分析 Linux 源码 init.h 相关的逻辑和设计理念\"]},\"270\":{\"h\":\"apt source\",\"t\":[\"Source:USTC\",\"sudo vim /etc/apt/source.list \",\"or use the command:\",\"sudo sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list \",\"For Kali Linux:\",\"deb https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib \",\"For more information USTC Open Source\",\"Finally:\",\"sudo apt-get update\"]},\"271\":{\"h\":\"Python\",\"t\":[\"Python’s simplicity lets you become productive quickly, but this often means you aren’t using everything it has to offer. With this hands-on guide, you’ll learn how to write effective, idiomatic Python code by leveraging its best—and possibly most neglected—features. Author Luciano Ramalho takes you through Python’s core language features and libraries, and shows you how to make your code shorter, faster, and more readable at the same time.\"]},\"272\":{\"h\":\"Install\"},\"273\":{\"h\":\"Linux\",\"t\":[\"在 Python 官网下载 tar 包，然后解压\",\"安装必要的库\",\"按照教程[1]进行安装\",\"sudo apt-get install build-essential checkinstall libreadline-gplv2-dev libncursesw5-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev \",\"./configure make make install \",\"执行以上操作后，Python 会安装在 /usr/local/bin 目录中，Python 库安装在 /usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号\"]},\"274\":{\"h\":\"openssl install\",\"t\":[\"如果遇到了报错，如 opsnssl 版本不正确的话，需要参考这个解决方案[2]；我们在此对其做一个简单的总结：\",\"下载 openssl 的安装包，并解压\",\"安装 openssl\",\"配置 python 安装时 openssl 路径\",\"其对应的命令如下：\",\"tar xz openssl-xxx.tar.gz cd openssl-xxx ./config shared --prefix=/usr/local/ sudo make sudo make install \",\"注意到以上的步骤仅仅是一个示意和参考，其本质就是安装 openssl.\",\"而后创建文件夹并执行：\",\"mkdir lib cp ./*.{so,so.1.0.0,a,pc} ./lib \",\"需要注意 so.1.0.0 替换成自己 openssl 的版本号。\",\"如果安装 openssl 成功之后，我们可以进行 Python 的安装：\",\"./configure --with-openssl=/usr/src/openssl-1.0.2o --enable-optimizations make make install \",\"注意 /usr/src/openssl-1.0.2o 路径的替换。\"]},\"275\":{\"h\":\"venv\",\"t\":[\"我们此时就可以使用新版的 Python 来创建我们的虚环境了[3]:\",\"/usr/local/bin/python3.10 -m venv myvenv \",\"然后启动虚环境：\",\"source myvenv/bin/activate \",\"菜鸟教程↩︎\",\"解决 openssl 版本过低安装失败的问题↩︎\",\"Virtual Environments and Packages↩︎\"]},\"276\":{\"h\":\"Coroutines\",\"t\":[\"因为 GIL（全局解释器锁）, python 只有一个 GIL, 运行时只有拿到这个锁才能执行，同一时间只有一个获得 GIL 的线程在跑，其他线程都在等待状态。\",\"相当于每个 CPU 在同一时间只能执行一个线程。\",\"本文还研究了 python 多进程的相关实现。\"]},\"277\":{\"h\":\"Q&A\",\"t\":[\"GIL 是多线程、多进程的吗？ 某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。\",\"解释器被一个全局解释器锁保护着，它确保任何时候都只有一个Python线程执行\",\"Python中同一时刻有且只有一个线程会执行\",\"Python中的多个线程由于GIL锁的存在无法利用多核CPU\",\"Python中的多线程不适合计算密集型的程序\",\"CPython 中使用多线程很容易，但它并不是真正的并发，多进程虽然是并发的，但开销却极大。\"]},\"278\":{\"h\":\"Abstract\"},\"279\":{\"h\":\"Why Coroutiones\",\"t\":[\"Python 的多线程不能利用多核CPU\",\"因为 GIL（全局解释器锁）, python 只有一个 GIL, 运行时只有拿到这个锁才能执行，同一时间只有一个获得 GIL 的线程在跑，其他线程都在等待状态。\",\"相当于每个 CPU 在同一时间只能执行一个线程。\"]},\"280\":{\"h\":\"计算密集和I/O 密集\",\"t\":[\"计算密集型也叫 CPU 密集型，主要特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU 执行任务的效率就越低，所以，要最高效地利用 CPU，计算密集型任务同时进行的数量应当等于 CPU 的核心数。计算密集型任务由于主要消耗 CPU 资源，因此，代码运行效率至关重要。Python 这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用 C 语言编写。\",\"IO 密集型涉及到网络、磁盘 IO 的任务都是 IO 密集型任务，这类任务的特点就是 CPU 消耗很少，任务大部分时间都在等待 IO 操作完成。\"]},\"281\":{\"h\":\"并发与并行\",\"t\":[\"并发 concurreny 指的是同一时刻只能有一个程序在运行；\",\"并行 parallelism 与并发的区别在于，其强调计算机确实能够在同一时刻做许多不同的事情。\"]},\"282\":{\"h\":\"协程上下文切换\",\"t\":[\"协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈没有内核切换的开销，可以不加锁地访问全局变量，所以上下文的切换非常快。\",\"💁‍♂️对比与进程和线程的调度（上下文切换）：\",\"进程：切换进程上下文，包括分配的内存，数据段，附加段，堆栈段，代码段等\",\"线程：切换线程上下文，主要切换堆栈，以及各寄存器。同一个进程里面不同的线程主要是堆栈不同。\"]},\"283\":{\"h\":\"Python 多线程结论\",\"t\":[\"综上，Python 多线程相当于单核多线程。\",\"多线程有两个好处：CPU 并行，IO 并行，单核多线程无法使用多核 CPU，所以在 Python中不能使用多线程来使用多核。\"]},\"284\":{\"h\":\"multiprocessing\",\"t\":[\"Python 多进程可以使用 multiprocessing 模块。\"]},\"285\":{\"h\":\"基本使用\",\"t\":[\"这是一个基本的例子：\",\"import multiprocessing import time def task(): print('Sleeping for 0.5 seconds') time.sleep(0.5) print('Finished sleeping') if __name__ == \\\"__main__\\\": start_time = time.perf_counter() processes = [] # Creates 10 processes then starts them for i in range(10): p = multiprocessing.Process(target = task) p.start() processes.append(p) # Joins all the processes for p in processes: p.join() finish_time = time.perf_counter() print(f\\\"Program finished in {finish_time-start_time} seconds\\\") \",\"对于可以迭代的对象，可以使用 p.map:\",\"def pattern_all_count_mp(self): all_functions = find_all_functions() p = mp.Pool(8) p.map(self.count_function_pattern_distance_with_others_mp, all_functions) p.close() p.join() \",\"在上面的函数中，我们传入了 list 的 all_functions, 这个迭代器，而函数 count_function_pattern_distance_with_others_mp() 接收的是 function 对象。\",\"对于普通的函数调用，可以这么来写：\",\"def test07(self): # 筛选 ed == 0 的阈值大于 10 的 pattern, len 长度为 6 threshold = 10 file_name = 'dis_count_ed_0_len6.txt' p = multiprocessing.Pool(4) p.apply_async(self.s.filter_data, args=(threshold, file_name, 6, )) # self.s.filter_data(threshold, file_name, 6) p.close() p.join() \",\"为了确保进程都关闭掉了，可以加上try..finally 结构，以确保最后的进程是正常结束了。\"]},\"286\":{\"h\":\"API\",\"t\":[\"join([timeout]),\",\"一般这行代码会放在我们多进程完成以后的最后一句使用。\"]},\"287\":{\"h\":\"ProcessPoolExecutor\",\"t\":[\"除了 multiprocessing 模块之外，我们也可以使用 ProcessPoolExecutor 进行并行程序的执行。\"]},\"288\":{\"h\":\"实例\",\"t\":[\"先举一个在项目中遇到的实例，用于说明 python 多进程程序的运行原理。\",\"我们有一个函数，其需要使用多进程进行运行：\",\"class PatternAllSimilar: def pattern_all(self, not_use=None): #.. function code \",\"需要注意，因为笔者现在还不确定这个使用方式是不是可以不指定给多进行迭代的参数（后文确定了，该接口是必须有这个的），所以定义了一个 not_use 参数，上层会进行传递，但是在函数中不会对其使用。\",\"现在可以使用多进程运行之：\",\"if __name__ == '__main__': logging.basicConfig(stream=sys.stdout, level=logging.INFO) s = PatternAllSimilar() not_use = list(range(10)) with ProcessPoolExecutor(max_workers=8) as pool: for _ in pool.map(s.pattern_all, not_use): pass pool.shutdown(cancel_futures=True) \",\"笔者在调试这个多进程程序的时候，发现其一直不 work，表现在不进入多进程的程序中，程序一闪而过就执行完了，最后找了很多资料，发觉需要注意以下几点：\",\"如果有文件操作，确定指定了正确的文件路径；所以说我们在执行的时候可以使用下面的逻辑来检查文件和 sys.path 的正确性：\",\"if not os.path.exists(s.file_split): logging.error(\\\"The file {} is not exists!!\\\".format(s.file_split)) logging.debug(\\\"sys.path is {}\\\".format(sys.path)) exit(1) # if in __mian__ \",\"确保我们的多进程的相关执行在 __main__ 函数中；\",\"使用 with 语句，并且最后对多进程进行关闭。\"]},\"289\":{\"h\":\"About pool.map\",\"t\":[\"注意\",\"在深入使用了这个接口以后，我发现其并不能很好地适用于所有的并行场景。这种方法要求必须是一个迭代器传入给函数，然后函数负责单一一次的计算，所以说要使用这个接口来进行并行计算的话，是需要传入我们需要计算的迭代器对象的，这就意味着，要传入一个很大的对象，内存此时就不够了。\",\"所以说，这个方法由于上述限制，提升的性能十分有限。\",\"为了解决这个问题，笔者在尝试了很久之后，发现可以使用迭代器去生成大的数组，其中逻辑比较绕，代码如下：\",\" def get_all_pattern_list(self, file=None): if not file: file = self.file_split pattern_list = [] with open(file, 'r') as fs: for idx in range(0, self.get_line_count(fs.name), self.pattern_len): logging.debug('start to get line {} pattern'.format(idx)) lines = linecache.getlines(fs.name)[idx: idx + self.pattern_len] try: ins = [_.split()[1] if _ else 'nop' for _ in lines] yield idx, ins except IndexError: continue \",\"上面函数的作用是读取文件中的每一行，然后从文件中得到一个 pattern, 最后使用 yield 的方式输出。\",\"在多进程的实现函数中，可以这么实现（实现函数每一次处理一个迭代器对象，pattern_tup 包括的内容为 (line_number, pattern), 而上一个函数返回了所有的这些 pattern_tup 的集合：\",\" def get_pattern_similar(self, pattern_tup): line_number, p2 = pattern_tup pattern_count = 0 with open(self.file_split, 'r') as fs: for idx in range(0, self.get_line_count(fs.name), self.pattern_len): logging.debug('start to get line {} pattern'.format(idx)) lines = linecache.getlines(fs.name)[idx: idx + self.pattern_len] try: ins = [_.split()[1] if _ else 'nop' for _ in lines] ed = self.ed.edit_distance_faster(ins, p2) if ed <= self.threshold: pattern_count += 1 except IndexError: continue return pattern_count, line_number, p2 \",\"最后就可以使用这个接口的方式来调用了：\",\"res = collections.defaultdict() start = time.time() with ProcessPoolExecutor(max_workers=worker_count) as pool: with open(s.res_file, 'w+') as f: for items in pool.map(s.get_pattern_similar, s.get_all_pattern_list(file=s.file_split)): count, lineno, pattern = items if lineno and pattern: key = (lineno, ','.join(pattern)) res[key] = count logging.info('pattern {} found a similar, now is {}'.format(key, res.get(key))) line = '{};{};{}\\\\n'.format(key[0], key[1], count) f.writelines(line) \",\"其核心代码为第 5 行，打开文件是为了将结果及时写入到文件中；\",\"我们再仔细看看第 5 行，加深理解：\",\"for items in pool.map(s.get_pattern_similar, s.get_all_pattern_list(file=s.file_split)): \",\"s.get_all_pattern_list(file=s.file_split) 就是迭代器，也是我们接口中需要传入的 not_use, 至此也证明了这个接口中的可迭代对象是必不可少的。\"]},\"290\":{\"h\":\"Crontab\",\"t\":[\"使用 crontab 做定时任务或循环任务。\",\"pip install python-crontab \"]},\"291\":{\"h\":\"时序语法\",\"t\":[\"现在，要安排一个 cron 作业来执行上面的脚本来输出到另一个文件，你需要添加以下代码行：\",\"50 19 * * * python hello.py >> a.txt \",\"上述代码行将文件的标准输出重定向到名为 a.txt 的文件中。要执行命令前面的数字定义了作业的执行时间。时序语法有五个部分：\",\"minute（分钟）\",\"hour（小时）\",\"day of month（月的第几天）\",\"month（月）\",\"day of week（一周的第几天)\",\"时序语法中的星号「*」表示每次都会运行。\"]},\"292\":{\"h\":\"Effective Python\"},\"293\":{\"h\":\"Function Closure\",\"t\":[\"(EP 15)有的时候需要将重要的消息或者意外的事件优先显示在其他内容前面，可以使用以下代码：\",\"def sort_priority(values, group): found = False def helper(x): nonlocal found if x in group: found = True return (0, x) return (1, x) values.sort(key=helper) return found \",\"上述代码把 helper() 这个闭包函数，传给 sort 方法的 key 参数。\",\"思考：第 7 行和第 8 行的 return 的含义？\"]},\"294\":{\"h\":\"Generator\",\"t\":[\"(EP 16)生成器是使用 yield 表达式的函数，为了提高编程效率，考虑用生成器来改写直接返回列表的函数。调用生成器时，会返回迭代器。\",\"在这个例子中的错误示例中，使用 append 把所有的结果都放在列表里面，如果输入量非常大的话，会导致程序消耗尽内存而奔溃。\"]},\"295\":{\"h\":\"Hash Map & Dict\",\"t\":[\"本文主要是总结 Python 中字典和 hash map 的用法。\"]},\"296\":{\"h\":\"Hash Map\",\"t\":[\"背景：以前很擅长写这个，现在记性不太好了，今天练习了一下，写在这里备忘一下。\"]},\"297\":{\"h\":\"Implement\",\"t\":[\"Python 中的 Hash Map 使用方法很多，以后会慢慢复习到，现在先写上基本的实现。\",\"LeetCode 的一个题目涉及到了这个问题：1512. Number of Good Pairs\",\"对于这个题目的实现如下：\",\"class Solution: def numIdenticalPairs(self, nums: 'List[int]') -> int: # 先构建 hash map res = 0 hash_map = dict() for num in nums: res += hash_map.get(num, 0) hash_map[num] = hash_map.get(num, 0) + 1 # hash_map = {1: 3, 2: 1, 3: 2} # 这是构造了一个hash_map return res \",\"具体的完整示例可以参考 GitHub。\"]},\"298\":{\"h\":\"Cache result: pickle\",\"t\":[\"pickle 模块可以把我们只需要一次生成的中间结果缓存起来，比如说 dict, list 都可以进行缓存，下一次直接从这个文件中假造，避免了进一步的分析工作。\",\"import pickle file_name = './output/xxx.pkl' try: with open(file_name, 'rb') as f: self.all_data = pickle.load(f) except FileNotFoundError: for trace_file in os.listdir(self.traces_dir): print('start to parse file ', trace_file) file_path = os.path.join(self.traces_dir, trace_file) self.parse_trace_file(file_path) with open(file_name, 'wb') as f: pickle.dump(self.all_data, f) \"]},\"299\":{\"h\":\"collections.Counter()\",\"t\":[\"这是 python 官方库的实现方式，使用前需要先导入 collections 依赖。\",\"以 leetcode 的 1207 题目举例来说明用法：\",\"# LC 1207 # algorithm/hash_map_2.py class Solution: def uniqueOccurrences(self, arr: 'List[int]') -> bool: arr_dict = {} for n in arr: arr_dict[n] = arr_dict.get(n, 0) + 1 values = list(arr_dict.values()) return len(values) == len(set(values)) import collections class Solution2: def uniqueOccurrences(self, arr: 'List[int]') -> bool: arr_dict = collections.Counter(arr) print(arr_dict.values()) # dict_values([3, 2, 1]) return len(set(arr_dict.values())) == len(arr_dict) arr = [1,2,2,1,1,3] print(Solution().uniqueOccurrences(arr)) print(Solution2().uniqueOccurrences(arr)) \",\"该题目中使用了 collections.Counter() 获得字典，而后通过 .values() 拿到字典中的 value 集合，最后通过将其转化为 set 来判断是否与原有字典长度相等达到解决问题的目的。\"]},\"300\":{\"h\":\"OrderedDict\"},\"301\":{\"h\":\"init\",\"t\":[\"OrderedDict 是 python3 内置的数据结构，其主要存在两个函数可以供我们使用：\",\"move_to_end\",\"popitem\",\"初始化 OrderedDict:\",\"import collections d = collections.OrderedDict.fromkeys('abcde') # 'abcde' d_str = ''.join(d.keys()) \"]},\"302\":{\"h\":\"move_to_end()\",\"t\":[\"使用 move_to_end, 参数 last 指定为 True（默认值），则将特定的元素移动到 dict 的最后面，指定为 False 移动到 dict 的最前面。\",\"# 将 b 移动到最前面 d.move_to_end('b', last=False) # 将 b 移动到最后面, 默认是 true d.move_to_end('b', last=True) \"]},\"303\":{\"h\":\"popitem()\",\"t\":[\"使用 popitem，参数 last 指定为 True（默认值），则移除 dict 中最后的元素，指定为 False 则移除 dict 中最左的元素。\",\"popitem() 默认参数。删除最后的元素！('b', None) 没有了~\",\"之前的 dict 为：OrderedDict([('a', None), ('c', None), ('d', None), ('e', None), ('b', None)])\",\"使用 popitem()：\",\"item_of_b = d.popitem() \",\"将 dict 中的最后一个元素 b 进行了删除，成了 OrderedDict([('a', None), ('c', None), ('d', None), ('e', None)])\",\"popitem(last=False) 。删除最左边的元素！\",\"item_of_a = d.popitem(last=False) \",\"OrderedDict([('a', None), ('c', None), ('d', None), ('e', None), ('b', None)]) --> OrderedDict([('c', None), ('d', None), ('e', None), ('b', None)])\"]},\"304\":{\"h\":\"Sort by dict value\",\"t\":[\"使用如下的方式按照 value 排序：\",\"res_sorted = sorted(res.items(), key=lambda x: -x[1]) return collections.OrderedDict(res_sorted) \",\"其中 res 是未排序的字典，使用 sorted 以后再将其转化为 OrderedDict 就可以实现按照字典的顺序排序了。\"]},\"305\":{\"c\":[\"Python\"]},\"306\":{\"h\":\"I/O\"},\"307\":{\"h\":\"New-Coder Input\",\"t\":[\"牛客网上面刷题时可能用到的多组输入输出：\",\"输入 m, n 两个数：\",\"str_in = input() m, n = [int(_) for _ in str_in.split()] \",\"多组输入，第一行 n 表示数的数量，第二行输入这 n 个数：\",\"n, m = input(), list(map(int, input().split())) \",\"输入有多组数据：\",\"import sys s = sys.stdin.readline().strip() if not s: break \"]},\"308\":{\"h\":\"Format Output\",\"t\":[\"When output, we can use str(), repr() and print(), the different between them could be found in Python3 Tutorial.\",\"The usage of format , one thing to note :\",\"print('{0} and {1}'.format('Google', 'Baidu')) >>> Google and Baidu print('{1} and {0}'.format('Google', 'Baidu')) >>> Baidu and Google print(f'some string') # raw string print('{0:2d} {1:3f}'.format(1,2)) # specifies the length of the placeholder print('{name}: age}'.format(name = 'weigao', age = '18')) >>> weigao: 18 \",\"The % also can be use to format output, but it is an old way, so use it as little as possible.\"]},\"309\":{\"h\":\"Input\",\"t\":[\"Python provides the input() function from the standard input to a line, and the default standard input is the keyboard.\",\"str = input(\\\"please input: \\\") print(\\\"your input is: \\\", str) \",\"In Newcoder programming test, somethings we need custom input, there are some ways for us to reference:\",\"Mutil input and output\",\"例如第一行表示接下来要输入的行数，接下来若干行输入，并且涉及多组输入输出时：\",\"while True:\\n    try:\\n        n = int(input())\\n        lists = [int(input()) for _ in range(n)]\\n        # the code\\n    except:\\n        break\\n\"]},\"310\":{\"h\":\"Itertools\",\"t\":[\"本文主要研究 python 中的 itertools 模块，包括对 more-itertools 的研究工作：\",\"sliding_window, 滑动窗口的实现\",\"主要参考文档为 python 官方文档[1] 和官方 API 文档[2]。\"]},\"311\":{\"h\":\"more-itertools\",\"t\":[\"itertools 除了几个默认的迭代方法之外，还可以使用更多的迭代器 more-itertools, 下面会列举出来源码，可以直接使用源码，也可以使用包来引入。\",\"安装包的命令如下：\",\"pip install more-itertools \"]},\"312\":{\"h\":\"sliding_window\"},\"313\":{\"h\":\"stride 1 sliding\",\"t\":[\"代码实现如下：\",\"def sliding_window(iterable, n): # sliding_window('ABCDEFG', 4) -> ABCD BCDE CDEF DEFG it = iter(iterable) window = collections.deque(islice(it, n), maxlen=n) if len(window) == n: yield tuple(window) for x in it: window.append(x) yield tuple(window) \"]},\"314\":{\"h\":\"grouper: sliding non-overlapping\",\"t\":[\"我们也可以使用固定长度的不 overlap 的方式来进行滑动：\",\"def grouper(iterable, n, *, incomplete='fill', fillvalue=None): \\\"Collect data into non-overlapping fixed-length chunks or blocks\\\" # grouper('ABCDEFG', 3, fillvalue='x') --> ABC DEF Gxx # grouper('ABCDEFG', 3, incomplete='strict') --> ABC DEF ValueError # grouper('ABCDEFG', 3, incomplete='ignore') --> ABC DEF args = [iter(iterable)] * n if incomplete == 'fill': return zip_longest(*args, fillvalue=fillvalue) if incomplete == 'strict': return zip(*args, strict=True) if incomplete == 'ignore': return zip(*args) else: raise ValueError('Expected fill, strict, or ignore') \"]},\"315\":{\"h\":\"example\",\"t\":[\"因为是 API 所以我们可以直接调用，在实战中的演示如下：\",\"def get_all_pattern_pandas(self, file=None): pattern_list = [] visited = list() df = pandas.read_csv(file, header=None, sep='\\\\t') all_lines = df.itertuples() for rows in more_itertools.grouper(all_lines, self.pattern_len, incomplete='ignore'): opcode_list = [get_opcode_from_row(row) for row in rows] yield opcode_list \"]},\"316\":{\"h\":\"nth\",\"t\":[\"这个接口可以返回 iterable 中的 第 n 个元素：\",\"def nth(iterable, n, default=None): \\\"Returns the nth item or a default value\\\" return next(islice(iterable, n, None), default) \"]},\"317\":{\"h\":\"product\",\"t\":[\"返回排列组合：\",\"def product(*args, repeat=1): # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111 pools = [tuple(pool) for pool in args] * repeat result = [[]] for pool in pools: result = [x+[y] for x in result for y in pool] for prod in result: yield tuple(prod) \",\"docs.python.org↩︎\",\"more-itertools↩︎\"]},\"318\":{\"c\":[\"Python\"]},\"319\":{\"h\":\"logging\"},\"320\":{\"h\":\"Abstract\",\"t\":[\"Python 自带了 logging 模块，可以很方便我们进行日志打印。本文章主要总结几个使用该模块的时候需要注意的问题和实战示例。\",\"其基本的使用方法如下：\",\">>> import logging >>> logging.warning('Watch out!') WARNING:root:Watch out! \"]},\"321\":{\"h\":\"Log level\",\"t\":[\"Python 的日志可以分为几个级别：\",\"Task\",\"Level for task\",\"console 级别\",\"print()\",\"events that occur during normal operation of a program\",\"logging.info() or logging.debug()\",\"Issue a warning regarding a particular runtime event\",\"logging.warn()\",\"Report an error\",\"Raise Exception\",\"Report suppression of an error without raising an exception\",\"logging.error() or logging.exception or logging.critical()\",\"The logging functions are named after the level or severity of the events they are used to track. The standard levels and their applicability are described below (in increasing order of severity):\",\"Level\",\"When it’s used\",\"DEBUG\",\"Detailed information, typically of interest only when diagnosing problems.\",\"INFO\",\"Confirmation that things are working as expected.\",\"WARNING\",\"An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.\",\"ERROR\",\"Due to a more serious problem, the software has not been able to perform some function.\",\"CRITICAL\",\"A serious error, indicating that the program itself may be unable to continue running.\",\"The default level is WARNING, which means that only events of this level and above will be tracked, unless the logging package is configured to do otherwise.\",\"​\"]},\"322\":{\"h\":\"Logging to a file\"},\"323\":{\"h\":\"to file\",\"t\":[\"如果我们想将日志打印到文件中，则需要进行日志的配置，配置的方法如下：\",\"import logging logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG) \",\"注意到这个配置只需要配置一次就全局生效了，具体来说，只有第一的调用是生效了的。\"]},\"324\":{\"h\":\"to console\",\"t\":[\"如果我们想打印到控制台的话，可以使用如下的配置：\",\"logging.basicConfig(stream=sys.stdout, level=logging.INFO) \",\"💚💚💚在命令行中指令日志的打印级别\",\"可以使用 --log=INFO 来制定日志的打印级别。\"]},\"325\":{\"h\":\"Logging Format\",\"t\":[\"在使用 logging 模块的时候，遇到了要打印多个参数但是报错的问题，针对这个问题，我们使用标准的 format 语法，可以避免错误，如下：\",\"logging.info('pattern {} similar res is {}, write to file...'.format(pattern_1, res)) \",\"相比于 %d 的方式，上述的方式较新。\"]},\"326\":{\"h\":\"Logging in different plarform\",\"t\":[\"我们可以同一套代码在不同的平台使用不同的日志配置，如下所示：\",\"if platform.system() == 'Linux': logging.basicConfig(filename='wechat_sendmessage_st_021.log', level=logging.INFO) logging.info('you are in linux, confining the linux sys config...') s.file_split = '/srv/workspace/workcode/tmpfile/wechat_sendmessage_st_021.txt' worker_count = 8 else: logging.basicConfig(stream=sys.stdout, level=logging.DEBUG) logging.info('you are in windows, confining the windows sys config...') s.file_split = '../../oat/trace_converted/wechat_sendmessage_st_021.txt' worker_count = 4 \",\"上面代码，我们在 windows 环境下面使用控制台输出，而在 Linux 下面使用文件输出。\"]},\"327\":{\"h\":\"Pandas\",\"t\":[\"本文主要研究 pandas, 主要是一些常见的用法和笔记。\"]},\"328\":{\"h\":\"DataFrame\",\"t\":[\"DataFrame 是 pandas 中常用的数据结构，掌握其用法对整体 pandas 使用的理解十分重要。\"]},\"329\":{\"h\":\"read_csv()\",\"t\":[\"💚💚💚 不只是可以读 csv 哦。\",\"在实际场景中，笔者存在一个需要读取大的 txt 文件的操作，使用 read_csv() 接口可以实现这个功能，在项目中的示例代码如下所示：\",\"import pandas as pd def get_all_pattern_pandas(self, file=None): df = pd.read_csv(file, header=None, sep='\\\\t') all_lines = df.itertuples() for rows in more_itertools.grouper(all_lines, self.pattern_len, incomplete='ignore'): pass \",\"上述代码中有些细节需要注意：\",\"pd.read_csv() 返回了 df 对象；我们传入了 header=None 可以使得不产生制表的 header, 而 sep='\\\\t' 就是分割 txt 文件常用的分割符\",\"df.itertuples() 可以产生 df 的迭代器对象，是比较快速的迭代方法\",\"more_itertools.grouper() 是滑动窗口的接口，可以参考 <Itertools> 那篇文章\"]},\"330\":{\"h\":\"Example\"},\"331\":{\"h\":\"获取某列的数据\",\"t\":[\"我们有时候可能只需要获取某一列的数据，其用法如下：\",\"df = pd.read_csv(self.s.application_log_file, sep=' ', usecols=[16]) print(df.value_counts().sort_values(ascending=False)) df.value_counts().sort_values(ascending=False).to_frame().to_html('tiktok.html') \",\"在例子中，我们使用空格进行分割，然后拿到第 16 列的数据；注意经过测试，这个数组是不能指定 -1 等值的，只能从前往后开始数。\"]},\"332\":{\"c\":[\"Python\"]},\"333\":{\"h\":\"pip\"},\"334\":{\"h\":\"临时指定\",\"t\":[\"pip install pythonModuleName -i https://pypi.douban.com/simple \"]},\"335\":{\"h\":\"永久指定\"},\"336\":{\"h\":\"windows\",\"t\":[\"在 c:/windows/user/your-name/pip/ 下，新建文件 pip.ini:\",\"[global] trusted-host=mirrors.tools.huawei.com index-url=http://mirrors.tools.huawei.com/pypi/simple/ \",\"如果找不到这个文件夹，就新建一个。\",\"在有些 winodws 电脑中，可能不是这个文件夹，那么快速找到这个文件夹的方法是：在 windows 的资源管理器中输入 %APPDATA%, 会跳转到一个文件夹下，然后在这个文件夹下面新建 pip 文件夹，然后新建 pip.ini 文件，输入一下内容：\",\"[global] timeout = 6000 index-url = https://pypi.douban.com/simple trusted-host = pypi.douban.com \"]},\"337\":{\"h\":\"Linux\",\"t\":[\"在 ~/.pip/ 下创建 pip.conf:\",\"[global] \\ntrusted-host=mirrors.tools.huawei.com\\nindex-url=http://mirrors.tools.huawei.com/pypi/simple/ \\n\"]},\"338\":{\"h\":\"Python Data Struct\"},\"339\":{\"h\":\"Slicing\",\"t\":[\">>> s = 'bicycle' >>> s[3:] 'ycle' >>> s[:3] 'bic' >>> s[::3] 'bye' >>> s[::-1] 'elcycib' \",\"If you want to reverse a string, the last example is a choice.\",\"assigning to slices\",\">>> l = list(range(10)) >>> l [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] >>> l[2:5] [2, 3, 4] >>> l[2:5] = [20,30] >>> l [0, 1, 20, 30, 5, 6, 7, 8, 9] \",\"what you can see is that [2,3,4] is replaced by [20,30]\"]},\"340\":{\"h\":\"List\",\"t\":[\"list of list\",\">>> board = [['_'] * 3 for i in range(3)] >>> board [['_', '_', '_'], ['_', '_', '_'], ['_', '_', '_']] >>> board[1][2] = 'x' >>> board [['_', '_', '_'], ['_', '_', 'x'], ['_', '_', '_']] \",\"The first line is the right way to multiply it,rather than:\",\">>> wrong_board = [['_'] * 3] * 3 >>> wrong_board[1][2] = 0 >>> wrong_board [['_', '_', 0], ['_', '_', 0], ['_', '_', 0]] \",\"list.sort() & sorted(list)\",\"The list.sort() method sorts a list in-place, that is, without making a copy.\",\"In contrast, the built-in function sorted(list) creates a new list and returns it.\",\"找到列表中每一行的最大元素和每一列的最大元素\",\" row = len(heights) col = len(heights[0]) max_row = [0] * row max_col = [0] * col for i in range(row): max_row[i] = max(heights[i]) for j in range(col): for i in range(row): max_col[j] = max(heights[i][j], max_col[j]) \"]},\"341\":{\"h\":\"sort and sorted\",\"t\":[\"skill\",\"在对 list 排序时， 可以使用 sorted() 或者 sort() + deepcopy() 两种方式\",\"example code\",\"sorted()\",\"descending order (降序)\",\"def max_n(lst, n=1, reverse=True): return sorted(lst, reverse=reverse)[:n] \",\"sort() + deepcopy()\",\"ascending order (升序)\",\"from copy import deepcopy def min_n(lst, n=1): numbers = deepcopy(lst) numbers.sort() return numbers[:n] \",\"make list a stack or queue\",\"The .append and .pop methods make a list usable as a stack or a queue (if you use .append and .pop(0), you get LIFO, Last in First out, behavior).\",\"But inserting and removing from the left of a list (the 0-index end) is costly because the entire list must be shifted.\",\"deques and queues\",\"from collections import deque dq = deque(range(10), maxlen=10) # dq: deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10) dq.rotate(3) # [7, 8, 9, 0, 1, 2, 3, 4, 5, 6] # this function rotates items from the right end # and when dp.rotate(-3) is from the left dq.appendleft(-1) # [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9] dq.extend([11, 22, 33]) # [3, 4, 5, 6, 7, 8, 9, 11, 22, 33] # default is insert from right \",\"What is different between append() and extend()? here is an example:\",\">>> dp # deque([10, 30, 20, 10, 3, 4, 5, 6, 7, 8], maxlen=10) >>> dp.appendleft([1, 2]) # deque([[1, 2], 10, 30, 20, 10, 3, 4, 5, 6, 7], maxlen=10) >>> dp.extendleft([1, 2]) # deque([2, 1, [1, 2], 10, 30, 20, 10, 3, 4, 5], maxlen=10) \",\"Note that extendleft(iter) works by appending each successive item of the iter argument to the left of the deque, therefore the final position of the items is reversed.\"]},\"342\":{\"h\":\"Bisect\",\"t\":[\"#bisect: [baɪ'sɛkt]\",\"Bisection is the general activity of dividing a geometric figure into two equal parts\"]},\"343\":{\"h\":\"Set\",\"t\":[\"Python 的集合是一个十分方便的对于元素可以操作的序列，除了去掉重复元素外，还可以进行稽核之间的运算。\",\"student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'} print(student) # 输出集合，重复的元素被自动去掉 a = set('abracadabra') b = set('alacazam') print(a - b) # a 和 b 的差集 print(a | b) # a 和 b 的并集 print(a & b) # a 和 b 的交集 print(a ^ b) # a 和 b 中不同时存在的元素 \",\"set 的集合运算十分有用，看下面的代码：\",\"class Solution: def findWords(self, words): \\\"\\\"\\\" :type words: List[str] :rtype: List[str] \\\"\\\"\\\" a = set('qwertyuiop') b = set('asdfghjkl') c = set('zxcvbnm') ans = [] for word in words: w = set(word.lower()) if (w & a == w) or (w & b == w) or (w & c == w): ans.append(word) return ans \",\"上述代码实现了一个求解某序列是否在键盘的同一行的操作，通过求交集看是否结果等于自身就可以很方便地求解出结果。\"]},\"344\":{\"h\":\"set usage\",\"t\":[\"使用 set 一般用于 判断一个值是否存在其中\",\"when to keep elements sorted and unique.\",\"Example: 忽略常见单词，只对不在集合中的单词统计出现次数：\",\"set<string> exclude = {\\\"some\\\", \\\"words\\\"}; //code if(exclude.find(word) == exclude.end()) { //code } \",\"对比如果使用 vector 实现：\",\"vector<string> exclude = {\\\"some\\\", \\\"words\\\"};\\n//code\\nauto is_exclude = std::binary_search(exclude.cbegin(), exclude.cend(), word);\\n//bool binary_search()\\nauto reply = is_exclude ? \\\"excluded\\\" : \\\"not excluded\\\";\\n\"]},\"345\":{\"h\":\"Python File\",\"t\":[\"本文主要研究 Python 文件操作。\",\"打开大文件的工具\",\"很多时候，自带的工具打开大文件是很慢的，我们可以使用 EmEditor 工具，免费版还是很好用的。\"]},\"346\":{\"h\":\"File API\"},\"347\":{\"h\":\"exists\",\"t\":[\"可以使用如下的逻辑来判断我们的函数是否存在：\",\"if not os.path.exists(s.file_split): logging.error(\\\"The file {} is not exists! please check your path!\\\".format(s.file_split)) logging.debug(\\\"sys.path is {}\\\".format(sys.path)) exit(1) # if in __main__ \"]},\"348\":{\"h\":\"listdir()\",\"t\":[\"很多时候我们需要遍历一个文件夹下面的所有文件，可以这样实现：\",\"file_dir = r'' for anr_file in os.listdir(file_dir): parse_anr(anr_file) \",\"😭😭😭 BUG\",\"切记 anr_file 最好传入文件的路径，而不是文件名本身。\",\"for anr_file in os.listdir(file_dir): file_path = os.path.join(file_dir, anr_file) parse_anr(file_path) \",\"在这个地方进行一个对比，以便于引起注意。\"]},\"349\":{\"h\":\"Rename Folder\",\"t\":[\"如果想对文件进行重命名的话，可以使用 os.rename(), 下面这是一个例子：\",\"import os new_folder_name = r\\\"anr/anr_{}\\\".format(time.strftime(\\\"%Y%m%d_%H%M_%S\\\")) os.rename(r\\\"anr/anr\\\", new_folder_name) \",\"在这个例子中，我们使用了时间戳，命名后的文件类似于: anr/anr_20230303_1115_14。\"]},\"350\":{\"h\":\"File path\"},\"351\":{\"h\":\"windows\",\"t\":[\"在 windows 下面，python 的路径可以有以下的写法：\",\"使用双下划线避免转码问题；\",\"使用 r'xxx' 可以避免双下划线；这种做法的优点在于，可以直接复制文件的路径使用；\",\"os.path 模块的使用；\"]},\"352\":{\"h\":\"Linux\",\"t\":[\"window 下的路径如果继续想在 linux 下面使用，可以使用两种方式：\",\"os.step 模块；这个保证了下划线是可以和操作系统匹配的\",\"os.path 模块；\",\"import os path = os.path.join('folder_name', 'file_name') \"]},\"353\":{\"h\":\"linecache\",\"t\":[\"linecache 是 Python 3.10 自带的文件处理模块。\"]},\"354\":{\"h\":\"linecache.getline()\",\"t\":[\"linecache 可以用来指定行号，然后读取这一行的元素。\",\">>> import linecache >>> linecache.getline(linecache.__file__, 8) 'import sys\\\\n' \",\"😂😂😂 需要注意的是，8 表示第 9 行元素，linecache 取值默认从 0 开始。\",\"这个函数会返回文件对应的这行结果，举例来说：\",\"def get_line_content_by_line_num(self, line_num=None): # 参数校验 if not line_num and self._line_num == -1: print('give a line num!') return if not line_num: line_num = self._line_num content = linecache.getline(self.file, line_num) return content \",\"对应的测试用例和输出：\",\"def test01(self): line_num = 7187 res = self.s.get_line_content_by_line_num(line_num) print(res) # [TID 003c7e] I/ecmascript: 0000541c:aa1003f5 mov x21, x16 \",\"需要注意的一个小细节是，getline()函数，而不是 getlines(), 这两个的功能是不一样的。\"]},\"355\":{\"h\":\"linecache.getlines()\",\"t\":[\"getlines() 可以用来获取这个文件的所有行，我们也可以根据这个函数来获取范围行的元素，如下所示：\",\"with open(self.file, 'r') as f: for i, line in enumerate(f): file_lines = linecache.getlines(self.file)[i:i + n] \"]},\"356\":{\"h\":\"mutil lines\",\"t\":[\"with open(self.file, 'r') as f: for idx, line in enumerate(f, 1): ops = [] for j in range(n): next_line = linecache.getline(f.name, idx + j) if next_line.strip(): ops.append(next_line.split()[1]) \",\"目前得到文件中的连续行用该方法比较不错。比较 linecache.getlines() 更不容易出 bug, 但是为了方便起见，我们还是有限使用 linecache.getlines() 来取值。\"]},\"357\":{\"h\":\"line after match xx\",\"t\":[\"代码找到匹配行开始往下数的第 xx 行注意是单独的一行！，例子为第 4 行(find the header then just take the next xx lines)。\"]},\"358\":{\"h\":\"No.1 - itertools.islice\",\"t\":[\"from itertools import islice with open(\\\"words.txt\\\") as f: for line in f: if line.rstrip() == \\\"Heading\\\": print(list(islice(f, 4))[-1]) break line to be extracted \",\"需要注意，这种方法可能会使得迭代以外终止，所以不是很好用，等以后加深理解了再研究吧！\"]},\"359\":{\"h\":\"No.2 - linecache.getline\",\"t\":[\"from linecache import getline with open(\\\"words.txt\\\") as f: for ind, line in enumerate(f,1): if line.rstrip() == \\\"Heading\\\": print(getline(f.name, ind + 4)) break line to be extracted \"]},\"360\":{\"h\":\"No.3 - linecache.getline\",\"t\":[\"mutils lines, don't break.\",\"from linecache import getline with open(\\\"words.txt\\\") as f: for ind, line in enumerate(f,1): if line.rstrip() == \\\"Heading\\\": print(getline(f.name, ind + 4)) line to be extracted other line to be extracted \",\"小技巧：使 line 的编号从 1 开始\",\"我们在 python 的文件处理中，很多时候行号都是从 0 开始的，上面代码中使用了 enumerate(f,1) 来方便了我们的操作，值得借鉴！\",\"其原理可以大概解释如下：\",\"l = list(range(12, 99)) for i, num in enumerate(l, 1): print(i, num) 1 12 2 13 3 14 4 15 \",\"只是把下标变成了从 1 开始，但是并没有跳过第一个元素哦。\"]},\"361\":{\"h\":\"File Rights\",\"t\":[\"模式\",\"操作\",\"文件不存在\",\"是否覆盖\",\"r\",\"read 只读\",\"报错\",\"-\",\"w\",\"write 可写\",\"创建\",\"是\",\"a\",\"append 文件后追加\",\"创建\",\"否 追加\",\"r+\",\"可读 可写\",\"报错\",\"是\",\"w+\",\"可读 可写\",\"创建\",\"是\",\"a+\",\"可读 可写\",\"创建\",\"否 追加\",\"a 是可访问可修改的吗？ 不是。a表示在文件后追加写，append。a+ 既可以追加到文件中，也可以读取文件中的内容，而 a 是不可以读操作的。\",\"BCD fopen() 手册\",\"The argument mode points to a string beginning with one of the following sequences (Additional characters may follow these sequences.):\",\"r Open text file for reading. The stream is positioned at the beginning of the file.\",\"r+ Open for reading and writing. The stream is positioned at the beginning of the file.\",\"w Truncate file to zero length or create text file for writing. The stream is positioned at the beginning of the file.\",\"w+ Open for reading and writing. The file is created if it does not exist, otherwise it is truncated. The stream is positioned at the beginning of the file.\",\"a Open for writing. The file is created if it does not exist. The stream is positioned at the end of the file. Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening fseek(3) or similar.\",\"a+  Open for reading and writing.  The file is created if it does not exist.  The stream is positioned at the end of the file.  Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening fseek(3) or similar.\"]},\"362\":{\"c\":[\"Python\"]},\"363\":{\"c\":[\"python\",\"file\"]},\"364\":{\"h\":\"Python Tools\"},\"365\":{\"h\":\"IPython\",\"t\":[\"pip install jupyter jupyter notebook \"]},\"366\":{\"h\":\"%timeit\",\"t\":[\"In IPython, we could use %timeit to calculate the time consume of a command:\",\"In [1]: %timeit [1, 2, 3, 4, 5] In [2]: %timeit (1, 2, 3, 4, 5) \"]},\"367\":{\"h\":\"Personalized\",\"t\":[\"import sys sys.ps1 '>>>' sys.ps1 = 'cwg-python>>' \",\"这样就可以改变解释器前面的那个外观了，注意修改后退出不会保存修改的结果。\"]},\"368\":{\"h\":\"File Server\",\"t\":[\"python -m http.server\\n#default port: 8000\\n\\npython -m http.server 80\\n#in port 80\\n\"]},\"369\":{\"h\":\"Pytest\",\"t\":[\"总结一下 Pytest 和 Python Unitest 相关的基础用法和学习心得。\",\"Pytest 的官方文档\"]},\"370\":{\"h\":\"Pytest 入门\"},\"371\":{\"h\":\"捕获异常\",\"t\":[\"使用 pytest.raise() 来捕获异常。\",\"# 官方示例 # test_raises.py def test_raises(): with pytest.raises(TypeError) as e: connect('localhost', '6379') exec_msg = e.value.args[0] assert exec_msg == 'port type must be int' \"]},\"372\":{\"h\":\"标记函数 pytest.mark\",\"t\":[\"默认情况下，pytest 会递归查找当前目录下所有以 test 开始或结尾的 Python 脚本，并执行文件内的所有以 test 开始或结束的函数和方法。\",\"标记函数的作用是在某些情况下，我们只想执行指定的测试函数，所以可以使用 ptest.mark 进行标记。\",\"# 官方示例 # test_with_mark.py @pytest.mark.finished def test_func1(): assert 1 == 1 @pytest.mark.unfinished def test_func2(): assert 1 != 1 \",\"然后在命令行中使用 -m 选择标记的函数：\",\"pytest -m finished test_with_mark.py pytest -m \\\"finished and commit\\\" \",\"一个函数可以打多个标记，多个函数也可以打相同的标记；具体多个标记的执行如上代码所示。\",\"提示\",\"除此之外，pytest 还有一些其他的方法可以指定要测试的具体函数，如 ::: 标记和 -k 模糊匹配等，不太常用，具体用法可以参考官方文档。\"]},\"373\":{\"h\":\"跳过测试 pytest.mark.skip\",\"t\":[\"可以使用标记 pytest.mark.skip 来指定要跳过的测试，具体用法如下：\",\"标记要跳过的函数\",\"# test_skip.py @pytest.mark.skip(reason='out-of-date api') def test_connect(): pass # test_skip.py s [100%] \",\"执行后命令行显示 s 就表示测试被跳过(SKIPPED)。\",\"指定被忽略的条件\",\"@pytest.mark.skipif(conn.__version__ < '0.2.0', reason='not supported until v0.2.0') def test_api(): pass \"]},\"374\":{\"h\":\"预见的错误 pytest.mark.xfail\",\"t\":[\"如果我们事先知道测试函数会执行失败，但又不想直接跳过，而是希望显式地提示。\",\"此时可以使用 pytest.mark.xfail 实现预见错误功能：\",\"# test_xfail.py @pytest.mark.xfail(gen.__version__ < '0.2.0', reason='not supported until v0.2.0') def test_api(): id_1 = gen.unique_id() id_2 = gen.unique_id() assert id_1 != id_2 # pytest test_xfail.py # test_xfail.py x [100%] \",\"执行后命令行显示 x 就表示预见的失败(XFAIL)。\",\"需要注意，如果提示大写的 X, 则说明预见的是失败，但实际运行测试却成功通过(XPASS)。\"]},\"375\":{\"h\":\"参数化 pytest.mark.parametrize\",\"t\":[\"参数化测试可以保证每组参数都独立进行一次测试，比如关于不同密码返回不同结果要如何测试，示例代码如下：\",\"# test_parametrize.py @pytest.mark.parametrize('passwd', ['123456', 'abcdefdfs', 'as52345fasdf4']) def test_passwd_length(passwd): assert len(passwd) >= 8 \",\"这段代码总共可以进三次测试，如返回 F..。\",\"除此之外，还可以传入多组参数进行参数化校验，并且使用 pytest.param 的 id 参数进行自定义，这样就能很方便地查看是哪个参数通过，哪个没通过。\",\"# test_parametrize.py @pytest.mark.parametrize('user, passwd', [pytest.param('jack', 'abcdefgh', id='User<Jack>'), pytest.param('tom', 'a123456a', id='User<Tom>')]) def test_passwd_md5_id(user, passwd): db = { 'jack': 'e8dc4081b13434b45189a720b77b6818', 'tom': '1702a132e769a623c1adb78353fc9503' } import hashlib # abcdefgh = e8dc4081b13434b45189a720b77b6818 assert hashlib.md5(passwd.encode()).hexdigest() == db[user] \"]},\"376\":{\"h\":\"fixture 固件\",\"t\":[\"主要为 fixture 固件相关的操作。\"]},\"377\":{\"h\":\"fixture 定义\",\"t\":[\"fixture 在 pytest 中表现为一个装饰器，在 JAVA 中，fixture 是这么定义的：\",\"JUnit 提供了编写测试前准备、测试后清理的固定代码，我们称之为 Fixture。\",\"在 pytest 中，固件的作用是在执行测试函数之前（或之后）加载运行的函数；我们可以使用固件做任何事情。\",\"# test_postcode.py @pytest.fixture() def postcode(): return '010' def test_postcode(postcode): assert postcode == '010 \",\"这种是在测试脚本中直接使用固件的例子，一般而言，如果我们希望固件可以在更大程度上服用，可以对固件进行集中管理。\",\"pytest 使用 conftest.py 集中管理固件。\",\"pytest 官方提示\",\"在复杂的项目中，可以在不同的目录层级定义 conftest.py，其作用域为其所在的目录和子目录。\"]},\"378\":{\"h\":\"预处理和后处理\",\"t\":[\"pytest 使用 yield 关键词将固件分为两个部分，其之前的代码属于预处理，之后的代码属于后处理。\",\"可以使用 -s 参数阻止消息被吞，使用 --setup-show 选项跟踪更细额固件执行。\",\"$ pytest -s test_demo.py $ pytest --setup-show test_demo.py \"]},\"379\":{\"h\":\"作用域\",\"t\":[\"作用域可以用来指定固件的作用范围，默认的作用域为 function。\",\"@pytest.fixture(scope='function') def func_scope(): pass @pytest.fixture(scope='module') def mod_scope(): pass @pytest.fixture(scope='session') def sess_scope(): pass @pytest.fixture(scope='class') def class_scope(): pass \",\"可以看出，上面的作用域作用于函数，要是想对类使用作用域，如下：\",\"# test_scope.py @pytest.mark.usefixtures('class_scope') class TestClassScope: def test_1(self): pass def test_2(self): pass \",\"pytest 作用域，官方文档\",\"在定义固件时，通过 scope 参数声明作用域，可选项有：\",\"function: 函数级，每个测试函数都会执行一次固件；\",\"class: 类级别，每个测试类执行一次，所有方法都可以使用；\",\"module: 模块级，每个模块执行一次，模块内函数和方法都可使用；\",\"session: 会话级，一次测试只执行一次，所有被找到的函数和方法都可用。\"]},\"380\":{\"h\":\"自动执行\",\"t\":[\"在定义固件时指定 autouse 参数，即可让固件自动执行。\",\"如可以在测试时统计测试的耗时，下面是两个自动计时固件，一个用于统计每个函数运行时间（function 作用域），一个用于计算测试总耗时（session 作用域）：\",\"<<< @/docs/.vuepress/code/demo/pytest_autouse_demo.py\"]},\"381\":{\"h\":\"重命名\",\"t\":[\"固件的默认名称为定义时的函数名，可以通过 name 选项指定名称：\",\"# test_rename.py @pytest.fixture(name='age') def calculate_average_age(): return 28 def test_age(age): assert age == 28 \"]},\"382\":{\"h\":\"参数化\",\"t\":[\"固件参数化结合了前面 pytest 参数化的用法。\",\"与函数参数化使用 @pytest.mark.parametrize 不同，固件在定义时使用 params 参数进行参数化。\",\"固件参数化需要使用 pytest 内置的固件 request，并通过 request.param 获取参数。\",\"使用 pytest 的固件参数化连接两个不同数据库的示例如下所示：\",\"@pytest.fixture(params=[ ('redis', '6379'), ('elasticsearch', '9200') ]) def param(request): return request.param @pytest.fixture(autouse=True) def db(param): print('\\\\nSucceed to connect %s:%s' % param) yield print('\\\\nSucceed to close %s:%s' % param) def test_api(): assert 1 == 1 \\\"\\\"\\\" tests\\\\fixture\\\\test_parametrize.py Succeed to connect redis:6379 . Succeed to close redis:6379 Succeed to connect elasticsearch:9200 . Succeed to close elasticsearch:9200 \\\"\\\"\\\" \",\"这边的操作使用固件抽离出数据库的通用操作，使得每个 API 都能复用这些数据库固件，同时也提高了可维护性。\",\"TODO\",\"这边可以考虑使用固件的参数化进行代码重构，精简代码\"]},\"383\":{\"h\":\"内置固件\",\"t\":[\"pytest 中有很多实用的内置固件，在这记录一下，具体可以查阅官方文档。\",\"tmpdir & tmpdir_factory：\",\"使用 tmpdir.mkdir() 创建目临时录，tmpdir.join() 创建临时文件（或者使用创建的目录）。\",\"pytestconfig\",\"使用 pytestconfig，可以很方便的读取命令行参数和配置文件。(conftest.py 中使用函数 pytest_addoption, 通过 pytestconfig 获取命令行参数)\",\"capsys\",\"capsys 用于捕获 stdout 和 stderr 的内容，并临时关闭系统输出。\",\"monkeypatch\",\" monkeypath 用于运行时动态修改类或模块。\",\"TODO\",\"这个很重要，需要好好理解，看以后是否有用：https://learning-pytest.readthedocs.io/zh/latest/doc/fixture/builtin-fixture.html\",\"recwarn\",\"recwarn 用于捕获程序中 warnings 产生的警告。\"]},\"384\":{\"h\":\"单元测试\"},\"385\":{\"h\":\"基本例子\",\"t\":[\"举个基本的用例：\",\"import unittest class WidgetTestCase(unittest.TestCase): def setUp(self): self.widget = Widget('The widget') def test_default_widget_size(self): self.assertEqual(self.widget.size(), (50,50), 'incorrect default size') def test_widget_resize(self): self.widget.resize(100,150) self.assertEqual(self.widget.size(), (100,150), 'wrong size after resize') def tearDown(self): self.widget.dispose() if __name__ == '__main__': unittest.main() \"]},\"386\":{\"h\":\"skip 测试用例\",\"t\":[\"以下内容均可以跳过：\",\"class Test(unittest.TestCase): @unittest.skip(\\\"skip it\\\") def test_1(self): print('1') @unittest.skipIf(1 < 2, '前面条件成立，跳过') def test_2(self): print('2') @unittest.skipUnless(1 > 2, '前面条件为 False 跳过') def test_3(self): print('3') \"]},\"387\":{\"h\":\"DDT 数据驱动\",\"t\":[\"DDT: Data Drive Test\",\"import unittest from ddt import ddt from ddt import data @ddt class DdtTest(unittest.TestCase): def setUp(self) -> None: print('start...') def tearDown(self) -> None: print('end!') @data('a', 'b', 'c') def test_1(self, txt): print(txt) if __name__ == '__main__': unittest.main(verbosity=2) \\\"\\\"\\\" start... a end! start... b end! start... c end! \\\"\\\"\\\" \",\"从上面的例子中，有几点需要注意的：\",\"setUp 和 tesrDown 这两个在每一次测试用例执行的时候都会执行一遍。所以可以看到，我们使用数据驱动了 3 个测试用例，这两个也被执行了三次。\",\"也可以将测试的数据用在文件中，然后使用文件读取的方式进行读取，而后 unpack，其使用的方式类似于：\",\"@file_data('ddt.xml') def test_xx(self, txt): print(txt) \",\"如果需要 unpack 的话，就如下所示：\",\"# coding=UTF-8 import unittest import ddt def read_file(): params = [] file = open('test.txt', 'r', encoding='gbk') for line in file.readlines(): params.append(line.strip('\\\\n').split(',')) return params @ddt.ddt() class Test(unittest.TestCase): def setUp(self) -> None: print('start...') def tearDown(self) -> None: print('end!') @ddt.data(*read_file()) @ddt.unpack def test_1(self, id, name): print(id, name) if __name__ == '__main__': unittest.main() \",\"给出要读取文件的内容：\",\"test.txt\",\"1,name1 2,zhanshen 3,wait \"]},\"388\":{\"h\":\"DDT + YML\",\"t\":[\"Python 安装 yml 扩展\",\"pip install PyYaml\",\"可以配合 DDT 和 YML 文件来实现数据驱动：\",\"YML 的文件定义不同，在 Python 中解析出来的结果也不同：\",\"嵌套的字典\",\"列表\",\"分别进行说明：\",\"字典\",\"dicts.yml 的格式如下所示：\",\"<<< @/docs/.vuepress/code/python/dicts.yml\",\"如果使用 Python 进行解析的话，代码可以如下所示：\",\"# coding=UTF-8 import yaml def read_file(): file = open('dicts.yml', 'r', encoding='utf-8') dic = yaml.load(file, Loader=yaml.FullLoader) print(dic) \",\"会输出一个字典：{'name': 'weigao', 'age': 24, 'data': {'a': 1, 'b': 2, 'c': 3, 'd': 4}, 'list': ['a', 'b', 'c', 'd']}\",\"方便观看，转换成 JSON：\",\"<<< @/docs/.vuepress/code/python/dicts.json\",\"列表\",\"其解析如下所示：\",\"import unittest import ddt @ddt.ddt class Test(unittest.TestCase): def setUp(self) -> None: print('start...') def tearDown(self) -> None: print('end!') @ddt.file_data('list.yml') def test_yml(self, **kwargs): print(kwargs['name'], kwargs['age']) if __name__ == '__main__': unittest.main() \",\"list.yml 的文件内容为：\",\"<<< @/docs/.vuepress/code/python/list.yml\",\"可以解析出来，输出如下：\",\"start...\\nweigao 24\\nend!\\nstart...\\nzhanshen 10089\\nend!\\n\"]},\"389\":{\"h\":\"High-level Function\"},\"390\":{\"h\":\"str.maketrans()\",\"t\":[\"用于创建字符映射的转换表，接收两个字符串参数，第一个参数表示需要转化的字符，第二个参数表示转换的目标。\",\"in_tab = 'aeiou' out_tab = '12345' tran_tab = str.maketrans(in_tab, out_tab) # tran_tab: {97: 49, 101: 50, 105: 51, 111: 52, 117: 53} str_test = \\\"this is string example....wow!!!\\\" str_test.translate(tran_tab) # th3s 3s str3ng 2x1mpl2....w4w!!! \",\"注意到 str.maketrans() 可以存在第三个参数，其必须为一个字符串，比如 string.punctuation(表示所有的标点符号), 在指定了第三个参数以后，第三个字符串中所有的字符(对应为其 ASCII 码 ord())都会在 tran_tab 字典中被映射为 None, 实现的作用为在 translate() 时可以去掉字符串中所有的标点(结果会变成 'th3s 3s 1n 2x1mpl2w4w')\",\"LeetCode 上有题目可以使用该方法求解回文子串，具体可以参考代码\"]},\"391\":{\"h\":\"Python import string\",\"t\":[\"import string dir(string) \",\"可以查看 string 的所有参数，然后使用它：\",\"string.punctuation: 所有的标点符号...等使用方法;\",\"string.ascii_letters: 所有的大小写字母；\",\"string.digits: 所有的数字。\"]},\"392\":{\"h\":\"count()\",\"t\":[\"用于统计字符串里某个字符出现的次数 count() 方法，语法：\",\"str.count(sub, start=0, end=len(string)) \",\"sub -- 搜索的子字符串。\",\"start -- 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。\",\"end -- 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。\",\"该方法返回子字符串在字符串中出现的次数。\",\"理解下面这行代码所实现的功能：\",\"return sum(map(S.count, J)) return not sum(map(({'R': 1, 'L': -1, 'U': 1j, 'D': -1j}).get, moves)) \",\"第一行代码实现了两个字符串中共同字符的计数。\",\"第二行代码实现了一个计算坐标的方法。\"]},\"393\":{\"h\":\"map()\",\"t\":[\"map() 会根据提供的函数对指定序列做映射。\",\"第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。\",\"map() 函数语法：\",\"map(function, iterable, ...) \",\"function -- 函数，有两个参数\",\"iterable -- 一个或多个序列\",\"e.g.1. 将一个列表中的整数转化成字符串存储如另一个列表中：\",\"newList = [] for number in oldList: newList.append(str(number)) \",\"用 map() 等效于：\",\"map(str, oldList) \"]},\"394\":{\"h\":\"int2list and list2int\",\"t\":[\"int2list\",\"def int2list(intNum): return list(map(int, str(intNum))) \",\"解析：\",\">>> str(123) --> '123' >>> map(int, str(123)) --> <map object> # python3 以后 map 返回迭代器 >>> list(map(int, str(123))) --> [1,2,3] \",\"list2int\",\"def list2int(aList): return int(''.join(list(map(str, aList)))) \"]},\"395\":{\"h\":\"isinstance()\",\"t\":[\"Python 中判断类型的方法\",\">>> isinstance(1, int) True >>> isinstance([1, 2, 3], list) True \"]},\"396\":{\"h\":\"zip()\",\"t\":[\"zip(*iterators): returns a iterator of tuples.\",\"当最短的迭代器遍历完成以后，停止迭代。\",\"Example 1:\",\"str = ['hello', 'heo', 'helio'] for _ in zip(*str): print(list(_)) >> [('h', 'h', 'h'), ('e', 'e', 'e'), ('l', 'o', 'l')] # zip('ABCD', 'xy') --> Ax By \"]},\"397\":{\"h\":\"enumerate()\",\"t\":[\"Example 2(接上 zip 的例子):\",\"Leetcode 14. Longest Common Prefix\",\"def longestCommonPrefix(strs): if not strs: return \\\"\\\" for i, _ in enumerate(zip(*strs)): if len(set(_)) > 1: return strs[0][:i] else: return min(strs) test_strs = [\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"] print(longestCommonPrefix(test_strs)) \",\"提示\",\"enumerate() 列举出来的下标从 0 开始，所以使用 [:i] 作为切片 而不是 [:i-1]\"]},\"398\":{\"h\":\"reduce(), lcd and gcd\",\"t\":[\"functools.reduce 可以应用带有两个参数的函数来将一个可迭代的对象的项转化为单个的值，而干函数的两个参数是下一项和前一次应用该函数的结果。\",\"e.g. 计算10的阶乘：\",\"import functools product = functools.reduce(lambda x, y: x*y, range(1,11)) \",\">>> from functools import reduce >>> reduce(lambda x, y: x+y, [1, 2, 3]) 6 \"]},\"399\":{\"h\":\"gcd and lcm\",\"t\":[\"最小公倍数\",\"最大公约数\",\"提示\",\"最小公倍数 = 两整数的乘积 / 最大公约数\",\"lcm(x,y) = x * y / gcd(x,y)\"]},\"400\":{\"h\":\"Bit operation\",\"t\":[\"运算符\",\"描述\",\"&\",\"按位与\",\"|\",\"按位或\",\"^\",\"按位异或\",\"~\",\"按位取反\",\"<<\",\"左移\",\">>\",\"右移\",\"str(bin(x^y).count'1') 计算了两个整数之间的 Hamming distance.\",\"Questions: to think what this code did:\",\"#LC693 class Solution: def hasAlternatingBits(self, n): if not n: return False num = n ^ (n >> 1) return not (num & (num + 1)) \"]},\"401\":{\"h\":\"all()\",\"t\":[\"all(iterable, /) Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True. \",\"This is example 1(LeetCode 728) about the usage:\",\"class Solution: def selfDividingNumbers(self, left, right): \\\"\\\"\\\" :type left: int :type right: int :rtype: List[int] \\\"\\\"\\\" # return [num for num in range(left, right+1) # if all((int(d) and not num % int(d)) for d in str(num))] is_self_dividing = lambda num: '0' not in str(num) and all([num % int(digit) == 0 for digit in str(num)]) x = filter(is_self_dividing, range(left, right + 1)) return list(x) \",\"该段代码使用了 all 的特性，并且在最后返回了一个 filter 的可迭代对象，然后转化成 list,得到结果。\",\"example 2 (LeetCode 766):\",\"class Solution: def isToeplitzMatrix(self, matrix): \\\"\\\"\\\" :type matrix: List[List[int]] :rtype: bool \\\"\\\"\\\" return all(matrix[i][j] == matrix[i+1][j+1] for i in range(len(matrix) - 1) for j in range(len(matrix[0]) -1)) \",\"Tips: len(matrix) gets the number of rows, len(matrix[0]) gets the number of columns.\"]},\"402\":{\"h\":\"filter()\",\"t\":[\"假设你想从考试分数的一个列表中删除所有的 0 分，如下的循环可以完成这个任务：\",\"newList = [] for number in oldList: if number > 0 : newList.append(number) \",\"如果使用 filter() 则只需要如下代码：\",\"newList = list(filter(isPositive, oldList)) \",\"再使用lambda表达式创建匿名函数：\",\"newList = list(filter(lambda number: number > 0, oldList)) \"]},\"403\":{\"h\":\"name\",\"t\":[\"__name__ 这个系统变量显示了当前模块执行过程中的名称，__main__ 一般作为函数的入口，或者整个工程开始运行的入口。\",\"#test.py def HaveFun(): if __name__ == '__main__': print('My name is %s' % __name__) else: print('Someone else called me! my name is %s' % __name__) HaveFun() \",\"output: My name is __mian__\",\"#main.py import test test.HaveFun() \",\"output:\",\"Someone else called me! my name is test Someone else called me! my name is test \"]},\"404\":{\"h\":\"random()\",\"t\":[\"import random import string src = string.digits + string.ascii_letters password = random.sample(src, 4) print(''.join(password)) \",\"利用 random.sample() 生成 4 位随机密码。\"]},\"405\":{\"h\":\"Collections\"},\"406\":{\"h\":\"OrderedDict\",\"t\":[\"from collections import OrderedDict \",\"OrderedDict 是一个可以记录其插入次序的字典，可以结合排序，构造一个排序的字典。\",\"If the value of a certain key is changed, the position of the key remains unchanged in OrderedDict. Deleting and re-inserting the same key will push it to the back as OrderedDict however maintains the order of insertion.\",\"move_to_end(): 将该元素放置于字典的尾部\",\"popitem(last=True): pop 元素使其成为先进先出队列\",\"这是一道华为的笔试题，用于处理一些文件日志功能\"]},\"407\":{\"h\":\"decorators\"},\"408\":{\"h\":\"@property\",\"t\":[\"In Python, property() is a built-in function that creates and returns a property object. The signature of this function is:\",\"property(fget=None, fset=None, fdel=None, doc=None) \",\"where, fget is function to get value of the attribute, fset is function to set value of the attribute, fdel is function to delete the attribute and doc is a string (like a comment).\",\"To better understand this, see this blog.\",\"一般情况下，我们在定义一个类的时候可能会涉及到访问这个类中的私有元素，一般情况下我们会使用一个函数来返回它，但是 Python 中可以使用 @property 装饰器来优雅地实现这个功能。\",\"class ClassName(object): @property def name(self): return self._name @name.setter def name(self, value): self._name = value # use the value of 'name' c = ClassName() c.name # return the self._name's value c.name = 'weigao' # ok \",\"还有一个例子可以参考这里 Thread code\",\"class Screen(object): @property def width(self): return self._width @width.setter def width(self, value): self._width = value @property def resolution(self): return self._width * 1024 \",\"在上述例子中，width 为可读写的，而 resolution 为只读属性。\"]},\"409\":{\"h\":\"urllib\"},\"410\":{\"h\":\"Reading json file from URL\",\"t\":[\"from urllib import request import json with request.urlopen('http://118.24.241.17/path.json') as f: data = f.read() data_json = json.loads(data.decode('utf8')) \",\"data_json is the json file we need.\"]},\"411\":{\"h\":\"Regular Expression - re 正则表达式\",\"t\":[\"参考这篇教程：正则表达式30分钟入门教程\",\"在 Python 中，如果想使用正则表达式：\",\"import re re.match(r'^[1-9]\\\\d{4,11}$', nums) pattern = re.compile(r'some regular expression') re.findall(pattern, sentence) # find all matched of pattern in sentence \",\"第三方模块 regex , 提供了与标准库 re 模块兼容的 API 接口，同时，还提供了更多功能和更全面的 Unicode 支持。\",\"prog = re.compile(pattern) result = prog.match(string) # 等价于 result = re.match(pattern, string) \"]},\"412\":{\"h\":\"requests\",\"t\":[\"import requests import urllib.parse data = { \\\"name\\\": \\\"weigao\\\", \\\"age\\\": 20 } json_data = json.dumps(data) # '{\\\"name\\\": \\\"weigao\\\", \\\"age\\\": 20}' values = urllib.parse.urlencode({\\\"data\\\": json_data}) # 'data=%7B%22name%22%3A+%22weigao%22%2C+%22age%22%3A+20%7D' url='http://api.weixin.oa.com/itilalarmcgi/sendmsg' response = requests.post(url, data=values) \"]},\"413\":{\"h\":\"Networks and Interprocess Communication\"},\"414\":{\"h\":\"Coroutines-协程\",\"t\":[\"协程通过 async/await 语法进行声明，是编写异步应用的推荐方式。官方教程\",\"协程有两个紧密关联的概念：\",\"协程函数：定义形式为 asyncio def 的函数\",\"协程对象：调用协程函数所返回的对象\",\"在 Python 中，单线程 + 异步 I/O 的编程模型被称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。\"]},\"415\":{\"h\":\"asyncio\",\"t\":[\"import asyncio \",\"运行一个协程使用 asyncio.run(), 该函数用于函数运行的入口\",\"等待一个协程使用 asyncio.sleep(1)\",\"使用协程并发处理多任务使用 asyncio.gather()\",\"记住协程是 await 对象！基础的用法可以参考代码\"]},\"416\":{\"h\":\"OO & Class\"},\"417\":{\"h\":\"Class\"},\"418\":{\"h\":\"作用域和命名空间\",\"t\":[\"首先来看一个例子，参考文献 P1.1:\",\"def scope_test(): def do_local(): spam = \\\"local spam\\\" def do_nonlocal(): nonlocal spam spam = \\\"nonlocal spam\\\" def do_global(): global spam spam = \\\"global spam\\\" spam = \\\"test spam\\\" do_local() print(\\\"After local assignment:\\\", spam) # After local assignment: test spam do_nonlocal() print(\\\"After nonlocal assignment:\\\", spam) # After nonlocal assignment: nonlocal spam do_global() print(\\\"After global assignment:\\\", spam) # After global assignment: nonlocal spam # 这时候还未修改是因为还在执行 scope_test 内部 scope_test() print(\\\"In global scope:\\\", spam) # In global scope: global spam \",\"附上官方的解释：\",\"请注意 局部 赋值（这是默认状态）不会改变 scope_test 对 spam 的绑定。 nonlocal 赋值会改变 scope_test 对 spam 的绑定，而 global 赋值会改变模块层级的绑定。\",\"您还可以发现在 global 赋值之前没有 spam 的绑定。\",\"上述代码的理解应该包括一下几点：\",\"当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。如 do_local() 中的 nolocal 关键字可以成功修改 spam(\\\"test spam\\\") 的值。\",\"举例而言：\",\"#!/usr/bin/python3 def outer(): num = 10 def inner(): nonlocal num # nonlocal关键字声明 num = 100 print(num) # 100, nonlocal 关键字修改了函数 outer 内部的 num 变量 inner() print(num) # 100 outer() \",\"global 关键字一般是用来修改函数外部的变量（全局变量）。\",\"举例而言：\",\"#!/usr/bin/python3 num = 1 def fun1(): global num # 需要使用 global 关键字声明 print(num) # 取到全局变量 1 num = 123 print(num) # 123 成功给全局变量赋值 fun1() print(num) # 123 全局变量值被修改 \",\"上面的 scope_test() 执行后，才修改到了函数外部的全局变量。\",\"LEGB\",\"虽然作用域是静态地确定的，但它们会被动态地使用。 在执行期间的任何时刻，会有 3 或 4 个命名空间可被直接访问的嵌套作用域:\",\"Local: 最先搜索的最内部作用域包含局部名称\",\"Encrosing: 从最近的封闭作用域开始搜索的任何封闭函数的作用域包含非局部名称，也包括非全局名称\",\"Global: 倒数第二个作用域包含当前模块的全局名称\",\"Built-in: 最外面的作用域（最后搜索）是包含内置名称的命名空间\"]},\"419\":{\"h\":\"self\",\"t\":[\"方法的特殊之处就在于实例对象会作为函数的第一个参数被传入。 在我们的示例中，调用 x.f() 其实就相当于 MyClass.f(x)。 总之，调用一个具有 n 个参数的方法就相当于调用再多一个参数的对应函数，这个参数值为方法所属实例对象，位置在其他参数之前。\",\"方法的第一个参数常常被命名为 self。 这也不过就是一个约定: self 这一名称在 Python 中绝对没有特殊含义。\"]},\"420\":{\"h\":\"给类添加迭代器\",\"t\":[\"定义一个 __iter__() 方法来返回一个带有 __next__() 方法的对象。 如果类已定义了 __next__()，则 __iter__() 可以简单地返回 self:\",\"class Reverse: \\\"\\\"\\\"Iterator for looping over a sequence backwards.\\\"\\\"\\\" def __init__(self, data): self.data = data self.index = len(data) def __iter__(self): return self def __next__(self): if self.index == 0: raise StopIteration self.index = self.index - 1 return self.data[self.index] \",\"更优雅的方式是定义一个生成器：\",\"def reverse(data): for index in range(len(data)-1, -1, -1): yield data[index] \"]},\"421\":{\"h\":\"类方法 classmethod\",\"t\":[\"如果我们想通过类来调用方法，而不是通过实例，那应该怎么办呢？\",\"Python 提供了 classmethod 装饰器让我们实现上述功能，看下面的例子：\",\"class A(object): bar = 1 @classmethod def class_foo(cls): print 'Hello, ', cls print cls.bar >>> A.class_foo() # 直接通过类来调用方法 Hello, <class '__main__.A'> 1 \",\"被 classmethod 装饰的方法由于持有 cls 参数，因此我们可以在方法里面调用类的属性、方法，比如 cls.bar。\",\"如果在类中增加 __init__ 方法，可以看到类直接是无法调用到 __init__ 中的属性的：\",\"class A(object): bar = 1 def __init__(self): self.lis = [1, 2, 3] @classmethod def class_foo(cls): print('Hello, ', cls) print(cls.bar) print(cla.lis) if __name__ == '__main__': A.class_foo() >>> AttributeError: type object 'A' has no attribute 'lis' \"]},\"422\":{\"h\":\"静态方法 staticmethod\",\"t\":[\"在类中往往有一些方法跟类有关系，但是又不会改变类和实例状态的方法，这种方法是静态方法，我们使用 staticmethod 来装饰。\",\"Why @staticmethod?\",\"静态方法没有 self 和 cls 参数，可以把它看成是一个普通的函数，我们当然可以把它写到类外面，但这是不推荐的，因为这不利于代码的组织和命名空间的整洁。\",\"class A(object): bar = 1 @staticmethod def static_foo(): print('Hello, ', A.bar) if __name__ == '__main__': a = A() a.static_foo() A.static_foo() >>> Hello, 1 >>> Hello, 1 \",\"举一反三，我们对 A 中的 bar 属性能否进行修改呢？从下面例子中可以看出类属性被修改了。\",\"if __name__ == '__main__': A.bar = 3 a = A() a.static_foo() A.bar = 2 A.static_foo() >>> Hello, 3 >>> Hello, 2 \"]},\"423\":{\"h\":\"3. 继承与多态\"},\"424\":{\"h\":\"函数继承\",\"t\":[\"如果子类没有定义自己的初始化函数，那么父类的初始化函数会被默认调用；但是如果这种情况下实例化子类的对象，应该传入父类的初始化参数，否则会报错；\",\"如果子类定义了自己的初始化函数，并且没有显式调用父类的初始化函数，则父类的属性不会被初始化；\",\"如果子类定义了自己的初始化函数，并且显式调用了父类的初始化函数，则子类和父类的属性都会被初始化；\",\"如果在子类中需要父类的构造方法就需要显式地调用父类的构造方法，或者不重写父类的构造方法。\",\"子类不重写 init，实例化子类时，会自动调用父类定义的 init。\",\"class Father(object): def __init__(self, name): self.name=name print ( \\\"name: %s\\\" %( self.name) ) def getName(self): return 'Father ' + self.name class Son(Father): def getName(self): return 'Son '+self.name if __name__=='__main__': son=Son('runoob') print ( son.getName() ) # name: runoob # Son runoob \",\"如果重写了**init** 时，实例化子类，就不会调用父类已经定义的 init，语法格式如下：\",\"class Father(object): def __init__(self, name): self.name=name print ( \\\"name: %s\\\" %( self.name) ) def getName(self): return 'Father ' + self.name class Son(Father): def __init__(self, name): print ( \\\"hi\\\" ) self.name = name def getName(self): return 'Son '+self.name if __name__=='__main__': son=Son('runoob') print ( son.getName() ) # hi # Son runoob \",\"如果重写了**init** 时，要继承父类的构造方法，可以使用 super 关键字：super(子类，self).__init__(参数1，参数2，....) 或者 父类名称.__init__(self,参数1，参数2，...)\",\"class Father(object): def __init__(self, name): self.name=name print ( \\\"name: %s\\\" %( self.name)) def getName(self): return 'Father ' + self.name class Son(Father): def __init__(self, name): super(Son, self).__init__(name) print (\\\"hi\\\") self.name = name def getName(self): return 'Son '+self.name if __name__=='__main__': son=Son('runoob') print ( son.getName() ) # name: runoob # hi # Son runoob \",\"拓展：如下代码可以看出来，子类也通过 super 继承了父类的属性：\",\"class Father(object): def __init__(self, name): self.name = name self.age = 10 print(\\\"name: %s\\\" % (self.name)) def getName(self): return 'Father ' + self.name class Son(Father): def __init__(self, name): super(Son, self).__init__(name) print(\\\"hi\\\") self.name = name def getName(self): return 'Son ' + self.name + str(self.age) if __name__ == '__main__': son = Son('runoob') print(son.getName()) \\\"\\\"\\\" name: runoob hi Son runoob10 \\\"\\\"\\\" \",\"在super机制里，可以保证公共父类仅被执行一次，至于执行的顺序，是按照**MRO（Method Resolution Order）**方法解析顺序 进行的。\",\"简单理解，MRO顺序就是代码中的书写顺序\"]},\"425\":{\"h\":\"QA\",\"t\":[\"❓❓❓ 子类继承父类时，实例化子类，会调用父类的 init 方法吗？\",\"子类与父类的init\",\"这是我经常混淆的点，可以通过下述的例子来观察，最终的结论是：不会。\",\"除非在子类中显式调用 super().__init__, 但是在这种情况下也需要注意 MRO 列表问题。\",\"总结来说：如果子类和父类都有 __init__ 初始化方法，子类其实是重写了父类的 __init__ 方法，如果不显式调用父类的 __init__ 方法，父类的 __init__ 方法就不会被执行!\",\"class Animal(object): def __init__(self, name): print('__init__Animal') self.name = name def greet(self): print('Hello, I am %s.' % self.name) class Dog(Animal): def __init__(self, name): print('__init__Dog') self.name = name def greet(self): print('WangWang.., I am %s. ' % self.name) if __name__ == '__main__': dog = Dog('dog') dog.greet() \\\"\\\"\\\"\\\" >>> __init__Dog >>> WangWang.., I am dog. \\\"\\\"\\\" \"]},\"426\":{\"h\":\"继承易错知识点\",\"t\":[\"看以下代码：\",\"class A: def __init__(self): print('A') pass class B(A): def __init__(self): print('B') A.__init__ class C(A): def __init__(self): print('C') A.__init__ if __name__ == '__main__': B() C() # B # C \",\"我们可以看到，A.__init__ 并没有达到调用 A 的效果。正常的调用如下所示：\",\"class A: def __init__(self): print('A') pass class B(A): def __init__(self): print('B') A.__init__(self) class C(A): def __init__(self): print('C') A.__init__(self) if __name__ == '__main__': B() C() # B # A # C # A \",\"如果使用 super 类的方式调用父类初始化方法，这种写法不与父类类名绑定，且可以保证菱形继承场景下，创建一个子类对象仅调用顶层父类初始化函数一次。\",\"举例如下：\",\"class A: def __init__(self): print('A') pass class B(A): def __init__(self): print('B') A.__init__(self) class C(A): def __init__(self): print('C') A.__init__(self) class D(B, C): def __init__(self): print('D') B.__init__(self) C.__init__(self) \\\"\\\"\\\" 以下是正确示例 \\\"\\\"\\\" class A1: def __init__(self): print('A') pass class B1(A1): def __init__(self): print('B') super(B1, self).__init__() class C1(A1): def __init__(self): print('C') super(C1, self).__init__() class D1(B1, C1): def __init__(self): print('D') super(D1, self).__init__() if __name__ == '__main__': print('---D---') D() print('---D1---') D1() \\\"\\\"\\\" ---D--- D B A C A ---D1--- D B C A \\\"\\\"\\\" \"]},\"427\":{\"h\":\"super()\",\"t\":[\"在类的继承中，如果重定义某个方法，该方法会覆盖父类的同名方法，但有时，我们希望能同时实现父类的功能，这时，我们就需要调用父类的方法了，可通过使用 super 来实现，比如：\",\"class Animal(object): def __init__(self, name): self.name = name def greet(self): print('name is', self.name) class Dog(Animal): def greet(self): super().greet() print('WangWang...') if __name__ == '__main__': d = Dog(\\\"wang_cai\\\") d.greet() #>>> name is wang_cai #>>> WangWang... \",\"super 的一个最常见用法可以说是在子类中调用父类的初始化方法了，比如：\",\"class Base(object): def __init__(self, a, b): self.a = a self.b = b class A(Base): def __init__(self, a, b, c): super(A, self).__init__(a, b) # Python3 可使用 super().__init__(a, b) self.c = c if __name__ == '__main__': test = A(1, 2, 3) print(test.a, test.b, test.c) #>>> 1 2 3 \",\"❗❗❗\",\"super 其实和父类没有实质性的关联，MRO 列表\",\"在多重继承的场景下会这样。对于你定义的每一个类，Python 会计算出一个方法解析顺序（Method Resolution Order, MRO）列表，它代表了类继承的顺序。 可以使用 C.mro() 查看。\",\"class Base(object): def __init__(self): print \\\"enter Base\\\" print \\\"leave Base\\\" class A(Base): def __init__(self): print \\\"enter A\\\" super(A, self).__init__() print \\\"leave A\\\" class B(Base): def __init__(self): print \\\"enter B\\\" super(B, self).__init__() print \\\"leave B\\\" class C(A, B): def __init__(self): print \\\"enter C\\\" super(C, self).__init__() print \\\"leave C\\\" \",\"其对应的输出是：\",\">>> c = C() enter C enter A enter B enter Base leave Base leave B leave A leave C \"]},\"428\":{\"h\":\"4. 魔法方法 magic method\",\"t\":[\"在 Python 中，我们可以经常看到以双下划线 __ 包裹起来的方法，比如最常见的 __init__，这些方法被称为魔法方法（magic method）或特殊方法（special method）。 简单地说，这些方法可以给 Python 的类提供特殊功能，方便我们定制一个类，比如 __init__ 方法可以对实例属性进行初始化。\",\"完整的特殊方法列表可在这里查看。\"]},\"429\":{\"h\":\"5 __new__\"},\"430\":{\"h\":\"QA\",\"t\":[\"❓❓❓ 为什么 new 的第一个参数是 cls 而不是 self?\",\"注意\",\"因为调用 __new__ 的时候，实例对象还没有被创建，__new__ 是一个静态方法。第一个参数 cls 表示当前的 class\",\"❓❓❓ 如何理解 object.__new__的 object?\",\"注意\",\"__new__ 方法如果返回 cls 的对象(return super().__new__(cls))，则对象的 __init__ 方法将自动被调用。\",\"只要调用父类的 __new__ 方法，__init__ 方法就默认被调用，object 类是最大的父类。\",\"❓❓❓ 我们可以只使用 __new___ 来实例化对象实例吗？\",\"注意\",\"可以，但是不建议！还是建议使用 __init__。\"]},\"431\":{\"h\":\"5.1 __new__\",\"t\":[\"在 Python 中，当我们创建一个类的实例时，类会先调用 __new__(cls[, ...]) 来创建实例，然后 __init__ 方法再对该实例（self）进行初始化。\",\"关于 __new__ 和 __init__ 有几点需要注意：\",\"__new__ 是在 __init__ 之前被调用的；\",\"__new__ 是类方法，__init__ 是实例方法；\",\"重载 __new__ 方法，需要返回类的实例；\",\"为什么我们一般在创建类的时候没有重载 __new__ 呢？\",\"一般情况下，我们不需要重载 __new__ 方法。但在某些情况下，我们想控制实例的创建过程，这时可以通过重载 __new__ 方法来实现。\",\"举例而言：\",\"class A(object): _dict = dict() def __new__(cls): if 'key' in A._dict: print(\\\"EXISTS\\\") print(\\\"A._dict['key']\\\", A._dict['key']) return A._dict['key'] else: print(\\\"__NEW__\\\") return object.__new__(cls) def __init__(self): print(\\\"__INIT__\\\") A._dict['key'] = 'aaa' if __name__ == '__main__': a1 = A() a2 = A() a3 = A() \",\"其对应的输出如下所示：\",\"__NEW__ __INIT__ EXISTS A._dict['key'] aaa EXISTS A._dict['key'] aaa \",\"我们可以观察到：\",\"__init__ 方法始终被调用了；\",\"object.__new__(cls) 可以实例化对象。\",\"🍉🍉🍉 关于 `object.__new__(cls)`\",\"可以使用 object.__new__(cls) 实现单例（即一个类只有一个实例，例子如上面例子）\"]},\"432\":{\"h\":\"5.2 实例化的本质 new 与 init\",\"t\":[\"本小节通过分析 __new__ 与 __init__ 的关系总结实例化本质。\",\"💘 💘 💘 先看例子：这是一个正确的示例\",\"class Person(): def __new__(cls, age): print('__new__, age:', age) # return super(Person, cls).__new__(cls) # ok # return object.__new__(cls) # ok return super().__new__(cls) def __init__(self, age): print('__init__, age:', age) self.age = age if __name__ == '__main__': Person(100) # >>> __new__, age: 100 # >>> __init__, age: 100 \",\"我们可以使用多种方式来实现 __new__\",\"__new__ 和 __init__ 方法共享同名的参数，除了第一个从 cls 变成了 self\",\"如果 __new__ 没有返回实例对象，则 __init__ 方法不会被调用\",\"❌❌❌ 如果 __init__ 传入的参数比 __new__ 多的话会发生什么呢？\",\"class Person(): def __new__(cls, age, name): print('__new__, age:', age) return super().__new__(cls) def __init__(self, age): print('__init__, age:', age) self.age = age if __name__ == '__main__': Person(100) #>>> TypeError: __new__() missing 1 required positional argument: 'name' \",\"❌❌❌ 如果 __init__ 传入的参数比 __new__ 少的话会发生什么呢？\",\"class Person(): def __new__(cls, age): print('__new__, age:', age) return super().__new__(cls) def __init__(self, age, name): print('__init__, age:', age) self.age = age if __name__ == '__main__': Person(100) #>>> TypeError: __init__() missing 1 required positional argument: 'name' \",\"❗❗❗ 实例化的本质\",\"✨✨✨ 实例化的本质\",\"实例初始化本质是向 __new__ 中传参!\",\"💘 💘 💘 我们常用的定义类的写法，最标准的写法参考如下：\",\"class Person(): def __new__(cls, *args, **kwargs): return super().__new__(cls) def __init__(self, age, name): self.age = age self.name = name if __name__ == '__main__': p = Person(100, \\\"zhanshen\\\") \",\"我们如果在创建实例的时候加入判断，可以分别如下：\",\"在 __new__ 中判断参数。此时对象不会创建，即 __init__ 不会被调用；\",\"在 ___init__ 中判断参数。此时对象会创建。\",\"举例如下：\",\"class Person(): def __new__(cls, age): print('__new__') if age < 100: print('not created!') return cls return super().__new__(cls) def __init__(self, age): print('__init__') self.age = age if __name__ == '__main__': p = Person(10) #>>> __new__ #>>> not created! \",\"可以看出，__init__ 未被调用，对象也未创建。如果使用 __init__ 判断的话，可以看到，对象被创建了。\",\"class Person(): def __new__(cls, age): print('__new__') return super().__new__(cls) def __init__(self, age): if age < 100: print('__init__') print('wrong!') self.age = age if __name__ == '__main__': p = Person(10) #>>> __new__ #>>> __init__ #>>> wrong! \"]},\"433\":{\"h\":\"5.3 __new__ 返回其他实例\",\"t\":[\"我们还可以通过 __new__ 返回其他类的实例：如 return object.__new__(Person)\",\"class Person(object): def __new__(cls, *args, **kwargs): return object.__new__(cls) def __init__(self, age): self.age = age class Test(object): def __new__(cls, *args, **kwargs): return object.__new__(Person) if __name__ == '__main__': p = Test(100) p.age = 10 print(type(p), p.age) #>>> <class '__main__.Person'> 10 \"]},\"434\":{\"h\":\"6. __str__\",\"t\":[\"重写 __str__ 以达到打印的目的：\",\"class Foo(object): def __init__(self, name): self.name = name def __str__(self): print('__str__', self.name) return 'name is ' + self.name # def __repr__(self): # print('__repr__', self.name) # return 'name is ' + self.name __repr__ = __str__ if __name__ == '__main__': print(Foo('zhanshen')) #>>> __str__ zhanshen #>>> name is zhanshen \"]},\"435\":{\"h\":\"7. __call__\",\"t\":[\"我们一般使用 obj.method() 来调用对象的方法，那能不能直接在实例本身上调用呢？在 Python 中，只要我们在类中定义 __call__ 方法，就可以对实例进行调用，比如下面的例子：\",\"class Point(object): def __init__(self, x, y): self.x, self.y = x, y def __call__(self, z): return self.x + self.y + z \",\"使用方法如下：\",\">>> p = Point(3, 4) >>> callable(p) # 使用 callable 判断对象是否能被调用 True >>> p(6) # 传入参数，对实例进行调用，对应 p.__call__(6) 13 # 3+4+6 \"]},\"436\":{\"h\":\"8. __slot__\",\"t\":[\"在 Python 中，我们在定义类的时候可以定义属性和方法。当我们创建了一个类的实例后，我们还可以给该实例绑定任意新的属性和方法。\",\"class Point(object): def __init__(self, x=0, y=0): self.x = x self.y = y >>> p = Point(3, 4) >>> p.z = 5 # 绑定了一个新的属性 >>> p.z 5 >>> p.__dict__ {'x': 3, 'y': 4, 'z': 5} \",\"因此，为了不浪费内存，可以使用 __slots__ 来告诉 Python 只给一个固定集合的属性分配空间，对上面的代码做一点改进，如下：\",\"class Point(object): __slots__ = ('x', 'y') # 只允许使用 x 和 y def __init__(self, x=0, y=0): self.x = x self.y = y >>> p = Point(3, 4) >>> p.z = 5 Traceback (most recent call last): File \\\"<input>\\\", line 1, in <module> AttributeError: 'Point' object has no attribute 'z' \",\"使用 __slots__ 有一点需要注意的是，__slots__ 设置的属性仅对当前类有效，对继承的子类不起效，除非子类也定义了 __slots__，这样，子类允许定义的属性就是自身的 slots 加上父类的 slots。\"]},\"437\":{\"h\":\"9. 元类 metaclass\"},\"438\":{\"h\":\"9.1 什么是元类\",\"t\":[\"类是实例对象的模板，元类是类的模板 +----------+ +----------+ +----------+ | | | | | | | | instance of | | instance of | | | instance +------------>+ class +------------>+ metaclass| | | | | | | | | | | | | +----------+ +----------+ +----------+ \"]},\"439\":{\"h\":\"P. 参考文献\",\"t\":[\"Python 之旅\",\"Pyton 作用域与命名空间，官方文档\"]},\"440\":{\"h\":\"Python and C/C++\"},\"441\":{\"h\":\"Abstract\",\"t\":[\"如何实现 Python 和 C++ 之间的互相调用呢？其实这是一个混合编程的问题。\"]},\"442\":{\"h\":\"Python 调用 C/C++\",\"t\":[\"这种做法称为 Python 扩展。可以使用 Cython 或者 SWIG.\"]},\"443\":{\"h\":\"virtualenv&Visdom\"},\"444\":{\"h\":\"虚环境\",\"t\":[\"安装 Python3 虚环境\",\"virtualenv -p python3 envname virtualenv -p python3 envname \",\"启动使用：\",\"source racv/bin/activate \",\"http://201.117.21.195/\"]},\"445\":{\"h\":\"标准启动方式\",\"t\":[\"根据书籍《Black.Hat.Python.2nd.Edition.2021.4》介绍的，可以用如下的顺序正确使用虚环境。\",\"sudo apt-get install python3-venv \",\"安装完成以后：\",\"mkdir bhp cd bhp python3 -m venv venv3 source venv3/bin/active \",\"在 python 环境中，还可以用 pip 搜索包：\",\"pip search hashcrack \",\"如果是在 windows 中，尝试使用 pip 安装虚环境：\",\"pip install virtualenv -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com pip install virtualenvwrapper-win \",\"然后新建一个虚环境：\",\"mkvirtualenv my-first-env \",\"使用这个 env:\",\"workon my-first-env \",\"如果要退出当前的虚环境：\",\"deactivate \",\"如果要删除这个 env:\",\"rmvirtualenv my-first-env \"]},\"446\":{\"h\":\"远程访问 Visdom\",\"t\":[\"重定向 8097 端口到本地：\",\"ssh -L 18097:127.0.0.1:8097 username@remote_server_ip \",\"在服务器上启动 visdom server：\",\"python3 -m visdom.server \",\"查看 GPU 的信息：\",\"nvidia-smi \"]},\"447\":{\"h\":\"查看 Python 路径\",\"t\":[\"有的时候我们可能需要查看一下 python 的安装路径，可以使用如下的方法：\",\"python >>> import sys >>> sys.path \"]},\"448\":{\"h\":\"设置 pip 源\"},\"449\":{\"h\":\"windows\",\"t\":[\"直接在 user 目录中创建一个 pip 目录，而后创建一个 pip.ini 文件：\",\"[global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple \"]},\"450\":{\"h\":\"linux\",\"t\":[\"修改 ~/.pip/pip.conf (没有就创建一个)。\"]},\"451\":{\"h\":\"HashMap\"},\"452\":{\"h\":\"HashMap\"},\"453\":{\"h\":\"HashMap in Python - Counter\",\"t\":[\"from collections import Counter \",\"在腾讯面试的过程中，被问到了一个题目，要求找出一个数组中第一个单独出现的数字，例如 [2, 4, 2, 3, 1, 3], 则结果应该是 4.\",\"题目如果用 hashmap 去求解的话只需要：\",\" from collections import Counter nums = [2, 4, 2, 3, 1, 3] nums_counter = Counter(nums) res = min(nums_counter, key = nums_counter.get) \",\"Counter 为 Python 内置的 hashmap, 具体可以查询 Counter, 对于那个排序而言，key 会指定一个函数用于元素的比较，nums_counter.get() 方法用于得到某个 key 的 value 值。\"]},\"454\":{\"h\":\"unordered_map\",\"t\":[\"What is difference between map and unordered_map?\",\"Stack overflow\",\"Map vs unordered_map\",\"Conclusion: unordered_map is generally use more memory, better for lookup-retrieval, much slower at repeatedly inserting and removing elements.\",\"Code example for map usage: GitHub: 如何遍历、赋值。\",\"关联容器 unordered_map 的初始化：\",\"unordered_map<char, int> roman = { {'I', 1}, {'V', 5} }; \",\"也可以利用 for 循环赋值初始化，具体参照上述 GitHub 示例。\",\"拓展\",\"Python map 的初始化比较简单：\",\"mapping = { \\\"]\\\":\\\"[\\\", \\\"}\\\":\\\"{\\\" } \",\"注意加以区别！\"]},\"455\":{\"h\":\"map\",\"t\":[\"Example: 单词计数器\",\"Using map's includes:\",\"#include <map> #include <string> using Map = std::map<std::string, std::size_t>; Map my_map; \",\"auto count() { Map counts; for (string w; cin >> w; ++counts[w]) ; return counts; } \",\"Print this map's key and value:\",\"for(auto &kv : my_map)\\n    std::cout << kv.first << : << kv.second << std::endl;\\n    // words : counts\\n\"]},\"456\":{\"h\":\"Linked List\"},\"457\":{\"h\":\"Linked List\"},\"458\":{\"h\":\"Reverse Linked List\",\"t\":[\"Iterative method\",\"def reverseList(self, head): preNode = None curNode = head while curNode is not None: next = curNode.next curNode.next = preNode preNode = curNode curNode = next return preNode \",\"Recursive method\",\"Divide the list in two parts - first node and rest of the linked list.\",\"Call reverse for the rest of the linked list.\",\"Link rest to first.\",\"Fix head pointer\",\"由于迭代较快，故建议经常使用迭代法。\"]},\"459\":{\"h\":\"Intersection of Linked List\",\"t\":[\"判断两个链表是否有交叉(Intersection), LC160.\",\"实现思路有：\",\"根据链表是否有环判断\",\"先遍历一个链表找到其尾部，然后将尾部的 next 指针指向另一个链表，这样子两个链表就合成了一个链表，判断原来的两个链表是否有交叉也就变成了判断一个单链表是否有环。\",\"找出交点的方法是，遍历两个链表，长度较长的链表指针向后移动 |len1 - len2| 个单位，然后开始遍历两个链表，判断节点是否相等（节点的地址）。\",\"根据总结的规律判断\",\"该方法比较巧妙，代码如下：\",\"def getIntersectionNode(self, headA, headB): if headA is None or headB is None: return None pa = headA pb = headB while pa is not pb: pa = headB if pa is None else pa.next pb = headA if pb is None else pb.next return pa \",\"核心思路在于，同时遍历两个链表，如果到链表结束，则将指针指向另一个链表，遍历直到两个移动的指针相等。\",\"判断单链表是否有环\",\"一般判断单链表是否有环的方法是设置一块一慢两个指针，看其是否会相等。\"]},\"460\":{\"h\":\"Implement LRU\",\"t\":[\"LRU 为最近最少使用算法，常常用于缓存技术中，其实现方式为循环双向链表，实现思想为：\",\"将 chche 的所有位置都用双向链表链接起来，当一个位置被命中以后，将该位置指向链表头的位置，新加入的 chche 直接加到链表头中。\",\"这样，在多次进行 cache 操作后，最近被命中的，就会被向链表头方向移动，而没被命中的向链表后面移动。\",\"缓存已满的时候新加入的数据节点插入链表头部，而删除链表的尾节点。\",\"具体的实现代码可以参考 GitHub\",\"class LRUCache: def __init__(self, capacity: int): self.capacity = capacity seld.dic = {} self.head = Node(0, 0) self.tail = Node(0, 0) self.head.next = self.tail self.tail.prev = self.head \",\"思路是初始化一个 dict 用于存储，对双向链表进行操作的同时对这个 dict 进行赋值操作，dict 的结构为：\",\"key: LRUCache 中的 key\",\"value: 一个 Node 类型的节点，存储其 prev 和 next 信息以及最关键的 value\",\"其 put() 方法为：\",\"def put(self, key: int, value: int) -> None: if key in self.dic: self._remove(dic[key]) n = Node(key, value) self._add(n) self.dic[key] = n if len(self.dic) > self.capacity: first_node = self.head.next self._remove(first_node) del self.dic[first_node.key] \",\"然后使用双向链表的操作进行插入（尾插）和删除（第一个节点）\",\"也可以使用 Python 中的 collection.OrderedDict 来进行存储，使用其 move_to_end() 和 popitem() 方法，具体代码可以参考这里\"]},\"461\":{\"h\":\"Data Struct\",\"t\":[\"这个章节主要介绍一些数据结构的基本概念及其应用，主要包括：\",\"String\",\"Stack\",\"HashMap\",\"Linked List\",\"Binary Tree\"]},\"462\":{\"h\":\"Stack\"},\"463\":{\"h\":\"Abstract\",\"t\":[\"todo\"]},\"464\":{\"h\":\"Stack Problem\"},\"465\":{\"h\":\"Valid Parentheses(括号匹配)\",\"t\":[\"堆栈在处理递归问题时非常有用，对于括号匹配，是栈应用的经典案例：\",\"Initialize a stack S: 初始化栈\",\"Process each bracket(括号) of the expression one at a time.\",\"If we encounter an opening bracket, then we check the element on the top of the stack. (遇到左括号则入栈)\",\"If the element at the top of the stack is an openning bracket of the same type, the we pop it off the stack and continue processing. (栈顶元素和外面相匹配，则出栈继续)\",\"Else this implies an invaild expression.\",\"In the end, if we are left with a stack still having elements, then this implies an invaild expression. (栈不空则表达式非法)\",\"Implementation:\",\"简单版本：\",\"def isValid(self, s: str) -> bool: stack = [] for ch in s: if ch in ['(', '[', '{']: stack.append(ch) else: # for the case \\\"]\\\" if stack == []: return False if ch == ')' and stack[-1] != '(': return False if ch == ']' and stack[-1] != '[': return False if ch == '}' and stack[-1] != '{': return False stack.pop() return stack == [] \",\"优化版本，基本思路一致：\",\"def isValid(self, s: str) -> bool: stack = [] mapping = {\\\"]\\\":\\\"[\\\", \\\"}\\\":\\\"{\\\", \\\")\\\":\\\"(\\\"} for ch in s: if ch in mapping.keys(): # 右括号，进行判断 if stack == []: return False if stack.pop() != mapping[ch]: return False else: stack.append(ch) # 左括号，入栈 return stack == [] \",\"Solution of C++\",\"Explaination:\",\"我们遍历字符串 s, 遇到左括号则入栈，遇到右括号 (keys) 则弹出栈顶元素进行比较（在栈非空的前提下）\",\"最终返回值：栈空则合法，等价于 return stack==[]\"]},\"466\":{\"h\":\"Validate Stack Sequence\",\"t\":[\"给定入栈和出栈序列，判断是否合法：\",\"def validateStackSequences(pushed: 'List[int]', popped: 'List[int]') -> bool: i = 0 stack = [] for x in pushed: stack.append(x) while stack and i < len(popped) and stack[-1] == popped[i]: stack.pop() i += 1 return stack == [] # returen i == len(poped) \",\"注意到我们不改变 pushed 和 poped, 而是使用一个 stack = [] 作为辅助操作。\",\"当没有找到与 stack 栈顶元素相等的元素时，不停地往 stack 中添加元素，\"]},\"467\":{\"h\":\"Next Greater Element\",\"t\":[\"https://leetcode.com/problems/next-greater-element-i/\",\"这道题目的大意是给定两个 List, 比如：\",\"find_nums: [4, 1, 2], nums: [1, 3, 4, 2]\",\"需要找出 nums 中 find_nums 对应的下一个比它大的元素，未找到就返回 -1, 在这个例子中的结果是：\",\"res: [-1, 3, -1]\",\"def nextGreaterElement(find_nums, nums): # [4, 1, 2] # [1, 3, 4, 2] # [-1, 3, -1] stack = [] dic = {} for num in nums: while stack != [] and stack[-1] < num: dic[stack[-1]] = num stack.pop() stack.append(num) res = [] for find_num in find_nums: res.append(dic.get(find_num, -1)) return res \",\"当栈顶元素小于 num 时，在字典中添加栈顶元素, num 表示栈顶元素的 next greater element 是 num\",\"stack 在上述例子中的顺序变化为：[1] -> [3] -> [4] -> [4, 2]\",\"dic 为 {1: 3, 3: 4}\"]},\"468\":{\"h\":\"用两个栈实现一个队列\",\"t\":[\"这是面试中的经典问题，应当熟练掌握。\",\"Leetcode 232\",\"所谓两个栈实现一个队列，应当是指实现队列的 尾插 和 头删 两个操作。\",\"我们定义两个栈 S1 和 S2：\",\"S1：只进行插入数据\",\"S2：删除 S1 中的数据\",\"！注意 S2 不为空时不要从 S1 中添加数据，类似于下图三的情况。\",\"代码实现如下，思路就是使用两个栈，一个做插入，一个做删除：\",\"# -*- coding:utf-8 -*- class Solution: def __init__(self): self.s1 = [] self.s2 = [] def push(self, node): self.s1.append(node) def pop(self): if self.s2 == []: while self.s1: self.s2.append(self.s1.pop()) return self.s2.pop() return self.s2.pop() \"]},\"469\":{\"h\":\"用两个队列实现一个栈\"},\"470\":{\"h\":\"括号匹配\"},\"471\":{\"h\":\"后缀表达式\"},\"472\":{\"h\":\"String\"},\"473\":{\"h\":\"String\"},\"474\":{\"h\":\"Python String\"},\"475\":{\"h\":\"求 String 长度\"},\"476\":{\"h\":\"C String\"},\"477\":{\"h\":\"Problems\",\"t\":[\"在算法中，字符串的操作和数组一样，都是很热门的考察点，这篇文章将总结一下常见的有关 string 的算法，方便查阅学习、总结。\"]},\"478\":{\"h\":\"判断两个字符串是否只相差一个字母\",\"t\":[\"注意，针对已经排序的字符串，判断这两个字符串是否只相差一个字母（也就是说第二个字符串比第一个字符串多最后一个字母，如 abc 和 abcd 这种）。\",\"我真的是个猪脑子，可能是加班太多了没有脑子思考了，真的很痛恨加班，对身体和心灵都是巨大的伤害，可怜哦，又是被牺牲的一代人~\",\"言归正传，之前想法是，用 and 或者 or 操作来判断之类的思路，但是这种思路比较烂，正确的做法是：\",\"s1 = 'abc', s2 = 'abcd' , 则： s2[:-1] == s1 , 直接搞定！\"]},\"479\":{\"h\":\"LC521 最长特殊序列1 -- 判断子序列\",\"t\":[\"LC521\",\"这个题目涉及到基础知识：如何判断一个字符串是否另一个的子序列？ @todo\",\"给你两个字符串 a 和 b，请返回 这两个字符串中 最长的特殊序列的长度。如果不存在，则返回 -1 。\",\"字符串 s 的子序列是在从 s 中删除任意数量的字符后可以获得的字符串。\",\"例如，\\\"abc\\\" 是 \\\"aebdc\\\" 的子序列，因为删除 \\\"aebdc\\\" 中斜体加粗的字符可以得到 \\\"abc\\\" 。 \\\"aebdc\\\" 的子序列还包括 \\\"aebdc\\\" 、 \\\"aeb\\\" 和 \\\"\\\" (空字符串)。\",\"但是实际上是想太多了，可以分情况讨论：\",\"aaa and bbbb, 我们选择 bbbb, 因为其长度为 4, 所以肯定不是 aaa 的子序列；\",\"aaa and aaaa 也一样；\",\"abc and abc, 就是 3;\",\"abcd and abcd 就是 4.\",\"合理理解题目非常重要。\",\"实现的代码如下：\",\"class Solution: def findLUSlength(self, a: str, b: str) -> int: if a == b: return -1 return max(len(a), len(b)) \"]},\"480\":{\"h\":\"查找字符串中第一个出现的不重复的元素（阿里）\",\"t\":[\"这道题目是阿里面试的第一道算法题目，题目意思大概如下：\",\"https://leetcode.com/problems/first-unique-character-in-a-string/\",\"类似于这道题目，但是不同的是需要返回这个字符，而不是字符的下标，解决方法的比较优秀的解法是使用hash map，但是面试的时候限定了这个题目不能使用任何的自带库，所以 unordered_map 是无法使用的，我们需要自己创建一个 hash(这也是最快的解法)：\",\"class Solution { public: int firstUniqChar(string s) { int hash[26] = {0}; for(auto &c: s) { hash[c]++; } for(int j = 0; j < s.length(); j++) { if(hash[s[j]] == 1) return j; } return -1; } }; \",\"使用 unordered_map 的解法如下：\",\"class Solution { public: int firstUniqChar(string s) { unordered_map<char, int> hash; for(auto &ch: s) { hash[ch]++; } for(int i = 0; i < s.length(); i++) { if(hash[s[i]] == 1) return i; } return -1; } }; \",\"如果使用 python 的话，使用 hash_map 容器 collections.Counter() :\",\"class Solution: def firstUniqChar(self, s: str) -> int: counter = collections.Counter(s) for idx, ch in enumerate(s): if counter[ch] == 1: return idx return -1 \",\"或者自己创建一个 dict：\",\"class Solution: def firstUniqChar(self, s: str) -> int: dic = {} for ch in s: dic[ch] = dic.get(ch, 0) + 1 for i in range(len(s)): if dic.get(s[i], 0) == 1: return i return -1 \"]},\"481\":{\"h\":\"替换字符串中的空格\",\"t\":[\"请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy. 则经过替换之后的字符串为We%20Are%20Happy。\",\"这道题目用python 实现比较简单：\",\"class Solution: def replaceSpace(self, s): res = '' for ch in s: if ch == ' ': res += '%20' else: res += ch return res \",\"但是用 C++ 实现会比较麻烦：\",\"class Solution { public: void replaceSpace(char *str,int length) { char s; int newlen = length; for(int i = 0; str[i] != '\\\\0'; i++) { if(str[i] == ' ') { newlen += 2; } } str = (char *)malloc(newlen * sizeof(char)); for(int i = newlen - 1; i >= 0; i--) { if(str[i] == ' ') { str[i] = '0'; str[i - 1] = '2'; str[i - 2] = '%'; } else { str[i] = str[length]; length--; } } } }; \",\"放在这里可以参考。\"]},\"482\":{\"c\":[\"Algorithm\"]},\"483\":{\"c\":[\"algorithm\",\"leetcode\",\"string\"]},\"484\":{\"h\":\"Tree\"},\"485\":{\"h\":\"Preorder Traversal\"},\"486\":{\"h\":\"多叉树的前序遍历\",\"t\":[\"多叉树的前序遍历，给定多叉树，用数组表示：root = [1,null,3,2,4,null,5,6], 每个层级之间用 null 进行隔离，根据这个输出这棵树的前序遍历结果。\",\"题目中提到了，递归的方法比较简单，希望我们用迭代的方法进行求解。\",\"题目链接如下：LC589 N 叉树的前序遍历\",\"需要遍历的多叉树数据结构定义如下：\",\"class Node: def __init__(self, val=None, children=None): self.val = val self.children = children \",\"递归法\",\"递归法的实现如下：\",\"class Solution: def preorder(self, root: 'Node') -> List[int]: res = [] self.dfs(root, res) return res def dfs(self, root: 'Node', res: List[int]) -> List[int]: if not root: return None res.append(root.val) for child in root.children: self.dfs(child, res) \",\"我们定义一个 res 用于存储最终结果，然后先遍历 root, 再遍历 root 所有的子节点，因为存储的时候按照从左到右的顺序存储，因此这种遍历是可以达到前序遍历的效果的。\",\"迭代法\",\"前序遍历的迭代，要求根-左-右的顺序返回各个节点，我们给出迭代的解法如下所示：\",\"class Solution: def preorder(self, root: 'Node') -> List[int]: if root is None: return [] stack = [root] res = [] while stack: node = stack.pop() if node is not None: res.append(node.val) # 栈顶元素是左侧元素 stack.extend(node.children[::-1]) return res \",\"我们仔细研究一下，这个迭代中有几个关键点：\",\"使用了栈\",\"把 node 的 children 逆序入栈，保证了先出栈的元素一定是最左侧的\",\"多多理解，十分巧妙！\"]},\"487\":{\"h\":\"二叉树的前序遍历\",\"t\":[\"递归法:\",\"@todo\",\"迭代法:\",\"@todo\"]},\"488\":{\"h\":\"Level Order Traversal\"},\"489\":{\"h\":\"二叉树的层次遍历\"},\"490\":{\"h\":\"Inorder Traversal\"},\"491\":{\"h\":\"Trie 前缀树\",\"t\":[\"@todo 实现前缀树\",\"https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/shi-xian-trie-qian-zhui-shu-by-leetcode-ti500/\"]},\"492\":{\"h\":\"BST\",\"t\":[\"Advantages of BST(Binary Search Tree) over Hash Table\",\"We can get all keys in sorted order by just doing Inorder Traversal of BST.\",\"Doing order statistics, finding closest lower and greater elements, doing range queries are easy to do with BSTs.\",\"BSTs are easy to implement compared to hashing, we can easily implement our own customized BST.\",\"...\",\"Hash table supports following operations in Θ(1) time: search insert and delete, BST is O(logn) for these operation.\"]},\"493\":{\"h\":\"BST 中序遍历\",\"t\":[\"解法参考代码:\",\"Recursive\",\"class Solution: def inorderTraversal(self, root): res = [] self.inorder(root, res) return res def inorder(self, root, res): if not root: return if root.left: self.inorder(root.left, res) res.append(root.val) if root.right: self.inorder(root.right, res) \"]},\"494\":{\"h\":\"LC653 两数之和 IV - 输入 BST\",\"t\":[\"给定一个二叉搜索树 root 和一个目标结果 k，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。\",\"这个题目需要用到二叉搜索树和两数之和解法的一些特性：\",\"二叉搜索树中序遍历出的结果是有序的（左根右）\",\"两数之和问题可以使用双指针来求解，或者使用 hash map\"]},\"495\":{\"h\":\"解法1：DFS + hash map\",\"t\":[\"这个解法的核心思路就是，把这个 BST 当作普通的二叉树处理，然后使用 hash map 记录元素出现的个数，比较直观的解法，其实现代码如下：\",\"class Solution: def __init__(self): self.dic = collections.defaultdict(int) def findTarget(self, root: Optional[TreeNode], k: int) -> bool: if not root: return False if k - root.val in self.dic.keys(): return True self.dic[root.val] += 1 return self.findTarget(root.left, k) or self.findTarget(root.right, k) \"]},\"496\":{\"h\":\"解法2：中序遍历 + 双指针\",\"t\":[\"由于我们知道 BST 的中序遍历出来的结果是升序的，所以说我们可以把中序遍历的结果保存起来，然后用双指针去找，看有没有结果。\",\"在此复习一下二叉树的中序遍历，中序遍历的解法可以看上文总结。\",\"class Solution: def findTarget(self, root: Optional[TreeNode], k: int) -> bool: # 中序遍历 BST res = [] def dfs(root: Optional[TreeNode]): if not root: return dfs(root.left) res.append(root.val) dfs(root.right) dfs(root, res) # 此时 res 已经是升序了，我们使用双指针 l, r = 0, len(res) - 1 # 这边 while l < r 也可以 while l != r: if res[l] + res[r] == k: return True elif res[l] + res[r] > k: r -= 1 else: l += 1 return False \"]},\"497\":{\"h\":\"解法3：迭代 + 双指针\",\"t\":[\"这个解法不再需要额外的空间消耗，比较不错。\",\"@todo\"]},\"498\":{\"h\":\"删除二叉搜索树中的节点\"},\"499\":{\"h\":\"LC450 删除二叉搜索树中的节点\",\"t\":[\"这个解法一是我一年前（2021）的解法，如下所示，写的还是比较清晰的：\",\"# Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution: def get_successor(self, root): \\\"\\\"\\\"获取root的后继节点 1. 定位到 root 右子树 2. 寻找右子树中最靠左的节点 \\\"\\\"\\\" root = root.right while root.left: root = root.left return root def get_precursor(self, root): \\\"\\\"\\\"获取root的前驱节点 1. 定位到 root左子树 2. 寻找左子树中最靠右的节点 \\\"\\\"\\\" root = root.left while root.right: root = root.right return root def deleteNode(self, root: TreeNode, key: int) -> TreeNode: if not root: return None if key == root.val: # 删除 # 待删除的接地那没有子节点 if not root.left and not root.right: root = None # 如果要删除的节点只有左节点 elif root.left and not root.right: root = root.left # 只有右节点同理 elif root.right and not root.left: root = root.right # 如果左右节点都有，从左子树中找到最大的节点，或者右子树中找到最小的节点来替换自己 else: # 找到后继节点 succeeded = self.get_successor(root) root.val = succeeded.val root.right = self.deleteNode(root.right, succeeded.val) elif root.val > key: # 比 key 大，找左边的 root.left = self.deleteNode(root.left, key) else: root.right = self.deleteNode(root.right, key) return root \",\"需要分析一下，先看如下的函数，要寻找某个节点右子树中最左边的那个节点：\",\" def get_successor(self, root): \\\"\\\"\\\"获取root的后继节点 1. 定位到 root 右子树 2. 寻找右子树中最靠左的节点 \\\"\\\"\\\" root = root.right while root.left: root = root.left return root \",\"定位到 root 的右子树（右节点）\",\"右子树的最坐标节点找到，找到后返回\",\"这个思路十分巧妙，应当加以学习。\",\"我们在主流程中（遇到 root == key, 并且左右子树都存在的情况），我们的方法是：\",\"首先找到 root 右子树的最左边的那个节点，这个节点将来就是用来替换 root 的，这么做的原因在于，替换掉以后，这个节点的左子树都比它小，右子树都比他大\",\"我们找到以后把找到的最左边节点的值赋值给 root, 然后递归调用 root 的右子树，删除找到的最左边节点这个节点。在这里为什么递归会起作用呢？这是因为我们在递归到最左边子树的时候，这时候的这个节点必然是没有左子树的，所以符合我们上面讨论的只有右边节点这个递归条件，我们就可以解决了。\",\"来看看一年后的解法是怎么写的：\",\"class Solution: def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]: if not root: return root if root.val == key: # if not root.left and not root.right: # root = None # elif not root.left and root.right: # root = root.right # elif not root.right and root.left: # root = root.left if not root.left or not root.right: root = root.left if root.left else root.right else: successor = root.right while successor.left: successor = successor.left root.val = successor.val root.right = self.deleteNode(root.right, successor.val) elif root.val > key: root.left = self.deleteNode(root.left, key) else: root.right = self.deleteNode(root.right, key) return root \",\"注意到我们简化了一长串的 if-elif-else, 只是做了逻辑上面的优化，令代码更加优雅。\"]},\"500\":{\"h\":\"Arm\",\"t\":[\"This is about ARM research.\"]},\"501\":{\"h\":\"Arm In-line Assembly\"},\"502\":{\"h\":\"__asm\",\"t\":[\"Example[1]:\",\"#include <stdio.h> int add(int i, int j) { int res = 0; __asm (\\\"ADD %[result], %[input_i], %[input_j]\\\" : [result] \\\"=r\\\" (res) : [input_i] \\\"r\\\" (i), [input_j] \\\"r\\\" (j) ); return res; } int main(void) { int a = 1; int b = 2; int c = 0; c = add(a,b); printf(\\\"Result of %d + %d = %d\\\\n\\\", a, b, c); } \",\"我们仔细研究上述的例子，可以看到，其内嵌了一条 ADD 指令，其语法如下所示：\",\"__asm [volatile] (code); /* Basic inline assembly syntax */ \",\"其中的 code 就是我们需要内嵌的汇编代码，其中 [volatile] 是可选的，后续我们再对此进行说明。\",\"如果将 code 展开的话，如下所示：\",\"/* Extended inline assembly syntax */ __asm [volatile] (code_template : output_operand_list [: input_operand_list [: clobbered_register_list]] ); \",\"我们总共有 3 个 ”:“, 每一个后面都有不同的含义，下面对其进行具体说明。（注意 [] 符号包含住表示的是这个参数是可选的）\"]},\"503\":{\"h\":\"output\",\"t\":[\"第一个 ：冒号后面跟汇编代码的输出；有几个细节需要注意：\",\"\\\"=r\\\" 而不是 \\\"r\\\", 在输出中\",\"%[variable] 的 % 是在最前面的\"]},\"504\":{\"h\":\"input\",\"t\":[\"第二个后面跟汇编代码的输入，如下所示：\",\"__asm (\\\"ADD R0, %[input_i], %[input_j]\\\" : /* This is an empty output operand list */ : [input_i] \\\"r\\\" (i), [input_j] \\\"r\\\" (j) ); \",\"在这个例子中，我们将 input_i 和 input_j 的值相加放入寄存器 R0 中，每一个 input 都使用逗号分隔开，三个字段 [input_i] \\\"r\\\" (i) 的含义分别是符号名称，约束字符串和 C 表达式。\"]},\"505\":{\"h\":\"clobbered_register_list\",\"t\":[\"这个里面指定寄存器，嵌入式汇编代码中指定的寄存器可能会产生冲突，因此需要把这些寄存器列举出来，表示其可以在编译的时候被重命名。\"]},\"506\":{\"h\":\"Real Example\"},\"507\":{\"h\":\"prfm\",\"t\":[\"下面例子是实战中写的汇编示例，使用了 prfm 指令：\",\" #if defined(__arm__) int i=0, j=0, res=0; __asm__ __volatile__( \\\"add %[result], %[input_i], %[input_j]\\\\n\\\\t\\\" : [result] \\\"+r\\\" (res) : [input_i] \\\"r\\\" (i), [input_j] \\\"r\\\" (j) ); __asm__ __volatile__( \\\"prfm pldl2strm, [%[ptr], #256]\\\" : : [ptr] \\\"r\\\" (ref) ); #endif \"]},\"508\":{\"h\":\"__builtin_prefetch()\",\"t\":[\"__builtin_prefetch() 接口的使用，我们列举几个 art 的例子，看一下大佬门是怎么使用预取，保证提前量，或者将预取的功效发挥到最大的：\",\"while (mark_stack_pos_ != 0 && prefetch_fifo.size() < kFifoSize) { mirror::Object* const mark_stack_obj = mark_stack_[--mark_stack_pos_].AsMirrorPtr(); DCHECK(mark_stack_obj != nullptr); __builtin_prefetch(mark_stack_obj); prefetch_fifo.push_back(mark_stack_obj); } if (UNLIKELY(prefetch_fifo.empty())) { break; } obj = prefetch_fifo.front(); prefetch_fifo.pop_front(); \",\"上述代码的预取位置在 push_back 前面，因为堆栈操作需要一定的时延，所以说利用这个时延在堆栈之前进行预取。\",\"其次就是利用 fifo 数据结构，但是在实践中使用该方法，并无太大的增益。\"]},\"509\":{\"h\":\"prefetch in for loop\",\"t\":[\"uint8_t* begin = reinterpret_cast<uint8_t*>(new_run) + headerSizes[idx]; for (size_t i = 0; i < num_of_bytes; i += kPrefetchStride) { __builtin_prefetch(begin + i); } \",\"如果需要保证提前量，可以如下例子：\",\" size_t bytes_freed = 0; for (size_t i = 0; i < num_ptrs; i++) { mirror::Object* ptr = ptrs[i]; const size_t look_ahead = 8; if (kPrefetchDuringDlMallocFreeList && i + look_ahead < num_ptrs) { // The head of chunk for the allocation is sizeof(size_t) behind the allocation. __builtin_prefetch(reinterpret_cast<char*>(ptrs[i + look_ahead]) - sizeof(size_t)); } bytes_freed += AllocationSizeNonvirtual(ptr, nullptr); } \"]},\"510\":{\"h\":\"mrs pmu\",\"t\":[\"下面这个是读取 PMU 寄存器中的数据的示例：\",\"static inline uint64_t arch_counter_get_cntpct() { uint64_t cval = 0; #if defined(__aarch64__) __asm__ __volatile__( // \\\"mrs %[res], PMCCNTR_EL0\\\" \\\"mrs %[res], CNTVCT_EL0\\\" : [res] \\\"=r\\\" (cval) : ); // LOG(INFO) << \\\"[PREFETCH], COUNTER IS \\\" << cval; #endif return cval; } \",\"CNTVCT_EL0 寄存器为一个不需要开启用户态访问权限也能访问到的寄存器。\"]},\"511\":{\"h\":\"memcpy\",\"t\":[\"下面这个是嵌入 memecpy 的例子：\",\"#if defined(__aarch64__) && defined(xxx) if () { // copy len 16 __asm__ __volatile__( \\\"ldp x5, x4 ,[%[src], #8]\\\\n\\\\t\\\" \\\"stp x5, x4 ,[%[dst], #8]\\\\n\\\\t\\\" : : [src] \\\"r\\\" (from_ref), [dst] \\\"r\\\" (to_ref) : \\\"x4\\\", \\\"x5\\\" ); } else if () { // copy length 24 __asm__ __volatile__( \\\"ldp x5, x4 ,[%[src], #8]\\\\n\\\\t\\\" \\\"ldr x6 ,[%[src], #24]\\\\n\\\\t\\\" \\\"stp x5, x4 ,[%[dst], #8]\\\\n\\\\t\\\" \\\"str x6 ,[%[dst], #24]\\\\n\\\\t\\\" : : [src] \\\"r\\\" (from_ref), [dst] \\\"r\\\" (to_ref) : \\\"x4\\\", \\\"x5\\\", \\\"x6\\\" ); } else if () { // copy length 32 __asm__ __volatile__( \\\"ldp x5, x4 ,[%[src], #8]\\\\n\\\\t\\\" \\\"ldp x7, x6 ,[%[src], #24]\\\\n\\\\t\\\" \\\"stp x5, x4 ,[%[dst], #8]\\\\n\\\\t\\\" \\\"stp x7, x6 ,[%[dst], #24]\\\\n\\\\t\\\" : : [src] \\\"r\\\" (from_ref), [dst] \\\"r\\\" (to_ref) : \\\"x4\\\", \\\"x5\\\", \\\"x6\\\", \\\"x7\\\" ); } else { memcpy(xxx); } #else // some code #endif \",\"例子比较长，但是可以供参考，这是比较完备的举例。\",\"ARM 官方文档↩︎\"]},\"512\":{\"c\":[\"Arm\"]},\"513\":{\"h\":\"ARM Instructions\"},\"514\":{\"h\":\"Abstract\",\"t\":[\"本文章作为一个 ARM 指令的速查表使用。\",\"MNEMONIC{S}{condition} {Rd}, Operand1, Operand2 \",\"上面就是 ARM 汇编指令的一个通用的格式说明，下面对每一个字段进行具体的说明：\",\"MNEMONIC: 指令的助记符，如 ADD\",\"S: 可选的扩展位，如果指令后带了这个，将根据计算结果更新 CPSR 寄存器中相应的 FLAG\",\"condition: 执行条件，如果没有指定，则默认位 AL（无条件执行）\",\"Operand1: 第一个操作数，可以是寄存器或者立即数\",\"Operand2: 第二个操作数，可变的，可以是一个寄存器或者立即数，甚至带移位操作的寄存器\",\"对于 Operand2 的解释和研究举例：\",\"#123 @ - 立即数 Rx @ - 寄存器，如 R1 Rx, ASR n @ - 对寄存器中的值进行算术右移 n 位后的值 Rx RRX @ - 对寄存器中的值进行带扩展的循环右移 1 位后的值 \"]},\"515\":{\"h\":\"Instruction\",\"t\":[\"Instruction\",\"Example\",\"Remark\",\"SUB\",\"不进位的减法\"]},\"516\":{\"h\":\"sub\",\"t\":[\"减法指令，并且是不进位的减法。\"]},\"517\":{\"h\":\"b\",\"t\":[\"（branch）跳转到某地址（无返回）, 不会改变 lr (x30) 寄存器的值；一般是本方法内的跳转，如 while 循环，if else 等 ，如：\",\"b LBB0_1 ; 直接跳转到标签 ‘LLB0_1’ 处开始执行 \",\"b 指令的一些变体[1]\",\"bl: 跳转到标号出执行\",\"b.le ：判断上面cmp的值是小于等于 执行标号，否则直接往下走\",\"b.ge 大于等于 执行地址 否则往下\",\"b.lt 判断上面camp的值是 小于 执行后面的地址中的方法 否则直接往下走\",\"b.gt 大于 执行地址 否则往下\",\"b.eq 等于 执行地址 否则往下\",\"b.hi 比较结果是无符号大于，执行地址中的方法，否则不跳转\",\"b.hs 指令是判断是否无符号小于\",\"b.ls 指令是判断是否无符号大于\",\"b.lo 指令是判断是否无符号大于等于\",\"我们总结了一些常见的跳转指令的集合，如下所示：\",\"[ 'b.pl', 'b.ge', 'b.ls', 'b.vs', 'tbnz', 'b.gt', 'b', 'cbnz', 'svc', 'b.mi', 'b.lo', 'tbz', 'b.ne', 'b.hi', 'br', 'b.le', 'b.eq', 'ret', 'bl', 'b.lt', 'blr', 'b.hs', 'cbz' ] \"]},\"518\":{\"h\":\"tst\",\"t\":[\"把一个寄存器的内容和另一个寄存器的内容进行按位与操作，并根据结果更新 CPSR 中条件标志位的值，当前运算结果为 1, 则 Z=0, 反之 Z=1.\"]},\"519\":{\"h\":\"fcvtz\",\"t\":[\"浮点数转换为定点数。\"]},\"520\":{\"h\":\"cbz\",\"t\":[\"和 0 比较（Compare），如果结果为零（Zero）就转移（只能跳到后面的指令）;\",\"CBZ Rn, label \",\"Rn: is the register holding the operand.\",\"label: is the branch destination.\",\"同样的，还有不为 0 的时候跳转：\",\"CBNZ Rn, label \"]},\"521\":{\"h\":\"tbnz\",\"t\":[\"TBNZ X1, #3, label \",\"上述汇编的含义为，如果 x1 寄存器的第 3 位不为 0, 则跳转到 label.\",\"还有用法如下：\",\"tbnz w16, #0, #+0xc (addr 0x1baecc) \",\"按照上述的例子可以推断，判断 w16 的第 0 位是否为 0, 如果不为 0, 则跳转到上述地址。\"]},\"522\":{\"h\":\"sxtw\",\"t\":[\"sxtw 指令的使用方法如下：\",\"sxtw x7, w6 \",\"其含义为将 w6 进行符号位扩展，并传给 x7; w6 为 x7 的低 32 位.\",\"这个博客上面展示了一个 sxtw 导致的惨案：一个include引起的惨案\"]},\"523\":{\"h\":\"内存读写\",\"t\":[\"ARM 使用加载存储模型进行内存访问，这意味着只有加载/存储（LDR 和 STR）指令才能访问内存。在 x86 上，大多数指令都可以直接对内存中的数据进行操作，而在ARM上，必须先将内存中的数据从内存移到寄存器中，然后再进行操作。这意味着递增ARM上特定内存地址上的 32 位值将需要三种类型的指令（加载，递增和存储），以便首先将特定地址上的值加载到寄存器中，在寄存器中递增值，以及将其从寄存器存储回存储器[2]。\"]},\"524\":{\"h\":\"ldr\",\"t\":[\"加载一个寄存器：\",\"32 位常量\",\"地址\",\"用于从存储器中将一个 32 位的字数据传送到目的寄存器中。\",\"将寄存器 x1 的值作为地址，取该内存地址的值放入寄存器 x0 中：x0 <- [x1]\",\"ldr x0, [x1] \",\"将栈内存 [sp + 0x8] 处的值读取到 w8 寄存器中\",\"ldr w8, [sp, #0x8] \",\"将寄存器 x1 的值加上 4 作为内存地址, 取该内存地址的值放入寄存器 x0 中, 然后将寄存器 x1 的值加上 4 放入寄存器 x1 中: x0 <- [x1 + 4]; x1 <- x1 + 4\",\"ldr x0, [x1, #4]! \",\"将寄存器 x1 的值作为内存地址，取内该存地址的值放入寄存器 x0 中, 再将寄存器 x1 的值加上 4 放入寄存器 x1 中\",\"ldr x0, [x1], #4 \",\"将寄存器 x1 和寄存器 x2 的值相加作为地址，取该内存地址的值放入寄存器 x0 中\",\"ldr x0, [x1, x2] \"]},\"525\":{\"h\":\"ldur\",\"t\":[\"和 ldr 一样，只不过，ldur 后面的立即数是负数。\",\"ldur w16, [x5, #-8] \"]},\"526\":{\"h\":\"ldp\",\"t\":[\"举例来说：\",\"ldp x20, x19, [sp, #0x150] \",\"简单可以理解为将栈弹出到 x20, x19 中。\"]},\"527\":{\"h\":\"ldrb\",\"t\":[\"和下文中的 strb 的含义一样，将内存中的值读入寄存器中，并且只读取一个字节，也就是说把取到的数据放在目的寄存器的低 8 位，然后将高 24 位填充位 0。\",\"ldrb w2, [x5, x2] \",\"读取 x5 + x2 内存的值并且存储其低 8 位到 w2 中。\",\"关于其硬件原理的介绍，也可以参考这篇博客[3]：ARM的STRB和LDRB指令分析\"]},\"528\":{\"h\":\"ldrh\",\"t\":[\"ldrh 和 ldrb 一样，不同之处在于 ldrh 会读入半个字长，就是 4 位。\",\"ldrh w2, [x5, x2, lsl #1] \",\"将 x5 + (x2 << 1) 的地址对应的值放入寄存器 w2 中，注意只放入读取到的值的最低 4 位，剩余的高 28 位填 0.\"]},\"529\":{\"h\":\"ldrsw\",\"t\":[\"在 ARM 架构中，LDRSW 指令是用于从内存中读取一个 32 位带符号整数到寄存器的指令。LDRSW 的全称是“Load Register Signed Word”，其中的 S 表示的是 Signed，即有符号类型。\",\"具体来说，LDRSW 指令的语法如下所示：\",\"LDRSW Xt, [Xn{,#0|,#Imm}] \",\"其中：\",\"Xt：目标寄存器，用于存储从内存中读取的带符号整数。\",\"Xn：基地址寄存器，用于存储待读取数据的内存地址。\",\"#Imm：偏移量，用于计算实际要读取的内存地址，可以是 1~4 字节的立即数，根据指令变体的不同，也可能存在其他可选的偏移量格式。\",\"执行 LDRSW 指令时，它会从指定的内存地址中取得一个 32 位带符号整数，将其符号位扩展（sign extension）至 64 位，并将结果存储到目标寄存器中。需要注意的是，LDRSW 指令只能读取 32 位的有符号整数，如果需要读取其它类型的数据，则需要使用其他类型的 Load 指令。\",\"总之，LDRSW 指令是 ARM 架构中的一种用于从内存中读取带符号整数的指令，可以广泛应用于各种需要使用 32 位有符号整数的场景中。\"]},\"530\":{\"h\":\"adrp\",\"t\":[\"adrp x23, #-0x3ed000 (addr -0x234000) \",\"adrp 一般用于获得地址，就我个人的理解而言，adrp 将当前 PC 所在的页的基地址计算得到并存储到寄存器中，后续根据这个寄存器中的基地址进行偏移运算。\",\"引用一个博客中的一段描述[4]：\",\"adrp指令根据 PC 的偏移地址计算目标页地址。首先 adrp 将一个 21 位有符号立即数左移 12 位，得到一个 33 位的有符号数（最高位为符号位），接着将 PC地址的低 12 位清零，这样就得到了当前 PC 地址所在页的地址，然后将当前 PC 地址所在页的地址加上 33 位的有符号数，就得到了目标页地址，最后将目标页地址写入通用寄存器。此处页大小为 4KB，只是为了得到更大的地址范围，和虚拟内存的页大小没有关系。通过 adrp 指令，可以获取当前 PC 地址 ±4GB范围内的地址。通常的使用场景是先通过 adrp 获取一个基地址，然后再通过基地址的偏移地址获取具体变量的地址。\",\"从上面的描述中我们可以看出，adrp 的结果是与当前的 PC 有关的，通过当前 PC 地址的偏移地址计算目标地址，因此属于位置无关码；在示例中括号也给出了最终的偏移地址。\"]},\"531\":{\"h\":\"stp\",\"t\":[\"入栈指令，store pair\"]},\"532\":{\"h\":\"str\",\"t\":[\"(store register) 将寄存器中的值写入到内存中，如：\",\"str w9, [sp, #0x8] \",\"将寄存器 w9 中的值保存到栈内存 [sp + 0x8] 处。\"]},\"533\":{\"h\":\"strb\",\"t\":[\"(store register byte) 将寄存器中的值写入到内存中（只存储一个字节），如：\",\"strb w8, [sp, #7] \",\"将寄存器 w8 中的低 1 字节的值保存到栈内存 [sp + 7] 处\"]},\"534\":{\"h\":\"stlxr\",\"t\":[\"在 ARM 架构中，STLXR 指令是原子性的存储、条件执行和即时跳转指令。该指令用于在多核创建共享内存并发访问的场景中，对数据进行原子性操作，以保证数据的一致性和正确性。\",\"具体来说，STLXR 指令的含义如下：\",\"STLXR: Store Exclusive Register\",\"Rd: 目标寄存器，用于存储“存储操作”是否成功，取值为 0 或者 1。\",\"Rt: 源寄存器，其中存储“写入数据”。\",\"Rn: 目标地址寄存器，其中存储需要写入数据的内存地址。\",\"当执行 STLXR 指令时，它会将目标存储地址（Rn）处的数据与当前处理器正在执行的 CPU 的标识进行比较。如果这个位置的值与标识符相同，则将源寄存器（Rt）中的数据写入该位置，并将目标寄存器（Rd）设置为 1，表示存储成功；否则，将目标寄存器设置为 0，表示存储失败。\",\"可以看出，STLXR 指令实现了一种快速锁定和释放内存地址的机制，使得在多核场景中，多个 CPU 可以同时读取和修改共享内存的数据，而不会出现资源竞争的情况。\"]},\"535\":{\"h\":\"位操作\"},\"536\":{\"h\":\"ubfx\",\"t\":[\"举例说明：\",\"ubfx x10, x3, #3, #29 \",\"含义为从 x3 寄存器的第 3 位开始，提取 29 位到 x10 寄存器中。剩余高位用 0 填充，即 无符号位域提取指令。\",\"UBFX 指令一般有两种用法：\",\"UBFX Wd, Wn, #lsb, #width ; 32-bit UBFX Xd, Xn, #lsb, #width ; 64-bit \"]},\"537\":{\"h\":\"and\",\"t\":[\"AND 为按位与操作。\",\"我们结合一个 AND 指令的指令编码来分析一下 AND 指令中的细节。\",\"指令如下：\",\"d2ffffe9 mov x9, #-281474976710656 \",\"二进制编码如下：\",\"1011 0010 0100 1111 1111 1011 1110 1001 \",\"结合 arm v8 手册，我们 @todo，以后研究该命令。\"]},\"538\":{\"h\":\"lsl\",\"t\":[\"lsl 为逻辑左移指令。\",\"lsl w9, w11, w9 \",\"左移指令分两种，可以给定寄存器或者立即数进行移位：\",\"LSL <Wd>, <Wn>, #<shift> ; 32-bit LSL <Xd>, <Xn>, #<shift> ; 64-bit \",\"or\",\"LSL <Wd>, <Wn>, <Wm> ; 32-bit LSL <Xd>, <Xn>, <Xm> ; 64-bit \"]},\"539\":{\"h\":\"lsr\",\"t\":[\"lsr 为右移指令，用法和 lsl 相似。\",\"https://juejin.cn/post/6978137866152968222↩︎\",\"https://azeria-labs.com/memory-instructions-load-and-store-part-4/↩︎\",\"ARM的STRB和LDRB指令分析↩︎\",\"https://blog.csdn.net/u011037593/article/details/121877496↩︎\"]},\"540\":{\"h\":\"Papers\",\"t\":[\"This is some research about computer architecture papers.\"]},\"541\":{\"h\":\"VP - HPCA 14\",\"t\":[\"本章节研究文章 Practical Data Value Speculation for Future High-end Processors[1], 简称 HPCA 14, 这篇文章主要是研究 CVP, 一种上下文有关的、Load value 的预测器。\"]},\"542\":{\"h\":\"Abstract\",\"t\":[\"Dedicating more silicon area to single thread performance will necessarily be considered as worthwhile in future – potentially heterogeneous – multicores.\",\"In particular, Value prediction (VP) was proposed in the mid 90’s to enhance the performance of high-end uniprocessors by breaking true data dependencies.\",\"作者说在未来的多核架构中，将更多的硅面积用于提高单线程的性能是值得的。\",\"特别是 VP 的出现，可以打破真正的数据依赖来提高高端单处理器的性能。\",\"💚💚 流水线并行 & 处理器并行\",\"流水线：提高指令的并行度；流水线聚焦于指令，所以是 uniprocessor\",\"多处理器：提高处理器的并行度\",\"In this paper, we reconsider the concept of Value Prediction in the contemporary context and show its potential as a direction to improve current single thread performance.\",\"作者在当代语境(contemporary context) 下重新思考了 VP 的概念，并且发觉其作为提高单线程性能方向的一个潜力。\",\"First, building on top of research carried out during the previous decade on confidence estimation, we show that every value predictor is amenable to very high prediction accuracy using very simple hardware. This clears the path to an implementation of VP without a complex selective reissue mechanism to absorb mispredictions.\",\"Prediction is performed in the in-order pipeline frond-end and validation is performed in the in-order pipeline back-end, while the outof-order engine is only marginally modified.\",\"首先作者阐述了简单的硬件就可以实现精确度较高的 VP, 也不用很复杂的 selective reissue 机制。\",\"单线程流水线 vs 多线程流水线\",\"@todo 🔴🔴🔴\",\"Second, when predicting back-to-back occurrences of the same instruction, previous context-based value predictors relying on local value history exhibit a complex critical loop that should ideally be implemented in a single cycle.\",\"To bypass this requirement, we introduce a new value predictor VTAGE harnessing the global branch history. VTAGE can seamlessly predict back-to-back occurrences, allowing predictions to span over several cycles. It achieves higher performance than previously proposed context-based predictors.\",\"其次，对于同一个指令的 back-to-back 出现，以前基于 local value history 的方法会显示出一个复杂的关键循环。为了解决这个问题，作者引入了一个新的预测器 VTAG, 利用全局分支历史，VTAG 可以无缝预测 back-to-back 的发生，其允许预测跨越几个周期。相比于以前的基于上下文的预测器，实现了更高的性能。\",\"🧡🧡 一些理解\",\"VTAGE 利用了全局分支历史，是如何体现的？\",\"span over several cycles, 如何跨越几个 cycle?\"]},\"543\":{\"h\":\"Introduction\",\"t\":[\"Gabbay et al. and Lipasti et al. independently proposed Value Prediction to speculatively ignore true data dependencies and therefore shorten critical paths in computations.\",\"VP 可以缩短关键路径。\",\"Said penalty can be as high as the cost of a branch misprediction, yet the benefit of an individual correct prediction is often very limited.\",\"错误惩罚可能和分支预测的错误惩罚一样高，所以单个正确预测的收益十分有限。\",\"As a consequence, high coverage is mostly irrelevant in the presence of low accuracy.\",\"在精度极低的情况下，高覆盖率反而是没有必要的。\",\"基于以上两段话，预测的设计思路在于：提高预测的准确率，可以接受适当降低覆盖率；故此作者提出 FPC, 其定义如下：\",\"The Forward Probabilistic Counters (FPC) scheme yields value misprediction rates well under 1%, at the cost of reasonably decreasing predictor coverage.\",\"FPC 的错误预测率远低于 1%，同时牺牲了预测覆盖率。\",\"使用 FPC 的好处如下：\",\"Our experiments show that when FPC is used, no complex repair mechanism such as selective reissue is needed at execution time.\",\"使用 FPC 的话可以避免使用如 selective reissue 这种复杂机制。\",\"本文的贡献主要由两点：\",\"First, we present a simple yet efficient confidence estimation mechanism for value predictors. The Forward Probabilistic Counters (FPC) scheme yields value misprediction rates well under 1%, at the cost of reasonably decreasing predictor coverage.\",\"All classical predictors are amenable to this level of accuracy.\",\"FPC is very simple to implement and does not require substantial change in the counters update automaton. Our experiments show that when FPC is used, no complex repair mechanism such as selective reissue is needed at execution time. Prediction validation can even be delayed until commit time and be done in-order: Complex and power hungry logic needed for execution time validation is not required anymore. As a result, prediction is performed in the in-order pipeline front-end, validation is performed in the in-order pipeline back-end while the out-of-order execution engine is only marginally modified.\",\"第一点是提出了 FPC, 一个新的计数器。\",\"实现简单，不需要对计数器更新自动机进行实质性更改\",\"在执行阶段不需要使用复杂的修复机制如 selective reissue\",\"Validation 可以推迟到 commit 阶段并按顺序完成；这意味着复杂耗电的 execution 阶段的 valudation 不再需要了\",\"out-of-order engine 只需做轻微修改\",\"随想\",\"FPC 是一种置信度的衡量机制。FPC 的作用在于降低 misprediction rate.\",\"Second, we introduce the Value TAGE predictor (VTAGE). This predictor is directly derived from research propositions on branch predictors [21] and more precisely from the indirect branch predictor ITTAGE.\",\"VTAGE is the first hardware value predictor to leverage a long global branch history and the path history. Like all other value predictors, VTAGE is amenable to very high accuracy thanks to the FPC scheme.\",\"VTAGE is shown to outperform previously proposed context-based predictors such as Finite Context Method and complements stride-based predictors.\",\"第二点是提出了 VTAGE 预测器。\",\"VTAGE 是一个硬件 value predictor. 其利用了长期全局 branch history 和 path history.\",\"由于 FPC 机制，VTAGE 具有很高的精度\",\"随想\",\"上述这段话定义了 VTAG, 其基本属性是值预测器，但是利用了：\",\"global branch history\",\"path history\",\"Moreover, we point out that unlike two-level predictors (in particular, predictors based on local value histories), VTAGE can seamlessly predict back-to-back occurrences of instructions, that is, instructions inside tight loops. Practical implementations are then feasible.\",\"更加厉害的是，与两级预测器，特别是基于 local value history 的预测器不同的是，VTAGE 可以完美预测指令 back-to-back 的出现，即 tight loops.\",\"下面这段话比较难以理解：\",\"Prediction validation can even be delayed until commit time and be done in-order: Complex and power hungry logic needed for execution time validation is not required anymore.\",\"预测的验证可以在 commit 阶段完成？所以说简化了验证的步骤。\",\"注意\",\"❌❌❌ 但是这样的话，我们如何保证预测的正确性呢？\",\"结合下面这段话，看能否尝试理解：\",\"As a result, prediction is performed in the in-order pipeline front-end, validation is performed in the in-order pipeline back-end while the out-of-order execution engine is only marginally modified.\",\"上述也是原文中的摘录。\"]},\"544\":{\"h\":\"Questions\",\"t\":[\"🤷‍♂️🤷‍♂️🤷‍♂️ 从以上对于文章的阅读，我们需要从文章中找到以下问题的答案：\",\"FPC 的实现原理是什么？\",\"VTAGE 如何利用 global branch history 和 path history? 其与上下文有关是如何体现的？\",\"VATGE 如何解决 tight lopp 的问题？\"]},\"545\":{\"h\":\"Related Work on VP\",\"t\":[\"我们有必要研究一下相关的工作，看能否从中获得一些心得体会。\",\"Sazeides et al. refine the taxonomy of Value Prediction by categorizing predictors.\",\"上述作者将 predictors 分成了两类：\",\"Computational，计算的\",\"Context-based\",\"这两种方式是互补的因为它们擅长预测不同的指令（前文研究的 HPCA19 的文章也是使用了 4 个预测器，挖掘出来了互补的关系）。\",\"对于 Computational 预测器而言，🟢🟢🟢 典型的如 2-Delta Stride predictor 这种需要进行研究。对于 Computational 预测器而言，其通过应用一个 fucntion 去预测 values.\",\"对于 Context-based 的预测器而言，就是根据预测的历史来实现值的预测，典型的如 nth order Finite Context Method(FCM) 预测器，这些预测器一般使用 two-level 的预测结构：\",\"第一层结构是 VHT(Value History Table)\",\"第二层结构是 VPT(Value Prediction Table)\",\"VHT hash 到 VPT 上，VPT 上包含了实际的预测。需要注意，通常而言，VHT 和 VPT 都含有一个饱和计数器，以便于衡量置信度。\",\"Goeman 实现了 diff-FCM, 通过追踪 local history 中的 diff, 而不是 value 本身，这样达到了更加节省空间的目的。\",\"Zhou 实现了 gDiff 预测器，gDiff 计算了一个指令的结果和最后 n 个动态指令结果之间的 diff, 如果发现了一个 stable difference, 也可以称之为 stride, 则该指令的结果可以通过先前额指令进行预测。然而，gDiff 的缺陷在于，其依赖于另一个预测器在预测阶段去预测全局的投机值。但是正因为如此，gDiff 预测器可以被添加在任何 top of any predictor.\",\"本文提出来的 VTAGE 预测器可以理解为一个 context-based 的预测器，其中的 context 包括 global branch history 和 path history.\"]},\"546\":{\"h\":\"Motivation\",\"t\":[\"We identify two factors that will complicate the adaptation and implementation of value predictors in future processor cores.\",\"First, the misprediction recovery penalty and/or hardware complexity. Second the back-to-back predictions for two occurrences of the same instruction which can be very complex to implement while being required to predict tight loops.\",\"有两个因素可能使得预测器复杂化：\",\"Misprediction Recovery\",\"Back-to-back prediction\",\"A tight loop is a loop that loops many times and the loop body has few instructions.\"]},\"547\":{\"h\":\"Misprediction Recovery\",\"t\":[\"之前的很多研究都没有意识到 misprediction recovery 的复杂性，而只关注于准确率或者覆盖率，忽略了实际的加速效果。后续的很多研究也基本上忽略了与 misprediction recovery 相关的性能损失。\",\"Moreover, despite quite high coverage and reasonable accuracy, one observation that can be made from these early studies is that the average performance gain per correct prediction is rather small.\",\"上述话说明了，单个正确预测的收益比较有限。\",\"衡量 misprediction 的 recovery 的消耗可以分为两个因素：\",\"average misprediction penalty(处罚) Pvalue​\",\"absolute number of misprediction Nmisp​\",\"于是有总的错误预测惩罚计算如下：\",\"Trecov​=Pvalue​∗Nmisp​\",\"As we already pointed out, the total misprediction recovery cost can be minimized through two vehicles: Minimizing the individual misprediction penalty and/or minimizing the total number of mispredictions.\",\"从上述公式中我们可以得出结论，降低 cost 可以使用两种方式：\",\"降低单个预测错误惩罚\",\"最小化错误预测数量\"]},\"548\":{\"h\":\"Value Misprediction Scenarios\",\"t\":[\"处理器中目前已有两种机制去管理 value misprediciton recovery:\",\"pipline squashing\",\"selective reissue\",\"不同之处如下：\",\"They induce very different average misprediction penalties, but are also very different from a hardware complexity standpoint.\",\"这两者产生的平均错误预测惩罚不同，硬件复杂性也不同。\",\"💚💚 什么是 pipline squashing?\",\"暂时可以理解为 pipline flushing, clearing or squashing.\",\"💚💚 pipline squashing 做了什么事情？\",\"目前猜测的，需要继续研究。\",\"Pipeline squashing is already implemented to recover from branch mispredictions. On a branch misprediction, all the subsequent instructions in the pipeline are flushed and instruction fetch is resumed at the branch target. This mechanism is also generally used on load/store dependency mispredictions. Using pipeline squashing on a value misprediction is straightforward, but costly as the minimum misprediction penalty is the same as the minimum branch misprediction penalty. However, to limit the number of squashes due to VP, squashing can be avoided if the predicted result has not been used yet, that is, if no dependent instruction has been issued.\",\"pipline squashing 可以被用于分支预测失败的 recovery 中，也可以用与 VP 失败的 recovery 中，两者的代价是一致的。需要注意的是，VP 的 squash 可以被避免的，只要预测的结果还没有被应用，也就是说，没有 dependent instruction 被 issued.\",\"❌❌ selective reissue 不是很好理解，需要再理解一下。\",\"Selective reissue is implemented in processors to recover in case where instructions have been executed with incorrect operands, in particular this is used to recover from L1 cache hit/miss mispredictions (i.e. load-dependent instructions are issued after predicting a L1 hit, but finally the load results in a L1 miss). When the execution of an instruction with an incorrect operand is detected, the instruction as well as all its dependent chain of instructions are canceled then replayed.\"]},\"549\":{\"h\":\"Validation at Execution vs Validation at Commit Time\",\"t\":[\"下面是对于两种机制的对比：\",\"在实现的节点上，selective issue 必须是在 execution 的时候就实现了，其目的是为了限制错误预测的代价；而 pipeline squashing 则可以在 execution 或者 commit 的时候实现。\",\"pipeline squashing 在 execution 时间去 validate 预测必须重新设计 out-of-order engine, 除此之外，预测的 value 还必须在每个乱序的阶段传播，等等。综合来看，在 exec 阶段去验证比较复杂。\",\"反之，在 commit 后进行 pipeline squashing 可能会导致预测错误后代价较高，但是其实现机制较为简单，特别是对于 out-of-order 来说，不需要增加额外的复杂机制。\",\"简单使用表格进行概括：\",\"Validation at Execution\",\"Validation at Commit\",\"Pipeline Squashing\",\"- Results in a minimum misprediction penalty - Need to redesign the complete out-of-order engine- 20 ~ 40 cycle penalty\",\"- Results in a quite high average misprediction penalty - Do not reduce complex mechanisms in the out-of-order execution engine- 40 ~ 50 cycle penalty\",\"Selective Reissue\",\"- Must be implemented at execution time- 5 ~ 7 cycle penalty\",\"N/A\",\"如果选择 validation at execution 的话：\",\"However, validating predictions at execution time necessitates to redesign the complete out-of-order engine: The predicted values must be propagated through all the out-of-execution engine stages and the predicted results must be validated as soon as they are produced in this out-of- order execution engine.\",\"需要重新设计乱序引擎，预测的值需要在所有的 stage 传播并且预测的结果必须经过验证。\",\"On the contrary, pipeline squashing at commit results in a quite high average misprediction penalty since it can delay prediction validation by a substantial number of cycles. Yet, it is much easier to implement for Value Prediction since it does not induce complex mechanisms in the out-of-order execution engine.\",\"It essentially restrains the Value Prediction related hardware to the in-order pipeline front-end (prediction) and the in-order pipeline back-end (validation and training). Moreover, it allows not to checkpoint the rename table since the committed rename map contains all the necessary mappings to restart execution in a correct fashion.\",\"pipeline at commit 会导致较高的 misprediction penalty, 但是其优点在于不需要重新设计复杂的 out-of-order engine.\",\"Balancing Accuracy and Coverage\",\"The total misprediction penalty Trecov is roughly proportional to the number of mispredictions. Thus, if one drastically improves the accuracy at the cost of some coverage then, as long as the coverage of the predictor remains quite high, there might be a performance benefit brought by Value Prediction, even though the average value misprediction penalty is very high.\",\"Trecov​ 与错误预测的数量大致成正比，所以如果可以在牺牲一些覆盖率的情况下提升精度，那么总的 VP 性能是可以得到提升的。\"]},\"550\":{\"h\":\"Reissue\",\"t\":[\"先来看论文中对于 reissue 的定义：\",\"all instructions after the first-use are kept in the IQ until they are no longer speculative, and may re-issue from there with minimal delay in case of a misprediction.\",\"字面意思是所有第一次使用的指令都在 IQ(instruction queue) 中，直到他们不再投机，在 misprediction 的时候，可能会被 reissue, 其 delay 可以最小化。\",\"理解这句话，就是说 IQ 队列中会存放投机指令，如果指令不是投机的话，可能会不在 IQ 队列中了；因为指令是投机运行的，所以说如果预测失败的话，在 IQ 队列中的指令可以直接 issue 出去，此时不需要经过 fetch, decode 等步骤，缩短了指令的延迟时间。\",\"还有一种技术是 selective reissue:\",\"Selective Reissue — only instructions dependent on the predicted value (either directly or indirectly) are kept in the IQ until the prediction is resolved.\",\"只有依赖于预测值的指令（无论是直接的还是间接的）会被保留在 IQ 中，直到这些预测被 resolved.\",\"从上面的分析，我们可以看出 reissue 和 selective reissue 的不同之处在于：selective reissue 只是存储了依赖于预测值的指令，而 reissue 是存储了所有的指令，但是直到该指令不投机的时候，才不存储（目前的理解）\"]},\"551\":{\"h\":\"Refetch\",\"t\":[\"先看论文中对于 refetch 的定义：\",\"Refetch — a value mispredict is treated like a branch mispredict. Instructions beginning with the first-use of the predicted value are squashed, and the fetch unit is responsible for getting them back in the machine.\",\"value 的 misprediction 可以看做分支预测的 misprediction, 使用预测值的指令将被全部清除掉，然后重新 fetch. 注意这边也使用了定语，开始于第一个使用预测值的指令。\"]},\"552\":{\"h\":\"Back-to-back prediction\",\"t\":[\"Unlike a branch prediction, a value prediction is needed rather late in the pipeline (at dispatch time).\",\"不同于分支预测，值预测在 pipeline 中被需要的相当晚（在 dispatch 阶段）\",\"📍📍📍 dispatch\",\"The instruction dispatch unit controls when the decoded instructions are dispatched to the execution pipelines. It includes Issue Queues for storing instruction pending dispatch to execution pipelines[2].\",\"从上面的描述我们可以看出，dispatch 阶段处于指令 decode 之后，execution 之前。\",\"在某些架构中，就是 issue.\",\"Issue Queues 是用来保存将要被 execution 的指令。\",\"Thus, at first glance, prediction latency does not seem to be a concern and long lookups in large tables and/or fairly complex computations could be tolerated.\",\"基于上述我们分析的 VP 被需要的阶段，乍一看，预测的延迟似乎不是一个问题，我们可以容忍大表或者复杂计算。\",\"However, for most predictors, the outcomes of a few previous occurrences of the instruction are needed to perform a prediction for the current instance.\",\"但是，对于大多数的预测器而言，当前实例的预测是依赖于指令先前出现指令的几次结果的。\",\"💚💚 这边有个细节，仔细看那段英文原文的话我们可以发现，其描述的主题对象一直是 instruction, 即指令先前的出现和当前预测之间的关系。\",\"Consequently, for those predictors, either the critical operation must be made short enough to allow for the prediction of close (possibly back-to-back) occurrences (e.g. by using small tables) or the prediction of tight loops must be given up.\",\"所以，对这些预测器而言，就要求关键路径尽可能的短。或者说 tight loop 必须尽可能得放弃。\",\"Unfortunately, tight loops with candidates for VP are quite abundant in existing programs.\",\"不幸的是，tight loop 这种情况在程序中很多。\",\"Experiments conducted with the methodology we will introduce in Section 7 suggest that for a subset of the SPEC’00/’06 benchmark suites, there can be as much as 15.3% (3.4% a-mean) fetched instructions eligible for VP and for which the previous occurrence was fetched in the previous cycle (8-wide Fetch). We highlight such critical operations for each predictor in the subsequent paragraphs.\",\"上述文字主要描述了实验结果，重要的部分 highlight 出来。\",\"总结一下，本部分首先阐述了 VP 需要值的阶段较为靠后，所以是允许预测延迟的，但是对于 tight loop 类似的场景，会要求关键路径尽可能短（或者说延迟尽可能小）。作者在后面通过实验的结果阐述了 tight loop 场景在实际是普遍存在的。\",\"接下来主要是对比 LVP, stride 和 FCM, 分别阐述这几个预测器的优缺点。\"]},\"553\":{\"h\":\"LVP\",\"t\":[\"Despite its name, LVP does not require the previous prediction to predict the current instance as long as the table is trained. Consequently, LVP uses only the program counter to generate a prediction.\",\"LVP 不需要依赖先前的预测结果，但是其依赖于程序计数器 PC 的结果。\",\"Thus, successive table lookups are independent and can last until Dispatch, meaning that large tables can be implemented.\",\"因此，连续的表查找是独立的，可以持续到 dispatch 阶段，因此 LVP 是可以使用大表的。\"]},\"554\":{\"h\":\"Stride\",\"t\":[\"@todo\"]},\"555\":{\"h\":\"FCM\",\"t\":[\"全称是 Finite Context Method, 其结构是 two-level:\",\"The first-level consists of a value history table accessed using the instruction address. This history is then hashed and used to index the second level table.\",\"这个两级结构的图可以参考 Figure 1.\"]},\"556\":{\"h\":\"Summary\",\"t\":[\"上面阐述了三个预测器的实现细节和缺点。\",\"Table lookup time is not an issue as long as the prediction arrives before Dispatch for LVP and Stride. Therefore, large predictor tables can be considered for implementation. For stride-based value predictor, the main difficulty is that one has to track the last (possibly speculative) occurrence of each instruction.\",\"上述文字说明了 LVP 和 stride 的缺点。\",\"For local value based predictors the same difficulty arises with the addition of tracking the n last occurrences. Moreover the critical operations (hash and the 2nd level table read) lead to either using small tables or not being able to timely predict back-to-back occurrences of the same instruction. Implementations of such predictors can only be justified if they bring significant performance benefit over alternative predictors.\",\"基于 local value 的预测器也会受到关键操作（hash 和第 2 级表的读取）的影响。\",\"The VTAGE predictor we introduce in this paper is able to seamlessly predict back-to-back occurrences of the same instruction, thus its access can span over several cycles. VTAGE does not require any complex tracking of the last occurrences of the instruction.\",\"Section 8 shows that VTAGE (resp. hybrid predictor using VTAGE) outperforms a local value based FCM predictor (resp. hybrid predictor using a local value based FCM predictor).\",\"本文提出的 VTAGE 预测器可以完美预测 back-to-back 场景，因此它的访问可以跨越几个循环。\"]},\"557\":{\"h\":\"Commit Time Validation and Hardware Implications on the Out-of-Order Engine\",\"t\":[\"In the previous section, we have pointed out that the hardware modifications induced by pipeline squashing at commit time on the Out-of-Order engine are limited.\",\"In practice, the only major modification compared with a processor without Value Prediction is that the predicted values must be written in the physical registers before Dispatch.\",\"前面的章节提到了，pipline squashing + commit time validation 对 out-of-order 的影响是有限的。\",\"事实上，在与没有 VP 的处理器相比，唯一的主要修改时：预测值必须在 dispatch 之前写入物理寄存器。\",\"At first glance, if every destination register has to be predicted for each fetch group, one would conclude that the number of write ports should double.\",\"In that case the overhead on the register file would be quite high. The area cost of a register file is approximately proportional to (R+W)∗(R+2W), R and W respectively being the number of read ports and the number of write ports.\",\"Assuming R=2W, the area cost without VP would be proportional to 12W2 and the one with VP would be proportional to 24W2, i.e. the double. Energy consumed in the register file would also be increased by around 50% (using very simple Cacti 5.3 approximation).\",\"乍一看，如果每一个 fetch group 的目标寄存器都必须被预测的话，则会得出结论，write ports 应该翻一番。\",\"接下来是对寄存器消耗的计算，其中 R 表示读寄存器，W 表示写寄存器。\",\"经过一系列的计算，最后发现寄存器的面积要增加 50%!\",\"For practical implementations, there exist several opportunities to limit this overhead.\",\"For instance one can limit the number of extra ports needed to write predictions. Each cycle, only a few predictions are used and the predictions can be known several cycles before Dispatch: One could limit the number of writes on each cycle to a certain limit, and buffer the extra writes, if there are any.\",\"Assuming only W/2 write ports for writing predicted values leads to a register file area of 35W2/2 , saving half of the overhead of the naive solution. The same saving on energy is observed (Cacti 5.3 estimations).\",\"Another opportunity is to allocate physical registers for consecutive instructions in different register file banks, limiting the number of write ports on the individual banks. One can also prioritize the predictions according to the criticality of the instruction and only use the most critical one, leveraging the work on criticality estimation of Fields et.\",\"但是事实上，有一些 opportunities 去限制这一开销。\",\"例如可以限制写入预测需要的额外寄存器数量，下面是一些举例和计算。\",\"为连续指令分配物理寄存器，限制单个 bank 的写入端口数。甚至也可以根据优先级选择使用最关键的指令。\",\"Exploring the complete optimization to reduce the overhead on the register file design is out of the scope of this paper. It would depend on the precise micro-architecture of the processor, but we have clearly shown that this overhead in terms of energy and silicon area can be reduced to less than 25% and 50% respectively. Moreover, this overhead is restricted to the register file and does not impact the other components of the out-of-order engine. Similarly, thanks to commit time validation, the power overhead introduced by Value Prediction will essentially reside in the predictor table.\",\"作者说明了减少寄存器的数量不在本文的研究范围之内。\",\"❌❌❌ 这句话难理解：Similarly, thanks to commit time validation, the power overhead introduced by Value Prediction will essentially reside in the predictor table.\"]},\"558\":{\"h\":\"Maximizing Value Predictor Accuracy Through Confidence\",\"t\":[\"As we already pointed out, the total misprediction recovery cost can be minimized through two vehicles: Minimizing the individual misprediction penalty and/or minimizing the total number of mispredictions.\",\"错误预测的恢复损耗从两个方面衡量。\",\"When using the prediction is not mandatory (i.e. contrarily to branch predictions), an efficient way to minimize the number of mispredictions is to use saturating counter to estimate confidence and use the prediction only when the associated confidence is very high.\",\"For instance, for the value predictors considered in this study, a 3-bit confidence counter per entry that is reset on each misprediction leads to an accuracy in the 95-99% range if the prediction is used only when the counter is saturated. However this level of accuracy is still not sufficient to avoid performance loss in several cases unless idealistic selective reissue is used.\",\"To increase accuracy, Burtscher et al. proposed the SAg confidence stimation scheme to assign confidence to a history of outcomes rather than to a particular instruction. However, this entails a second lookup in the counter table using the outcome history retrieved in the predictor table with the PC of the instruction. A way to maximize accuracy without increasing complexity and latency would be preferable.\",\"当预测不是强制的时候，使用饱和计数器，最小化错误预测的数量，计算置信值并且只使用置信度很高的预测。举例了 3-bit 饱和计数器的合理使用可以达到 95% - 99% 的准确率，但是这个准确率还是不够，有些专家提出了 SAg 置信度估计方案，但是会增加复杂性。现在需要一个准确度高的，但是不增加复杂性和时延的方法。\",\"We actually found that simply using wider counters (e.g. 6 or 7 bits) leads to much more accurate predictors while the prediction coverage is only reduced by a fraction.\",\"Prediction is only used on saturated confidence counters and counters are reset on each misprediction. Interestingly, probabilistic 3-bit counters such as defined by Riley et al. augmented with reset on misprediction achieve the same accuracy for substantially less storage and a marginal increase in complexity.\",\"作者发现使用 wider counters 可以提升很多的预测准确度，随之的代价是很小的覆盖率损失。\",\"这句话的意思是说，使用更多 bit 位的计数器，其预测精度会提高；但是作者说明的，覆盖率会降低，我猜测可能是因为使用了饱和计数器的缘故，目前预测仅在饱和计数器饱和的时候进行预测，那么就意味着，越晚饱和，那么预测的覆盖率就越低。\",\"这个优点很多，具体怎么使用，要在后文研究。\",\"We refer to these probabilistic counters as Forward Probabilistic Counters (FPC). In particular, each forward transition is only triggered with a certain probability.\",\"In this paper, we will consider 3-bit confidence counters using a probability vector v={1,1/16,1/16,1/16,1/16,1/32,1/32} for pipeline squashing at commit and v={1,1/8,1/8,1/8,1/8,1/16,1/16} for selective reissue, respectively mimicking 7-bit and 6-bit counters.\",\"This generally prevents all the considered VP schemes to slow down execution while minimizing the loss of coverage (as opposed to using lower probabilities). The used pseudo-random generator is a simple Linear Feedback Shift Register.\",\"使用了 FPC 计数器，并且提出了 3-bit 计数器，每一位存在一个指定的概率值。\",\"这个 FPC 翻译名称叫做前向概率计数器，是以固定的概率触发的，也就是说，这种计数器的优点在于，我只是使用了 3-bit, 就达到了 6-bit 或者 7-bit 的效果。由此，达到了我们上文提到的，准确率高但是不增加复杂性和时延。\",\"注意在 HPCA 19 的文章中，我们使用了这个 FPC.\",\"Using FPC counters instead of full counters limits the overhead of confidence estimation. It also opens the opportunity to adapt the probabilities at run-time as suggested in and/or to individualize these probabilities depending on the criticality of the instructions.\",\"使用 FPC 计数器而不是完整计数器限制了置信度估计的开销，并且还提供了在运行时调整概率的机会，如根据重要指令个性化概率。\"]},\"559\":{\"h\":\"The Value TAgged GEometric Predictor\",\"t\":[\"题目的含义为：值标记的几何预测器。\",\"第一段首先列举出来了 VTAGE 来源于分支预测的 ITTAGE, ITTAGE 来源于 TAGE.\",\"As it uses branch history to predict, we expect VTAGE to perform much better than other predictors when instruction results are indeed depending on the control flow.\",\"Nonetheless, VTAGE is also able to capture control-flow independent patterns as long as they are short enough with regard to the maximum history length used by the predictor.\",\"In particular, it can still capture short strided patterns, although space efficiency is not optimal since each value of the pattern will reside in an entry (contrarily to the Stride predictor where one pattern can be represented by a single entry).\",\"这一段的细节我们暂时不进行考究。\",\"TAGE 使用了分支的历史进行预测，当指令的结果实际依赖于控制流的时候，我们希望 VTAGE 能比其他的预测器表现得更好。尽管如此，VTAGE 也能够捕获 control-flow independent patterns, 只要他们相对于预测器使用的最大历史长度足够短。\",\"❌❌ 控制流\",\"需要理解文章中所说的控制流是什么意思？在什么情况下，指令的结果是取决于控制流的？\",\"Fig. 2 describes a (1+N)-component VTAGE predictor. The main idea of the VTAGE scheme (exactly like the ITTAGE scheme) is to use several tables – components – storing predictions. Each table is indexed by a different number of bits of the global branch history, hashed with the PC of the instruction.\",\"The different lengths form a geometric series (i.e. VT1 is accessed with two bits of the history, VT2 with four, VT3 with eight and so on).\",\"These tables are backed up by a base predictor – a tagless LVP predictor – which is accessed using the instruction address only.\",\"In VTAGE, an entry of a tagged component consists of a partial tag, a 1-bit usefulness counter u used by the replacement policy, a full 64-bit value val, and a confidence/hysteresis counter c. An entry of the base predictor simply consists of the prediction and the confidence counter.\",\"上述文字在陈述 VTAGE 预测器是如何实现的，这段比较重要。\",\"图 2（本篇文章中没有给出）描述了一个 1+N 组件的 VTAGE 预测器。其方案的核心思想是使用一些表，也可以说是组件，去存储预测，每一个表都被全局分支历史的 bit 数量索引，被指令的 PC 所 hash.\",\"❌❌❌ bits of global barnch history\",\"这里提到了全局预测历史的 bit 数量，在查阅资料以后，这个的意思可能是，在分支预测中，存在一个全局分支预测历史寄存器 Global History Register (GHR), 这个 GHR 可能由 10-bit 组成，可以用来表示最近 10 个分支的历史，而这 10-bit 可以用来索引 1024 个 PHT 的 entry, 每一个 entry 由 2-bit 组成，是一个饱和计数器，索引的方式是 PC 的后 10-bit 与 GHR 进行异或[3]。\",\"🔴🔴 至于为什么是异或，还需要进行深入的思考。\",\"不同的长度形成一个几何级数。\",\"VTAGE 主要是使用了很多 table, VT1, VT2, …, VTn, 分别代表的含义是：VT1 关联了 2-bit 的 global branch history, VT2 为 4-bit, VT3 为 8-bit, 以此类推，这就是等比级数或者几何级数。\",\"这些表由无标记 LVP 预测器备份，该预测器仅仅使用指令地址访问。\",\"第三段讲述了预测器具体的实现细节。\",\"At prediction time, all components are searched in parallel to check for a tag match. The matching component accessed with the longest history is called the provider component as it will provide the prediction to the pipeline.\",\"在预测的时候，并行查找与 tag 匹配的条目 match 的组件并且与 longest history 联系的称作 provider component, 在流水线中提供预测。\",\"这边的 longest history 的意思是说，bit 数最长的，也就是说，从大到小进行查找；比如说对于一个 Global History Register (GHR) 而言，假设其有 10 位，那么我的 VT1 有 2 位，VT2 是 4 位…假设 VT2 就是最后一个，那么我就从 VT2 开始查找，这就是 longest history.\",\"At update time, only the provider is updated.\",\"On either a correct or an incorrect prediction, c and u are updated.\",\"On a misprediction, val is replaced if c is equal to 0, and a new entry is allocated in a component using a longer history than the provider: All “upper” components are accessed to see if one of them has an entry that is not useful (u is 0). If none is found, the u counter of all matching entries in the upper components are reset, but no entry is allocated. Otherwise, a new entry is allocated in one of the components whose corresponding entry is not useful. The component is chosen randomly.\",\"在更新的时候，只更新 provider. (也就是说，只更新最长历史的那张表)\",\"无论预测是正确或者不正确，c 和 u 会被更新。其中 c 表示饱和计数器，u 表示是否有用，1:useful, 0: not useful.\",\"如果是 misprediction, val 会被替换掉，如果计数器 c 是 0 的话，并且新的条目会被分配，使用比 provider 更长的 history. 所有更上层的组件都被访问，去判断是否其中有一个 entry 是无用的，在这里 u==0（二进制）是无用的，u 是一个 useful bit, 其被 replacement policy 使用。\",\"如果没有找到任何一个，上层组件的 u 计数器都被重置，意味着没有 entry 被分配。如果找到了的话，一个新的 entry 就被分配了，被分配的策略是：随机策略，选择一个组件的 entry 不是 useful 的。\",\"The main difference between VTAGE and ITTAGE is essentially the usage: The predicted value is used only if its confidence counter is saturated. We refer the reader to for a detailed description of ITTAGE.\",\"VTAGE 和 ITTAGE 不同的点在于，饱和计数器饱和的时候才使用预测的值。\",\"Lastly, as a prediction does not depend on previous values but only on previous control-flow, VTAGE can seamlessly predict instructions in tight loops and behaves like LVP in Fig. 1. However, due to index hash and multiplexing from multiple components, it is possible that its prediction latency will be higher, although this is unlikely to be an issue since prediction can span several cycles.\",\"最后，由于预测不依赖于先前的值，而只依赖于先前的控制流，VTAGE 可以完美预测 tight loop.\",\"然而，由于多个组件的索引哈希和复用，其预测延迟可能会更高，尽管这可能不是一个问题，因为预测是可以跨周期的。\"]},\"560\":{\"h\":\"Evaluation Methodology\"},\"561\":{\"h\":\"Value Predictors\"},\"562\":{\"h\":\"Single Scheme Predictors\",\"t\":[\"We study the behavior of several distinct value predictors in addition to VTAGE.\",\"Namely, LVP, the 2-delta Stride predictor (2D-Stride) as a representative of the stride-based predictor family4 and a generic order-4 FCM predictor (o4-FCM)\",\"除了 VTAGE, 我们还需要对比一些 value predictors. 包括 LVP, 2D-Stride 和 o4-FCM.\",\"All predictors use 3-bit saturating counters as confidence counters. The prediction is used only if the confidence counter is saturated.\",\"Baseline counters are incremented by one on a correct prediction and reset on a misprediction. The predictors were simulated with and without FPC (See Section 5). As the potential of VP has been covered extensively in previous work, we limit ourselves to reasonably sized predictors to gain more concrete insights.\",\"We start from a 128KB LVP (8K-entry) and derive the other predictors, each of them having 8K entries as we wish to gauge the prediction generation method, not space efficiency. Predictor parameters are illustrated in Table 1.\",\"先阐述这些预测器都使用了 3-bit 的饱和计数器作为置信度的衡量标准，并且只有在饱和计数器饱和的时候对应的预测才被使用。\",\"如果预测成功的话，基线的预测器 +1，misprediction 的话就重置。\",\"预测器在有 FPC 和没有 FPC 的情况下模拟。并且限制了预测器的大小。\",\"❌❌ 我们从 128K 的 LVP 开始，推导其他预测器，每个预测器都有 8K 个 entries, 因为我们希望衡量预测生成方法，而不是空间效率。\",\"For VTAGE, we consider a predictor featuring 6 tables in addition to a base component. The base component is a tagless LVP predictor. We use a single useful bit per entry in the tagged components and a 3-bit hysteresis/confidence counter c per entry in every component. The tag of tagged components is 12+rank-bit long with rank varying between 1 and 6. The minimum and maximum history lengths are respectively 2 and 64 as we found that these values provided a good tradeoff in our experiments.\",\"对于 VTAGE, 我们考虑一个预测器，除了一个基础组件外，还包括 6 个表。基础组件是 tagless 的 LVP 预测器。我们在每个 tagged 的组件中使用一个 useful 标志位和一个 3-bit 的置信度/迟滞计数器。tag 字段的大小是 12+rank bit, rank 的取值在 1~6 之间，由此计算，最小和最大的 history length 的范围在 2~64 之间，这是一个很好的 trade-off.\",\"For o4-FCM, we use a hash function similar to those…..\",\"说了一下 o4-FCM 的细节，我们暂时不对其进行研究。\",\"We consider that all predictors are able to predict instantaneously. As a consequence, they can seamlessly deliver their prediction before Dispatch.\",\"This also implies that o4- CM is – unrealistically – able to deliver predictions for two occurrences of the same instruction fetched in two consecutive cycles. Hence, its performance is most likely to be overestimated.\",\"我们认为所有的预测器都可以瞬间预测，因此，它们可以在 dispatch 之前完美地传递预测。\"]},\"563\":{\"h\":\"Hybrid Predictors\",\"t\":[\"作者阐述了一下，表明混合预测是可行的（混合预测我们在 HPCA 19 中进行重点研究）。\"]},\"564\":{\"h\":\"Simulator\",\"t\":[\"In our experiments, we use the gem5 cycle-accurate simulator (x86 ISA).\",\"实验使用了 gem5 仿真。\",\"We model a fairly aggressive pipeline: 4GHz, 8-wide superscalar, out-of-order processor with a latency of 19 cycles.\",\"We chose a slow front-end (15 cycles) coupled to a swift back-end (3 cycles) to obtain a realistic misprediction penalty.\",\"作者模拟了相当激进的 pipline.\",\"提示\",\"🧡🧡🧡\",\"这边需要专题理解，suprescalar, latency 的具体含义。\",\"🧡🧡🧡\",\"作者选择了一个慢的前端耦合到快速的后端中，可以观察逼真的 misprediction 惩罚。\"]},\"565\":{\"h\":\"Misprediction Recovery\",\"t\":[\"We illustrate two possible recovery scenarios, squashing at commit time and a very idealistic selective reissue.\",\"In both scenarios, recovery is unnecessary if the prediction of instruction I was wrong but no dependent instruction has been issued before the execution of I, since the prediction is replaced by the effective result at execution time. This removes useless squashes and is part of our implementation.\",\"misprediction 时候的恢复有两种方式：\",\"squashing at commit time\",\"十分理想主义的 selective reissue(理想主义是作者对其的评价，不代表我本人观点)\",\"在上述两种情况下，如果指令的预测错误但是其在执行之前没有 issue 依赖指令，则不需要 recovery, 因为预测会被执行时的有效结果取代。\"]},\"566\":{\"h\":\"Reference\",\"t\":[\"A. Perais and A. Seznec, \\\"Practical data value speculation for future high-end processors\\\", High Performance Computer Architecture (HPCA) 2014 IEEE 20th International Symposium on, Feb 2014. ↩︎\",\"ARM Cortex-A75 Core Technical Reference Manual r2p0↩︎\",\"Assignment 1: Understanding Branch Prediction↩︎\"]},\"567\":{\"h\":\"VP - Value Prediction Abstract\"},\"568\":{\"h\":\"Value Prediction in a Nutshell\",\"t\":[\"Value Prediction (VP) is a microarchitectural technique that speculatively breaks true data dependency to increase instruction level parallelism in out-of-order processor cores.[1]\",\"branch prediction but for values\",\"MICRO Test of Time Award[2] 是一个十分具有分量的奖项，收录了微体系结构中经典的具有影响力的论文，关于 VP 的论文 < Exceeding the Dataflow Limit Via Value Prediction>[3] 就是 2017 年被该奖项收录。\"]},\"569\":{\"h\":\"MICRO 29\"},\"570\":{\"h\":\"Abstract\",\"t\":[\"本章节主要研究 Exceeding the dataflow limit via value prediction 这篇文章，这篇文章作为经典的 VP 的顶尖著作之一，具有很高的研究价值。\"]},\"571\":{\"h\":\"Taxonomy of Speculative Execution\",\"t\":[\"投机执行的分类：\",\"对于 Data Speculation 而言，我们分类：预测是否与数据的位置或者值有关。\",\"对于 binary vs multi-valued 而言，binary 表示的是预测的两种结果，0-1 或者 token vs not-token(branch 中表示 branch 的方向)，mutil-valued 表示的是 brach 的目标，这个目标可能是存在于程序地址的任何空间中的。\"]},\"572\":{\"h\":\"Data Speculation\",\"t\":[\"可以分为两类：\",\"those that speculate on the storage location of the data: 存储位置\",\"those that speculate on the actual value of the data: 实际的值\",\"对于推测存储位置存在两种 flavor:\",\"those that speculate on a specific attribute of the storage location：根据存储位置的特定属性进行推测\",\"those that speculate on the address of the storage location：根据存储位置的地址进行推测\"]},\"573\":{\"h\":\"Value Locality\",\"t\":[\"previously-seen value recurring repeatedly within a storage location.\",\"以前看到的值在存储位置中重复出现。\",\"Although the concept is general and can be applied to any storage location within a computer system, we have limited our current study to examine only the value locality of general-purpose or floating point registers immediately following instructions that write to those registers.\",\"目前限制了这个 Value Locality 的范围在通用寄存器或者浮点寄存器的值局部性，这些寄存器紧跟在写入指令之后。\",\"不过哪怕是寄存器，以 32-bit 举例，也可能会存在超过 2^32 的值，我们要怎么才能做到预测下一个可能出现的值呢？\",\"As it turns out, if we narrow the scope of our prediction mechanism by considering each static instruction individually, the task becomes much easier and we are able to accurately predict a significant fraction of register values being written by machine instructions.\",\"这篇文章使用了 20 个 benchmark 总结出来了寄存器的 value locality, 特别是 signal cycle 的指定操作寄存器的 value locality 更加明显。\"]},\"574\":{\"h\":\"Exploiting Value Locality\"},\"575\":{\"h\":\"Value Prediction Unit\",\"t\":[\"文章提出了 VP 单元的两级预测结构：\",\"我们对这张图片进行分析：\",\"the Classification Table (CT) and the Value Prediction Table (VPT), both of which are direct-mapped and indexed by the instruction address (PC) of the instruction being predicted.\",\"The PC of the instruction being predicted is used to index into the VPT to find a value to predict.\",\"PC 中的指令用于 index 进去 VPT, 找到需要预测的值。与此同时，CT 也被 Index 用于用于决定是否进行预测。当指令完成的时候，pred histstory 和 value history 两个字段都被更新了。\"]},\"576\":{\"h\":\"CT\",\"t\":[\"valid\",\"The valid field, which consists of either a single bit that indicates a valid entry or a partial or complete tag field that is matched against the upper bits of the PC to indicate a valid field.\",\"这句话主要的意思是：由单个 bit 位组成，表示一个有效的 entry 或者一部分或完整的 tag 字段，与 PC 的高比特位匹配，表示有效的 field.\",\"prediction history\",\"​ 1 bit 或者更多位的 saturating counter(饱和计数器)， 某个预测正确或者错误的时候，这一位的字段增加或者减少。\",\"​ 除此之外，还可以将指定分类为可预测和不可预测；这种预测用于决定是否预测特定指令的结果。换言之，CT 将指令分为了两类：通过 VPT 预测和指令和不通过 VPT 预测的指令。\",\"Increasing the number of bits in the saturating counter adds hysteresis to the classification process and can help avoid erroneous classifications by ignoring anomalous values and/or destructive interference.\",\"​ 需要注意，增加饱和计数器的 bit 位可能会增加分类过程中的 hystersis(迟滞)；这个迟滞可能的意思是说，增加 bit 位导致的预测结果集后移，这种迟滞，如以前 2-bit, 2 and 3 是预测，3-bit 而言 可能需要 4 以后才可以预测，这就是迟滞。\",\"对于 CT 和 VPT 的相互关系：\",\"The VPT replacement policy is also governed by the CT prediction history to introduce hysteresis and avoid replacing useful values with less useful ones.\",\"VPT 的替换策略受到 CT 预测历史的影响，这是为了避免引入不必要的错误值。\",\"总结：\",\"用于在预测正确或者错误的时候饱和计数器自增或者自减\",\"用于对某个指令分类，该指令是否可预测\"]},\"577\":{\"h\":\"VPT\",\"t\":[\"VPT 的这两个字段的含义说明如下：\",\"tag\",\"同 CT，由单个 bit 有效位或者完整或者部分标记。\",\"value history\",\"包括 32-bit 或者 64 bit 的值，这些值由 LRU 策略维护（that are maintained with an LRU policy）；当第一次产生指令结果或者预测不正确的时候，这个字段被替换掉。\",\"需要注意的是，VPT 的替换策略受到 CT 预测历史的影响，以免用了不那么有用的值替换掉有用的值。\"]},\"578\":{\"h\":\"Verifying Predictions\",\"t\":[\"由于值预测本来就是投机性的，所以需要一种机制来验证预测的正确性，并且从错误预测中恢复过来。\"]},\"579\":{\"h\":\"HPCA 19\"},\"580\":{\"h\":\"Abstract\",\"t\":[\"本章主要研究 HPCA 19 的 Efficient Load Value Prediction using Multiple Predictors and Filters[4].\",\"首先阐述 VP 的重大意义：\",\"Value prediction has the potential to break through the performance limitations imposed by true data dependencies.\",\"然后提出了仅预测 load value 是最高效的方式，特别是在硬件预算不高的情况下（虽然说预测所有指令类型的值是可以做到的）。\",\"📌📌📌 todo，需要研究一下原文的 3 和 4 引用，搞清楚 load value 具体的意义。\",\"目前自己理解的 load value 的含义为：load 指令取值，这个值来自于内存中。\",\"在此先引用一下一篇论文中的解释[5]，但是不一定是准确的：\",\"The LVPT is used to predict the value being loaded from memory by associating the load instruction with the value previously loaded by that instruction.\",\"🤔🤔🤔 这句话阐述了一个观点：load value 指的是指令从内存中加载出来的值，load 指令中有访存的操作，这时候就是从内存中取出来要使用的值。\",\"While predicting values of all instruction types is possible, prior work has shown that predicting just load values is most effective with a modest hardware budget.\",\"然后概述使用了比较多的篇幅来说明提升 VP 的预测精度需要硬件帮助，因此本文提出了一种：\",\"In this paper, we analyzed four state-of-the-art load value predictors, and found that they complement each other.\",\"基于上述的 load value, 作者提出了一个新的复合预测器。\",\"Based on that finding, we evaluated a new composite predictor that combines all four component predictors.\"]},\"581\":{\"h\":\"Summary\",\"t\":[\"这块做一个简单的总结，从总体上对这篇文章有一个了解。\",\"本文使用了 4 个先进的预测器，并且提出了一种 Smart Training 的方法对这四种预测器进行有机的结合（后文 Smart Training 中进行详细的研究）\",\"增加 AM(Accuracy Monitor) 技术，这个技术通过屏蔽 produce mis-prediction 的预测器，来减少错误预测带来的损失。AM 可以分为两种：M-AM 和 PC-AM\",\"使用 Heterogeneous Predictor Tables 技术，也可以称作动态融合预测器表，将资源从性能不佳的预测器重新分配到性能更好的预测器\",\"深入分析比较了这种融合的方式对于预测准确度的提升，并和最先进的模型进行了对比\"]},\"582\":{\"h\":\"Introduction\",\"t\":[\"more ILP, true data limit.\",\"ILP 指的是 Instruction Level Parallelism, 指令级并行。\",\"In the case of load instructions, it is also possible to predict a load memory address, followed by a data cache access, to generate a speculative value that does not necessarily exhibit value locality.\",\"这个技术可以再研究一下。\"]},\"583\":{\"h\":\"4 Predictors\",\"t\":[\"本文使用了 4 个先进的预测器，并对他们进行了融合，融合过后的组合预测器性能得到了很大的提升，这 4 个预测器如下表所示：\",\"Predicts\",\"Predicts\",\"Load values\",\"Load addresses\",\"Context agnostic\",\"Last Value Prediction (LVP)\",\"Stride Address Prediction (SAP)\",\"Context aware\",\"Context Value Prediction (CVP)\",\"Context Address Prediction (CAP)\",\"从表中我们可以看出，本文一共使用的四个预测器，并且可以分类为基于地址的、基于 value 的、上下文是否感知的，本文对这些预测器进行了一个排序（使用顺序，在预测的时候先使用哪个，后使用哪个），我们根据这个排序对这 4 个预测器进行简单的介绍：\",\"LVP[6]\",\"CVP\",\"SAP\",\"CAP\",\"All four components train inparallel.\",\"注意到其并行性。\"]},\"584\":{\"h\":\"LVP\",\"t\":[\"LVP[6:1]这个预测器的原理在于：that consecutive dynamic instances of a static load will often produce the same value, 翻译过来就是说静态 load 的连续动态实例通常会产生相同的值。\",\"这个预测器是对上下文不感知的。\",\"这边举了两个例子，还需要再深入理解一下，或者去阅读一下原文。\",\"第一个例子（接上面的英文原文）：\",\"This commonly occurs, for example, with PC-based loads that read large constants.\",\"第二个例子：\",\"The pattern can also occur when dynamic instances of a static load produce different addresses, such as when sequencing through an array just initialized with memset.\",\"上述两个例子都是举例说明了 LVP 的一些场景。\",\"LVP uses a PC-indexed, tagged prediction table. 其结构如下：\",\"14-bit\",\"64-bit\",\"3-bit\",\"81 bits(total)\",\"tag\",\"value\",\"saturating confidence counter\",\"a entry\",\"LVP is trained when a load executes by hashing the PC bits of a load to access an entry and then updating the entry’s tag and value.\",\"❌❌❌ load PC 的关系不明确，导致这段话不能理解。\",\"目前可以看出来的是，PC 中的一些比特位通过 hash 的方式索引到 LVP 表中的 entry, 一般而言，是对比 tag, 然后看其对应的置信值是否大于阈值。\",\"这个预测器如果遇到了 tag/value 匹配的话，我们就增加置信值，否则不匹配的话，置信值归零。\"]},\"585\":{\"h\":\"CVP\",\"t\":[\"77bits: tag(14-bit) + virtual address(49-bit) + saturating confidence counter(2-bit) saturating confidence counter: 饱和置信计数器。\"]},\"586\":{\"h\":\"CVP\",\"t\":[\"81bits: tag(14-bit) + value(64 bit) + counter(3-bit)\",\"CVP is inspired by branch prediction, which has long observed that branch behavior is correlated with the path history leading to the branch.\",\"其灵感来源于分支预测，分支的行为往往与导致分支行为的路径历史有关，对于 VP, 这个结论也同样适用。\",\"当 load 执行的时候，CVP 适用表中最长历史、最高置信的字段。\"]},\"587\":{\"h\":\"CAP\",\"t\":[\"67bits:tag(14-bit) + virtual address(49-bit) + confidence(2-bit) + load size(2-bit)\",\"CAP 预测器在 4 个预测器中拥有最小的置信阈值。\",\"CAP 预测器的工作方式如下：\",\"load 完成的时候，更新 table\",\"新的 tag, value 和 size 和已知的 entry 匹配，则增加置信值\",\"其他情况，置信值置 0\"]},\"588\":{\"h\":\"Value Prediction\"},\"589\":{\"h\":\"FPC Strategies\",\"t\":[\"使用一个 forward probabilistic counter(FPC) 可以减少数字的比特，这个在其他论文中提到了。\",\"目前的理解：使用标量构建置信度，然后再计算出对应的 FPC 矢量。\"]},\"590\":{\"h\":\"Smart Training\",\"t\":[\"使用 Smart Training 的时候，我们在训练和预测时候使用的预测器的数量是减少的，figure 7 阐述了这个结论。\",\"Smart Training 目的在于合理地对 4 中预测器进行组合，其工作方式如下：\",\"如果没有预测发生，所有的预测器都用做最小化获得置信预测的最小时间；\",\"如果一个或者多个预测发生了，那么我们只训练以下的预测器： \",\"mispredicted\",\"参考 heuristic 中拥有最小代价的，简而言之，就是按照顺序对预测器进行训练。\",\"📌📌📌 todo：深入研究这个策略，其前置条件是什么，策略是什么，什么条件下对应使用什么策略。\"]},\"591\":{\"h\":\"Accuracy Monitor(AM)\"},\"592\":{\"h\":\"AM\",\"t\":[\"可以分为两种：\",\"M-AM\",\"PC-AM\",\"AM 的概念介绍如下：\",\"In a composite predictor, we can also throttle an entire component predictor when it is producing a high misprediction rate overall. We studied two different throttling mechanisms, which we call Accuracy Monitors (AM).\",\"AM 是一种机制，其保证了当整个组合预测器产生了较高的总体误预测率时，我们可以对其进行限制。可以翻译为一种“节流机制”。\"]},\"593\":{\"h\":\"AM Q&A\",\"t\":[\"Q：AM 使能的时间节点是哪个？\",\"A：在 fetch 阶段，原文是 At prediction time (Fetch)，在这个阶段 AM 与预测器同时查找。\",\"Q: AM 通过什么样的方式使能的？\",\"A：AM 会产生一个预测值，并且 AM 是与预测器关联的，AM 可以指示该预测器的预测不可靠，依据这个我们可以对预测器的预测结果进行压缩(squash).\",\"Q: M-AM 和 PC-AM 有何不同？\",\"A: 先说相同点，两者都是衡量的可信指标；M-AM 是 epoch 维度，而 PC-AM 是指令维度。\"]},\"594\":{\"h\":\"M-AM\",\"t\":[\"M-AM 跟踪每个组件执行期间的错误预测率，这个预测错误率有一个计算的方法，以每一个 epoch 为单位，大概 100W 个指令。\"]},\"595\":{\"h\":\"PC-AM\",\"t\":[\"不同于 M-AM，PC-AM 跟踪每一个 PC 的预测错误率，精度更高。\",\"PC-AM 包括几个字段：tag + counters.\",\"PC-AM 中的 narrow counter 的增加策略是，每一次触发了流水线的 flush, PC-AM 的 counter 就增加。\",\"PC-AM 追踪每一个 PC 以便于实施更有针对性的沉默。\"]},\"596\":{\"h\":\"Heterogeneous Predictor Tables\"},\"597\":{\"h\":\"Discuss\",\"t\":[\"Q：这个机制最终还是没有保证 commit 步骤，前面的准确率是如何保证的？\",\"A：📌📌\",\"Q：值预测器的原理是什么，简要说明。\",\"A：\"]},\"598\":{\"h\":\"ASPLOS 96(LVP)\"},\"599\":{\"h\":\"Abstract\",\"t\":[\"本部分主要研究文章 Value locality and load value prediction[5:1] , 主要是涉及到这篇文章中的 LVP 预测器。\",\"Our work extends this to predict entire 32- and 64-bit register values based on previously-seen values. We find that, just as condition bits are fairly predictable on a per-static-branch basis, full register values being loaded from memory are frequently predictable as well.\",\"这篇文章的主要工作就是预测 32 或者 64 位寄存器的值。\",\"In this paper, we introduce value locality, a concept related to redundant computation, and demonstrate a technique--Load Value Prediction, or LVP--for predicting the results of load instructions at dispatch by exploiting the affinity between load instruction addresses and the values the loads produce.\",\"上述介绍了 LVP， 通过 load 指令地址和 load 产生的值之间的亲和性来预测 load 指令的结果。\",\"作者阐述了 LVP 具有两个优点：\",\"indexed by instruction address. 这个优点导致的结果是，我们可以在流水线很早期的时候，对值进行查找(value lookups can occur very early in the pipeline)\",\"具有投机性质，依赖 verification 的机制来保证正确性。\",\"❌❌ 并没有看懂这个是何种优点？作者对比了其他人的研究结果， 那些人的研究是在 pipline 的后段才使用 table indece, 并且要求这个预测是正确的。\",\"总体来看这篇文章，作者确实使用了预测+验证的机制，并且是将值进行了分类。load 执行完成以后，我们对预测的值进行验证，验证过后更新 LVPT 和 LCT, 并且在需要的时候 reissue 指令。\"]},\"600\":{\"h\":\"Value Locality\",\"t\":[\"这篇文章也阐述了值局部性的原理，为了加深理解，我们对此也进行研究。\",\"In this paper, we introduce the concept of value locality, which we define as the likelihood of a previously-seen value recurring repeatedly within a storage location.\",\"作者将值局部性定义为了以前在某个存储位置出现过的值还有可能再次重复出现。\",\"we have limited our current study to examine only the value locality of general-purpose or floating-point registers immediately following memory loads that target those registers.\",\"作者对预测的范围也进行了一个限制：仅仅预测通用的或浮点数寄存器。\",\"📌📌 深入思考，为什么要做这个限制？\",\"As it turns out, if we narrow the scope of our prediction mechanism by considering each static load individually, the task becomes much easier, and we are able to accurately predict a significant fraction of register values being loaded from memory.\",\"为什么值局部性可以被我们所利用？作者缩小了预测的范围。\",\"接下来，作者从几个方面来论证，值局部性存在的一些原因：\",\"data redundancy, 值冗余。体现在一些例子比如稀疏矩阵、带空白的文本文件和电子表格中的空白单元；\",\"Error-checking, 错误检查，检查不长发生的条件经常会编译到 load 的常量；Checks for infrequently-occurring conditions often compile into loads of what are effectively run-time constants.\",\"Program constants, 这个比较好理解， 但是我理解不了。❌❌❌\",\"Computed branches,\",\"Virtual function calls,\",\"Glue code,\",\"Addressability\",\"Call-subgraph identities\",\"Memory alias resolution\",\"Register spill code\"]},\"601\":{\"h\":\"LVPT\",\"t\":[\"作者通过对 loads value 进行分类达到减少预测错误率的目的，总共可以分为三类：\",\"LVPT 无法预测\",\"LVPT 可以预测\",\"LVPT 几乎可以预测（执行度高的话就进行预测）\",\"根据以上三类，将 loads 指令分为了三类：unpredictable, predictable, and constant loads.\",\"对应的可能的 2-bit 计数器可以这么分类：no prediction, incorrect prediction, correct prediction, or constant load.\",\"The LVPT is indexed by the load instruction address and is not tagged, so both constructive and destructive interference can occur between loads that map to the same entry (the LVPT is direct-mapped).\",\"上面这段话说明了，LVPT 是直接映射的，并且没有 tag, 所以导致的结果是 both constructive and destructive interference 都可能映射到同一个 entry.\",\"我们接下来研究一下，预测之中的一些细节：\",\"首先是 LVPT, LCT, CVU 之间的使用，文章中使用 CVU(constant verification unit) 来存储 constant.\"]},\"602\":{\"h\":\"LCT & CVU\",\"t\":[\"尽管说 LVPT 将 loads 分为了三类，但是还是缺少一个验证的机制，所以说在 LCT 阶段，我们还是需要根据分类进行不同的决策：\",\"predictable: 将预测的值和从内存中检索出来的值进行比较。\",\"highly-predictable or constant loads: 使用 CVU 单元，CVU 单元可以避免访存操作，具体的做法是强制将 LVPT 中的 entry 与主存保持一致性来实现。\",\"we use the constant verification unit, or CVU, which allows us to avoid accessing the conventional memory system completely by forcing the LVPT entries that correspond to constant loads to remain coherent with main memory.\",\"对于被 LCT 归类于 constants 的 entry 来说，数据的地址和 LVPT 的索引被放在 CVU 内部，但是这两个字段是分开的（独立的）、存于全相联的 table 中。这个 table 与主存保持一致性，策略是：\",\"This table is kept coherent with main memory by invalidating any entries where the data address matches a subsequent store instruction.\",\"​ 上述话说明了保持一致的策略，目前我的理解是，table 使其中的某个字段非法化，也就是说，store 指令（💛💛 特别注意这个细节，是 store 指令）的执行可以使 CVU 中的字段非法化，因为访存会改变这个地址对应数据的值。但是如果没有怼这个地址发生过 load 指令的话，这个地址字段就是一直有效的，我们在预测的时候(constant load) 直接从这个 CVU 中取值，这里面的值是和主存中的值保持一致的。\",\"这个 CVU 里面的值是什么时候写进去的呢，我们在提到上文的 CVU 的组成时说到了，其字段的一部分是与 LVPT 想关联的，所以当 load 执行完成，验证到某个条目的预测是正确的时候，我们就把这个条目刷新到 CVU 中。\",\"这种措施的好处就是可以降低内存带宽的需求。\"]},\"603\":{\"h\":\"The Load Value Prediction Unit\",\"t\":[\"LVPT, LCT, CVU 之间是怎么合作的呢？\",\"load 指令 fetch 的时候，LVPT, LCT 表被同时索引了，一个负责分类，一个负责具体的预测；一旦预测的地址有了，EX1, cache 的访问和 CVU 的访问同时进行。当真实的 value 从 L1 cache 中返回的时候，将其与预测的值进行比较，此时，相关的推测指令（speculative instructions）有两个选择：\",\"write back – 成功\",\"reissue – 失败\",\"由于无法及时在 CVU 上面执行搜索以避免内存访问，因此 CVU 唯一可以阻止内存访问的时候是在 cache miss 或者 bank conflict 的时候。\"]},\"604\":{\"h\":\"Conclusion\",\"t\":[\"we demonstrate that load instructions, when examined on a per-instruction-address basis, exhibit significant amounts of value locality.\",\"❌❌❌ 如何理解 per-instruction-address basis?\",\"we describe load value prediction, a microarchitectural technique for capturing and exploiting load value locality to reduce effective memory latency as well as bandwidth requirements.\",\"上面这段话讲述了 load value prediction 的重要意义，特别是在学术上的定义。\"]},\"605\":{\"h\":\"Words\",\"t\":[\"Words\",\"含义\",\"Words\",\"含义\",\"impose\",\"强制实行、强制推行\",\"Speculation\",\"推测、猜测\",\"narrow\",\"有限的、小的\",\"saturating\",\"饱和\",\"hysteresis\",\"回差、滞后\",\"speculative\",\"投机性的\",\"saturating counter\",\"饱和计数器\",\"govern\",\"统治、管理\",\"composite\",\"组合、复合\",\"probed\",\"探测\",\"mitigate\",\"使缓和、使减轻\",\"redundancy\",\"冗余\",\"heterogeneous\",\"异构\",\"contemporary\",\"当代的、同时期的\",\"seamlessly\",\"完美无缺\",\"complementary\",\"互补的\",\"饱和计数器理解：对于 2-bit 计数器来说，0 or 3 就是到了饱和的状态，此时自增或者自减都是不会改变值的，所以就饱和了。\"]},\"606\":{\"h\":\"Reference\",\"t\":[\"Championship Value Prediction (CVP)↩︎\",\"MICRO Test of Time Award↩︎\",\"M. H. Lipasti and J. P. Shen, \\\"Exceeding the dataflow limit via value prediction,\\\" Proceedings of the 29th Annual IEEE/ACM International Symposium on Microarchitecture. MICRO 29, 1996, pp. 226-237, doi: 10.1109/MICRO.1996.566464. ↩︎\",\"R. Sheikh and D. Hower, \\\"Efficient Load Value Prediction Using Multiple Predictors and Filters,\\\" 2019 IEEE International Symposium on High Performance Computer Architecture (HPCA), 2019, pp. 454-465, doi: 10.1109/HPCA.2019.00057. ↩︎\",\"Value Locality and Load Value Prediction, Mikko H. Lipasti, Christopher B. Wilkerson, and John Paul Shen. 1996. Value locality and load value prediction. SIGPLAN Not. 31, 9 (Sept. 1996), 138–147. https://doi.org/10.1145/248209.237173↩︎↩︎\",\"Mikko H. Lipasti, Christopher B. Wilkerson, and John Paul Shen. 1996. Value locality and load value prediction. In Proceedings of the seventh international conference on Architectural support for programming languages and operating systems (ASPLOS VII). Association for Computing Machinery, New York, NY, USA, 138–147. https://doi.org/10.1145/237090.237173↩︎↩︎\"]},\"607\":{\"h\":\"Docker 入门\"},\"608\":{\"h\":\"Docker Usage\"},\"609\":{\"h\":\"postgresql\",\"t\":[\"postgresql:\",\"docker run -d -p 5432:5432 --name postgresql -v pgdata:/var/lib/postgresql/data -e POSTGRES_PASSWORD=pg123456 postgres \",\"dpage/pgadmin4:\",\"docker run -d -p 5433:80 --name pgadmin4 -e PGADMIN_DEFAULT_EMAIL=mail@weigao.cc -e PGADMIN_DEFAULT_PASSWORD=123456 dpage/pgadmin4 \",\"登录 pgadamin 的时候，账号为邮箱，密码 123456 如上所设置。\",\"在创建 pg server 的时候，密码为 pg123456 如上配置，服务器的地址用如下方式获取：\",\"docker exec -it postgresql bash root@b4afa86fb3b3:/# cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.3 b4afa86fb3b3 # 容器的 IP \",\"此时我们使用 172.17.0.3:5432 连接数据库即可。\"]},\"610\":{\"h\":\"MySql\",\"t\":[\"参考文献: docker 绿皮书\",\"使用 Docker 一步搞定 MySql 的安装：\",\"docker run -p 3306:3306 --name mysql-dokcer -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest \",\"上述命令的字段含义是：\",\"-p 3306:3306：将运行容器内部的 3306 端口桥接到宿主机的 3306 端口。左边的属于宿主机，右边的属于容器。\",\"-e MYSQL_ROOT_PASSWORD=123456：设置容器使用的环境变量。MYSQL_ROOT_PASSWORD=123456 指定了mysql server的密码是123456. (默认用户名是root)。\",\"-d：后台运行容器。\"]},\"611\":{\"h\":\"MongoDB\",\"t\":[\"docker run --name mongo-docker -d -p 27077:27017 mongo:latest \",\"此时可以用连接工具 https://studio3t.com/ 测试并连接到 27077 端口。\"]},\"612\":{\"h\":\"Jenkins\",\"t\":[\"docker run -d -p 18088:8080 --name jenkins-docker -p 50000:50000 jenkins/jenkins:lts \",\"需要注意的是，Jenkins 会使用两个端口映射到宿主机上面，向外暴露的是 8080 服务，我们在本地只需要连接 18088 端口即可。\",\"连接到 localhost:18088 后，会提示配置密码，需要进入容器查看密码。\",\"容器启动以后，需要进入容器对 Jenkins 进行简单的配置：\",\"进入容器\",\"docker exec -it jenkins-docker bash \",\"查看密码文件内容\",\"tail -f /var/jenkins_home/secrets/initialAdminPassword \",\"此时会得到类似于 13e19c5410b145e59dbf70916ed4a3fb 这样的输出，输入到浏览器端，即可进入。此时会自动安装一些插件，等待插件安装完成，然后设置账号密码，配置完成。\"]},\"613\":{\"h\":\"Tomcat\",\"t\":[\"指定 Tomcat 版本进行安装：\",\"docker run --name tomcat-docker-8.0 -d -p 9999:8080 tomcat:8.0 \",\"安装完成之后，想要把本地的文件拷贝到容器中：\",\"docker cp ./. tomcat-docker-8.0:/home # 或者拷贝 war docker cp foo.war tomcat-docker-8.0:/foo.war \"]},\"614\":{\"h\":\"Spring-boot with Docker\",\"t\":[\"使用 Dokcer + Spring-boot 构建项目。\",\"Docker in wsl\",\"这次尝试在 WSL 上面安装了 Docker，要注意到 WSL 是用了 SysV init 的命令而不是 systemd, 所以在启动 Docker 的时候使用\",\"service docker start，不必使用 systemctl.\"]},\"615\":{\"h\":\"Tools\"},\"616\":{\"h\":\"portainer\",\"t\":[\"portainer 是一个 web 的 docker 管理工具。\",\"docker volume create portainer_data docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer \",\"然后访问 http://localhost:9000, 就可以进入 portainer 的设置界面。\"]},\"617\":{\"h\":\"Config\"},\"618\":{\"h\":\"WSL\",\"t\":[\"在 WSL 上开启 docker 守护进程：\",\"参考文档\",\"将 WSL 转化为 WSL2：\",\"wsl.exe -l -v wsl.exe --set-version (distro name) 2 wsl.exe --set-default-version 2 wsl --set-default <distro name> . \",\"下面这一步可以省略，如果不是 WSL 需要手动开启：\",\"export DOCKER_HOST=tcp://127.0.0.1:2375 \"]},\"619\":{\"h\":\"切换镜像仓到国内\",\"t\":[\" \\\"registry-mirrors\\\": [ \\\"https://registry.docker-cn.com\\\", \\\"https://dockerhub.azk8s.cn\\\", \\\"https://reg-mirror.qiniu.com\\\", \\\"http://hub-mirror.c.163.com\\\", \\\"https://docker.mirrors.ustc.edu.cn\\\" ] \"]},\"620\":{\"h\":\"Installation\",\"t\":[\"Follow the tutorial\",\"Test whether the Docker is installed correctly (Ubuntu 16.04)\",\"sudo docker container run hello-world docker --version sudo docker info sudo docker image ls (-all) \",\"List the versions available in your repo:\",\"apt-cache madison docker-ce \"]},\"621\":{\"h\":\"Containers\",\"t\":[\"Make sure all is set up:\",\"docker run hello-world \",\"Run the app, before this, a Dockerfile should be created:\",\"sudo docker run -p 4000:80 friendlyhello sudo docker run -d -p 4000:80 friendlyhello # run on background \",\"将 Docker 的 80 端口映射出去至 4000 端口，如果是在后台运行的话，可查看：\",\"sudo docker container ls #stop sudo docker container stop 1fa4a... \"]},\"622\":{\"h\":\"Share images\",\"t\":[\"Login\",\"Tag the image\",\"Push the image\",\"Pull\",\"sudo docker login sudo docker tag friendlyhello weigaochen/get-started:part2 # docker tag image username/respository:tag sudo docker image ls sudo docker push weigaochen/get-started:part2 sudo docker run -p 4000:801 weigaochen/get-started:part2 \"]},\"623\":{\"h\":\"Services\",\"t\":[\"通过 docker-compose.yml 来配置，在其中引用已经 Published 的 image\",\"A docker-compose.yml file is a YAML file that defines how Docker containers should behave in production.\",\"Run the new load-balanced app\",\"sudo docker swarm init sudo docker stack deploy -c docker-compose.yml getstartedlab \",\"注意到其中的 getstartedlab 是我们给 app 起的一个名字\",\"查看：sudo docker service ls\",\"注意到 NAME 属性的值为 getstartedlab_web.\"]},\"624\":{\"h\":\"Task\",\"t\":[\"A single container running in a service is called a task.\",\"Let us list the task:\",\"sudo service ps getstartedlab_web \",\"如果顺利的话，这时候可以看到 5 个 task: getstartedlab_web.1 至 getstartedlab_web.5, 原因是我们在 docker-compose.yml 文件中配置了 5 个 replices.\"]},\"625\":{\"h\":\"Swarms\",\"t\":[\"KEYWORDS: swarm manager, workers, swarm clusters\"]},\"626\":{\"c\":[\"Server\",\"Cloud\"]},\"627\":{\"c\":[\"docker\"]},\"628\":{\"h\":\"设计模式\"},\"629\":{\"h\":\"设计模式总览\",\"t\":[\"设计模式可以分为四种类型：\",\"创建型模式。\",\"结构型模式\",\"行为型模式\",\"J2EE模式\"]},\"630\":{\"c\":[\"Server\"]},\"631\":{\"c\":[\"Java\",\"Backend\"]},\"632\":{\"h\":\"JAVA GC 研究\"},\"633\":{\"c\":[\"Cloud\"]},\"634\":{\"c\":[\"jvm\"]},\"635\":{\"h\":\"Huawei Cloud 入门\",\"t\":[\"提示\",\"该篇主要记录了华为云的一些基础知识，并增加了一些自己的理解。\"]},\"636\":{\"h\":\"云计算基础\"},\"637\":{\"h\":\"云计算的优点和缺点\",\"t\":[\"公有云在成本角度，对企业的盈利是否产生影响？\",\"公有云的安全性是否相对于私有云有所降低？\",\"不会；因为大型公有云可以提供很多安全技术，相比于一些小项目或者小企业，其安全技术本身匮乏，大型公有云在安全方面反而是一种加强。\",\"如何吸引大型公司加入公有云？\"]},\"638\":{\"h\":\"云计算的部署\",\"t\":[\"可分为公有云、私有云和混合云。\"]},\"639\":{\"h\":\"云服务的类型\",\"t\":[\"IaaS：计算、存储、网络(NaaS)、CDN、数据库(DBaaS)，是主要收入来源；如 web 主机交付。\",\"PaaS：不属于 IaaS 和 SaaS 的，如开发框架；也可以从服务角度理解，为 IaaS+；常见的有应用开发环境、应用开发组件等。\",\"SaaS：软件服务\"]},\"640\":{\"h\":\"云服务器的种类\",\"t\":[\"计算资源 \",\"ECS(elastic cloud server)，弹性云服务器\",\"存储资源 \",\"EVC(elastic volume service)，云硬盘\",\"OBS(object-based storage)，对象存储服务\",\"网络资源 \",\"VPC(virtual private cloud)，虚拟私有云。其中最重要的是子网、安全组等\",\"ELB(Elastic Load Balance)，弹性负载均衡\",\"管理与部署 \",\"CES(cloud eye service)，云监控服务\",\"IAM(identity access management)，统一身份认证服务\",\"数据库生态 \",\"DCS(distributed cache service)，分布式缓存服务\",\"DDM(distributed database middleware)，分布式数据库中间件\"]},\"641\":{\"h\":\"华为公有云服务架构\",\"t\":[\"华为公有云服务架构可分为四层，从上而下分别是：\",\"层次\",\"解释\",\"理解\",\"P/S层产品\",\"如云主机等\",\"华为特色为软件开发云\",\"基础设施服务\",\"OpenStack\",\"OpenStack 为基石\",\"虚拟资源\",\"逻辑化物理资源\",\"物理资源\",\"服务器等硬件\",\"除此之外，还存在一个云管理平台，主要负责对下三层进行管理。这个云管理是否就是 k8s 或者类似的技术？\"]},\"642\":{\"h\":\"华为云 CIS 服务\"},\"643\":{\"h\":\"CIS 简介\",\"t\":[\"华为云 CIS 主要包括五大服务，分别是计算、网络、存储、管理与部署服务。\",\"计算服务\",\"通用计算型、内存密集型、存储密集型、计算密集型、计算加速型、裸金属服务器、云手机。\",\"前 5 类为虚拟的 ECS 服务，可以与裸金属服务器混合使用。\",\"通用计算型：应用场景主要为电商、网站和企业 APP 等，主要针对企业官网搭建办公环境。\",\"内存密集型：应用场景主要为内存数据库、高性能数据库的场景，SAP HANA：汽车制造等。\",\"存储密集型：应用场景主要为数据仓库、分布式文件系统和网络文件系统，高性能关系数据库，NoSql 等；在自动驾驶领域的应用，要求较高的存储速率。\",\"计算密集型：主要应用为工业辅助设计、分子建模等，主要要求 CPU 的计算；如汽车碰撞实验。\",\"计算加速型：GPU&FPGA 服务；GPU 用于计算精度要求较高的计算，FPGA 用于时延较低，非结构化的数据应用，用于金融、实时场景、媒体加速、AI&VR、网络直播（华为 H265 IP加速）等。\",\"网络服务\",\"这个接触比较多，比如搬瓦工的 VPS，DNS 云解析等\",\"存储服务\",\"对象海量存储（如网站、企业的数据备份），云硬盘 EVS 等，弹性文件服务，云备份等\",\"管理与部署服务\",\"云监控 CES，云审计 CTS，云日志 LTS，企业项目管理 EPS 等。\"]},\"644\":{\"h\":\"ECS 弹性云服务器\",\"t\":[\"ECS 全称 Elastic Cloud Server, 是华为云推出的一种可随时获取、弹性可扩展的计算云服务器。\",\"华为 ECS 的特点：高可靠、高安全、高弹性。\",\"可以用弹性服务器的方式将 web 部署在云服务器上，以节约成本，这种方式以后可以加以尝试！\"]},\"645\":{\"h\":\"冰山安全体系\"},\"646\":{\"h\":\"云上安全挑战\",\"t\":[\"云上主要的安全挑战可以分为：数据泄露、业务连续性、合规遵从三类。\",\"DDoS 高防服务：海量攻击防护，即高带宽；精准攻击防御；急速可靠访问；长期实战积累。\",\"Web 应用防火墙：主要是针对 web 应用的安全。\",\"漏洞扫描服务：不眠不休的漏洞检测医生，有点像爬虫，可以扫描丰富的应用，可以简单地在写完代码之后检测代码漏洞，检测高效；并且使用简单，只需要提供 IP 即可使用。\",\"安全态势感知服务：可视化安全感知，原理是采集用户数据、分析并进行安全检测，再可视化显示。检测主流的漏洞事件，检测资产安全（插件、系统等），给用户提供一些安全策略。\",\"云上权限监控：云堡垒机+IAM。堡垒机主要为运维操作，IAM 主要为云资源操作。\"]},\"647\":{\"h\":\"防攻击体系\",\"t\":[\"包括网络安全、主机安全、应用安全和数据安全等各种路径上可能的漏洞路径来构建安全服务。\"]},\"648\":{\"h\":\"数据保护体系\",\"t\":[\"云上数据的全生命周期保护，包括数据加密、数据库安全、网络通道加密、数据接入控制和应用安全。\",\"敏感数据保护（SDG）服务，针对 OBS 或者 RDS 上的数据。\",\"数据加密服务：主要基于公私钥体系。可以分为两个场景：专属加密（dedicated HSM）场景和密钥管理（KMS）场景。\",\"数据库安全服务（DBSS）：包括数据库防火墙场景、敏感数据发现和脱敏场景、数据库审计场景。\"]},\"649\":{\"c\":[\"Cloud\"]},\"650\":{\"c\":[\"cloud\",\"huawei\"]},\"651\":{\"h\":\"JAVA 虚拟机 ART 研究\",\"t\":[\"本文主要结合软硬件去研究 JVM 中的 JIT 和 AOT 技术，主要针对 ART 虚拟机，提炼出 JAVA 虚拟机相关的基础知识和软硬件结合点。\"]},\"652\":{\"h\":\"Art 概述\",\"t\":[\"常见的几个 JAVA 虚拟机：\",\"HotSpot: 比较流行、广泛\",\"Dalvik VM: 运行在安卓上，没有完全遵守 JAVA 虚拟机规范\",\"Art VM: 安卓 5.0 以后把 Dalvik 虚拟机替换成了 Art\",\"思考为什么 Dalvik VM 没有遵守 JAVA 虚拟机规范呢？这是因为 JAVA 程序有跨平台的需求，但是安卓的平台是较为固定的，设备目标明确。对比于 HotSpot, 主要是有两点区别：\",\"不直接运行 class 文件，执行的是编译后的 dex 字节码文件\",\"结构基于寄存器指令结构，而不是 JVM 的栈指令集结构\"]},\"653\":{\"h\":\"AOT & JIT\",\"t\":[\"AOT 是提前编译技术，JIT 是即时编译技术。\",\"下图可以简单说明 AOT 和 JIT 的执行过程：\",\"❌❌❌\",\"注意，这是一个很新手入门的图，不是完全准确，后续随着理解的深入，需要将这个图替换掉\",\"从上面的图中，可以学到以下几点：\",\"AOT 预编译成 SO 以后还需要再经过以下编译器，最终生成机器码；这个过程确认一下是否这样的\",\"JIT 从字节码中寻找热点代码编译为机器码，放入代码缓存，下次执行的时候直接跳过解释器，执行机器码\",\"这里面分为 C1 和 C2 编译器，注意 C1 和 C2 都是再后台运行的，只是运行的时间不同\",\"AOT 操作将部分字节码提前编译未机器代码库，然后启动程序，减少字节码解释\"]},\"654\":{\"h\":\"AOT\",\"t\":[\"AOT 存在着一些挑战：\",\"动态类加载；这是一个 AOT 面临的较为严重的问题，编译器无法预测程序执行的时候需要加载哪些类，如果预测错误的话，就产生了错误的编译；这些需要预知的信息包括静态字段的地址，对象实例字段的偏移量或者任何调用的实际目标\",\"AOT 会牺牲平台无关性和代码质量\"]},\"655\":{\"h\":\"解释器与编译器\",\"t\":[\"主流的商用 JAVA 虚拟机都采取了解释器与编译器并存的运行架构，但是要注意并不是所有的 JAVA 虚拟机都是这样的。 对于解释器而言，其优势在于：当程序需要快速启动和执行的时候，解释器可以先发挥作用，此时解释器直接解释执行 JAVA 字节码；这种方法的好处是可以省去编译的时间，立即运行。 对于编译器而言，在程序启动后，可以把越来越多的代码编译成本地代码，减少解释器的中间消耗，获得更高的执行效率。\",\"如何判断 JVM 是用的解释器模式、编译器模式或者混合模式呢？我们可以求助于 java -version 来帮助解答这个问题。下面是运行该命令后的输出：\",\"再提一下，sharing 表示 class data sharing. Server 编译器也叫 C2 编译器，与之对应的 Clinet 叫做 C1 编译器。\"]},\"656\":{\"h\":\"AOT 过程\"},\"657\":{\"h\":\"JAVA 代码到 so\",\"t\":[\"我们思考一个问题，给定一段 JAVA 代码，如何将 JAVA 代码转化为二进制呢？[1]（我们在分析 AOT 性能的时候会将二进制反汇编，分析这个反汇编文件中的指令）。\",\"其路径如下：\",\"例如我们有一个 class 名为 **JaotCompilation, 其经过的转化过程如下：\",\"首先使用 JAVA 编译器得到 .class 文件：\",\"javac JaotCompilation.java \",\"然后 pass 生成的 JaotCompilation.class 文件到 AOT 编译器中，可以使用的命令如下：\",\"jaotc --output jaotCompilation.so JaotCompilation.class \",\"然后就会在当下目录下生成 jaotCompilation.so 这个 .so 文件。\"]},\"658\":{\"h\":\"使用 AOT 产物\",\"t\":[\"我们在上一步将 JAVA 代码转化成了 .so 文件，那么在实际中，是如何使用的呢？\",\"在 JVM 中有个选项，-XX:AOTLibrary, 传入 so 库的路径（绝对路径或者相对路径都可以）；如果要更省事的话，可以将 library 拷贝到 java home 的 lib 文件夹下面，此时只需要传递名字即可。\",\"java -XX:AOTLibrary=./jaotCompilation.so JaotCompilation \",\"执行这个命令之后，可以验证一下 so 是不是被正常加载了，可以增加 -XX:+PrintAOT 进行观察：\",\"java -XX:+PrintAOT -XX:AOTLibrary=./jaotCompilation.so JaotCompilation \",\"如果顺利的话，应该是可以看到已经加载的库；注意这是加载而不是被使用，可以指定 -verbose 选项看是否被实际调用了。\",\"The AOT compiled library contains a class fingerprint, which must match the fingerprint of the .class file.\",\"上述文字的意思是说如果我们修改了 JaotCompilation.java 的代码的时候，如果没有使用 AOT 编译被修改的 .class 文件，会发生错误；因此在每一次修改代码的时候，我们都要对 AOT 进行重新编译。\"]},\"659\":{\"h\":\"AOT 编译选项\",\"t\":[\"我们可以给 AOT 的编译指定一些选项，将需要的选项写在文件中，然后使能。\",\"complileCommands.txt:\",\"compileOnly java.lang.* \",\"指定只需要编译的 scope, 然后把这个选项用进去：\",\"jaotc --output javaBaseLang.so --module java.base --compile-commands compileCommands.txt \"]},\"660\":{\"h\":\"warm-up which class\",\"t\":[\"我们可以用看一下哪些类实际上在 JVM 预热期间被调用了，命令如下：\",\"java -XX:+UnlockDiagnosticVMOptions -XX:+LogTouchedMethods -XX:+PrintTouchedMethodsAtExit JaotCompilation \"]},\"661\":{\"h\":\"single class\",\"t\":[\"可以只编译一个类，指定类名即可：\",\"jaotc --output javaBaseString.so --class-name java.lang.String \"]},\"662\":{\"h\":\"分层编译\",\"t\":[\"默认情况下，始终使用 AOT 的代码，也就是说 so 库中包含的类不会进行 JIT 编译，如果我们想在库中包含 profiling 信息，则可以增加 compile-for-tiered 来实现我们的目的：\",\"jaotc --output jaotCompilation.so --compile-for-tiered JaotCompilation.class \",\"上述预编译的代码会被一直使用，直到字节码变成符合 JIT 编译的时候。\"]},\"663\":{\"h\":\"class 文件格式\"},\"664\":{\"h\":\"Abstract\",\"t\":[\"本章主要是对 java 中的 class 文件进行研究，通过对书籍 《深入理解 Android: JAVA 虚拟机ART》的研究和简单的例子，研究 .class 文件中的奥秘。\",\"在开始研究之前，我们使用一个简单的 JAVA 程序，如下所示：\",\"import java.io.Serializable; public class Foo implements Serializable { public void bar() { int i = 31; if (i > 0) { int j = 42; } } } \",\"如上文我们研究的，可以分别使用 javac 和 jaotc 生成 .class 和 .so 文件，此处不再赘述。\",\"对于生成的 class 文件，可以使用 javap 命令来进行解析(注意传入的 Class 名称，提前生成好 Class 文件)，如下所示：\",\"javap -verbose Foo \",\"上述命令可以对我们的 Sample.class 文件进行解析，解析的输出如下所示(基于 Java 19 分析出的结果，可能和其他版本略有不同)：\",\"Classfile /mnt/c/Users/Administrator/Documents/_code/wsl2/jvm_demo/class/Foo.class Last modified Oct 19, 2022; size 303 bytes SHA-256 checksum 5a29b77322e4ee4fc0b22ee7030de4231135616732d86e3e7a8dfc3d8246b879 Compiled from \\\"Foo.java\\\" public class Foo implements java.io.Serializable minor version: 0 major version: 63 flags: (0x0021) ACC_PUBLIC, ACC_SUPER this_class: #7 // Foo super_class: #2 // java/lang/Object interfaces: 1, fields: 0, methods: 2, attributes: 1 Constant pool: #1 = Methodref #2.#3 // java/lang/Object.\\\"<init>\\\":()V #2 = Class #4 // java/lang/Object #3 = NameAndType #5:#6 // \\\"<init>\\\":()V #4 = Utf8 java/lang/Object #5 = Utf8 <init> #6 = Utf8 ()V #7 = Class #8 // Foo #8 = Utf8 Foo #9 = Class #10 // java/io/Serializable #10 = Utf8 java/io/Serializable #11 = Utf8 Code #12 = Utf8 LineNumberTable #13 = Utf8 bar #14 = Utf8 StackMapTable #15 = Utf8 SourceFile #16 = Utf8 Foo.java { public Foo(); descriptor: ()V flags: (0x0001) ACC_PUBLIC Code: stack=1, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.\\\"<init>\\\":()V 4: return LineNumberTable: line 2: 0 public void bar(); descriptor: ()V flags: (0x0001) ACC_PUBLIC Code: stack=1, locals=3, args_size=1 0: bipush 31 2: istore_1 3: iload_1 4: ifle 10 7: bipush 42 9: istore_2 10: return LineNumberTable: line 4: 0 line 5: 3 line 6: 7 line 8: 10 StackMapTable: number_of_entries = 1 frame_type = 252 /* append */ offset_delta = 10 locals = [ int ] } SourceFile: \\\"Foo.java\\\" \",\"上面的解析结果可以分为几个部分：\",\"类声明\",\"源文件名\",\"Class 文件结构信息\",\"常量池\",\"方法元数据（30行）\",\"注意到有些方法元数据中会出现 StackMapTable；分支控制流的方法会带有 StackMapTable，记录每个基本块开头处操作数栈的类型状态\",\"字节码（46行，Code 开始的部分 2 行严格来说属于方法元数据）\",\"上图中的结果需要注意的几点在于：\",\"Constant Pool: 常量池；\",\"xx\"]},\"665\":{\"h\":\"class 文件就是字节码么？\",\"t\":[\"不是。除了字节码以外，class 文件还记录了很多信息（上文已经提及了 class 文件的具体构成）：\",\"结构信息 \",\"Class 文件格式版本号\",\"各部分的数量与大小\",\"元数据 \",\"类、继承的超类、实现的接口声明信息\",\"常量池\",\"...\",\"方法信息 \",\"字节码\",\"异常处理器表\",\"...\",\"字节码只代表程序逻辑，只是 class 文件众多组成部分其中之一。\"]},\"666\":{\"h\":\"Constant Pool\",\"t\":[\"常量池对应的数据结构伪代码就是一个类型为 cp_info 的数组，如下所示：\",\"cp_info { // u1表示该域对应一个字节长度，u 表示 unsigned u1 tag; // 每一个 cp_info 的第一个字节表明该常量项的类型 u1 info[]; // 常量项的具体内容 } \",\"tag 字段用于表示该常量的类型，info 数组是常量的具体内容。\"]},\"667\":{\"h\":\"JVM 基本结构\",\"t\":[\"了解 class 文件是怎么解析的，需要首先了解一下 JVM 的基本结构：\",\"JAVA 虚拟机\",\"在这需要说明以下，什么才算做 java 虚拟机？通过 JCK 测试的，实现 JVM 规范的就可以。\",\"我们说的一般的 JVM 都是基于栈结构的，所以自然会有一个方法调用栈，每个 Java 线程都拥有一个 Java 方法调用栈，该栈与其他线程不共享；每次方法被调用的时候都会在调用栈上面分配一个栈帧，方法的一次调用结束（包括抛出异常）后对应的栈帧都会被自动撤销。\",\"每一个 Java 栈帧都包括：\",\"局部变量区\",\"操作数栈\",\"指向方法已解析的常量池的引用\",\"其他一些 VM 内部实现需要的数据\",\"这个栈帧的设计比较巧妙，比如说前后两个栈帧之间可以共享一部分数据用来传递参数（局部变量区栈帧 slot 的复用，这又是一个很大的话题了）\"]},\"668\":{\"h\":\"Dex 文件格式\"},\"669\":{\"h\":\"Abstract\",\"t\":[\"DEX 文件格式一般是 Android 平台上和传统的 class 文件对应的 java 字节码文件，其针对移动设备做了一些定制化处理。\",\"在我们开始之前，首先研究一下 Dex 文件是如何生成的，可以用下图来加以概述：\",\"在 Dalvik 或者 ART 中，class 文件是不能被直接解释执行的，需要经过 dx 将 class 文件进行翻译、重构、解释、压缩等处理，生成 .dex 文件。\"]},\"670\":{\"h\":\"Dex vs class\",\"t\":[\"dex 文件和 class 文件存在很多区别，简单列举如下：\",\"一个 class 文件对应一个 Java 源码文件，而一个 Dex 文件可以对应多个 Java 源码文件；在 PC 平台上，每一个 Java 文件都对应生成一个同名的 class 文件，这些文件统一打包成 Jar 包；而在安卓平台上，这些 Java 源码会最终编译、合并到一个名为 classes.dex 的文件中去。\",\"PC 平台上 class 文件的字节序是 Big Endian, 而安卓平台的 Dex 文件的字节序是 Little Endian, 其原因是 ARM CPU 可能也采用的是 Little Endian.\",\"Dex 文件新定义了 LEB128 的数据类型，其全称为 Little Endian Based 128, 用于表示 32 比特位长度的数据。\"]},\"671\":{\"h\":\"Dex 文件格式\",\"t\":[\"我们想要得到 dex 文件的话，只需要把一个任意的 APK 文件解压缩，就可以得到若干个 dex 文件。\",\"使用 010 editor 可以对这个 dex 文件进行解析，就可以观察文件的结构信息。\",\"Name\",\"Value\",\"Start\",\"Size\",\"Comment\",\"struct header_item dex_header\",\"0h\",\"0h\",\"70h\",\"Dex file header\",\"struct string_id_list dex_string_ids\",\"66454 strings\",\"70h\",\"40E58h\",\"String ID list\",\"struct type_id_list dex_type_ids\",\"9994 types\",\"40EC8h\",\"9C28h\",\"Type ID list\",\"struct proto_id_list dex_proto_ids\",\"14661 prototypes\",\"4AAF0h\",\"2AF3Ch\",\"Method prototype ID list\",\"struct field_id_list dex_field_ids\",\"50403 fields\",\"75A2Ch\",\"62718h\",\"Field ID list\",\"struct method_id_list dex_method_ids\",\"65503 methods\",\"D8144h\",\"7FEF8h\",\"Method ID list\",\"struct class_def_item_list dex_class_defs\",\"7957 classes\",\"15803Ch\",\"3E2A0h\",\"Class definitions list\",\"struct map_list_type dex_map_list\",\"18 items\",\"8ADDB0h\",\"DCh\",\"Map list\"]},\"672\":{\"h\":\"JAVA 内存布局\",\"t\":[\"我们需要研究一下 JAVA 的内存布局情况。主要带着问题：🟥🟧🟨 JAVA 数组中是如何存储到数组的长度属性的？压缩又是怎么使能的？\"]},\"673\":{\"h\":\"length()\",\"t\":[\"对于压缩使能这个问题，在此需要解释一下，我们在看汇编的时候有一段这样的代码：\",\"// length() dex_method_idx=3308 0x001bad20: b9400820 ldr w0, [x1, #8] 0x001bad24: 53017c00 lsr w0, w0, #1 0x001bad28: d65f03c0 ret \",\"对应的源代码如下：\",\"public int length() { final boolean STRING_COMPRESSION_ENABLED = true; if (STRING_COMPRESSION_ENABLED) { return (count >>> 1); } else { return count; } } \",\"这是一段计算字符串 length 的函数，我们可以看到，如果是使能了 STRING_COMPRESSION_ENABLED 的话，其 length 需要 count 无符号右移一位才行；查阅资料后表明这是因为最后一位是压缩的标志位。但是具体为什么要这么做，这么做的好处在哪，需要更加深入的研究。\"]},\"674\":{\"h\":\"JAVA 对象内存构成\",\"t\":[\"JAVA 中通过 new() 可以创建一个新的对象，对象分配后存在于堆中并给其分配一个内存地址，在堆中的 JAVA 对象主要包含三个部分[2]（以表格形式给出）\",\"内存区域\",\"英文名称\",\"说明\",\"对象头\",\"Object Header\",\"包括堆对象的布局、类型、GC 状态、同步状态和标识 hash code\",\"实例数据\",\"Instance Data\",\"存放类的数据信息，父类的信息，对象字段属性信息\",\"对齐填充\",\"Padding\",\"为了字节对齐，不是必须的\",\"下面我们的研究将分别通过对象头、实例数据、对齐填充展开。\",\"下图可以比较清晰的说明 Java 的内存构成：\",\"JAVA 的内存对象布局分为两种：第一种是普通的 JAVA 对象实例，第二种是 JAVA 数组实例，数组实例中会存储 length 元素。\",\"对于这几个内存区域具体的大小，我们以 32 HotSpot 中的 java.lang.Integer 存储为例，其在内存中的布局大小如下图所示：\",\"对象头固定大小为 8 个字节，接下来就会存储对象中的实际数据，后面的 padding 视情况而定。\"]},\"675\":{\"h\":\"对象头(Object Header)\",\"t\":[\"在 hotspot 术语表[3]中可以找到 object header 的相关定义：\",\"Common structure at the beginning of every GC-managed heap object. (Every oop points to an object header.) Includes fundamental information about the heap object's layout, type, GC state, synchronization state, and identity hash code. Consists of two words. In arrays it is immediately followed by a length field. Note that both Java objects and VM-internal objects have a common object header format.\",\"上述文字先是描述了对象头结构中都包含了哪些信息，而后描述了其中包含了两个字；除此之外，如果是个 array 类型，还会跟随一个 length 字段。（此时我们的问题已经解决了：JAVA 数组在 object header 中存储数组的长度信息）\",\"对于对象头中包含的两个字：Mark word 和 Klass pointer, 我们将分别研究。\"]},\"676\":{\"h\":\"Mark Word\",\"t\":[\"The first word of every object header. Usually a set of bitfields including synchronization state and identity hash code. May also be a pointer (with characteristic low bit encoding) to synchronization related information. During GC, may contain GC state bits.\",\"用于存储对象自身的运行时数据，在 32 位 JVM 中长度是 32bit, 64 位 JVM 中长度是 64bit, 对应路径 /openjdk/hotspot/src/share/vm/oops, 对应代码 markOop.hpp, 其构成可以从注释中获得（google 搜索文件名即可搜到）：\",\"// Bit-format of an object header (most significant first, big endian layout below): // // 32 bits: // -------- // hash:25 ------------>| age:4 biased_lock:1 lock:2 (normal object) // JavaThread*:23 epoch:2 age:4 biased_lock:1 lock:2 (biased object) // size:32 ------------------------------------------>| (CMS free block) // PromotedObject*:29 ---------->| promo_bits:3 ----->| (CMS promoted object) // // 64 bits: // -------- // unused:25 hash:31 -->| unused:1 age:4 biased_lock:1 lock:2 (normal object) // JavaThread*:54 epoch:2 unused:1 age:4 biased_lock:1 lock:2 (biased object) // PromotedObject*:61 --------------------->| promo_bits:3 ----->| (CMS promoted object) // size:64 ----------------------------------------------------->| (CMS free block) // // unused:25 hash:31 -->| cms_free:1 age:4 biased_lock:1 lock:2 (COOPs && normal object) // JavaThread*:54 epoch:2 cms_free:1 age:4 biased_lock:1 lock:2 (COOPs && biased object) // narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 ----->| (COOPs && CMS promoted object) // unused:21 size:35 -->| cms_free:1 unused:7 ------------------>| (COOPs && CMS free block) \",\"上述描述较为清晰，在此需要解释一下几个类型（为什么会有不同的状态，这是因为 Mark Word 在不同的锁状态下存储的内容不同）：\",\"biased object, 类比于 biased_lock 意思是偏向锁\",\"CMS free object, 类比于轻量级锁\",\"CMS promoted object, 类比于重量级锁\",\"@todo 表格 or 图片\",\"lock: 表示锁标志位；11 的时候为 GC 状态，只有后 2 位的 lock 标志位有效\",\"age: 分代年龄：表示对象被 GC 的次数，到达阈值以后，对象被转移到老年代；最大值是 15, 因为该标志位最大位数是 4 位\"]},\"677\":{\"h\":\"Klass Pointer\",\"t\":[\"The second word of every object header. Points to another object (a metaobject) which describes the layout and behavior of the original object. For Java objects, the \\\"klass\\\" contains a C++ style \\\"vtable\\\".\",\"类型指针，对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。\",\"也叫类元数据指针，\"]},\"678\":{\"h\":\"实例数据(Instance Data)\",\"t\":[\"如果对象中有属性字段，则这里会有数据信息。\"]},\"679\":{\"h\":\"对齐填充(Padding)\",\"t\":[\"对象可以有对齐数据也可以没有。\",\"😋😋😋 关于对齐填充与 cache line 的关系\",\"对齐填充的目的是为了将对象的大小对齐到 8N 个字节，以此来补齐对象头和实例数据占用内存之后的剩余空间的大小；\",\"这么做的好处在于，确保对象的字段可以出现在同一个 cache line 之中；如果不进行对齐的话，可能会出现跨 cache line 存储的情况出现；导致此对象读取的时候需要读两个 cache line, 或者更新的时候污染两个 cache line.\"]},\"680\":{\"h\":\"实战 demo\"},\"681\":{\"h\":\"基本构成研究\",\"t\":[\"本章节通过一个实战的 demo 来展示 JAVA 对象在内存中的布局情况。\",\"首先增加 openjdk.jol.core 包到项目中；\",\"我们编写一个简单的类 A.class 来观察一下这个类的内存分布：\",\"public class A { } \",\"然后在 main 函数中如下写：\",\"import java_object.A; import org.openjdk.jol.info.ClassLayout; public class Main { public static void main(String[] args) { A a = new A(); System.out.println(ClassLayout.parseInstance(a).toPrintable()); } } \",\"此时就可以在控制台看到 A class 内存布局的打印，如下所示：\",\"java_object.A object internals: OFF SZ TYPE DESCRIPTION VALUE 0 8 (object header: mark) 0x0000000000000001 (non-biasable; age: 0) 8 4 (object header: class) 0xf800c041 12 4 (object alignment gap) Instance size: 16 bytes Space losses: 0 bytes internal + 4 bytes external = 4 bytes total \",\"OFF: 偏移地址，单位字节\",\"SZ: SIZE, 大小\",\"TYPE DESCRIPTION: 类型描述；我们可以看到，这个类的内存布局只有一个 object header\",\"VALUE: 内存中当前存储的值\",\"OK，了解了基本构成以后，我们现在可以做一些更加深入的研究。\"]},\"682\":{\"h\":\"数组的内存布局\",\"t\":[\"为了更加清晰直观的说明本章开头提出的那个问题，我们在类中构造一个数组，以此来观察有数组元素的类的内存布局是什么样子的。\",\"// A.class public class A { char[] arrayA = {'a', 'c', 'e'}; } \",\"然后打印出来的内存布局如下所示(main 函数未做修改)：\",\"java_object.A object internals: OFF SZ TYPE DESCRIPTION VALUE 0 8 (object header: mark) 0x0000000000000001 (non-biasable; age: 0) 8 4 (object header: class) 0xf800c041 12 4 char[] A.arrayA [a, c, e] Instance size: 16 bytes Space losses: 0 bytes internal + 0 bytes external = 0 bytes total \",\"可以看到，数组 arrayA 被当做 class A 的内部元素保存起来了，并没有产生引用或者是 header, 我们直接使用一个对象数组，来看看有什么变化。修改 main 函数如下：\",\"import org.openjdk.jol.info.ClassLayout; public class Main { public static void main(String[] args) { // A a = new A(); char[] arrayB = {'b', 'e', 'd', 'f', 'g'}; System.out.println(ClassLayout.parseInstance(arrayB).toPrintable()); } } \",\"对应的输出如下：\",\"[C object internals: OFF SZ TYPE DESCRIPTION VALUE 0 8 (object header: mark) 0x0000000000000001 (non-biasable; age: 0) 8 4 (object header: class) 0xf800003f 12 4 (array length) 5 12 4 (alignment/padding gap) 16 10 char [C.<elements> N/A 26 6 (object alignment gap) Instance size: 32 bytes Space losses: 4 bytes internal + 6 bytes external = 10 bytes total \",\"可以看到，新增了 array length 的类型描述字段，这个描述字段中的值为 array 的长度 5.\",\"array 的字段位于 Mark Word 和 Kclass Pointer 之后，占 4 位\",\"https://www.baeldung.com/ahead-of-time-compilation↩︎\",\"java 内存对象布局↩︎\",\"HotSpot Glossary of Terms↩︎\"]},\"683\":{\"c\":[\"JAVA\"]},\"684\":{\"c\":[\"jvm\",\"java\"]},\"685\":{\"h\":\"JAVA 虚拟机 ART 研究（杂谈）\",\"t\":[\"这篇文章是一个关于 JAVA Art/Davlik 虚拟机的一个杂谈，整理了一些问题和感悟。\",\"栈式虚拟机 vs 寄存器虚拟机\",\"IR\"]},\"686\":{\"h\":\"栈 vs 寄存器虚拟机\"},\"687\":{\"h\":\"对比\",\"t\":[\"常见的虚拟机可以分为两种，一种是基于堆栈（表达式栈）的虚拟机，一种是基于寄存器的虚拟机，Davlik 就是基于寄存器的虚拟机。关于这两个方面的优劣，在这进行一个简单的研究。\",\"所谓“表达式栈”就是用来存放表达式临时值的地方。“基于虚拟寄存器”的做法是给每个临时值都赋予一个“临时变量”的名字；而“基于表达式栈”则不赋予“临时变量”的名，总是通过栈来隐式操作临时值。\",\"对于解释器来说，解释器开销主要来自解释器循环（fetch-decode/dispatch-execute 循环）中的 fetch 与 decode/dispatch，反而真正用于执行程序逻辑的 execute 部分并不是大头。每条指令都要经历一轮 FDX 循环。因而减少指令条数可以导致 F与 D 的开销减少，于是就提升了解释器速度[1]。\",\"上述文字说了一个问题，就是解释器的开销的前端 bound 较大，所以说减少指令数量可以一定程度上提高性能。\",\"有几个对比：\",\"源代码的生成难度：差别不大，栈更简单一些\",\"同样逻辑的代码大小：基于栈 < 基于寄存器\",\"同样逻辑的指令条数：基于栈 > 基于寄存器\",\"简易实现中数据移动次数：基于栈 > 基于寄存器；这里面说的就是堆栈的上下文切换之类的；栈顶缓存技术(top-of-stack caching) 可以大幅度降低基于栈的解释器的数据移动操作\",\"同等优化下的解释器速度：基于栈 < 基于寄存器\",\"交由同等优化程度的 JIT 编译器编译后生成的代码速度：基于栈 == 基于寄存器；只要经过合理的编译，得到的结果是一模一样的\",\"基于以上的说明，我们如果要选择基于寄存器的虚拟机的时候，我们一般是对解释器的执行速度有所要求；如果要选择基于栈的虚拟机的时候，其优点是实现简单、传输代码的大小较小；\",\"而对于带有 JIT 编译器的执行引擎的速度而言，如果 JIT 实现的较好的话，其经过 parse 之后速度是差不多的。\"]},\"688\":{\"h\":\"JVM\",\"t\":[\"早期 JVM 是基于栈的，但是实际上，基于栈的虚拟机并没有减少 Java 代码的传输大小，这是因为 JAVA 是使用 Class 文件为单位来进行传输与存储的，每一个 Class 文件都是独立存储，这是为了 Java 设计之初支持分离编译和按需动态类加载；独立存储的情况下，每一个 Class 文件都必须携带自己的常量池以及用于符号链接的符号引用信息。\",\"分析 Java 字节码是可以看出来，其只占 Class 文件的小部分，大部分都被常量池占了 -- 这些常量池一般都是存在重叠的，这些都是冗余信息。所以说 Dex 文件的优势就在这显现出来了。\",\"但是有一个问题是，Dex 文件较小，和虚拟机是基于寄存器的有关吗？其实没有特别大的关联，在字节码部分，Dalvik 的字节码其实比 JVM 的字节码更大。再多说一句，我个人的理解就是 Dex 文件较小是取决于其中的共享常量池等技术，pack200.\",\"不管如何，基于寄存器的设计还是一个较为新的潮流。\",\"在这关于 Class 文件的一些槽点，引用[1:1]作者的一些描述，看能否再后续的工作上对这些提出优化的思路：\",\"Class文件方面：\",\"各种人为的大小限制都跟不上时代了，例如每个方法的字节码最多65535字节；\",\"要生成StackMapTable太闹心；\",\"常量池的组织方式不便于直接从文件映射到内存然后高效执行；可以有更高效的组织方式。\",\"JAR文件方面：\",\"如前文提的，多个Class文件之间的常量池冗余；\",\"缺少带有强语义的描述模块的信息；\",\"等等…\"]},\"689\":{\"h\":\"栈顶缓存\",\"t\":[\"在最原始的 “基于表达式栈” 的基础上有两个变种，都是利用 “栈顶缓存” 的思路：\",\"单状态栈顶缓存，1-TOSCA\",\"多状态栈顶缓存，2-TOSCA\",\"单状态栈顶缓存：总是把表达式栈的栈顶值放在一个实际寄存器（这个缓存寄存器也叫累加器）里；如果表达式栈有多于一个值，则其余部分分配在栈帧上。\",\"关于 HotSpot VM 和 Dalvik VM 的解释器，前者是使用 1-TOSCA，后者是用全部映射到栈帧上的方式实现基于虚拟寄存器的指令集（Dalvik 字节码）。\",\"多状态栈顶缓存有几种不同的做法；本质上其就是一种非常简单使用的、适用于后序遍历表达树的寄存器分配思路[2]。\",\"stack slot\",\"暂时可以理解为栈的一部分。Second chance binpacking 算法（全局寄存器分配的算法之一，一种或线性扫描的算法）中会使用到这个概念。\"]},\"690\":{\"h\":\"IR\",\"t\":[\"如果有个项目急需为某个语言实现一个优化的 JIT 编译器，怎样能在有限的时间内快速做出优化程度足够好的实现呢？\",\"一个思路：如果有现成的静态编译器后端的话，针对输入的语言写个编译器前端，让它生成现成的后端能接受的IR，直接插到现成的后端上。\",\"“有现成的静态编译器后端”门槛挺高，直到LLVM普及之前；不过土豪大厂们早已跨过这门槛，自然会想走这条路。\",\"这个是引用知乎上的一个回答中的问题，从中我们可以管中窥豹，看一下 IR 在整个编译器中所处的位置。目前的理解是：IR 是后端的输入，前端的输出。\",\"LLVM IR 语言目标是成为一种通用中间语言，全称是 Intermediate Representation, 连接着编译器前端和后端；LLVM IR 的存在使得设计一门新的编程语言只需要完成能够生成 LLVM IR 的编译器前端即可，然后就可以轻松使用 LLVM 的各种编译优化、JIT 支持、目标代码生成等功能。\",\"IR 有三种形式：\",\"内存中的表示形式，如 BasicBlock, Instruction 这种 cpp 类\",\"bitcode 表示形式，这是一种序列化二进制的表示形式\",\"LLVM 汇编文件形式，这也是一种序列化的表示形式，与 bitcode 的区别是汇编文件是可读的、字符串的形式。\"]},\"691\":{\"h\":\"IR 内存模型\",\"t\":[\"内存中的 IR 模型其实就是对应 LLVM 实现中的 OO 模型，更直白的讲就是一些 cpp 的 class 的定义。\",\"如下图所示：\",\"这是一个简单的示意图，从上图中我们可以知道，存在着以下的模块：\",\"Module 类：这个可以理解为一个完整的编译单元，一般来说，这个编译单元就是一个源码文件，如一个后缀为 cpp 的源文件；一般而言，一个程序会被编译成为一个 Module，多个 Module 之间是相互隔离的，无法获取对方的内容；可以使用 M.dump() 在屏幕上打印出所有的信息。\",\"Function 类：这个类顾名思义就是对应一个函数单元，可以分为函数定义和函数声明；如图所示，在一个 Module 中，是由多个 func 组成的，Module 的主要组成部分是一个 function 的 list; Function 类有两个很实用的函数：F.dump() 可以打印出全部信息，F.viewCfg() 可以将ControlFlowGraph 按照dot 的方式存到文件里，使用第三方工具可以很舒服地观察它。\",\"BasicBlock 类：这个类表示一个基本代码块，基本代码块的含义是一段没有控制流逻辑的基本流程，相当于程序流程图中的基本过程（矩形）；其中有多条指令，指令是串行执行的，一个 BasicBlock 会以跳转语句或者 ret 语句结束；每个 BasicBlock 中都有一个唯一的 label, 可以用来跳转目的地址等。\",\"Instruction 类：指令类是 LLVM 中定义的基本操作，如加减乘除这种算数指令、函数调用指令、跳转指令、返回指令等；\",\"除此之外，还有基本类型 Value 和 User.\",\"Value 类：是一个非常基础的基类。一个继承于 Value 的子类表示它的结果可以被其他地方使用；\",\"User 类：一个继承于 User 的类表示它会使用一个或者多个 Value 对象；\",\"这两个基本类型会产生 use-def 和 def-use 两个链，前者表示某个 User 使用的 Value 列表，后者表示某个 Value 的 User 列表。\",\"use-def\",\"由于同一个函数实例可以在多个地方被调用，所以在 LLVM 中就可以查看一个函数被调用的指令列表：\",\"Function *F = ...; for (User *U : F->users()) { if (Instruction *Inst = dyn_cast<Instruction>(U)) { errs() << \\\"F is used in instruction:\\\\n\\\"; errs() << *Inst << \\\"\\\\n\\\"; } } \",\"我们不难看出，遍历的函数的 users().\",\"def-user\",\"对于指令和操作数而言，一个指令可以有一个或者多个操作数；可以对指令的操作数进行遍历：\",\"Instruction *pi = ...; for (Use &U : pi->operands()) { Value *v = U.get(); // ... } \",\"我们不难看出，遍历的是指令的 operands().\"]},\"692\":{\"h\":\"汇编形式的 IR\",\"t\":[\"前面第三点所提到的，是一个序列化的表示形式，不同于 bitcode, 其是可读的；如下例子：\",\"// add.cpp int add(int a, int b) { return a + b; } \",\"产生汇编形式的 IR:\",\"clang add.cpp -emit-llvm -S -c -o add.ll \",\"注意到如果要产生二进制码形式的 IR 的话，可以如下：\",\" clang add.cpp -emit-llvm -c -o add.bc \",\"当然这个二进制的产物是没有可读性的。\",\"clang 安装\",\"使用命令安装 clang:\",\"sudo apt-get install clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python-clang \",\"安装 clang 的时候，由于是依赖库的关系，llvm 也被安装了。\",\"部分的 IR 如下表示：\",\"; ModuleID = 'add.cpp' source_filename = \\\"add.cpp\\\" target datalayout = \\\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\\\" target triple = \\\"x86_64-pc-linux-gnu\\\" ; Function Attrs: noinline nounwind optnone uwtable define dso_local i32 @_Z3addii(i32 %0, i32 %1) #0 { %3 = alloca i32, align 4 %4 = alloca i32, align 4 store i32 %0, i32* %3, align 4 store i32 %1, i32* %4, align 4 %5 = load i32, i32* %3, align 4 %6 = load i32, i32* %4, align 4 %7 = add nsw i32 %5, %6 ret i32 %7 } attributes #0 = { noinline nounwind optnone uwtable \\\"correctly-rounded-divide-sqrt-fp-math\\\"=\\\"false\\\" \\\"disable-tail-calls\\\"=\\\"false\\\" \\\"frame-pointer\\\"=\\\"all\\\" \\\"less-precise-fpmad\\\"=\\\"false\\\" \\\"min-legal-vector-width\\\"=\\\"0\\\" \\\"no-infs-fp-math\\\"=\\\"false\\\" \\\"no-jump-tables\\\"=\\\"false\\\" \\\"no-nans-fp-math\\\"=\\\"false\\\" \\\"no-signed-zeros-fp-math\\\"=\\\"false\\\" \\\"no-trapping-math\\\"=\\\"false\\\" \\\"stack-protector-buffer-size\\\"=\\\"8\\\" \\\"target-cpu\\\"=\\\"x86-64\\\" \\\"target-features\\\"=\\\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\\\" \\\"unsafe-fp-math\\\"=\\\"false\\\" \\\"use-soft-float\\\"=\\\"false\\\" } !llvm.module.flags = !{!0} !llvm.ident = !{!1} !0 = !{i32 1, !\\\"wchar_size\\\", i32 4} !1 = !{!\\\"clang version 10.0.0-4ubuntu1 \\\"} \",\"从第 7 行开始就是 add 函数的汇编 IR. 我们简单观察就可以发现，其与源代码的一些对应关系。\",\"ModuleID：用于编译器区分不用 module 的 ID\",\"source_filename: 源文件名\",\"target datalayout: 目标机器架构数据布局 \",\"e: 内存存储模式为小端模式\",\"其他更多的信心可以参考手册[3]\",\"target triple: 用于描述目标机器信息的一个元组\",\"我们看 IR 中存在两种符号：@ 和 %, 分别表示全局标识符和局部标识符（局部变量）。\",\"其中局部标识符存在两种分配方式：\",\"寄存器分配的局部变量：此类局部变量多采用 %1 = some value 的方式进行分配，一般是接受指令返回结果的局部变量\",\"栈分配的局部变量：使用 alloca 指令在栈帧上分配的局部变量。如 %2 = alloca i32, %2 也是一个指针，访问或存储时必须使用 load or store 指令\",\"并且需要注意，局部标识符还存在两种命名方式：\",\"未命名的局部标识符：多采用带前缀的无符号数字表示\",\"命名的局部标识符：就是有名称，如 %result 这样的形式\"]},\"693\":{\"h\":\"IR 字节码解析\",\"t\":[\"还记得上一步中我们获得的 add.bc 文件吗？由于其时二进制的形式（也可以称之为字节码），所以我们没办法将其直接阅读，但是我们可以自己编写代码，使用 llvm 自带的一些解析函数，来打印出我们想要的信息。本程序参考知乎的文章《LLVM 概述——第一个 LLVM 项目》[4]。\",\"首先看需要解析字节码的 main.cpp 文件：\",\"// 引入相关LLVM头文件 #include <llvm/IR/LLVMContext.h> #include <llvm/IR/Function.h> #include <llvm/IR/Module.h> #include <llvm/IRReader/IRReader.h> #include <llvm/Support/SourceMgr.h> #include <llvm/Support/CommandLine.h> using namespace llvm; // LLVM上下文全局变量 static ManagedStatic<LLVMContext> GlobalContext; // 命令行位置参数全局变量, 这个参数的含义是需要处理的LLVM IR字节码的文件名 static cl::opt<std::string> InputFilename(cl::Positional, cl::desc(\\\"<filename>.bc\\\"), cl::Required); int main(int argc, char **argv) { // 诊断实例 SMDiagnostic Err; // 格式化命令行参数, cl::ParseCommandLineOptions(argc, argv); // 读取并格式化LLVM IR字节码文件, 返回LLVM Module(Module是LLVM IR的顶级容器) std::unique_ptr<Module> M = parseIRFile(InputFilename, Err, *GlobalContext); // 错误处理 if (!M) { Err.print(argv[0], errs()); return 1; } // 遍历Module中的每一个Function for (Function &F:*M) { // 过滤掉那些以llvm.开头的无关函数 if (!F.isIntrinsic()) { // 打印函数返回类型 outs() << *(F.getReturnType()); // 打印函数名 outs() << ' ' << F.getName() << '('; // 遍历函数的每一个参数 for (Function::arg_iterator it = F.arg_begin(), ie = F.arg_end(); it != ie; it++) { // 打印参数类型 outs() << *(it->getType()); if (it != ie - 1) { outs() << \\\", \\\"; } } outs() << \\\")\\\\n\\\"; } } } \",\"这个解析用的程序中有以下的细节需要注意：\",\"parseIRFile 加载 Module，然后遍历 Module 中的每一个 Function,\",\"然后可以打印出 Function 相关的一些信息。\",\"编译 main.cpp 和执行字节码的命令如下：\",\"clang++ $(llvm-config --cxxflags --ldflags --libs) main.cpp -o main ./main add.bc \"]},\"694\":{\"h\":\"JNI\"},\"695\":{\"h\":\"概述\",\"t\":[\"JNI 的全称是 Java Native Interface, 通过 JNI 技术，可以做到以下几点：\",\"Java 程序中可以调用 Native 语言写的函数；一般是 C/C++ 编写的函数；\",\"Native 程序中的函数可以调用 JAVA 层的函数；也就是说 在 C/C++ 中可以调用 JAVA 层的函数；\",\"仔细思考一下，如果引用了 JNI, 是不是就破坏了 JAVA 的平台无关性呢？其实不尽然，引入 JNI 有以下的好处：\",\"JAVA 虚拟机是由 Native 语言写的，并不是平台无关的，而 JNI 层可以对 JAVA 层屏蔽平台之间的差异，有助于实现 JAVA 本身平台无关的特性；\",\"很多程序都用 Native 语言写的，用 JNI 就可以直接使用了，避免了重复造轮子。\"]},\"696\":{\"h\":\"JAVA 调用 Native 的函数\",\"t\":[\"这个问题是萦绕在初学 JNI 的时候一个很大的问题，到底 Java 是如何调用 Native 的函数的呢？首先先看 Java 世界、JNI 世界和 Native 世界之间的关系：\",\"除此之外，为了方便理解，再图上增加了一个 MediaScanner 实例进行说明。\",\"MediaScanner 类中的一些功能需要由 Native 层来实现\",\"JNI 层对应 media_jni 库，库的名字是 media, jni 表示的是这个一个 JNI 库\",\"Native 的 libmedia.so 完成了实际的功能\",\" // media / java / android / media / MediaScanner.java public class MediaScanner { static { // 加载对应的 JNI 库 // 在实际加载动态库的时候会将其拓展称为 libmedia_jni.so System.loadLibrary(\\\"media_jni\\\"); // 调用 native_init() 函数 native_init(); } // .. // native 函数的声明；被 native 标识的函数表示它将由 JNI 层完成 private native void processDirectory(String path, MediaScannerClient client); // .. } \",\"在调用 native 函数之前，需要进行 JNI 库的加载；关于加载 JNI 库的时机，通用的做法是在类的 static 语句中加载，加载的方法是调用 System.loadLibrary 方法，需要注意 JNI 库的加载必须是在 native 函数调用之前；\",\"JAVA 程序员调用 JNI 中的函数还需要使用 native 关键字声明函数。\",\"从上我们可以看出，JNI 的使用对于 JAVA 程序员是非常友好的。\"]},\"697\":{\"h\":\"JNI 调用过程\",\"t\":[\"本小节用实际的代码走读来理解 Java native 函数是怎么被注册、调用的。\"]},\"698\":{\"h\":\"JNI 层分析\",\"t\":[\"@todo\"]},\"699\":{\"h\":\"静态注册 vs 动态注册\"},\"700\":{\"h\":\"Art 启动过程\"},\"701\":{\"h\":\"Art 启动过程\",\"t\":[\"APK 以进程的形式运行，进程的创建是由 zygote\",\"进程运行起来以后，初始化 Java VM（每一个进程都有一个 JVM）\",\"JVM 创建后，就有了 JNINativeInterface，其中包含所有的 JAVA 接口\",\"Java 运行时的功能简单来说分为：类的加载和函数 Method 的执行\",\"具体来简单讲述一下其中的细节：\",\"安卓进程启动调起 apk 在 mainfest 中申明的组件，如 Activity, 调起后的过程如下分析。\"]},\"702\":{\"h\":\"Zygote 创建 client\",\"t\":[\"Zygote 创建进程：其原理是通过 socket 跨进程的调用，Process.start 充当一个 Client 端。\",\"我们现在来逐一分析这些代码：\",\"// frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java // todo \",\"@todo 代码有重构，需要弄清楚 S 上面新的逻辑。\",\"ActivityManagerService 调用 Process.start() 方法，start 实现如下：\",\"public static ProcessStartResult start(/* (省略)args */) { return ZYGOTE_PROCESS.start(processClass, niceName, uid, gid, gids, runtimeFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, packageName, zygotePolicyFlags, isTopApp, disabledCompatChanges, pkgDataInfoMap, whitelistedDataInfoMap, bindMountAppsData, bindMountAppStorageDirs, zygoteArgs); } \",\"start 的时候调用了 ZYGOTE_PROCESS：\",\" /** * State associated with the zygote process. * @hide */ public static final ZygoteProcess ZYGOTE_PROCESS = new ZygoteProcess(); \",\"这个方法定义在 ZygoteProcess.java 中：\",\"// frameworks/base/core/java/android/os/ZygoteProcess.java public final Process.ProcessStartResult start(/* args... */) { // TODO (chriswailes): Is there a better place to check this value? if (fetchUsapPoolEnabledPropWithMinInterval()) { informZygotesOfUsapPoolStatus(); } try { return startViaZygote(processClass, niceName, uid, gid, gids, runtimeFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, /*startChildZygote=*/ false, packageName, zygotePolicyFlags, isTopApp, disabledCompatChanges, pkgDataInfoMap, allowlistedDataInfoList, bindMountAppsData, bindMountAppStorageDirs, zygoteArgs); } catch (ZygoteStartFailedEx ex) { Log.e(LOG_TAG, \\\"Starting VM process through Zygote failed\\\"); throw new RuntimeException( \\\"Starting VM process through Zygote failed\\\", ex); } } \"]},\"703\":{\"h\":\"Server 处理\",\"t\":[\"Server 端是 app_process 这个进程（该进程以 zygote 作为进程名）中，是一个常驻的系统服务。\",\"主要是调用 startViaZygote() 方法，由于代码太长，在此只列举部分关键代码：\",\"// frameworks/base/core/java/android/os/ZygoteProcess.java private Process.ProcessStartResult startViaZygote(/* args */) throws ZygoteStartFailedEx { ArrayList<String> argsForZygote = new ArrayList<>(); // --runtime-args, --setuid=, --setgid=, // and --setgroups= must go first argsForZygote.add(\\\"--runtime-args\\\"); argsForZygote.add(\\\"--setuid=\\\" + uid); argsForZygote.add(\\\"--setgid=\\\" + gid); argsForZygote.add(\\\"--runtime-flags=\\\" + runtimeFlags); if (mountExternal == Zygote.MOUNT_EXTERNAL_DEFAULT) { argsForZygote.add(\\\"--mount-external-default\\\"); } else if (mountExternal == Zygote.MOUNT_EXTERNAL_INSTALLER) { argsForZygote.add(\\\"--mount-external-installer\\\"); } else if (mountExternal == Zygote.MOUNT_EXTERNAL_PASS_THROUGH) { argsForZygote.add(\\\"--mount-external-pass-through\\\"); } else if (mountExternal == Zygote.MOUNT_EXTERNAL_ANDROID_WRITABLE) { argsForZygote.add(\\\"--mount-external-android-writable\\\"); } argsForZygote.add(\\\"--target-sdk-version=\\\" + targetSdkVersion); // 处理一些 args argsForZygote.add(processClass); if (extraArgs != null) { Collections.addAll(argsForZygote, extraArgs); } // 定义在：private final Object mLock = new Object(); synchronized(mLock) { // The USAP pool can not be used if the application will not use // the systems graphics driver. // If that driver is requested use the Zygote application start path. // 核心 return zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), zygotePolicyFlags, argsForZygote); } } \",\"openZygoteSocketIfNeeded() 的实现如下：\",\" @GuardedBy(\\\"mLock\\\") private ZygoteState openZygoteSocketIfNeeded(String abi) throws ZygoteStartFailedEx { try { attemptConnectionToPrimaryZygote(); if (primaryZygoteState.matches(abi)) { return primaryZygoteState; } if (mZygoteSecondarySocketAddress != null) { // The primary zygote didn't match. Try the secondary. attemptConnectionToSecondaryZygote(); if (secondaryZygoteState.matches(abi)) { return secondaryZygoteState; } } } catch (IOException ioe) { throw new ZygoteStartFailedEx(\\\"Error connecting to zygote\\\", ioe); } throw new ZygoteStartFailedEx(\\\"Unsupported zygote ABI: \\\" + abi); } \",\"主要是 socket 跨进程的调用：\",\" @GuardedBy(\\\"mLock\\\") private void attemptConnectionToSecondaryZygote() throws IOException { if (secondaryZygoteState == null || secondaryZygoteState.isClosed()) { secondaryZygoteState = ZygoteState.connect(mZygoteSecondarySocketAddress, mUsapPoolSecondarySocketAddress); maybeSetApiDenylistExemptions(secondaryZygoteState, false); maybeSetHiddenApiAccessLogSampleRate(secondaryZygoteState); } } \",\"具体的 connect 过程如下：\",\"static ZygoteState connect(@NonNull LocalSocketAddress zygoteSocketAddress, @Nullable LocalSocketAddress usapSocketAddress) throws IOException { DataInputStream zygoteInputStream; BufferedWriter zygoteOutputWriter; final LocalSocket zygoteSessionSocket = new LocalSocket(); if (zygoteSocketAddress == null) { throw new IllegalArgumentException(\\\"zygoteSocketAddress can't be null\\\"); } try { zygoteSessionSocket.connect(zygoteSocketAddress); zygoteInputStream = new DataInputStream(zygoteSessionSocket.getInputStream()); zygoteOutputWriter = new BufferedWriter( new OutputStreamWriter(zygoteSessionSocket.getOutputStream()), Zygote.SOCKET_BUFFER_SIZE); } catch (IOException ex) { try { zygoteSessionSocket.close(); } catch (IOException ignore) { } throw ex; } return new ZygoteState(zygoteSocketAddress, usapSocketAddress, zygoteSessionSocket, zygoteInputStream, zygoteOutputWriter, getAbiList(zygoteOutputWriter, zygoteInputStream)); } \",\"我们可以看到创建了一个 LocalSocket, 通过 LocalSocket 的通信，来完成进程的创建。\"]},\"704\":{\"h\":\"JNI 实例\",\"t\":[\"这篇博客[5]有一个给 libcore 增加日志的例子，全流程的走了一遍 native 方法创建、注册的过程，而我们选择的例子为 libcore 中 JDK 的实现。\"]},\"705\":{\"h\":\"Native java analysis\",\"t\":[\"Native Java 的代码如下：\",\"// libcore/ojluni/src/main/java/java/lang/String.java @FastNative native void getCharsNoCheck(int start, int end, char[] buffer, int index); \",\"上述函数使用 @FastNative 注解修饰，函数声明前的 native 表示这是一个 native 方法。\",\"在 libcore/openjdk_java_files.bp 中可以看到 String.java 文件，表示其在编译链中。\",\"filegroup { name: \\\"openjdk_javadoc_files\\\", srcs: [ \\\"ojluni/src/main/java/java/awt/font/NumericShaper.java\\\", // more code ... \\\"ojluni/src/main/java/java/lang/String.java\\\", // ... ], path: \\\"ojluni/src/main/java\\\", } \"]},\"706\":{\"h\":\"JNI 实现\",\"t\":[\"JNI 层负责实现 getCharsNoCheck, 实现过后会被注册，此时就与 Java 层的 native 方法对应起来了，对于 getCharsNoCheck 的注册过程如下：\",\"在 .hh 中：\",\"// art/runtime/native/java_lang_String.h #ifndef ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_ #define ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_ #include <jni.h> namespace art { void register_java_lang_String(JNIEnv* env); } // namespace art #endif // ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_ \",\"在 .cc 中进行注册：\",\"static void String_getCharsNoCheck(JNIEnv* env, jobject java_this, jint start, jint end, jcharArray buffer, jint index) { // ScopedFastNativeObjectAccess 中保存了 env 对象以及其所在的 Thread 对象 ScopedFastNativeObjectAccess soa(env); // 从 soa.Self 中获取 JNIEnv 所在的线程对象 StackHandleScope<1> hs(soa.Self()); // 获取 buffer 的指针 Handle<mirror::CharArray> char_array(hs.NewHandle(soa.Decode<mirror::CharArray>(buffer))); // 获取 jobject 指针后调用 GetChars soa.Decode<mirror::String>(java_this)->GetChars(start, end, char_array, index); } static JNINativeMethod gMethods[] = { FAST_NATIVE_METHOD(String, charAt, \\\"(I)C\\\"), FAST_NATIVE_METHOD(String, compareTo, \\\"(Ljava/lang/String;)I\\\"), FAST_NATIVE_METHOD(String, concat, \\\"(Ljava/lang/String;)Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, doReplace, \\\"(CC)Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, fastSubstring, \\\"(II)Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, getCharsNoCheck, \\\"(II[CI)V\\\"), FAST_NATIVE_METHOD(String, intern, \\\"()Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, toCharArray, \\\"()[C\\\"), }; void register_java_lang_String(JNIEnv* env) { REGISTER_NATIVE_METHODS(\\\"java/lang/String\\\"); } \",\"到此，我们对 register_java_lang_String 进行了定义，调用这个函数就可以进行 native 函数的注册。\",\"对于宏 REGISTER_NATIVE_METHODS，其定义如下：\",\"// art/runtime/native/native_util.h #define REGISTER_NATIVE_METHODS(jni_class_name) \\\\ RegisterNativeMethodsInternal(env, (jni_class_name), gMethods, arraysize(gMethods)) } // namespace art ALWAYS_INLINE inline void RegisterNativeMethodsInternal(JNIEnv* env, const char* jni_class_name, const JNINativeMethod* methods, jint method_count) { ScopedLocalRef<jclass> c(env, env->FindClass(jni_class_name)); if (c.get() == nullptr) { LOG(FATAL) << \\\"Couldn't find class: \\\" << jni_class_name; } jint jni_result = env->RegisterNatives(c.get(), methods, method_count); CHECK_EQ(JNI_OK, jni_result); } \",\"也就是说 register_java_lang_String() 最终是调用了 RegisterNativeMethodsInternal(), 传入了 class name, 全局的 gMethods, 以及计算出来的 count.\",\"@todo log 后增加分析结果\",\"对于宏 FAST_NATIVE_METHOD 我在源码中未找到其定义，但是根据其用法，不难发现，三个参数应该分别是：类名（函数指针）、函数名、函数参数和返回值（signature）。\",\"那么接下来的问题就只剩下：是谁调用了 register_java_lang_String() 进行了 native 函数的注册呢？我们进行下一章节的旅程。\"]},\"707\":{\"h\":\"InitNativeMethods\",\"t\":[\"除此之外，我们搜索全局的register_java_lang_String 发现，还在一处出现：\",\"// art/runtime/runtime.cc void Runtime::RegisterRuntimeNativeMethods(JNIEnv* env) { register_dalvik_system_DexFile(env); // ... register_java_lang_String(env); register_java_lang_StringFactory(env); // ... } \",\"这个函数的调用也是在这个文件中的 InitNativeMethods 函数（这个文件比较重要，所以全部列举出来了）：\",\"void Runtime::InitNativeMethods() { VLOG(startup) << \\\"Runtime::InitNativeMethods entering\\\"; Thread* self = Thread::Current(); JNIEnv* env = self->GetJniEnv(); // Must be in the kNative state for calling native methods (JNI_OnLoad code). CHECK_EQ(self->GetState(), kNative); // Set up the native methods provided by the runtime itself. RegisterRuntimeNativeMethods(env); // Initialize classes used in JNI. The initialization requires runtime native // methods to be loaded first. WellKnownClasses::Init(env); // Then set up libjavacore / libopenjdk / libicu_jni ,which are just // a regular JNI libraries with a regular JNI_OnLoad. Most JNI libraries can // just use System.loadLibrary, but libcore can't because it's the library // that implements System.loadLibrary! // // By setting calling class to java.lang.Object, the caller location for these // JNI libs is core-oj.jar in the ART APEX, and hence they are loaded from the // com_android_art linker namespace. // libicu_jni has to be initialized before libopenjdk{d} due to runtime dependency from // libopenjdk{d} to Icu4cMetadata native methods in libicu_jni. See http://b/143888405 { std::string error_msg; if (!java_vm_->LoadNativeLibrary( env, \\\"libicu_jni.so\\\", nullptr, WellKnownClasses::java_lang_Object, &error_msg)) { LOG(FATAL) << \\\"LoadNativeLibrary failed for \\\\\\\"libicu_jni.so\\\\\\\": \\\" << error_msg; } } { std::string error_msg; if (!java_vm_->LoadNativeLibrary( env, \\\"libjavacore.so\\\", nullptr, WellKnownClasses::java_lang_Object, &error_msg)) { LOG(FATAL) << \\\"LoadNativeLibrary failed for \\\\\\\"libjavacore.so\\\\\\\": \\\" << error_msg; } } { constexpr const char* kOpenJdkLibrary = kIsDebugBuild ? \\\"libopenjdkd.so\\\" : \\\"libopenjdk.so\\\"; std::string error_msg; if (!java_vm_->LoadNativeLibrary( env, kOpenJdkLibrary, nullptr, WellKnownClasses::java_lang_Object, &error_msg)) { LOG(FATAL) << \\\"LoadNativeLibrary failed for \\\\\\\"\\\" << kOpenJdkLibrary << \\\"\\\\\\\": \\\" << error_msg; } } // Initialize well known classes that may invoke runtime native methods. WellKnownClasses::LateInit(env); // check startup module ready 后再打印日志 VLOG(startup) << \\\"Runtime::InitNativeMethods exiting\\\"; } \",\"第 10 行调用了 RegisterRuntimeNativeMethods, 后面的很多过程也很重要，我们后续再进行研究。\",\"注意到有一行日志 VLOG(startup) << \\\"Runtime::InitNativeMethods entering\\\";, 我们可以通过在日志中查找是否有这个对应的打印来确定启动的时候是否调用到了这个流程（因为调用链还涉及到很多非常复杂的过程，所以我们可以通过这个方式来进行验证）\",\"@todo 验证后填写结论\",\"而InitNativeMethods 函数在 Runtime::Start() 中被调用：\",\"bool Runtime::Start() { // ...code // InitNativeMethods needs to be after started_ so that the classes // it touches will have methods linked to the oat file if necessary. { ScopedTrace trace2(\\\"InitNativeMethods\\\"); InitNativeMethods(); } // .. code } \",\"接下来的过程就是涉及到 JVM 进程的启动等知识了。\"]},\"708\":{\"h\":\"JNINativeInterface\",\"t\":[\"Art 的 JNINativeInterface 的定义如下(art/runtime/jni/jni_internal.cc):\",\"template<bool kEnableIndexIds> struct JniNativeInterfaceFunctions { using JNIImpl = JNI<kEnableIndexIds>; static constexpr JNINativeInterface gJniNativeInterface = { nullptr, // reserved0. nullptr, // reserved1. nullptr, // reserved2. nullptr, // reserved3. JNIImpl::GetVersion, JNIImpl::DefineClass, JNIImpl::FindClass, JNIImpl::FromReflectedMethod, JNIImpl::FromReflectedField, JNIImpl::ToReflectedMethod, JNIImpl::GetSuperclass, JNIImpl::IsAssignableFrom, JNIImpl::ToReflectedField, // more code }; } \",\"栈式虚拟机和寄存器式虚拟机？↩︎↩︎\",\"寄存器分配问题？ - RednaxelaFX的回答 - 知乎 ↩︎\",\"llvm data-layout↩︎\",\"LLVM 概述——第一个 LLVM 项目↩︎\",\"Java核心库libcore中添加Log接口任意调用（Android10）↩︎\"]},\"709\":{\"c\":[\"JAVA\"]},\"710\":{\"c\":[\"jvm\",\"java\"]},\"711\":{\"h\":\"Linux Kernel Build：Linux 内核编译\"},\"712\":{\"h\":\"1. 预备工作\",\"t\":[\"阿里云开源镜像站下载内核：阿里云。下载内核和patch包。\",\"安装必要的软件\",\"#安装必要的软件 apt-get install kernel-package build-essential libncurses5-dev fakeroot #解压缩内核 tar -xzf linux-4.x.x.tar.gz \",\"把内核目录linux-4.x.x和补丁patch都复制到/usr/src，然后进入/usr/src\",\"cp linux-x.x /usr/src -rf cp patch-x.x /user/src cd /usr/src \"]},\"713\":{\"h\":\"2. 准备编译\",\"t\":[\"#复制当前内核的config文件到linux-x.x/下 cp linux-headers-$(uname -r)/.config linux-x.x/ cd linux-x.x/ make menuconfig \",\"选择load→OK→Save→OK→EXIT→EXIT的执行顺序。\"]},\"714\":{\"h\":\"3. 开始编译\",\"t\":[\"# 编译启动映像，N表示CPU核数，单核为2.双核为4，以此类推 make bzImage -jN #编译模块 make modules -jN #安装模块 make modules-install #安装内核 make install \"]},\"715\":{\"h\":\"4. 更新grub\",\"t\":[\"# 4.5.0为版本号 mkinitramfs 4.5.0 -o /boot/initrd.img-4.5.0 update-grub2 \"]},\"716\":{\"h\":\"内核与内核模块\"},\"717\":{\"h\":\"内核模块\",\"t\":[\"一般内核模块放置在lib/modules/$(uname -r)/kernel当中，包括arch, drivers和net等子文件。\",\"在新建模块的时候，会遇到模块的依赖性问题，在 lib/modules/$(uname -r/modules.dep) 文件中存储，这个文件的创建使用 depmod [-Ane] 命令：\",\"depmod [-Ane] -A: 查找到新模块再更新该文件 -n: 不写入modules, 但在屏幕上输出 -e: 显示出当前已加载但不可执行的模块名称 \",\"举例：如果我做好了一个网卡驱动程序，文件名为a.ko，则更新内核模块：\",\"cp a.ko /lib/modules/$(uname -r )/kernel/drivers/net depmod \"]},\"718\":{\"h\":\"内核模块的查看\",\"t\":[\"lsmod命令可查看已加载的模块，查看内核模块的信息，使用modinfo\",\"modinfo [-adln] [module_name|filename] -a: 仅列出作者名称 -d: 仅description -l: 仅列出授权 -n: 列出该模块的详细路径 \",\"e.g. 列出ath模块的路径：modinfo -n ath\"]},\"719\":{\"h\":\"内核模块的加载与删除\",\"t\":[\"modprobe命令可解决依赖性并决定需要加载的模块，优于insmod\",\"对于删除模块：\",\"rmmmod [-fw] module_name -f: 强势删除，无论是否被使用 -w: 若该模块在使用，则等待该模块使用完后再删除 \",\"但是通常情况下，不推荐使用insmod和rmmod命令，万一模块存在依赖属性的问题时，将无法直接加载或删除该模块，所以使用modprobe来处理加载模块的问题：\",\"modprobe [-lcfr] module_name\\n-r: 删除某个模块\\n\"]},\"720\":{\"c\":[\"Server\",\"Linux\"]},\"721\":{\"c\":[\"Linux\"]},\"722\":{\"h\":\"深度实践 KVM -- KVM 技术详解与实战\",\"t\":[\"这篇博客主要记录 KVM 学习中的收获和心得，主要阅读书籍为《深度实践 KVM》\"]},\"723\":{\"h\":\"KVM 介绍\"},\"724\":{\"h\":\"虚拟化介绍\",\"t\":[\"KVM 全称 Kernel-based Virtual Machine.\",\"KVM 是一种开源的虚拟化技术，是 OpenStack 平台上份额较高的虚拟化引擎。\",\"KVM 必须在具有 Intel VT 或 AMD-V 功能的 X86 平台上运行，在 3.9 内核以后加入了对 ARM 的支持。\",\"提示\",\"X86 平台的指令集权限分为 Ring 0 到 Ring 3 共计 4 个特权模式，操作系统一般使用 Ring 0 级别，驱动程序使用 Ring 1 和 Ring 2 级别，应用程序使用 Ring 3 级别。\",\"VMware 公司的虚拟化技术将自己的虚拟化引擎 VMM 放在了 Ring 1 层，这是一种软件全虚拟化方案。\",\"Intel 公司推出了对 CPU 指令进行改造的方案 VT-x，基于硬件全虚拟化方案，是当前虚拟化引擎的主要解决方案。\",\"简而言之，就是使得物理硬件支持虚拟化特性。由于基于硬件，故其效率非常高。\",\"还有一种容器虚拟化方案，最著名的就是 Docker。其原理是基于 CGroups 和 Namespace 等技术将进程隔离，使得每个进程就像一台单独的虚拟机一样。\",\"容易虚拟化当下发展较为广泛，比如 K8S 等，个人认为这是学习的重点。\"]},\"725\":{\"h\":\"KVM 架构\",\"t\":[\"KVM Driver 包括在 Linux Kernel 中，一台虚拟机就是一个普通的 Linux 进程，对虚拟机的管理通过对这个进程的管理加以完成。\",\"由于对进程的管理十分复杂，RedHat 发布了开源的项目Libvirt（有 API 和命令行管理工具），现有的大多数管理平台通过 Libvirt 来完成 KVM 虚拟机的管理，如 OpenStack，CloudStack 和 OpenNebula 等。\",\"Libvirt 主要由 3 部分组成：\",\"一套 API 的 lib 库，支持主流的编程语言。\",\"Libvirtd 服务。\",\"命令行工具 virsh。\",\"一般而言，KVM 的管理都是使用 Libvirt。\",\"提示\",\"常用的企业级虚拟化产品主要有：VMware（EMC），HyperV（微软），Xen（开源），KVM（开源）。\"]},\"726\":{\"h\":\"网络虚拟化技术\",\"t\":[\"一些容易忘的点，写在这随时查阅。\"]},\"727\":{\"h\":\"虚拟机的网络模式\",\"t\":[\"对比一下：\",\"NAT\",\"Bridged\",\"Internal\",\"Host-Only\",\"虚拟机 -> 主机\",\"√\",\"√\",\"×\",\"× 可配\",\"主机 -> 虚拟机\",\"×\",\"√\",\"×\",\"× 可配\",\"虚拟机 -> 其他主机\",\"√\",\"√\",\"×\",\"× 可配\",\"其他主机 -> 虚拟机\",\"×\",\"√\",\"×\",\"× 可配\",\"虚拟机之间\",\"√\",\"√\",\"×\",\"√\"]},\"728\":{\"h\":\"NAT\",\"t\":[\"网络地址转换。其原理类似于路由器的工作方式，使用 NAT 模式可以使得虚拟机通过网络地址转换功能，通过宿主机所在的机器网络对公网进行访问。\",\"其本质原理是虚拟机的网卡连接到宿主机的 VMnet8 虚拟交换机上（安装虚拟机后会创建两张网卡：VMnet1 和 VMnet8，之前还会有一个自带的 VMnet0，这指的是 VM 虚拟化的方式，其他虚拟化在后面讨论，用 VM 虚拟化进行举例），这时候把 VMnet8 当做一个路由器来用，VMnet8 对数据包进行地址转换以后发送到实际网络中，返回也是同理。\",\"这种方式的缺点在于：\",\"虚拟机的网络比较依赖宿主机的网络，宿主机的网络如果断开了，虚拟机的网络也就挂了。\",\"主机 ping 虚拟机，不通；同一宿主的虚拟机，可以 ping 通。\",\"其他主机要访问虚拟机，也不行（这里指的应该是不能直接访问，走 NAT 地址转换应该是可以进来的）。\"]},\"729\":{\"h\":\"Host-Only\",\"t\":[\"仅主机。经典的建局域网的场景，在这种模式下，一切通信都似乎不行（默认关闭），又似乎可以（可以设置），需要精通网络知识的人进行配置，也比较麻烦。\",\"其本质原理是，将虚拟机连接到了 VNnet1 上面，VMnet1 默认是使用的是桥接方式进行网络连接，但是系统不给其提供任何路由服务，故在默认情况下，虚拟机只能和宿主机通信，无法访问外网。\"]},\"730\":{\"h\":\"Bridged\",\"t\":[\"桥接模式。\",\"这个模式比较厉害，在这个模式下，虚拟机被视为和宿主机同等地位的存在（其网络在一个网段）。\",\"其使用的是宿主机自带的 VMnet0 虚拟网卡（VMnet0 本质上就是一个虚拟网桥），这个网桥有若干接口(port1, port2,..,portN),任一端口都可以用于连接主机，剩下的用于连接虚拟机。\",\"虚拟机和主机在一个网段下面，就可以互相通信，很强！\"]},\"731\":{\"h\":\"Internal\",\"t\":[\"内部网络。内部网络与桥接网络相似，不同之处在于内部通信，不多赘述。 参考 https://www.jianshu.com/p/305f7384cfe9\"]},\"732\":{\"h\":\"多网卡 bond 模式\",\"t\":[\"多网卡绑定一共有 7 种 bond 模式，bond0 ~ bond6，通常而言，bond 模式是想要将多个物理网卡绑定为一个逻辑网卡。\"]},\"733\":{\"c\":[\"Cloud\"]},\"734\":{\"c\":[\"cloud\"]},\"735\":{\"h\":\"Linux 进程和线程\"},\"736\":{\"h\":\"Thread and Process\",\"t\":[\"进程\",\"进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有自己的一个地址空间，至少有 5 种基本状态，他们分别是：初始态，就绪态，执行态，等待态，终止态。\",\"线程\",\"线程是 CPU 调度和分派的基本单位，它可以与同属一个进程的其他线程共享进程所拥有的全部资源。\",\"联系\",\"线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。\",\"区别\",\"根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。\",\"开销方面：每个进程都有独立的代码和数据空间（进程上下文），程序之间切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每一个线程都有自己独立的 运行栈 和 程序计数器（PC），线程之间的切换开销小。\",\"内存分配：系统在运行时为每个进程分配不同的内存空间；而对线程而言，除了 CPU 外，系统不会为线程分配内存，线程组之间只能共享资源。\",\"包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程是多个线程共同完成的；线程是进程的一部分，所以线程也被成为轻量级进程。\",\"并发和隔离\",\"操作系统中有两个重要的概念：并发和隔离。\",\"并发是为了尽量让硬件利用率高，线程是为了在系统层面做到并发，线程上下文切换效率比进程上下文切换效率高很多，这样可以提高并发效率。\",\"隔离是并发以后要解决的重要问题，计算机的资源一般是共享的，隔离能保障资源的回收，不影响其他代码的使用。\"]},\"737\":{\"h\":\"多进程\"},\"738\":{\"h\":\"fork()\",\"t\":[\"程序运行时操作系统会创建一个进程，并为它分配资源，然后把该进程放入就绪队列，进程调取器选中的话就为该进程分配 CPU 时间，程序真正开始运行。\",\"Linux使用 fork() 来创建子进程，其返回值的含义是：\",\"负数：创建子进程失败\",\"0： 返回在子进程中\",\"正数：返回在父进程中，该正数为新创建的子进程的 pid\",\"注意到 fork 函数在调用之后会返回两次, 他在调用进程中(称为父进程)中返回一次，返回值是新派生进程(子进程)的进程 ID 号；在子进程中又返回一次，进程号为 0。因此，返回值本身告知当前进程是子进程还是父进程。\",\"fork 在子进程返回 0 而不是父进程的进程 ID 的原因在于：任何子进程只有一个父进程，而且子进程总是可以通过 getppid 取得父进程的进程 ID。相反，父进程可以有很多个子进程，而且无法获得各个子进程的进程 ID。如果父进程想跟踪所有子进程的进程 ID，那么它必须记录每次调用 fork 的返回值。\",\"注意子进程结束时，父进程应当回收子进程，不然子进程会变成僵尸进程。\",\"Linux 下查看僵尸进程使用 top 命令，其中的 zombie 前的数量就代表僵尸进程的数量。\",\"问题：连续调用三次 fork(), 会返回几个进程？\",\"答：2^3 个。\",\"多进程相比于多线程而言更加健壮，因为多线程程序只要有一个线程奔溃，整个进程也会奔溃，而一个进程奔溃并不会对另一个进程造成影响，因为进程拥有自己的地址空间。\"]},\"739\":{\"h\":\"exec()\",\"t\":[\"fork 有两种典型用法：\",\"一个进程创建自身的副本，这样每个副本都可以在另一个副本执行其他任务的同时处理各自的某个操作。网络服务器一般都用这个方法。\",\"一个进程想要执行另外一个程序。该进程调用 fork 创建一个自身的副本，然后其中一个副本(通常为子进程)调用 exec 把自身替换成新的程序。shell 就是使用的这个方法。\",\"exec 函数有 6 个，但是只有 execve 是内核中的系统调用，其他 5 个都是调用 execve 的库函数。\"]},\"740\":{\"h\":\"进程间通信\",\"t\":[\"进程间通信（IPC）的方式包括：信号，管道，共享内存，消息队列，信号量，封装的有 TCP/IP 套接字。\",\"代码实现可以参考 GitHub\"]},\"741\":{\"h\":\"命名管道 FIFO\",\"t\":[\"用到 sys/stat.h, unistd.h, linux/stat.h 等头文件。\",\"命名管道变编程使用 FILE 对象，和文件读写的操作很相似，创建 FIFO 使用：\",\"mkfifo(FIFO_FILE, 0666):\",\"FIFO_FILR 为宏定义的文件名：#define FIFO_FILE \\\"MYFIFO\\\"\",\"返回值小于 0 则说明命名管道存在\",\"返回值大于 0 则说明创建命名管道成功\",\"0666 代表权限。在此对权限进行以下说明：\",\"读\",\"写\",\"执行\",\"4\",\"2\",\"1\",\"从表格中可以看出， 6 代表的含义为 4 + 2, 为读和写。四位数字代表特殊权限位，拥有者位，同组用户位，其余用户位。\",\"要进行命名管道的通信，则使用一个 buff 读取文件指针，例如：\",\"FILE* fp = fopen(FIFO_FILE, \\\"r\\\") 打开命名管道；\",\"fgets(readbuf, 80, fp) 读取命名管道，相应的，可以使用 fputs() 写入命名管道。\"]},\"742\":{\"h\":\"IPC 消息\",\"t\":[\"用到 sys/ipc.h, sys/msg.h 等头文件。\",\"创建一个 ipc 消息的方式一般为：\",\"int msgid = msgget((key_t)1234, 0666|IPC_CREAT);\",\"返回值说明如下：\",\"返回 -1：创建失败\",\"否则，成功创建，该消息的 id 为 1234\",\"接收和发送消息使用：\",\"msgrcv(msgid, data, BUFSIZE, 0, 0): 返回 -1 则失败，否则接收到消息值 data.\",\"msgsnd(msgid, data, BUFSIZE, 0): 返回 -1 则失败，否则发送消息。\"]},\"743\":{\"h\":\"共享内存\",\"t\":[\"用到 sys/ipc.h, sys/shm.h 头文件。\",\"创建一个共享内存的方式一般如下：\",\"int shmid = shmget((key_t)1234, 256, 0666|IPC_CREAT):\",\"返回负数：shmget 失败\",\"char *shmptr = shmat(shmid, 0, 0):\",\"返回 -1：失败\",\"然后使用 strcpy 将 shmptr 拷贝出来或者拷贝出去：\",\"write: strcpy(shmptr, char* text)\",\"read: strcpy(buf, shmptr)\"]},\"744\":{\"h\":\"SSH\",\"t\":[\"sudo ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key sudo service ssh start \",\"sudo apt-get install openssh-server #ssh config /etc/ssh/sshd_config \",\"start server:\",\"sudo service ssh restart/start \",\"A bug:\",\"sudo ssh-keygen -t rsa -f /etc/ssh/ssh_host_ed25519_key \"]},\"745\":{\"h\":\"Python File Server\",\"t\":[\"python -m http.server #default port: 8000 python -m http.server 80 #in port 80 \"]},\"746\":{\"h\":\"Program Status\",\"t\":[\"echo $? echo %ERRORLEVEL% #windows \",\"Shell\",\"This is a basic note about Linux shell, I have wrote plenty of bash shell, which helps solve problem easily.\",\"Include system information, SSH, read -p, shell array, sed, AWK\"]},\"747\":{\"h\":\"System Information\",\"t\":[\"Sometimes, you may want to see the system kernel version, 2 ways are available :\",\"lsb_release -a cat /etc/issue \",\"change password for a user:\",\"sudo passwd root \",\"echo current time as a file name:\",\"echo test >> $(date -d \\\"today\\\" +\\\"%Y%m%d_%H%M%S\\\").txt # work log git log -4 > log/$(date -d \\\"today\\\" +\\\"%Y%m%d\\\").txt \"]},\"748\":{\"h\":\"Add Choice for User - Read -p\",\"t\":[\"read -p is very useful for this, for example:\",\"read -n1 -p \\\"What is your system version? 1: Ubuntu 16.04; 2: Ubuntu 17.10; 3: Ubuntu 18.04; choose a number between 1, 2 and 3: \\\" answer case $answer in 1) ...;; 2) ...;; 3) ...;; esac \",\"Tips :\",\"-n1 : -n and 1 are used together, which means read commmand will quit when system accept a single character, no need for Enter.\",\"-s : this options will avoid displaying user passwords on the screen.\",\"-t 5: overtime option, this means that user must complete the input within 5 seconds.\"]},\"749\":{\"h\":\"Shell Array\",\"t\":[\"arrayName=(array_content) #get the content of arrary, or [*] echo ${arraryName[@]} #get the size of array echo ${#arrayName[*]} \"]},\"750\":{\"h\":\"Sed\",\"t\":[\"current_plugins_version=$(dpkg -s picoscenes-plugins-demo-rxsbroadcaster-chronos | grep Version | sed 's/Version: //g') \",\"This is a basic use of sed, sed 's/Version: //g' means that a select:\",\"Version: 18.0406.2333 \",\"Output is:\",\"18.0406.2333 \",\"That means replace \\\"Version: \\\" with empty.\",\"To replace the string in the file, use -i:\",\"sudo sed -i 's/GRUB_HIDDEN_TIMEOUT=0/#GRUB_HIDDEN_TIMEOUT=0/g' /etc/default/ \",\"This is an example that we do the CSI experiment, update the ~/etc/default/grub make the new kernel version could be seen.\"]},\"751\":{\"h\":\"tr and awk\",\"t\":[\"tr 可以理解为sed的简化版本\",\"Usage: tr [OPTION]... SET1 SET2\",\"-c, -C, --complement: use the complement of SET1(不常用)\",\"-d, -delete: delete characters in SET1\",\"-s: replace each sequence of a repeated character, 删除所有重复出现字符序列，只保留第一个\",\"#将所有的the替换为my tr -s 'the' 'my' tr -s ' ' '\\\\n' #删除所有的the tr -d 'the' #小写变大写 tr [a-z] [A-Z] #删除连续的重复字母 tr -s [a-zA-Z] \",\"AWK Tutorial\",\"which awk $ usr/bin/awk \",\"display the complete content of the files using AWK:\",\"awk '{print}' xx.txt \",\"AWK script:\",\"create a text file command.awk containing the AWK command:\",\"{print} \",\"the use it:\",\"awk -f command.awk xx.txt \",\"Options:\",\"# -v option awk -v name=Jerry 'BEGIN{printf \\\"Name = %s\\\\n\\\", name}' awk --help \",\"print column:\",\"awk '{print $3 \\\"\\\\t\\\" $4}' marks.txt # or in any order awk '{print $4 \\\"\\\\t\\\" $3}' marks.txt \",\"there we print the third and the fourth fields.\",\"awk '/a/ {print $4 \\\"\\\\t\\\" $3}' marks.txt \",\"the pattern, only print 4 lines:\",\"awk '/a/{++cnt} END {print \\\"Count = \\\", cnt}' marks.txt # Count = 4(where the marks.txt has 5 lines) \",\"$0 variable stores the entire line and in the absence of a body block, default action is taken, i.e., the print action.\"]},\"752\":{\"h\":\"tar\",\"t\":[\"解压一般的 tag.gz:\",\"tar -xzvf [file] \",\"解压 xz：\",\"xz -d *.tar.xz tar -xvf *.tar \"]},\"753\":{\"h\":\"查看端口号\",\"t\":[\"查看端口被哪个进程占用：\",\"lsof -i:80 \",\"或者\",\"netstat -ano | grep 80 \"]},\"754\":{\"h\":\"守护进程\",\"t\":[\"nohup python3 webhook.py &\\n\"]},\"755\":{\"c\":[\"Linux\"]},\"756\":{\"c\":[\"Linux\",\"Thread\"]},\"757\":{\"h\":\"Nginx 基础总结\",\"t\":[\"Beginner's Guide\"]},\"758\":{\"h\":\"Command\",\"t\":[\"nginx -s signal \",\"-s: signal:\",\"stop — fast shutdown\",\"quit — graceful shutdown\",\"reload — reloading the configuration file\",\"reopen — reopening the log files\",\"查看运行 nginx 进程：\",\"ps -ax | grep nginx \"]},\"759\":{\"h\":\"Configuration\",\"t\":[\"By default, the configuration file is named nginx.conf and placed in the directory /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx.\",\"The events and http directives reside in the main context, server in http, and location in server.\",\"http { server { listen 8080; root /data/upl; location / { root /data/www; } localtion /images/ { root /data; } location ~ \\\\.(gif|jpg|png)$ { root /data/images; } } } \",\"location 未定位到的 URL 将被重定向到 / 下的 root 中。\",\"Reload 配置：\",\"nginx -s reload \",\"In case something does not work as expected, you may try to find out the reason in access.log and error.log files in the directory /usr/local/nginx/logs or /var/log/nginx.\"]},\"760\":{\"h\":\"虚拟主机\",\"t\":[\"nginx 可以配置多种类型的虚拟主机：\",\"基于 IP\",\"基于域名\",\"基于端口\",\"以基于端口的虚拟主机为例，对 nginx.conf 进行配置。\",\"http { include mime.types; #default_type application/octet-stream; # 为了使 echo 可用 default_type text/html; server { listen 8088; server_name localhost; location / { root html; index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # custom config -- weigao server { listen 8089; location / { echo 'hello server2!'; } } server { listen 8090; location / { echo 'hello server3!'; } } } \",\"现在，访问 8088, 8089, 8090 端口就可以发现不同的输出结果，这样就实现了多个虚拟主机的代理。\"]},\"761\":{\"h\":\"反向代理\",\"t\":[\"http { # 指定 upstream upstream to_google { server localhost:8089; server localhost:8090; } server { listen 80; # 对外暴露 server_name www.google.com; location / { proxy_pass http://to_google; # 使用 http:// + upstream 别名指定 } } # 以下为内部服务器，对外不可见 server { listen 8089; location / { echo 'Welcome to google! This is 8089 machine!!!'; echo 'remote_addr=$remote_addr'; # 防止逐层代理，获取到真实 ip. } } server { listen 8090; location / { echo 'Welcome to google! This is 8090 machine!!!'; } } } \",\"(记得将 www.google.com 在 host 文件中指向本地，或者注释掉 server_name)\",\"需要注意，upstream 为关键词，紧跟着的 to_google 为这个 upstream 的别名，在 proxy_pass 中 使用 http:// + 别名的方式指定。\",\"当 upstream 发现其中有两个 server 可以用的时候，使用轮询策略（默认）依次访问 8089 和 8090, 个人猜测会不会也用 epoll?\"]},\"762\":{\"h\":\"负载均衡\"},\"763\":{\"h\":\"概述\",\"t\":[\"Nginx 的负载均衡策略有三种：\",\"RR 每个请求按照时间顺序逐一分配到不同的后端服务器；\",\"权重 指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。\",\"ip_hash 按访问 ip 的 hash 结果分配。\",\"upstream 用于负载均衡的时候，可以支持以下参数：\",\"weight：权重，常用于机器性能不均衡时，权重越大被访问的几率越大。\",\"down：用于其他 server 设置当前不参与负载均衡，即访问不到\",\"backup：用于其他 server 无法访问或者忙时备用 server\",\"max_fails：server 允许请求失败的次数\",\"fail_timeout：请求失败次数达到 max_fails 时，指定 server 停留多久，以便管理员检测故障原因\",\"例子：\",\"upstream loadBalance { server localhost:8090 weight=1; server localhost:8091 weight=2 backup; } \"]},\"764\":{\"h\":\"ip_hash\",\"t\":[\"每个请求按访问 IP 的 hash 结果分配，这样来自同一 IP 访客固定访问一个后端服务器，有效解决了动态网页存在的 sesion 共享问题。\",\"upstream loadBalance { ip_hash; server localhost:8090; server localhost:8091; } \",\"除此之外，还有 url_hash 方法。此方法按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器。此方法再 Nginx 的 hash 软件包中。\"]},\"765\":{\"h\":\"least_conn\",\"t\":[\"即最少连接数策略，nginx 可以使请求分配到最少连接数的机器上。\",\"upstream loadBalance { least_conn; server localhost:8090; server localhost:8091; } \"]},\"766\":{\"h\":\"缓存\",\"t\":[\"Nginx 缓存在 ngx_http_proxy_module 下的 几个模块中 http://nginx.org/en/docs/http/ngx_http_proxy_module.html.\",\"http { proxy_cache_path cache/test levels=1:2 keys_zone=myCache:10m maxsize=1g inactive=30s; server { listen 80; add_header X-Cache $upstream_cache_status; location / { proxy_pass http://localhost:8080; proxy_cache_vaild 10s; proxy_cache myCache; } } } \"]},\"767\":{\"c\":[\"Server\"]},\"768\":{\"c\":[\"server\",\"nginx\"]},\"769\":{\"h\":\"Openresty 基础总结\"},\"770\":{\"h\":\"Install\",\"t\":[\"官方安装教程\",\"尝试了很多安装方法，自我感觉源码安装比较可靠，操作步骤如下：\",\"下载官方源码安装包：源码地址\",\"安装必要的依赖\",\"apt-get install libpcre3-dev \\\\ libssl-dev perl make build-essential curl \",\"解压并且编译\",\"tar -xzvf openresty-VERSION.tar.gz cd openresty-VERSION/ ./configure make sudo make install \"]},\"771\":{\"h\":\"Hello World\",\"t\":[\"安装完成后测试：\",\"resty -e 'print(\\\"hello, world\\\")'\\n\"]},\"772\":{\"c\":[\"Server\"]},\"773\":{\"c\":[\"server\",\"nginx\"]},\"774\":{\"h\":\"Linux 包管理：Snap\",\"t\":[\"Easily Upgraded, Universal Linux Package\",\"Snaps are containerised software packages that are simple to create and install. They auto-update and are safe to run. And because they bundle their dependencies, they work on all major Linux systems without modification.\",\"Snapcraft is a command line tool used to build snaps. This guide details the recommended steps to get ready to build snaps.The easiest way to package your code as a snap is to use Snapcraft, which supports building from source and from existing packages, integrates into your CI process and handles publishing your snaps to the world.\"]},\"775\":{\"h\":\"1. Abstract\",\"t\":[\"Snapcraft builds on top of tools like autotools, make, and cmake to create snaps fro people to install on Linux.\",\"sudo apt-get install snapcraft\",\"Here are some snap advantages that will benefit many C/C++ projects:\",\"Installation: snap install myapp\",\"Directly control the delivery of automatic application updates\"]},\"776\":{\"h\":\"2. DOSBox Snap\",\"t\":[\"Snaps are defined in a single yaml file placed in the root of your project. The DOSBox example shows the entire snapcraft.yaml for a existing project.\",\"name: dosbox version: \\\"0.74-svn\\\" summary: DOSBox description: | DOSBox is a x86 emulator with Tandy/Hercules/CGA/EGA/VGA/SVGA graphics sound and DOS. It's been designed to run old DOS games under platforms that don't support it. confinement: devmode apps: dosbox: command: dosbox parts: dosbox: plugin: autotools source-type: tar source: http://source.dosbox.com/dosboxsvn.tgz build-packages: - g++ - make - libsdl1.2-dev - libpng12-dev - libsdl-net1.2-dev - libsdl-sound1.2-dev - libasound2-dev \"]},\"777\":{\"h\":\"Confinement\",\"t\":[\"To get started, we won’t confine this application. Unconfined applications, specified with devmode, can only be released to the hidden “edge” channel where you and other developers can install them.\",\"confinement: devmode \"]},\"778\":{\"h\":\"Parts\",\"t\":[\"Parts define how to build your application.\",\"Before building the part, the dependencies listed as build-package are installed. More information of autotools plugin is given by command snapcraft help autotools.\"]},\"779\":{\"h\":\"3.Basic about Snap\"},\"780\":{\"h\":\"Install snap on Ubuntu\",\"t\":[\"Ubuntu includes Snap by default starting with the 16.04LTS release, for the older 14.04LTS release or any flavor, you have to install it form the archive:\",\"sudo apt install snap \"]},\"781\":{\"h\":\"Using the snap command\",\"t\":[\"Login with Ubuntu One Account\",\"sudo snap login <youremail> \",\"When you are logged in, find snaps in the snap store, and then you can install it using the snap name.\",\"snap find hello snap install hello-world snap list # view details about installed snap \"]},\"782\":{\"h\":\"4.Snapcraft\"},\"783\":{\"h\":\"Setup LXD\",\"t\":[\"LXD installation on Ubuntu is quite straightforward:\",\"snap install sudo lxd init sudo usermod -g lxd ${USER} #LXD requires that your user is in the lxd group. \"]},\"784\":{\"h\":\"Test a container build\",\"t\":[\"By now should be all set, we can test that everything is setup correctly with a few commands:\",\"mkdir test-snapcraft cd test-snapcraft snapcraft init snapcraft cleanbuild \"]},\"785\":{\"h\":\"Build first snap\",\"t\":[\"Snapcraft uses single text file to describe the entire build process for a snap:\",\"vim test-snapcraft/snapcraft.yaml \",\"To get start with a template, you can run snapcraft init, it wll create a new directory snap with a file named snapcraft.yaml , the final file looks like this:\",\"name: hello version: \\\"2.10\\\" summary: GNU Hello, the \\\"hello world\\\" snap description: GNU Hello prints a friendly greeting. grade: stable confinement: strict apps: hello: command: hello parts: gnu-hello: plugin: autotools source: http://ftp.gnu.org/gnu/hello/hello-2.10.tar.gz \",\"This is the only file needed in the directory, Snapcraft can use local source code or fetch everything needed to build the snap from remote sources.\"]},\"786\":{\"h\":\"Run snapcraft\",\"t\":[\"You can now build a snap out of your snapcraft.yaml by running snapcraft in the project directory:\",\"snapcraft \",\"After this process, the snap is now available in your directory.\",\"$ ls\\nhello_2.10_amd64.snap  parts  snap  prime \\n$ sudo snap install hello_2.10_amd64.snap --dangerous\\nhello 2.10 installed\\n$ hello\\nHello, World!\\n$sudo snap remove dosbox\\n\"]},\"787\":{\"c\":[\"Linux\"]},\"788\":{\"c\":[\"Linux\"]},\"789\":{\"h\":\"MongoDB Database\",\"t\":[\"Common RDB(Relational Database): PostgreSQL, MySQL, Orcal, MS SQL Server and SQLite.\",\"database –collection – document– field – index.\",\"Install in LInux\",\"mongoDB _id\",\"_id 类型为 ObjectId, 是一个 12 字节 的 BSON 类型字符串，按照字节顺序，依次代表：\",\"4字节：时间戳\",\"3字节：机器 ID\",\"2字节：进程 ID\",\"3字节：计数器\"]},\"790\":{\"h\":\"CRUD\",\"t\":[\"CRUD operations create, read, update, and create documents.\"]},\"791\":{\"h\":\"Cteate\",\"t\":[\"db.collection.insertOne() New in version 3.2\",\"db.collection.insertMany() New in version 3.2\",\"db.collection.insertOne( { \\\"name\\\" : \\\"aaa\\\", \\\"age: 26 } ) \",\"db.collection.insertMany( [ { ... }, { ... } ] ) \"]},\"792\":{\"h\":\"Read\",\"t\":[\"Query a collection for document\",\"db.collections.find( { age: { $gt: 18 } } ).limit(5) \"]},\"793\":{\"h\":\"Update\",\"t\":[\"db.inventory.updateOne( { item: \\\"paper\\\" }, { $set: { \\\"size.uom\\\": \\\"cm\\\", status: \\\"P\\\" }, $currentdate: { lastModified: true } } ) # created filed: # \\\"lastModified\\\" : ISODate(\\\"2018-10-26T08:59:26.038+0000\\\") \",\"$set to update the value\",\"$currentDate operator to update the value of the lastModified field to the current date, If lastModified field does not exist, $currentDate will create the field.\",\"Update many: to update document on inventory where qty is less than 50:\",\"db.inventory.updateMany( { \\\"qty\\\": { $lt: 50 } }, { #same as updateOne() } ) \",\"Replace:\",\"db.inventory.replaceOne( # or updateOne() updateMany() { item: \\\"paperpaper\\\" }, { item: \\\"paper\\\", instock: [ { warehouse: \\\"A\\\", qty: 60 }, { warehouse: \\\"B\\\", qty: 40 } ] }, { upsert: true } ) \",\"If there are matching documents, then the upsert operation modifies or replaces the matching document or documents.\"]},\"794\":{\"h\":\"Delate\",\"t\":[\"MongoDb provides the followinng methods to delete documents of a collection:\",\"db.collection.deleteOne()\",\"db.collection.deleteMany()\",\"db.collection.remove()\",\"Process in terminal:\",\"./mongo.exe > show dbs > use [db name] #create db > db #see db > db.createCollection(name, options) #create collections > show collections > db.colname.insert({\\\"xx\\\", \\\"xx\\\"}) > db.collection_name.find() > db.collection_name.find().pretty() #show in formatted \",\"batch import .json file:\",\"mongoimport --db users --collection contacts --file xx.json \"]},\"795\":{\"h\":\"Restore\",\"t\":[\"mongorestore -h <hostname><:port> -d dbname <path> \",\"mongodump and mongorestore\"]},\"796\":{\"h\":\"Flask-PyMongo\",\"t\":[\"Install: pip install flask_pymongo\",\"in nginxig.py:\",\"class Config: MONGO_URI = \\\"mongodb://localhost:27017/myDatabase\\\" \",\"in app/___init__.py:\",\"from flask_pymongo import PyMongo from config import config mongo = PyMongo() mono.init_app(app) \",\"in views.py:\",\"from app import mongo @main.route('/', methods=['GET', 'POST']) def index(): data = mongo.db.mycol.find() # mycol is the name of collections \"]},\"797\":{\"h\":\"Python SQL\",\"t\":[\"Take SQLite3 for example:\",\"cur.execute(\\\"CREATE TABLE demo(num int, str varchar(20));\\\")，DB-API规范，创建cur游标对象用于执行SQL命令。Source Code\",\"conn = sqlite3.connect('test.db') cur = conn.cursor() cur.execute(\\\"INSERT INTO demo VALUES (%d, '%s')\\\" % (1, 'aaa')) \"]},\"798\":{\"h\":\"SQLite3\",\"t\":[\"Create table\",\"format the table:\",\"sqlite> .header on sqlite> .mode column sqlite> SELECT * FROM COMPANY; \",\"update:\",\"sqlite> UPDATE COMPANY SET ADDRESS = 'Texas' WHERE ID = 6; update users set confirmed = 1 where id=4; \",\"register:\",\"from flask_sqlalchemy import SQLAlchemy\\ndb = SQLAlchemy()\\n\"]},\"799\":{\"c\":[\"Database\"]},\"800\":{\"c\":[\"database\"]},\"801\":{\"h\":\"MySql 基础总结\",\"t\":[\"本文主要介绍了 MySql 中涉及到的工具软件，以及 MySql 的查找、插入和删除操作；除此之外还介绍了简单的索引知识和存储引擎；还列举了 DAG 图的设计代码。\"]},\"802\":{\"h\":\"Tools: MySql 工具软件\",\"t\":[\"客户端数据库可视化查询软件 SQLyog\",\"SQL Server 启动程序 XAMPP\"]},\"803\":{\"h\":\"MySQL Command\"},\"804\":{\"h\":\"Login\",\"t\":[\"mysql -uroot use soc; show tables; show columns in table_name; select * from table_name limit 1 \\\\G; \"]},\"805\":{\"h\":\"DROP\",\"t\":[\"删除：\",\"DROP DATABASE db_name DROP TABLE table_name ALTER TABLE table_name DROP INDEX index_name \",\"如果想删除表中所有的数据但是不影响到表的结构：\",\"TRUNCATE TABLE table_name \"]},\"806\":{\"h\":\"ALTER\",\"t\":[\"在数据库中插入新的 table 或者说新的列：\",\"ALTER TABLE table_name ADD column_name datatype ALTER TABLE edge ADD ancestor VARCHAR(256) \",\"删除同理：\",\"ALTER TABLE edge DROP COLUMN ancestor \"]},\"807\":{\"h\":\"JOIN\",\"t\":[\"在 MySQL 中，主要是 INNER JOIN, 表示内连接，可以同时连接两个表进行组合查询：\",\"SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name=table_name2.column_name \"]},\"808\":{\"h\":\"MySql vs DAG\",\"t\":[\"可以参考这一篇博客，讲述了如何使用 MySql + 邻接表存储一个 DAG，代码如下所示：\",\"<<< @/docs/.vuepress/code/sql/DAG.sql\"]},\"809\":{\"h\":\"Index 索引\"},\"810\":{\"h\":\"explain\",\"t\":[\"对于建立的索引，想查看其性能如何：\",\"explain select * from tables where c1='a1'and c2='c2'; \",\"使用 explain 命令即可。\"]},\"811\":{\"h\":\"索引类型\",\"t\":[\"唯一索引 -- UNIQUE\",\"此索引的每一个索引值只对应唯一的数据记录；索引的值必须唯一，但是允许有空值（注意和主键不同）。\",\"主键索引\",\"组合索引\",\"全文索引\",\"非常消耗磁盘空间\"]},\"812\":{\"h\":\"索引内部数据结构\",\"t\":[\"MySQL 数据库可以分为三种类型，分别为：\",\"BTree B+Tree\",\"B 树，即平衡二叉树，是一个二叉树，查找的时候使用二分查找。 B+ 树，Mysql 的索引主要实现结构。\",\"散列索引\",\"通过 hash 函数来定位的一种索引。\",\"位图索引\",\"位图索引是一个针对多个字段的简单查询设计一种特殊的索引，适用范围比较小，只适用于字段值固定并且值的种类很少的情况。比如说性别，只有男和女，或者状态等等。\"]},\"813\":{\"h\":\"存储引擎\"},\"814\":{\"h\":\"InnoDB\",\"t\":[\"InnoDB 默认是事务存储引擎，默认。\",\"使用 InnoDB 的时候，会将数据表分为 .frm 和 ibd 两个文件进行存储。\",\"行锁设计、支持外检，默认读取操作不会产生锁。\",\"存储引擎采用聚集(clustered)的方式，每张表都是按照主键的形式进行存储的。\"]},\"815\":{\"h\":\"MyISAM\",\"t\":[\"不支持事务，表锁设计，支持全文索引，不支持事务。\",\"索引文件 .MYI(MyIndex) 和 数据文件 .MYD(MyData)分离\",\"缓冲池值缓存索引文件，而不缓存数据文件。\"]},\"816\":{\"c\":[\"Database\"]},\"817\":{\"c\":[\"database\"]},\"818\":{\"h\":\"Python ORM - peewee\"},\"819\":{\"h\":\"Peewee\",\"t\":[\"创建模型和表字段：\",\"from peewee import * mysql_db = MySQLDatabase('my_database') class BaseModel(Model): class Meta: database = mysql_db class User(BaseModel): username = CharField() # etc, etc class Meta: table_name = \\\"database_name\\\" \",\"在数据库中使用 sql 语句创建表字段，然后可以使用 User model 对其进行操作。\"]},\"820\":{\"h\":\"Query operators\",\"t\":[\"http://docs.peewee-orm.com/en/latest/peewee/query_operators.html\",\"其中几个需要着重理解注意：\",\"Comparison\",\"Meaning\",\"<<\",\"x IN y\",\">>\",\"x IS y\",\"%\",\"x LIKE y\",\"**\",\"x ILIKE y\",\"LIKE 和 ILIKE 操作符可以模糊匹配字符串，LIKE 是一般用法，ILIKE 匹配时则不区分字符串的大小写。\",\"ORM vs Python Grammar\",\"So just remember:\",\"Use .in_() and .not_in() instead of in and not in\",\"Use & instead of and\",\"Use | instead of or\",\"Use ~ instead of not\",\"Use .is_null() instead of is None or == None.\",\"Don’t forget to wrap your comparisons in parentheses when using logical operators.\"]},\"821\":{\"c\":[\"Database\"]},\"822\":{\"c\":[\"database\",\"python\"]},\"823\":{\"h\":\"Redis and redis-py\"},\"824\":{\"h\":\"Abstract\",\"t\":[\"Redis(Remote Dictionary Server) server 的启动：\",\"redis-server.exe redis.windows.conf \",\"安装 redis-py:\",\"pip install redis \",\"官方文档\",\"redis 提供两个类 Redis 和 StrictRedis 用于实现 Redis 的命令，StrictRedis 用于实现大部分官方的命令，并使用官方的语法和命令，Redis 是 StrictRedis 的子类，用于向后兼容旧版本的 redis-py。\",\"可以使用 Redis 可视化工具 RDM(redis deaktop manager)\"]},\"825\":{\"h\":\"Redis 简述\",\"t\":[\"什么是 Redis？有什么优缺点？\",\"Redis本质上是一个 key-value 类型的内存数据库，整个数据库都在内存中加载，通过异步操作可以持久化到磁盘中\",\"Redis的性能十分出色，是已知的性能最快的 key-value DB(每秒大概处理10W次IO操作)\",\"Redis 拥有丰富的数据结构（5 种，分别是 string, list, hash, set, zset）\",\"Redis 丰富的数据结构给了它很多的应用，如 celery 就可以维护一个高性能的消息队列(list)\",\"不同于 memcached, redis 的单个 value 可以保存的最大数据限制是 1GB(memcached 是 1M)\",\"缺点在于 redis 的数据存储受到物理内存的限制，不能做海量的数据场景\"]},\"826\":{\"h\":\"Redis 原理\"},\"827\":{\"h\":\"数据淘汰策略\",\"t\":[\"当达到内存最大限制的时候，Redis 会采用一些策略(maxmemory-policy配置), 来进行数据淘汰：\",\"noeviction：默认策略，不淘汰，达到最大的内存限制的时候，如果再请求更多的数据，直接报错\",\"allkeys-lru：LRU 策略，删除最近最少使用的 key, 针对于所有的key\",\"volatile-lru：设置的 expire 的key使用 LRU\",\"allkeys-random：随机删除一部分key\",\"volatile-random：对设置的 expire 的key随机删除\",\"volatile-ttl：对设置 expire 的key使用，优先删除剩余时间短的key\",\"对于这六种数据淘汰策略的使用场景可以归纳为：\",\"如果分为热数据和冷数据的场景（所有key中有一部分经常被读写），使用 LRU 方法\",\"如果是循环读所有的 key, 那么就使用 allkeys-random 策略\"]},\"828\":{\"h\":\"Redis 生产适用场景\",\"t\":[\"session cache 会话缓存 一般业界使用 memcached, 但是 redis 多了持久化功能，可以维护严格要求一致性的缓存\",\"FPC 全页缓存\",\"redis queues 如 celery 队列可以使用 redis作为broker\",\"排行榜、计数器 使用了 redis 中的递增和递减操作\",\"原子操作、事务操作 事务是一个单独的隔离操作，事务中的所有命令都会序列化、按顺序地执行； 事务在执行的过程中不会被其他客户端发送过来的命令打断； 事务是一个原子操作，事务中的所有命令要么全部被执行，要么全部不执行。 事务相关的命令：MULTI, EXEC, DISCARD, WATCH\"]},\"829\":{\"h\":\"Redis 优化\",\"t\":[\"设置key的过期时间 使用expire命令，如果想要永久有效，那么就使用 presist.\",\"使用散列表 比如说有一个场景，需要存储用户的账户、密码等信息，尽量不给每一个字段去设置单独的key, 而是将他们一起存储于一张散列表里面。\"]},\"830\":{\"h\":\"Redis 分布式锁\"},\"831\":{\"h\":\"分布式锁\",\"t\":[\"分布式的流行使得原单机部署情况下的并发控制策略失效。\",\"分布式锁大致分为三种：\",\"数据库乐观锁\",\"基于 redis 的分布式锁\",\"基于 ZooKeeper 的分布式锁\",\"分布式锁的实现条件：\",\"互斥性，任何时候只能有一个客户端持有锁\",\"可靠性，尽量避免死锁\",\"一致性，锁只能由加锁人解锁，不能产生A的加锁被B用户解锁的情况\"]},\"832\":{\"h\":\"Redis 分布式集群\",\"t\":[\"目前已知的可以通过 proxy 来实现\"]},\"833\":{\"h\":\"Redis 分布式锁\",\"t\":[\"基本上实现如下，主要使用三个命令：\",\"# SETNX SETNX key val # EXPIRE expire key timeout # DELETE delete key \",\"redis 锁的实现思路基本上是：\",\"setnx加锁，并设置超时时间，这时候锁的 value 值就是一个随机生成的 UUID\",\"获取锁和超时时间\",\"释放锁的时候根据 UUID 判断，而后 DELETE 删除（注意这里要注意原子性）\"]},\"834\":{\"h\":\"Redis Cluster 槽\"},\"835\":{\"h\":\"redis-py\"},\"836\":{\"h\":\"StrictRedis()\",\"t\":[\"初始化 Redis:\",\"from redis import StrictRedis def create_redis_client(): redis_client = StrictRedis( host='localhost', port=6379, password=None) return redis_client \",\"也可以使用 Redis() 类初始化，如果遇到了向后兼容的问题。\"]},\"837\":{\"h\":\"append()\",\"t\":[\"redis_client.append(key, value) \",\"如果 key 不存在则创建。\"]},\"838\":{\"c\":[\"Database\"]},\"839\":{\"c\":[\"database\",\"python\"]},\"840\":{\"h\":\"Celery：分布式消息传输的异步任务队列\"},\"841\":{\"h\":\"Abstract\",\"t\":[\"Celery 是一个基于分布式消息传输的异步任务队列，它专注于实时处理，同时也支持任务调度。\",\"官方文档\",\"安装 python 版本：\",\"pip install -U Celery \",\"或者可以安装 Celery 的一个或多个扩展：\",\"pip install celery[librabbitmq, redis, auth, msgpack] \"]},\"842\":{\"h\":\"Config\",\"t\":[\"使用 Redis 作为消息代理和后端存储，序列化和反序列化使用 msgpack, 也可以使用 json, msgpack 相比 json 是一个二进制的类 json 的序列化方式，比 json 的数据结构更小、更快\",\"安装 Redis 可视化软件 RDM(redis desktop manager)\"]},\"843\":{\"h\":\"初始化\",\"t\":[\"初始化时指定消息代理和存储：\",\"# app.py from __future__ import absolute_import, unicode_literals from celery import Celery app = Celery( 'myapp', broker='redis://localhost:6379/0', # ## add result backend here if needed. # backend='rpc' ) @app.task def add(x, y): return x + y if __name__ == '__main__': app.start() \",\"然后再命令行中启动：\",\"celery -A app worker -l info \"]},\"844\":{\"h\":\"调用 Task\",\"t\":[\"参考这篇文章：https://mp.weixin.qq.com/s/kxwlLQ5H479PXCKuS4ZueA\",\"celery 调用 task 有三种方式：\",\"apply_async(args[, kwargs[, …]]), 这种方式会往消息队列发送消息, 并支持各种参数使用\",\"delay(*args, **kwargs), 是apply_async 一种简明调用方式，但是不支持很多额外的参数\",\"calling ( __call__), 应用支持调用API的对象，例如add(2,2), 意味着任务将在当前进程中执行，而不是由worker执行（不会发送消息）\",\"示例：\",\"说明：本例中的 T 即为 task 名称 # 相当于apply_async 的简单调用方式 T.delay(arg, kwarg=value) T.apply_async((arg, ), {'kwarg': value}) # 任务会在10s 后开始执行 T.apply_async(countdown=10) # 任务会在 now 之后的10秒开始执行 T.apply_async(eta=now + timedelta(seconds=10)) # 任务会在一分钟之后执行，在两分钟后过期 T.apply_async(countdown=60, expires=120) # 任务会在now之后的两天过期 T.apply_async(expires=now + timedelta(days=2)) \"]},\"845\":{\"c\":[\"Frameworks\"]},\"846\":{\"c\":[\"redis\"]},\"847\":{\"h\":\"Flask\",\"t\":[\"How to build socketio in Flask project : socketio\",\"Flask variable, blueprint and install from requirement.txt, some basic knowledge about WSGI, Nginx and Django.\"]},\"848\":{\"h\":\"Reference\",\"t\":[\"NAME\",\"URL\",\"DESCRIPTION\",\"flask_socketio\",\"https://github.com/miguelgrinberg/flack\",\"a project using flask_socketio\",\"https://flask-socketio.readthedocs.io/en/latest/\",\"flask_socketio official tutorial\",\"blueprint\",\"http://flask.pocoo.org/docs/1.0/blueprints/\",\"official tutorial\"]},\"849\":{\"h\":\"SocketIO\",\"t\":[\"pip install flask-socketio \"]},\"850\":{\"h\":\"Flask Structure\",\"t\":[\"application context and request context：\",\"variable\",\"context\",\"description\",\"current_app\",\"application context\",\"The application instance for the active application.\",\"g\",\"ac\",\"request\",\"request context\",\"session\",\"rc\",\"from flask import current_app \",\"g is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if get_db is called a second time in the same request.\"]},\"851\":{\"h\":\"Blueprint\",\"t\":[\"Tutorial : Modular Applications with Blueprints\",\"We use the create_app() so that the application is created at runtime.\",\"A blueprint is similar to an application in that it can also define routes. The difference is that routes associated with a blueprint are in a dormant state until the blueprint is registered with an application, at which point the routes become part of it.\",\"# app/main/__init__.py from flask import Blueprint main = Blueprint('main', __name__) \",\"The constructor for this class takes two required arguments: the blueprint name and the model or package where the blueprint is located(always default __name__).\"]},\"852\":{\"h\":\"Virtual environment\"},\"853\":{\"h\":\"installation\",\"t\":[\"Take Linux system as example:\",\"pip install virtualenv \"]},\"854\":{\"h\":\"usage\",\"t\":[\"cd [project directory] virtualenv venv \",\"该命令执行后，将在当前目录中建立一个venv目录，该目录复制了一份完整的当前系统的python环境。之后运行python时可以直接运行该项目的bin文件夹中的命令。\",\"例：在当前虚环境下安装Tornado组件：\",\"./venv/bin/pip install tornado \",\"或者在该虚环境中运行python程序：\",\"./venv/bin/python xxxx.py \",\"也可以使用activate命令启动虚环境，之后不必再显示地调用虚环境bin文件夹中的命令：\",\"source ./venv/bin/activate \",\"退出虚拟环境使用deactive：\",\"(venv) xxx:~/xxx$ deactivate \"]},\"855\":{\"h\":\"requirement.txt\",\"t\":[\"Install from requirement.txt:\",\"pip install -r requirements.txt \",\"generate a requirement.txt from current project:\",\"pip freeze > requirement.txt \"]},\"856\":{\"h\":\"pipenv\",\"t\":[\"目前流行的取代 virtual envirment 的方式就是 pipenv\",\"Install pipenv:\",\"pip install pipenv pipenv shell pipenv install package-name # if you want lock the environment pipenv lock \",\"退出可以使用 exit 或者 Ctrl+D.\"]},\"857\":{\"h\":\"Video Streaming with Flask\"},\"858\":{\"h\":\"Flask Script\",\"t\":[\"# manage.py import os from app import create_app, db from app.models import User, Role from flask.ext.script import Manager, Shell from flask.ext.migrate import Migrate, MigrateCommand app = create_app(os.getenv('FLASK_CONFIG') or 'default') manager = Manager(app) migrate = Migrate(app, db) def make_shell_context(): return dict(app=app, db=db, User=User, Role=Role) manager.add_command(\\\"shell\\\", Shell(make_context=make_shell_context)) manager.add_command('db', MigrateCommand) if __name__ == '__main__': manager.run() \"]},\"859\":{\"h\":\"Web Server\",\"t\":[\"目前主流的Web服务器包括Nginx, Apache, lighthttpd, IIS, etc..，Python服务端程序在Linux平台下使用最广泛的是Nginx。\"]},\"860\":{\"h\":\"WSGI\",\"t\":[\"Web Server Gateway Interface[1], 为Python语言定义Web服务器和服务端程序的通用接口规范。\"]},\"861\":{\"h\":\"Nginx\",\"t\":[\"sudo apt-get install nginx sudo service nginx start/status/stop/restart \"]},\"862\":{\"h\":\"Django\"},\"863\":{\"h\":\"Installation\",\"t\":[\"pip3 install django \",\"测试是否安装成功：\",\"python3 >>> import django >>> print(django.VERSION) \"]},\"864\":{\"h\":\"Establish application\",\"t\":[\"建立项目：\",\"django-admin startproject [project-name] \",\"建立应用：\",\"python manage.py startapp [app-name] \",\"例如，在当前目录中创建一个项目my_project, 并且拥有特定的目录结构：\",\"djangp-admin startproject my_project cd my_project python3 manage.py startapp my_app \",\"完成之后目录结构类似于：\",\"my_project/ manage.py my_project/ __init__.py settings.py urls.py wsgi.py my_app/ __init__.py admin.py apps.py migrations/ __init__.py models.py tests.py views.py \",\"内置web服务器运行：\",\"python manage.py runserver 0.0.0.0:8001 \",\"生成数据移植文件：\",\"python manage.py makemigrations app \",\"移植到数据库：\",\"python manage.py migrate \"]},\"865\":{\"h\":\"New Words\",\"t\":[\"words\",\"means\",\"PK\",\"primary key\",\"FK\",\"foregin key\",\"CRUD\",\"create, retrieve, update and delete\",\"WSGI, wiki↩︎\"]},\"866\":{\"c\":[\"Frameworks\"]},\"867\":{\"c\":[\"web framework\"]},\"868\":{\"h\":\"Spring\"},\"869\":{\"h\":\"什么是 spring？\",\"t\":[\"Spring 在创立之初是一个轻量级的 java 开源开发框架（轻量相对于J2EE EJB而言，其实 spring 也是比较大了），其提出是为了解决企业应用开发的复杂性而创建的，spring 可以更加快速、简单的构建应用，在目前是最受欢迎的 java 框架。\",\"其设计理念在于分层架构思想，分层架构使得开发者可以自由选择要使用的组件。\",\"Spring 的核心优势在于其可以无缝集成主流开发框架，只需通过配置和简单的对象注入。\",\"Spring 的两个核心特性：IoC 和 AOP（控制反转和面向切面编程）\"]},\"870\":{\"h\":\"IoC\"},\"871\":{\"h\":\"什么是 IoC?\",\"t\":[\"IoC 指的是控制反转，有些时候可以理解和依赖注入一个关系, IOC 是一种设计思想，将原本程序手中控制对象创建的权力，交给框架来管理；IOC 容器是实现 IOC 的载体，实际上底层就是一个 Map, 其中存放着各种对象。\",\"容器概念：IOC 容器中存放着各种对象。在项目启动的时候，根据配置文件读取 beans, 然后通过反射放到容器里面，此时容器中就有各种对象了，后面会在需要的时候进行依赖注入。\",\"控制反转：没有引入 IOC 容器的时候，对象的创建存在依赖；引入以后，对象之间失去了联系，而是在需要使用某对象的时候，由 IOC 主动创建并注入。\"]},\"872\":{\"h\":\"bean 的注册\",\"t\":[\"// 返回 IOC 容器，基于 XML配置，传入配置文件的位置 ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\\\"xxx.xml\\\"); User user = (User) applicationContext.getBean(\\\"user\\\"); \"]},\"873\":{\"h\":\"ApplicationContext 和 BeanFactory\",\"t\":[\"通过上面的代码，问问题：ApplicationContext 和 BeanFactory 的区别是什么？\",\"回答：\",\"ApplicationContext 是 BeanFactory 的子接口；\",\"BeanFactory 通过延迟加载的方式来注入 bean, ApplicationContext 是在容器启动时就一次性创建了所有的 bean；\",\"ApplicationContext 提供了更完整的功能，如统一的资源文件访问方式、支持国际化、同时加载多个配置文件等。\"]},\"874\":{\"h\":\"bean 的生命周期\",\"t\":[\"@todo\"]},\"875\":{\"h\":\"Spring bean 的作用域\",\"t\":[\"singleton 单例\",\"prototype\",\"request\",\"session\",\"global-session(Spring 5 以后废弃)\"]},\"876\":{\"h\":\"Spring singleton 是线程安全吗？\",\"t\":[\"不是。bean 可以分为有状态对象 stateful bean 和无状态对象 stateless bean, 有状态对象保存有实例变量，有数据，不是线程安全的；\",\"对于单例 bean, 存在多个线程共享这个 bean 的实例，如果是一个无状态 bean, 那么各个线程不会对这个 bean 进行查询以外的操作，这时候是线程安全的。如果是有状态 bean, 这时候存在资源的竞争。\",\"如何避免？\",\"可以通过 ThreadLocal 来解决线程安全的问题，因为 ThreadLocal 为每个线程保存线程私有的数据。\",\"定义无状态 bean(实际生产中较难)。\"]},\"877\":{\"h\":\"AOP\"},\"878\":{\"h\":\"什么是 AOP?\",\"t\":[\"AOP 是面向切面编程的意思。其思想在于把与业务无关的，各个业务模块可以公用的模块（如日志、事务、异步调用等）封装起来，减少重复代码、降低耦合，其相关的设计模式为代理模式。\",\"Spring AOP 基于动态代理实现。对于已经实现的接口，JDK 可以动态代理去创建代理对象；如果该对象没有实现接口，那么会使用 CGlib 动态代理生成一个代理的子类来作为代理。\"]},\"879\":{\"h\":\"@EnableAspectJAutoProxy\",\"t\":[\"@Enable 模块：@Enable 模块驱动注解 EnableAspectJAutoProxy 用于开启 AspectJ 自动代理。\",\"@Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Import({AspectJAutoProxyRegistrar.class}) public @interface EnableAspectJAutoProxy { boolean proxyTargetClass() default false; boolean exposeProxy() default false; } \",\"AspectJAutoProxyRegistrar 为一个 AspectJ 自动代理注册器，通过 @import 注解导入。\"]},\"880\":{\"h\":\"如何解决循环依赖？\"},\"881\":{\"h\":\"循环依赖与 IoC\",\"t\":[\"类与类之间的依赖关系形成了闭环，就会导致循环依赖问题的产生。\",\"通过 Spring IOC 流程的源码分析循环依赖问题：\",\"先从缓存中获取，获取不到则继续往下走\",\"实例化 Class A\",\"依赖注入 Class A 对象的成员变量（setter） -- 注意到此时辉产生循环依赖\",\"初始化 Class A（初始化方法）\",\"将 Class A 的引用放入一级缓存\",\"循环依赖的三种情况：\",\"通过构造方法进行依赖注入的时候产生的循环依赖\",\"通过 setter 方法进行依赖注入的时候产生的循环依赖（多例模式下）\",\"通过 setter 方法进行依赖注入的时候产生的循环依赖（单例模式下）-- Spring 解决了这种场景下循环依赖的问题\",\"构造方法进行依赖主语的时候，new 对象的时候就阻塞住了。而多例的循环依赖每次 getBean() 时，都会产生一个新的 bean, 最终导致 OOM 发生。\"]},\"882\":{\"h\":\"Spring 三大缓存\",\"t\":[\"提示\",\"Spring 解决循环依赖主要是通过两个缓存。总的来说，Spring 有三大缓存：一级缓存 singletonObjects, 二级缓存 earlySingletonObjects 和三级缓存 singletonFactories.\"]},\"883\":{\"h\":\"一级缓存 singletonObjects\",\"t\":[\"对容器外提供单例 bean 的存储功能\",\"非创建中的 bean 才会被存储在该缓存\"]},\"884\":{\"h\":\"二级缓存 earlySingletonObjects\",\"t\":[\"主要是存储原生的早期 bean.\",\"用于存储单例模式下创建的 bean 实例（该 bean 还在创建中）\",\"该缓存对内使用，Spring 内部的框架裸机使用该缓存\"]},\"885\":{\"h\":\"三级缓存 singletonFactories\",\"t\":[\"主要是存储代理的 bean.\",\"参考：https://juejin.cn/post/6895753832815394824 继续书写。\"]},\"886\":{\"c\":[\"Frameworks\"]},\"887\":{\"c\":[\"spring\"]},\"888\":{\"h\":\"Charts.js\",\"t\":[\"Charts.js, npm Frappe Charts and Echarts\",\"In flask web framework, sometimes we need to do the data visualization, there are some popular JavaScript to do this.\",\"Official doc latest;\"]},\"889\":{\"h\":\"Installation\",\"t\":[\"use the chart.js CDN: https://cdnjs.com/libraries/Chart.js\",\"in Flask, import the .js using:\",\"<script src=\\\"/static/js/Chart.min.js\\\"></script> <script src=\\\"cdn_url\\\"></script> \"]},\"890\":{\"h\":\"npm install\",\"t\":[\"Node.js package manager, we using the npm to install charts.js:\",\"search bar\",\"npm tutorial\",\"npm is written in Node.js, so we need to install Node.js. there we using the Node.js installation method, use one of the installers from the Node.js download page using LTS version.\",\"to test, run node -v and npm -v.\",\"update to the latest version,\",\"npm install npm@latest -g \",\"then download charts.js files form GitHub.\"]},\"891\":{\"h\":\"Responsive Charts\",\"t\":[\"Chart.js provides a few options to enable responsiveness and control the resize behavior of charts by detecting when the canvas display size changes and update the render size accordingly.\",\"options:{ responsive: true } \"]},\"892\":{\"h\":\"Sample\",\"t\":[\"in views.py:\",\" @main.route('/charts') def charts(): legend = 'Monthly Data' labels = [\\\"January\\\", \\\"February\\\", \\\"March\\\", \\\"April\\\", \\\"May\\\", \\\"June\\\", \\\"July\\\", \\\"August\\\"] values = [10, 9, 8, 7, 6, 4, 7, 8] return render_template('charts.html', values=values, labels=labels, legend=legend) \",\"in charts.html:\",\"<script src=\\\"/static/js/Chart.min.js\\\"></script> <script> // Global parameters: // do not resize the chart canvas when its container does (keep at 600x400px) Chart.defaults.global.responsive = false; // define the chart data var chartData = { labels: [{% for item in labels %} \\\"{{item}}\\\", {% endfor %}], datasets: [{ label: '{{ legend }}', fill: true, lineTension: 0.1, backgroundColor: \\\"rgba(75,192,192,0.4)\\\", borderColor: \\\"rgba(75,192,192,1)\\\", borderCapStyle: 'butt', borderDash: [], borderDashOffset: 0.0, borderJoinStyle: 'miter', pointBorderColor: \\\"rgba(75,192,192,1)\\\", pointBackgroundColor: \\\"#fff\\\", pointBorderWidth: 1, pointHoverRadius: 5, pointHoverBackgroundColor: \\\"rgba(75,192,192,1)\\\", pointHoverBorderColor: \\\"rgba(220,220,220,1)\\\", pointHoverBorderWidth: 2, pointRadius: 1, pointHitRadius: 10, data: [{% for item in values %} {{ item }}, {% endfor %}], spanGaps: false }] } // get chart canvas var ctx = document.getElementById(\\\"myChart\\\").getContext(\\\"2d\\\"); // create the chart using the chart canvas var myChart = new Chart(ctx, { type: 'line', data: chartData, }); </script> \",\"in charts.html:\",\" <canvas id=\\\"myChart\\\" width=\\\"500\\\" height=\\\"400\\\"></canvas> \",\"There is an example: https://gitlab.com/patkennedy79/flask_chartjs_example/tree/master\",\"GitHub-inspired simple and modern SVG charts for the web with zero dependencies, see it to build a month-wise heatmap like GitHub.\",\"add button\",\"<button type=\\\"button\\\" onclick=\\\"document.getElementById('id1').style.color='red'\\\"> Click here </button> \",\"hidden text\",\"<p id=\\\"p1\\\">This is a text</p>\\n\\n<input type=\\\"button\\\" value=\\\"hidden text\\\" onclick=\\\"document.getElementById('p1').style.visibility='hidden'\\\" />\\n<input type=\\\"button\\\" value=\\\"show text\\\" onclick=\\\"document.getElementById('p1').style.visibility='visible'\\\" />\\n\"]},\"893\":{\"c\":[\"Frontend\"]},\"894\":{\"c\":[\"frontend\",\"figures\"]},\"895\":{\"h\":\"CSS\"},\"896\":{\"h\":\"Insert CSS\",\"t\":[\"Three ways to insert css:\",\"External style sheet\",\"<head> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"mystyle.css\\\"> </head> \",\"Internal style sheet\",\"<head> <style> h1, h2 { color: maroon; margin-left: 40px; } </style> </head> \",\"Inline style\",\"An inline style may be used to apply a unique style for a single element.\",\"<h1 style=\\\"color:blue;margin-left:30px;\\\">This is a heading</h1> \",\"提示\",\"In vue, to add multiple class, this way is commended:\",\"<p :class=\\\"['thin', 'color']\\\"> something </p>\"]},\"897\":{\"h\":\"Multiple Style Sheets\",\"t\":[\"If some properties have been defined for the same selector (element) in different style sheets, the value from the last read style sheet will be used.\",\"An inline style has the highest priority, and will override external and internal styles and browser defaults.\",\"<style> h1 { color: orange; } h1 { color: red; } </style> <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"mystyle.css\\\"> </head> <!-- Sequence: orange - red - style in 'mystyle.css'. --> \"]},\"898\":{\"h\":\"colors\",\"t\":[\"RGB Value(red, greenm blue), such as rgb(60, 179, 113)\",\"HEX Value (#ff0000)\",\"HSL Value: hsl(hue, saturation, lightness)\",\"<h3 style=\\\"background-color:hsl(300, 76%, 72%);\\\">hsl(300, 76%, 72%)<h3> \",\"RGBA Value (red, green, blue, alpha)\",\"aplha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all)\",\"HSLA Value hsla(hue, saturation, lightness, alpha)\"]},\"899\":{\"c\":[\"Frontend\"]},\"900\":{\"c\":[\"frontend\"]},\"901\":{\"h\":\"JS code - JavaScript 常见语法\"},\"902\":{\"h\":\"Json String\",\"t\":[\"若现在有一个 JSON 对象的数组，可以使用的处理方法有：\",\"JSON.stringify()\",\"处理 JSON 对象成为字符串\",\"JSON.parse()\",\"处理字符串成为 JSON 对象\"]},\"903\":{\"h\":\"forEach()\",\"t\":[\"如果需要对数组的遍历：\",\"array.forEach(function(obj, index){ // ... }) \"]},\"904\":{\"h\":\"eval()\",\"t\":[\"计算某个字符串，并执行其中的JS代码\",\" var vm = new Vue({ el: '#app', data: { // ... }, methods: { calc() { var codeStr = 'parseInt(this.n1)' + this.opt + 'parseInt(this.n2)' this.result = eval(codeStr) } } }) \",\"上述代码的作用是：从字符串中，计算出了result=n1+n2的表达式的值\"]},\"905\":{\"h\":\"Date and Time\",\"t\":[\"JavaScript 中的时间操作：\",\"格式化成自己需要的时间格式\",\"获取月份的英文\",\"分割字符串\",\"替换时间字符串中所有非数字\",\"按照时间顺序排序\",\"reference\",\"var date = new Date() // Thu Oct 25 2018 20:04:42 GMT+0800 (China Standard Time) \",\"Date 的 functions:\",\"date.toDateString() //\\\"Thu Oct 25 2018\\\" date.getMonth() // 9 (0-11) date.getFullYear() //2018 \"]},\"906\":{\"h\":\"Formatting\",\"t\":[\"Vue.js filter: v-sample-github\",\"filters: { dateFormat: function (dateStr) { var dt = new Date(dateStr) var y = dt.getFullYear() var m = (dt.getMonth() + 1).toString().padStart(2, '0') var d = dt.getDate().toString().padStart(2, '0') var hh = dt.getHours().toString().padStart(2, '0') var mm = dt.getMinutes().toString().padStart(2, '0') var ss = dt.getSeconds().toString().padStart(2, '0') return `${y}-${m}-${d} ${hh}:${mm}:${ss}` } // 2018-10-12 11:39:41 \",\"{{ time | dateFormat }} \"]},\"907\":{\"h\":\"Month Full Name\",\"t\":[\"获取月份的完整拼写:\",\"var date = new Date() var month = new Array(\\\"January\\\", \\\"February\\\", \\\"March\\\", \\\"April\\\", \\\"May\\\", \\\"June\\\", \\\"July\\\", \\\"August\\\", \\\"September\\\", \\\"October\\\", \\\"November\\\", \\\"December\\\") monthString = month[date.getMonth()] // October or any string \"]},\"908\":{\"h\":\"Split Date\",\"t\":[\"split time string:\",\"date.toDateString().slice(4, 11).replace(/ /, '-') //\\\"Oct-25 \\\" \"]},\"909\":{\"h\":\"Timestamp\",\"t\":[\"tranform date string to timestamp (将日期字符串转化成时间戳)\",\"toTimeString(time) { return time.replace(/[^0-9]/ig, \\\"\\\") } // 2018/11/20 10:36, Tuesday => 201811201036 \"]},\"910\":{\"h\":\"Sort Date\",\"t\":[\"对于时间进行排序：\",\"computed: { posts() { return this.$site.pages .filter(x => x.path.startsWith(\\\"/algorithm/\\\")) .sort((a, b) => Date.parse(b.lastUpdated) - Date.parse(a.lastUpdated)) } } \"]},\"911\":{\"h\":\"Performance\",\"t\":[\"性能分析：\",\"console.time(\\\"My operation\\\") //code console.timeEnd(\\\"My operation\\\") \"]},\"912\":{\"h\":\"Var, Let and Const\"},\"913\":{\"c\":[\"Frontend\"]},\"914\":{\"c\":[\"javascript\",\"frontend\"]},\"915\":{\"h\":\"Node.js 安装和 yarn 包管理\"},\"916\":{\"h\":\"Install Node.js and npm@latest\",\"t\":[\"在 Linux 下部署可能会存在一些问题，虽然安装方法很多，但是实践下来最好的方法是使用 apt:\",\"安装 node.js\",\"sudo apt-get install nodejs-legacy sudo apt-get install npm \",\"升级 npm 的版本：\",\"sudo npm install npm@latest -g \",\"安装用于安装 node.js 的模块 n\",\"sudo npm install n -g \",\"通过 n 模块安装指定的 node.js\",\"sudo n latest sudo n stable sudo n lts \"]},\"917\":{\"h\":\"Update yarn\",\"t\":[\"如果想更新所有的 package.json 中的依赖到最新版本，则可以使用：\",\"yarn upgrade-interactive --latest \",\"需要手动选择升级的依赖包，按空格键选择，a 键切换所有，i 键反选选择。\"]},\"918\":{\"h\":\"安装 node-sass 的 bug 解决\",\"t\":[\"Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可\",\"yarn config set registry https://registry.npm.taobao.org -g\\n\\nyarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g\\n\"]},\"919\":{\"c\":[\"Frontend\"]},\"920\":{\"c\":[\"node.js\",\"frontend\",\"yarn\"]},\"921\":{\"h\":\"Vue.js 总结\"},\"922\":{\"h\":\"Animating State\",\"t\":[\"生命周期包括：\",\"watch\",\"keyup\",\"computed\"]},\"923\":{\"h\":\"axios\",\"t\":[\"In the project, it is important to use AJAX. Vue resource and axios is very useful.\",\"yarn add axios -D \",\"When building a project using it in Vue Components:\",\"import axios from 'axios' export deafult = { } \",\"In signal HTML file <script>:\",\"// remeber to import CDN var vm = new Vue({ methods: { getInfo() { //axios code } } }) \",\"提示\",\"If want function getInfo automaticlly, use create hook function\",\"export default { created: function () { axios .get('') .then(response => { } }) .catch(error => { }) }, } \"]},\"924\":{\"h\":\"localStorage\"},\"925\":{\"h\":\"example\",\"t\":[\"Client-Side Storage in Vue\",\"Example in GitHub: base example, 使用了 v-model 双向绑定, 生命周期加载 localStorage 数据和 watch() 属性。\",\"A blog about localStorage\",\"在 mounted() 生命周期中加载数据，而为了观察到值的变化，需要使用 watch() 来检测数据的变化。\",\"mounted() { if (localStorage.name) { this.name = localStorage.name } }, \"]},\"926\":{\"h\":\"watch()\",\"t\":[\"注意在使用 watch() 的时候可以使用其提供的两个函数参数 newVal 和 oldVal, 也可单独使用某一个变量。\",\"watch: { 'name': function(newVal, oldVal) { // this.person = this.name + ':' + this.age this.person = newVal + ':' + this.age }, 'age': function(newVal) { this.person = this.name + ':' + newVal } } \",\"watch() 的进阶用法\",\"注意到 watch() 使用参数!\",\"可以定义 handler 去监听，并且使用 deep 或者 immediate.\"]},\"927\":{\"h\":\"usage\",\"t\":[\"setItem()\",\"localStorage.setItem('favoriteflavor','vanilla'); \",\"setItem() set the key and value and you read the key, then get the value.\",\"getItem()\",\"var taste = localStorage.getItem('favoriteflavor'); // -> \\\"vanilla\\\" \",\"removeItem()\",\"localStorage.removeItem('favoriteflavor'); var taste = localStorage.getItem('favoriteflavor'); // -> null \",\"set an object:\",\"如果存储的对象是一个 JSON 对象，那么就需要使用 JSON.stringify() 或者 JSON.parse() 加以处理：\",\"var car = {}; car.wheels = 4; car.doors = 2; car.sound = 'vroom'; localStorage.setItem('car', JSON.stringify(car) ); console.log( JSON.parse( localStorage.getItem('car')) ) \"]},\"928\":{\"h\":\"Devtools\",\"t\":[\"github-vue-remote-devtools\",\"usage:\",\"npm install -g @vue/devtools vue-devtools \"]},\"929\":{\"h\":\"components\"},\"930\":{\"h\":\"register\",\"t\":[\"There are two types of component registration: global and local.\",\"using Vue.component to register component globally:\",\"Vue.component('my-component-name', { // ... options ... }) \",\"父子组件：\"]},\"931\":{\"h\":\"Filters\",\"t\":[\"Define local filters:\",\"var vm = new Vue({ //... filters: { capitalize: function (value) { if (!value) return '' value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) } } }) \",\"Define a filter globally before creating the Vue instance:\",\"Vue.filter('capitalize', function (value) { if (!value) return '' value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) }) new Vue({ // ... }) \",\"usage:\",\"<!-- in mustaches --> {{ message | capitalize }} <!-- in v-bind --> <div v-bind:id=\\\"rawId | formatId\\\"></div> \"]},\"932\":{\"h\":\"Directives\"},\"933\":{\"h\":\"v-for\",\"t\":[\"使用 v-for 遍历数组，注意到 v-for 也可以作为 function 传入参数。\",\"在计算属性不适用的时候（一般情况下 v-for 的处理，比如排序，放置于 computed 属性中），可以使用一个 method 方法。\",\"methods: { posts: function(n) { var postDir = \\\"/blog/\\\" + n + \\\"/\\\"; return this.$site.pages .filter(x => x.path.startsWith(postDir) && !x.frontmatter.blog_index) .sort((a, b) => Date.parse(b.lastUpdated) - Date.parse(a.lastUpdated)); } } \",\"v-for 涉及到三个参数 (value, key, index), 要善于加以利用\"]},\"934\":{\"h\":\"v-cloak\",\"t\":[\"可以使用v-cloak取得变量：\",\"<div v-cloak> {{ msg }} </div> \",\"如果这样取得msg变量，会导致插值表达式闪烁问题，使用如下方法解决：\",\"<head> <style> [v-cloak] { display: none; } </style> </head> \",\"The <div> will not be visible until the compilation is done.\"]},\"935\":{\"h\":\"v-text\",\"t\":[\"<h4 v-text=\\\"msg\\\"></h4> \",\"Updates the element’s textContent(whole)\"]},\"936\":{\"h\":\"v-html\",\"t\":[\"直接解析HTML:\",\"<div v-html=\\\"msg2\\\"></div> \",\"Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates.(尽量不用)\"]},\"937\":{\"h\":\"v-bind\",\"t\":[\"使用v-bind 绑定变量的值，注意其后面可以用+增加字符串, see also api\",\"<input type=\\\"button\\\" value=\\\"Button\\\" :title=\\\"mytitle + 'a string'\\\" v-on:click=\\\"show\\\"> \"]},\"938\":{\"h\":\"v-on\",\"t\":[\"上面的v-on用于绑定事件\",\"v-on 事件修饰符：\",\"提示\",\"v-bind:title is equal to :title\",\"v-on:click is equal to @click\",\"<!-- stop propogation --> <button @click.stop=\\\"doThis\\\"></button> <!-- key modifier using keyAlias --> <input @keyup.enter=\\\"onEnter\\\"> \"]},\"939\":{\"h\":\"key modifiers\",\"t\":[\"<!-- same as above --> <input v-on:keyup.enter=\\\"submit\\\"> <!-- also works for shorthand --> <input @keyup.enter=\\\"submit\\\"> \",\"binging the methods submit. the JavaScript code used is:\",\"<script src=\\\"https://cdn.bootcss.com/vue/2.4.2/vue.min.js\\\"></script> <script> const vm = new Vue({ el: '#app', data: { msg: '123', msg2: '<h1>haha</h1>', mytitle: 'This is a title' }, methods: { show:function() { alert('Hello') } } }) </script> \"]},\"940\":{\"h\":\"v-model\",\"t\":[\"We can use the v-model directive to create two-way data bindings on form input, text area, and select element.\",\"Bind the value to a dynamic property on the Vue instance.\",\"<input type=\\\"text\\\" v-model=\\\"msg\\\" placeholder=\\\"edit me\\\"> <p> Message is {{ msg }} </p> \",\"Modifiers\",\".number\",\"<input v-model.number='age' type=\\\"number\\\"> \",\"make input to be automatically typecast as a number.\",\".trim\",\"<input v-model.trim=\\\"msg\\\"> \",\"make input to be trimmed automatically.\",\".lazy\",\"<input v-model.lazy=\\\"msg\\\"> \",\"synced after \\\"change\\\" instead of \\\"input\\\" .\"]},\"941\":{\"h\":\"Custom Directives\",\"t\":[\"there are may be cases where you need some low-level DOM access on plain elements, and this is where custom directibes would still be useful.\",\"// Register a global custom directive called `v-focus` Vue.directive('focus', { // When the bound element is inserted into the DOM... inserted: function (el) { // Focus the element el.focus() } }) \",\"Then in a template, you can use the new v-focus attribute on any element, like this:\",\"<input v-focus> \",\"Hook function include bindinserted and update and so on.. see from API. there we use the bingding arguement:\",\" Vue.directive('color', { bind: function (el, binding) { // el.style.color = 'blue' el.style.color = binding.value } }) \",\"binding has the properties: valuename and expression and so on, to see it:\",\"console.log(binding.value) //or console.log(binding.expression) \",\"usage\",\"in html, use the 'blue' other than blue:\",\"<input v-color=\\\"'blue'\\\"> \"]},\"942\":{\"h\":\"Pre-Processors\",\"t\":[\"This boilerplate has pre-configured CSS extraction for most popular CSS pre-processors including LESS, SASS, Stylus, and PostCSS. To use a pre-processor, all you need to do is install the appropriate webpack loader for it. For example, to use SASS:\",\"npm install sass-loader node-sass --save-dev \"]},\"943\":{\"h\":\"Vue CLI\",\"t\":[\"Install:\",\"yarn global add @vue/cli \",\"create a project:\",\"vue create hello-world \",\"Lint the project:\",\"yarn lint \"]},\"944\":{\"h\":\"Animate.css\",\"t\":[\"https://daneden.github.io/animate.css/\",\"使用方法：\",\"<el-main > <el-card shadow=\\\"hover\\\" v-for=\\\"post in posts()\\\" class=\\\"animated flipInX\\\" style=\\\"margin-top: 40px;\\\" :key=post.key > <!-- html file --> </el-card> </el-main> \",\"注意两点：\",\"循环出来的元素必须绑定 key\",\"直接给循环增加 animated 类\"]},\"945\":{\"c\":[\"Frontend\"]},\"946\":{\"c\":[\"vue.js\",\"frontend\"]},\"947\":{\"h\":\"C 语言 socket 实现以及 Epoll, Libevent\"},\"948\":{\"h\":\"Socket\"},\"949\":{\"h\":\"Data Struct\",\"t\":[\"地址转化函数：inet_pton(AF_INET, \\\"127.0.0.1\\\", &serv.sin_addr.s_addr); 和 inet_ntop。 其中 p 表示表达(presentation), n 表示 数值(numeric)\",\"struct sockaddr_in addr; char str[INET_ADDRSTRLEN]; inet_ntop(AF_INET, &addr.sin_addr, str, sizeof(str)); \",\"套接字结构体为：\",\"struct sockaddr_in { uint_8 sin_len; sa_family_t sin_family; in_port_t sin_port; // 16-bit struct in_addr sin_addr; char sin_zero[8]; } struct in_addr { in_addr_t s_addr; // 32-bit IPV4 } \"]},\"950\":{\"h\":\"值-结果参数\",\"t\":[\"问题：\",\"#include <sys/socket.h> int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); \",\"为什么 addrlen 要以指针的方式传递？\",\"因为 addrlen 是值-结果参数: 套接字地址结构从内核到进程方向的传递。\",\"从进程到内核传递套接字地址结构的函数有 3 个：bind, connect 和 sendto; 这些函数的一个参数是指向某个套接字地址结构的指针，另一个参数是该结构的整数大小。\",\"struct sockaddr_in serv; // fill in serv connect(sockfd, (SA *) &serv, sizeof(serv)); \",\"从内核到进程传递套接字地址结构的函数有 4 个：accept, recvfrom, getsockname 和 getpeername; 这些函数的其中两个参数是指向某个套接字地址结构的指针和指向表示该结构大小的整数变量的指针。\",\"struct sockaddr_un cli; socklen_t len; len = sizeof(len); getpeername(unixfd, (SA *) &cli, &len); \",\"如图中所示，当函数被调用时，结构大小是一个 值(value) , 它告诉内核该结构的大小，这样内核在写该结构时不至于越界；当函数返回时，结构大小又是一个 结果(result) , 它告诉内核在该结构中究竟存储了多少信息。这种类型的参数称为 value-result 参数。\",\"所有的套接字函数都是内核中的系统调用。\",\"除了系统调用之外，操作系统还可以通过异常(如缺页异常)和中断(如0x80)从用户态切换到内核态。\"]},\"951\":{\"h\":\"listen()\",\"t\":[\"#include <sys/socket.h> int listen(int sockfd, int backlog); \",\"当 socket 函数创建了一个套接字时，它被假设为一个 主动套接字，也就是说，它是一个将调用 connect() 发起连接的客户端套接字。listen() 函数把一个未连接的套接字转化为 被动套接字。指示内核应该接受指向该套接字的连接请求。\",\"本函数通常在调用 socket 和 bind 这两个函数之后，并在调用 accept 函数之前调用。\",\"第二个参数规定了内核应该为相应套接字排队的最大连接个数，比如 36。对于这个参数 backlog, 内核为任何一个给定的套接字维护两个队列：\",\"未完成连接队列(incomplete connection queue): SYN 分节已由某个客户端发出并到达服务器，而服务器正在等待完成相应的 TCP 三路握手过程；这些套接字处于 SYN_RCVD 状态； 在三路握手正常完成的前提下，未完成连接队列中的任何一项在其中的存留时间就是一个 RTT, RTT 的取值取决于特定的客户与服务器。\",\"已完成连接的队列(completed connection queue): 每个已完成 TCP 三路握手的客户端对应1其中的一项；这些套接字处于 ESTABLISHED 状态。\",\"两队列之和不超过 backlog.\",\"当进程调用 accept 函数之后，已完成连接队列中的对头项将返回给进程，或者如果该队列为空，那么进程将被投入休眠，直到 TCP 在该队列放入一项才唤醒它。\"]},\"952\":{\"h\":\"accept()\",\"t\":[\"int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen); \",\"在 accept() 函数中，我们称它的第一个参数为 监听套接字(listening socket) 描述符，称它的第二个参数为 已连接套接字(connected socket) 描述符。\",\"监听套接字由 socket 创建，随后用于 bind 和 listen 的第一个参数。一个服务器通常仅仅创建一个监听套接字，它在该服务器的生命周期内一直存在。\",\"已连接套接字由内核为每个服务器进程接受的客户端创建，当服务器完成对某个客户的服务时，相应的已连接套接字就被关闭。\"]},\"953\":{\"h\":\"select, poll and epoll\"},\"954\":{\"h\":\"select 的缺点\",\"t\":[\"单个进程能够监视的文件描述符的数量存在最大限制(_FD_SETSIZE)，通常是 1024。由于 select 采用轮询的方式扫描文件描述符，文件描述符越多，性能越差\",\"内核/用户空间拷贝问题，select 需要复制大量的数组，产生了巨大的开销\",\"select 返回的是含有整个句柄的数组，需要遍历整个数组才能发现哪些句柄发生了事件\",\"select 的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行 IO，那么之后再次 select 调用还是会将这些文件描述符通知进程。\",\"相比于 select 模型，poll 使用链表保存文件描述符，因此没有了监视文件数量(缺点 1)的限制，但其他三个缺点依然存在。\",\"假设有 100 万个客户端同时与一个服务器保持着 TCP 连接，在 select/poll 时代，服务器进程每次都把 100 万个连接告诉操作系统（从用户态复制句柄数据结构到内核态），让操作系统内核去查询这些套接字上是否有事件发生，轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll 一般只能处理几千的并发连接。\"]},\"955\":{\"h\":\"epoll\",\"t\":[\"epoll 主要有三个方法：\",\"epoll_create(int __size): 返回一个 epfd 文件描述符，红黑树的根节点\",\"int epoll_ctl (int __epfd, int __op, int __fd, struct epoll_event *__event)\",\"int epoll_wait (int __epfd, struct epoll_event *__events, int __maxevents, int __timeout);\",\"struct epoll_event { uint32_t events; /* Epoll events */ epoll_data_t data; /* User data variable */ } \",\"events 包括：\",\"EPOLLIN\",\"EPOLLOUT\",\"EPOLLERR\",\"判断是否已连接的客户端：!all[i] & EPOLLIN\",\"判断是否新连接： fd == lfd, 有新连接时，调用 accept() 接受该连接请求。\",\"typedef union epoll_data { void *ptr; int fd; uint32_t u32; uint64_t u64; } epoll_data_t; \",\"*ptr 的用法：\",\"struct sockinfo { int fd; struct sockaddr_in addr; }sockInfo; sockInfo* sinfo = (sockInfo*)malloc(sizeof(sockInfo)); sinfo->fd = lfd; sinfo->sock = serv_addr; struct epoll_event ev; // *ptr cv.data.ptr = sinfo \",\"令 ptr 指向这个结构体，传入 epoll_ctl() 即可。\",\"更复杂的带回调的 epoll_data_t 例子：\",\"struct myevent_s { int fd; // 要监听的文件描述符 int events; // 对应的监听事件 void *arg; // 指向 myevent_s 的函数指针 void(*call_back)(int fd, int events, void *arg); // 回调函数 int status; // 1：在红黑树上监听；0：不监听 char buf[BUFLEN]; int len; long last_active; // time(NULL) 记录每次加入红黑树 g_efd 的时间值 } \",\"epoll_ctl 的 op 操作：\",\"EPOLL_CTL_ADD\",\"EPOLL_CTL_MOD\",\"EPOLL_CTL_DEL\"]},\"956\":{\"h\":\"epoll 三种工作模式\",\"t\":[\"水平触发模式（默认模式）- LT\",\"只要 fd 对应的缓冲区有数据，epoll_wait 就返回，例如读缓冲区的 buf 设置过小，就会使得读操作次数变多，epoll_wait 调用变多，直到读完缓冲区中的数据；\",\"返回的次数和发送数据的次数没有关系；\",\"epoll_wait 调用次数越多，系统开销越大；\",\"在 EPOLL_OUT 中，epoll_wait 会一直返回，缓冲区能写数据，该函数会返回，缓冲区满的时候，不返回。本质上是检测写缓冲区是否可以写。\",\"边沿触发模式 - ET\",\"ev.events = EPOLLIN | EPOLLET\",\"fd - 默认阻塞属性\",\"客户端给 server 发数据：发一次数据 server 的 epoll_wait 返回一次；\",\"缓冲区中要是有没发完的数据，除非新数据到达，剩余的数据才会被发送出来，不在乎数据是否读完；\",\"可以减少系统开销，提高 epoll_wait 的效率；\",\"如果数据读不完，如何全部读出来？\",\"while(recv()) 数据读完之后 recv 会阻塞，需要设置 fd 非阻塞，也就是边沿非阻塞触发模式。\",\"EPOLL_OUT 中，第一次设置的时候 epoll_wait 会返回一次，然后就不返回了，除非满缓冲区被读，从 满 -> 不满的时候再返回一次，然后不再返回。\",\"边沿非阻塞触发模式- 代码实现\",\"效率最高\",\"如何设置非阻塞？\",\"open(): 修改 flags: O_WDRW | O_NONBLUCK, 使得文件描述符设置为非阻塞。适用于终端文件 dev/tty\",\"fcntl():\",\"#include <fcntl.h> int flag = fcntl(fd, F_GETFL); flag |= ONNBLOCK; fcntl(fd, F_SETFL, flag); \",\"将缓冲区的数据全读出，特别是针对缓冲区大小不够的情况\",\"while ((len = recv(fd, buf, sizeof(buf), 0)) > 0) { write(STDOUT_FILENO, buf, len); send(fd, buf, len, 0); } \"]},\"957\":{\"h\":\"突破文件描述符上限\",\"t\":[\"查看受计算机限制的文件描述符上限：\",\"cat /proc/sys/fs/file-max \",\"通过配置修改上限值：\",\"# see open files's num: 1024 ulimit -a vi /etc/security/limits.conf # add lines * soft nofile 8000 * hard nofile 8000 # temp setting ulimit -n 2000 \"]},\"958\":{\"h\":\"Libevent Install\",\"t\":[\"简介\",\"libevent 封装了 socket 通信、IO 多路转接；精简，专注于网络，性能高；跨平台；事件驱动。\"]},\"959\":{\"h\":\"Linux Install\",\"t\":[\"# 检测安装环境，生成 makefile ./configure make sudo make install \",\"make install 会将数据拷贝到对应的目录，如果目录不存在，则创建该目录。\",\"默认目录是：\",\"/usr/local/include\",\"/usr/local/bin\",\"/usr/local/lib\",\"验证是否安装成功：\",\"cd sample/ gcc hello-world.c -o hello-world -l event ./hello-world nc localhost 9995 \"]},\"960\":{\"h\":\"Window Install\",\"t\":[\"使用 VS 的开发者命令行，然后输入：\",\"nmake /f Makefile.nmake \",\"编译完成后会看到三个 lib 文件，在 VS 的设置中，添加附加依赖项和附加包含项即可，分别包含这三个 lib 文件和 include 文件。\",\"在运行时，会产生一些错误：\",\"#define _CRT_SECURE_NO_WARNINGS 添加这行，对应 window 下的 strerror 错误；\",\"#pragma comment(lib, \\\"ws2_32.lib\\\") 对应 winsock相关的问题。\"]},\"961\":{\"h\":\"Libevent 框架概述\",\"t\":[\"事件的底层处理框架\",\"一个函数\",\"消息循环\",\"一个函数\",\"创建事件\",\"不带缓冲区 - event \",\"几个函数\",\"带缓冲区 - bufferevent \",\"几个函数\",\"资源的释放\",\"几个函数\",\"总结其使用方法是：参考程序 bufferevent_server.c\",\"创建一个事件处理框架：struct event_base* base = event_base_new(); （流水线或设备初始化完成）\",\"创建一个事件，并将事件添加到框架上：\",\"（服务端）使用 链接监听器 直接创建: struct evconnlistener* listen = evconnlistener_new_bind();, 函数中要求实现 listen_cb 函数回调；\",\"使用 struct event* ev = event_new() and event_add(), 参考这里的 40 - 44 行\",\"如果要使用终端标准输入，可以使用 stdin 的文件描述符创建一个事件：struct events* ev_in = event_new(base, STDIN_FILENO, EV_READ | EV_PERSIST, read_terminal, NULL);\",\"开始事件循环: event_base_dispatch(base);\",\"释放资源: evconnlistener_free(listen);, event_base_free(base); and event_free();\"]},\"962\":{\"h\":\"bufferevent\",\"t\":[\"bufferevent 相比于 event 是创建带缓冲区的事件，包括读缓冲区和写缓冲区，参考libevent 官网示例：\",\"读：只要缓冲区有数据，就会被通知；\",\"写：一般用不掉，自动发送并且返回回调。\",\"listen_cb 回调中：\",\"创建一个带缓冲区的事件：struct bufferevent* bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);\",\"然后 bufferevent_setcb(bev, read_cb, write_cb, event_cb, NULL);\",\"然后分别实现三个回调:\",\"以 read_cb() 为例，读写回调函数原型为：typedef void (*bufferevent_data_cb)(struct bufferevent *bev, void *ctx);\",\"事件回调函数原型为：typedef void (*bufferevent_event_cb)(struct bufferevent *bev, short what, void *ctx);what 包括的有: BEV_EVENT_*;\",\"释放资源：使用 bufferent_free().\",\"bug avoid\",\"在初始化 listen_cb 的回调函数中，会使用读缓冲区和写缓冲区，bufferevent 默认读缓冲区是不可用的；\",\"一般情况下，我们将这两个缓冲区都 bufferevent_enable(), 防止出现段异常\",\"在套接字通信中，客户端连接服务器使用：int bufferevent_socket_connect(struct bufferevent *, const struct sockaddr *, int);\"]},\"963\":{\"c\":[\"Networks\"]},\"964\":{\"c\":[\"tcp/ip\"]},\"965\":{\"h\":\"HTTP and HTTP/2\",\"t\":[\"HTTP/2，简称h2，是万维网（World Wide Web）所使用的HTTP 网络协议的一个重大修订版本，其目的是提升加载 Web 内容时的感知性能。\"]},\"966\":{\"h\":\"HTTP/2\",\"t\":[\"HTTP/1.1 于 1998 年年底发布，HTTP/2 于 2015 年发布。\",\"HTTP/2，简称h2，是万维网（World Wide Web）所使用的HTTP 网络协议的一个重大修订版本，其目的是提升加载 Web 内容时的感知性能。\"]},\"967\":{\"h\":\"SPDY\",\"t\":[\"2009 年，Google 的工程师Mike Belshe 和Roberto Peon 提出了一种HTTP 的替代方案：SPDY4（发音同speedy）。SPDY 不是第一个希望替代HTTP 的方案，但它是其中最重要的一个，因为它带来了显而易见的性能提升。\",\"SPDY 为 HTTP/2 奠定了基础。\"]},\"968\":{\"c\":[\"Networks\"]},\"969\":{\"c\":[\"http\"]},\"970\":{\"h\":\"TCP/IP 总结\",\"t\":[\"Four Layers of TCP/IP model.\"]},\"971\":{\"h\":\"IP\",\"t\":[\"IP 是网络层（数据包）协议，分为 IPv4 和 IPv6。\"]},\"972\":{\"h\":\"IP 地址的长度\",\"t\":[\"IPv4 长度是 32位，是 4 组 8 位二进制，可以用点分十进制表示，如 255.255.255.255, 用二进制表示就是 11111111 11111111 11111111 11111111, 即 32 位。\",\"IPv6 长度是 128 位，由 8 个字段组成，每一块都表示四个 16 进制数，如 ABCD:EF01:2345:6789:ABCD:EF01:2345:6789, 最大地址个数为 2^32 个。一个 16(0 - F) 进制由 4 位二进制表示，一个字段长度为 16 字节，总长度 16 * 8 = 128 字节。\"]},\"973\":{\"h\":\"IP 地址的类别\",\"t\":[\"类别\",\"网段\",\"区分\",\"地址范围\",\"A\",\"0~127\",\"二进制首位为0\",\"1.0.0.1~127.255.255.254\",\"B\",\"128~191\",\"二进制首位为10\",\"172.16.0.0~172.31.255.254\",\"C\",\"192~223\",\"二进制首位为110\",\"192.168.0.1~192.168.255.254\",\"D\",\"224~239\",\"二进制首位为1110\",\"224.0.0.0~239.255.255.254\",\"E\",\"240~255\",\"二进制首位为1111\",\"240.0.0.0~255.255.255.255\"]},\"974\":{\"h\":\"TCP\",\"t\":[\"TCP 和 IP 的关系：IP 数据包分为 IP 头部和 IP 数据部分，IP 数据部分中包括 TCP 头部加 TCP 数据部分。\"]},\"975\":{\"h\":\"Questions\",\"t\":[\"Code TCP/IP stack\",\"How long should the sender wait for an acknowledgement from the receiver?\",\"What if the receiver cannot process data as fast as it is sent?\",\"Flow control is required, when the receiver cannot process data as fast it is sent.\",\"What if the network in between (a router, for example) cannot process data as fast as it is sent?\"]},\"976\":{\"h\":\"TCP Basics\",\"t\":[\"TCP 是一个面向连接(connection-oriented)的协议。\",\"TCP 的可靠基于超时和重传策略。\",\"TCP 是一个流协议，所以当丢包、包乱序或者包损坏时会 buffer 数据，直到把完整的数据发送给应用层的 socket.\",\"TCP header 中保存着在流中的 index, 这使得流可以分割为若干个段(segments), 而 TCP 可以重新打包它们。\",\"如果 TCP 收到了被损坏的包或者段，直接丢弃之而不需要通知发送端；发送端未收到接收端的 ack 的话，则会重传。\"]},\"977\":{\"h\":\"TCP 四层模型\",\"t\":[\"层数\",\"备注\",\"应用层\",\"FTP 协议(21 连接, 20 传输)\",\"运输层\",\"TCP 协议，在不可靠的 IP 层上，提供了一个可靠的运输层，为了提供这种可靠的服务，TCP采用了超时重传、发送和接受端到端的确认分组等机制。\",\"网络层\",\"IP 协议，提供的是一种不可靠的服务。它只是尽可能快地把分组从源节点送到目的节点，但不提供任何可靠性的保证。\",\"链路层\",\"以太网协议、令牌环协议\",\"对比 OSI 的七层模型：\",\"OSI 七层模型\",\"应用层\",\"HTTP, FTP, SMTP, POP3…等应用程序协议，SNMP，SOCKET, S-HTTP 等；计算机用户以及各种应用程序和网络之间的接口。\",\"表示层\",\"信息的语法已经它们的关联，加密解密，压缩解压缩等\",\"会话层\",\"不同用户机器上的用户之间建立以及管理会话，安全协议，目录访问协议\",\"传输层\",\"TCP,UDP；OSI的下三层的主要任务是数据传输，上三层的主要任务是数据处理；该层的作用是保证报文的正确传输；功能有传输连接管理、处理传输差错。\",\"网络层\",\"IP/IPv6, ICMP, IGMP, 控制子网的运行，如逻辑编址、分组传说、路由选择；将数据链路层的数据转化成数据包，通过路径选择、分段组合、顺序、进出路由控制等，将信息从一个网络设备传送到另一个网络设备，解决同意网络内节点之间的通信\",\"链路层\",\"物理寻址，同时将原始比特流转变为逻辑传输线路; 通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路; 将物理层的数据封装成帧，传送到上一层，或者将上一层的数据帧拆装为位流形式转发到物理层。\",\"物理层\",\"原始比特流传输，IEEE 802.2, Ethernet v2, Internetwork\"]},\"978\":{\"h\":\"TCP Header\",\"t\":[\" 0 15 31 ----------------------------------------------------------------- | source port | destination port | ----------------------------------------------------------------- | sequence number | ----------------------------------------------------------------- | acknowledgment number | ----------------------------------------------------------------- | HL | rsvd |C|E|U|A|P|R|S|F| window size | ----------------------------------------------------------------- | TCP checksum | urgent pointer | ----------------------------------------------------------------- \",\"对于 sequence number 而言，the Sequence Number represents the TCP segment’s window index, 握手是存储的是 ISN(Initial Sequence Number).\",\"ACK 段包含了发送端希望接收的下一个字节的窗口索引，握手过后 ACK 这段始终不能为空。\",\"HL 表示 Header Length，其他字段含义如下：\",\"标志位\",\"含义\",\"Congestion Window Reduced (C)\",\"发送端降低发送速率\",\"ECN Echo (E)\",\"发送端收到拥塞通知\",\"Urgent Pointer (U)\",\"段中包含优先级数据\",\"ACK (A)\",\"握手时状态，连接保持时一直保持 on 的状态\",\"PSH (P)\",\"接收端应该尽快将数据推 (PUSH) 向应用层\",\"RST (R)\",\"重置 TCP 连接\",\"SYN (S)\",\"握手时同步 ISN\",\"FIN (F)\",\"发送端终止发送数据\",\"window size 是表示接收端可以接受的字节大小，16-bit 位最大可以接收 65536 字节的数据。\",\"TCP checksum 用于检验 TCP 数据段的完整性。\",\"Urgent Pointer 表示 U 状态位打开的话，该字段用于表示优先级数据（紧急数据）在流中的位置。\",\"FIN 一般是应用层主动关闭的结果，TCP 不背锅。\",\"以上就是报头的信息，报头后面也可以提供若干选项，最大 40 字节，例如:\",\"MSS(Maximum Segment Size) 最大报文长度\",\"见MSS\",\"Selective Acknowledgment (SACK)\",\"SACK 用于传输过程中大量丢包的情况，这样会导致吞吐率下降，利用这种方式通知发送端。\",\"Window Scale\",\"发送端和接收端都包含此字段，则成倍增加滑动窗口大小，有利于容量较大的数据的传输。\",\"Timestamps\",\"在 TCP 数据段添加一个时间戳，用于计算每一个 ACK 的 RTT(往返延迟时间 Round-Trip Time), 也可以用来计算 TCP 的超时重传。\",\"TCP的 RTO（重传超时时间）值的计算方法：\",\"RFC793：使用低通过滤器来更新一个平滑的 RTT 值。\",\"Jacobson 1988: RTO=A+4D, 其中 A 为平均 RTT，D为被平滑的均值偏差。\",\"对于丢包有两种判定方式，一种是超时重传（在一定时间内如果没有得到发送数据报的 ACK 报文，那么就重新发送数据），一种是收到三个重复的 ACK.\"]},\"979\":{\"h\":\"MTU\",\"t\":[\"其关系可以表示为 { 数据帧 {IP 包 {TCP/UDP 包 {DATA} } } }\",\"在应用程序中我们用到的 data 的长度最大是多少，直接取决于底层的限制。\",\"链路层：数据帧长度为 MTU 为 1500\",\"网络层：IP 包的首部需要占 20 字节，所以这里的 MTU 为 1500 - 20 = 1480\",\"传输层：UDP 包首部占 8 字节，MTU = 1472; TCP 首部占 20 字节, MTU = 1460。\",\"特别注意，当我们 UDP 包中的数据多于 1472 的时候，发送方的 IP 层需要分片进行传输，而在接收方 IP 层则需要对数据进行重组，由于 UDP 是不可靠的协议，如果分片导致重组失败，UDP 包就会被丢弃。\",\"在网络编程中，Internet 上标准的 MTU 为 578，所以 UDP 编程时最好在 576 - 20 - 8 = 548 字节以内。\",\"PMTU: 两个端点之间的若干个 MTU 值计算出来的 MTU值。\"]},\"980\":{\"h\":\"MSS\",\"t\":[\"全称 Maximun Segmeant Size, 最大分段大小。\",\"发送端通知另一端数据段的最大值，对于一个以太网，IPV4 指定的是 1460 字节(bytes), MSS = 1500(MTU) - 20(IP) - 20(TCP) = 1460B.\",\"一般网络接口都有一个 MTU, 如果 IP 包的尺寸 <= MTU, 原封不动从这个网络接口发送，否则就需要分片，所以为了避免分片，尽量发送小于 MTU 大小的数据包。\",\"TCP 在第一次握手的时候就有一个 option 4, 协商通信双方的 MSS, 如果一方 MSS=1460, 另一方 MSS=1500, 会选择较小的一方的 MSS=1460 作为这个 TCP 连接的 MSS, 这样双向通信都可以避免因为 IP 包太大引起的分片。\",\"如果一方不接收来自另一方的 MSS 值，则 MSS 就定为默认的 536 字节(非本地的默认值，根据 IP 和子网判断是不是本地)。\",\"问题：如果 TCP 通信时，发送的数据包大小大于 MTU 该怎么办？\",\"答：TCP 在三次握手的时候会协商 MSS, 假设发送了 2000 字节的数据，如果发送缓冲区滑动窗口够大，应该会全部成功，否则会返回实际发送的字节。假设 2000 字节全部成功，TCP 实际上会将其分为 1460 和 540 这两个包，接收端收到 1460 这个包就会回一次 ACK, 接收到 540 大小这个再 ACK 一次，每个分节都带有 IP 头和 TCP 头的。IP分片只有第一个带有传输层头，其余分片只有 IP 头。\",\"补充说明：由于 TCP 是数据流协议，在不考虑缓冲区的情况下，不存在包大小的限制，这里是指在使用 send 函数时，数据长度参数不受限制，而实际上如果这段数据较长，会被分段发送；如果比较短，可能会等待和下次数据一起发送。\"]},\"981\":{\"h\":\"IP 分片\",\"t\":[\"由于 TCP 层已经进行了分段，所以 TCP 包向下到达 IP 层的时候，IP 层的数据绝对不会超过 MTU, 因此，对于 TCP 传输来说，IP 层是没有必要分片的，因为 TCP 层分段的时候，已经考虑到了这个限制。\",\"所以，UDP 传输中，IP 分片是受到了 MTU 的限制，TCP 传输中，TCP 分段，是受到了 MSS 的限制。\",\"为什么会有 IP 分片？当发送的 IP 数据报的大小超过了 MTU 时，IP 层就需要对数据进行分片，否则数据将无法发送成功。\",\"IP 分片发生在 IP 层，不仅源端主机会进行分片，中间的路由器也有可能分片，因为不同的网络的 MTU 是不一样的，如果传输路径上的某个网络的 MTU 比源端网络的 MTU 要小，路由器就可能对 IP 数据报再次进行分片。而分片数据的重组只会发生在目的端的 IP 层。\",\"IP 报文中有一个标志位 DF(Donot Fragment, 表示能否进行 IP 数据包的分片，设置为 1 不分片。\",\"IP 分片和组装的过程对传输层是透明的，原因是 IP 数据进行分片之后，只有当它达到下一站时，才可进行重新组装，且是由目的端的 IP 层来完成的。在 IP 头中，16 标识的标志位记录了一个 IP 包的 ipid, 具有同一个 ipid 的 IP 分片将会重新组装，而 13 位片偏移则记录了 IP 片相对整个包的位置，两个字段之间的 3 位标志位表示该分片后面是否还有新的分片和是否要分片(DF)。接收方（目的端的 IP 层）可以利用这些信息对 IP 数据重新进行组织。组织好之后再提交到上层协议传输层。\",\"网络层 IP 协议会检查每个从上层协议下来的数据包的大小，并根据本机 MTU 的大小决定是否作分片处理。\",\"需要注意由于 IP 没有超时重传的机智，当分片后来自 TCP 报文段的某一片丢失后，TCP 在超市后会重发整个 TCP 报文段，该报文段对应于一份 IP 数据报，没办法实现值重传 IP 数据报中的一片。\"]},\"982\":{\"h\":\"TCP 三次握手\",\"t\":[\"客户端发送一个 SYN, 并指明客户端的 ISN.\",\"服务端发送自己的 SYN 段作为应答，指明自己的 ISN. 为了确认客户端的 SYN, 将客户端的 ISN + 1 作为 ACK 数值。\",\"为了确认服务端的 SYN, 客户端将自己的 ISN + 1 作为返回的 ACK.\",\" TCP A TCP B 1. CLOSED LISTEN 2. SYN-SENT --> <SEQ=100><CTL=SYN> --> SYN-RECEIVED 3. ESTABLISHED <-- <SEQ=300><ACK=101><CTL=SYN,ACK> <-- SYN-RECEIVED 4. ESTABLISHED --> <SEQ=101><ACK=301><CTL=ACK> --> ESTABLISHED 5. ESTABLISHED --> <SEQ=101><ACK=301><CTL=ACK><DATA> --> ESTABLISHED \",\"SEQ 表示 sequence number, 握手时发送的为自己的 ISN 内容。\",\"为了避免 ISN 攻击，ISN 的计算方式为：ISN = M + F(localhost, localport, remotehost, remoteport), 其中 M 表示一个计数器，ISN 可以看做是一个32 比特的计数器，每隔 4ms 加 1，F 是一个 Hash 算法。\",\"知识拓展：TCP 序列号回绕\",\"由于 ISN 是随机产生的，所以序列号就很容易超过 2^31-1, 因此出现了 TCP 序列号回绕的问题，如何判断 TCP 回绕呢？\",\"static inline int before(__u32 seq1, __u32 seq2){ return (__s32)(seq1-seq2) < 0; } #define after(seq2, seq1) before(seq1, seq2) \",\"s32 表示有符号整型的意思，如果发生了回绕，那么会导致 seq1 大于 seq2, 例如 seq1 = 255, seq2 = 1 的时候，两者相减，我们将结果转化成有符号数：\",\"seq1 - seq2 = 1111 1111 - 0000 0001 = 1111 1110, 由于结果被强制类型转化为负数，所以其差值小于 0, 判断发生了回绕，交换 seq1 和 seq2.\"]},\"983\":{\"h\":\"TCP 状态机\",\"t\":[\"连接：\",\"SYN_SENT\",\"SYN_RCVD(LISTEN 转变)\",\"ESTABLISHED\",\"关闭：\",\"FIN_WAIT_1\",\"CLOSE_WAIT\",\"FIN_WAIT_2：处于半关闭状态。\",\"TIME_WAIT：2MSL 后完全断开。\",\"LAST_ACK\",\"CLOSED\",\"2MSL 等待时间：\",\"收到 FIN 请求后等待。每个具体 TCP 必须实现选择一个报文段的最大生存时间 MSL，它是任何报文被丢弃在网络内的最长时间（RFC793 指出 MSL 为 2 分钟，实现中可以改变这个值）\",\"假设由于客户端发送确认 FIN 的 ACK 不一定能被服务器收到，在丢失的情况下，需要等待大于 RTO（动态变化，取决于 RTT）的时间，一般 2MSL 的时长是远大于 RTO 的。\",\"处于这个等待时间时，主动发起断开的一端的 IP 和端口不能再被使用，任何迟到的数据包都被丢弃。对于服务器主动发起断开而言，处于 TIME_WAIT 等待状态的端口号在 2MSL 时间内不能被使用，一般需要等待 1-4 分钟。\",\"异常终止一个连接：\",\"不同于有序释放，异常终止连接丢弃任何待发数据立即发送 RST 位置 1 的复位报文，执行异常关闭。\",\"RST 的作用：\",\"连接未启动的服务或者端口，直接回复 RST 报文\",\"异常终止\",\"检测半打开连接，存在半打开连接的话，使用 RST 关闭\"]},\"984\":{\"h\":\"连接队列\",\"t\":[\"在外部请求到达时，被服务程序最终感知到前，连接可能处于 SYN_RCVD 状态或是 ESTABLISHED 状态，但还未被应用程序接受。\",\"对应的，服务器会维护两种队列：\",\"SYN_RCVD 状态\",\"半连接队列 syns queue, 位于 /proc/sys/net/ipv4/tcp_max_syn_backing 下，值为 256；\",\"在三次握手协议中，服务器维护该半连接队列，该队列为客户端的每个 SYN 开设一个条目(request_sock), 表明服务器已收到 SYN 包，并向客户端发送 ACK 确认，等待客户端的确认 ACK。当服务器收到客户的确认包时，删除该条目，服务器进入 ESTABLISHED 状态。\",\"ESTABLISHED 状态\",\"全连接队列 accept queue, 位于 /proc/sys/net/core/somaxconn, 值为 128, 或者和 backlog 取最小值。\",\"当第三次握手服务端接收到 ACK 包以后，会进入 accept queue, 当该队列满了以后，即使客户端继续向服务端发送 ACK 的包，也不会被响应，并且 ListenOverflows + 1, 服务端通过 tcp_abort_on_overflow 来决定如何返回，0 表示直接丢弃，1 表示发送 RST 通知客户端，客户端会回应 read timeout 或者 connection reset by peer.\",\"如果这两个队列满了，就会出现各种丢包的情况。\"]},\"985\":{\"h\":\"指数退避\",\"t\":[\"使用指数退避法来决定是否放弃连接：目前，Linux 下默认会进行 5 次重发 SYN-ACK 包，重试的间隔时间从 1s 开始，下次的重试间隔时间是前一次的双倍，5 次的重试时间间隔为 1s, 2s, 4s, 8s, 16s, 总共 31s, 称为指数退避，第 5 次发出后还要等 32s 才知道第 5 次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 63s, TCP才会把断开这个连接。\",\"其他情况算法：如果 服务器 CPU 时钟时间为 500 ms, 重传时间利用指数退避的计算方式为 1.5 的整数倍，1.5∗20, 1.5∗21...以此类推，最终的结果是1、3、6、12、24、48、64、64...\",\"如果连接两端同时发送 SYN 信号，这种情况叫做 Simultaneous Open，解决方法是两端都发送一个 ACK 并且两端同步 SYN-ACK。\"]},\"986\":{\"h\":\"超时和重传\",\"t\":[\"拥塞控制(Congestion control)作用于整体网络，它是防止过多的包被发送到网络中，避免出现网络负载过大，网络拥塞的情况。\",\"There are two general methods for this: in the explicit version, the protocol has a field for specifically informing the sender about the congestion status. In the implicit version, the sender tries to guess when the network is congested and should throttle its output.\",\"拥塞控制有其状态机和四种算法。可以参考这篇文章\",\"Congestion Control State Machine. 拥塞控制状态机的状态有五种，分别是Open, Disorder, CWR, Recovery 和 Loss 状态。\"]},\"987\":{\"h\":\"拥塞控制算法\",\"t\":[\"四种算法分别为：\",\"慢启动 - slow start\",\"TCP 刚建立连接时，一点点提速，试探一下网络的承受能力。\",\"慢启动允许一方放松连续的未经确认的分组的增加方式采用指数增加。\",\"拥塞避免\",\"一般情况下，有两组分组丢失的指示：超时和接收到重复的确认。\",\"该方法是在慢启动算法后发现拥塞窗口大小大于等于慢启动阈值后（执行慢启动算法一般是 cwnd < ssthresh），就进入拥塞避免算法。\",\"拥塞避免允许一方放松连续的未经确认的分组的增加方式采用线性增加。\",\"拥塞避免算法和慢启动算法需要对每个连接维持两个变量：一个拥塞窗口 cwnd 和一个慢启动门限 ssthresh。算法的工作过程如下：\",\"对于一个给定的连接，初始化 cwnd 为 1 个报文段(这是慢启动过程，初始化为 1，指数增长直到到达 ssthresh 后进行拥塞避免)，每收到一个确认就加 1，这会使得窗口按指数方式增长。\",\"拥塞避免算法要求每收到一个确认时将 cwnd 增加 1/cwnd，这是一种线性增长。在一个往返时间最多为 cwnd 增加1个报文段。\",\"如果 cwnd 值小于或者等于 ssthresh，则进行慢启动，否则进行拥塞避免。\",\"举例说明：\",\"假设在 cwnd 为32个报文段时发生拥塞（超时引起），于是设 ssthresh 为16个报文段，而 cwnd 为1个报文段，cwnd 在收到发送报文的 ACK 时指数增长，直到 cwnd 等于 ssthresh 才停止，从这时起 cwnd 线性增加，并在每个往返时间内最多增加1个报文段。\",\"拥塞发生时算法\",\"上面提到过超时重传和接收到 3 个以上的重复 ACK, 对于后者情况（前者情况在上面举例说明了），TCP 认为数据发生丢失，需要重传。这个机制不需要等待 Timestamps 或者定时器超时，所以叫做快速重传，由于在快速重传后使用拥塞避免算法（而未转到慢启动），所以也叫作快速恢复算法。\",\"没有执行慢启动的原因： 收到重复的ACK不仅仅告诉我们一个分组丢失了，还告诉我们一个数据包离开网络顺利到达接受者，而接收方只是没有收到需要序号的报文才会重复发送ACK。这种情况下，在收发两端之间仍然有流动的数据，而我们不想执行慢启动来突然减少数据流。\",\"快速恢复\",\"当收到第三个重复的 ACK 的时候，将 ssthresh 的值设置为当前拥塞窗口 cwnd 值的一半。重传丢失的报文段，设置 cwnd 的 ssthresh（微观上等于 cwnd / 2 + 3）, 3 表示之前收到的 3 个重复的 ACK，进入拥塞避免算法。\"]},\"988\":{\"h\":\"TCP Data Flow\",\"t\":[\"TCB: In short, the TCP has to keep track of the sequences of data it has sent and received acknowledgments for. To achieve this, a data structure called the Transmission Control Block(TCB) is initialized for every opened connection. see there\",\"TCB 是每个连接的 own records.\",\"TCB 一个用于保存 TCP 连接的 ISN, SEQ, ACK 等的数据结构，一般至少为 280 字节，有些操作系统甚至需要 1300 字节。\",\"由于，SYN 超时需要 63 秒，那么就给攻击者一个攻击服务器的机会，攻击者在短时间内发送大量的 SYN 包给 Server (俗称SYN flood攻击)，如果恶意地向某个端口发送大量的 SYN 包，则会造成 SYS Flood 攻击，其原理是利用合理的服务器请求来占用过多的服务资源，使得服务器打开大量的半开连接，分配 TCB，消耗大量服务器资源，同时也使得正常的连接请求无法被响应。\",\"解决方法：\",\"无效连接的监视释放\",\"监视系统的半开连接和不活动连接，到一定阈值的时候释放。\",\"延缓 TCB 分配\",\"由于 SYS Flood 很难建立起连接，所以采用在连接建立后再分配 TCB 的方法：\",\"Syn Cache\",\"系统在收到一个 SYN 报文时，在一个专用的 hash 表中保存这种半连接信息，直到收到正确的回应 ACK 报文再分配 TCB。\",\"Syn Cookie\",\"使用一种特殊的算法计算 Sequence Number, 在收到对方的 ACK 报文以后，重新计算看其是否与回应报文中的 Sequence Number - 1 相同，从而决定是否分配 TCB 资源。\",\"Syn Proxy 防火墙\",\"使用防火墙技术，略过。\"]},\"989\":{\"h\":\"流量控制\",\"t\":[\"TCP(Transmission Control Protocol) 使用滑动窗口来进行流量控制\",\" Left window edge Right window edge | | | | --------------------------------------------------------- ...| 3 | 4 | 5 | 6 | 7 |... --------------------------------------------------------- ^ ^ ^ ^ | \\\\ / | | \\\\ / | Sent and Window size: 3 Cannot be ACKed sent yet \"]},\"990\":{\"h\":\"Model\"},\"991\":{\"h\":\"TCP&UDP\",\"t\":[\"Tips: HOST means Domain or IP address.\",\"TCP(20bits) and UDP(8bits) could use a same port in a host without conflict.、\"]},\"992\":{\"h\":\"FTP\",\"t\":[\"FTP is often secured with SSL/TLS(FTPS) or SFTP.\",\"FTP通信中使用两条TCP连接：\",\"控制\",\"数据传输\",\"FTP uses multiple TCP connections:\",\"control channel(port 21)\",\"data channel(port 20)\",\"FTP 端口号：21 端口用于连接，20 端口用于传输数据。具体过程为：进行 FTP 文件传输时，客户端首先连接到服务器的 21 端口，进行用户的认证，传输文件时，服务器打开 20 端口来进行传输。\"]},\"993\":{\"h\":\"ARP - 网络层\",\"t\":[\"ARP 即地址解析协议，工作在网络层(与 IP 同一层), 其作用是将 IP 解析为 MAC 地址（在IPv6 中使用邻居发现协议进行解析），相应的，RARP 是将 MAC 地址解析为 IP 地址。\",\"在以太网中，一个主机和另一个主机进行直接通信，必须要知道目标主机的 MAC 地址，所谓地址解析就是主机在发送帧（链路层）前，将目标 IP 地址转化成目标 MAC 地址的过程。ARP 协议的基本功能就是通过目标设备的 IP 地址，查询目标设备的 MAC 地址，保证通信的顺利进行。\",\"IP 地址为 32 位，MAC 地址为 48 位。\"]},\"994\":{\"h\":\"工作原理\",\"t\":[\"在每台安装有 TCP/IP 的电脑中都有一个 ARP 缓存表，表中的 IP 地址与 MAC 地址是一一对应的，发送数据时，主机会在自己的 ARP 缓存表中查询是否有目标 IP 地址：\",\"有，则得出目标的 MAC 地址\",\"没有，则在网络上发送一个广播\"]},\"995\":{\"h\":\"HTTP\"},\"996\":{\"h\":\"HTTP 和 HTTPS\",\"t\":[\"关系：HTTP + 加密 + 认证 + 完整性保护 = HTTPS\"]},\"997\":{\"h\":\"DNS 解析\",\"t\":[\"DNS 属于应用层协议，其使用端口号 53，同时使用 TCP 和 UDP 协议，具体为：\",\"DNS 在区域传输的时候使用 TCP 协议\",\"辅助域名服务器会定时(一般为 3 小时)向主域名服务器进行查询以便于了解数据是否有变动，如果有变动，会执行一次区域传送，进行数据同步，这时候使用 TCP 连接，因为数据同步传送的数据量比一个请求应答的数据量要多得多，同时 TCP 的可靠性也保证了数据的准确性。\",\"其他时候使用 UDP 协议\",\"客户端向 DNS 服务器查询域名，一般返回的内容都不超过 512 字节，所以使用 UDP 查询即可。不用经过三次握手，这样 DNS 服务器的负载更低，响应更快。\"]},\"998\":{\"h\":\"GET and POST\",\"t\":[\"GET 和 POST 方法的长度限制\",\"GET 方法提交的数据大小长度并没有限制，HTTP协议规范没有对 URL 长度进行限制(GET 参数带在 URL 后面)。这个限制是特定的浏览器及服务器对它的限制。\",\"POST是没有大小限制的。HTTP 协议规范也没有进行大小限制，起限制作用的是服务器的处理程序的处理能力。如 Tomcat 下可以配置 POST 大小或者取消 POST 的限制，某些数据(如 file) 只能由 POST 携带。\",\"GET 请求能够被 cache, POST 不进行缓存\",\"获取一个网站的 GET 请求头部：curl -I www.weigao.cc: 只请求头部；如果要显示全部信息，使用 -i; 显示全部请求过程，使用 -v.\",\"一个 POST 请求体的举例\",\"POST 请求可以分为 请求行、请求头、请求体。\"]},\"999\":{\"h\":\"Request and Response\",\"t\":[\"Request:\",\"GET /hello.txt HTTP/1.1 Host: www.mysite.com Accept-Language: en \",\"Response:\",\"响应消息包括四部分：状态行，消息报头，空行，响应正文\",\"HTTP/1.1 200 OK Content-Type: text/plain;charset=utf-8 --content here-- \",\"状态码包括：\",\"1xx: 指示信息：表示请求已经接受，继续处理\",\"2xx：成功消息\",\"3xx：重定向\",\"4xx：客户端错误：请求有语法错误或请求无法实现\",\"5xx：服务器端错误\"]},\"1000\":{\"h\":\"TCP socket\",\"t\":[\"Code in Github\",\"Note that if the client is the type of str, the encode() it:\",\"message = \\\"Current time is \\\" + str(dt)\\nconn.send(message.encode())\\n\"]},\"1001\":{\"c\":[\"Networks\"]},\"1002\":{\"c\":[\"tcp/ip\"]},\"1003\":{\"h\":\"编程生涯总结 - weigaochen\"},\"1004\":{\"h\":\"::: vue Hello and Welcome! :::\",\"t\":[\"2013.09 - Now:\",\"#include <stdio.h> int main() { printf(\\\"Hello and Welcome!\\\\n\\\"); return 0; } \",\"2014.10 - Now:\",\"#include <iostream> using namespace std; int main() { cout << \\\"Hello and Welcome!\\\" << endl; return 0; } \",\"2015.09 - Now:\",\"class HelloAndWelcome { public static void main(String[] args) { System.out.println(\\\"Hello and Welcome!\\\"); } } \",\"2017.07 - Now:\",\"#! /bin/bash echo \\\"Hello and Welcome!\\\" \",\"2017.09 - Now:\",\" print('Hello and Welcome!') \",\"2018.09 - Now:\",\" console.log(\\\"Hello and Welcome!\\\"); \",\"2018.09 - Now\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\"> <title>Hello and Welcome!</title> </head> <body> <div id=\\\"app\\\"> <input type=\\\"text\\\" v-model=\\\"msg\\\" placeholder=\\\"edit meit\\\"> <p> {{ msg }} </p> </div> </body> </html> \",\"2018.10 - Now:\",\"<script> var vm = new Vue({ el: '#app', data: { msg: 'Hello and Welcome!'; } }) </script> \"]},\"1005\":{\"c\":[\"Others\"]},\"1006\":{\"c\":[\"codelife\"]},\"1007\":{\"h\":\"2019 新年感悟\"},\"1008\":{\"h\":\"Abstract\",\"t\":[\"新年快乐~！\",\"新的一年，新的博客的 directory.\",\"希望新的一年继续好好学习\",\"找个好工作\",\"保持对 coding 的热情，努力提高自己\",\"加油！\"]},\"1009\":{\"h\":\"Objectives\",\"t\":[\"CPP:\",\"Know basic cpp language grammar\",\"Do 1-2 cpp projects\",\"Learning Open GL\",\"Basic:\",\"Networks\",\"Browser\",\"Go\",\"Lua\",\"More about JS\"]},\"1010\":{\"c\":[\"Others\"]},\"1011\":{\"h\":\"Paper Report\",\"t\":[\"Abstract\",\"记录论文答辩的答辩稿\"]},\"1012\":{\"h\":\"开始\",\"t\":[\"各位老师，晚上好！ 我叫陈惟高，我的论文题目是融合视觉的WiFi室内定位算法，论文是在李瑞导师的悉心指点下完成的，在这里我向我的导师表示深深的谢意，向各位老师不辞辛苦参加我的论文答辩表示衷心的感谢，下面我将本论文的主要内容向各位老师作一汇报，恳请各位老师批评指导。\",\"本文主要提出了InDeFi，一个融合视觉的WiFi室内定位系统，结合WiFi室内定位技术和计算机视觉技术，实现了高精度的融合室内定位算法。\",\"本文的融合算法优点在于，解决了单一室内定位系统存在的缺陷，如WiFi室内定位系统精度较低易受干扰，计算机视觉室内定位技术对光线环境较为敏感和容易受到遮挡等缺陷，融合了WiFi室内定位的可穿墙性和视觉室内定位的高精度优点，新的室内定位系统精度较高、鲁棒性强，适用范围广。\",\"本文由两个主要的模块组成，分别是基于 WiFi 的室内定位模块和基于视觉的室内定位模块，围绕这两个模块，本文提出了一系列创新性的算法和计算机视觉模型，接下来将分别讲述每个模块的细节，最后讲述一下本文如何将两个定位模块有效融合并在实际测试中说明本文室内定位系统的优越性。\",\"本次报告主要分为六个部分，第一、二部分简单讲述一下室内定位的研究背景和相关理论，相关理论包括WiFi相关理论和计算机视觉目标检测相关理论，第三部分重点讲述一下基于WiFi的室内定位算法的设计与实现，第四部分重点讲述一下基于视觉的室内定位算法的设计与实现，第五部分重点阐述融合视觉的WiFi室内定位算法的设计实现与测试，最后一部分对本文进行一个小结。\",\"室内定位拥有很广阔的应用前景，但是现有的室内定位技术都存在缺陷，如 RFID和 UWB 等，这些技术定位精度较高，可以到达厘米级，但是依赖设备的定制，成本较高，WiFi 与 蓝牙定位技术成本较低但是精度无法达到室内定位的要求，超声波定位技术易受干扰，视觉定位技术对光线环境较为敏感等。基于此，本文选择了成本较低的摄像头和商用WiFi设备，将其融合以获得精度的提升。\",\"室内定位的发展已经有将近 30 年的历史，其定位精度已经从米级到达了本文的厘米级，不难预测，未来将出现更多高精度的室内定位技术。\",\"第二部分主要讲述室内定位的基本理论，为节省时间，本文从论文中选取了四个经典的基本理论，本文的部分算法都是基于这四个基本理论改进而来。首先是室内的多径效应，多径效应在室内环境中十分常见，多径效应的存在会导致多径失真现象，在基于WiFi的室内定位系统中，有效克服多径效应的影响可以极大提高系统的定位精度。\",\"信道状态信息 CSI 是基于WiFi的室内定位系统采用的主要技术，CSI 可以从商用无线网卡中获得，其可以反映丰富的室内空间信息，当同时CSI 信息中也伴随着很多误差和干扰信息，如何有效利用 CSI 信息并提出精确的 CSI 解析和误差消除算法是WiFi室内定位的一个挑战点。CSI 信号包含丰富的子载波信息，功率时延谱可以在测量 CSI 信号的同时得到，用于结合 CSI 信息确定主径，非常实用。\",\"在目标检测领域，BBox 或者边界框是目标检测的重要概念，如何在目标检测网络中生成精确的BBox 是目标检测问题的目的和重点，围绕BBox 产生了一系列的相关理论，如IoU，一般作为测试的重点指标，RPN锚箱，可以优化BBox的检测效率，YOLO网络，其思想可以被借鉴用于提高网络的检测速度等。\",\"特征金字塔结构在目标检测中十分有用，但是在最近的目标检测模型中由于其复杂性较高，逐渐被放弃使用，本文基于传统的特征金字塔进行优化，提出了可伸缩的特征金字塔结构，很大程度上提高了目标检测模型的精度和性能。\",\"接下来重点讲述一下本文的两个重点模型之一，基于 WiFi 的室内定位算法，（下一页）该算法包含四个重点部分，CSI的收集和误差消除，AoA 室内定位算法，TDoA室内定位算法以及最终融合AoA和TDoA的基于WiFi的室内定位算法，接下来我将分别重点讲述这些算法。\",\"首先是 CSI 的测量误差及消除，CSI 在收集过程中的每一步都会产生或大或小的一些误差，总结来说会产生 4 个较大的影响最终定位误差，分别是。。。。，这些误差会使得收集到的 CSI 信号的振幅和相位产生偏差，本文针对每一个偏差提出了有效的误差消除算法，(翻页)特别是针对 SFO，本文结合 PDP 提出了 SFO 消除算法，相比于现有的 SFO 误差消除研究成果，本文的 SFO 消除算法速度更快，且消除效果更佳。 右图表示 CSI 消除误差后的相位拼接结果，我们共选取了5000 组CSI信号进行拼接。\",\"AoA 定位算法是基于CSI的室内定位技术的重点，其原理简单并且定位精准，近年来被广泛研究。\",\"本文还从数学角度基于传统的 MUSIC 算法进行改进，提出了共轭MUSIC算法，该算法基于共轭矩阵优化噪音信号，比传统的MUSIC算法能够更加有效地过滤噪音信号。\",\"WiFi 室内定位系统中，多径地抑制一直是研究的重点和难点，本文提出了多路径抑制算法，基于1000组benchmark的观察得出结论，可以很好地抑制室内多径效应，有效辨别主径信号的AoA。\",\"除了AoA 定位算法之外，本文还提出了TDoA定位算法与AoA加以结合，进一步提高了室内定位的精度，本文提出混合流萤算法，结合WSL算法的搜索思想改进，可以有效快速地确定目标位置。\",\"总结一下 WiFi 室内定位算法，该算法共包含五个子模块，最终通过各模块之间的有效融合，结合最大似然聚类算法，能够精确地根据WiFi信号计算空间中的目标位置。\",\"接下来介绍本文的第二个重点模块，基于视觉的室内定位算法模块，在该模块中，本文共提出了三个创新性的深度卷积神经网络模型，分别是。。。。这三个模型相互结合，可以完成超级精确的视觉室内定位任务。\",\"首先讲述第一个模型，InDetectNet 目标检测网络，该网络的创新点在于，使用了 BBox 偏移用于衡量BBox的位置，减少了训练所需要的参数数量，使用类别和聚类损失结合，提高了训练的损失精度，使用了方差投票算法，极大提升了模型的速度，使得模型深度提升的同时，兼顾了精度和检测速度。\",\"本文的SFPN结构十分具有创新性，相比于FPN，SFPN可以任意堆叠并连接到网络的任何层次，这使得本文的目标检测网络在每一层都可以生成高分辨率高语义的目标特征，后文测试部分将通过烧融实验对使用SFPN对网络产生的精度提升加以说明。\",\"接下来讲述第二个模型，InDepthNet 深度提取网络，该网络使用经典的编码器-解码器结构，并使用了 DenseNet-101作为编码器进行迁移学习，使用横向连接设计解码器，表格中列举了网络的详细架构。除此之外，该网络将三个损失函数有效加以结合，折中结合可以有效提升编码器-解码器的精度，由于现有的深度数据集数据较少，为了训练更稳定的模型，我们还使用了一系列有效的数据扩充操作。\",\"最后一个模型是。。。网络，该网络基于人群密度的特点，使用加权。。。距离衡量人物头部距离，设计一个独立的网络用于生成密度图像，为了增强网络的深度的同时不损失过多的密度信息，该模型还是用了空洞卷积，灵活地将多尺度的上下文信息聚合在一起。\",\"为实现最终的视觉室内定位，本文使用点云的方式结合了InDetectNet 和 InDepthNet 的结果，提出一个融合RGB特征的三维BBox预测结构，达到了视觉三维定位的目的。\",\"第五部分主要是融合视觉的WiFi室内定位系统的设计实现与测试，该部分首先分别对WiFi定位模块和视觉定位模块进行了测试，然后对融合的定位方法进行说明，并对结果进行了测试，每个测试中均对比了近3年内的先进算法或模型。\",\"首先是InDeFi系统的概要，图中展示了如何对WiFi定位结果和视觉定位结果进行有效融合，（翻页）融合的算法为基于线性卡尔曼滤波的定位信息融合算法，融合后的定位系统相比于单个定位系统精度更高、适用性更强。\",\"接下来分别讲述每个模块的测试，首先是WiFi定位模块的实现与测试，上表表示收集的CSI信号的解析结果，下图表示CSI误差消除后的相位和振幅，右下图是带有5300网卡的信号接受和处理设备。\",\"WiFi定位模块经过聚类后的结果如图所示，我们分别列举了视距路径和非视距路径的聚类结果。\",\"视觉定位模块的实现与测试分为几个部分，首先是对相机的标定，我们通过标定板和本文提到的基于单应矩阵的相机标定算法得到了相机的内参和外参矩阵，如表所示。 视觉定位模块第二个实现与测试是对目标检测网络InDetectNet的实现与测试，表中表示在COCO 数据集中进行的烧融实验，该实验主要测试。。。三个技术对模型精度的影响，可以看出，同时使用本文提到的三个优化算法可以获得很大的精度提升。 我们在VOC数据集上对InDetectNet进行了测试，并对比了现有的先进的目标检测器，可以看出，InDetectNet具有极大的精度领先。 除VOC数据集以外，我们还在COCO数据集上对InDetectNet进行了测试，并对比先进的目标检测模型，可以看出，InDetectNet在对小目标的检测上拥有十分巨大的优势。\",\"视觉定位模块的深度提取网络InDepthNet的实现细节如下所示，我们在NYU DepthV2 上对该模型进行了训练和测试，测试结果如表所示， 除此之外，（翻页）在KITTI数据集上的测试结果如表所示，（翻页）模型的实际运行结果如图所示。\",\"视觉定位模块最后一个网络InCrowNet的训练基于Shanghai Tech Dataset，我们在Part A和Part B上分别对模型进行了训练和测试，以寻找最佳精度的模型，并分别在三个密度图数据集上进行了测试，结果如表格所示。（翻页）图表示InCrowNet的运行结果。\",\"融合InDetectNet 和 InDepthNet 的 InDeFi 视觉模块实现与测试结果如表所示。\",\"接下来重点讲述一下InDeFi的测试，我们在实验室中选取了一块实验区域如图所示，实验区域大小为10m×3m，共分了3000个网格以方便测试，实验的定位误差用下式衡量。\",\"本文共设计了两组benchmark，分别测试了四个环境的排列组合下系统的定位性能，包括视距路径、非视距路径、强光环境、弱光环境，对每一组测试分别计算最大定位误差和最小定位误差，并绘制误差累计分布图。\",\"从测试中可以看出。。结论。。。\",\"完\"]},\"1013\":{\"h\":\"选题背景\"},\"1014\":{\"h\":\"精确的定位系统十分重要\",\"t\":[\"定位服务与我们的生活息息相关，在室外，拥有很多成熟的定位技术，如全球定位系统GPS，北斗导航卫星等，但是在高层建筑、机场车站、地下停车场等室内环境中，传统的室外定位无法对目标进行精确的定位。\",\"室内定位拥有广阔的应用场景，现有的室内定位技术都存在着一些缺陷，如。。。\"]},\"1015\":{\"h\":\"室内定位的发展过程\",\"t\":[\"。。\"]},\"1016\":{\"h\":\"室内定位的国内外研究现状\",\"t\":[\"从广义上讲，这些室内定位技术可以被分为两类，基于信号的室内定位和基于视觉的室内定位\"]},\"1017\":{\"h\":\"论文结构\",\"t\":[\"为解决这些室内定位存在的问题，本论文提出了一种融合视觉的室内定位算法，该算法使用常见的商用 WiFi 设备和单目相机，可以实现厘米级的室内定位，本文共分为六章，第一章主要介绍了室内定位的背景和国内外研究现状，第二章介绍了与室内定位相关的基础理论，包括信道状态信息 CSI 的基本概念，室内多径效应及其影响和多信号分类算法 MUSIC，在视觉定位方面，第二章介绍了\"]},\"1018\":{\"h\":\"研究方法\"},\"1019\":{\"h\":\"多径效应\",\"t\":[\"多径效应普遍存在于室内环境中，WiFi 信号在传播过程中会随着传输距离的增加而变宽，特别是在室内存在大量反射物体的环境下，当信号遇到多个干扰物体发生反射时，会产生大量重复波前，此时无线网卡的接收天线会接收到多个无线信号，发生多径传播效应。\",\"多径效应使得信号的一部分到达目的地，另一部分被障碍物反射，然后到达目的地，对接收天线而言，被反射的信号会经过更长的路径延迟到达。一般而言，将信号传播更长的路径叫做多径，信号传播最短的路径叫做直接路径或主径，如图所示，红色的为主径，穿过障碍物后信号衰弱但未发生反射，传播路径最短；蓝色和绿色标识的多径都经过墙壁或家具的反射，传播路径更长。\",\"多径效应使得室内定位存在两个比较大的挑战，第一是室内较强的多径对主径产生较大的影响，\"]},\"1020\":{\"h\":\"CSI\",\"t\":[\"如图所示，表示 WiFi 的发射端和接收端之间的多径传播及其信道响应，图中的每条路径都对应信道脉冲响应（CIR），该响应可以由右边的公式得到。\",\"其中 ap ,θp ,τp 分别表示振幅、相位和第 i 条路径的时延，L 表示路径的总数，在图中为 3 条，包括 1 条视距路径（主径）和 2 条非视距路径（多径）。在频域上，相位的波动也会引起频率的选择性衰弱，产生信道频率响应 (CFR)，CFR 由振幅频率响应和相位频率响应组成，CIR 和 CFR 都描述了小尺度的多径效应，被广泛应用于信道测量，信道响应具有更细粒度的频率分辨率和时域分辨率，可以很好地区分多径。\",\"CFR 和 CSI 的转换关系如式所示，其中 n 为噪音的功率，SNR 表示网卡上天线的信噪比，PRSS​ 是接收信号强度的功率，PCSI​ 是 CSI 信号的接收功率。\",\"图表示 CSI 信号的处理过程，来自天线的信号通过下转频转换得到基带信号 s(t)，在数据采样过程中，通过模数转换器 (ADC) 将 s(t) 转换为数字信号 s[n]，包检测阶段通过包边界检测器 (PBD) 用于矫正 s[n]，PBD 检测到数据包的头部信息时，CFO 校正器会对信号的中心频率进行校准，OFDM 接收器根据 s[n] 来估算 CSI，并将 CSI 传递给后续的模块进行处理。\",\"功率时延谱 (PDP) 表示 CSI 在不同时延下的功率分布，功率时延谱可以由信道脉冲响应计算得到，其描述多路径的信道特征，如图所示，由于主径的路程最短，故通常假定第一个到达的峰值是主径的接收功率。从图中可以看出，由于室内多径的影响，第一个峰值对应的功率并不是最大值，如果第一个峰值是最高的功率峰值，则说明发送端和接收端之间存在直接视距路径 (LoS)，反之则存在非直接视距路径 (NLoS)，如此就可以根据功率时延谱来判断室内多径对主径的影响。\"]},\"1021\":{\"h\":\"计算机视觉相关理论\",\"t\":[\"目标检测模型可分为两阶段目标检测器和单阶段目标检测器，两阶段目标检测器无法完成端到端的目标检测任务，实时性较差，单阶段目标检测器实时性较高但是精度较差，因此本文着重于研究单阶段目标检测器，并从各个方面优化其精度。\",\"典型的单阶段目标检测器包括 Fast R-CNN、Faster R-CNN 和 YOLO 等，其主要思路在于使用区域建议 (Region Proposal Algorithms, RPA) 绘制边界框 (Bounding Box, BBox) 进行目标检测，利用不同尺寸的 BBox 选取图像中的某一部分作为兴趣区域(Regions of Interest, RoI)，而后利用 CNN 提取 RoI 相关的视觉特征，最后使用分类器进行识别。\",\"在图中的 448 × 448 像素的狸花猫图片分别对应两个 BBox，红色的代表 ground truth 所生成的 BBox，绿色代表预测网格生成的 BBox，两个 BBox 之间相交区域面积除以 ground truth 的面积所得的值即代表 IoU 的大小，图中列举了几种不同大小的 IoU，IoU 的值越大，代表该网格所对应的 BBox 预测的准确度越高。一般定义一个阈值 I 用于衡量 IoU 的精确程度，若取 I = 0.5，则 IoU 小于 I 的BBox 被认为是一个比较糟糕的预测，例如图 2.8 (b)；而大于 I 的可以认为是较好的预测，例如图 2.8 (c),(d)；一般而言，若 IoU 的值越接近于 1，则认为 BBox 的预测目标大小越接近实际图像中的目标大小。\"]},\"1022\":{\"h\":\"特征金字塔\",\"t\":[\"特征金字塔网络是多尺度下的目标识别网络的常用组成部分。\",\"图 (a) 表示使用单个图像金字塔来构建特征金字塔的示意图，由于每一个尺度下的图像都需要分别计算并预测特征，这样不仅增加了特征的推算时长，而且使得训练一个端到端系统时产生过大的内存消耗。\",\"图 (b) 表示只在单一尺度下的特征预测，这样能够实现更快的检测速度，但是只生成一个高分辨率的单一高级特征图，会牺牲其他尺度下的特征。\",\"图 (c) 表示利用 CNN 固有的金字塔特征结构，将这个特征结构视作和图 (a) 相似的图像金字塔，不同的网络层次会产生不同的特征图，这些特征图的深度不同，语义差异也较大，这就导致了高分辨率的低等级特征损害了目标识别中的表达能力。\",\"图 (d) 表示 FPN 特征金字塔网络，FPN 利用深度神经网络金字塔具有从低到高语义的结构建立，使其自始至终都具有高级语义。\",\"如图 (d) 通过自顶向下 (top-down) 的结构，将低分辨率、强语义与高分辨率、弱语义的特征连接起来，使得该结构生成的 FPN 在每一层上都具有丰富的语义，在网络内创建 FPN 用于代替特征化的图像金字塔能在不牺牲表达能力、速度和内存消耗的前提下，实现相同的准确率。\",\"右图简单展示了构建自顶向下架构的结构图，对于一个较低分辨率的特征图而言，使用最邻近上采样将空间分辨率提升了 2 倍，为了避免信道维度缺失问题，将上采样的结果与对应的自底向上的特征图通过 1×1 的卷积层结合，自顶向下的过程将迭代直到产生最细精度的分辨率，一般与原始输入图像分辨率相等即可，最后为了减少上采样的混叠效果 (aliasing effect)，最终在合并的特征图后追加一个 3 × 3 的卷积层来生成最终的特征层。\"]},\"1023\":{\"h\":\"基于 WiFi 的室内定位算法\"},\"1024\":{\"h\":\"CSI 相位误差消除\",\"t\":[\"CSI 信号在收集过程中可能出现的振幅偏差包括以下几点：\",\"采样频偏 SFO。SFO 的产生是由于非时钟同步，传输对的采样频率会产生偏移，使得 s[n] 产生一个微小的时钟偏移 τ o ，由于 τ o 在很短的时间中趋于稳定，故 SFO 会对 CSI 相位产生一个常数误差 λ o 。\",\"包边界检测PBD错误。包检测过程中包检测器对不同数据包头部检测偏差，在传输信号中产生一个时移 τ b ，该时移在 CSI 相位上产生一个随机误差 λ b 。\",\"中心频偏 CFO。由于收发端的中心频率不能完全同步所导致，虽然 CFO 校正器会对中心频率偏移进行补偿，但是由于硬件不完善，这种补偿通常不够完整。CFO 会导致 CSI 产生相位偏移 β。\",\"对于 SFO 的消除，本文提出了 SFO 消除算法，我们观察图中的相位偏差可知，每条线（对应于向量之间存在着一个微小的旋转偏差， 基于这个原理，对于任意两个向量在频域中进行“旋转”直到这两个向量的功率时延谱基本上保持一致就可以消除 SFO，本文的 SFO 消除算法从数学上定义了相位和 PDP 之间的关系，从而达到消除 SFO 误差的目的。（定义一个相似度函数，而后估计参数）\",\"对于包检测错误，由于不同的包接收时延 τ b 都不相同但是遵循均值为 0 的高斯分布规律，这意味着 λ b 遵循同样的高斯分布规律，根据弱大数定理的原则，可以将所有测量的 CSI 相位 φ k 相加取均值以达到消除 λ b 的目的。从原理上来讲，测量越多的 CSI 值，误差消除的效果也会越好，但是其可能会在扫描信道的时候产生延迟，所以需要选择合适的 CSI 测量数量，同时兼顾误差和效率。\",\"对于中心频偏 CFO 而言，其会产生一个相位的偏移 β，CFO 偏差一般不会导致斜率上的偏移，在移除掉包边界检测 (PBD) 错误偏移 λ b 和中心采样频偏 SFO 之后，不同 WiFi 频段重叠子载波相位的形状会变得相似，只存在一些平移的偏差，可以从任意频带中选择一个相位作为参考相位并用于校准补偿其他频带上的相位平移误差，即可达到消除 CFO 的目的。\",\"受限于硬件的分辨率，自动增益控制器 AGC 不能很好地补充信号的振幅衰减，无法使得振幅与发射功率一致，故测量到的 CSI 振幅等于补偿后的功率，使得 CSI 的振幅产生偏移。\",\"CSI 由于振幅衰减产生的振幅误差与 WiFi 频段无关，从不同频段测量的振幅具有相同的分布，所有 CSI 数据包中振幅的误差整体符合高斯分布，其均值为 0，只需对所有的频段进行平均即可达到消除振幅误差的目的。\"]},\"1025\":{\"h\":\"AoA 室内定位算法\",\"t\":[\"左图表示 AoA 的计算原理，在每个 CSI 信号波长 λ 内，相位以 2π 为周期变化，当发送天线发送数据包被接收天线接收到的过程中，经过路径长度为 d ，由于两根天线之间以距离 λ/2 分布，所以对于两根天线接收到的同一方位上目标的信号，先到达的信号和后到达的信号之间存在着距离差，这个距离差的大小只与方向角 θ 相关，由图中的三角关系可得出相位和方向角的关系。一般在空旷环境下计算 AoA 只需要测量出两天线之间的相位差值即可。\",\"多径抑制算法的思想在于：当发射端和接收端之间的目标产生轻微的运动时，如身体的自然摆动，对应在 AoA 频谱上的主径峰值通常十分稳定，而多径峰值会产生剧烈的变化。\",\"基于这个思想，本文定义一个角度值 θ 0 和一个距离值 d 0 。当目标在距离 d 0 之内移动都被视为轻微的运动，如果两个信号的 AoA 频谱峰值中心轴的角度差距小于 θ 0 ，便认为其未发生改变；反之，如果该差距大于 θ 0 ，则发生改变。如此，在目标轻微运动时，就能够使用 AoA 频谱区分出多径和主径。\",\"多径抑制算法对于未改变的信号加以保留，改变的信号加以抑制或删除，如此就能在 AoA 频谱图上抑制或消除多径信号的峰值，达到减少多径效应影响的目的。\"]},\"1026\":{\"c\":[\"Others\"]},\"1027\":{\"c\":[\"paper\"]},\"1028\":{\"h\":\"Soft Skills - The Software Developer's Lift Manual\",\"t\":[\"这是一篇关于《软技能 - 代码之外的生存指南》的读书笔记，作者是John Z.Sonmez[美]。\",\"如何成为一个比现在更棒的软件开发人员？\",\"如何在软件行业构建自己声望？如何在身体上、精神上、心灵上更加强大？\",\"如何摆脱“打工人”的差事成为一个企业家？\"]},\"1029\":{\"h\":\"1. 职业\",\"t\":[\"职业发展的驱动力一定是来自个体本身。工作是属于公司的，而职业生涯却是属于自己的。\"]},\"1030\":{\"h\":\"2. 从非同凡响开始：绝不要做他人都在做的事\",\"t\":[\"把软件开发事业当做生意来看待。我们和中世纪的铁匠、厨师没有本质区别，完全可以随时换个地方另起炉灶。（把自己当做一个企业去思考）\",\"转变你的心态：如何转变？把雇主当做自己软件开发的一个客户，你现在是一个商人，应该想着如何做好自己的生意。在这里方法先不用加以考虑，重要的是这种心态的转变。\"]},\"1031\":{\"h\":\"2.1 如何像企业一样思考？\",\"t\":[\"一个企业由什么组成？产品 or 服务，那么你自己作为一个企业，你有什么可以卖？你的产品或者服务是什么？\",\"如何提升你的产品或者服务？\",\"如何营销这个服务？\"]},\"1032\":{\"h\":\"3. 思考未来：你的目标是什么？\",\"t\":[\"你需要设定一个目标，这个目标足够长远。\",\"日期\",\"现在的目标是什么？\",\"2021年10月24日\",\"1. 短期目标：升级、加薪；2. 做优秀的产品\"]},\"1033\":{\"h\":\"设定大目标\",\"t\":[\"通常而言，因为大目标的时间比较长远，所以这个大目标也不用非常明确、不一定要非常具体。\",\"几个选项：\",\"在某个公司成为主管、经理？\",\"成为一个企业家创建自己的产品并将其推向市场？\",\"📌📌📌问一个自己问题：\",\"你希望自己五年或者十年后在哪里？\"]},\"1034\":{\"h\":\"追踪你的目标\",\"t\":[\"你的目标应该是定期刷新，必要时进行调整的。\"]},\"1035\":{\"c\":[\"Others\"]},\"1036\":{\"c\":[\"others\"]},\"1037\":{\"h\":\"日常感悟\"},\"1038\":{\"h\":\"2018\",\"t\":[\"This is my personal thoughts.\"]},\"1039\":{\"h\":\"2018-11-20\",\"t\":[\"自由自在写代码的日子还能有多久？\"]},\"1040\":{\"h\":\"2018-11-22\",\"t\":[\"写代码，写过的代码忘记了也就罢了，喜欢这件事，更在于享受其过程。\"]},\"1041\":{\"h\":\"2018-11-29\",\"t\":[\"与代码打交道，永远比与人打交道来得简单，我希望自己能够静下心来，纯粹地去coding，不用理会别人的看法，人活着已经很累了，何必想得太多，活在当下，珍惜当下才是根本。\"]},\"1042\":{\"h\":\"2018-12-14\",\"t\":[\"我需要写一个 App，来记录自己睡觉的时间，很 simple: 睡觉的时候点一下，睡起来再点一下，然后统计一天的睡觉总时长。\"]},\"1043\":{\"h\":\"2019\"},\"1044\":{\"h\":\"2019-1-24\",\"t\":[\"尽量少的在博客里贴代码，多写一写文字感悟类的。\"]},\"1045\":{\"h\":\"2020\"},\"1046\":{\"h\":\"2020年3月26日\",\"t\":[\"今天写了博客的新版本，还不错\"]},\"1047\":{\"h\":\"2021\"},\"1048\":{\"h\":\"2021年10月18日\",\"t\":[\"不知道该学习什么了，看了国外那么多厉害的程序员，感觉我就像是一个小学生，但是做了一年 JAVA 了，真的不喜欢这门语言，开发也极度内卷，没有成就感，真丧。\"]},\"1049\":{\"c\":[\"Others\"]},\"1050\":{\"c\":[\"thoughts\"]},\"1051\":{\"h\":\"2018 bug 日记\"},\"1052\":{\"h\":\"July\",\"t\":[\"Jul 17 Darknet, YOLO, write the patent, new version.\",\"Jul 18 Flask web development, with Visual Studio\",\"Jul 23 Flask video stream\",\"Jul 24 Flask database: MongoDB\",\"Jul 25 Flask unit test; meeting about Flask site develop\",\"Jul 26 visit NLP team; rebuild CSI tool(ERROR in log_to_file); modify one_key_install.sh\",\"Jul 27 Flask 404 page, rendering templates\",\"Jul 28 test bootstrap: how to import flask from flask_bootstrap and use it in extends; Flask struct, FAILED and checkout all code(sad..); path import problem\",\"Jul 29 add new branch bootstrap_test and SUCCESSimport\",\"Jul 30 add new function into bootstrap_test branch; initialize the app by flask extend; Flask-Moment to show time format\"]},\"1053\":{\"h\":\"August\",\"t\":[\"Aug 01 Flask MongoDB initialization\",\"Aug 02 solved path problem in Flask; Login v1.0 with wtforms; new Struct v2.0; blueprint\",\"Aug 03@property in Python; login in terminal\",\"Aug 22@mian.route() usage; SQLite\",\"Aug 23 switches by Flask Forms\",\"Aug 30 Flask PyMongo, bootstrap CSS, CDN, Jinja block\",\"Aug 31 Charts, JavaScript used in Flask\"]},\"1054\":{\"h\":\"September\",\"t\":[\"Sep 01Charts.js, npm\",\"Sep 05 responsive charts\",\"Sep 06 solved problem, kramdown problem, fix bug highlight problem in Jekyll, with highlight.js\",\"Sep 11 Flask-SocketIO\",\"Sep 12 rebuild struct, add the extra servers for socket server\",\"Sep 13 CSS !important usage\",\"Sep 14Vundle.vim,plugin: YCM\",\"Sep 15 Mongo DB restore, rebuild Flask site, implemented web camera\",\"Sep 18 Dashboard, the new version of frontend\",\"Sep 19 Start vue.js, vuepress docs\",\"Sep 24 Update README.md make the site easy to deploy for non-professionals\",\"Sep 25 Deploy the site in Aliyun, let the site available via IP address: 120.78.71.220(unused), new Tencent server IP is 118.24.241.17\",\"Sep 26 Debug the site, delete unused files, Jinja2 will not be used in the future\",\"Sep 27 Use Vue.js rebuild site’s frontend, start Vue Cli3, make the backend and frontend separated\",\"Sep 28 Deploy the radar device, apply for custom domain, server migration\"]},\"1055\":{\"h\":\"October\",\"t\":[\"Oct 10 Create a qqbot\",\"Oct 11 Vuex and components\",\"Oct 12 Write some components in vuepress\",\"Oct 15 Vue v-on and v-model\",\"Oct 16 Vue dev-tools, custom directives .focus() and keyup.enter\",\"Oct 18 Vue animation, custom css using Animate.css\",\"Oct 19 Vue todo app, make some css beautiful\",\"Oct 22 Use the vue-element-admin, build vuepress site with new function: Discuss by Valine\",\"Oct 23 Use element UI to build a table(data from radar project by axios), make the table adjustable and read data by props\",\"Oct 24Element UI date component: add a new function date choose, vue-router, import element ui in enhanceApp.js\",\"Oct 25 Add a new table attribution: angle, and make the project home dashboard more professional; add new map using <iframe>; tool: Studio 3T for MongoDB\",\"Oct 26 MongoDb database’s CRUD\",\"Oct 29 Vue-router: query, params, children\"]},\"1056\":{\"h\":\"November\",\"t\":[\"Nov 01 basic webpack\",\"Nov 02 basic css\",\"Nov 05 new site header: Books, different between Process and Thread\",\"Nov 06 String problem solved(1/2)\",\"Nov 07 Vector and extral string konwledge(2/2), iterator\",\"Nov 08 Iterator usage, sequential containers\",\"Nov 12 Sample markdown editor, c++ sequential-server\",\"Nov 13 A custom editor build with c. phase 1, init the project with VS, remote debug in subsystem, config the sshd_config allows the password authentication in /etc/ssh; Custom editor mode: raw mode; Using sys/ioctl.h to get the window size.\",\"Nov 14 Editor key press, editorKey including 'WASD' and 'PAGEUP' 'PAGEDOWN'.\",\"Nov 18 New function: scorll\",\"Nov 19 add render tab, add empty inverted color black status bar, add message bar, learn: variadic function\",\"Nov 20 New function: insert chars and prevent inserting special characters; dirty flag for modified file, and quit confirmation.\",\"Nov 21 Fix bug: backspace invalid error, backsapcing at the start of a line.\",\"Nov 22 finish the text editor basic functions.\",\"Nov 26 book reading, git tag\",\"Nov 27 update the new version and format the time using moment, add a function: marquee\",\"Nov 28 moment in js\"]},\"1057\":{\"h\":\"December\",\"t\":[\"Dec 03 fix bug in vuepress; search function in kilo editor; fix bug: time local error: lang: zh-ch\",\"Dec 04 update blog, add new label: project, and move python lable to code\",\"Dec 05Emailjs\",\"Dec 10 VPS and BOOK: c++ primer # 2\",\"Dec 12 map, unordered map, some cpp functions\",\"Dec 14 - Dec 18 Small app in Wechat\",\"Dec 26 Make new version blog: remove categories, make blog simple.\"]},\"1058\":{\"c\":[\"Others\"]},\"1059\":{\"c\":[\"bug log\"]},\"1060\":{\"h\":\"The Zen of Python\",\"t\":[\"Zon of Python By Tim Peters\",\"translated by weigao chen\",\"Beautiful is better than ugly.\",\"Explicit is better than implicit.\",\"于美于显，勿陋勿隐。\",\"Simple is better than complex.\",\"Complex is better than complicated.\",\"何彼繁矣，大道至简。\",\"何彼涩矣，涩以从繁。\",\"（吾心繁繁，愠于从涩）\",\"Flat is better than nested.\",\"Sparse is better than dense.\",\"平兮稀兮，实获我心。\",\"嵌兮密兮，心之忧矣。\",\"Readability counts.\",\"读之妙哉，日就月将。\",\"Special cases aren't special enough to break the rules.\",\"殊从于规，不可破也。\",\"所可破也，行之厉也。\",\"Although practicality beats purity.\",\"Errors should never pass silently.\",\"Unless explicitly silenced.\",\"岂不思异，过莫避之。\",\"In the face of ambiguity, refuse the temptation to guess.\",\"There should be one-- and preferably only one --obvious way to do it.\",\"远歧近理，闻于苍穹。\",\"Although that way may not be obvious at first unless you're Dutch.\",\"Now is better than never.\",\"Although never is often better than right now.\",\"其艰不易，何不躬行？\",\"夙夜解之，既明且哲。\",\"If the implementation is hard to explain, it's a bad idea.\",\"If the implementation is easy to explain, it may be a good idea.\",\"解之即成，于简于繁？\",\"简兮简兮，以永终誉。\",\"繁兮繁兮，于乎哀哉！\",\"Namespaces are one honking great idea -- let's do more of those!\",\"命名空间，于嗟益兮！\"]},\"1061\":{\"c\":[\"Others\",\"Python\"]},\"1062\":{\"c\":[\"python\"]},\"1063\":{\"h\":\"Blog Update Plan\"},\"1064\":{\"h\":\"博客更新计划\",\"t\":[\"该文档主要阐明后续的博客重点更新方向：\",\"主题\",\"进度\",\"备注\",\"《二分》\",\"规划中\",\"二分查找、二分搜索，算法、理论与应用\",\"《DFS、BFS》\",\"编写中\",\"总结DFS、BFS的通用思路，题解举例\",\"《动态规划》\",\"规划中\",\"总结从递归到动态规划、题解\"]},\"1065\":{\"h\":\"二分\",\"t\":[\"子主题\",\"说明\",\"链接\",\"进度\",\"二分查找\",\"总结二分查找的规律、例题\",\"二分搜索\",\"总结二分搜索的规律、例题\",\"二分的应用\",\"如何在实际工作中使用二分思想？\"]},\"1066\":{\"h\":\"DFS、BFS\",\"t\":[\"子主题\",\"说明\",\"链接\",\"进度\",\"DFS\",\"深度优先搜索总结、例题\",\"BFS\",\"广度优先搜索总结、例题\"]},\"1067\":{\"h\":\"动态规划\",\"t\":[\"子主题\",\"说明\",\"链接\",\"进度\",\"动态规划例题\"]},\"1068\":{\"h\":\"背包\",\"t\":[\"子主题\",\"说明\",\"链接\",\"进度\",\"0-1背包\",\"0-1背包总结、例题\",\"2021年5月23日 已完成\",\"完全背包\",\"完全背包总结、例题\",\"2021年5月23日 已完成\",\"背包组合问题\",\"深入理解背包\"]},\"1069\":{\"c\":[\"Projects\"]},\"1070\":{\"c\":[\"blog\"]},\"1071\":{\"h\":\"Jekyll GitHub Pages Blog\",\"t\":[\"Do you want to build your own site from scratch or generate one for your project? This guide could help you with Jekyll and GitHub Pages.\"]},\"1072\":{\"h\":\"GitHub Pages\",\"t\":[\"Before we start build our Jekyll site, we should do as follows in GitHub:\",\"Create a new empty repository, name is username.github.io; For example, my repository named chenweigao.github.io.\",\"In your home folder, clone this repository, using git clone\",\"If you have any questions about Git ,see my another post Git - To Use Git More Easily: Config, Branch and Rebase\"]},\"1073\":{\"h\":\"Install\",\"t\":[\"Take Ubuntu system as an example:\",\"# Install sudo apt-get install ruby jekyll \",\"or this guide:\",\"sudo apt-get install ruby ruby-dev build-essential echo '# Install Ruby Gems to ~/gems' >> ~/.bashrc echo 'export GEM_HOME=$HOME/gems' >> ~/.bashrc echo 'export PATH=$HOME/gems/bin:$PATH' >> ~/.bashrc source ~/.bashrc gem install jekyll bundler \",\"change the gem source:\",\"gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/ \"]},\"1074\":{\"h\":\"Build Site\",\"t\":[\"# After you install jekyll jekyll new ~/username.github.io/ \",\"After you do this, you will see a directory blog, then:\",\"cd username.github.io jekyll server \",\"Then your site could be seen at: http://localhost:4000, open your browser and type it, you'll see your new site.\",\"# build site in local bundle exec jekyll build bundle exec jekyll server --incremental \"]},\"1075\":{\"h\":\"Blog Directory Structure\",\"t\":[\"If you ls in your blog directory, you will see many files, an overview of what will be used for you does:\",\"_config.yml: your configuration data\",\"In this file, you could do many things to your site, this is my _confg.yml file, you can edit as soon as you like.\",\"#_config.yml title: Nerche Note email: weigao1024@foxmail.com description: > # this means to ignore newlines until \\\"baseurl:\\\" Welcome to my profile pages! baseurl: \\\"\\\" # the subpath of your site, e.g. /blog url: \\\"\\\" # the base hostname & protocol for your site github_username: chenweigao \",\"_posts: this is where your article stored, when you want to publish a new blog, to CREATE a new file here, the naming convention of these files is important, and must follow the format:YEAR-MONTH-DAY-title.md, such as: 2018-02-02-myblog.md, please remember this, it is very important.\"]},\"1076\":{\"h\":\"Add Post\",\"t\":[\"We create a new markdown file named 2018-02-02-test.md:\",\"--- layout: article title: \\\"This is a test blog\\\" tag: - blog modify_date: 2017-01-01 --- ## You will see me at [https://localhost:4000](https://localhost:4000) The head is **required** in every post which tells the system your post's title, layout, time and so on... \",\"Then you need to open your terminal, and type:\",\"jekyll build jekyll server \",\"Then you open your browser, and type https://localhost:4000 ,you will find the blog's update.\"]},\"1077\":{\"h\":\"Publish Blog\",\"t\":[\"Now it is time to publish your blog in GitHub Pages, you need to:\",\"git add . git commit -m \\\"my frist blog\\\" git push \",\"Then you can see your blog at username.github.io, such as chenweigao.github.io\"]},\"1078\":{\"h\":\"Highlight Code\",\"t\":[\"Sometimes, especially for a coder, you may want to highlight your code:\",\"{% raw %} {% highlight c linonos %} int mian(){ printf(\\\"Hello Jekyll!\\\\n\\\"); return 0; } {% endhighlight %} {% endraw %} \",\"提示\",\"raw and endraw make the code not parsed by Jekyll.\"]},\"1079\":{\"h\":\"Including Images and resources\",\"t\":[\"Chance are, at some points, you'll want to include images, downloads, or other digital assets along with your text content. There are a number of ways to include digital assets in Jekyll, one common solution is to create a folder in the root of the project directory call something like assets, into which any images, files or other resources are placed.\",\"Including an image assets in a post:\",\"![My helpful screenshot]({{ site.url }}/assets/screenshot.jpg) \",\"or:\",\"![My helpful screenshot]({{ \\\"/assets/screenshot.jpg\\\" | absolute_url }}) \",\"linking to a PDF for readers to download:\",\"[get the PDF]({{ site.url }}/assets/mydoc.pdf) \",\"see at the official guide,Writing Post.\"]},\"1080\":{\"h\":\"Add HTTPS\",\"t\":[\"When you want to add HTTPS, it is really a big work, see this guide, that is helpful. The tool we use is cloudflare.\",\"There is an auto tool can help you add https, Netlify, which helps you set your site here, and make it faster, more importantly, it is free, highly recommend.\"]},\"1081\":{\"h\":\"highlight.js\",\"t\":[\"using highlight.js, downloads the package and select a .css, then in header.html:\",\"<link rel=\\\"stylesheet\\\" href=\\\"{{ site.url }}/assets/css/default.css\\\">\\n<script src=\\\"{{ site.url }}/assets/css/highlight.pack.js\\\"></script>\\n<script>hljs.initHighlightingOnLoad();</script>\\n\"]},\"1082\":{\"c\":[\"Projects\"]},\"1083\":{\"c\":[\"blog\"]},\"1084\":{\"h\":\"Linux Text Editor：Kilo, C\",\"t\":[\"Abstract\",\"This project is built by C. It’s about 1000 lines of C in a single file with no dependencies, and it implements all the basic features you expect in a minimal editor, as well as syntax highlighting and a search feature.\",\"Project's Repo\",\"Tutorial by kilo\"]},\"1085\":{\"h\":\"Features\",\"t\":[\"Based in C, quick and effective\",\"Highlight\",\"Delete\"]},\"1086\":{\"h\":\"Key Concept\"},\"1087\":{\"h\":\"Useful Skills\"},\"1088\":{\"c\":[\"Projects\"]},\"1089\":{\"c\":[\"Linux\",\"c/c++\"]},\"1090\":{\"h\":\"QQ 自动聊天机器人\"},\"1091\":{\"h\":\"Overview\",\"t\":[\"In the github document\",\"Installation:\",\"pip install qqbot \",\"Run:\",\"qqbot #or in these way qqbot -q qqnumber \",\"See help or others:\",\"qq help|stop|restart|fresh-restart \"]},\"1092\":{\"h\":\"Plugin\",\"t\":[\"qq plug/unplug myplugin \"]},\"1093\":{\"h\":\"Create a bot\"},\"1094\":{\"h\":\"urllib, url request\",\"t\":[\"Use the ‘图灵机器人’ API:\",\"# -*- coding: utf-8 -*- import json import urllib import random def onQQMessage(bot, contact, member, content): api_url = \\\"http://openapi.tuling123.com/openapi/api/v2\\\" req = { \\\"perception\\\": { \\\"inputText\\\": { \\\"text\\\": content }, \\\"selfInfo\\\": { \\\"location\\\": { \\\"city\\\": \\\"西安\\\", \\\"province\\\": \\\"陕西\\\", \\\"street\\\": \\\"高新二路\\\" } } }, \\\"userInfo\\\": { \\\"apiKey\\\": \\\"2da9ae73b65f4cce8cff91fc027fa---\\\", \\\"userId\\\": \\\"OnlyUseAlphabet\\\" } } req = json.dumps(req).encode('utf8') http_post = urllib.request.Request(api_url, data=req, headers={ 'content-type': 'application/json'}) response = urllib.request.urlopen(http_post) response_str = response.read().decode('utf8') response_dic = json.loads(response_str) intent_code = response_dic['intent']['code'] results_text = response_dic['results'][0]['values']['text'] if content is not None and contact.ctype == 'buddy': # bot.SendTo(contact, results_text, resendOn1202=True) bot.SendTo(contact, results_text) \"]},\"1095\":{\"h\":\"Timed transmission\",\"t\":[\"@qqbotsched(hour='10, 11, 12, 13, 14', minute='01')\\ndef sendMyMessage(bot):\\n    gl = bot.List('buddy', 'Jack')\\n    if gl is not None:\\n        for member in gl:\\n            bot.SendTo(member, 'Hi, this is a TimingMessage!')\\n\"]},\"1096\":{\"c\":[\"Projects\"]},\"1097\":{\"c\":[\"python\"]},\"1098\":{\"h\":\"Vuepress Blog Guide\",\"t\":[\"Reference\",\"This site is built by Vuepress, Vuepress GitHub\",\"A basic tutorial: zero-to-deploy-build-a-documentation-system-with-vue-and-vuepress\"]},\"1099\":{\"h\":\"Installation and Configration\",\"t\":[\"If you like the blog built by Vuepress, you can fork or clone it and give me a star.\",\"This is a tutorial may help you:\",\"clone the rep:\",\"git clone https://github.com/chenweigao/vueblog.git \",\"or fork it, and clone form you repo.\",\"install the yarn: https://yarnpkg.com/lang/zh-hans/docs/install/#windows-stable\",\"run the command:\",\"yarn yarn docs:dev \",\"then you can see the site run at: localhost:8080, you can visit it.\",\"in docs/.vuepress/config.js, modify the title to yours, comment out lin 63 - lin 66(or you could register valine and modify the Comments.vue's config)\",\"in docs/.vuepress/blog, delete all of my post and put your post here(do not delete the directory).\",\"in docs/.vuepress/blog/Others/resume.md, replace it by your own resume.\",\"There, everything about your blog is done!\",\"You can deploy this site via Netlify: This is a tutorial, or you follow this:\",\"fork this repo, or push your clones repo to your GitHub.\",\"visit https://app.netlify.com\",\"registe via GitHub account and then click New site from Git, and chose this repo\",\"then fill the deployment command:\",\"Build Command: yarn docs:build Publish directory: docs/.vuepress/dist \",\"wait... when the build success, then click Domain settings and custom you domains.\",\"More config information could be found at my blog's post Vuepress Blog\"]},\"1100\":{\"h\":\"Vuepress Update\"},\"1101\":{\"h\":\"Update Plugin & Vuepress\",\"t\":[\"Update the vuepress:\",\"yarn add vuepress@next -D yarn add @vuepress/plugin-back-to-top -D yarn add @vuepress/plugin-last-updated@next -D \",\"如果想更新所有的 package.json 中的依赖到最新版本，则可以使用：\",\"yarn upgrade-interactive --latest \",\"需要手动选择升级的依赖包，按空格键选择，a 键切换所有，i 键反选选择。\",\"也可以在 package.json 中的 scripts 下添加自定义的更新命令。\",\"\\\"scripts\\\": { \\\"docs:dev\\\": \\\"vuepress dev docs\\\", \\\"docs:build\\\": \\\"vuepress build docs\\\", \\\"docs:upgrade\\\": \\\"yarn upgrade @next\\\" } \",\"Add the back-to-top plugin to nginxig.js:\",\"plugins: ['@vuepress/back-to-top'] \",\"Run Command:\",\"yarn dev:docs # dev model yarn dev:build # release \"]},\"1102\":{\"h\":\"Icons\",\"t\":[\"Usng Aliyun icon in vueblog project:\",\"iconfont links\",\"选择图表并加入购物车，生成项目\",\"复制代码，引入 css.\",\"新建 <i class=\\\"iconfont icon_code\\\"></i>\",\"如果是在 botton 中，则使用 <el-button icon=\\\"iconfont icon-liuyan\\\"> Comments</el-button>.\"]},\"1103\":{\"h\":\"Tags\",\"t\":[\"<Badge text=\\\"beta\\\" type=\\\"warn\\\"/> <Badge text=\\\"0.10.1+\\\" type=\\\"tip\\\"/> \"]},\"1104\":{\"h\":\"Markdown extend\"},\"1105\":{\"h\":\"LeTex Formula\",\"t\":[\"Install markdown-it-katex: yarn add markdown-it-katex -D.\",\"Modify your nginxig.js in .vuepress\",\"module.exports = { ... markdown: { extendMarkdown: md => { md.use(require(\\\"markdown-it-katex\\\")); } } }; \",\"Add Katex CSS into your theme or anywhere ( in exact markdown file you want to use Katex, in Layout.vue, ... )\",\"<link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css\\\"> <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/github-markdown-css/2.2.1/github-markdown.css\\\"/> \"]},\"1106\":{\"h\":\"Custom Containers\",\"t\":[\" :::tip YOUR LABEL YOUR CONTENT ::: :::warning YOUR LABEL YOUR CONTENT ::: :::danger YOUR LABEL YOUR CONTENT ::: :::vue YOUR LABEL YOUR CONTENT ::: \"]},\"1107\":{\"h\":\"vuepress-plugin-tabs\",\"t\":[\"参考这个教程\",\":::: tabs type:card ::: tab MyTitle\",\"def a: return 0 \",\":::\",\"::: tab MyTitle2 this is a tab ::: ::::\"]},\"1108\":{\"h\":\"Asset Handing/image\",\"t\":[\"将图片放置于 .vuepress/public 目录下，然后引用 ![Image](/imagename.type).\"]},\"1109\":{\"h\":\"引入代码块的方法\",\"t\":[\"引入默认折叠的代码块\",\"<RecoDemo :collapse=\\\"false\\\"> <template slot=\\\"code-python\\\"> <<< @/docs/.vuepress/code/dfs.py </template> </RecoDemo> \",\"引入默认展开的代码块\",\"<RecoDemo :collapse=\\\"true\\\"> <template slot=\\\"code-python\\\"> <<< @/docs/.vuepress/code/dfs.py </template> </RecoDemo> \",\"更多的折叠方式可以参考官方文档\"]},\"1110\":{\"h\":\"代码块折叠\",\"t\":[\"The <details> <summary></summary> </details> are from HTML5:\",\"inline使用\",\"// code \",\"Source code is:\",\"<details><summary>inline 使用</summary> //code block </details> \"]},\"1111\":{\"h\":\"格式化文件标准\",\"t\":[\"--- title: 烤鸭的做法 date: 2019-08-08 sidebar: 'auto' category: - 烹饪 - 爱好 tag: - 烤 - 鸭子 keys: - '123456' 注意这里用加密文 publish: false sticky: 2 --- \",\"加密算法\",\"如果你的密码是 123456，需要将密码字符串设置为32位的 md5 加密密文。md5加密\",\"一般写作时复制如下代码：\",\"--- title: date: 2018-5-10 tag: - vue.js category: - Projects --- \"]},\"1112\":{\"h\":\"bug fix\"},\"1113\":{\"h\":\"momment.js 时区问题\",\"t\":[\"使用 moment.js 在 vuepress 项目中时，会产生时区偏差，在本地正常，在服务器端会产生 8 个小时的偏差。\",\"解决方法（2020年5月14日）：\",\"使用 Moment Timezone。\",\"在项目中安装：yarn add moment-timezone 并在 config.js 中使用；\",\"编写时区代码：\",\"'@vuepress/last-updated',{ transformer: (timestamp, lang) => { // Don't forget to install moment yourself // const moment = require('moment') var moment = require('moment-timezone'); moment.locale('zh-cn'); var jz = moment(timestamp) time_res = jz.tz(\\\"Asia/Shanghai\\\") // return moment(timestamp).moment.tz(\\\"Asia/Shanghai\\\").format('llll') return time_res.format('llll') } } \",\"如此就成功转换了时区，并格式化为英文。\"]},\"1114\":{\"h\":\"VueBlog 出现崩溃\",\"t\":[\"时间：2020年5月17日\",\"问题：移动端界面一直卡在加载中，电脑端乱码，原因未知\",\"解决方案：\",\"尝试清除缓存重新 Build，并提交新的 commit，修改成功，bug 原因未知。\"]},\"1115\":{\"c\":[\"Projects\"]},\"1116\":{\"c\":[\"vue.js\",\"blog\"]},\"1117\":{\"h\":\"ArrayTrack\"},\"1118\":{\"h\":\"Abstract\",\"t\":[\"The presence of reflectors in the environment surrounding a transmitter and receiver create multiple paths that a transmitted signal can traverse.\",\"As a result, the receiver sees the superposition of multiple copies of the transmitted signal, each traversing a different path. Each signal copy will experience differences in attenuation, delay and phase shift while travelling from the source to the receiver. This can result in either constructive or destructive interference, amplifying or attenuating the signal power seen at the receiver. Strong destructive interference is frequently referred to as a deep fade and may result in temporary failure of communication due to a severe drop in the channel signal-to-noise ratio.\"]},\"1119\":{\"h\":\"Signal fade\"},\"1120\":{\"h\":\"Two abservations\",\"t\":[\"Increasing number of antennas on an access poin (AP)\",\"New technologies introduced with 802.11ac include more MIMO spatial streams , vs. four in 802.11n.\",\"WiFi is ubiquitous and densely deployed\"]},\"1121\":{\"h\":\"Challenge\",\"t\":[\"Strong multipath reflections indoors\",\"Direct path attenuated or completely blocked, may be not strongest\"]},\"1122\":{\"h\":\"Key observation\",\"t\":[\"Direct path bearing is more stable than reflection path bearings when client moves slightly.\"]},\"1123\":{\"h\":\"AoA\",\"t\":[\"Angle of arrival(AoA)[^1], AoA determines the direction by measuring the Time Difference of Arrival (TDOA) at individual elements of the array -- from these delays the AoA can be calculated.\",\"Generally this TDOA measurement is made by measuring the difference in received phase at each element in the antenna array.\"]},\"1124\":{\"h\":\"Design\",\"t\":[\"Packet detection\",\"multipath suppression\",\"Two peak bearings within five degrees are considered paired.\",\"Diversity synthesis\",\"Increase the number of antennas we can utilize\",\"MUSIC algorithm\",\"Does not work well because of coherent signals, they same frequence, the only difference is phase.\",\"Spatial smoothing: handles coherent signals. ($2.3.2)\",\"ArrayTrack's multipath suppression algorithm leverages change in the wireless channel that occur when the transimitter or objections in the vicinity(附近) move by grouping together AoA spectra(光谱) from multiple frames, if available.\",\"AoA spectra synthesis and search for highest probability position.\"]},\"1125\":{\"h\":\"Downconversion\",\"t\":[\"$3: Each radio receiver incorporates a 2.4 GHz oscillator whose purpose is to convert the incoming radio frequency signal to its representation in I-Q space shown.\",\"An undesirable consequence of this downconversion(下混频) step is that it introduces an unknown phase offset to the resulting signal, rendering AoA inoperable.\",\"The consequence is that this manifests as an unknow phase. For this, the paper propose a one-time calibration scheme to handle these equipment.\"]},\"1126\":{\"h\":\"Useful word\",\"t\":[\"brife primer 简单、简短的定义说明\",\"In order to explain how we generate AoA spectra, we now present a brief primer on phased arrays.\",\"deleterious consequences: /,delɪ'tɪərɪəs/ 有害的结果\"]},\"1127\":{\"h\":\"Relevant document\",\"t\":[\"ArrayTrack: A Fine-Grained Indoor Location System.pdf\",\"report slide.pdf\",\"Jie Xiong report video.mp4\",\"R. O. Schmidt, 1986. MUSIC (algorithm).\",\"From wikipedia, AoA\"]},\"1128\":{\"c\":[\"Research\"]},\"1129\":{\"c\":[\"paper\",\"CSI\"]},\"1130\":{\"h\":\"RF-Pose\",\"t\":[\"This paper, Through-wall Human Pose Estimation Using Radio Signals, is extracted from a paper in CVPR2018 published by Dina Katabi, a famous team in the wireless communication field, and demonstrates accurate human pose estimation through walls and occlusions. In this paper, the system RF-pose designed by wireless signals can accurately predict human activities, and it also has very accurate prediction results when the environment is blocked by walls and other obstacles.\"]},\"1131\":{\"h\":\"简介\",\"t\":[\"本篇论文实现基于该思想：由于无线信号不能直接对应于人类的活动，所以引入现有的成熟的计算机视觉技术，使用若干个布置好的网络摄像机，再设计卷积神经网络作为系统的基准，在训练时同步地将RFID的无线信号和计算机的视觉信号相结合，并用之训练。训练好的网络只使用无线信号来预测人的活动方式，换句话说，计算机视觉信号作为深度学习的训练标签。系统的最终结果实现了一个基于无线信号的活动感知系统，可以通过无线信号感知出人类活动的2D图形，如图所示。\",\"人的姿态的预测在无线感知领域一直是一个重要的课题，可应用的场景包括活动识别、安全监管、老人防护等，即便是在最成熟的计算机视觉解决方案中，对于遮挡等障碍的处理依旧是一个基本的挑战难题。之前的研究成果有通过物体的可见部分推测被遮挡物体的剩余部分的计算机视觉解决方案，但是由于人类的身体不是固定的，而是随着运动产生变化，所以这样的解决方案很多情况下会发生错误，更加严重的是，当人被物体完全遮挡的时候，这种方案就完全失效了。\",\"本论文提出了一种完全不同的解决方案来处理遮挡和其他感知类问题。不同于可见光很容易被墙壁或其他障碍物遮挡，WiFi的无线频率信号（Radio Frequency signals）可以跨越该障碍，更幸运的是，该信号能反射出人的身体，这就提供了一种穿墙追踪人类活动的可能性。近期研究的先进的无线感知系统使用了RF信号来检测人类活动或者穿墙检测他们的行进速度，但是缺陷在于这些系统只能追踪人体的一个关键节点（例如头部、四肢、躯干中的一个），而论文中提出的RF-Pose系统能检测出人活动的2D图形，绘制出主要的关键点（或关键肢干）。还有一点是有些系统只能绘制出静态的人体行为的表述，其实现的原理在于将不同时间点观测到的人类的活动汇聚于一个时间帧上面，而论文中的系统则是可以实时地动态检测出人类活动的变化。如通过计算机视觉的方法实现精确的人类姿态的检测十分困难一样，使用无线信号也同样充满挑战。\"]},\"1132\":{\"h\":\"RF-Pose\",\"t\":[\"RF-Pose系统是本文提出的一个基于无线信号处理的神经网络系统，该系统能提供精确的人的姿态的2D追踪图像，如图所示：\",\"可以看出，即使是在人被障碍物遮挡甚至是完全被掩盖的时候，RF-Pose依旧有着很好的预测能力，它传输较小功率的无线信号，同时观测出环境中的反射。\",\"系统使用无线信号在环境中的反射作为唯一输入，估计人的骨架，如图所示：\",\"（解释图一）\",\"设计神经网络并训练到高的准确率存在很多的挑战。对于基于视觉信号的姿态预测系统来说，最大的挑战之一在于该任务很难确定训练的标签，人工对无线信号进行标签也很不现实。对于这个问题，该论文提出了可行的解决方案：神经网络无线感知交叉模型，如图所示：\",\"具体而言，在训练过程中，为无线感知系统布置一个网络摄像机，并对视觉信号和无线信号进行同步。从网络摄像机（计算机视觉系统）中提取出人行为的视觉信号，将其用于无线感知系统的监督信号。当系统训练完成之后，只需要使用无线信号作为输入即可。系统的最终实现方式为只需要在无线信号的输入下感知人类的活动，而不需要人为的标注标签。值得一提的是，RF-Pose系统在房间里面充满人的时候也有很好的表现，这在训练的时候是没有可以标注的。\",\"除了模型交叉设计，RF-Pose系统的设计还考虑到了RF无线信号固有的特征，比如低空间分辨率、在RF频率下穿墙所产生的视觉系统与无线系统感知情景的不同等问题。\",\"实验的设计环境选择在实验室周围作为收集数据的地点，收集到的数据集具有成千上万的人的室内活动，包括：行走、坐下、上楼、开门、交谈等行为，并且在不同实验环境下测试以保证该神经网络适用的场景可以进行一般化推广。实验手工标注了2000多个RGB图像用于测试视觉系统和无线系统，结果显示：在可见场景下，RF-Pose系统的平均精度可达到62.4，计算机视觉系统平均精度为68.8；在穿墙的场景下，RF-Pose系统的平均精度为58.1，此时，计算机视觉系统完全失效。\"]},\"1133\":{\"h\":\"计算机视觉模型\",\"t\":[\"对于RGB图片上的人类行为感知一般都基于两种常见的方法：自底向上和自顶向下的方法。自顶向下的方法首先检测出RGB图像中的人类，然后应用人类行为检测算法检测图片上面的人类，进而确定关键骨干点。自底向上的方法正与此相反，它首先检测图像上面的关键点 ，然后再应用处理算法检测关键点是否属于同一个目标。该论文的系统使用了自底向上的方法，并从无线信号中进行学习。\",\"为了建模需要，计算机视觉系统采用了交叉和多模拟态建模的方法，以便于得到多种可能存在的感知状态，特别是系统通过交叉拟态创建的teacher-student网络，可以将学习到的一种数据形态转化到令一种。以前的系统大多数都实现了分类级别的感知，本论文系统将感知更多的信息，并通过2D关键点图显示出来。\",\"在无线感知系统中，近期相关的研究大致可分为两类：第一类无线感知系统在很高的频率上工作，比如毫米波或者THz单位上，这种方式可以很精确地对于人体进行成像，但是无法穿墙；另一类使用的是低频率的无线信号，大概只有数GHz，所以可以穿过墙体或者障碍物追踪人，进一步，穿墙追踪可以分为两类：基于设备的和非基于设备的。基于设备的系统通过一些可穿戴设备来追踪目标，举例来说，可以通过一个人携带的手机来追踪他，由于定位是对于设备而不是对于人本身，一个人需要在身体的各个部分携带不同的无线感知设备以达到追踪的目的；相反的，非基于设备的系统不需要人携带任何感知设备就可以达到追踪、感知的目的，其工作原理是通过分析反射的无线信号来感知人体，缺点在于，非基于设备的系统的空间分辨率一般都比较低并且无法同时地定位身体的多个部位。很多相关的论文都没有实现对于人体姿态的检测，或者是规定了人需要移动的轨迹，并不同于本系统中的自由移动。\"]},\"1134\":{\"h\":\"RF信号的获得和性能\",\"t\":[\"论文中的基于RF信号的系统的原理在于发射低频率的信号并接收其反射信号，使用的技术包括FMCW和天线阵列技术。FMCW基于反射物的距离分布分离RF反射信号，反之，天线阵列通过其空间位置分离反射信号。在本论文中，引入了一种新的无线雷达，其特点在于既使用FMCW信号，又使用了两根天线作为天线阵列：垂直的和纵向的，因此，我们的输入数据以二维度热量图的形式表现，如图所示：\",\"对于RF信号而言，有三点很重要的不同于视觉系统的优点：\",\"穿墙的RF信号在频域上的空间分辨率很低，远远小于视觉数据。一般而言，其分辨率是几十厘米左右，并且受到FMCW的带宽的影响。特别值得一提的是，本系统的无线信号的分辨率可达到10cm，天线的水平和垂直分辨角度可以达到15度。\",\"人体在可穿墙的频率下会反射无线信号，RF信号反射是一种常见的物理现象，时常发生在波长远大于物体表面的粗糙度的时候。在系统的这种情况下，目标像一个反射体一样，但是不同于反射。系统采用的无线信号的波长大约在5cm左右，因此人类活动就类似于目标一样的反射体。\",\"无线信号拥有复杂的数据信息以得到不同的代表，两个维度以得到不同的视角信息。\",\"以上几点在实现系统的时候需要被深度考虑，无论是在实现人体感知还是神经网络的时候。\"]},\"1135\":{\"h\":\"方法\",\"t\":[\"如图所示，\",\"本系统的设计遵循teacher-student模型，图中最上面所示为teacher模型，提供交叉模型的监督方案。下面所示的为student模型，提供了RF信号的活动感知方案。\"]},\"1136\":{\"h\":\"交叉监督模型\",\"t\":[\"通过RF无线信号感知人类活动的一个巨大挑战在于缺少已标记的数据集，由于RF无线信号的直接可读性很差，所以通过观察RF波形去为人类的活动制作标签是一件几乎不可能的事情。我们通过设定计算机视觉模型预测图片中的人类活动很好地解决了这个挑战。我们设计了一个基于teacher-student的交叉监督模型，该模型可以将视觉信息通过同步技术和无线信号对应起来。\"]},\"1137\":{\"h\":\"关键点检测\",\"t\":[\"从RF信号作为输入，到得到人类活动的2D图像的过程就要依赖于student模型发挥其作用。像之前提到过的一样，人体可以反射出无线信号，但是，仅仅从单一的RF帧上面我们是无法判断出人类的姿态的，更加注意的一点就是之前提到的RF信号较低的空间分辨率。\",\"为了解决以上问题，我们设计的神经网络聚合了RF热量图中多张快照中的信息以便于它能够很好地处理不同的支干和动态地对身体的移动进行建模。我们采用帧序列作为输入，对于每个序列而言，神经网络将输出关键支干的置信图。\",\"我们希望神经网络在时间和空间上的传播都保持稳定的不变性，以便于推广到穿墙的应用场景上来，因此我们使用了时空卷积技术作为student模型的基础模块。\"]},\"1138\":{\"h\":\"实现细节\",\"t\":[\"在实现细节上，我们采用了100帧的编码RF无线信号（大约3.3秒）数据作为输入，RF编码神经网络使用10层的9x5x5的时空间卷积，在每层空间维度的步长为1x2x2，在每一层的后面使用了正则化和ReLU激活函数。\",\"在此之后，我们将时空间卷积层用极少的步长卷积编码人的动作，编码层一共有4层，每层卷积的步长为1x1/2x1/2，而最后一层则单独使用1x1/4x1/4的步长，在该层之后，依旧使用ReLU激活函数。训练时采用24大小的batch-size。\"]},\"1139\":{\"h\":\"New words\",\"t\":[\"Words\",\"Means\",\"spatio-temporal\",\"时空的\",\"imaginary\",\"虚构的，反real\"]},\"1140\":{\"c\":[\"Research\"]},\"1141\":{\"c\":[\"paper\",\"CSI\",\"CV\"]},\"1142\":{\"h\":\"CNN\",\"t\":[\"Filter\",\"使用卷积操作后可能会导致两个问题：\",\"图像的像素越来越小；\",\"边缘像素的丢失 为解决这个问题，可以使用padding操作，padding分两类：Valid（No Padding）和Same（output size = input size）一般来说，padding取值为奇数(3,5etc) parameter sharing and sparsity of connections\",\"Strided convolution\",\"stride = 2 的时候 (n+2p-f)/2 + 1\",\"Convolutions on RGB image\",\"2 filters = 2 features\",\"channel should be same between input & filter\",\"A example:\",\"import tensorflow as tf import numpy as np M = np.array([ [1, -1, 0], [-1, 2, 1], [0, 2, -2] ]) filter_weight = tf.get_variable('weights', [2, 2, 1, 1], initializer=tf.constant_initializer( [[1, -1], [0, 2]] )) biases = tf.get_variable('biases', [1], initializer=tf.constant_initializer(1)) M = np.array(M, dtype='float32') M = M.reshape(1, 3, 3, 1) x = tf.placeholder(tf.float32, [1, None, None, 1]) conv = tf.nn.conv2d(x, filter_weight, [1, 2, 2, 1], 'SAME') bias = tf.nn.bias_add(conv, biases) pool = tf.nn.avg_pool(x, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME') with tf.Session() as sess: tf.global_variables_initializer().run() convluted_M = sess.run(bias, feed_dict={x: M}) pooled_M = sess.run(pool, feed_dict={x: M}) print('convluted_M:\\\\n', convluted_M) print('pooled_M:\\\\n', pooled_M) \"]},\"1143\":{\"h\":\"CSI Tool\",\"t\":[\"These instructions are currently expected to work on Linux operating systems that are based on an upstream Linux kernel version between 3.2 (e.g. Ubuntu 12.04) and 4.2 (e.g. Ubuntu 14.04.4). The IWL5300 provides 802.11n channel state information in a format that reports the channel matrices for 30 subcarrier groups, which is about one group for every 2 subcarriers at 20 MHz or one in 4 at 40 MHz. Each channel matrix entry is a complex number, with signed 8-bit resolution each for the real and imaginary parts. It specifies the gain and phase of the signal path between a single transmit-receive antenna pair.\"]},\"1144\":{\"h\":\"1.1 预备工作\",\"t\":[\"硬件环境:\",\"intel 5300网卡（笔记本为mini-pcie接口，半高网卡、台式机为pcie接口，全高网卡）\",\"无线路由器，一般为市面上常见的商用路由器即可，不设置wifi密码\",\"软件环境\",\"软件环境的配置较为困难，一有不慎可能会前功尽弃，不要气馁，多尝试几次也是自身提升的过程！ 软件要求：\",\"Ubuntu >= 12.04LTS 操作系统镜像\",\"csi-tool.tar文件 (PS：这两个文件我已经上传到百度云，csi-tool.tar和Ubuntu-12.04-Desktop)\"]},\"1145\":{\"h\":\"1.2 配置CSI-Tool\",\"t\":[\"注意：系统安装完成后，查看一下内核信息，是否为：Linux Version 3.2.0.84-generic-pae，然后进行下一步\",\"可以参考官方文档：Linux 802.11n CSI Tool\",\"为了提高下载速度，首先需要更换软件源。进入Ubuntu桌面系统，CTRL++ALT+T打开命令行，在命令行输入：\",\"sudo vi /etc/apt/source.list\",\"将里面所有的内容替换成搜狐的软件源，具体可以参考apt-source上面说的。 接下来：\",\"sudo apt-get install gcc make linux-headers-$(uname -r) git-core #这一步是安装csitool所需要的一些依赖 sudo apt-get install iw echo iface wlan0 inet manual | sudo tee -a /etc/network/interfaces sudo restart network-manager #依次执行这三步 echo blacklist iwldvm | sudo tee -a /etc/modprobe.d/csitool.conf echo blacklist iwlwifi | sudo tee -a /etc/modprobe.d/csitool.conf #这两步是为了电脑在开机的时候不启动无线，不然有可能导致电脑无法正常开机 \",\"接下来找到我们之前下载好的csi-tool.tar文件，解压：\",\"tar -xvf csi-tool.tar\",\"得到zip文件，校验一下：\",\"MD5 (csi-tool.zip) = 9390f2d1a38d7e0cbd2d8115ea6dc05b\",\"然后继续解压得到的zip文件：\",\"unzip csi-tool.zip\",\"解压以后：\",\"#首先用cd命令进入到linux-80211n-csitool文件目录下 cd linux-80211n-csitool #对于特殊版本的内核： #CSITOOL_KERNEL_TAG=csitool-$(uname -r | cut -d . -f 1-2) #接下来编译 make -C /lib/modules/$(uname -r)/build M=$(pwd)/drivers/net/wireless/iwlwifi modules sudo make -C /lib/modules/$(uname -r)/build M=$(pwd)/drivers/net/wireless/iwlwifi INSTALL_MOD_DIR=updates \\\\ modules_install sudo depmod cd .. \",\"完成之后，会看到提示 Can't read private key 的提示，可以进行下一步： 在 supplyment 文件夹外面执行：\",\"for file in /lib/firmware/iwlwifi-5000-*.ucode; do sudo mv $file $file.orig; done sudo cp linux-80211n-csitool-supplementary/firmware/iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/ sudo ln -s iwlwifi-5000-2.ucode.sigcomm2010 /lib/firmware/iwlwifi-5000-2.ucode make -C linux-80211n-csitool-supplementary/netlink \",\"执行完以后基本上就完成了，接下来是测试步骤：\",\"sudo modprobe -r iwlwifi mac80211\\n#如果提示 \\\"FATAL: Module iwlwifi is in use.\\\" ，执行下一步\\nsudo modprobe -r iwldvm iwlwifi mac80211\\n\\n#接下来reload\\nsudo modprobe iwlwifi connector_log=0x1\\nsudo linux-80211n-csitool-supplementary/netlink/log_to_file csi.dat\\n\"]},\"1146\":{\"c\":[\"Research\"]},\"1147\":{\"c\":[\"paper\",\"CSI\"]},\"1148\":{\"h\":\"CVPR Paper\"},\"1149\":{\"h\":\"No Bounding Boxs\",\"t\":[\"该论文使用的损失函数正好适用于定位这边的模型，但是不要使用和论文一样的模型\",\"可以对图像中目标的数量进行估计，而不是像其他方法一样已知图像中目标的数量\"]},\"1150\":{\"h\":\"YOLO and DarkNet\",\"t\":[\"Face recognition based on YOLO, You Only Look Once: Unified, Real-Time Object Detection.\"]},\"1151\":{\"h\":\"1. Abstract\",\"t\":[\"自YOLO算法提出以来，至今已经发展到了v3，性能、集成性等都得到了极大的提升，用YOLO来实现人脸识别算法，其特点是模型训练参数较少，可移植并且实时性很高。目前为止，集成现有技术实现一个基于YOLO算法的人脸识别系统是一项很有挑战性的工作。近几年来，目标检测算法取得了很大的突破。比较流行的算法可以分为两类，一类是基于Region Proposal的R-CNN系算法（R-CNN，Fast R-CNN, Faster R-CNN），它们是two-stage的，需要先使用启发式方法（selective search）或者CNN网络（RPN）产生Region Proposal，然后再在Region Proposal上做分类与回归。另一类是Yolo，SSD这类one-stage算法，其仅仅使用一个CNN网络直接预测不同目标的类别与位置。第一类方法准确度高，但是速度慢，第二类算法速度快，但是准确性较低。本文将介绍Yolo算法，其全称是You Only Look Once: Unified, Real-Time Object Detection，You Only Look Once说的是只需要一次CNN运算，Unified指的是这是一个统一的框架，提供end-to-end的预测，而Real-Time体现是Yolo算法速度快。这里我们谈的是Yolo-v1版本算法，其性能差于后来的SSD算法的，但是Yolo后来也继续进行改进，产生了Yolo9000算法。本文主要讲述Yolo-v1算法的原理。\"]},\"1152\":{\"h\":\"2. YOLO\"},\"1153\":{\"h\":\"2.1 Sliding window\",\"t\":[\"The sliding window model is conceptually simple: independently classify all image patches as being object or non-object. Sliding window classification is the dominant paradigm in object detection and for one object category in particular -- faces -- it is one of the most noticeable successes of computer vision. For example, modern cameras and photo organization tools have prominent face detection capabilities.\",\"如引文所示，常见的目标检测算法一般基于滑动窗口模型，其思路是，将检测问题转化为了图像分类问题。其基本原理就是采用不同大小和窗口在整张图片上以一定的步长进行滑动，然后对这些窗口对应的区域做图像分类，以此实现对整张图片的检测。\",\"但该方法的缺点在于，要检测的目标大小规模是未知的，所以在实验中需要设置不同大小的窗口去滑动，并且还要选取合适的步长。这样的做法会产生很多的子区域经过分类器去做预测，需要很大的计算量，但是为了保证速度，分类器的设计不能过于复杂。可以想到的解决思路之一是减少要分类的子区域，这是R-CNN的一个改进策略，其采用了selective search方法来找到最有可能包含目标的子区域（Region Proposal）。\",\"对于CNN分类器而言，滑动窗口是非常耗时的，幸运的是，结合卷积运算的特点，我们可以使用CNN实现更高效的滑动窗口方法。有一种全卷积的方法，用卷积层代替了全连接层。overfeat算法的思路是，如果输入图片大小是16x16，经过一系列卷积操作，提取了2x2的特征图，这个2x2的图上每个元素都是和原图是一一对应的，相当于在原图上做大小为14x14的窗口滑动，且步长为2，共产生4个子区域，最终输出的通道数为4，可以看成4个类别的预测概率值，这样一次CNN计算就可以实现窗口滑动的所有子区域的分类预测。由于图片的空间位置信息的不变性，尽管卷积过程中图片大小减少，但是位置对应关系还是保存的。这个思路也被R-CNN借鉴，从而诞生了Fast R-CNN算法。\",\"上面尽管可以减少滑动窗口的计算量，但是只是针对一个固定大小与步长的窗口，这是远远不够的。Yolo算法很好的解决了这个问题，它不再是窗口滑动了，而是直接将原始图片分割成互不重合的小方块，然后通过卷积最后生产这样大小的特征图，基于上面的分析，可以认为特征图的每个元素也是对应原始图片的一个小方块，然后用每个元素来可以预测那些中心点在该小方格内的目标，这就是Yolo算法的朴素思想。\"]},\"1154\":{\"h\":\"2.2 YOLO\"},\"1155\":{\"h\":\"2.2.1 Unified Detection\",\"t\":[\"整体来看，Yolo算法采用一个单独的CNN模型实现end-to-end的目标检测，整个系统如图所示：首先将输入图片resize到448x448，然后送入CNN网络，最后处理网络预测结果得到检测的目标。相比R-CNN算法，其是一个统一的框架，其速度更快，而且Yolo的训练过程也是end-to-end的。\",\"具体来说，Yolo的CNN网络将输入的图片分割成 S∗S 网格(grid)，然后每个单元格负责去检测那些中心点落在该格子内的目标，如下图所示，可以看到狗这个目标的中心落在左下角一个单元格内，那么该单元格负责预测这个狗。每个单元格会预测B个边界框（bounding box）以及边界框的置信度（confidence score），置信度包含两个方面，一是这个边界框含有目标的可能性大小 Pr(object) ，二是这个边界框的准确度。\",\"当该边界框是背景时（即不包含目标）， Pr(object)=0 。\",\"当该边界框包含目标时， Pr(object)=1 。\",\"边界框的准确度可以用预测框与实际框（ground truth）的**IOU（intersection over union，交并比）**来表征。因此置信度可以定义为Pr(object)∗IOU。Yolo的置信度不仅仅是边界框是否含有目标的概率，而是两个因子的乘积，预测框的准确度也反映在该乘积中。\",\"边界框的大小与位置可以用4个值来表征：(x,y,h,w)，其中(x,y)是边界框的中心坐标，(h,w)是边界框的宽与高。中心坐标的预测值(x,y)是相对于每个单元格左上角坐标点的偏移值，单位是相对于单元格大小的，而边界框的w和h预测值是相对于整个图片的宽与高的比例，这样理论上4个元素的大小应该在[0,1]范围。最终，每个边界框的预测值实际上包含5个元素：(x,y,w,h,c)，其中前4个表征边界框的大小与位置，而最后一个值是置信度。\",\"每个单元格需要预测(B∗5+C)个值。如果将输入图片划分为S∗S网格，那么最终预测值为S∗S∗(B∗5+C)大小的张量。整个模型的预测值结构如下图所示。对于PASCALVOC数据，其共有20个类别，如果使用S=7,B=2,那么最终的预测结果就是7∗7∗30大小的张量。\"]},\"1156\":{\"h\":\"2.2.2 Design\",\"t\":[\"Yolo采用卷积网络来提取特征，然后使用全连接层来得到预测值。网络结构参考GooLeNet模型，包含24个卷积层和2个全连接层。对于卷积层，主要使用1x1卷积来做channle reduction，然后紧跟3x3卷积。对于卷积层和全连接层，采用Leaky ReLU激活函数：max(x,0)。最后一层``采用线性激活函数。除了上面这个结构，文章还提出了一个轻量级版本Fast Yolo，其仅使用9个卷积层，并且卷积层中使用更少的卷积核。\",\"在训练之前，先在ImageNet上进行了预训练，其预训练的分类模型采用图中前20个卷积层，然后添加一个average-pool层和全连接层。预训练之后，在预训练得到的20层卷积层之上加上随机初始化的4个卷积层和2个全连接层。由于检测任务一般需要更高清的图片，所以将网络的输入从224x224增加到了448x448。\",\"由于每个单元格预测多个边界框。但是其对应类别只有一个。那么在训练时，如果该单元格内确实存在目标，那么只选择与ground truth的IOU较大的那个边界框来负责预测该目标，而其它边界框认为不存在目标。这样设置的一个结果将会使一个单元格对应的边界框更加专业化，其可以分别适用不同大小，不同高宽比的目标，从而提升模型性能。大家可能会想如果一个单元格内存在多个目标怎么办，其实这时候Yolo算法就只能选择其中一个来训练，这也是Yolo算法的缺点之一。要注意的一点时，对于不存在对应目标的边界框，其误差项就是只有置信度，左标项误差是没法计算的。而只有当一个单元格内确实存在目标时，才计算分类误差项，否则该项也是无法计算的。\"]},\"1157\":{\"h\":\"2.2.3 NMS\",\"t\":[\"NMS即非极大值抑制算法（non maximum suppression, NMS），这个算法不单单是针对Yolo算法的，而是所有的检测算法中都会用到。NMS算法主要解决的是一个目标被多次检测的问题，如人脸检测的案例中，人脸可能被多次检测，但是其实预测只希望最后仅仅输出其中一个较好的预测框，那么可以采用NMS算法来实现这样的效果：首先从所有的检测框中找到置信度较大的那个框，然后挨个计算其与剩余框的IOU，如果其值大于一定阈值（重合度过高），那么就将该框剔除；然后对剩余的检测框重复上述过程，直到处理完所有的检测框。Yolo预测过程也需要用到NMS算法。\",\"对于Yolo的预测过程，首先不考虑batch，认为只是预测一张输入图片。根据前面的分析，最终的网络输出是7730，但是我们可以将其分割成三个部分：类别概率部分为[7,7,20]，置信度部分为[7,7,2,2]，而边界框部分为[7,7,2,4]。然后将前两项相乘可以得到类别置信度值为[7,7,2,20]，这里总共预测了7∗7∗2=98边界框。\",\"所有的准备数据已经得到了，对于第一种策略来得到检测框的结果，我认为这是最正常与自然的处理。首先，对于每个预测框根据类别置信度选取置信度较大的那个类别作为其预测标签，经过这层处理我们得到各个预测框的预测类别及对应的置信度值，其大小都是[7,7,2]。一般情况下，会设置置信度阈值，就是将置信度小于该阈值的box过滤掉，所以经过这层处理，剩余的是置信度比较高的预测框。最后再对这些预测框使用NMS算法，最后留下来的就是检测结果。一个值得注意的点是NMS是对所有预测框一视同仁，还是区分每个类别，分别使用NMS。Ng应该区分每个类别分别使用NMS，但是实际的应用中，还是同等对待所有的框。\",\"对于Yolo算法，其采用了另外一个不同的处理思路，与上段所述方法其区别就是先使用NMS，然后再确定各个box的类别。对于每个boxes，首先将小于置信度阈值的值归0，然后分类别地对置信度值采用NMS，这里NMS处理结果不是剔除，而是将其置信度值归为0。最后才是确定各个box的类别，当其置信度值不为0时才做出检测结果输出。我们需要慎重选择NMS算法，因为其对Yolo的性能是影响很大的。\"]},\"1158\":{\"h\":\"3. Face recognition\",\"t\":[\"该章主要介绍如何利用YOLO算法实现人脸检测的功能，主要为代码的解析和实验说明。\"]},\"1159\":{\"h\":\"3.1 Dataset\",\"t\":[\"YOLO本身使用的是VOC的数据集，但是我们的实验中需要使用自定义数据集来训练YOLO网络的话，就需要在VOC数据集基础上进行改造，按照VOC数据集的结构和格式来构建所需的数据集。在本实验中使用的数据集是CelebA大规模名人人脸标注数据集，CelebA数据集中的图片命名格式为统一的000001.jpg—202599.jpg，BoundingBox的信息在list_bbox_celeba.txt中保存。\",\"# list_bbox_celeba.txt line 1: The number of picture line 2: information line 3: < xxxxxx.jpg > < [x1] [y1] [width] [height] > \",\"其中x1​，y1​表示该BoundingBox左上角点的坐标，width，height分别表示该BoundingBox的宽度和高度。 在YOLO中，每张图片都需要一个对应的label文件，这个label文件应当是一个.txt文件，除后缀名外，它的文件名与该图片的文件名相同，其中的内容为< 类别代码> < $[x][y][width][height] $>，类别代码为从0开始的整数，它用于在.names文件中指明该BoundingBox中目标的类别。这里x = BoundingBox的中心点横坐标/图片宽度，y = BoundingBox的中心点纵坐标/图片高度，width = BoundingBox宽度/图片宽度，height = BoundingBox高度/图片高度。\",\"YOLO训练时需要：\",\" 指明训练图片绝对路径的train.txt文件和指明验证图片绝对路径的val.txt。 \",\" 所有图片对应的label文本文件，在voc数据集中位于VOC2007/labels文件夹内。 \",\" 训练数据配置文件voc.data \",\" 网络配置文件，这里用tiny-yolo.cfg \",\" 类别名列表文件voc.names \",\"其中1,2是由我们自己生成赖江celebA的数据集转化成VOC的数据集，而后对目录结构进行调整。\"]},\"1160\":{\"h\":\"3.2 Darknet\",\"t\":[\"Darknet是一个开源的神经网络框架，其使用C和CUDA。\"]},\"1161\":{\"h\":\"3.2.1 Installing Darknet\",\"t\":[\"git clone https://github.com/pjreddie/darknet.git cd darknet make \",\"执行上述代码安装，我们使用的是ubuntu 18.04LTS操作系统。\",\"wget https://pjreddie.com/media/files/yolov3.weights \",\"下载好提前训练好的参数，然后就可以运行detector了。\",\"./darknet detect cfg/yolov3.cfg yolov3.weights data/horses.jpg \",\"运行后会产生如下的输出：\",\"layer filters size input output 0 conv 32 3 x 3 / 1 416 x 416 x 3 -> 416 x 416 x 32 0.299 BFLOPs 1 conv 64 3 x 3 / 2 416 x 416 x 32 -> 208 x 208 x 64 1.595 BFLOPs ... 104 conv 256 3 x 3 / 1 52 x 52 x 128 -> 52 x 52 x 256 1.595 BFLOPs 105 conv 255 1 x 1 / 1 52 x 52 x 256 -> 52 x 52 x 255 0.353 BFLOPs 106 yolo Loading weights from yolov3.weights...Done! data/dog.jpg: Predicted in 21.323896 seconds. dog: 99% truck: 92% bicycle: 99% \",\"输出的预测图片为predictions.png:\"]},\"1162\":{\"h\":\"3.2.2 Face recognition\",\"t\":[\"该系统的设计步骤为：在上节下载好的darknet文件夹中进行一些文件和脚本的修改，以便于我们进行人脸识别。\",\"创建数据集文件；\",\"采集需要识别的头像，放入文件夹中；\",\"标注人名为类别名，基于labelImg，其中类别名称为人名，并使用脚本生成文件名称列表；\",\"修改script文件夹下面的voc_label.py文件，执行过后，会生成标注文件对应的txt文件；\",\"修改配置文件./cfg/voc.data中的内容\",\"classes= 4 train = /home/user/darknet/scripts/homework_train.txt //valid = /home/pjreddie/data/voc/homework_test.txt names = data/voc.names backup = /home/user/darknet/result \",\"修改``./data/voc.names`，将四个类别名称（人名）写进，原来的都删除掉。;\",\"修改网络参数的最后一层，在文件tiny-yolo-voc.cfg中，修改如下：\",\". . . [convolutional] size=1 stride=1 pad=1 filters=45 activation=linear [region] anchors = 1.08,1.19, 3.42,4.41, 6.63,11.38, 9.42,5.11, 16.62,10.52 bias_match=1 classes=4 coords=4 num=5 softmax=1 jitter=.2 rescore=1 object_scale=5 noobject_scale=1 class_scale=1 coord_scale=1 absolute=1 thresh = .6 random=1 \",\"训练网络\",\"./darknet detector train ./cfg/voc.data cfg/tiny-yolo-voc.cfg \",\"在漫长的等待过后，可以在 ./darknet/results生成最后的参数数据，其中tiny-yolo-voc_final.weights 是最后的参数，其他的都是过程参数。\",\"进行测试\",\"./darknet detector test cfg/voc.data cfg/tiny-yolo-voc.cfg results/tiny-yolo-voc_final.weights data/images.jpg \",\"至此，整个过程完成。\"]},\"1163\":{\"c\":[\"Research\"]},\"1164\":{\"c\":[\"paper\",\"CV\",\"deeplearning\"]},\"1165\":{\"h\":\"Information and Theory - An improved mOPE coding method\"},\"1166\":{\"h\":\"Abstrcat\",\"t\":[\"​ 隐私保护在各个领域都是一个很重要的研究课题，一般而言，隐私的威胁来自于两个方面，一是攻击者利用系统的漏洞或者非法权限访问数据库或云端，窃取隐私数据；二是数据系统内部具有权限的数据管理员对于隐私信息的探查和泄露。在云计算环境中，构建密文对敏感数据加密后存入云端数据库能有效防止以上两种威胁。\",\"​ 目前流行的加密方法称作保序加密(order preserving encryption, OPE)，相比于传统的加密方案，其优点在于：传统的加密方案将会破坏明文数据原有的顺序信息, 使得数据的查询变得十分困难， 保序加密是一种密文保持明文顺序的特殊加密方案。它既能保护用户数据机密性, 也能够实现密文数据高效查询，保序加密可以使得云服务器根据密文的顺序信息来得到明文顺序信息，进而保证涉及顺序信息的查询操作可以在密文空间高效进行。\",\"​ 本文作为信息论与编码的大作业，在阅读了相关论文之后，结合所学过的huffman编码以及信息熵等基本知识，针对OPE方法进行研究学习，以完成本课程的大作业要求。\",\"关键字：云计算；保序加密；完全二叉搜索树编码；\"]},\"1167\":{\"h\":\"Works\"},\"1168\":{\"h\":\".1 相关工作\",\"t\":[\"​ 2004年Agrawal在文献中提出了一种保序加密方案OPSE，很好解决了密文数据库系统的比较操作实现问题，加密后不影响系统的原有功能，并能直接操作加密数据，但是这种方法需要已知明文预计分布，且不能支持字符串等其他数据类型。其他研究例如复旦大学王正飞等提出的数值型保序加密方法，利用B+树建立索引，提升了效率但是实现难度过大。\",\"基于此，目前已知的mOPE方法基于平衡二叉树编码实现了保序加密，本文在此基础上进行改进，使用完全二叉搜索树，降低了mOPE构建平衡二叉树的开销。 \"]},\"1169\":{\"h\":\".2 mOPE\",\"t\":[\"mOPE加密方法的主要思想是对待加密数据按二叉搜索树节点位置编码，再结合任意确定加密算法加密数据，举例来说：假设用户想要对5个数值进行加密，(69, 32, 20, 10, 25)，最简单的保序编码方式是为以上5个数编号1-5，分别对应(5, 4, 2, 1, 3)。接着对于5个数用任意的DET确定加密算法加密，然后将密文与对应的编码存储，存储的密文除了大小关系之外，不会再云服务器上暴露任何信息。该简单方法的缺陷在于，如果用户请求新的数值，以70为例，无法找到与其共同编码的明文数据，故无法得知69对应的保序编码，这时候mOPE编码的优势就体现了出来，其主要思想在于，对待加密数据按照二叉搜索树进行编码。\",\"二叉搜索树最早出现于本科学习当中的数据结构课程中，其构造方法是：对于一个二叉树而言，左子树上的所有节点的值小于根节点，右子树的所有的节点的值大于根节点；二叉搜索树的子树也是一个二叉搜索树。如图所示，我们使用mOPE的方法对于上述密文进行编码，构造二叉搜索树T，命名为OPE_Tree-T。 从图中可以看出，该树为BST，每个节点对应表中的一个记录，举例而言，用户当前需要插入值为55的节点，首先请求插入，算法返回x93d12a，用户解密得到32，由于55>32，根据二叉搜索树的性质，用户将请求获取其右孩子节点，得到密文x27716c，解密得到69，69>55，则请求其左孩子，返回空节点，则在此处插入55的密文。在此过程中，除了节点代表的已知密文与待插入密文之间的大小关系之外，并不泄露其他任何的密文信息。\",\"上述过程中涉及到计算密文Enc(55)对应的OPE编码值，其编码算法是：\",\"对于图1中的路径进行二进制编码，0表示左孩子，1表示右孩子，类似于huffman编码，可以得到一个二进制串来表示根到某个节点的路径。例如，节点'69'的路径（path）为[1]，以此类推，将所有的节点进行二进制编码。\",\"将得到的所有二进制编码调整为相同的长度，一般在实际中取32bit或者64bit，本报告例子比较简单，故取3位加以说明。\",\"而后得到节点的OPE编码值：OPEEncoding=[path]10...0；也就是说，其构造的方法为，在path后一位补1，其他位全补充0,。举例而言，'69' 编码可以表示为 '[1]10'，'32' 的编码可以表示为 '[]100'，'10' 的编码可以表示为 '[00]1'。\",\"此种编码方式保存了密文的顺序。\",\"算法分析：\",\"对于插入理想顺序的二叉搜索树，其高度期望是树高度，故其操作复杂度为O(logn)，对于已构造的二叉搜索树而言，转化其为二叉平衡树。二叉平衡树要求其左右子树的高度差绝对值不超过1，并且其左右子树也是平衡二叉树，对于平衡二叉树而言，其高度一般都接近于期望高度，故查询和插入的效率得到了保证。\",\"在实践中，随着数据规模的大幅度增加，会存在树高增长过快的问题，其导致的结果就是OPE编码变长过快，故需要进行调整节点的步骤，常见的方法是使用AVL算法，其操作过程是对于平衡二叉搜索树插入新节点后，沿着插入路径从下往上回溯节点，检查每个节点为根的子树是否不再是平衡二叉树。如果不再平衡，就需要进行'AVL 旋转'， 旋转后的整棵二叉树又重新处于平衡状态。\",\"但是AVL算法设计的初衷仅仅考虑到了二叉搜索树的平衡，对于节点相对位置的改变并没有进行特殊的优化，这导致了树重新平衡之后，其某个节点可能移动位置，其path的值会改变，进而导致了已存在的OPE 编码的改变，故需要对AVL算法进行改进，以便于让其适应保序编码的要求。具体的代码实现在后面的章节可以查阅。\"]},\"1170\":{\"h\":\".3 改进的mOPE方法\",\"t\":[\"在上节对于mOPE算法分析中提到，为了使二叉搜索树保持平衡，需要进行平衡操作，而后还需要根据改进的AVL算法使得其编码的相对位置不发生改变，这两步操作的时间复杂度都是O(nlogn), 空间复杂度是O(n2)，对于数据量很大的编码集来说，其时间复杂度可以接受，但是空间复杂度过于庞大，特别是对于存储在云端服务器数据库上的数据，增加的开销成本是十分庞大的！因此，mOPE的方法需要加以改进，以便于适应具体的需求。\",\"我们对于理想情况下，初始化时存储完全二叉树，用户数据存储的复杂度一直为对数级，但是由于调整步骤的存在，使得二叉搜索树的构造起到了类似于一种 “临时编码” 的作用，故其编码策略可以进行调整。基于所学知识，本报告提出了一种改进的方法，其相比于mOPE方法的不同在于：\",\"采用普通的二叉搜索树，而取消采用平衡的搜索树；\",\"在插入新值后，自定义策略决策是否需要调整；\",\"最终的调整目的是得到一颗完全二叉搜索树。\",\"对于上图中的BST而言，我们根据二叉搜索树策略对其进行构造，但是其并非平衡的二叉搜索树。需要根据调整算法将其调整为完全二叉树：\",\"如图2所示，该二叉平衡树是根据上文普通二叉树调整而成，可以看出，其编码形式和图2差生了巨大的变化，那么是否可以证明其path改变之后依旧符合保序性？我们从构造过程开始说明该问题。\",\"对于n个OPE编码，将它们按照顺序进行标号(1,2...n)，按照该序号构造一颗完全二叉树，而后对该完全二叉树进行OPE编码，这样得到的新的OPE编码就保存了原有的顺序并可以取代后者，操作方法概括如下：\",\"将图2调整前的OPE_Table的编码值按照从小到大的顺序排列，存储于一张表temp中：\",\"encoding_old\",\"increment\",\"encoding_new\",\"1\",\"1\",\"2\",\"2\",\"2\",\"4\",\"4\",\"3\",\"8\",\"8\",\"4\",\"12\",\"16\",\"5\",\"16\",\"20\",\"6\",\"20\",\"24\",\"7\",\"24\",\"28\",\"8\",\"28\",\"其中increment的值可以构成完全二叉树，需要对其进行OPE编码。\",\"对于图4而言，1-8是存在的编码，虚线部分表示未涉及到的但是完全二叉树已构建的节点，其OPE编码的值已表示在图4的完全二叉树上。观察发现，小于\\\"3\\\"的节点序号，其OPE编码与其序号相等；而大于等于\\\"3\\\"的节点序号，其OPE编码对应于其中序遍历的序号。以\\\"4\\\"为例，encoding(4)=[01]10=6，其中序遍历(LRF)的值也是6。应用该结论，可以得到其新的编码值，填于上表中的'encoding_new'中。\",\"基于此，可以确定对于一个编码集的调整策略：分析两种算法可以发现，影响插入操作的编码策略的复杂度依赖于树的高度，改进的mOPE方法维护了树高与编码长度，但是省略了平衡二叉树的AVL算法步骤，极大降低了计算复杂度，取而代之的是只需要判断哪些节点需要调整。\",\"而调整的策略取决于例子中类似于\\\"3\\\"的值，其意义在于：对于已插入的不重复的n个条目，二叉树的最小高度：hmin​=logn+1：\",\"对于前hmin​条数据，其OPE编码值与自身相等；\",\"对于第hmin​+1条数据开始，触发调整算法，构造中序遍历，得到其编码值。\"]},\"1171\":{\"h\":\".4 算法效率分析\",\"t\":[\"mOPE算法与改进的mOPE算法其运算过程可分为两个步骤：第一是计算OPE编码并插入，第二是触发调整。\",\"而两种算法由于调整策略的不同，其编码结果不同，编码效率也不同。对于步骤一，其操作的时间复杂度都是对数级别O(logn)，而对于步骤二，mOPE算法需要调用平衡二叉树构造函数AVL，其时间复杂度为O(logn)，最坏条件下从根节点触发平衡操作，调整需要遍历所有节点，其复杂度为O(n)；对于改进的mOPE算法，其触发操作取决于当前插入路径大于完全二叉树的高度，其值越大，触发的概率越低，平均概率远低于AVL。\"]},\"1172\":{\"c\":[\"Research\"]},\"1173\":{\"c\":[\"paper\"]},\"1174\":{\"h\":\"LaTeX 用法和语法总结\",\"t\":[\"本文主要总结 LaTeX 的安装配置和一些使用方法。\"]},\"1175\":{\"h\":\"Tools and Enviroment Installation\"},\"1176\":{\"h\":\"Tex Tools\",\"t\":[\"西安电子科技大学毕业论文 LaTex 模板，链接\",\"下载 windows 客户端，链接-ctex-tsinghua, 在 windows 环境下强烈推荐这种方式。\",\"下载 TexLive 安装包，TexLive 官方网站\"]},\"1177\":{\"h\":\"Install TexLive of Windows\",\"t\":[\"考虑到在官网下载可能会速度比较慢，所以使用清华的软件源下载，地址为https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/\",\"选择一个版本下载完成后，打开其中的 install-tl-advanced.bat 文件，然后等待安装完成。\",\"安装完成后在 cmd 中输入 tex -version, 出现版本号则安装成功。\"]},\"1178\":{\"h\":\"Install TeXStdio\",\"t\":[\"由于官方的下载地址可能需要翻墙，所以使用第三方的地址进行下载：\",\"下载地址\",\"Options—> Configure Texstudio —> General—> Language—> zh_CN 设置中文。\",\"但是 TeXStdio 并不是很好用，所以一般还是使用 WinEdt。\"]},\"1179\":{\"h\":\"LaTex 项目结构\",\"t\":[\"LaTex 通过 .cls 和 .sty 来控制样式，类似于网页中的 css 一样，再经过 Tex 引擎渲染成 PDF。\",\"LaTex 有宏包的概念，引入方式为 \\\\usepackage{foo}, 可以类比于 C 中的 #include。\",\"对于 LaTex 中的常见类型总结如下：\",\"LaTeX模板常见文件类型\",\"功能简要介绍\",\".dtx\",\"Documented LaTeX sources，宏包重要部分\",\".ins\",\"installation，控制 TeX 从 .dtx 文件里释放宏包文件\",\".cfg\",\"config， 配置文件，可由上面两个文件生成\",\".sty\",\"style files，使用\\\\usepackage{…}命令进行加载\",\".cls\",\"classes files，类文件，使用\\\\documentclass{…}命令进行加载\",\".aux\",\"auxiliary， 辅助文件，不影响正常使用\",\".bst\",\"BibTeX style file，用来控制参考文献样式\",\"具体可以参考这里： 本文为CSDN博主「Mikchy」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/Mikchy/article/details/94448707\"]},\"1180\":{\"h\":\"LaTex Formual 公式\"},\"1181\":{\"h\":\"矩阵转置\",\"t\":[\"\\\\mathbf{h_1}^\\\\mathrm{T} \\\\mathbf{A}^\\\\mathrm{-T} \\\\mathbf{A}^\\\\mathrm{-1} = 0 \",\"效果如下：\",\"h1​TA−TA−1=0\"]},\"1182\":{\"h\":\"Tools\",\"t\":[\"可以使用软件Mathpix Snipping Tool将截图转化为 latex 公式，十分方便。\"]},\"1183\":{\"c\":[\"Research\"]},\"1184\":{\"c\":[\"paper\",\"latex\"]},\"1185\":{\"h\":\"MNIST 手写数字识别\",\"t\":[\"#mnist_inference.py import tensorflow as tf INPUT_NODE = 784 OUTPUT_NODE = 10 LAYER1_NODE = 500 def get_weight_variable(shape, regularizer): weights = tf.get_variable(\\\"weights\\\", shape, initializer=tf.truncated_normal_initializer(stddev=0.1)) if regularizer != None: tf.add_to_collection('losses', regularizer(weights)) return weights def inference(input_tensor, regularizer): with tf.variable_scope('layer1'): weights = get_weight_variable([INPUT_NODE, LAYER1_NODE], regularizer) biases = tf.get_variable(\\\"biases\\\", [LAYER1_NODE], initializer=tf.constant_initializer(0.0)) layer1 = tf.nn.relu(tf.matmul(input_tensor, weights) + biases) with tf.variable_scope('layer2'): weights = get_weight_variable([LAYER1_NODE, OUTPUT_NODE], regularizer) biases = tf.get_variable(\\\"biases\\\", [OUTPUT_NODE], initializer=tf.constant_initializer(0.0)) layer2 = tf.matmul(layer1, weights) + biases return layer2 \",\"#mnist_test.py import tensorflow as tf from tensorflow.examples.tutorials.mnist import input_data import mnist_inference import os BATCH_SIZE = 100 LEARNING_RATE_BASE = 0.8 LEARNING_RATE_DECAY = 0.99 REGULARIZATION_RATE = 0.0001 TRAINING_STEPS = 30000 MOVING_AVERAGE_DECAY = 0.99 MODEL_SAVE_PATH = \\\"MNIST_model/\\\" MODEL_NAME = \\\"mnist_model\\\" def train(mnist): x = tf.placeholder(tf.float32, [None, mnist_inference.INPUT_NODE], name='x-input') y_ = tf.placeholder(tf.float32, [None, mnist_inference.OUTPUT_NODE], name='y-input') regularizer = tf.contrib.layers.l2_regularizer(REGULARIZATION_RATE) y = mnist_inference.inference(x, regularizer) global_step = tf.Variable(0, trainable=False) variable_averages = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step) variables_averages_op = variable_averages.apply(tf.trainable_variables()) cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_, 1)) #当分类问题只有一个正确答案时，可以使用sparse_softmax_cross_entropy_with_logits函数来加速交叉熵的计算 cross_entropy_mean = tf.reduce_mean(cross_entropy) loss = cross_entropy_mean + tf.add_n(tf.get_collection('losses')) #总损失等于交叉熵损失和正则化损失的和 learning_rate = tf.train.exponential_decay( LEARNING_RATE_BASE, global_step, mnist.train.num_examples / BATCH_SIZE, LEARNING_RATE_DECAY, #过完所有的训练数据需要的迭代次数，dacay_steps和dacay_rate staircase=True) train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step) with tf.control_dependencies([train_step, variables_averages_op]): train_op = tf.no_op(name='train') saver = tf.train.Saver() with tf.Session() as sess: tf.global_variables_initializer().run() for i in range(TRAINING_STEPS): xs, ys = mnist.train.next_batch(BATCH_SIZE) _, loss_value, step = sess.run([train_op, loss, global_step], feed_dict={x: xs, y_: ys}) if i % 1000 == 0: print(\\\"After %d training step(s), loss on training batch is %g.\\\" % (step, loss_value)) saver.save(sess, os.path.join(MODEL_SAVE_PATH, MODEL_NAME), global_step=global_step) def main(argv=None): mnist = input_data.read_data_sets(\\\"../../../datasets/MNIST_data\\\", one_hot=True) train(mnist) if __name__ == '__main__': tf.app.run() \",\"mnist.train.next_batch(batch_size)\",\"可以方便使用随机梯度下降，从所有的训练数据中读取一小部分作为一个训练batch。 在损失函数中，每次计算一小部分训练数据的损失函数，这一小部分数据被称之为一个batch，每次使用一个batch可以大大减少收敛所需要的迭代次数，同时可以使收敛到的结果更加接近梯度下降的效果。 要很好地理解batch存在的意义，可以对比Full Batch Learning的思想；如果batch_size = 1，那么就变成了“在线学习”，在线学习难以达到收敛。所以，选择一个适当的batch size非常重要，过小可能导致不收敛，过大可能导致迭代速度过慢。\",\"对于滑动平均模型，这是一个使模型在测试数据上更robust的方法，在采用随机梯度下降算法训练神经网络时，使用滑动平均模型在很多应用中都可以在一定程度提高数据模型在测试数据上的表现。 要实现这个模型，可以使用TensorFlow提供的\",\"tf.train.ExponentialMovingAverage\",\"在实现时，需要提供一个衰减率(dacay)，用于控制模型的更新速度，一般dacay越大模型越趋于稳定，实际应用中一般会设置为一个很接近1的数字，使得模型可以在训练前期更新地更快。\"]},\"1186\":{\"h\":\"LeNet实现mnist\",\"t\":[\"import tensorflow as tf def get_weight_variable(shape, regularizer): weights = tf.get_variable( \\\"weights\\\", shape, initializer=tf.truncated_normal_initializer(stddev=0.1)) if regularizer != None: tf.add_to_collection('losses', regularizer(weights)) return weights def inference(input_tensor, train, regularizer): with tf.variable_scope('layer1-conv1'): conv1_weights = tf.get_variable(\\\"weight\\\", shape=[ 5, 5, 1, 32], initializer=tf.truncated_normal_initializer(stddev=1.0)) # why [5,5,1,32] there? [卷积核高度，卷积核宽度，通道数，卷积核数量] #conv2d:Computes a 2-D convolution given 4-D `input` and `filter` tensors. conv1_biases = tf.get_variable( \\\"bias\\\", [32], dtype=None, initializer=tf.constant_initializer(0.0)) conv1 = tf.nn.conv2d(input_tensor, conv1_weights, strides=[1, 1, 1, 1], padding='SAME') relu1 = tf.nn.relu(tf.nn.bias_add(conv1, conv1_biases)) #Unlike `tf.add`, the type of `bias` is allowed to differ from `value` in the case where both types are quantized. with tf.variable_scope('layer2-pool1'): pool1 = tf.nn.max_pool(relu1, ksize=[1, 2, 2, 1], strides=[ 1, 2, 2, 1], padding='SAME') with tf.variable_scope('layer3-conv2'): conv2_weights = tf.get_variable(\\\"weight\\\", shape=[5, 5, 32, 64]) # why [5,5,32,64] there conv2_biases = tf.get_variable( \\\"bias\\\", [64], dtype=None, initializer=tf.constant_initializer(0.0)) conv2 = tf.nn.conv2d(relu1, conv2_weights, strides=[ 1, 1, 1, 1], padding='SAME') relu2 = tf.nn.relu(tf.nn.bias_add(conv2, conv2_biases)) with tf.variable_scope('layer4-pool2'): pool2 = tf.nn.max_pool(relu2, ksize=[1, 2, 2, 1], strides=[ 1, 2, 2, 1], padding='SAME') pool_shape = pool2.get_shape().as_list() nodes = pool_shape[1] * pool_shape[2] * pool_shape[3] reshaped = tf.reshape(pool2, [pool_shape[0], nodes]) with tf.variable_scope('layer5-fc1'): fc1_weights = tf.get_variable(\\\"weights\\\", shape=[ nodes, 512], initializer=tf.truncated_normal_initializer(stddev=1.0)) # why there 512 if regularizer != None: tf.add_to_collection('losses', regularizer(fc1_weights)) fc1_biases = tf.get_variable( \\\"bias\\\", [512], dtype=None, initializer=tf.constant_initializer(0.1)) fc1 = tf.nn.relu(tf.matmul(reshaped, fc1_weights) + fc1_biases) # how to think about matmul if train: fc1 = tf.nn.dropout(fc1, 0.5) with tf.variable_scope('layer6-fc2'): fc2_weights = tf.get_variable( \\\"weights\\\", [512, 10], initializer=tf.truncated_normal_initializer(stddev=1.0)) if regularizer != None: tf.add_to_collection(\\\"losses\\\", regularizer(fc2_weights)) fc2_biases = tf.get_variable( \\\"bias\\\", shape=[10], initializer=tf.constant_initializer(0.1)) logit = tf.matmul(fc1, fc2_weights) + fc2_biases return logit \"]},\"1187\":{\"c\":[\"Research\"]},\"1188\":{\"c\":[\"paper\",\"deeplearning\"]},\"1189\":{\"h\":\"OpenCV\",\"t\":[\"OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software library. OpenCV was built to provide a common infrastructure for computer vision applications and to accelerate the use of machine perception in the commercial products. Being a BSD-licensed product, OpenCV makes it easy for businesses to utilize and modify the code.\",\"To use the camera to find the frame face\",\"video_capture = cv2.VideoCapture(0) process_this_frame = True while True: # Grab a single frame of video ret, frame = video_capture.read() # Resize frame of video to 1/4 size for faster face recognition processing small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25) # Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses) rgb_small_frame = small_frame[:, :, ::-1] # Only process every other frame of video to save time if process_this_frame: # Find all the faces and face encodings in the current frame of video f_face_locations = face_recognition.face_locations(rgb_small_frame) f_face_encodings = face_recognition.face_encodings( rgb_small_frame, f_face_locations) # print(f_face_encodings) for f_face_encoding in f_face_encodings: match = face_recognition.compare_faces(face_encodings, f_face_encoding, 0.4) print(match) for (i, name) in enumerate(face_correct_names): if match[i]: print(face_correct_names[i]) process_this_frame = not process_this_frame cv2.imshow('Video2', frame) # Hit 'q' on the keyboard to quit! if cv2.waitKey(1) & 0xFF == ord('q'): break video_capture.release() cv2.destroyAllWindows() \"]},\"1190\":{\"h\":\"Basic\"},\"1191\":{\"h\":\"Load and Display an Image\",\"t\":[\"Then create a Mat object that will store the data of the loaded image.\"]},\"1192\":{\"h\":\"imread()\",\"t\":[\"First argument is filename\",\"Second argument specifies the format:\",\"IMREAD_UNCHANGED (<0) loads the image as is (including the alpha channel if present)\",\"IMREAD_GRAYSCALE ( 0) loads the image as an intensity one\",\"IMREAD_COLOR (>0) loads the image in the RGB format\"]},\"1193\":{\"h\":\"namedWindow()\",\"t\":[\"WINDOW_AUTOSIZE\",\"WINDOW_NORMAL\"]},\"1194\":{\"h\":\"Modify and Save an Image\"},\"1195\":{\"h\":\"cvtColor()\",\"t\":[\"cvtColor( image, gray_image, COLOR_BGR2GRAY );\"]},\"1196\":{\"h\":\"imwrite()\",\"t\":[\"imwrite( \\\"../../images/Gray_Image.jpg\\\", gray_image );\",\"Save your transformed image in a file on disk (using cv::imwrite )\",\"Write the Mat gray_image to a new file.\"]},\"1197\":{\"h\":\"Core Module\"},\"1198\":{\"h\":\"Mat\",\"t\":[\"How OpenCV stores and handles images?\",\"Mat\",\"Mat is that you no longer need to manually allocate its memory and release it as soon as you do not need it\",\"uchar* cv::Mat::ptr(int i): Returns a pointer to the specified matrix row.\"]},\"1199\":{\"c\":[\"Research\"]},\"1200\":{\"c\":[\"paper\",\"CV\"]},\"1201\":{\"h\":\"Splicer\",\"t\":[\"The paper named Precise Power Delay Profiling with Commodity Wi-Fi is written by Yaxiong Xie, Mo Li`s student in Nayang Technological University. This note is a recap in a easy-to-understand manner.\",\"Before we start the text, let us consider the following questions:\",\"What is power delay profile(PDP) ?\",\"What is the relationship between bandwidth and resolution?\",\"How do we get higher resolution about PDP on commodity WI-FI?\",\"What is the meaning of the name \\\"Splicer\\\"?\",\"Where is the challenge of splicing bandwidth?\"]},\"1202\":{\"h\":\"Power Delay Profile\",\"t\":[\"Power delay profiles(PDP) gives the intensity of a signal received through a multipath channel as a function of time delay. The time delay is the difference in travel time between multipath arrivals. The abscissa is in units of time and the ordinate is usually in decibels. It is easily measured empirically and can be used to extract certain channel's parameters and characterize multipath channel features, which are widely used in motion- or localization-based applications, more detail math principles see Power Delay Profile.\",\"The paper classified that it is easy to get PDP from the CSI traces collected from commodity Wi-Fi devices(iFFT). More specifically, a power delay profile can be measured by directly detecting multipath signals with different arrival times in the time domain, the Channel State Information(CSI) is a good way to describe the channel, which however can be obtained easily from commodity Wi-Fi network interface cards, e.g. Atheors 9300, a NIC that our team used.\"]},\"1203\":{\"h\":\"Bandwidth and Resolution\",\"t\":[\"Power delay profile has it resolution, which we can see form the picture, the time resolution(τ) of the derived PDP from CSI is limited by the bandwidth of the transmitted signal, in mathematic theory, is △τ=B1​, that's means the resolution is decided by the signal bandwidth, wider bandwidth leads to higher resolution.\",\"However, channel bandwidth of commodity Wi-Fi is regulated by the 802.11 protocol, 20MHz in 802.11 a/g and 40MHz in 802.11n. Take 802.11n as an example, the power delay profile resolution is up to 50ns, which leads to 15m resolution in measuring the multipath lengths.\",\"According to this paper, the Splicer can reducing the errors to be less than 2m. How dose it reduce the error and increase resolution using CSI ?\"]},\"1204\":{\"h\":\"Splicer\",\"t\":[\"Under the rules that although the width of each individual Wi-Fi band is limited, the total bandwidth is wide, especially the CSI measured from these individual Wi-Fi channels can be spliced to derive a finer power delay profile with much higher time resolution.\",\"The trouble is, the splicing of CSI may result much sever errors. After locating the error sources, there are two main CSI measurement errors should be eliminated:\",\"CSI amplitude error\",\"CSI phase error\",\"According the paper, after eliminating the two errors, we could get the spliced CSI, from which power delay profile derived.\"]},\"1205\":{\"h\":\"Error correction\"},\"1206\":{\"h\":\"Sources of CSI measurement errors\",\"t\":[\"According to the wireless processing in the 802.11 NIC and the OFDM[1], the CSIs measured by NICs mainly introduce the following errors:\",\"SFO(sampling frequency offset)\",\"CFO(central frequency offset)\",\"PBD(packet boundary detection)\",\"In mathematic theory, we express the equation:\",\"where λb​ and λo​ are phase errors introduced by the packet boundary detection uncertainty and the sampling frequency offset, respectively, β is the phase error caused by the central frequency offset.\"]},\"1207\":{\"h\":\"Amplitude error correction\",\"t\":[\"In this figure, we can see that the two CSI traces from the same Wi-Fi band with an amplitude offset of 7dB. That means although two derived power delay profile have different power levels, the average difference is stable and follows same shapes.\"]},\"1208\":{\"h\":\"Phase error correction\",\"t\":[\"λb​ : is caused by the time shift, to correct it, the paper leverage an observation that the time shift varies in each packet reception but follows a Gaussian distribution with zero mean, in other words, it can be remove by averaging over the measured CSI phase.\",\"λo​: the SFO, this paper's solution is not the best way, see my another blog.\",\"β: the CFO, for individual Wi-Fi bands, phase offset has no impact on derived power delay profile.\"]},\"1209\":{\"h\":\"Conclusion\",\"t\":[\"This paper introduced a system named \\\"Splicer\\\" that can driver precise power delay profile on commodity Wi-Fi devices, by using it, we can get the wider Wi-Fi band, that means higher resolution.\",\"CYushi Shen, Ed Martin. ezhannel Estimation in OFDM Systems. Freescale Semiconductor, Inc. 2006 ↩︎\"]},\"1210\":{\"c\":[\"Research\"]},\"1211\":{\"c\":[\"paper\",\"CSI\"]},\"1212\":{\"h\":\"TensorFlow 入门\",\"t\":[\"Tensorflow中一些简单但是容易忘记的：\",\"import tensorflow as tf a = tf.matmul(x,w1) #用来表示矩阵的乘法操作 weight = tf.Variable(tf.random_normal([2,3],stddev = 2)) bias = tf.Variable(tf.zeros([3])) #偏置项 \",\"tf.Variable为初始化变量的操作，tf.random_normal指定了一个2*3的矩阵，元素均值为0，标准差为2，并且，符合正态分布，其他的可以参考tensorflow随机数生成函数\",\"接下来这段代码实现神经网络的前向传播过程\",\"import tensorflow as tf w1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1)) w2 = tf.Variable(tf.random_normal([3,1],stddev =1,seed=1)) x = tf.constant([[0.7,0.9]]) a = tf.matmul(x,w1) y = tf.matmul(a,w2) sess = tf.Session() sess.run(w1.initializer) sess.run(w2.initializer) print(sess.run(y)) sess.close() \",\"关于placeholder 一般而言，我们需要使用常量：\",\"x = tf.constant([[0.7,0.9]])\",\"但是这样明显加大了tensorflow的计算量，所以引入了placeholder，这时候我们只需要将数据传入计算图，下面是一个例子：\",\"x = tf.placeholder(tf.float32,shape = (1,2), name = \\\"input\\\")\",\"其中的shape属性可以不指定，因为数据的维度信息可以根据提供的数据推导得出，但是确定的维度的给出可以降低出错的概论。下面的代码为placeholder实现前向传播算法：\",\"import tensorflow as tf w1 = tf.Variable(tf.random_normal([2,3], stddev=1.0)) w2 = tf.Variable(tf.random_normal([3,1],stddev=1.0)) x = tf.placeholder(tf.float32,shape=(1,2),name = \\\"input\\\") a = tf.matmul(x,w1) y = tf.matmul(a,w2) sess = tf.Session() init_op = tf.global_variables_initializer() sess.run(init_op) # print(sess.run(y)) print(sess.run(y,feed_dict={x:[[0.7,0.9]]})) \",\"需要注意的是被注释的那行代码# print(sess.run(y))，如果运行的话，解释器会报告一个错误，这是因为我们需要提供一个feed_dict来指定x的取值。 如果我们需要多个样例的传播结果，只需要：\",\"x = tf.placeholder(tf.float32,shape=(3,2),name=\\\"input\\\") #3个\",\"然后给出三组数据即可：\",\"sess.run(y,feed_dict={x:[[0.7,0.9],[0.1,0.4],[0.5,0.8]]})\",\"而后我们定义loss函数来刻画预测值和真实值之间的差距，然后通过反向传播算法来调整神经网络的取值从而缩小差距\",\"cross_entropy = -tf.reduce_mean(y_ * tf.log(tf.clip_by_value(y,1e-10,1.0))) train_step = tf.train.AdamOptimizer(learning_rate=0.001).minimize(cross_entropy) \",\"cross_entropy定义了真实值和预测值之间的交叉熵。 具体而言，交叉熵刚开始的意义是刻画了两个概论分布之间的距离，是分类问题中使用比较广的一种损失函数。在代码中的含义就是y`表示正确结果，y代表预测结果,并且将张量中的数值限制在1E-10~1.0之间，以避免一些运算错误 如果与softmax一起使用的话，tensorflow对这两个功能进行了统一封装，调用\",\"cross_entropy=tf.nn.softmax_cross_entropy_with_logits(y,y_)\",\"下面是训练过程开始的代码：\",\"with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) print(sess.run(w1)) print(sess.run(w2)) STEPS = 5000 for i in range(STEPS): start = (i * batch_size) % dataset_size end = min(start + batch_size, dataset_size) sess.run(train_step, feed_dict={x: X[start:end], y_: Y[start:end]}) if i % 1000 == 0: total_cross_entropy = sess.run(cross_entropy,feed_dict={x:X,y_:Y}) print(\\\"After %d training steps,cross entropy is %g\\\"%(i,total_cross_entropy)) print(sess.run(w1)) print(sess.run(w2)) \",\"训练循环了5000次，可以观察到交叉熵的值是越来越小的，这表明预测的结果和真实值的差距越来越小 最后的两行输出表示训练之后神经网络的值\",\"**总结一下，训练神经网络的过程可以分为以下三个步骤：\",\"定义网络的结构和前向传播的输出\",\"定义损失函数和选择反向传播优化的算法\",\"生成会话并且在训练数据上反复运行反向传播优化算法**\",\"有的时候需要自定义损失函数：\",\"import tensorflow as tf from numpy.random import RandomState batch_size = 8 x = tf.placeholder(tf.float32,shape = (None,2),name = 'x-input') y_ = tf.placeholder(tf.float32,shape = (None,1),name = 'y-input') w1 = tf.Variable(tf.random_normal([2,1],stddev=1.0,seed = 1.0)) y = tf.matmul(x,w1) loss_less = 10 loss_more = 1 loss = tf.reduce_mean(tf.where(tf.greater(y,y_),(y-y_)*loss_more,(y_-y)*loss_less)) train_step = tf.train.AdamOptimizer(learning_rate=0.001).minimize(loss) rdm = RandomState(1) dataset_size = 128 X = rdm.rand(dataset_size,2) Y = [[x1+x2+rdm.rand()/10.0-0.05] for (x1,x2) in X] with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) Steps = 5000 for i in range(Steps): start = (i*batch_size) % dataset_size end = min(start+batch_size,dataset_size) sess.run(train_step,feed_dict={x:X[start:end] , y_:Y[start:end]}) print(sess.run(w1)) \",\"以上自定义了一个损失函数，实际值和预测值之间存在的差值分配不用的系数，我们也可以使用均方误差(MSE)：\",\"loss = tf.reduce_mean(tf.square(y_-y))\",\"通过比较输出的结果可以看出，不同的损失函数会对模型产生重要影响。\",\"在优化参数的时候，梯度下降法是最常用的神经网络优化算法，具体而言，对于一个优化算法而言，第一步随机产生一个参数的初始值，然后通过梯度和学习率来更新参数的取值。 梯度下降算法的两个缺陷：第一是可能得到局部最优的结果，第二是计算时间太长，因为要计算所有训练数据的损失函数是非常耗时间的，所以就可以使用随机梯度下降算法，具体而言，就是在每一轮的迭代中，随机优化某一条训练数据上的损失函数，但是随机梯度下降法有的时候甚至无法达到局部最优，所以一般采用每次计算一小部分训练数据的损失函数的方法，这一小部分数据称为一个batch。\",\"对于learning_rate，常用的是指数衰减法\",\"global_step = tf.Variable(0) learning_rate = tf.train.exponential_decay(0.001,global_step, 100 , 0.96 ,staircase=True) train_step = tf.train.AdamOptimizer(learning_rate).minimize(loss) \",\"dacay_steps代表了完整的使用一遍训练数据所需要的迭代轮数（总训练样本数除以每一个batch的训练样本数），staircase的值为True时，global_step/decay_steps会被转化成整数。上面各个参数的含义是每训练100轮后学习率乘以0.96。经验有助于设置好学习率、衰减系数和衰减速度。\",\"batch_size = n x = tf.placeholder(dtype,shape = (batch_size,2), name) y_ = tf.placeholder(dtype,shape = (batch_size,1), name) loss = .. train_step = tf.train.AdamOptimizer(learning_rate).minimize(loss) with .. : for _ in range(STEPS): current_X,surrent_Y = ... sess.run(train_step,feed_sict = {x:current_X,y_:current_Y}) \",\"以上代码概括了一般神经网络的训练大致遵循的过程。\"]},\"1213\":{\"c\":[\"Research\"]},\"1214\":{\"c\":[\"paper\",\"CV\",\"deeplearning\"]},\"1215\":{\"h\":\"Tensorflow I/O\"},\"1216\":{\"h\":\"Data Download and Extract\",\"t\":[\"Taking cifar10 as an example,\",\"DATA_URL = 'https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz' filename = DATA_URL.split('/')[-1] filepath = os.path.join(path, filename) #output: path\\\\filename \",\"A programming skill can be use to display the download progress bar:\",\"def _progress(count, block_size, total_size): sys.stdout.write('\\\\r>> Downloading %s %.1%%' % (filename, 100.0 * count * block_size / total_size)) sys.stdout.flush() \",\"In this code, the function write() is just same as function print(), but it can be better used in file status print.\",\"If you want to download models form internet, some URL API can be used:\",\"from six.moves import urllib files, header = urllib.request.urlretrieve(DATA_URL, filepath, _progress) \",\"Then show the file info such as file size:\",\"statinfo = os.stat(files) print('Successfully download', files, statinfo.st_size, 'bytes.') \",\"If you download a compressed file( the general is tar.gz file) and want to decompress it:\",\"import tarfile tarfile.open(files, 'r:gz').extractall(your_file_path) \",\"Now, the file was successfully download and extracted.\"]},\"1217\":{\"h\":\"Tensorflow Persistent Storage\",\"t\":[\"import tensorflow as tf v = tf.Variable(0,dtype = tf.float32,name='v') for variables in tf.global_variables(): print(variables.name) ema = tf.train.ExponentialMovingAverage(0.99) maintain_average_op = ema.apply(tf.global_variables()) for variables in tf.global_variables(): print(variables.name) saver = tf.train.Saver() with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) sess.run(tf.assign(v,10)) sess.run(maintain_average_op) saver.save(sess,\\\"model/model.ckpt\\\") print(sess.run([v,ema.average(v)])) \",\"then use it:\",\"import tensorflow as tf v = tf.Variable(0,dtype = tf.float32,name = 'v') ema = tf.train.ExponentialMovingAverage(0.99) print(ema.variables_to_restore()) #output: {u'v/ExponentialMovingAverage': <tf.Variable 'v:0' shape=() dtype=float32_ref>} saver = tf.train.Saver(ema.variables_to_restore()) with tf.Session() as sess: saver.restore(sess,\\\"model/model.ckpt\\\") print(sess.run(v)) \",\"if want to read checkpoint:\",\"import tensorflow as tf reader = tf.train.NewCheckpointReader('model/model.ckpt') all_variables = reader.get_variable_to_shape_map() for variable_name in all_variables: print(variable_name,all_variables[variable_name]) print(reader.get_tensor(\\\"v\\\")) \"]},\"1218\":{\"h\":\"Command Parameter\"},\"1219\":{\"h\":\"Argparse\",\"t\":[\"In python, argparse is an useful function addition to call the command parameter. In the project of deep learning, we can use it to adjust parameter easily. To use it:\",\"import argparse import os import sys parser = argparse.ArgumentParser() # Basic model parameters. parser.add_argument('--batch_size', type=int, default=100, help='Number of images to process in a batch') parser.add_argument('--data_dir', type=str, default='./mnist_data', help='Path to the MNIST data directory.') parser.add_argument('--model_dir', type=str, default='./mnist_model', help='The directory where the model will be stored.') parser.add_argument('--train_epochs', type=int, default=40, help='Number of epochs to train.') parser.add_argument( '--data_format', type=str, default=None, choices=['channels_first', 'channels_last'], help='A flag to override the data format used in the model. channels_first ' 'provides a performance boost on GPU but is not always compatible ' 'with CPU. If left unspecified, the data format will be chosen ' 'automatically based on whether TensorFlow was built for CPU or GPU.') \",\"First, we use the import to initialize, then we call the argparse.ArgumentParser() to generate a parser, the is the command parameter, it is really a good trick for coding.\",\"###tf.app.flags\",\"The another way is to use tf.app.flags API:\",\"tf.app.flags.DEFINE_string( 'dataset_name', None, 'The name of the dataset to convert, one of \\\"cifar10\\\", \\\"flowers\\\", \\\"mnist\\\".') tf.app.flags.DEFINE_string( 'dataset_dir', None, 'The directory where the output TFRecords and temporary files are saved.') \",\"What you can also use is DEFINE_string, DEFINE_boolean, DEFINE_integer, DEFINE_float, and then make a judgement and use it:\",\"FLAGS = tf.app.flags.FLAGS def main(_): if not FLAGS.dataset_name: raise ValueError('You must supply the dataset name with --dataset_name') if not FLAGS.dataset_dir: raise ValueError('You must supply the dataset directory with --dataset_dir') if FLAGS.dataset_name == 'cifar10': download_and_convert_cifar10.run(FLAGS.dataset_dir) elif FLAGS.dataset_name == 'flowers': download_and_convert_flowers.run(FLAGS.dataset_dir) elif FLAGS.dataset_name == 'mnist': download_and_convert_mnist.run(FLAGS.dataset_dir) else: raise ValueError( 'dataset_name [%s] was not recognized.' % FLAGS.dataset_name) if __name__ == '__main__': tf.app.run() \"]},\"1220\":{\"h\":\"File IO\"},\"1221\":{\"h\":\"Arrays\",\"t\":[\"If the output is numbers, it is better to use array to input and output, which is more effective than a list:\",\"from array import array from random import random floats_file = array('d', (random() for i in range(10**7))) fp = open('floats_file.bin', 'wb') # new file 'floats.bin' with size 0 bytes floats_file.tofile(fp) #log to file, size is 79.2M fp.close() floats_file2 = array('d') fp = open('floats_file', 'rb') floats_file2.fromfile(fp, 10**7) #remeber there are two parameters fp.close() # floats_file == floats_file2 \",\"The array.tofile and array.fromfile are very fast (if want to load millions double-precision floats from a binary file)\"]},\"1222\":{\"c\":[\"Research\"]},\"1223\":{\"c\":[\"paper\",\"CV\",\"deeplearning\"]},\"1224\":{\"h\":\"Bat Script\"},\"1225\":{\"h\":\"Basic\"},\"1226\":{\"h\":\"重命名(Move)文件夹\",\"t\":[\"如果想按照日期来重命名文件夹的话，可以使用如下的方式：\",\"for /f %%a in ('powershell -Command \\\"Get-Date -format yyyyMMdd_HHmm_ss\\\"') do set datetime=%%a move anr\\\\anr anr\\\\anr_%datetime% \",\"注意使用 move， 使用 ren 会失败。\"]},\"1227\":{\"h\":\"Usage: Android\",\"t\":[\"这个章节介绍使用 bat 脚本来进行安卓 adb 的一些操作，主要是一些实例，方便日后需要的时候进行查阅。\"]},\"1228\":{\"h\":\"滑动屏幕\",\"t\":[\"@echo off rem Set the duration of the slide in milliseconds set duration=1000 rem Get the width and height of the screen for /f \\\"tokens=2 delims=:\\\" %%a in ('adb shell wm size') do set screen_size=%%a set /a width=%screen_size:~0,4% set /a height=%screen_size:~5,4% rem Calculate the x and y coordinates for the start and end points of the slide set /a x1=%width% / 2 set /a x2=%x1% set /a y1=%height% / 4 set /a y2=%height% / 4 * 3 rem Perform the slide 300 times set count=0 :loop adb shell input swipe %x1% %y1% %x2% %y2% %duration% set /a count=%count% + 1 if %count% equ 300 goto end goto loop :end \"]},\"1229\":{\"h\":\"Usage: With Python\"},\"1230\":{\"h\":\"在 bat 中使用 Python 脚本\",\"t\":[\"@todo\"]},\"1231\":{\"h\":\"for loop\",\"t\":[\"for /f \\\"tokens=3\\\" %%a in ('adb -s %serial_no% shell \\\"ps -T -p %pid% | grep HeapTaskDaemon\\\"') do set tid=%%a \",\"在上面的命令中，我们使用了 for 循环来检验命令输出，并设置给变量。token=3 表示的含义是：以空格分隔的第 3 个变量。\",\"如果我们需要使用多个变量，那么可以这么写：\",\"for /f \\\"tokens=3,4 delims=,\\\" %%a in ('adb -s %serial_no% shell \\\"ps -T -p %pid% | grep HeapTaskDaemon\\\"') do ( set tid=%%a set tmp=%%b ) \",\"在这个例子中，我们设置了两个变量，并且使用了分隔符，默认的分隔符是空格，可以加以注意。\",\"如果想使用普通的 foor-loop, 则可以如下所示：\",\"@echo off for /l %%i in (1,1,5) do ( echo %%i ) \"]},\"1232\":{\"h\":\"timeout\",\"t\":[\"如果我们想防止脚本被意外的按键终结，可以增加以下的 timeout 命令：\",\"timeout /nobreak /t 5 > nul \",\"如果说需要按任意按键跳过的，则可以如下实现：\",\"TIMEOUT /T 90\\n\"]},\"1233\":{\"c\":[\"Tools\"]},\"1234\":{\"c\":[\"script\"]},\"1235\":{\"h\":\"Git\"},\"1236\":{\"h\":\"GitHub Host 加速\",\"t\":[\"下载软件：SwitchHosts\",\"添加一条规则：\",\"SwitchHosts Rule\",\"方案名：GitHub（可以自行命名）\",\"类型：远程\",\"URL 地址：https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts\",\"自动更新：1个小时\"]},\"1237\":{\"h\":\"SSH Server\",\"t\":[\"Clone form server file using SSH:\",\"git clone ssh://root@120.78.71.220:22/~/data \",\"Connect using ssh:\",\"ssh root@174.137.62.75 \",\"ssh key:\",\"ssh-keygen \"]},\"1238\":{\"h\":\"repo\"},\"1239\":{\"h\":\"Workflow Usage\",\"t\":[\"repo 的工作流可以参考这个文档(注意有中文版，可以切换语言查看)[1]，其流程大概可以总结为以下步骤：\",\"repo start git add . git commit . repo upload \",\"其中几个 repo 专有的命令如下表格所示[^2]：\",\"command\",\"description\",\"example\",\"repo init\",\"Initializes a new client.\",\"repo sync\",\"Syncs the client to the repositories.\",\"repo start\",\"Starts a new branch.\",\"repo status\",\"Shows the status of the current branch.\",\"repo upload\",\"Uploads changes to the review server.\",\"以下是使用的例子（简单的 workflow, 后文会详细研究每一个命令）：\",\"repo sync PROJECT0 PROJECT1 ... PROJECTN repo start BRANCH_NAME . repo status . \",\"如果我们要给特定的项目创建分支，则：\",\"repo start BRANCH_NAME PROJECT_NAME \",\"切换分支还是使用 checkout 命令，但是查看分支可以使用\",\"git branch repo branches \",\"如果要查看修改，则使用：\",\"repo diff # or cd ~/WORKING_DIRECTORY/PROJECT git diff --cached \",\"修改完后，我们同步最新改动并提交我们的改动：\",\"repo sync repo upload \"]},\"1240\":{\"h\":\"repo init\",\"t\":[\"我们需要一个 xml 文件来制定 init 的，一般而言这个 xml 文件在远程，可以使用 -u 参数进行指定，官方对此的使用说明如下：\",\"repo init -u url [options] \",\"在当前目录中安装 Repo。这样会创建一个 .repo/ 目录，其中包含存放 Repo 源代码和标准 Android 清单文件的 Git 代码库。\",\"如果我们要重新 init, 则删除这个 .repo/ 目录即可。\",\"需要注意的是，这个 .repo/ 目录是影响到所有得子目录的，这个和 git 的原理类似。\",\"选项：\",\"-u: 指定从中检索清单代码库的网址。常见清单位于 https://android.googlesource.com/platform/manifest。\",\"-m: 选择代码库中的清单文件。如果未选择清单名称，则默认为 default.xml。\",\"-b：指定修订版本，即特定的 manifest-branch。\",\"提示\",\"注意：对于所有剩余的 Repo 命令，当前的工作目录必须是 .repo/ 的父目录或该父目录的子目录。\"]},\"1241\":{\"h\":\"Git Reset\",\"t\":[\"在某次提交后如果发现自己忘记添加某些文件，或者写错了提交信息，可以使用--amend选项\",\"一个使用 --amend 的例子：\",\"git commit -m \\\"initial commit\\\" git add forgotten_file git commit --amend \",\"撤销已暂存的文件\",\"git reset HEAD reset.md \",\"舍弃对文件的修改\",\"git checkout -- <filename> git checkout -- . \",\"！但是要主要到，git checkout是一条非常危险的命令，执行该命令以后，任何对文件作出的修改都会丢失，因为上述命令用之前版本的文件做了覆盖。\",\"回到远程仓库的状态\",\"git fetch --all && git rest --hard origin/master \",\"放弃所有更改\",\"git checkout . \"]},\"1242\":{\"h\":\"删除新增文件\",\"t\":[\"git clean -xdff \",\"注意这个是把新增的未保存到缓冲区的文件给删除掉\",\"如果是改动过的，就继续使用 git checkout – . 就可以了。\"]},\"1243\":{\"h\":\"Git Config\",\"t\":[\"git config --global user.name <username> git config --global user.email <useremail> git config --global core.editor emacs git config --list git config user.name \",\"git help <verb> \",\"cache the config:\",\"git config --global credential.helper cache git config --global credential.helper store \",\"如果遇到了 443 的问题，则可以重置 git 的配置：\",\"git config --global credential.helper store \"]},\"1244\":{\"h\":\"GitHub Accelerate\",\"t\":[\"Update the host in C:\\\\Windows\\\\System32\\\\drivers\\\\etc\",\"Visit http://tool.chinaz.com/dns\",\"Found the IP and update hosts as the follow example:\",\"13.250.177.223 github.com 151.101.228.133 assets-cdn.github.com 151.101.73.194 github.global.ssl.fastly.net \"]},\"1245\":{\"h\":\"Git Clone\",\"t\":[\"克隆较慢时使用：\",\"git clone --depth=1 ulr \"]},\"1246\":{\"h\":\"Tag\",\"t\":[\"show tag:\",\"git tag git tag -l \",\"add tag:\",\"git tag -a v1.0 -m \\\"my first version\\\" \",\"push tags to origin:\",\"git push origin v1.0 \",\"强制推送使用：\",\"git push -f origin branch_name \"]},\"1247\":{\"h\":\"Status\",\"t\":[\"git status git status -s # ??: untrack # M : Modified # A : Modified new file \"]},\"1248\":{\"h\":\".gitignore\",\"t\":[\"cat .gitignore *.[oa] *~ #Example *.a !lib.a # 仍然跟踪 lib.a, 即使上一行指令要忽略 /TODO # 忽略当前目录的 todo 文件 build/ # 忽略 build/ 目录下的所有文件 doc/*.txt # 忽略 doc/notes.txt, 而不忽略 doc/server/arch.txt doc/**/*.pdf # 忽略 doc/ 目录下的所有.pdf文件 \",\"如果改动文件不生效的话，使用：\",\"git rm -r --cached . git add . git commit -m 'update .gitignore' \",\"除此之外，还可以参考GitHub官方示例\"]},\"1249\":{\"h\":\"Differ\",\"t\":[\"如果想知道具体的变更内容，而不像 git status 那么宽泛，可以使用 git diff\",\"查看有哪些已暂存的内容会进入下一次提交，该命令将暂存的变更与上一次提交的内容相比较:\",\"git diff --staged git diff --cached \",\"如果要把文件保存在工作目录，但从暂存区移除该文件:\",\"rm <filename> git rm --cached README git rm log/\\\\*.log git mv README.md README \",\"查看提交历史:\",\"git log git log -p -2 \",\"查看简略信息:\",\"git log --stat \"]},\"1250\":{\"h\":\"Remote\",\"t\":[\"列出远程仓库的简短名称:\",\"git remote \",\"显示出Git存储的每个远程仓库对应的 URL:\",\"git remote -v \",\"检查远程仓库，列出远程仓库的 url 地址以及每个分支的跟踪信息：\",\"git remote show origin \",\"添加一个远程仓库，并给它起一个简短的名称以便于引用:\",\"git remote add [shortname] [url] \",\"删除远程仓库\",\"git remote rm <rep-name> \",\"从远程仓库获取和拉取数据:\",\"git fetch [remote-name] # e.g. git fetch pb \",\"将变更推送到远程仓库:\",\"git push origin master \",\"需要注意的一点是，推送变更时需要拥有远程仓库的写权限，并且克隆后没有任何其他人向远程仓库推送过数据。如果别人和你都clone了这个仓库，而他先推送，你后推送，那么你的这次推送会直接被拒绝。你必须先拉取别人的变更，将其整合到你的工作成果中，然后才能推送。\"]},\"1251\":{\"h\":\"Git 别名\",\"t\":[\"git config --global alias.co checkout git config --global alias.br branch git config --global alias.unstage 'reset HEAD --' # git unstage filaA == git reset HEAD --fileA \"]},\"1252\":{\"h\":\"Git Branch\",\"t\":[\"分支意味着偏离开发主线并继续你自己的工作而不影响主线开发，分支机制是Git的“杀手锏”！\",\"当你创建一个新分支的时候会发生什么？实际上，Git会创建一个可移动的新指针供你使用。\",\"创建分支:\",\"git branch testing \",\"列出所有分支:\",\"git branch \",\"切换分支:\",\"checkout 命令会改变 HEAD 指针，使其指向 testing 分支，在 Gi t中，HEAD 是一个指向当前所在的本地分支的指针\",\"git checkout testing \",\"分支与合并, 创建并切换到该分支，一般使用这个快速创建分支：\",\"git checkout -b testing \",\"切换回master分支:\",\"git checkout master \",\"合并分支:\",\"git merge testing \",\"删除分支:\",\"git branch -d testing \",\"注意到在merge的时候会有提示\\\"fast-forward\\\"，这由于当前的master分支所指向的提交是要并入的testing分支的直接上游，因为Git会将master分支指针向前移动。\",\"合并冲突处理，配置合并工具：\",\"git config merge.tool vimdiff git config merge.conflictstyle diff3 \"]},\"1253\":{\"h\":\"分支管理\",\"t\":[\"查看每个分支上的最新提交:\",\"git branch -v \",\"查看哪些分支已经合并入当前分支的:\",\"git branch --merged git branch --no-merged \",\"远程分支\",\"如果从Git服务器clone到本地，Git的 clone 命令会自动把这台服务器命名为 origin，使用git clone -o <yourname>便可以修改远程仓库的默认名称为：your name/master。\",\"如果你在本地的 master 分支上进行了一些工作，与此同时，别人向 Git 服务器推送了数据，更新了服务器上的 master 分支，这时你的提交历史就与服务器上的历史产生了偏离。\",\"于是要与服务器同步，下面的命令会查询 origin 对应的服务器地址，并从服务器取得本地尚未包含的数据，然后更新本地数据库，最后把 origin/master 指针移动到最新的位置上去。\",\"与服务器同步:\",\"git fetch origin \",\"与其他人共享serverfix分支:\",\"git push origin serverfix git push (remote) (branch) \",\"等价于下述代码的省略形式:\",\"git push origin serverfix:serverfix \",\"第一个为本地分支名，第二个为远程分支名，可把远程分支重命名\",\"跟踪分支\",\"当你克隆一个远程仓库时，Git默认情况下会自动地创建跟踪这远程origin/master分支的本地master分支。除此之外，你也可是设置成不跟踪master分支。\",\"git checkout --track origin/serverfix\",\"或者git checkout -b sf origin/serverfix\",\"完成上述命令以后，你的本地sf就会从origin/server上获取数据。\",\"拉取\",\"git fetch命令会拉取本地没有的远程最新更改数据，但它只会从服务器上拉取数据，然后让你自己进行合并。\",\"git pull命令在大多数情况下基本等同于执行git fetch之后紧跟着执行了git merge命令。\",\"一般来说，显示地直接使用fetch和merge命令比使用git pull要更好，因为git pull的机制常常使人迷惑。\",\"删除远程服务器上的master分支:\",\"git push origin --delete serverfix \",\"上述操作只是删除了远程服务器上的分支指针，Git会保留数据一段时间知道下一次触发垃圾回收。\"]},\"1254\":{\"h\":\"Reference\",\"t\":[\"Source Control Workflow\\n[^2 ]: Repo 命令参考资料↩︎\"]},\"1255\":{\"c\":[\"Tools\"]},\"1256\":{\"c\":[\"git\"]},\"1257\":{\"h\":\"Vim 使用入门\"},\"1258\":{\"h\":\"reference\",\"t\":[\"NAME\",\"URL\",\"DES\",\"VundleVim\",\"https://github.com/VundleVim/Vundle.vim\",\"Vim plugin manager\",\"ale\",\"https://github.com/w0rp/ale\",\"vim-airline\",\"https://github.com/vim-airline/vim-airline\"]},\"1259\":{\"h\":\"Plugin Manager\",\"t\":[\"Vundle is short for Vim bundle and is a Vim plugin manager.\",\"mkdir ~/.vim/bundle git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim vim ~/.vimrc \",\"In .vimrc, this is my config:\",\"set nocompatible filetype off set ts=4 set expandtab set rtp+=~/.vim/bundle/Vundle.vim call vundle#begin() Plugin 'VundleVim/Vundle.vim' Plugin 'https://github.com/Valloric/YouCompleteMe.git' Bundle 'luochen1990/rainbow' let g:rainbow_active = 1 Plugin 'w0rp/ale' Plugin 'vim-airline/vim-airline' Plugin 'vim-airline/vim-airline-themes' call vundle#end() filetype plugin indent on \",\"Then build:\",\"vim +PluginInstall +qall # options: PluginClean, PluginUpdate, PluginList \",\"Other useful settings:\",\"set nu!\\nset autoindent #自动对齐\\nsyntax on\\n\"]},\"1260\":{\"c\":[\"Tools\"]},\"1261\":{\"c\":[\"vim\"]},\"1262\":{\"h\":\"VPS and Shadowsocks\"},\"1263\":{\"h\":\"1. 配置shadowsocks客户端\",\"t\":[\"GitHub of shadowsocks\",\"yum -y install epel-release yum -y install python-pip pip install shadowsocks #查看系统 cat /etc/redhat-release #查看内核 cat /proc/version uname -r vi /etc/shadowsocks.json { \\\"server\\\":\\\"0.0.0.0\\\", \\\"server_port\\\":8388, \\\"local_port\\\":1080, \\\"password\\\":\\\"chen852gao\\\", \\\"timeout\\\":600, \\\"method\\\":\\\"aes-256-cfb\\\" } #启动ss服务 ssserver -c /etc/shadowsocks.json -d start \"]},\"1264\":{\"h\":\"2. 配置91云一键加速工具\",\"t\":[\"在91云 上面下载加速工具\",\"chrome上的插件Proxy SwitchyOmega使用方法为：\",\"从GitHub下载该插件，进入到google chrome的插件中心\",\"配置Proxy\",\"protocol : SOCKS5\",\"server: 127.0.0.1\",\"Port: 1080\",\"配置Auto Switch\",\"Rule List rule 的Profile 填 proxy\",\"Default 的Profile 填[Direct]\",\"Rule List Format选择Autoproxy\",\"Rule List URL填写：\",\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt \",\"保存apply changes即可\"]},\"1265\":{\"h\":\"3. kcptun 加速工具\",\"t\":[\"安装并配置服务端\",\"kcptun GitHub\",\"#查找shadowsocks端口，将8388替换为ss端口 netstat -nl | grep 8388 ss -nl | grep 8388 \",\"参考教程\",\"#使用脚本一键安装 wget --no-check-certificate https://github.com/kuoruan/shell-scripts/raw/master/kcptun/kcptun.sh chmod +x ./kcptun.sh ./kcptun.sh \",\"进入配置界面，按照步骤进行，需要注意到 需要加速的端口 为shadowsocks的端口，本例中为8388\",\"安装客户端\",\"首先下载一个启动Kcptun的工具，注意到这只是用来启动 Kcptun 的工具，而不是 Kcptun 客户端。启动工具下载地址\",\"注意要下载服务端对应的Keptun，客户端下载地址\",\"配置客户端\",\"本地侦听端口：任意\",\"KCP服务器地址：VPS的IP\",\"端口：默认的29900\",\"其他都和服务端的配置一致\",\"配置shadowsocks客户端\",\"服务器地址：127.0.0.1\",\"服务器端口：本地侦听端口\",\"密码和加密方式：VPS的密码和加密方式\",\"配置完以上步骤以后，启动ss客户端和KCPTun客户端配置管理工具，日志区产生记录，即成功\",\"#查看服务器日志\\n./kcptun.sh\\n\"]},\"1266\":{\"h\":\"Adb Command And Script\"},\"1267\":{\"h\":\"Base\"},\"1268\":{\"h\":\"devices\",\"t\":[\"查看是否连接成功[1]\",\"adb devices \"]},\"1269\":{\"h\":\"锁定、解锁\",\"t\":[\"adb shell input keyevent 26 adb shell input keyevent 82 \",\"keyevent 26\",\"keyevent 26 表示的是按下电源按钮，所以说如果我们手机屏幕状态是打开的话，会导致屏幕状态切换为开启状态，针对这个情况，我们可以在脚本中使用判断：\",\"for /f \\\"tokens=*\\\" %%a in ('adb -s %serial_no% shell \\\"dumpsys deviceidle | grep mScreenOn\\\"') do set screen_state=%%a if \\\"%screen_state%\\\" == \\\"mScreenOn=true\\\" ( echo %screen_state% is on adb -s %serial_no% shell input keyevent 82 ) else ( echo %screen_state% is off adb -s %serial_no% shell input keyevent 26 adb -s %serial_no% shell input keyevent 82 ) \",\"如果屏幕状态是开启的话，我们就直接点解锁；否则的话，我们开启屏幕再解锁。\"]},\"1270\":{\"h\":\"重启、关机\",\"t\":[\"adb shell reboot # 重启 adb shell reboot -p # 关机 \"]},\"1271\":{\"h\":\"蓝牙\",\"t\":[\"adb shell service call bluetooth_manager 6 # 打开蓝牙 adb shell service call bluetooth_manager 9 # 关闭蓝牙 \"]},\"1272\":{\"h\":\"Wi-Fi\",\"t\":[\"adb shell svc wifi enable # 打开wifi adb shell svc wifi disable # 关闭wifi # 打开wifi设置界面 adb shell am start -a android.intent.action.MAIN -n com.android.settings/.wifi.WifiSettings \"]},\"1273\":{\"h\":\"APP\"},\"1274\":{\"h\":\"安装、删除\",\"t\":[\"adb install abc.apk # 第一次安装。如果手机上已经有此app,则会报错。 adb uninstall com.example.appname \"]},\"1275\":{\"h\":\"获取 APP Activity\",\"t\":[\"手动打开 APP\",\"使用 adb 命令：\",\"adb shell dumpsys window | grep mCurrentFocus # or dumpsys window | grep mCurrentFocus \",\"此时可以看到输入类似于下面：\",\"mCurrentFocus=Window{a4d3e62 u0 com.example.myapplication/com.example.myapplication.MainActivity}\",\"其中以 com.xxx 那一段就是 APP 的 Activity.\",\"提示\",\"该方法如果想知道 APP 的包名，使用方法是：pm list package -3 列出所有应用，其中 -3 表示列举出第三方应用。\",\"但是通常而言，我们打开该 APP 并执行命令，是能够从 Activity 的前半部分得到包名的。\"]},\"1276\":{\"h\":\"启动 APP\",\"t\":[\"adb shell am start -n com.package.name/com.package.name.MainActivity adb shell am start -n com.package.name/.MainActivity \",\"举例：启动抖音\",\"adb shell am start -n com.ss.android.ugc.aweme/com.ss.android.ugc.aweme.splash.SplashActivity \"]},\"1277\":{\"h\":\"关闭 APP\",\"t\":[\"adb shell am force-stop com.some.package \",\"注意\",\"force-stop 后面跟着的是 APP 的包名，而 start 后面是 APP 的 activity.\"]},\"1278\":{\"h\":\"获取 Pid\",\"t\":[\"很多时候，我们需要获取到 APP 进程对应的 PID，当我们知道 APP 的包名的时候，一切都变得非常简单：\",\"adb shell pidof package_name \",\"bat script example\",\"这是一个关于如何获取 PID 的 bat script 例子：\",\"@echo off set /p serial_no=<./serial_no.txt echo serial_no is %serial_no% set PACKAGE_NAME=com.example.myapplication for /f \\\"tokens=*\\\" %%a in ('adb -s %serial_no% shell pidof %PACKAGE_NAME%') do set PID=%%a if \\\"%PID%\\\"==\\\"\\\" ( echo Error: %PACKAGE_NAME% is not running exit /b 1 ) echo PID of %PACKAGE_NAME% is %PID% \"]},\"1279\":{\"h\":\"获取 Tid\",\"t\":[\"我们在知道 Pid 和我们的线程名称的时候，可以很轻松地获取到线程的 Tid:\",\"set thread_name=HeapTaskDaemon for /f \\\"tokens=3\\\" %%a in ('adb -s %serial_no% shell \\\"ps -T -p %PID% | grep %thread_name%\\\"') do set tid=%%a \"]},\"1280\":{\"h\":\"Tap and Slide\"},\"1281\":{\"h\":\"slide\",\"t\":[\"adb shell input touchscreen swipe 930 880 930 380 # 向上滑 adb shell input touchscreen swipe 930 880 330 880 # 向左滑 adb shell input touchscreen swipe 330 880 930 880 # 向右滑 adb shell input touchscreen swipe 930 380 930 880 # 向下滑 \"]},\"1282\":{\"h\":\"tap\",\"t\":[\"adb shell input mouse tap 100 500 \"]},\"1283\":{\"h\":\"Other Skill\"},\"1284\":{\"h\":\"等待设备重启\",\"t\":[\"如果想等到设备重启完成以后再进行下一步操作，可以在 adb 命令之间增加：\",\"adb wait-for-device \",\"经过实测，后面的命令会等到设备重启完成之后再执行。\"]},\"1285\":{\"h\":\"写 SN\",\"t\":[\"1、执行命令进入fastboot：adb reboot bootloader 2、fastboot getvar nve:SN@12345678 @后面为想要修改成为的SN编号\",\"3、fastboot reboot 重启\",\"4、查看单板SN号是否修改成功：adb devices\",\"写完之后进行验证：\",\"adb devices fastboot devices adb shell \\\"getprop ro.serialno\\\" \"]},\"1286\":{\"h\":\"Push Path\",\"t\":[\"对于一些情况，我们可能需要 push 进去文件完成更新，所以这一节对此做出列举。\"]},\"1287\":{\"h\":\"art\",\"t\":[\"如果要推送 art, 其实现如下：\",\"adb remount adb push .\\\\lib64\\\\libart.so /system/apex/com.android.art.debug/lib64/libart.so adb push .\\\\lib\\\\libart.so /system/apex/com.android.art.debug/lib/libart.so adb reboot pause \",\"如果要推送 apex 包，其实现如下（编译产物 com.android.art.apex）：\",\"adb shell rm /cache/overlay/system/upper/apex/com.android.art.apex adb reboot adb wait-for-device adb remount adb push com.android.art.apex /system/apex/ adb reboot \",\"增加上设备序列号的推送程序\",\"set /p serial_no=<./serial_no.txt echo serial_no is %serial_no% adb -s %serial_no% remount adb -s %serial_no% push .\\\\lib64\\\\libart.so /system/apex/com.android.art.debug/lib64/libart.so adb -s %serial_no% push .\\\\lib\\\\libart.so /system/apex/com.android.art.debug/lib/libart.so adb -s %serial_no% reboot adb -s %serial_no% wait-for-device adb -s %serial_no% shell \\\"getprop ro.serialno\\\" pause \",\"安卓自动化工具(附自动刷抖音脚本实例)↩︎\"]},\"1288\":{\"c\":[\"Android\"]},\"1289\":{\"c\":[\"adb\"]},\"1290\":{\"h\":\"Research on Binder\"},\"1291\":{\"h\":\"Overview\",\"t\":[\"kernel 侧实现：kernel/linux-5.10/drivers/android/binder.c\",\"native 侧实现：system/libhwbinder\",\"💯💯 本文主要是针对 binder 的理解进行的行为，代码列举和文字之间关联度不高，如果想了解原理但是不想对代码进行走读的，可以跳过代码解析的部分，以免陷入太多的细节。\"]},\"1292\":{\"h\":\"IPC 通信\",\"t\":[\"binder 相比于传统的 IPC 通信拥有比较大的优势：其只需要进行一次拷贝。IPC 通信的原理大致如下：\"]},\"1293\":{\"h\":\"Binder 线程池\",\"t\":[\"关于 binder 线程是如何管理，binder 线程池是如何创建的？在 Android 中，不管是 app 进程，还是 system_server 进程，都是在进程 fork 完成以后，在新进程中执行 onZygoteInit() 函数的过程中，启动创建 binder 线程池。\",\"线程池创建好之后，就可以使用 binder 线程了，通常而言，binder 线程的命名格式为 binder_x, 通过 spawnPooledThread 方法创建[1]。\",\"binder 线程可以分为主线程和普通线程，还有一种其他的 binder 线程：\",\"主线程：进程创建过程中调用 startThreadPool() 再进入 spawnPooledThread(true), 创建 binder 主线程，名称是 binder_PID_1, 这个主线程不会退出\",\"普通线程：Binder Driver 根据是否有空闲的 binder 线程来决定是否创建 binder 线程，回调 spawnPooledThread(false), false 表示不是主线程\",\"其他线程：没有通过 spawnPooledThread 方法，而是直接调用 IPC.joinThreadPool(), 将当前线程加入 binder 线程队列（默认的参数 isMain 是 true）。\"]},\"1294\":{\"h\":\"startThreadPool()\",\"t\":[\"system/libhwbinder/ProcessState.cpp\",\"void ProcessState::startThreadPool() { AutoMutex _l(mLock); // 多线程同步 if (!mThreadPoolStarted) { mThreadPoolStarted = true; if (mSpawnThreadOnStart) { spawnPooledThread(true); } } } \",\"mThreadPoolStarted 保证每个进程只会启动一个 binder 线程池；然后我们调用 spawnPooledThread(true);\"]},\"1295\":{\"h\":\"spawnPooledThread()\",\"t\":[\"void ProcessState::spawnPooledThread(bool isMain) { if (mThreadPoolStarted) { String8 name = makeBinderThreadName(); ALOGV(\\\"Spawning new pooled thread, name=%s\\\\n\\\", name.string()); sp<Thread> t = new PoolThread(isMain); t->run(name.string()); } } \",\"给 binder 线程起名，名称是 name.appendFormat(\\\"HwBinder:%d_%X\\\", pid, s);, 其中 s 表示一个原子的计数\",\"创建 PoolThread 并运行，我们下面研究这个函数。\"]},\"1296\":{\"h\":\"PoolThread\",\"t\":[\"class PoolThread : public Thread { public: explicit PoolThread(bool isMain) : mIsMain(isMain) { } protected: virtual bool threadLoop() { IPCThreadState::self()->joinThreadPool(mIsMain); return false; } const bool mIsMain; }; \",\"从函数名看起来是创建线程池，其实就只是创建一个线程，该 PoolThread 继承 Thread 类。t->run() 方法最终调用 PoolThread 的 threadLoop() 方法。\",\"这段函数的重点就是 joinThreadPool, 我们下个章节进行详细的分析。\"]},\"1297\":{\"h\":\"Summary\",\"t\":[\"总结一下 startThreadPool 这个函数，其本质上就是调用 joinThreadPool 函数进行 binder 线程池的创建，为了达到这个目的，其做了以下事情：\",\"多线程同步\",\"binder 线程命名\",\"创建 binder 线程并加入线程池\"]},\"1298\":{\"h\":\"IPC.joinThreadPool()\",\"t\":[\"该函数时 Android framework 中负责讲 binder 线程加入线程池的函数。\",\"当应用程序需要与另一个进程通信时，可以通过 Binder 技术创建一个 Binder 代理对象，并在该对象上调用远程方法以实现跨进程通信。在服务端，每个 Binder 代理对象对应一个 IBinder 接口的实现类，通过这个实现类与客户端进行交互。\",\"客户端向服务端发起请求时，请求会发送到服务端的线程池中等待处理。服务端的线程池是由 IPCThreadState 类维护的，当服务端的进程启动时，IPCThreadState 创建了一个名为 \\\"Binder:xxx_xxx\\\" 的 binder 线程，并将其加入到默认的 Handler 线程池中。客户端请求到达服务端后，它会被分配给 Handler 线程池中的某个线程进行处理。\",\"而 joinThreadPool(bool isMain) 函数就是将当前线程加入到 Binder 线程池中，以便在服务端接收客户端请求时能够被分配到该线程处理。参数 isMain 指示是否将当前线程作为主线程加入到线程池中，如果是，则当前线程将开始处理消息循环。否则，它将被加入到线程池中等待任务分配。\"]},\"1299\":{\"h\":\"source code\",\"t\":[\"system/libhwbinder/IPCThreadState.cpp\",\"void IPCThreadState::joinThreadPool(bool isMain) { //创建Binder线程 mOut.writeInt32(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER); set_sched_policy(mMyThreadId, SP_FOREGROUND); //设置前台调度策略 status_t result; do { processPendingDerefs(); //清除队列的引用[ result = getAndExecuteCommand(); //处理下一条指令 if (result < NO_ERROR && result != TIMED_OUT && result != -ECONNREFUSED && result != -EBADF) { abort(); } if(result == TIMED_OUT && !isMain) { break; ////非主线程出现timeout则线程退出 } } while (result != -ECONNREFUSED && result != -EBADF); mOut.writeInt32(BC_EXIT_LOOPER); // 线程退出循环 talkWithDriver(false); //false代表bwr数据的read_buffer为空 } \",\"mOut.writeInt32(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER); 如果是主线程的话，则 BC_ENTER_LOOPER; 此时的状态是： mOut 中有值，mIn 是空。我们看接下来的 result = getAndExecuteCommand(); 是怎么处理这种 case 的。\"]},\"1300\":{\"h\":\"getAndExecuteCommand()\",\"t\":[\"status_t IPCThreadState::getAndExecuteCommand() { status_t result; int32_t cmd; result = talkWithDriver(); //与binder进行交互 // ... 省略这部分代码，暂时不关注 return result; } \",\"我们可以看到，这个时候调用了 talkWithDriver() 函数。\"]},\"1301\":{\"h\":\"talkWithDriver()\",\"t\":[\"// mOut有数据，mIn还没有数据 doReceive默认值为true status_t IPCThreadState::talkWithDriver(bool doReceive) { binder_write_read bwr; // This is what we'll read. // 是读写场景中的哪个？ if (doReceive && needRead) { bwr.read_size = mIn.dataCapacity(); bwr.read_buffer = (uintptr_t)mIn.data(); } else { bwr.read_size = 0; bwr.read_buffer = 0; } // ... // 当同时没有输入和输出数据则直接返回 if ((bwr.write_size == 0) && (bwr.read_size == 0)) return NO_ERROR; ... bwr.write_size = outAvail; bwr.write_buffer = (uintptr_t)mOut.data(); do { //ioctl执行binder读写操作，经过syscall，进入Binder驱动。调用Binder_ioctl if (ioctl(mProcess->mDriverFD, BINDER_WRITE_READ, &bwr) >= 0) err = NO_ERROR; ... } while (err == -EINTR); ... return err; } \",\"从上面的分析中我们知道，我们需要处理 mOut 中写入的命令，所以前面的判断逻辑根据这个来走读。主要关注 do..while 循环中的 ioctl: 我们可以看到，此时是把我们上面写的 BC_ENTER_LOOPER 发送给了 binder 驱动，对 binder 驱动而言，就是调用到 binder_thread_write 来进行处理了。\"]},\"1302\":{\"h\":\"Binder Application Layer\",\"t\":[\"本篇主要讲述在应用层，binder 是如何体现出来的。\"]},\"1303\":{\"h\":\"Binder Framework & Native\",\"t\":[\"本章主要讲述在 Framework 和 native 层，binder 的实现。\"]},\"1304\":{\"h\":\"BBinder\",\"t\":[\"也叫做 Base Binder, 是 Binder 通信机制的基类。\",\"BBinder 是 Binder 通信机制的基类，它实现了 IBinder 接口并提供了一些基本的 Binder 功能。\",\"BBinder 可以作为服务端的基类，开发者可以继承 BBinder 来创建自定义的 Binder 服务端对象。\",\"BBinder 提供了一些方法来处理跨进程通信的底层细节，如线程同步、Parcel 数据封装等。\"]},\"1305\":{\"h\":\"BpBinder\",\"t\":[\"也叫做 Proxy Binder。\",\"BpBinder 是 Binder 通信机制的代理类，它通过代理方式与远程的 Binder 通信。\",\"BpBinder 通过向系统的 Binder 驱动发送请求，将请求转发给远程的 Binder 服务端对象，并将响应结果返回给调用方。\",\"BpBinder 通常作为客户端使用，它隐藏了与底层 Binder 通信的复杂性，提供了简单的接口供开发者使用。\"]},\"1306\":{\"h\":\"Binder Driver\"},\"1307\":{\"h\":\"binder_ioctl()\",\"t\":[\"binder_ioctl() 函数是 native 层调用下来之后的第一个函数，其重要性自然不言而喻。\",\"在上层我们使用 ioclt 调用到 binder 设备，类似于：\",\"ipc/native/src/mock/source/binder_connector.cpp\",\"// bool BinderConnector::OpenDriver() ioctl(fd, BINDER_VERSION, &version); \",\"其中 fd 表示 binder 的文件设备，通过 open() 系统调用打开：\",\"// bool BinderConnector::OpenDriver() int fd = open(deviceName_.c_str(), O_RDWR); \",\"其中 deviceName_ 是：\",\"// binder_connector.cpp static constexpr const char *DRIVER_NAME = \\\"/dev/binder\\\"; \",\"也就是说，我们通过 fd 文件设备，打开 binder 设备，调用到了 binder deriver 中。\",\"在 binder driver 中，会先去调用 binder_ioctl() 函数，那么，上层的设备是如何与该入口函数对应起来的呢？\",\"drivers/android/binder.c\",\"在 init binder 的时候，指定 binder 设备对应的 fops:\",\"static int __init init_binder_device(const char *name) { // ... struct binder_device *binder_device; binder_device = kzalloc(sizeof(*binder_device), GFP_KERNEL); binder_device->miscdev.fops = &binder_fops; // ... } \",\"定义 binder_fops:\",\"const struct file_operations binder_fops = { .owner = THIS_MODULE, .poll = binder_poll, .unlocked_ioctl = binder_ioctl, .compat_ioctl = compat_ptr_ioctl, .mmap = binder_mmap, .open = binder_open, .flush = binder_flush, .release = binder_release, .may_pollfree = true, }; \",\"我们可以看到，在结构体 binder_fops 的定义中，第 4 行代码指向了 binder_ioctl() 函数。\",\"如此一来，我们就将 native 层的 ioctl() 和 driver 层的函数进行了对应。\",\"在 binder_ioctl() 中，我们可以根据上层传入的 cmd 进行相对应的操作：\",\"static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg) { // ... thread = binder_get_thread(proc); switch (cmd) { case BINDER_WRITE_READ: ret = binder_ioctl_write_read(filp, cmd, arg, thread); case BINDER_SET_MAX_THREADS: case BINDER_SET_CONTEXT_MGR_EXT: case BINDER_SET_CONTEXT_MGR: // .. } // ... } \",\"比如我们经常会使用到的 BINDER_WRITE_READ 命令，根据这个命令调用到 binder_ioctl_write_read() 中去，最终实现 driver 层的功能。\",\"One More Thing\",\"在 binder driver 这个章节中，我们还会从各个角度深入分析 binder_ioctl() 函数。让我们拭目以待。\"]},\"1308\":{\"h\":\"binder_transaction()\",\"t\":[\"drivers/staging/android/binder.c\",\"BC_TRANSACTION（会调用 binder_transaction() 函数） 简单来说流程如下：\",\"找到目标进程或线程。\",\"将用户空间的数据拷贝到目前进程空间，并解析 flat_binder_object。\",\"将传输入栈到当前线程中。\",\"将 BINDER_WORK_TRANSACTION 加入到目标队列，将 BINDER_WORK_TRANSACTION_COMPLETE 加入到当前线程队列。\",\"唤醒目标进程或线程进行处理。\",\"接下来，我们需要分析一下这个重要函数的源码：\",\"这个函数是 binder driver 的关键函数，虽然很长很复杂，但是值得细细品味。\"]},\"1309\":{\"h\":\"Binder Protocol\",\"t\":[\"向 binder driver 通信的时候，需要确定基本的通讯协议（请求码），其中又分为 BC_PROTOCOL 和 BR_PROTOCOL:\",\"BC_PROTOCOL: 应用程序向 binder 驱动设备发送请求消息\",\"BR_PROTOCOL: binder 驱动设备向应用程序发送消息\",\"这些协议都定义在 enum binder_driver_command_protocol 结构体(binder.h)中：\",\"/linux/android/binder.h\",\"enum binder_driver_command_protocol { BC_TRANSACTION = _IOW('c', 0, struct binder_transaction_data), BC_REPLY = _IOW('c', 1, struct binder_transaction_data), // ... } \",\"其中 _IOW 宏定义如下：\",\"#define _IOW(type,nr,size) _IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size))) #define _IOC(dir,type,nr,size) \\\\ (((dir) << _IOC_DIRSHIFT) | \\\\ ((type) << _IOC_TYPESHIFT) | \\\\ ((nr) << _IOC_NRSHIFT) | \\\\ ((size) << _IOC_SIZESHIFT)) \"]},\"1310\":{\"h\":\"Abstract of BC_PROTOCOL\",\"t\":[\"我们先对 BC_PROTOCOL 进行研究。\",\"应用程序向 binder 驱动发送请求消息共 15 条[3]：\",\"请求码\",\"作用\",\"使用场景\",\"BC_TRANSACTION\",\"Client向Binder驱动发送请求数据\",\"transact()\",\"BC_REPLY\",\"Server向Binder驱动发送请求数据\",\"sendReply()\",\"BC_FREE_BUFFER\",\"释放内存\",\"freeBuffer()\",\"BC_ACQUIRE\",\"binder_ref强引用加1\",\"incStrongHandle()\",\"BC_RELEASE\",\"binder_ref强引用减1\",\"decStrongHandle()\",\"BC_INCREFS\",\"binder_ref弱引用加1\",\"incWeakHandle()\",\"BC_DECREFS\",\"binder_ref弱引用减1\",\"decWeakHandle()\",\"BC_ACQUIRE_DONE\",\"binder_node强引用减1完成\",\"executeCommand()\",\"BC_INCREFS_DONE\",\"binder_node弱引用减1完成\",\"executeCommand()\",\"BC_REGISTER_LOOPER\",\"创建新的Binder线程\",\"joinThreadPool()\",\"BC_ENTER_LOOPER\",\"Binder主线程进入looper\",\"joinThreadPool()\",\"BC_EXIT_LOOPER\",\"Binder线程线程退出looper\",\"joinThreadPool()\",\"BC_REQUEST_DEATH_NOTIFICATION\",\"注册死亡通知\",\"requestDeathNotification()\",\"BC_CLEAR_DEATH_NOTIFICATION\",\"取消注册死亡通知\",\"clearDeathNotification()\",\"BC_DEAD_BINDER_DONE\",\"已完成binder的死亡通知\",\"executeCommand()\",\"我们接下来对这些协议进行一一分析。\"]},\"1311\":{\"h\":\"BC_TRANSACTION & BC_REPLY\",\"t\":[\"这是最常用的协议，用于向 binder 驱动发起请求或者应答数据，传递的参数就是 binder_transaction_data 结构体。\",\"该传输过程中涉及到的函数列表：\",\"binder_ioctl\",\"binder_ioctl_write_read\",\"binder_thread_write: 协议的直接调用处，我们从此处开始研究\",\"binder_transaction: 函数较为复杂，单独新开章节研究\",\"为了方便理解，我们用一张图来进行表述：\",\"drivers/android/binder.c\"]},\"1312\":{\"h\":\"binder_thread_write()\",\"t\":[\"static int binder_thread_write(struct binder_proc *proc, struct binder_thread *thread, binder_uintptr_t binder_buffer, size_t size, binder_size_t *consumed) { void __user *ptr = buffer + *consumed; // ... case BC_TRANSACTION: case BC_REPLY: { struct binder_transaction_data tr; if (copy_from_user(&tr, ptr, sizeof(tr))) return -EFAULT; ptr += sizeof(tr); binder_transaction(proc, thread, &tr, cmd == BC_REPLY); break; } // ... } \",\"下面分别研究 binder_ioctl() 函数和 binder_ioctl_write_read() 函数在这个 case 中的应用：\"]},\"1313\":{\"h\":\"binder_ioctl()\",\"t\":[\"binder_ioctl 函数是上层调用下来以后的入口函数，在本章研究的 BC_TRANSACTION & BC_REPLY 流程中，会进入 case BINDER_WRITE_READ, 这是由 native 层传递过来的 command.\",\"static long binder_ioctl(struct file *filp, unsigned int cmd, unsigned long arg) { switch (cmd) { case BINDER_WRITE_READ: ret = binder_ioctl_write_read(filp, cmd, arg, thread); if (ret) goto err; break; } // ... } \"]},\"1314\":{\"h\":\"binder_ioctl_write_read()\",\"t\":[\"binder 通信，上层会传递 BINDER_WRITE_READ cmd, 从 该 case 里面调用到 binder_ioctl_write_read() 函数：\",\"static int binder_ioctl_write_read(struct file *filp, unsigned int cmd, unsigned long arg, struct binder_thread *thread) { int ret = 0; struct binder_proc *proc = filp->private_data; unsigned int size = _IOC_SIZE(cmd); void __user *ubuf = (void __user *)arg; struct binder_write_read bwr; if (copy_from_user(&bwr, ubuf, sizeof(bwr))) { ret = -EFAULT; goto out; } // 需要写数据 if (bwr.write_size > 0) { ret = binder_thread_write(proc, thread, bwr.write_buffer, bwr.write_size, &bwr.write_consumed); // ... } } \",\"此时我们是真正调用进了 binder_thread_write, 也就是上面我们那个 case 所在的地方。\"]},\"1315\":{\"h\":\"BC_FREE_BUFFER\",\"t\":[\"case BC_FREE_BUFFER: { binder_uintptr_t data_ptr; struct binder_buffer *buffer; // 获取用户空间数据 if (get_user(data_ptr, (binder_uintptr_t __user *)ptr)) return -EFAULT; ptr += sizeof(binder_uintptr_t); // 从 buffer 树中找到对应的 binder_buffer buffer = binder_alloc_prepare_to_free(&proc->alloc, data_ptr); binder_free_buf(proc, thread, buffer); break; } \"]},\"1316\":{\"h\":\"BR_TRANSACTION_COMPLETE\",\"t\":[\"Client 在执行 BINDER_WRITE_READ 时，先通过 binder_thread_write() 写数据，将 BINDER_WORK_TRANSACTION_COMPLETE 放入工作队列。紧接着就执行 binder_thread_read() 读取返回数据。这里会将命令 BR_TRANSACTION_COMPLETE 返回给 Client 线程。\",\"static int binder_thread_read(struct binder_proc *proc, struct binder_thread *thread, binder_uintptr_t binder_buffer, size_t size, binder_size_t *consumed, int non_block) { ...... // 第一次读时，插入命令 BR_NOOP 返回给用户 if (*consumed == 0) { if (put_user(BR_NOOP, (uint32_t __user *)ptr)) return -EFAULT; ptr += sizeof(uint32_t); } retry: // 当前线程没有传输并且 todo 队列为空时，处理进程的工作队列 wait_for_proc_work = thread->transaction_stack == NULL && list_empty(&thread->todo); ...... thread->looper |= BINDER_LOOPER_STATE_WAITING; // 如果处理进程工作队列，则当前线程为空闲线程 if (wait_for_proc_work) proc->ready_threads++; ...... // 等待进程或线程工作队列被唤醒 if (wait_for_proc_work) { ...... ret = wait_event_freezable_exclusive(proc->wait, binder_has_proc_work(proc, thread)); } else { ...... ret = wait_event_freezable(thread->wait, binder_has_thread_work(thread)); } ...... // 唤醒后，开始处理传输，空闲线程减1 if (wait_for_proc_work) proc->ready_threads--; thread->looper &= ~BINDER_LOOPER_STATE_WAITING; ...... while (1) { ...... // 优先处理线程工作队列，再处理进程工作队列 if (!list_empty(&thread->todo)) w = list_first_entry(&thread->todo, struct binder_work, entry); else if (!list_empty(&proc->todo) && wait_for_proc_work) w = list_first_entry(&proc->todo, struct binder_work, entry); else { if (ptr - buffer == 4 && !(thread->looper & BINDER_LOOPER_STATE_NEED_RETURN)) /* no data added */ goto retry; break; } ...... switch (w->type) { ...... case BINDER_WORK_TRANSACTION_COMPLETE: { // 发送命令BR_TRANSACTION_COMPLETE给用户 cmd = BR_TRANSACTION_COMPLETE; if (put_user(cmd, (uint32_t __user *)ptr)) return -EFAULT; ptr += sizeof(uint32_t); ...... list_del(&w->entry); kfree(w); binder_stats_deleted(BINDER_STAT_TRANSACTION_COMPLETE); } break; ...... if (!t) continue; ...... } \"]},\"1317\":{\"h\":\"BR_TRANSACTION\",\"t\":[\"Server 端线程启动后就调用 talkWithDriver() 等待读取数据。Binder 驱动处理 Client 发送的 BC_TRANSACTION 命令后，会唤醒 Server 线程。Server 线程读取数据进行处理同样是在 binder_thread_read() 中完成的。\"]},\"1318\":{\"h\":\"mmap 技术\",\"t\":[\"mmap(), 或者称之为内存映射技术，是实现 binder 的重要技术之一。\",\"mmap() 可以将一个文件、一段物理内存或者其他对象映射到进程的虚拟地址空间。在内存映射技术中，操作系统会为每个映射的文件或设备创建一个虚拟地址空间，然后将该虚拟地址空间中的每个地址都映射到文件或设备的实际物理地址上。\",\"❤️❤️ 对于这句话的理解，物理内存（物理页）–> 虚拟内存（虚拟页）；物理页是内核管理物理页的基本单位。\",\"❌❌ 目前来看：这种映射本身操作系统就会完成，那么 mmap 做了什么呢？\",\"mmap 有一个重要的理念：访问文件（如果映射的是文件）就像是访问内存一样。\"]},\"1319\":{\"h\":\"Pracel\"},\"1320\":{\"h\":\"Call Stack\",\"t\":[\"来研究一下序列化、反序列化的过程。\",\"ipc/native/src/mock/source/binder_invoker.cpp\",\"bool BinderInvoker::WriteTransaction(int cmd, uint32_t flags, int32_t handle, uint32_t code, const MessageParcel &data, const int32_t *status) { binder_transaction_data tr {}; tr.target.handle = (uint32_t)handle; tr.code = code; tr.flags = flags; tr.flags |= TF_ACCEPT_FDS; if (data.GetDataSize() > 0) { // Send this parcel's data through the binder. tr.data_size = data.GetDataSize(); tr.data.ptr.buffer = (binder_uintptr_t)data.GetData(); tr.offsets_size = data.GetOffsetsSize() * sizeof(binder_size_t); tr.data.ptr.offsets = data.GetObjectOffsets(); } else if (status != nullptr) { // Send this parcel's status through the binder. tr.flags |= TF_STATUS_CODE; tr.data_size = sizeof(int32_t); tr.data.ptr.buffer = reinterpret_cast<uintptr_t>(status); tr.offsets_size = 0; tr.data.ptr.offsets = 0; } if (!output_.WriteInt32(cmd)) { ZLOGE(LABEL, \\\"WriteTransaction Command failure\\\"); return false; } return output_.WriteBuffer(&tr, sizeof(binder_transaction_data)); } \",\"这段代码是客户端❓写 ipc 通信所需要的数据，data 是一个 MessageParcel 对象，从这就可以猜测出，在 native 层，是依靠这个对象来进行数据的传输的。\",\"来看定义：\",\"class MessageParcel : public Parcel { } \",\"其集成了 Parcel 接口，所以我们需要找到 Parcel 的实现。\",\"➡️➡️ 客户端\",\"int TestAbilityProxy::TestPingService(const std::u16string &dummy) { MessageOption option; MessageParcel dataParcel, replyParcel; dataParcel.WriteString16(dummy); int error = Remote()->SendRequest(TRANS_ID_PING_ABILITY, dataParcel, replyParcel, option); int result = (error == ERR_NONE) ? replyParcel.ReadInt32() : -1; return result; } \",\"第 5 行调用到了 SendRequest 方法，\",\"➡️➡️ JNI 层\",\"ipc/native/src/jni/source/ohos_rpc_message_parcel.cpp\",\"/* * Class: ohos.rpc.MessageParcel * Method: nativeWriteRawData * Signature: ([BI)Z */ jboolean JNICALL Java_ohos_rpc_MessageParcel_nativeWriteRawData(JNIEnv *env, jobject object, jobject rawData, jint size) { MessageParcel *nativeParcel = JavaOhosRpcMessageParcelGetNative(env, object); if (nativeParcel == nullptr) { ZLOGE(LABEL, \\\"could not get native parcel for raw data\\\"); return JNI_FALSE; } jbyte *ptr = static_cast<jbyte *>(env->GetPrimitiveArrayCritical(static_cast<jarray>(rawData), 0)); if (ptr == nullptr) { return JNI_FALSE; } bool result = nativeParcel->WriteRawData(ptr, size); env->ReleasePrimitiveArrayCritical(static_cast<jarray>(rawData), ptr, 0); return result ? JNI_TRUE : JNI_FALSE; } \",\"JNI 层函数网上看，函数映射（看注释里面的 Method 也能知道）：\",\"{ \\\"nativeWriteRawData\\\", \\\"([BI)Z\\\", (void *)Java_ohos_rpc_MessageParcel_nativeWriteRawData } \",\"其中 nativeWriteRawData 是给 JNI 的上层使用的，但是并没有找到其调用的地方。💊💊💊\",\"➡️➡️ native 层\",\"18 行我们可以看到，调用了 MessageParcel 的 WriteRawData 方法：\",\"ipc/native/src/core/source/message_parcel.cpp\",\"bool MessageParcel::WriteRawData(const void *data, size_t size) { if (data == nullptr || size > MAX_RAWDATA_SIZE) { return false; } if (kernelMappedWrite_ != nullptr) { return false; } if (!WriteInt32(size)) { return false; } if (size <= MIN_RAWDATA_SIZE) { return WriteUnpadBuffer(data, size); } int fd = AshmemCreate(\\\"Parcel RawData\\\", size); if (fd < 0) { return false; } // ... } \"]},\"1321\":{\"h\":\"Pracel Object(Java)\",\"t\":[\"todo: 本章研究 Pracel 对象的创建等操作[4]。\"]},\"1322\":{\"h\":\"Reference\",\"t\":[\"mmap 接口解析：《一文读懂 mmap 原理》\",\"IPC 通信与 binder 基础介绍：《Android Binder原理图解》\",\"binder 基本原理：《Android Binder原理（一）学习Binder前必须要了解的知识点》\",\"binder 线程池↩︎\",\"Binder驱动之最简单的通信↩︎\",\"5.5 探究Binder Driver↩︎\",\"彻底理解Android Binder通信架构↩︎\"]},\"1323\":{\"c\":[\"Android\"]},\"1324\":{\"c\":[\"kernel\",\"Android\"]},\"1325\":{\"h\":\"Binder Phases\",\"t\":[\"本文主要讲述 Binder 流程中的各个阶段，起到一个 Overview 的目的。\"]},\"1326\":{\"h\":\"Phases Overview\",\"t\":[\"我们想对 binder 做性能优化（这块部分如果后续较为完善的话可以考虑独立出去），可以从几个 phase 进行分解：\",\"🐇🐇 phase 1: app to BpBinder: 从 app 到 Binder 客户端。\",\"phase 2: BpBinder to driver\",\"phase 3: driver send logic\",\"🐇🐇 phase 4: driver to BBinder\",\"🐇🐇 phase 5: BBinder to server\",\"phase 6: server logic\",\"phase 7: server back BBinder\",\"phase 8: BBinder back driver\",\"phase 9: driver reply logic\",\"phase 10: driver back BpBinder\",\"phase 11: BpBinder back app\",\"为方便理解，我们引用下面的图来进行参考说明。\"]},\"1327\":{\"h\":\"Phase 1\",\"t\":[\"App to BpBinder, 图中的 AMP clinet 到 BpBinder 的过程，这个过程主要发生了以下事情：\",\"在 APP 侧，调用 startService(), 在调用该函数之间，会调用到其他的逻辑，我们分别给出一个 OHOS 的示例和 Android 的示例。\"]},\"1328\":{\"h\":\"OHOS\",\"t\":[\"列举了两种方式：期约和回调函数。\",\"import rpc from \\\"@ohos.rpc\\\" // 使用期约 let option = new rpc.MessageOption() let data = rpc.MessageParcel.create() let reply = rpc.MessageParcel.create() // 往 data 里写入参数 proxy.sendRequest(1, data, reply, option) .then(function (result) { if (result.errCode != 0) { console.error(\\\"send request failed, errCode: \\\" + result.errCode) return } // 从result.reply里读取结果 }) .catch(function (e) { console.error(\\\"send request got exception: \\\" + e); }) .finally(() => { data.reclaim() reply.reclaim() }) \",\"使用期约的情况下，客户端完成了几件事情。首先是往 Parcel 对象中写入参数，而后是调用 proxy 的 sendRequest 方法，得到服务端的回复后进行处理。\",\"我们所说的 App to BpBinder 的过程就是：客户端数据封装 –> 调用 BpBinder(在 OHOS 中称作 Proxy) 提供的方法。\",\"// 使用回调函数 function sendRequestCallback(result) { try { if (result.errCode != 0) { console.error(\\\"send request failed, errCode: \\\" + result.errCode) return } // 从 result.reply 里读取结果 } finally { result.data.reclaim() result.reply.reclaim() } } let option = new rpc.MessageOption() let data = rpc.MessageParcel.create() let reply = rpc.MessageParcel.create() // 往 data 里写入参数 proxy.sendRequest(1, data, reply, option, sendRequestCallback) \",\"使用回调函数的过程较为简单，直接是封装数据 –> 发送请求（在我们 phase 1 的过程中）\"]},\"1329\":{\"h\":\"Android\",\"t\":[\"public ComponentName startService(IApplicationThread caller, Intent service, String resolvedType, String callingPackage, int userId) throws RemoteException { // 获取或创建 Parcel 对象 Parcel data = Parcel.obtain(); Parcel reply = Parcel.obtain(); data.writeInterfaceToken(IActivityManager.descriptor); data.writeStrongBinder(caller != null ? caller.asBinder() : null); service.writeToParcel(data, 0); // 写入 Parcel 数据 data.writeString(resolvedType); data.writeString(callingPackage); data.writeInt(userId); // 通过 Binder 传递数据 mRemote.transact(START_SERVICE_TRANSACTION, data, reply, 0); // 读取应答消息的异常情况 reply.readException(); // 根据 reply 数据来创建 ComponentName 对象 ComponentName res = ComponentName.readFromParcel(reply); data.recycle(); reply.recycle(); return res; } \",\"和 JS 的过程基本上一致，挑选其中一些细节进行说明：\",\"➡️➡️ Parcel.obtain() 完成了什么事情？从缓存池中获取一个 Parcel 对象。\",\"public static Parcel obtain() { // sOwnedPool 为 Parcel 对象的缓存池 final Parcel[] pool = sOwnedPool; synchronized (pool) { Parcel p; // POOL_SIZE = 6 for (int i=0; i<POOL_SIZE; i++) { p = pool[i]; if (p != null) { pool[i] = null; return p; } } } //当缓存池没有现成的 Parcel 对象，则直接创建 return new Parcel(0); } \",\"关于 Parcel 对象的创建，我们留到 Pracel 章节进行详细说明。\"]},\"1330\":{\"h\":\"Phase 1 Summary\",\"t\":[\"🩸🩸 从上面上个场景的代码分析我们可以看出来，主要的操作耗时还是在 Pracel 过程中。在后续的研究中，我们可以看到 Pracel 对象的创建和 native world 也是息息相关的，所以这一个 phase 是存在一些优化的空间在的。\"]},\"1331\":{\"h\":\"Phase 2\",\"t\":[\"BpBinder to driver, 这个过程主要是从客户端 native 到 driver 的过程。\"]},\"1332\":{\"h\":\"OHOS\",\"t\":[\"从上文我们了解到，客户端会调用 proxy 的 sendRequest 方法，对应的实现如下：\"]},\"1333\":{\"h\":\"Android\",\"t\":[\"从上文我们了解到，客户端调用到 native 是通过 mRemote.transact 来实现的，该方法的实现如下：\",\"final class BinderProxy implements IBinder { public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException { //用于检测 Parcel 大小是否大于 800k Binder.checkParcel(this, code, data, \\\"Unreasonably large binder buffer\\\"); // 调用 native return transactNative(code, data, reply, flags); } } \",\"这个方法的功能非常简单，主要完成对 native 方法 transactNative 的调用。\",\"transactNative 参数\",\"mRemote.transact() 方法中的\",\"code: START_SERVICE_TRANSACTION,\",\"data 保存 descriptor，caller, intent, resolvedType, callingPackage, userId这 6 项信息。\",\"transactNative 方法对应的 native 函数为 android_os_BinderProxy_transact.\",\"android_util_Binder.cpp\",\"static jboolean android_os_BinderProxy_transact(JNIEnv* env, jobject obj, jint code, jobject dataObj, jobject replyObj, jint flags) { ... //将 java Parcel 转为 C++ Parcel Parcel* data = parcelForJavaObject(env, dataObj); Parcel* reply = parcelForJavaObject(env, replyObj); //gBinderProxyOffsets.mObject 中保存的是 new BpBinder(handle) 对象 IBinder* target = (IBinder*) env->GetLongField(obj, gBinderProxyOffsets.mObject); ... //此处便是 BpBinder::transact() status_t err = target->transact(code, *data, reply, flags); ... //最后根据 transact 执行具体情况，抛出相应的 Exception signalExceptionForError(env, obj, err, true , data->dataSize()); return JNI_FALSE; } \",\"抛开无关细节，主要是调用 target->transact 方法，target 是一个 BpBinder 对象：\",\"BpBinder.cpp\",\"status_t BpBinder::transact( uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags) { if (mAlive) { status_t status = IPCThreadState::self()->transact( mHandle, code, data, reply, flags); if (status == DEAD_OBJECT) mAlive = 0; return status; } return DEAD_OBJECT; } \",\"上述函数采取了单例模式，确保每个线程只有一个实例对象。主要还是调用到 IPCThreadState::transact 方法：\",\"IPCThreadState.cpp\",\"status_t IPCThreadState::transact(int32_t handle, uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags) { status_t err = data.errorCheck(); // 数据错误检查 flags |= TF_ACCEPT_FDS; .... if (err == NO_ERROR) { // 传输数据 err = writeTransactionData(BC_TRANSACTION, flags, handle, code, data, NULL); } if (err != NO_ERROR) { if (reply) reply->setError(err); return (mLastError = err); } // 默认情况下，都是采用非 oneway 的方式, 也就是需要等待服务端的返回结果、同步 if ((flags & TF_ONE_WAY) == 0) { if (reply) { // reply 对象不为空 err = waitForResponse(reply); }else { Parcel fakeReply; err = waitForResponse(&fakeReply); } } else { err = waitForResponse(NULL, NULL); } return err; } \",\"通常情况下会走同步模式，也就是 oneway。两个模式都会调用到 waitForResponse 函数。\",\"在看 waitForResponse 函数之间，我们先简单说明一下 transact 的主要过程：\",\"首先、执行 writeTransactionData（第 10 行）向 mOut 写入数据，此时 mIn 还没有数据；\",\"然后执行 waitForResponse 方法，该方法循环执行，直到收到应答消息，此间调用 talkWithDriver 和驱动交互，收到应答消息后写入 mIn, 根据响应码分类操作。\",\"如果我们不再往下研究的话，此时客户端视角下的通信已经完成了，而我们的 phase 2 就是到此为止。\",\"writeTransactionData 的实现大致如下：\",\"IPCThreadState.cpp\",\"status_t IPCThreadState::writeTransactionData(int32_t cmd, uint32_t binderFlags, int32_t handle, uint32_t code, const Parcel& data, status_t* statusBuffer) { binder_transaction_data tr; tr.target.ptr = 0; tr.target.handle = handle; // handle 指向 AMS tr.code = code; // START_SERVICE_TRANSACTION tr.flags = binderFlags; // 0 tr.cookie = 0; tr.sender_pid = 0; tr.sender_euid = 0; const status_t err = data.errorCheck(); if (err == NO_ERROR) { // data 为 startService 相关信息 tr.data_size = data.ipcDataSize(); // mDataSize tr.data.ptr.buffer = data.ipcData(); // mData 指针 tr.offsets_size = data.ipcObjectsCount()*sizeof(binder_size_t); // mObjectsSize tr.data.ptr.offsets = data.ipcObjects(); // mObjects 指针 } ... mOut.writeInt32(cmd); // cmd = BC_TRANSACTION mOut.write(&tr, sizeof(tr)); // 写入 binder_transaction_data数据 return NO_ERROR; } \",\"23-24 行将数据写入了 mOut, 写入的类型是 binder_transaction_data 类型。\",\"waitForResponse 的实现大概如下：\",\"status_t IPCThreadState::waitForResponse(Parcel *reply, status_t *acquireResult) { int32_t cmd; int32_t err; while (1) { if ((err=talkWithDriver()) < NO_ERROR) break; err = mIn.errorCheck(); if (err < NO_ERROR) break; //当存在 error 则退出循环 //每当跟 Driver 交互一次，若 mIn 收到数据则往下执行一次 BR 命令 if (mIn.dataAvail() == 0) continue; cmd = mIn.readInt32(); switch (cmd) { case BR_TRANSACTION_COMPLETE: //只有当不需要 reply, 也就是 oneway 时才会跳出循环,否则还需要等待. if (!reply && !acquireResult) goto finish; break; case BR_DEAD_REPLY: err = DEAD_OBJECT; goto finish; case BR_FAILED_REPLY: err = FAILED_TRANSACTION; goto finish; case BR_REPLY: ... goto finish; default: err = executeCommand(cmd); if (err != NO_ERROR) goto finish; break; } } finish: if (err != NO_ERROR) { if (reply) reply->setError(err); // 将发送的错误代码返回给最初的调用者 } return err; } \",\"这里面又引入了关键的操作：talkWithDriver 和 executeCommand;\",\"这两者的功能是：执行 binder 读写操作，也就是 BINDER_WRITE_READ, 会经过 syscall, 进入 Binder 驱动，调用驱动中的 binder_ioctl 函数。在 default 的情况下，会调用后者；其他情况下是在 talkWithDriver 对 executeCommand 进行调用。\",\"OK，Phase 2 到此为止。\"]},\"1334\":{\"h\":\"Phase 2 Summary\",\"t\":[\"总结一下，BpBinder 到 Binder Driver 做了什么事情？\",\"首先，我们找到 native 层的方法，\"]},\"1335\":{\"c\":[\"Android\"]},\"1336\":{\"c\":[\"kernel\",\"Android\",\"Binder\"]},\"1337\":{\"h\":\"Binder 内存管理\"},\"1338\":{\"h\":\"概览\",\"t\":[\"Binder 内存管理指的是：管理 binder mmap 映射的这块缓冲区。其中有两个关键的数据结构：\",\"binder_alloc：缓冲区分配器，对每个使用 binder 进行 IPC 通信的进程，事先建立一个缓冲区；\",\"binder_buffer: 描述缓冲区的数据结构\",\"本文先对这两个关键的数据结构进行研究，然后再逐一分析使用这些数据结构的相关函数和算法。\"]},\"1339\":{\"h\":\"数据结构分析\"},\"1340\":{\"h\":\"binder_alloc\",\"t\":[\"struct binder_alloc { struct mutex mutex; // 指向调用 mmap 时分配的 vm_area_struct（描述用户空间的虚拟地址） struct vm_area_struct *vma; // 该进程的用户空间及相关信息 struct mm_struct *vma_vm_mm; // vm_area_struct 的起始地址 void __user *buffer; // 一个双向循环链表 struct list_head buffers; // 红黑树，管理所有可分配的 binder_buffer, 按 buffer 大小排序 struct rb_root free_buffers; // 管理所有已分配的 binder_buffer, 按 buffer 的起始的用户空间虚拟地址排序 struct rb_root allocated_buffers; size_t free_async_space; // 数组，每个元素对应一个物理页，用于物理页回收 struct binder_lru_page *pages; // 整个缓冲区大小 size_t buffer_size; uint32_t buffer_free; int pid; size_t pages_high; }; \",\"vm_area_struct 数据结构用于描述用户空间的虚拟地址，其中包括虚拟地址相关的信息。\",\"在缓冲区初始化或者分配以后，内存中会多出如下几个数据结构：\",\"需要注意，其中 allocated_buffers 红黑树此时是一个空树。\"]},\"1341\":{\"h\":\"binder_buffer\",\"t\":[\"binder_buffer 数据结构用于表示缓冲区：\",\"struct binder_buffer { /* 表示链表中的一个节点；将 binder_buffer 插入 binder_alloc 的 buffer 链表时， * 就是将该 entry 插入链表中；遍历链表的时候 * 拿到该 entry, 可通过 API 获取对应的 binder_buffer */ struct list_head entry; /* free and allocated entries by address */ // 在红黑树中 binder_buff 的表示：free_buffers 和 allocated_buffers struct rb_node rb_node; /* free entry by size or allocated entry */ /* by address */ unsigned free:1; // 标识该 buffer 是空闲的 unsigned allow_user_free:1; unsigned async_transaction:1; unsigned debug_id:29; struct binder_transaction *transaction; // 与该缓冲区关联的 binder_transaction struct binder_node *target_node; // 与该缓冲区关联的 binder_node size_t data_size; // transaction 数据的大小 size_t offsets_size; // offsets 数组的大小 size_t extra_buffers_size; // 其他对象的空间大小 void __user *user_data; // 用户空间的虚拟地址，指向该缓冲区的起始位置 int pid; // 所属进程的 id }; \"]},\"1342\":{\"h\":\"mmap 的两个函数\",\"t\":[\"有两个函数和 mmap 和上述的两个数据结构息息相关：\",\"binder_alloc_mmap_handler()：用户分配空间，参数 struct binder_alloc *alloc 和 struct vm_area_struct *vma\",\"binder_alloc_copy_user_to_buffer()：将客户端的数据 copy 到缓冲区，逐个物理页处理。\",\"通过 kmap 建立内核空间虚拟地址和物理页的映射\",\"通过 copy_from_user 按页拷贝\",\"通过 kunmap 取消映射\"]},\"1343\":{\"h\":\"binder_alloc_mmap_handler()\",\"t\":[\"todo\"]},\"1344\":{\"h\":\"binder_alloc_copy_user_to_buffer()\",\"t\":[\"其代码如下：\",\"/** * binder_alloc_copy_user_to_buffer() - copy src user to tgt user * @alloc: binder_alloc for this proc * (指向 binder_alloc 数据结构) * @buffer: binder buffer to be accessed * （指向 binder_buff 数据结构）从缓存区中划分出一小块，用于接收客户端数据； * buffer 是否已经分配物理内存？取决于 kzmalloc * @buffer_offset: offset into @buffer data * @from: userspace pointer to source buffer * @bytes: bytes to copy * * Copy bytes from source userspace to target buffer. * * Return: bytes remaining to be copied */ unsigned long binder_alloc_copy_user_to_buffer(struct binder_alloc *alloc, struct binder_buffer *buffer, binder_size_t buffer_offset, const void __user *from, size_t bytes) { if (!check_buffer(alloc, buffer, buffer_offset, bytes)) return bytes; while (bytes) { unsigned long size; unsigned long ret; struct page *page; pgoff_t pgoff; void *kptr; page = binder_alloc_get_page(alloc, buffer, buffer_offset, &pgoff); size = min_t(size_t, bytes, PAGE_SIZE - pgoff); kptr = kmap(page) + pgoff; ret = copy_from_user(kptr, from, size); kunmap(page); if (ret) return bytes - size + ret; bytes -= size; from += size; buffer_offset += size; } return 0; } \"]},\"1345\":{\"h\":\"caller: binder_transaction()\",\"t\":[\"binder_alloc_copy_user_to_buffer 函数在 binder_transaction 中被调用。\",\"if(binder_alloc_copy_user_to_buffer( &target_proc->alloc, t->buffer, 0, (const void __user *) (uintptr_t)tr->data.ptr.buffer, tr->data_size))) \",\"重点关注其中的 buffer, 来自于 t->buffer, t 是一个 struct binder_transaction *t, binder_transaction 中有一个 binder_buffer 类型的成员变量; 其赋值的语句如下：\",\"t = kzalloc(sizeof(*t), GFP_KERNEL); \",\"第一个参数，含义为 size\",\"第二个参数，含义为分配的内存类型\",\"kzalloc 函数的定义和实现如下：\",\"/** * kzalloc - allocate memory. The memory is set to zero. * @size: how many bytes of memory are required. * @flags: the type of memory to allocate (see kmalloc). */ static inline void *kzalloc(size_t size, gfp_t flags) { return kmalloc(size, flags | __GFP_ZERO); } \",\"kzalloc() 分配一个指定大小的内存块，并将其初始化为 0。它类似于 kmalloc()，但会自动将分配的内存清零，以避免敏感数据泄露。\",\"如果分配成功，则返回指向分配内存块的指针。注意，这个函数分配的是内核中的虚拟内存。\",\"关于 malloc 内存分配\",\"malloc 内存分配的时候，内核会给申请者分配一个物理页，如果不够的话，再触发缺页异常。\",\"接下来再看 tr->data.ptr.buffer 的含义，这是第四个参数 @from: userspace pointer to source buffer；tr 是 binder_transaction 自带的参数，类型为 binder_transaction_data, 数据结构如下：\",\" union { struct { /* transaction data */ binder_uintptr_t buffer; /* offsets from buffer to flat_binder_object structs */ binder_uintptr_t offsets; } ptr; __u8 buf[8]; } data; \",\"最后一个参数也是来自于 tr.\"]},\"1346\":{\"h\":\"callee\"},\"1347\":{\"c\":[\"Android\",\"Kernel\"]},\"1348\":{\"c\":[\"kernel\",\"Android\",\"Binder\"]},\"1349\":{\"h\":\"IPC Binder 之杂谈\"},\"1350\":{\"h\":\"Abstract\",\"t\":[\"进程间通信（IPC） 在系统中非常重要，目前 Android 的 binder 方案已经属于行业内非常优秀的实践案例；但是作为软件从业人员，如果仅仅满足于现有架构或者技术的优势，这是远远不够的。所以本文有几个重要的目的：\",\"第一是从对比、实践、设计的角度去看看 binder 有什么缺陷和改进点\",\"第二是研究一下业界最新的技术是如何优化 IPC 的，或者说有没有什么新的思路借鉴？\",\"第三是一些杂谈\"]},\"1351\":{\"h\":\"Binder 优缺点\"},\"1352\":{\"h\":\"优点\",\"t\":[\"对于 binder 具体的分析可以看我的另一篇博文《Research on Binder》，在此对具体的技术细节就不进行赘述，总的来看，binder 的优点包括以下几个：\",\"第一，binder 只需要进行一次内存拷贝；\",\"第二，binder 的使用非常简单（在上层 service 看来，只需要一个客户端、一个服务端，C/S 架构，超级简单）\",\"第三，binder 很安全。binder 没有打破进程隔离的属性，并且在上层的 C/S 之间也有丰富的鉴权机制\",\"最后，个人认为最重要的：Google 开发 binder 已经有很多年了，期间做了无数精妙的优化（这句话是想说，一个项目有很多优秀的从业者持续优化）\",\"主要就是因为这几个优点，导致了 binder 在 Android 中的地位不可撼动。\"]},\"1353\":{\"h\":\"缺点\",\"t\":[\"但是随着对 binder 技术的稍微深入，我们发现，binder 的设计本质上是一个 trade-off: 牺牲了一部分性能，换取了安全和架构上的简洁，这也就是我们要说的 binder 的缺点：\",\"第一，性能不是最优。虽然 binder 只需要一次拷贝，但是就是因为这次拷贝，使得 binder 的性能还存在 overhead, 具体来说：能不能避免这次拷贝？肯定能！但是为什么 Google 没做？我们上面说过，做了取舍；\",\"第二，通信的信息大小存在限制。从 binder 的实现来看，因为使用了 mmap, 所以要在 kernel space 和 user space 之间做映射，这意味着需要在内核的地址空间占用临时映射区的空间，一个进程占一些，那进程多了，映射空间不够用怎么办？所以说 Android 严格限制了一个进程可以映射的内存大小，来规避这个问题；这也就是 Binder 的第二个缺点；\",\"除此之外，Binder 本身比较复杂，如果需要 debug, 这会是一场灾难（当然，所有的进程间通信都是）；\",\"还有一点，吹毛求疵一下：几乎无可扩展性；为 Android 专门设计的，想迁移到诸如微内核等上面？不存在的。\"]},\"1354\":{\"h\":\"其他选择：dIPC\",\"t\":[\"dIPC 是一篇论文的实现：《Direct Inter-Process Communication (dIPC): Repurposing the CODOMs Architecture to Accelerate IPC》，这篇论文的研究可以看我的另一篇文章。\",\"简单来说，这篇文章为了解决 IPC（或者 Binder）性能问题，将需要进行进程间通信的进程分配到了一个共享页表中，然后使用自定义的隔离算法来保证安全性。\"]},\"1355\":{\"h\":\"dIPC 设计理念\",\"t\":[\"dIPC 的设计第一次让人看到时会有比较惊艳的感觉：我在此引用作者的 Abstract 中的一个内容：\",\"In current architectures, page tables are the fundamental mechanism that allows contemporary OSs to isolate user processes, binding each thread to a specific page table.\",\"作者刚开始就对现有的页表机制做了抨击！做创新、做学术就应该如此，敢于挑战权威和质疑现有的所有实现，这样才是进步之道。不管作者如何实现，这都为我们提供了一个新的思路：打破页表的限制！\",\"那么作者是如何做的呢？作者复用了他之前的一个研究：CODOMs, 这个研究主要针对于单个进程之间的组件隔离，将多个组件按照页表，区分为多个域，每个域之间确定隔离策略。比如说可以进行通信和数据交互的域，我给配置读写权限；如果没有关系的域，就配置隔离策略。需要注意，这不是一个纯粹的软件策略，从页表上动手，意味着我们硬件也可以出手了，这就意味着：软硬件协同的机会来了！\",\"// some image\",\"我们截取论文中的一张图片进行简单介绍：在 dIPC 中，当两个进程要进行通信的时候，kernel 会负责创建（或者说自动生成）一个 proxy 对象，这个 proxy 对象拥有对客户端的读权限和服务端的写权限，这是在用户态可以配置的；如此一来就在不用拷贝数据到内核地址空间的情况下完成了进程间通信。\"]},\"1356\":{\"h\":\"dIPC 优点\",\"t\":[\"dIPC 优点十分明显，Binder 中令人诟病的一次拷贝没有了！这肯定会带来巨大的性能提升。除此之外，dIPC 的通信是不需要进过 kernel 的，这也就意味着不需要陷入内核，不需要系统调用等！事实上，系统调用的时间在轻量级通信中的占比还是很大的。\",\"还有一个优点是论文作者引以为傲的：做了一个很完善的隔离策略，安全并且灵活。我们在此不进行赘述了，这也是作者的工作量所在。\"]},\"1357\":{\"h\":\"dIPC 缺点\",\"t\":[\"既然说作者做出了一个安全策略，那么是否真的安全？安全度达标吗？这个是要持有疑问的；\",\"除此之外，这个算法的实现还是比较复杂的（相比于 Binder，其实简单太多了，但是难就难在，说服别人接受你这个技术，并且应用起来，是一件很困难的事情）；\",\"还有一个不利因素：需要硬件配合。没有较好的软硬件协同能力，这事情就会很难。（🧨🧨这点我不是非常确定，从理论上来说，修改页表只需操作系统介入即可）；\",\"还有一点就是 CODOMs 为了解决获取隔离权限时候的查表操作，做了一个硬件 cache, 方便快速查权限；这也是一个较为损耗面积的修改。\"]},\"1358\":{\"h\":\"Axx\",\"t\":[\"该技术相比 binder 是更加高效，主要是解决了 binder 线程调度造成的性能瓶颈；但是相比于 dIPC, 并没有避免一次拷贝操作。（在此不详细展开）\"]},\"1359\":{\"h\":\"总结\",\"t\":[\"我们初步研究分析了一下三种进程间通信的方式，本文行为比较随性，较为学术的文章可以参考具体技术的架构和代码分析，如有不到之处，还请各位大佬不吝赐教。\"]},\"1360\":{\"c\":[\"Android\"]},\"1361\":{\"c\":[\"kernel\",\"Android\",\"Binder\"]},\"1362\":{\"h\":\"ART Create\"},\"1363\":{\"h\":\"Abstract\",\"t\":[\"Art 的创建过程是一个很复杂的命题，所以我们单独开设一章来对这个过程进行学习。\",\"@todo 增加全局的流程图。\"]},\"1364\":{\"h\":\"Art Create\"},\"1365\":{\"h\":\"JNI_CreateJavaVM\",\"t\":[\"当我们选择了 ART 运行时，Zygote 进程在启动过程中，会调用 libart.so 里面的函数 JNI_CreateVM 来创建一个 art 虚拟机，这个函数的实现如下：\",\"// art/runtime/jni/java_vm_ext.cc // JNI Invocation interface. extern \\\"C\\\" jint JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) { ScopedTrace trace(__FUNCTION__); const JavaVMInitArgs* args = static_cast<JavaVMInitArgs*>(vm_args); if (JavaVMExt::IsBadJniVersion(args->version)) { LOG(ERROR) << \\\"Bad JNI version passed to CreateJavaVM: \\\" << args->version; return JNI_EVERSION; } RuntimeOptions options; for (int i = 0; i < args->nOptions; ++i) { JavaVMOption* option = &args->options[i]; options.push_back(std::make_pair(std::string(option->optionString), option->extraInfo)); } bool ignore_unrecognized = args->ignoreUnrecognized; if (!Runtime::Create(options, ignore_unrecognized)) { return JNI_ERR; } // Initialize native loader. This step makes sure we have // everything set up before we start using JNI. android::InitializeNativeLoader(); Runtime* runtime = Runtime::Current(); bool started = runtime->Start(); if (!started) { delete Thread::Current()->GetJniEnv(); delete runtime->GetJavaVM(); LOG(WARNING) << \\\"CreateJavaVM failed\\\"; return JNI_ERR; } *p_env = Thread::Current()->GetJniEnv(); *p_vm = runtime->GetJavaVM(); return JNI_OK; } \",\"这个函数不长，其核心的代码是调用 Runtime::Create 来进行虚拟机创建；在创建之前，将参数 vm_args 转换为 JavaVMInitArgs 对象，按照 key-value 的形式保存在 JavaVMOption 中，并以该向量作为传入传递给 Runtime::Create 来创建虚拟机。\"]},\"1366\":{\"h\":\"Runtime::Create\",\"t\":[\"Runtime::Create 的实现如下所示：\",\"// art/runtime/runtime.cc bool Runtime::Create(RuntimeArgumentMap&& runtime_options) { // TODO: acquire a static mutex on Runtime to avoid racing. if (Runtime::instance_ != nullptr) { return false; } instance_ = new Runtime; Locks::SetClientCallback(IsSafeToCallAbort); if (!instance_->Init(std::move(runtime_options))) { // TODO: Currently deleting the instance will abort the runtime on destruction. Now This will // leak memory, instead. Fix the destructor. b/19100793. // delete instance_; instance_ = nullptr; return false; } return true; } bool Runtime::Create(const RuntimeOptions& raw_options, bool ignore_unrecognized) { RuntimeArgumentMap runtime_options; return ParseOptions(raw_options, ignore_unrecognized, &runtime_options) && Create(std::move(runtime_options)); } \",\"上面列举了两个函数，做了参数重载，其实还是调用到了第一个函数。instance_ 是 Runtime 类的静态成员变量，指向进程中的一个 Runtime 单例，这个单例就是描述当前进程的 art 虚拟机实例；第 5 行判断了这个实例是否已经存在了（即当前进程是否已经创建有一个 ART 虚拟机实例），如果已有的话，函数返回，否则的话，创建一个 art 虚拟机实例（第 8 行），创建的实例保存在静态成员变量 instance_ 中，然后调用 Runtime 类的成员函数 Init() 对新创建的 art 虚拟机进行初始化。\"]},\"1367\":{\"h\":\"Runtime::Init()\",\"t\":[\"Runtime::Init() 的实现如下所示：\",\"// art/runtime/runtime.cc bool Runtime::Init(RuntimeArgumentMap&& runtime_options_in) { // ... } \",\"由于这个函数 700 多行，所以就不在这边列举源码了。\"]},\"1368\":{\"c\":[\"JAVA\"]},\"1369\":{\"c\":[\"jvm\",\"java\"]},\"1370\":{\"h\":\"ART dex2oat\"},\"1371\":{\"h\":\"Abstract\",\"t\":[\"本文主要研究 art 中的 dex2oat 模块。\",\"写作本文的目的在于，笔者在研究 getCharNoCheck 的 native 实现的时候，发现其调用的路径是与 dex2oat 有关的，所以对这个模块进行简单的研究；\",\"第一阶段本文主要研究，Andriod 运行时 art 加载 oat 文件的过程分析，写作时间2022年10月28日；\",\"第二阶段主要对本文进行补充，包括 oat 文件结构的研究；\"]},\"1372\":{\"h\":\"Art & oat\"},\"1373\":{\"h\":\"oat 文件的产生\",\"t\":[\"首先需要弄明白，oat 文件是如何产生的？首先是 Art 虚拟机的创建过程，我们在前文已经进行了研究。\",\"@todo\"]},\"1374\":{\"h\":\"dex2oat 什么时候被触发\",\"t\":[\"dex2oat 进程的启动，可以分为两类：\",\"Installd 进程触发的 dex2oat\",\"应用安装；包括普通安装和通过 shellCmd 安装，安装一个 app 的过程中需要编译 dex 文件，会通知 Installd 来触发一个 dex2oat 进程\",\"开机扫描，开机过程中，PMS 扫描已安装 app 过程，判断需要优化时，则会对 installd 发出通知\",\"BackgroundDexOptService，空闲时段或者开机之后触发的 Backgroud 的 Job，会通知 installd 进行dex2oat\",\"OTADexoptService, 疑似 OTA 过程中触发\",\"由 app 中直接调用的 dex2oat；App 进程 fork 出一个子进程，子进程用来执行 dex2oat, 编译相关的 dex, 父进程进行 waitpid 等待，等待完成后再运行其他逻辑。\",\"微信安装后的首次启动，有 dex2oat 的调用；\",\"淘宝安装后的首次搜索，有 dex2oat 的调用\"]},\"1375\":{\"h\":\"dex2oat code\"},\"1376\":{\"h\":\"main()\",\"t\":[\"dex2oat 的 main 函数定义如下：\",\"// art/dex2oat/dex2oat.cc int main(int argc, char** argv) { int result = static_cast<int>(art::Dex2oat(argc, argv)); // Everything was done, do an explicit exit here to avoid running Runtime destructors that take // time (bug 10645725) unless we're a debug or instrumented build or running on a memory tool. // Note: The Dex2Oat class should not destruct the runtime in this case. if (!art::kIsDebugBuild && !art::kIsPGOInstrumentation && !art::kRunningOnMemoryTool) { art::FastExit(result); } return result; } \",\"在 main 函数中，调用了 Dex2oat；\"]},\"1377\":{\"c\":[\"JAVA\"]},\"1378\":{\"c\":[\"jvm\",\"java\"]},\"1379\":{\"h\":\"Art GC Overview\",\"t\":[\"本篇文章首先对 JAVA Art 中的 GC 进行一个全局性的概览，后续如果要研究技术细节等，再另起新的文章进行重点研究。\",\"提示\",\"本篇主要研究 ConcurrentCopying GC 的技术细节。\"]},\"1380\":{\"h\":\"Forwarding Ptr\",\"t\":[\"在 art 虚拟机中，FW Ptr 是一个很重要的概念，通常在 \\\"mark and sweep\\\" phase 中使用。\",\"整个过程的描述大致为，gc collector 扫描存活对象和其引用的对象，确定这些对象应该继续存活还是被回收，在 mark phase 完成以后，gc collector 开始 \\\"sweep\\\" phase, 在这个 phase 中，会回收那些堆中没有被 \\\"mark\\\" 的对象（这些对象不会再被使用了）；\",\"上面的过程中会存在一个问题，在 mark phase 中被 mark 的对象如果在此期间被移动到了一个新的内存位置，gc 将会给这个对象设置一个 forwading address, 用于表示对象移动到的新的内存地址；\",\"接下来，gc collector 进行引用计数的时候，就可以读取对象的 forwarding address, 如此确保对象的地址是正确的，即使对象发生了移动。\",\"对于上面所说的对象发生移动，在不同的 gc collector 中的实现都是不同的，比如我们重点研究的 CC GC, 其把对象从 from_space copy 到 to_space 的过程，就是发生了对象的移动。对于在 CC GC 中（或者相似的基于 copy 的 GC），FW Ptr 的应用可能是通过以下步骤的：\",\"在 to_space 中为需要拷贝的对象分配一个新的 block, 或者分配一个内存，该过程完成后返回 to_ref 的地址；\",\"collector traverses 对象图，找到 from_space 中的存活对象，并且进行 \\\"mark\\\";\",\"在 traverse 过程中，会把 from_space 中的存活对象 copy 到 to_space 中，在这个过程中，我们的 forwarding address 就生效了，在拷贝的时候，我们给 from_ref 设置一个 FW Ptr, 指向 to_ref;\",\"如果要发生对象的修改、更新或者拷贝，则都会使用新的 forwarding address;\",\"最后就是 from_space 的释放等操作。\"]},\"1381\":{\"h\":\"Read Barrier in Art GC\",\"t\":[\"Art 中 Read Barrier 的作用是：在并发场景下，用来确保线程看到最新的对象的值。\",\"当一个线程读取一个对象的引用的时候，会调用到 read barrier 的 intrinsic method, 这个方法用于 check 这个对象的引用(the reference points to an object) 是否正在被移动或者这个对象的引用指向一个 fordwarding address，如果 reference 指向正在被移动的对象，该方法等待对象移动完毕然后更新其引用到新的位置；如果 reference 指向一个 forwarding address, 则这个方法更新引用到新的位置。\",\"提示\",\"为了方便理解，引用一段英文原文：\",\"When a thread reads from a reference to an object, the read barrier intrinsic method is called. The method checks whether the reference points to an object in the process of being moved, or whether the reference points to a forwarding address. If the reference points to an object in the process of being moved, the method waits until the move is completed and then updates the reference to point to the new location. If the reference points to a forwarding address, the method updates the reference to point to the new location.\",\"在上述的解释中，我们提到了一个对象 \\\"be moved\\\", 那么如何确定对象是处于这个状态的呢？我们使用了 forwarding address, 如果一个对象被移动了，那么 forwaring address 就会被创建。\",\"我们现在需要联系 read barrier 和 marking phase，copying phase 之间的关系：\",\"在 marking phase 中，read barrier 无需使能，因为该 phase 不发生对象的 copy or move;\",\"在 copying phase 中，我们需要了解： \",\"如果一个线程读取到的对象的引用(reference to an object) 正在被 copy, read barrier 将等待对象拷贝完成，之后再进行引用的更新；\",\"上述等待的实现称作\\\"thread suspension\\\", 该技术允许 art gc 暂时地暂停线程（这个线程此时访问正在拷贝的对象的引用）\"]},\"1382\":{\"h\":\"Concepts\"},\"1383\":{\"h\":\"reference of object\",\"t\":[\"❓❓如何理解 reference of object?\",\"💚通常的概念如下：\",\"一个对象创建后，会在堆上为其分配内存，the reference of this objct 就是这块内存；我们可以使用变量、表达式来表示指向这个对象存储内存的位置；\",\"在常见的编程语言中，Object 通常用 reference 来表示；一个 reference 可以赋值给变量，按照函数参数传递，或者存储在数据结构中；\",\"通常 reference 包含内存地址或者指向对象内存位置的指针；程序需要访问 Object 的时候，可以通过 reference 实现；\",\"通常 reference 由 runtime 或者虚拟机管理，他们负责追踪对象的 reference, 或者分配、释放内存；\",\"🧡在 GC 中的 reference:\",\"在 GC 中，reference 通常用来确定哪个对象正在被使用或者哪个对象可以安全地被释放；\",\"GC collector 追踪所有对象的 reference(references to object), 并且可以识别在程序运行期间哪个对象是可达的，不可达对象在 GC 中被视为垃圾；\",\"💛一个对象引用了其他对象如何理解？在 ART 中的内存布局又是如何的呢？\",\"首先，在 ART 的 context 中，object reference 的含义是：A variable or field that holds a reference to another object;\",\"如果一个 object 持有另一个 object 的 reference, 那就意味着前者可以访问、修改后者的数据；\",\"基于第 2 点，在 GC 中，如果一个 object 持有另一个 object 的 reference, 则在回收该对象的时候，必须确定其引用的对象不会被意外回收（如果其引用的对象还在被使用的话）；\",\"为了解决这个问题，ART 引入了 read barrier 机制；\"]},\"1384\":{\"h\":\"Colors in GC\"},\"1385\":{\"h\":\"Overview\",\"t\":[\"GC 中的染色用来表征到堆中对象的状态：be terms used to refer to the current state of objects in the heap.\",\"⚪⚪⚪ White: not reachable by the programmer, can be safely GC;\",\"🟤🟤🟤 Gray: objects that have been discovered by the GC algorithm as potentially reachable, but have not yet been fully processed;\",\"⚫⚫⚫ Black: objects that have been fully processed by the GC algorithm and are guaranteed to be reachable by the program;\",\"再 mark-and-sweap phase 中，heap 的初始状态都被假定为完全的 White, GC 从 root 节点开始(set 数据结构) 并且将可达对象标记为 Gray, 然后遍历 Gray 对象，将其引用的对象也标记为 Gray (any objects they reference); 当一个对象和其本身引用的对象都被标记完成以后，将其标记为 Black.\",\"最后，任何留下来的 White 对象都将被垃圾回收。\"]},\"1386\":{\"h\":\"CC GC colors\",\"t\":[\"在 CC GC 中，其实现相比于传统的染色算法更加复杂一些，我们重点先研究一下 Gray 对象：\",\"Gray: marked in bitmap, and exists in mark stack\",\"Gray-dirty: marked in bitmap, rb_state is gray, corresponding card is dirty, and exists in mark stack\",\"CC GC 中两者的区别在于：\",\"Gray: bitmap 中 mark 了，并且 mark_stack 中也存在；\",\"Gray-dirty: 除了 Gray 的特征之外，rb_state 是 gary, 并且其卡表也是 dirty.\",\"在此稍微说明一下 card 的概念：refers to a small fixed-size portion of the heap. 注意主体 heap.\",\"在 CC GC 中，有一件事情需要特别注意：除了 Gray 对象之外，其他所有的对象都不会存在于 mark_stack 中。\"]},\"1387\":{\"h\":\"GC Phases\"},\"1388\":{\"h\":\"Marking Phase\",\"t\":[\"Before marking phase\",\"All objects are white\",\"Cards are either clean or aged (cannot be asserted without a STW pause)\",\"Mark bitmap is cleared\",\"Mark stack is empty\",\"上述很好理解，符合我们染色算法中的定义：在 marking phase 之前，所有的对象都是 White 的；\",\"During marking phase\",\"If a black object holds an inter-region or white reference, then its corresponding card is dirty. In other words, it changes from being black-clean to black-dirty\",\"No black-clean object points to a white object\",\"这段比较难理解。\",\"Black 对象持有 White 对象的引用，则 Black 对象的 card 是 dirty 的；不难理解，在染色算法中，Black 对象是最后标记的，对象的生命周期的颜色变化一般是：White -> Gray -> Black, 或者 always White;\",\"但是 CC GC 中可能❓会发生一些操作，使得 Black 对象持有了 White 对象的引用，此时 CC GC 的处理是将 该 Black 对象状态转换为 Black-dirty;\",\"Black-dirty 和 Black-clean\",\"Black-dirty: marked in bitmap, and corresponding card is dirty.\",\"Black-clean: marked in bitmap, and corresponding card is clean/aged\",\"​ 没有 black-clean 的对象指向 white object, 我的简单理解就是：都变成了 Black-dirty.\",\"Marking Phase 过后\",\"After marking phase\",\"There are no gray objects\",\"All newly allocated objects are in from space\",\"No white object can be reachable, directly or otherwise, from a black-clean object\",\"在 Marking Phase 之后：1. Gray objects 都没有了；2. 新分配的对象在 from-space; ❓ 这里存疑，还尚不清楚这里是否发生了翻转❌；通常而言，对象的分配也都是在 from-space 中的？ – 后面 Copying Phase 会解答疑问：简单而言，就是在 Marking Phase 中，对象是在 from-space 中分配的；3. White 对象没有再被 reachable 的了；合理，达到了染色标记的目的。\"]},\"1389\":{\"h\":\"Copying Phase\",\"t\":[\"During copying phase\",\"Mutators cannot observe white and black-dirty objects\",\"New allocations are in to-space (newly allocated regions are part of to-space)\",\"An object in mark stack must have its rb_state = Gray\",\"Mutator 线程看不到 White or Black-dirty 对象； \",\"对于这句话的理解，可能要分为几个维度；首先 Copying Phase 是在 Marking Phase 之后的，所以此时应该是： \",\"White: 不可达对象\",\"Black-dirty: ❓较难理解，其实还是需要弄清楚为什么会产生 Black-dirty 对象？\",\"我们禁止 mutator 线程看到不可达的对象，其中会使用一些技术；@todo 到底是怎么实现的呢？\",\"新分配的对象在 to-space 中；这个好理解，对比前面在 Marking Phase 中，我们只允许新分配的对象在 from-space 中；\",\"mark stack 中的对象 rb_state = Gray;  这是在 Copying Phase 中的一个限制\"]},\"1390\":{\"c\":[\"JAVA\"]},\"1391\":{\"c\":[\"jvm\",\"GC\"]},\"1392\":{\"h\":\"ART JNI\",\"t\":[\"本篇文章主要是研究 ART 虚拟机中的 native 方法相关的处理流程，凡是涉及到 native 相关的，都会在本篇文章中进行收录。\",\"JNI 原理、基础知识\",\"Java native 函数的定义、使用以及编译\",\"JNI 层的实现\",\"native 函数注册的流程、函数等\"]},\"1393\":{\"h\":\"Abstract\",\"t\":[\"本文分为几个部分：\",\"第一个部分研究 libcore 中的一个 @FastNative 例子，通过这个例子简单了解 Java native 函数的基本调用流程；\",\"native 函数的总结：分为几张图标进行说明；\"]},\"1394\":{\"h\":\"JNI\"},\"1395\":{\"h\":\"Abstract\",\"t\":[\"JNI 的全称是 Java Native Interface, 通过 JNI 技术，可以做到以下几点：\",\"Java 程序中可以调用 Native 语言写的函数；一般是 C/C++ 编写的函数；\",\"Native 程序中的函数可以调用 JAVA 层的函数；也就是说 在 C/C++ 中可以调用 JAVA 层的函数；\",\"仔细思考一下，如果引用了 JNI, 是不是就破坏了 JAVA 的平台无关性呢？其实不尽然，引入 JNI 有以下的好处：\",\"JAVA 虚拟机是由 Native 语言写的，并不是平台无关的，而 JNI 层可以对 JAVA 层屏蔽平台之间的差异，有助于实现 JAVA 本身平台无关的特性；\",\"很多程序都用 Native 语言写的，用 JNI 就可以直接使用了，避免了重复造轮子。\"]},\"1396\":{\"h\":\"JAVA World to Native World\",\"t\":[\"这个问题是萦绕在初学 JNI 的时候一个很大的问题，到底 Java 是如何调用 Native 的函数的呢？首先先看 Java 世界、JNI 世界和 Native 世界之间的关系：\",\"除此之外，为了方便理解，再图上增加了一个 MediaScanner 实例进行说明。\",\"MediaScanner 类中的一些功能需要由 Native 层来实现\",\"JNI 层对应 media_jni 库，库的名字是 media, jni 表示的是这个一个 JNI 库\",\"Native 的 libmedia.so 完成了实际的功能\",\" // media / java / android / media / MediaScanner.java public class MediaScanner { static { // 加载对应的 JNI 库 // 在实际加载动态库的时候会将其拓展称为 libmedia_jni.so System.loadLibrary(\\\"media_jni\\\"); // 调用 native_init() 函数 native_init(); } // .. // native 函数的声明；被 native 标识的函数表示它将由 JNI 层完成 private native void processDirectory(String path, MediaScannerClient client); // .. } \",\"在调用 native 函数之前，需要进行 JNI 库的加载；关于加载 JNI 库的时机，通用的做法是在类的 static 语句中加载，加载的方法是调用 System.loadLibrary 方法，需要注意 JNI 库的加载必须是在 native 函数调用之前；\",\"JAVA 程序员调用 JNI 中的函数还需要使用 native 关键字声明函数。\",\"从上我们可以看出，JNI 的使用对于 JAVA 程序员是非常友好的。\"]},\"1397\":{\"h\":\"JNI 层分析\",\"t\":[\"@todo\"]},\"1398\":{\"h\":\"静态注册 vs 动态注册\",\"t\":[\"@todo\"]},\"1399\":{\"h\":\"JNI Code Analysis\",\"t\":[\"这篇博客[1]有一个给 libcore 增加日志的例子，全流程的走了一遍 native 方法创建、注册的过程，而我们选择的例子为 libcore 中 JDK 的实现。\"]},\"1400\":{\"h\":\"Java Native\",\"t\":[\"Native Java 的代码如下：\",\"// libcore/ojluni/src/main/java/java/lang/String.java @FastNative native void getCharsNoCheck(int start, int end, char[] buffer, int index); \",\"上述函数使用 @FastNative 注解修饰，函数声明前的 native 表示这是一个 native 方法。\",\"在 libcore/openjdk_java_files.bp 中可以看到 String.java 文件，表示其在编译链中。\",\"filegroup { name: \\\"openjdk_javadoc_files\\\", srcs: [ \\\"ojluni/src/main/java/java/awt/font/NumericShaper.java\\\", // more code ... \\\"ojluni/src/main/java/java/lang/String.java\\\", // ... ], path: \\\"ojluni/src/main/java\\\", } \"]},\"1401\":{\"h\":\"JNI 定义\"},\"1402\":{\"h\":\"register_java_lang_String\",\"t\":[\"JNI 层负责实现 getCharsNoCheck, 实现过后会被注册，此时就与 Java 层的 native 方法对应起来了，对于 getCharsNoCheck 的注册过程如下：\",\"在 .hh 中：\",\"// art/runtime/native/java_lang_String.h #ifndef ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_ #define ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_ #include <jni.h> namespace art { void register_java_lang_String(JNIEnv* env); } // namespace art #endif // ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_ \",\"在 .cc 中进行注册：\",\"static void String_getCharsNoCheck(JNIEnv* env, jobject java_this, jint start, jint end, jcharArray buffer, jint index) { // ScopedFastNativeObjectAccess 中保存了 env 对象以及其所在的 Thread 对象 ScopedFastNativeObjectAccess soa(env); // 从 soa.Self 中获取 JNIEnv 所在的线程对象 StackHandleScope<1> hs(soa.Self()); // 获取 buffer 的指针 Handle<mirror::CharArray> char_array(hs.NewHandle(soa.Decode<mirror::CharArray>(buffer))); // 获取 jobject 指针后调用 GetChars soa.Decode<mirror::String>(java_this)->GetChars(start, end, char_array, index); } static JNINativeMethod gMethods[] = { FAST_NATIVE_METHOD(String, charAt, \\\"(I)C\\\"), FAST_NATIVE_METHOD(String, compareTo, \\\"(Ljava/lang/String;)I\\\"), FAST_NATIVE_METHOD(String, concat, \\\"(Ljava/lang/String;)Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, doReplace, \\\"(CC)Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, fastSubstring, \\\"(II)Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, getCharsNoCheck, \\\"(II[CI)V\\\"), FAST_NATIVE_METHOD(String, intern, \\\"()Ljava/lang/String;\\\"), FAST_NATIVE_METHOD(String, toCharArray, \\\"()[C\\\"), }; void register_java_lang_String(JNIEnv* env) { REGISTER_NATIVE_METHODS(\\\"java/lang/String\\\"); } \",\"到此，我们对 register_java_lang_String 进行了定义，调用这个函数就可以进行 native 函数的注册。\"]},\"1403\":{\"h\":\"REGISTER_NATIVE_METHODS\",\"t\":[\"对于宏 REGISTER_NATIVE_METHODS，其定义如下：\",\"// art/runtime/native/native_util.h #define REGISTER_NATIVE_METHODS(jni_class_name) \\\\ RegisterNativeMethodsInternal(env, (jni_class_name), gMethods, arraysize(gMethods)) } // namespace art ALWAYS_INLINE inline void RegisterNativeMethodsInternal(JNIEnv* env, const char* jni_class_name, const JNINativeMethod* methods, jint method_count) { ScopedLocalRef<jclass> c(env, env->FindClass(jni_class_name)); if (c.get() == nullptr) { LOG(FATAL) << \\\"Couldn't find class: \\\" << jni_class_name; } jint jni_result = env->RegisterNatives(c.get(), methods, method_count); CHECK_EQ(JNI_OK, jni_result); } \",\"也就是说 register_java_lang_String() 最终是调用了 RegisterNativeMethodsInternal(), 传入了 class name, 全局的 gMethods, 以及计算出来的 count.\",\"@todo log 后增加分析结果\",\"对于宏 FAST_NATIVE_METHOD 我在源码中未找到其定义，但是根据其用法，不难发现，三个参数应该分别是：类名（函数指针）、函数名、函数参数和返回值（signature）。\",\"那么接下来的问题就只剩下：是谁调用了 register_java_lang_String() 进行了 native 函数的注册呢？我们进行下一章节的旅程。\"]},\"1404\":{\"h\":\"JNI 注册\"},\"1405\":{\"h\":\"InitNativeMethods\",\"t\":[\"除此之外，我们搜索全局的register_java_lang_String 发现，还在一处出现：\",\"// art/runtime/runtime.cc void Runtime::RegisterRuntimeNativeMethods(JNIEnv* env) { register_dalvik_system_DexFile(env); // ... register_java_lang_String(env); register_java_lang_StringFactory(env); // ... } \",\"这个函数的调用也是在这个文件中的 InitNativeMethods 函数（这个文件比较重要，所以全部列举出来了）：\",\"void Runtime::InitNativeMethods() { VLOG(startup) << \\\"Runtime::InitNativeMethods entering\\\"; Thread* self = Thread::Current(); JNIEnv* env = self->GetJniEnv(); // Must be in the kNative state for calling native methods (JNI_OnLoad code). CHECK_EQ(self->GetState(), kNative); // Set up the native methods provided by the runtime itself. RegisterRuntimeNativeMethods(env); // Initialize classes used in JNI. The initialization requires runtime native // methods to be loaded first. WellKnownClasses::Init(env); // Then set up libjavacore / libopenjdk / libicu_jni ,which are just // a regular JNI libraries with a regular JNI_OnLoad. Most JNI libraries can // just use System.loadLibrary, but libcore can't because it's the library // that implements System.loadLibrary! // // By setting calling class to java.lang.Object, the caller location for these // JNI libs is core-oj.jar in the ART APEX, and hence they are loaded from the // com_android_art linker namespace. // libicu_jni has to be initialized before libopenjdk{d} due to runtime dependency from // libopenjdk{d} to Icu4cMetadata native methods in libicu_jni. See http://b/143888405 { std::string error_msg; if (!java_vm_->LoadNativeLibrary( env, \\\"libicu_jni.so\\\", nullptr, WellKnownClasses::java_lang_Object, &error_msg)) { LOG(FATAL) << \\\"LoadNativeLibrary failed for \\\\\\\"libicu_jni.so\\\\\\\": \\\" << error_msg; } } { std::string error_msg; if (!java_vm_->LoadNativeLibrary( env, \\\"libjavacore.so\\\", nullptr, WellKnownClasses::java_lang_Object, &error_msg)) { LOG(FATAL) << \\\"LoadNativeLibrary failed for \\\\\\\"libjavacore.so\\\\\\\": \\\" << error_msg; } } { constexpr const char* kOpenJdkLibrary = kIsDebugBuild ? \\\"libopenjdkd.so\\\" : \\\"libopenjdk.so\\\"; std::string error_msg; if (!java_vm_->LoadNativeLibrary( env, kOpenJdkLibrary, nullptr, WellKnownClasses::java_lang_Object, &error_msg)) { LOG(FATAL) << \\\"LoadNativeLibrary failed for \\\\\\\"\\\" << kOpenJdkLibrary << \\\"\\\\\\\": \\\" << error_msg; } } // Initialize well known classes that may invoke runtime native methods. WellKnownClasses::LateInit(env); // check startup module ready 后再打印日志 VLOG(startup) << \\\"Runtime::InitNativeMethods exiting\\\"; } \",\"第 10 行调用了 RegisterRuntimeNativeMethods, 后面的很多过程也很重要，我们后续再进行研究。\",\"Runtime::InitNativeMethods entering\",\"注意到有一行日志 VLOG(startup) << \\\"Runtime::InitNativeMethods entering\\\";, 我们可以通过在日志中查找是否有这个对应的打印来确定启动的时候是否调用到了这个流程（因为调用链还涉及到很多非常复杂的过程，所以我们可以通过这个方式来进行验证）\",\"@todo 验证后填写结论\"]},\"1406\":{\"h\":\"Runtime::Start\",\"t\":[\"而InitNativeMethods 函数在 Runtime::Start() 中被调用：\",\"bool Runtime::Start() { // ...code // InitNativeMethods needs to be after started_ so that the classes // it touches will have methods linked to the oat file if necessary. { ScopedTrace trace2(\\\"InitNativeMethods\\\"); InitNativeMethods(); } // .. code } \",\"接下来的过程就是涉及到 JVM 进程的启动等知识了。\",\"Java核心库libcore中添加Log接口任意调用（Android10）↩︎\"]},\"1407\":{\"c\":[\"JAVA\"]},\"1408\":{\"c\":[\"jvm\",\"java\"]},\"1409\":{\"h\":\"Abstract\",\"t\":[\"some basic...\"]},\"1410\":{\"h\":\"C Pointer\"},\"1411\":{\"h\":\"Abstract\",\"t\":[\"@todo 学习笔记\"]},\"1412\":{\"h\":\"CMake\"},\"1413\":{\"h\":\"Abstract\",\"t\":[\"搞 C 还是离不开这个啊，再怎么还是要研究一下的，本文参考以下比较好的文档：\",\"CMake Examples[1], GitHub 上的 CMake 例子；\",\"CMake Tutorial[2], 官方文档\"]},\"1414\":{\"h\":\"Concepts\",\"t\":[\"Concepts\",\"Means\",\"CMakeLists.txt\",\"这个文件是存储所有 CMake 命令的文件，注意这个文件的名称：CMakeLists.txt 严格区分大小写。\"]},\"1415\":{\"h\":\"Argument\"},\"1416\":{\"h\":\"Verbose\",\"t\":[\"我们可以设置 make 时候 debug 信息，如下所示：\",\"make clean make VERBOSE=1 \"]},\"1417\":{\"h\":\"DESTDIR\",\"t\":[\"这个可以用来设置 CMAKE_INSTALL_PREFIX 的位置：\",\"make install DESTDIR=/tmp/stage \"]},\"1418\":{\"h\":\"ENV\",\"t\":[\"介绍几个环境变量[3]。\",\"Variable\",\"Means\",\"PROJECT_NAME\",\"命令 project (hello_cmake) 执行后会创建一个 变量 ${PROJECT_NAME}, 其值为 hello_cmake\",\"CMAKE_BINARY_DIR\",\"执行 cmake 命令的 root, 或者 top level 的文件夹，后续分析关联见 Binary Directory。The root binary / build directory. This is the directory where you ran the cmake command.\",\"CMAKE_SOURCE_DIR\",\"The root source directory\",\"CMAKE_CURRENT_SOURCE_DIR\",\"The current source directory if using sub-projects and directories.\",\"CMAKE_CURRENT_BINARY_DIR\",\"The build directory you are currently in.\",\"PROJECT_BINARY_DIR\",\"The build directory for the current project.\",\"CMAKE_INSTALL_PREFIX\",\"make install 产生，默认值是 /usr/local/\",\"CMAKE_C_FLAGS\",\"compile flags\",\"CMAKE_CXX_FLAGS\",\"compile flags\",\"xxx_INCLUDE_DIRS\",\"三方库找到的话对应的位置A variable pointing to the include directory for the library.\",\"xxx_LIBRARY\",\"A variable pointing to the library path.\",\"XXX_FOUND\",\"某个第三方库是否找到\",\"CMAKE_CXX_STANDARD\",\"指定 C++ 的版本\",\"以后还会增加。\"]},\"1419\":{\"h\":\"Binary Directory\",\"t\":[\"The root or top level folder that you run the cmake command from is known as your CMAKE_BINARY_DIR and is the root folder for all your binary files. CMake supports building and generating your binary files both in-place and also out-of-source.\",\"这段话说了可以原地 cmake, 也可以在外面 cmake.\",\"原地 cmake 如下：\",\"cmake . \",\"原地 cmake 的缺点在于：你的源代码和 Makefiles 和目标代码都混在一起了(interspersed)\",\"Out-of-Source cmake 如下：\",\"mkdir build cd build/ cmake .. \",\"换个地方 cmake 的好处就是，你想重新 cmake 的话，你就把生成的那个文件夹删除了，再 cmake 一次，就 OK 了。\"]},\"1420\":{\"h\":\"functions\"},\"1421\":{\"h\":\"target_include_directories\",\"t\":[\"如果存在多个 include 文件夹，则可以使用 target_include_directories()， 其作用类似于 -I.\",\"target_include_directories(target PRIVATE ${PROJECT_SOURCE_DIR}/include ) \",\"PRIVATE 标识了 include 的作用域。\",\"target_include_directories(hello_library PUBLIC ${PROJECT_SOURCE_DIR}/include ) \",\"This will cause the included directory used in the following places:\",\"When compiling the library\",\"When compiling any additional target that links the library.\",\"就是说在编译的时候会找 include 下面的东西，或者是其他链接到这个 library 的也会来这找的。\"]},\"1422\":{\"h\":\"add_library\",\"t\":[\"The add_library() function is used to create a library from some source files.\",\"add_library(hello_library STATIC src/Hello.cpp ) \",\"上述代码会创建出一个 hello_library.a.\",\"除此之外也支持 shared lib:\",\"add_library(hello_library SHARED src/Hello.cpp ) \",\"上述代码会创建出一个 libhello_library.so.\"]},\"1423\":{\"h\":\"target_link_libraries\",\"t\":[\"比较好理解，就是链接的：\",\"add_executable(hello_binary src/main.cpp ) target_link_libraries( hello_binary PRIVATE hello_library ) \"]},\"1424\":{\"h\":\"install\",\"t\":[\"CMake offers the ability to add a make install target to allow a user to install binaries, libraries and other files.\",\"cmake 支持获取二进制文件，安装的位置存储在环境变量 CMAKE_INSTALL_PREFIX 中，举例如下：\",\"install (TARGETS cmake_examples_inst_bin DESTINATION bin) \",\"或者 lib 文件(输出在 ${CMAKE_INSTALL_PREFIX}/bin)：\",\"install (TARGETS cmake_examples_inst LIBRARY DESTINATION lib) \",\"或者说目录（输出在 ${CMAKE_INSTALL_PREFIX}/include）：\",\"install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include) \",\"或者说文件（输出在 ${CMAKE_INSTALL_PREFIX}/etc）：\",\"install (FILES cmake-examples.conf DESTINATION etc) \",\"对于这个，我们涉及到了使用 make install, 所以需要再说明一下，我们对上面存在四个 install 的 CMake 文件进行 make, 其步骤如下：\",\"$ mkdir build $ cd build/ $ cmake .. $ make $ sudo make install \",\"其对应的输出如下：\",\"Install the project... -- Install configuration: \\\"\\\" -- Installing: /usr/local/bin/cmake_examples_inst_bin -- Set runtime path of \\\"/usr/local/bin/cmake_examples_inst_bin\\\" to \\\"\\\" -- Installing: /usr/local/lib/libcmake_examples_inst.so -- Up-to-date: /usr/local/include -- Installing: /usr/local/include/installing -- Installing: /usr/local/include/installing/Hello.h -- Installing: /usr/local/etc/cmake-examples.conf \",\"我们在执行完 sudo make install 命令后会生成一个 install_manifest.txt 文件，其内容如下：\",\"/usr/local/bin/cmake_examples_inst_bin /usr/local/lib/libcmake_examples_inst.so /usr/local/include/installing/Hello.h \",\"❓❓❓ 如果要看到输出：\",\"$ LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib cmake_examples_inst_bin Hello Install! \",\"还有一点，如果我们要更改 CMAKE_INSTALL_PREFIX 这个环境变量的默认值的话，可以这么操作：\",\"if( CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT ) message(STATUS \\\"Setting default CMAKE_INSTALL_PREFIX path to ${CMAKE_BINARY_DIR}/install\\\") set(CMAKE_INSTALL_PREFIX \\\"${CMAKE_BINARY_DIR}/install\\\" CACHE STRING \\\"The path to use for make install\\\" FORCE) endif() \",\"或者这样：\",\"make install DESTDIR=/tmp/stage \",\"我们执行完后，需要进行卸载，命令如下：\",\"sudo xargs rm < install_manifest.txt \",\"🧡🧡🧡 我之前使用了 make clean 似乎也达到了效果，但是仔细观察发现，libcmake_examples_inst.so 这个文件没有被干掉，所以还是要使用上面的方式！需要注意。\"]},\"1425\":{\"h\":\"target_compile_definitions\",\"t\":[\"target_compile_definitions() 这个函数就是用来设置 compile flags 的，我们引用原文：\",\"CMake supports setting compile flags in a number of different ways:\",\"using target_compile_definitions() function\",\"using the CMAKE_C_FLAGS and CMAKE_CXX_FLAGS variables.\",\"举例如下：\",\"target_compile_definitions(cmake_examples_compile_flags PRIVATE EX3 ) \",\"这个会造成在编译的时候加入定义 EX3.\"]},\"1426\":{\"h\":\"find_package\",\"t\":[\"如果要使用第三方库的话，我们需要进行查找，如下所示：\",\"find_package(Boost 1.46.1 REQUIRED COMPONENTS filesystem system) \",\"我们如果需要验证是否找到了这个包，可以通过生成的变量 XXX_FOUND 来进行判断，如下所示：\",\"if(Boost_FOUND) message (\\\"boost found\\\") include_directories(${Boost_INCLUDE_DIRS}) else() message (FATAL_ERROR \\\"Cannot find Boost\\\") endif() \",\"上面出现了一个 ${Boost_INCLUDE_DIRS}， 原理类似，就是找到的话，我们会生成一个这样的变量供我们使用。\"]},\"1427\":{\"h\":\"set\",\"t\":[\"我们可以指定 c++ 的版本，如下所示：\",\"set(CMAKE_CXX_STANDARD 11) \",\"当然我们还有基础的方法：\",\"if(COMPILER_SUPPORTS_CXX11)# set(CMAKE_CXX_FLAGS \\\"${CMAKE_CXX_FLAGS} -std=c++11\\\") elseif(COMPILER_SUPPORTS_CXX0X)# set(CMAKE_CXX_FLAGS \\\"${CMAKE_CXX_FLAGS} -std=c++0x\\\") else() message(STATUS \\\"The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.\\\") endif() \"]},\"1428\":{\"h\":\"target_compile_features\",\"t\":[\"其用法如下，我们设置了 cxx_auto_type 这个 feature：\",\"target_compile_features(hello_cpp11 PUBLIC cxx_auto_type) \",\"在执行 cmake .. 的时候，我们可以看到打印：\",\"message(\\\"List of compile features: ${CMAKE_CXX_COMPILE_FEATURES}\\\") \",\"List of compile features: cxx_template_template_parameters;cxx_alias_templates;... \",\"就是说，我们的所有 feature 都是保存在了 CMAKE_CXX_COMPILE_FEATURES 这个变量中。\"]},\"1429\":{\"h\":\"message\",\"t\":[\"有的时候我们需要打印出一些变量来用于调试，我们可以使用 mesage() 来实现：\",\"cmake_minimum_required(VERSION 3.5) # Set the project name project (hello_cmake) # print project name variable message (\\\"project name is ${PROJECT_NAME}\\\") # Add an executable add_executable(hello_cmake main.cpp) \",\"其输出如下所示：\",\"project name is hello_cmake \"]},\"1430\":{\"h\":\"Compiler Option\"},\"1431\":{\"h\":\"clang\",\"t\":[\"CMake exposes options to control the programs used to compile and link your code. These programs include:\",\"CMAKE_C_COMPILER - The program used to compile c code.\",\"CMAKE_CXX_COMPILER - The program used to compile c++ code.\",\"CMAKE_LINKER - The program used to link your binary.\",\"（如果要进行验证，首先安装 clang: sudo apt-get install clang-3.6）\",\"cmake .. -DCMAKE_C_COMPILER=clang-3.6 -DCMAKE_CXX_COMPILER=clang++-3.6 \"]},\"1432\":{\"h\":\"ninja\",\"t\":[\"我们可以指定构建工具进行构建，如 ninja:\",\"cmake .. -G Ninja \",\"$ ls CMakeCache.txt CMakeFiles build.ninja cmake_install.cmake hello_cmake rules.ninja \"]},\"1433\":{\"h\":\"Sub Projects\"},\"1434\":{\"h\":\"add_subdirectory\",\"t\":[\"其用法如下：\",\"add_subdirectory(sublibrary1) add_subdirectory(sublibrary2) add_subdirectory(subbinary) \",\"为了加深理解，我们给出这个含有子目录的文件结构：\",\". |-- CMakeLists.txt |-- README.adoc |-- subbinary | |-- CMakeLists.txt | `-- main.cpp |-- sublibrary1 | |-- CMakeLists.txt | |-- include | | `-- sublib1 | | `-- sublib1.h | `-- src | `-- sublib1.cpp `-- sublibrary2 |-- CMakeLists.txt `-- include `-- sublib2 `-- sublib2.h \",\"可以看到，和 Cmake 文件同在一个路径的有 subbinary， subbinary1 和 subbinary2 三个，所以我们 add_subdirectory 使用了三个。\",\"其更加稳妥的用法如下：\",\"if(EXISTS ${PRJ_TOP_DIR}/src) add_subdirectory(src) endif() \"]},\"1435\":{\"h\":\"Reference\",\"t\":[\"https://github.com/ttroy50/cmake-examples↩︎\",\"https://cmake.org/cmake/help/latest/guide/tutorial/index.html↩︎\",\"Useful Variables↩︎\"]},\"1436\":{\"h\":\"Makefile\"},\"1437\":{\"h\":\"Abstract\",\"t\":[\"我们对 makefile 的目标是，能读懂大型项目中的 makefile, 能写简单的 makefile.\"]},\"1438\":{\"h\":\"基础概念\",\"t\":[\"什么是 makefile?[1] 什么是 make 命令，我们首先需要了解这些基础概念。make 命令在执行的时候，我们需要一个 makefile, 去告诉 make 程序如何编译和链接程序。\"]},\"1439\":{\"h\":\"makefile 的规则\",\"t\":[\"先看一段简单的例子：\",\"target ... : prerequisites ... command ... ... \",\"target …\",\"这个可以是一个目标文件，也可以是一个执行文件，也可以是一个标签。… 表示 target 可以有多个\",\"prerequisites ...\",\"生成该 target 的依赖项\",\"commad\",\"命令。注意到可以是任意命令，正常而言，我们使用 gcc 或者 g++ 这些命令，但是如果你要在这边写什么 cd, ls 命令也是可以的，即任意的 shell 命令，但是注意到我们的命令是要服务于 target 的\"]},\"1440\":{\"h\":\"Hello world\",\"t\":[\"如此，我们可以写一个简单的例子（关于 Makefile 的例子，我们可以参考这个[2]）：\",\"edit : main.o kbd.o command.o display.o \\\\ insert.o search.o files.o utils.o cc -o edit main.o kbd.o command.o display.o \\\\ insert.o search.o files.o utils.o main.o : main.c defs.h cc -c main.c kbd.o : kbd.c defs.h command.h cc -c kbd.c command.o : command.c defs.h command.h cc -c command.c display.o : display.c defs.h buffer.h cc -c display.c insert.o : insert.c defs.h buffer.h cc -c insert.c search.o : search.c defs.h buffer.h cc -c search.c files.o : files.c defs.h buffer.h command.h cc -c files.c utils.o : utils.c defs.h cc -c utils.c clean : rm edit main.o kbd.o command.o display.o \\\\ insert.o search.o files.o utils.o \",\"这是一个比较简单的例子，我们暂且把其叫做 makefile 的 hello world 程序，暂且不用关心其中的文件细节。上述代码需要产生 edit 这个 target, 但是这个 target 依赖了若干个 .o, 其生成的命令就是第 3 行的命令，注意到行数太长的时候我们可以进行换行。\",\"注意到因为 edit 依赖了很多 .o, 所以我们要对这些依赖的逐一生成，以 main.o 为例（代码第 6 行），我们可以看出生成 main.o 的生成依赖于 main.c 和 defs.h, 所以我们把这个写到后面来，这个例子中的文件结构可以看到的话，肯定是 main.c 和 defs.h 在一个文件夹中，我们实际生产中遇到的结构一般都不会这么简单，后面例子我们将分析复杂的形式。\",\"clean 命令就是说我们把生成的文件进行一个消除，不要 xxx.o 这个目标文件了，做一个清理的工作。额外一提，我们这个 clean 不是一个 target, 其冒号后什么也没有，可以将其理解为一个动作的名字。\"]},\"1441\":{\"h\":\"makefile 变量\",\"t\":[\"我们不难看出，上面的例子太麻烦了，比如说：\",\"edit : main.o kbd.o command.o display.o \\\\ insert.o search.o files.o utils.o cc -o edit main.o kbd.o command.o display.o \\\\ insert.o search.o files.o utils.o \",\"在这几行代码里面，这几个 xxx.o 文件就被一直使用了，后面如果我们要新增依赖项，那么这两个地方都需要改，万一漏了没改，那岂不是悲剧了？所以说我们提出了变量这个概念，其和编程语言中的变量概念类似，可以简单理解为 C 语言中的宏。\",\"我们定义一个变量：\",\"objects = main.o kbd.o command.o display.o \\\\ insert.o search.o files.o utils.o \"]},\"1442\":{\"h\":\"实战 Makefile\"},\"1443\":{\"h\":\"概览\",\"t\":[\"通过本章节很多例子，我们在实际的环境中进行编译，然后做细微的修改。希望通过这个目的，我们可以掌握 makefile 的基本用法，也会修改项目中的 makefile, 并最终使编译通过。\"]},\"1444\":{\"h\":\"单文件夹例子\"},\"1445\":{\"h\":\"hello world\",\"t\":[\"我们先准备一个很简单的 C 程序 main.c：\",\"#include <stdio.h> int main() { printf(\\\"hello makefile 01\\\\n\\\"); } \",\"然后执行最简单的 g++:\",\"$ g++ main.c $ ./a.out hello makefile 01 \",\"我们将其改造成 makfile 的形式，其文件树结构如下：\",\"$ tree . |-- main.c |-- makefile \",\"其中 makefile 的内容为：\",\"objects = main.o test: $(objects) cc -o test $(objects) main.o: main.c cc -c main.c .PHONY: clean clean: rm test $(objects) \",\"这里面有几点是需要注意的：\",\"第 6 行我们指定了 main.o 生成所需要的依赖，这个不指定的话会报失败的。\",\"第 7 行我们使用了 cc 用于编译，我们也可以使用 g++:\",\"objects = main.o test: $(objects) g++ -o test $(objects) main.o: main.c g++ -c main.c .PHONY: clean clean: rm test $(objects) \",\"🛑🛑拓展实验🛑🛑 特别需要注意的是，第 7 行我们也可以使用 g++ -c main.c -o main.o, 但是在这里我们没有指定，也编译出来了 main.o, 说明这个可能是自动生成的，为此我们尝试一下：\",\"$ g++ -c main.c $ ls main.c main.o makefile \",\"这是自动推导了，但是如果我们不指定 -c 的话，就不会自动推导， 而是会生成一个可执行的 a.out：\",\"$ g++ -c main.c $ ls a.out main.c makefile \",\"clean 命令用于清除 make 生成的那些文件，直接执行 make clean 即可\",\".PHONY 表示 clean 是个伪目标文件。\",\"我们执行 make 命令，其输出可以参考：\",\"$ make cc -c main.c cc -o test main.o \",\"从这个里面，我们可以看出来，make 命令一共执行了 2 步，第一步是先生成 main.o, 然后再生成 target test.\"]},\"1446\":{\"h\":\"自定义的头文件\",\"t\":[\"很多时候我们使用的都不是标准库的头文件，我们会自己写头文件，然后引用，对于这种情况，makefile 该怎么编写呢？\",\"先给出一个简单的头文件 zhanshen.h:\",\"int add(int x, int y) { return x + y; } \",\"这个头文件中定义了最简单的一个函数，我们在 main.c 中调用一下这个：\",\"#include <stdio.h> #include \\\"zhanshen.h\\\" int main() { printf(\\\"hello makefile 01\\\\n\\\"); int res = add(1, 2); printf(\\\"zhanshen sum 1+2=%d\\\\n\\\", res); return 0; } \",\"然后使用最简单的方式验证一下：\",\"$ g++ main.c $ ls a.out main.c makefile zhanshen.h $ ./a.out hello makefile 01 zhanshen sum 1+2=3 \",\"然后其实我们的 makefile 不需要做任何的修改，可以直接使用，因为是在同一个路径下面的，所以自己就找到了：\",\"$ make g++ -c main.c g++ -o test main.o $ ls main.c main.o makefile test zhanshen.h $ ./tes hello makefile 01 zhanshen sum 1+2=3 \"]},\"1447\":{\"h\":\"多文件夹例子\"},\"1448\":{\"h\":\"例子01\",\"t\":[\"但是在日常的生产活动中，我们都是多文件夹的，所以这种情况我们需要研究。\",\"我们的文件结构如下：\",\". |-- include | `-- zhanshen.h |-- main.c `-- makefile 1 directory, 3 files \",\"我们把上章节的例子中的 zhanshen.h 移到了新建的 include 文件夹中去了，这时候我们执行 make 命令观察一下：\",\"$ make g++ -c main.c main.c:2:10: fatal error: zhanshen.h: No such file or directory #include \\\"zhanshen.h\\\" ^~~~~~~~~~~~ compilation terminated. makefile:7: recipe for target 'main.o' failed make: *** [main.o] Error 1 \",\"很明显，找不到了头文件了，此时该怎么办呢？我们需要修改 makefie:\",\"objects = main.o test: $(objects) g++ -o test $(objects) main.o: main.c g++ -c main.c -I include .PHONY: clean clean: rm test $(objects) \",\"重点在第 7 行，我们增加了 -I 选项，后面跟随了我们 zhanshen.h 所在的目录，这样 makefile 就能自己去 include 文件夹下面找到 zhanshen.h 了。\"]},\"1449\":{\"h\":\"例子02\",\"t\":[\"在日常的生产中，我们通常不会在头文件中去定义函数（接口）的具体实现，头文件只是用作一个申明的作用，在这种情况下，我们的代码结构可能是这样的：\",\". |-- include | |-- zhanshen.c | `-- zhanshen.h |-- main.c `-- makefile \",\"新增的 zhanshen.c 内容如下：\",\"#include \\\"zhanshen.h\\\" int add(int x, int y) { return x + y; } \",\"修改后的 zhanshen.h 内容如下：\",\"#ifndef __SUM_H__ #define __SUM_H__ int add(int x, int y); #endif \",\"此时我们执行 make 命令会报错：\",\"$ make g++ -o test main.o main.o: In function `main': main.c:(.text+0x1f): undefined reference to `add(int, int)' collect2: error: ld returned 1 exit status makefile:4: recipe for target 'test' failed make: *** [test] Error 1 \",\"（这个错误折磨了我好几天，郁闷，太菜了，郁闷）\",\"解决方案是，对 makefile 进行改造：\",\"objects = main.o zhanshen.o test: $(objects) g++ -o test $(objects) main.o: main.c include/zhanshen.h g++ -c main.c -I include zhanshen.o: g++ -c include/zhanshen.c .PHONY: clean clean: rm test $(objects) \"]},\"1450\":{\"h\":\"Problems\",\"t\":[\"还有几个问题需要解决的，在这列举出来：\",\"全局跨文件夹如何引用？\",\"变量的应用\",\"操作符\"]},\"1451\":{\"h\":\"Reference\",\"t\":[\"跟我一起写Makefile↩︎\",\"Makefile-Templates GitHub↩︎\"]},\"1452\":{\"h\":\"Linux Command\",\"t\":[\"本文主要记录常见的 Linux 命令，特别是那些经常遇到但是容易忘记的命令用法。\"]},\"1453\":{\"h\":\"scp\",\"t\":[\"SCP（Secure Copy）是一个在计算机之间安全传输文件的命令行工具，它使用 SSH 协议进行加密传输。以下是 SCP 的用法：\",\"从本地到远程：将本地文件复制到远程服务器。\",\"scp [选项] <本地文件路径> <远程用户名@远程主机地址:目标路径> \",\"示例：\",\"scp /path/to/local/file.txt username@remote:/path/on/remote/ \",\"从远程到本地：将远程服务器上的文件复制到本地。\",\"scp [选项] <远程用户名@远程主机地址:源文件路径> <本地目标路径> \",\"示例：\",\"scp username@remote:/path/to/remote/file.txt /path/on/local/ \",\"复制整个目录：使用 -r 选项来递归复制整个目录。\",\"scp -r [选项] <源目录路径> <目标目录路径> \",\"示例：\",\"scp -r username@remote:/path/to/remote/directory /path/on/local/ \",\"指定端口号：如果 SSH 服务器监听的端口不是默认的 22 号端口，可以使用 -P 选项指定端口号。\",\"scp -P <端口号> [选项] <源文件路径> <目标路径> \",\"示例：\",\"scp -P 2222 /path/to/local/file.txt username@remote:/path/on/remote/ \",\"以上就是 SCP 的基本用法，通过 SCP 可以实现在本地和远程服务器之间安全地传输文件。\"]},\"1454\":{\"h\":\"压缩/解压缩\",\"t\":[\"在 Linux 中，你可以使用不同的命令和工具来进行文件和目录的压缩和解压缩。下面是一些常用的命令和工具：\",\"压缩文件/目录：\",\"Gzip：使用 gzip 命令压缩文件，生成以 .gz 结尾的压缩文件。\",\"shell复制代码gzip <文件名> \",\"Tar：使用 tar 命令创建归档文件，并结合其他压缩工具（如 gzip 或 bzip2）进行压缩。\",\"shell复制代码tar czf <压缩文件名.tar.gz> <要压缩的文件/目录> \",\"可选的压缩工具有：\",\"z：使用 gzip 压缩文件，生成 .tar.gz 文件。\",\"j：使用 bzip2 压缩文件，生成 .tar.bz2 文件。\",\"J：使用 xz 压缩文件，生成 .tar.xz 文件。\",\"解压缩文件/目录：\",\"Gzip：使用 gzip 命令解压缩 .gz 文件。\",\"gzip -d <文件名.gz> \",\"Tar：使用 tar 命令解压缩 .tar 文件。\",\"tar xf <压缩文件名.tar> \",\"如果压缩文件是经过 gzip、bzip2 或 xz 压缩的，你可以使用相应的解压缩工具结合 tar 使用。例如，解压缩 .tar.gz 文件：\",\"tar xzf <压缩文件名.tar.gz> \",\"压缩和解压缩组合操作：\",\"如果你想在一个命令中同时进行压缩和解压缩操作，可以使用管道（pipe）来将多个命令连接起来。\",\"压缩一个目录并将其打包为 tar 文件，并通过 gzip 进行压缩：\",\"tar cf - <目录> | gzip > <压缩文件名.tar.gz> \",\"解压缩一个经过 gzip 压缩的 tar 文件：\",\"gunzip -c <压缩文件名.tar.gz> | tar xf - \",\"这些是一些常用的 Linux 压缩和解压缩命令和工具。根据你的需求和压缩文件的类型，选择合适的命令和选项来进行操作。\"]},\"1455\":{\"c\":[\"Linux\",\"Kernel\"]},\"1456\":{\"h\":\"Linkers & Loaders\",\"t\":[\"本文主要涉及的内容有：\",\"目标文件的研究；\",\"Segment vs Section;\",\"objdump 细节；\",\"从 readelf 走进 ELF 文件\"]},\"1457\":{\"h\":\"Abstract\",\"t\":[\"本文章主要是《程序员的自我修养》的读书笔记。\"]},\"1458\":{\"h\":\"目标文件\"},\"1459\":{\"h\":\"目标文件的格式\",\"t\":[\".o 目标文件，就是编译后但是还未链接的那些中间文件。\",\".so Linux 下的动态链接库。\",\".elf Linux 下的可执行文件。\",\".a Linux 下的静态链接库。\",\"这些都是按照可执行文件的格式存储的。\",\"为了更加直观，我们把书中的表格也引用过来：\",\"ELF 文件类型\",\"说明\",\"实例\",\"可重定位文件Relocatable\",\"包含了代码和数据，可以被用来链接成可执行文件或者共享目标文件；静态链接库也可以属于这一类\",\".o, .obj\",\"可执行文件Executable\",\"包含了可以直接执行的文件，一般都没有扩展名\",\"elf, /bin/bash, exe\",\"共享目标文件Shared Object\",\"包含了代码和数据，可以在以下两种情况中应用：1. 链接器使用这种文件跟其他的可重定位文件和共享目录链接，产生新的目标文件；2. 动态连接器将几个这种文件与可执行文件结合，作为进程映像的一部分来执行。\",\".so, DLL\",\"核心转储文件\",\"core dump file, 当进程意外终止的时候，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件\",\"core dump\",\"如果在遇到不确定的情况下，可以在命令行中使用 file 命令来查看相应的文件格式。\",\"注意到以上表格中的文件格式都可统一称为目标文件。\",\"可重定位文件 .o\",\"简单理解的话，编译后生成的文件就是可重定位文件。可以由 .s 文件得到，gcc -c xxx.s -o xxx.o;\"]},\"1460\":{\"h\":\"Segement\",\"t\":[\"那么目标文件中都有什么呢？除了必须有的编译后的机器指令代码和数据之外，还包括了链接时所需要的一些信息：符号表、调试信息、字符串等。这些链接所需要的信息都被存储在**段(Segment)**中，也可以称作节(Section).\",\"程序代码编译后的机器指令经常被放在代码段中，代码段常见的名字有 .code 和 .text; 全局遍历和静态变量数据经常被放在数据段中，一般的名字都叫做 .data. 除此之外，还有一个 BSS 段，其中主要保存的就是未初始化的全局变量和局部静态变量。\",\"段\",\"含义\",\"File Header\",\"描述了整个文件的属性。除此之外，还会包括一个段表，用于描述文件中各个段的数组，其内容是各个段在该文件中的偏移位置以及段的属性。\",\".text section\",\"编译后的机器代码。\",\".data section\",\"已初始化的全局变量和局部静态变量。\",\".bss section\",\"未初始化的全局变量和局部静态变量。\",\"分段的原因和优点如下列举：\",\"程序被装载后，数据段是可读写的，而代码段（指令区域）是只读的；\",\"将代码段和数据段分开，有助于利用到现在计算机的 icache 和 dcache.\",\"有利于代码段的共享；\",\"需要注意，有时候会遇到 .rodata 段，这个段中存放的是只读数据，即对这个段的所有操作都当作非法处理；其次还在语义上支持了 C++ 的 const 关键字。\"]},\"1461\":{\"h\":\"Section\",\"t\":[\"笔者把 section 的研究[1]相关的内容放在一起，这样可以对比分析 section 和 segment 的区别，方便我们的理解。\"]},\"1462\":{\"h\":\"objdump\",\"t\":[\"objdump -h xxx.o \",\"上述的 -h 选项是可以打印出 elf 文件每个段的基本信息。其中需要注意的是，CONTENTS 属性用来表示该段在文件中存在，如果没有这个属性的字段或者是 0, 我们就可以认为这个属性段在文件中是不存在的。\",\"objdump -s -d xxx.o \",\"-s 参数可以将所有段的内容以 16 进制的方式打印出来；\",\"-d 参数可以将所有包含指令的段反汇编。\",\"objdump -s -d -x xxx.o \",\"-x 参数可以打印出详细信息，比如说这个文件里面的段，每个段具体的内容等。\"]},\"1463\":{\"h\":\"example\",\"t\":[\"我们给出来一个示例的 C 文件，方便我们理解：\",\"/* * SimpleSection.c * * Linux: * gcc -c SimpleSection.c * * Windows: * cl SimpleSection.c /c /Za */ int printf(const char *format, ...); int global_init_var = 84; int global_uninit_var; void func1(int i) { printf(\\\"%d\\\\n\\\", i); } int main(void) { static int static_var = 85; static int static_var2; int a = 1; int b; func1(static_var + static_var2 + a + b); return a; } \",\"在控制台执行：\",\"gcc -c SimpleSection.c \",\"然后使用 objdump 查看其信息，-h 选项打印出每一个段的基本信息：\",\"objdump -h SimpleSection.o \",\"出来的信息如下所示(看起来不整洁的话可以换为截图)：\",\"SimpleSection.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000057 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 1 .data 00000008 0000000000000000 0000000000000000 00000098 2**2 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000004 0000000000000000 0000000000000000 000000a0 2**2 ALLOC 3 .rodata 00000004 0000000000000000 0000000000000000 000000a0 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 .comment 0000002a 0000000000000000 0000000000000000 000000a4 2**0 CONTENTS, READONLY 5 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000ce 2**0 CONTENTS, READONLY 6 .eh_frame 00000058 0000000000000000 0000000000000000 000000d0 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA \",\"我们使用 -s 参数将所有的内容以 16 进制的方式打印出来，-d 参数将所有包含指令的段反汇编，如下所示：\",\"$ objdump -s -d SimpleSection.o SimpleSection.o: file format elf64-x86-64 Contents of section .text: 0000 554889e5 4883ec10 897dfc8b 45fc89c6 UH..H....}..E... 0010 488d3d00 000000b8 00000000 e8000000 H.=............. 0020 0090c9c3 554889e5 4883ec10 c745f801 ....UH..H....E.. 0030 0000008b 15000000 008b0500 00000001 ................ 0040 c28b45f8 01c28b45 fc01d089 c7e80000 ..E....E........ 0050 00008b45 f8c9c3 ...E... Contents of section .data: 0000 54000000 55000000 T...U... Contents of section .rodata: 0000 25640a00 %d.. Contents of section .comment: 0000 00474343 3a202855 62756e74 7520372e .GCC: (Ubuntu 7. 0010 352e302d 33756275 6e747531 7e31382e 5.0-3ubuntu1~18. 0020 30342920 372e352e 3000 04) 7.5.0. Contents of section .eh_frame: 0000 14000000 00000000 017a5200 01781001 .........zR..x.. 0010 1b0c0708 90010000 1c000000 1c000000 ................ 0020 00000000 24000000 00410e10 8602430d ....$....A....C. 0030 065f0c07 08000000 1c000000 3c000000 ._..........<... 0040 00000000 33000000 00410e10 8602430d ....3....A....C. 0050 066e0c07 08000000 .n...... Disassembly of section .text: 0000000000000000 <func1>: 0: 55 push %rbp 1: 48 89 e5 mov %rsp,%rbp 4: 48 83 ec 10 sub $0x10,%rsp 8: 89 7d fc mov %edi,-0x4(%rbp) b: 8b 45 fc mov -0x4(%rbp),%eax e: 89 c6 mov %eax,%esi 10: 48 8d 3d 00 00 00 00 lea 0x0(%rip),%rdi # 17 <func1+0x17> 17: b8 00 00 00 00 mov $0x0,%eax 1c: e8 00 00 00 00 callq 21 <func1+0x21> 21: 90 nop 22: c9 leaveq 23: c3 retq 0000000000000024 <main>: 24: 55 push %rbp 25: 48 89 e5 mov %rsp,%rbp 28: 48 83 ec 10 sub $0x10,%rsp 2c: c7 45 f8 01 00 00 00 movl $0x1,-0x8(%rbp) 33: 8b 15 00 00 00 00 mov 0x0(%rip),%edx # 39 <main+0x15> 39: 8b 05 00 00 00 00 mov 0x0(%rip),%eax # 3f <main+0x1b> 3f: 01 c2 add %eax,%edx 41: 8b 45 f8 mov -0x8(%rbp),%eax 44: 01 c2 add %eax,%edx 46: 8b 45 fc mov -0x4(%rbp),%eax 49: 01 d0 add %edx,%eax 4b: 89 c7 mov %eax,%edi 4d: e8 00 00 00 00 callq 52 <main+0x2e> 52: 8b 45 f8 mov -0x8(%rbp),%eax 55: c9 leaveq 56: c3 retq \",\"这里面有一个细节需要注意，我们如何定位函数的地址，对于 main 函数，我们可以看到其地址是 0000000000000024, 而在第 8 行我们可以看到 0020 0090c9c3 554889e5 4883ec10 c745f801, 这行的意思就是起始地址是 0020, 所以我们 +4 就可以得到函数的起始汇编代码 55.\",\"Contents of section .data: 0000 54000000 55000000 T...U... \",\"上述 54000000 涉及到了字节序的问题，这里的实际上存储的是 0x54 即十进制的 84.\"]},\"1464\":{\"h\":\"readelf\",\"t\":[\"同时还有一个 readelf 工具可以作为 objdump 的对照：\",\"$ readelf -h SimpleSection.o ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: REL (Relocatable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x0 Start of program headers: 0 (bytes into file) Start of section headers: 1104 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 0 (bytes) Number of program headers: 0 Size of section headers: 64 (bytes) Number of section headers: 13 Section header string table index: 12 \",\"readelf 可以来详细查看 elf 文件，使用 -h 选项可以查看 elf 的文件头。\",\"上述的字段在 /usr/include/elf.h 都有定义，我们参考下表，对其做一个大概的认知。\",\"Linux Elf32_Ehdr 的结构体如下(64 位对应的也可以找到，为 Elf64_Ehdr)：\",\"typedef struct { unsigned char e_ident[16]; Elf32_Half e_type; Elf32_Half e_machine; Elf32_Word e_version; Elf32_Addr e_entry; Elf32_Off e_phoff; Elf32_Off e_shoff; Elf32_Word e_flags; Elf32_Half e_ehsize; Elf32_Half e_phentsize; Elf32_Half e_phnum; Elf32_Half e_shentsize; Elf32_Half e_shnum; Elf32_Half e_shstrndx; } Elf32_Ehdr; \",\"这些成员与 readelf 的打印的对应关系为：\",\"成员\",\"readelf output\",\"e_ident\",\"Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0\",\"e_type\",\"Type: REL (Relocatable file)elf 文件类型\",\"e_machine\",\"Machine: Advanced Micro Devices X86-64elf 文件的 CPU 平台属性；相关常量以 EM 开头\",\"e_version\",\"Version: 0x1elf 版本号，一般为常量 1\",\"e_entry\",\"Entry point address: 0x0入口地址，ELF 程序入口的虚拟地址，操作系统在加载完进程后从这个地址开始指向进程的指令；可重定位文件没有入口地址，该值为 0\",\"e_phoff\",\"Start of program headers: 0 (bytes into file)\",\"e_shoff\",\"Start of section headers: 1104 (bytes into file)段表在文件中的偏移，1104 表示从段表的低 1104 个字节开始\",\"对于 ELF 魔数，我们可以进行分析。\",\"7f 45 4c 46\",\"02\",\"01\",\"01\",\"00 00 00 00 00 00 00 00 00\",\"4字节的，ELF 文件通用的，ELF 文件的魔数\",\"ELF 文件类0 无效文件1 32 位 ELF 文件2 64 位 ELF 文件\",\"字节序0 无效格式1 小端格式2 大端格式\",\"ELF 版本\"]},\"1465\":{\"h\":\"Use readelf\",\"t\":[\"🔴🔴🔴 Q：能否从 ELF 文件中得到符号表？\",\"ELF文件解析（二）：ELF header详解]https://segmentfault.com/a/1190000016766079↩︎\"]},\"1466\":{\"c\":[\"Linux\"]},\"1467\":{\"h\":\"size_t\"},\"1468\":{\"h\":\"Abstract\",\"t\":[\"这篇文章主要研究 size_t 的定义和使用，通过这篇文章，希望能做到理解 size_t, 这篇文章思考并解决以下问题：\",\"什么是 size_t?\",\"为什么会有 size_t?\",\"size_t 的底层实现原理是什么？\",\"我们该什么时候使用 size_t?\"]},\"1469\":{\"h\":\"size_t\",\"t\":[\"size_t 是一个与机器相关的 unsigned 类型，在64位系统中为 long long unsigned int，非 64 位系统中为 long unsigned int。\",\"上述是百度百科对于 size_t 的简单说明，我在遇到 size_t 的时候，是在求解一个 leetcode 题目时，我调用了 <string.h> 中的 strlen() 函数，我是这么写的：\",\"int len = strlen(sentence); \",\"此时 IDE 出现了警告：Clang-Tidy: Narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined.\",\"然后我点进去 strlen() 函数的申明，在源码中如下：\",\"size_t __cdecl strlen(const char *_Str); \",\"可以发现，在源码中，strlen() 函数的返回类型是 size_t 而不是我们期望的 int!\",\"在查阅资料后发现，在标准 C 库中的许多函数使用的参数或者返回值都是使用的字节表示的对象大小，比如说 malloc(n) 函数的参数 n 制定了需要申请的空间大小，我们来看 malloc() 函数的定义：\",\"void *__cdecl malloc(size_t _Size); \",\"在此之前，我一直使用 int 类型作为这些函数的返回值。\",\"类似的，memcpy() 的定义如下：\",\"void *memcpy(void *s1, void const *s2, size_t n); \",\"也是用到了 size_t.\"]},\"1470\":{\"h\":\"why size_t matters\",\"t\":[\"why size_t matters?[1] 这篇文章讲述了 size_t 的重要性，本章结合这篇博文，对 size_t 进行一个简单的理解。\",\"size_t 解决了可移植问题。\",\"我们结合 memcpy() 的定义来理解这个可移植性问题，我们知道 memcpy(s1, s2, n) 的作用是将 s2 指向地址开始的 n 个字节拷贝到 s1 指向的地址，返回 s1, 其可以拷贝任何类型。第三个参数使用 size_t 的好处在于，可以避免使用 int 的时候出现有符号的情况，其次 unsigned int 也可以表示更大的数据范围。在绝大部分的机器上，unsigned int 的数据范围比 int 整整大一倍。\",\"平台可以自定义 size_t 的类型，int 小于等于数据线宽度，size_t 大于等于地址线宽度。\",\"目前的 int 普遍是 32 位，而 size_t 在主流平台中都是 64 位。\"]},\"1471\":{\"h\":\"size_t\",\"t\":[\"从命名上来看，也很直观，含义或者全程就是 'size_type', 大小的类型，后面加 '_t' 是为了防止命名空间冲突，或者说是一个缩写。\",\"size_t 是一种整形的类型，不管其在平台是 unsigned int 还是 unsigned long, 都是整形\",\"sizeof 运算的结果类型是 size_t\",\"类似的还有 wchar_t, ptrdiff_t; ptrdiff_t 表示两个指针之间的距离的数据类型。\",\"size_t 的可能是这样的：\",\"typedef unsigned int size_t; \"]},\"1472\":{\"h\":\"Reference\",\"t\":[\"https://jeremybai.github.io/blog/2014/09/10/size-t↩︎\"]},\"1473\":{\"h\":\"BL3-1\",\"t\":[\"ARM Trusted Firmware Design [1]\"]},\"1474\":{\"h\":\"Introduction\",\"t\":[\"The ARM Trusted Firmware implements a subset of the Trusted Board Boot Requirements (TBBR) Platform Design Document (PDD) for ARM reference platforms. The TBB sequence starts when the platform is powered on and runs up to the stage where it hands-off control to firmware running in the normal world in DRAM. This is the cold boot path.\",\"Trusted Board Boot(TBB) 开始于平台上电的时候，直到固件(firmware)到了 norlmal world 阶段，是一个冷启动的路径。\",\"The ARM Trusted Firmware also implements the Power State Coordination Interface (PSCI) PDD as a runtime service. PSCI is the interface from normal world software to firmware implementing power management use-cases (for example, secondary CPU boot, hotplug and idle). Normal world software can access ARM Trusted Firmware runtime services via the ARM SMC (Secure Monitor Call) instruction. The SMC instruction must be used as mandated by the SMC Calling Convention PDD.\",\"The ARM Trusted Firmware 实现了 PSCI(Power State Coordination Interface) 接口作为运行时服务。\",\"PSCI: 一个接口，这个接口实现了电源管理用例(power management use-cases)，怎么理解这个电源管理用例？举例来说就是 secondary CPU 的启动、hotplug 和 idel 等；注意到这个接口是从 normal world software 到 firmware(关于 firmware 的介绍和理解可以参考下文)。\",\"Normal world software 可以通过 ARM SMC(Secure Monitor Call) 指令来访问 ARM Trusted Firmware 服务，SMC 制定遵循着一些约定。\"]},\"1475\":{\"h\":\"Clod Boot\",\"t\":[\"The cold boot path starts when the platform is physically turned on.\",\"介绍何时启动。\",\"One of the CPUs released from reset is chosen as the primary CPU, and the remaining CPUs are considered secondary CPUs. The primary CPU is chosen through platform-specific means.\",\"介绍主 CPU 和 secondray CPUs. 一个 CPU 被选为主 CPU, 剩下的都是 secondray. 怎么选的主 CPU 呢？主要是看平台实现。\",\"The cold boot path is mainly executed by the primary CPU, other than essential CPU initialization executed by all CPUs. The secondary CPUs are kept in a safe platform-specific state until the primary CPU has performed enough initialization to boot them.\",\"冷启动主要由主 CPU 完成，次 CPU 要等主 CPU 来启动他们。\"]},\"1476\":{\"h\":\"Cloud Boot Path\",\"t\":[\"The cold boot path in this implementation of the ARM Trusted Firmware is divided into five steps (in order of execution):\",\"Boot Loader stage 1 (BL1) AP Trusted ROM\",\"Boot Loader stage 2 (BL2) Trusted Boot Firmware\",\"Boot Loader stage 3-1 (BL3-1) EL3 Runtime Firmware\",\"Boot Loader stage 3-2 (BL3-2) Secure-EL1 Payload (optional)\",\"Boot Loader stage 3-3 (BL3-3) Non-trusted Firmware\",\"冷启动的路径可以分为上述的步骤，下文将对每一个都进行分析。\",\"The ARM Fixed Virtual Platforms (FVPs) provide trusted ROM, trusted SRAM and trusted DRAM regions. Each boot loader stage uses one or more of these memories for its code and data.\",\"术语：FVPs 指的是 ARM 固定虚拟平台。\"]},\"1477\":{\"h\":\"Summary\",\"t\":[\"clod boot 启动由硬件完成，在启动的时候选定一个 CPU 为主 CPU, 剩余的 CPU 为从 CPU, 冷启动主要由主 CPU 完成。其主要的步骤可以分为 5 步：BL1, BL2, BL31, BL32, BL33.\"]},\"1478\":{\"h\":\"BL1\"},\"1479\":{\"h\":\"EL0 - EL3\",\"t\":[\"This stage begins execution from the platform's reset vector in trusted ROM at EL3. BL1 code starts at 0x00000000 (trusted ROM) in the FVP memory map. The BL1 data section is placed at the start of trusted SRAM, 0x04000000.\",\"BL1 开始于 EL3, 我们要了解 EL3 是什么，简单来说就是可信的级别 EL0 ~ EL3, EL3 是最高的[2]。\",\"对于该图的解释如下：\",\"EL0：表示用户空间，在 Norlmal World 运行中的应用程序，在 Secure World 中就是 Trust Application.\",\"EL1: 运行操作系统。NW 中如 Linux, SW 中如高通 QSEE.\",\"EL2: ARM 为了支持虚拟化，设计的虚拟化层，只有在 NW 中有\",\"EL3: Secure Moniter 用于 NW 和 SW 的切换；切换的时候发送 SMC 指定，这个后文会研究\"]},\"1480\":{\"h\":\"BL1 实现\",\"t\":[\"BL1 的实现主要是以下步骤：\"]},\"1481\":{\"h\":\"Determination of boot path\",\"t\":[\"确定启动路径。\",\"Whenever a CPU is released from reset, BL1 needs to distinguish between a warm boot and a cold boot. This is done using a platform-specific mechanism.\",\"CPU 从复位中释放的时候，BL1 需要区分冷启动和热启动。这种区分依赖于特定的平台。\",\"The ARM FVPs implement a simple power controller at 0x1c100000.\",\"很好理解。ARM 的虚拟化平台实现了一个电源控制，其启动的地址为 0x1c100000.\",\"The PSYS register (0x10) is used to distinguish between a cold and warm boot. This information is contained in the PSYS.WK[25:24] field.\",\"PSYS 寄存器用于区分是冷启动还是热启动。\",\"Additionally, a per-CPU mailbox is maintained in trusted DRAM (0x00600000), to which BL1 writes an entrypoint. Each CPU jumps to this entrypoint upon warm boot.\",\"阐述有一个入口点在，用于热启动。❌📛❌ 比较难理解的是，per-CPU mailbox 是一个什么？\",\"During cold boot, BL1 places the secondary CPUs in a safe platform-specific state while the primary CPU executes the remaining cold boot path as described in the following sections.\",\"冷启动的时候把主 CPU 和从 CPUs 放在什么地方或者状态。\",\"通过以上文章，可以分析到，这个启动路径指的就是区分冷热启动，其中涉及到一些寄存器地址，然后就是主 CPU 的相关工作。\"]},\"1482\":{\"h\":\"Architectural initialization\",\"t\":[\"BL1 performs minimal architectural initialization as follows.\",\"Exception vectors\",\"MMU setup\",\"Control register setup\",\"结构初始化的步骤可以分为三步：异常向量、MMU 的配置、控制寄存器的配置，接下来分别进行阐述说明。\"]},\"1483\":{\"h\":\"Exception vectors\",\"t\":[\"BL1 sets up simple exception vectors for both synchronous and asynchronous exceptions.\",\"BL1 设置了同步和异步的异常向量。\",\"The default behavior upon receiving an exception is to set a status code.\",\"接受异常的时候会设置异常状态码。\",\"In the case of the FVP this code is written to the Versatile Express System LED register in the following format:\",\"异常码会写入 LED 寄存器（❌❌❌ LED 寄存器是什么？），格式如下所示：\",\"SYS_LED[0] - Security state (Secure=0/Non-Secure=1) SYS_LED[2:1] - Exception Level (EL3=0x3, EL2=0x2, EL1=0x1, EL0=0x0) SYS_LED[7:3] - Exception Class (Sync/Async & origin). The values for each exception class are: 0x0 : Synchronous exception from Current EL with SP_EL0 0x1 : IRQ exception from Current EL with SP_EL0 0x2 : FIQ exception from Current EL with SP_EL0 0x3 : System Error exception from Current EL with SP_EL0 0x4 : Synchronous exception from Current EL with SP_ELx 0x5 : IRQ exception from Current EL with SP_ELx 0x6 : FIQ exception from Current EL with SP_ELx 0x7 : System Error exception from Current EL with SP_ELx 0x8 : Synchronous exception from Lower EL using aarch64 0x9 : IRQ exception from Lower EL using aarch64 0xa : FIQ exception from Lower EL using aarch64 0xb : System Error exception from Lower EL using aarch64 0xc : Synchronous exception from Lower EL using aarch32 0xd : IRQ exception from Lower EL using aarch32 0xe : FIQ exception from Lower EL using aarch32 0xf : System Error exception from Lower EL using aarch32 \",\"LED 寄存器里面涉及到 3 个取值：\",\"SYS_LED[0]: 安全状态\",\"SYS_LED[2:1]: EL, 异常级别，取值有 EL0 ~ EL3\",\"SYS_LED[7:3]: 异常类，包括很多取值\",\"A write to the LED register reflects in the System LEDs (S6LED0..7) in the CLCD window of the FVP.\",\"对 LED 寄存器的写入会反映在 FVP 上面。\",\"This behavior is because this boot loader stage does not expect to receive any exceptions other than the SMC exception.\",\"boot loader 阶段除了 SMC 异常外不期望接收任何异常。\",\"For the latter, BL1 installs a simple stub. The stub expects to receive only a single type of SMC (determined by its function ID in the general purpose register X0).\",\"这段话说明了 BL1 有一个 stub, 该 stub 仅仅只接收简单类型的 SMC.\",\"This SMC is raised by BL2 to make BL1 pass control to BL3-1 (loaded by BL2) at EL3. Any other SMC leads to an assertion failure.\",\"上述中的 SMC 是由 BL2 抛出，使得 BL1 将控制传递给 BL3-1.\"]},\"1484\":{\"h\":\"MMU Setup\",\"t\":[\"MMU 是内存管理单元，有时也称为分页内存管理单元（paged memory management unit，缩写为 PMMU），MMU 比较重要，我们在后文需要进行研究。@todo\",\"BL1 sets up EL3 memory translation by creating page tables to cover the first 4GB of physical address space. This covers all the memories and peripherals needed by BL1.\",\"BL1 会创建一个页表，用于设置 EL3 内存转换。\"]},\"1485\":{\"h\":\"Control Register Setup\",\"t\":[\"SCTLR_EL3. Instruction cache is enabled by setting the SCTLR_EL3.I bit. Alignment and stack alignment checking is enabled by setting the SCTLR_EL3.A and SCTLR_EL3.SA bits. Exception endianness is set to little-endian by clearing the SCTLR_EL3.EE bit.\",\"CPUECTLR. When the FVP includes a model of a specific ARM processor implementation (for example A57 or A53), then intra-cluster coherency is enabled by setting the CPUECTLR.SMPEN bit. The AEMv8 Base FVP is inherently coherent so does not implement CPUECTLR.\",\"SCR. Use of the HVC instruction from EL1 is enabled by setting the SCR.HCE bit. FIQ exceptions are configured to be taken in EL3 by setting the SCR.FIQ bit. The register width of the next lower exception level is set to AArch64 by setting the SCR.RW bit. External Aborts and SError Interrupts are configured to be taken in EL3 by setting the SCR.EA bit.\",\"CPTR_EL3. Accesses to the CPACR_EL1 register from EL1 or EL2, or the CPTR_EL2 register from EL2 are configured to not trap to EL3 by clearing the CPTR_EL3.TCPAC bit. Access to the trace functionality is configured not to trap to EL3 by clearing the CPTR_EL3.TTA bit. Instructions that access the registers associated with Floating Point and Advanced SIMD execution are configured to not trap to EL3 by clearing the CPTR_EL3.TFP bit.\",\"寄存器的细节暂不关注。\"]},\"1486\":{\"h\":\"Platform Initialization\",\"t\":[\"BL1 enables issuing of snoop and DVM (Distributed Virtual Memory) requests from the CCI-400 slave interface corresponding to the cluster that includes the primary CPU.\",\"CCU-400[3] 参考 CoreLink CCI-400 文档进行理解。\",\"BL1 also initializes UART0 (PL011 console), which enables access to the printf family of functions in BL1.\"]},\"1487\":{\"h\":\"BL2 image load and execution\",\"t\":[\"BL1 execution continues as follows:\",\"BL1 determines the amount of free trusted SRAM memory available by calculating the extent of its own data section, which also resides in trusted SRAM. BL1 loads a BL2 raw binary image from platform storage, at a platform-specific base address. If the BL2 image file is not present or if there is not enough free trusted SRAM the following error message is printed: ❌❌❌ \\\"Failed to load boot loader stage 2 (BL2) firmware.\\\" If the load is successful, BL1 updates the limits of the remaining free trusted SRAM. It also populates information about the amount of trusted SRAM used by the BL2 image. The exact load location of the image is provided as a base address in the platform header. Further description of the memory layout can be found later in this document.\",\"BL1 首先计算可用的 SRAM 空间用于加载 BL2 的二进制镜像，如果镜像加载成功，BL1 更新剩余的 SRAM 空间，镜像具体的加载地址会作为一个 base address 提供。\",\"需要注意到，如果 BL1 在加载 BL2 镜像的时候，如果 BL2 镜像文件不存在，或者 SRAM 空间不足，此时就会报错。\",\"BL1 prints the following string from the primary CPU to indicate successful execution of the BL1 stage: \\\"Booting trusted firmware boot loader stage 1\\\"\",\"打印出来 \\\"Booting trusted firmware boot loader stage 1\\\" 就说明 BL1 阶段成功。\",\"BL1 passes control to the BL2 image at Secure EL1, starting from its load address.\",\"BL1 将控制权转交给 BL2, 其起始地址就是 load address.\",\"BL1 also passes information about the amount of trusted SRAM used and available for use. This information is populated at a platform-specific memory address.\",\"再传递一下可信 SRAM 相关的信息。\"]},\"1488\":{\"h\":\"Summary\",\"t\":[\"总结一下 BL1 的加载过程，抛开异常处理的过程不谈，BL1 首先初始化 MMU 和相关的寄存器，而后对平台进行初始化，最后再加载 BL2 的镜像并转接控制权。\"]},\"1489\":{\"h\":\"BL2\"},\"1490\":{\"h\":\"Abstract\",\"t\":[\"BL1 loads and passes control to BL2 at Secure-EL1.\",\"这句话说的是：在 Secure-EL1 阶段，BL1 加载并且把控制权交给了 BL2!\",\"🚫🚫🚫 有一个疑惑或者理解错误，BL1-BL33 不都是 EL3 阶段的事情么？\",\"BL2 is linked against and loaded at a platform-specific base address (more information can be found later in this document).\",\"BL2 链接于特定的平台 base address 上，后文还要继续阐述。\",\"BL2 实现的功能如下文阐述。\"]},\"1491\":{\"h\":\"Architectural initialization\",\"t\":[\"BL2 performs minimal architectural initialization required for subsequent stages of the ARM Trusted Firmware and normal world software.\",\"体系结构初始化最小化。\",\"It sets up Secure EL1 memory translation by creating page tables to address the first 4GB of the physical address space in a similar way to BL1.\",\"和 BL1 相似的方式创建页表。\",\"EL1 and EL0 are given access to Floating Point & Advanced SIMD registers by clearing the CPACR.FPEN bits.\",\"寄存器相关的，现在可能已经有更新，暂时不研究。\"]},\"1492\":{\"h\":\"Platform initialization\",\"t\":[\"BL2 copies the information regarding the trusted SRAM populated by BL1 using a platform-specific mechanism.\",\"BL2 复制 BL1 可信 SRAM 的信息。\",\"It calculates the limits of DRAM (main memory) to determine whether there is enough space to load the BL3-3 image.\",\"还是计算一下能不能足够加载 BL3-3 镜像。\",\"A platform defined base address is used to specify the load address for the BL3-1 image.\",\"BL3-1 镜像加载的地址。\",\"It also defines the extents of memory available for use by the BL3-2 image.\",\"定义了 BL3-2 镜像可用的内存范围。\",\"BL2 also initializes UART0 (PL011 console), which enables access to the printf family of functions in BL2. Platform security is initialized to allow access to access controlled components.\",\"On the Base FVP a TrustZone controller (TZC-400) is configured to give full access to the platform DRAM. The storage abstraction layer is initialized which is used to load further bootloader images.\"]},\"1493\":{\"h\":\"BL3-0 (System Control Processor Firmware) image load\",\"t\":[\"Some systems have a separate System Control Processor (SCP) for power, clock, reset and system control.\",\"SCP 用于单独控制电源、时钟等。\",\"BL2 loads the optional BL3-0 image from platform storage into a platform-specific region of secure memory.\",\"BL2 加载可选的 BL3-0 镜像到安全内存中。\",\"The subsequent handling of BL3-0 is platform specific.\",\"BL3-0 的后续处理与平台有关。\",\"Typically the image is transferred into SCP memory using a platform-specific protocol. The SCP executes BL3-0 and signals to the Application Processor (AP) for BL2 execution to continue.\",\"镜像传输到 SCP 存储中。\"]},\"1494\":{\"h\":\"BL3-1 (EL3 Runtime Firmware) image load\",\"t\":[\"BL2 loads the BL3-1 image from platform storage into a platform-specific address in trusted SRAM. If there is not enough memory to load the image or image is missing it leads to an assertion failure. If the BL3-1 image loads successfully, BL2 updates the amount of trusted SRAM used and available for use by BL3-1. This information is populated at a platform-specific memory address.\",\"这个介绍比较简单，就是 EL2 加载 BL3-1, 成功后更新 SRAM 的数量。\"]},\"1495\":{\"h\":\"BL3-2 (Secure-EL1 Payload) image load\",\"t\":[\"BL2 loads the optional BL3-2 image from platform storage into a platform- specific region of secure memory. The image executes in the secure world. BL2 relies on BL3-1 to pass control to the BL3-2 image, if present. Hence, BL2 populates a platform-specific area of memory with the entrypoint/load-address of the BL3-2 image. The value of the Saved Processor Status Register (SPSR) for entry into BL3-2 is not determined by BL2, it is initialized by the Secure-EL1 Payload Dispatcher (see later) within BL3-1, which is responsible for managing interaction with BL3-2. This information is passed to BL3-1.\",\"暂时不研究。\"]},\"1496\":{\"h\":\"BL3-3 (Non-trusted Firmware) image load\",\"t\":[\"BL2 loads the BL3-3 image (e.g. UEFI or other test or boot software) from platform storage into non-secure memory as defined by the platform (0x88000000 for FVPs).\",\"BL2 relies on BL3-1 to pass control to BL3-3 once secure state initialization is complete. Hence, BL2 populates a platform-specific area of memory with the entrypoint and Saved Program Status Register (SPSR) of the normal world software image. The entrypoint is the load address of the BL3-3 image. The SPSR is determined as specified in Section 5.13 of the [PSCI PDD] PSCI. This information is passed to BL3-1.\",\"和题目标题一样，非安全的镜像加载。\"]},\"1497\":{\"h\":\"BL3-1\",\"t\":[\"这个章节研究 BL3-1 阶段所做的事情。\",\"The image for this stage is loaded by BL2 and BL1 passes control to BL3-1 at EL3.\",\"image 来源是 BL2, 控制权来源于 BL1.\",\"BL3-1 executes solely in trusted SRAM.\",\"BL3-1 只在受信任的 SRAM 中执行。\",\"BL3-1 is linked against and loaded at a platform-specific base address (more information can be found later in this document).\",\"这句话还是在说 base address.\"]},\"1498\":{\"h\":\"Architectural initialization\",\"t\":[\"Currently, BL3-1 performs a similar architectural initialization to BL1 as far as system register settings are concerned.\",\"系统寄存器的初始化和 BL1 的体系结构类似。\",\"Since BL1 code resides in ROM, architectural initialization in BL3-1 allows override of any previous initialization done by BL1.\",\"BL1 在 ROM 中，BL1 做的初始化操作都可以被 BL3-1 覆盖掉。\",\"BL3-1 creates page tables to address the first 4GB of physical address space and initializes the MMU accordingly.\",\"创建页表，并初始化 MMU.\",\"It replaces the exception vectors populated by BL1 with its own.\",\"BL3-1 用自己的异常向量替换 BL1 填充的异常向量。\",\"BL3-1 exception vectors signal error conditions in the same way as BL1 does if an unexpected exception is raised.\",\"Exception Vectors 是与 BL1 的实现一样的。\",\"They implement more elaborate support for handling SMCs since this is the only mechanism to access the runtime services implemented by BL3-1 (PSCI for example).\",\"They 还指的是 Exception Vectors, elaborate 的意思是复杂的、详细的；\",\"前半句话说的话，异常向量实现了更加详细的 SMCs 处理(ARM SMC, Secure Monitor Call)，因为 SMC 是访问 BL3-1 实现的系统服务的唯一机制。\",\"这个系统服务举例就是 PSCI 电源管理接口。\",\"从这句话中我们可以推理出一些关系， ❓❓ （怀疑是 Exception Vectors）增强了处理 SMC 的支持，SMC 用于访问 BL3-1 实现的运行时服务，比如说 PSCI.\",\"BL3-1 checks each SMC for validity as specified by the SMC calling convention PDD[4] before passing control to the required SMC handler routine.\",\"BL3-1 programs the CNTFRQ_EL0 register with the clock frequency of the system counter, which is provided by the platform.\",\"比较不好理解，需要结合参考文献进行解读。\"]},\"1499\":{\"h\":\"Platform initialization\",\"t\":[\"BL3-1 performs detailed platform initialization, which enables normal world software to function correctly.\",\"❓❓❓ normal world softwar --> function: 这个 function 如何理解？\",\"It also retrieves entrypoint information for the BL3-3 image loaded by BL2 from the platform defined memory address populated by BL2.\",\"检索 entrypoint.\",\"BL3-1 also initializes UART0 (PL011 console), which enables access to the printf family of functions in BL3-1.\",\"还初始化了 UART0(目前暂无接触)\",\"It enables the system level implementation of the generic timer through the memory mapped interface.\",\"使用内存映射实现了系统级别的通用计数器。\",\"GICv2 initialization： \",\"Enable group0 interrupts in the GIC CPU interface.\",\"Configure group0 interrupts to be asserted as FIQs.\",\"Disable the legacy interrupt bypass mechanism.\",\"Configure the priority mask register to allow interrupts of all priorities to be signaled to the CPU interface.\",\"Mark SGIs 8-15, the secure physical timer interrupt (#29) and the trusted watchdog interrupt (#56) as group0 (secure).\",\"Target the trusted watchdog interrupt to CPU0.\",\"Enable these group0 interrupts in the GIC distributor.\",\"Configure all other interrupts as group1 (non-secure).\",\"Enable signaling of group0 interrupts in the GIC distributor.\",\"GIC: Generic Interrupt Controller ARM 中断控制器。\"]},\"1500\":{\"h\":\"About\"},\"1501\":{\"h\":\"Firmware\",\"t\":[\"❓❓❓ 什么是 firmware?\",\"In computing, firmware is a specific class of computer software that provides the low-level control for a device's specific hardware[5].\",\"computer software, 本质是软件；属于计算机软件中特殊的一类\",\"low-level control 作用于特定的硬件\",\"Ascher Opler coined the term firmware in a 1967 Datamation article, as an intermediary term between \\\"hardware\\\" and \\\"software\\\". In this article, Opler was referring to a new kind of computer program that had a different practical and psychological purpose from traditional programs from the user's perspective.\",\"As computers began to increase in complexity, it became clear that various programs needed to first be initiated and run to provide a consistent environment necessary for running more complex programs at the user's discretion. This required programming the computer to run those programs automatically.\",\"介绍了 firmware 的历史，固件的作用就是可以自动运行的、用户不感知的一个程序。\",\"Firmware, such as the BIOS of a personal computer, may contain basic functions of a device, and may provide hardware abstraction services to higher-level software such as operating systems.\",\"这句话举例说明了 BIOS 是 firmware 的一种。\",\"For less complex devices, firmware may act as the device's complete operating system, performing all control, monitoring and data manipulation functions.\",\"对于不太复杂的系统而言，固件可以充当操作系统的角色。\",\"❓❓❓ firmware 和嵌入式软件的关系是什么？\",\"Typical examples of devices containing firmware are embedded systems (running embedded software), home and personal-use appliances, computers, and computer peripherals[6].\",\"原文[5:1]在举例 firmware 的时候提到了嵌入式系统(embedded systems), 从中我们不难判断，嵌入式系统也属于固件的一种。\",\"Firmware is held in non-volatile memory devices such as ROM, EPROM, EEPROM, and Flash memory.\",\"固件保存在非易失性存储器(non-volatile memory)中。\",\"Updating firmware requires ROM integrated circuits to be physically replaced, or EPROM or flash memory to be reprogrammed through a special procedure.\",\"上段文字提到了固件的更新可以通过：\",\"把焊上去的 ROM 集成电路拆了再焊新的上去，ROM 一旦确定就无法更改。\",\"EPROM：通过可擦除的 ROM 来更新。值得一提的是，EPROM 的擦除是通过紫外线的方式，其可擦除的次数一般在 1000 次左右。\",\"ROM\",\"ROM: Read-only memory[7], 属于非易失性存储器，常用于固件。\",\"我们现在SOC上用的是不可擦除的 ROM（OnChipRom）和闪存。\",\"Flash memory (or simply flash) is a modern type of EEPROM invented in 1984.\",\"Flash 也是 EEPROM 的一种。EEPROM 不同于 EPROM, EEPROM 是通过电擦除的方式来更新的，电擦除的优点在于更新其的时候不需要把这个东西从电脑中移除。\",\"Flash 相比于 EEPROM 拥有更快的擦除重写速度，而且 endurance 在百万次级别。\"]},\"1502\":{\"h\":\"Refenence\",\"t\":[\"ARM Trusted Firmware Design↩︎\",\"ARMv8-A Exception Levels↩︎\",\"CoreLink CCI-400↩︎\",\"SMC calling convention PDD↩︎\",\"Firmware↩︎↩︎\",\"直译为计算机外围设备 ↩︎\",\"Read-only memory WiKi↩︎\"]},\"1503\":{\"h\":\"Outlines\",\"t\":[\"Thermal\",\"Makefile\"]},\"1504\":{\"h\":\"I2C, I3C\"},\"1505\":{\"h\":\"Abstract\",\"t\":[\"这个文档主要用于收集嵌入式和芯片中公开的、基础的知识，用于扫盲。\",\"如果某个知识点需要更加深入的了解的话，则单独新增新的博客。\"]},\"1506\":{\"h\":\"I2C and I3C\"},\"1507\":{\"h\":\"I2C\",\"t\":[\"I2C (Inter-Integrated Circuit) is an on-board communication protocol that is ideal for short distances and low bandwidth.[1]\",\"Inter-Integrated Circuit 直译为内部集成电路。\",\"这句话说了 I2C 是一个理想的短距离、低带宽的通信协议。\",\"It has a master-slave architecture in which all slaves are connected to the master via two lines: the serial data line (SDA) and the serial clock line (SCL).\",\"架构是 master-slave 架构，所有的 slave 通过串行的 data line 和串行的 clock line 连接到 master, 简而言之，就是一个 master 多个 slave.\",\"I2C is typically used to connect lower speed peripherals, such as sensors to processors and microcontrollers over short distances, within an integrated circuit.\",\"peripherals /pə'rifərəls/ 外设。\",\"这句话说的是 I2C 一般用来连接低速外设，比如说传感器。I2C --> Sensor.\",\"The I2C protocol defines how data is sent.\",\"I2C 协议定义了数据如何发送。（通常协议会做的事情）\",\"Initially, the master issues a start condition followed by the address of the slave device with which it is communicating. Once the appropriate slave has identified its address, it searches for the progressive read / write flag issued by the master. This flag tells the slave if it can receive data or send data. As soon as the slave has confirmed the master, communication continues.\",\"上面这段过程比较长，总的而言就是 master 和 slave device 之前发生的一些事情。\"]},\"1508\":{\"h\":\"I3C\",\"t\":[\"I3C[2]: Improved Inter Integrated Circuit.\",\"I3C is also known as MIPI I3C and SenseWire. I3C is the new industry standard for serial multidrop data buses.\",\"MIPI[3] 是一个联盟，Mobile Industry Processor Interface, 旨在推进手机应用处理器接口的标准化，I3C 就是其新的一个行业标准。\",\"I3C adds a considerable number of system interface functions while maintaining upward compatibility with existing I²C slave devices, while native I3C devices support higher data rates similar to SPI (Serial Peripheral Interface).\",\"I3C 增加了大量的系统接口，并保持了向后兼容。\",\"原生的 I3C 设备支持更高数据速率，类似于 SPI(串行外设接口).\",\"With I3C, one or more master devices can be connected to one or more slaves via the bus.\",\"🟢 I3C 支持多个 master devices 连接到多个 slaves.\",\"I3C the evolution of I²C.\",\"I3C 是 I2C 的演化。\",\"I3C was originally intended as the only interface for all digitally connected sensors used in a mobile application.\",\"The bus is also suitable for all medium and high speed embedded applications, including sensors, power controllers, actuators, MCUs and FPGAs.\",\"I3C 的应用范围。\",\"I3C builds on and enhances the features and benefits of I2C, while maintaining backward compatibility.\",\"增强了 I2C 并保持了向后兼容性。\",\"The interface is useful for many applications because it provides high-speed data transmission at very low power levels while allowing multi-drop between the host processor and the peripherals, which is highly desirable for any embedded system.\",\"对于嵌入式系统来说，I3C 非常优秀，以非常低的功耗提供了高速的数据传输速率，同时允许主机处理器和外设之间的多点传输。\"]},\"1509\":{\"h\":\"I2C vs I3C\",\"t\":[\"Energy-saving and space-saving design for mobile devices (smartphones and IoT devices).\",\"Two-pole interface, which is a superset of the I2C standard. Older I2C slave devices can be connected to the newer bus.\",\"In-band interrupts over the serial bus instead of requiring separate pins.\",\"Standard Data Rate (SDR) throughput of up to 12.5 Mbps when using CMOS I / O levels\",\"HDR (High Data Rate) modes provide SPI-comparable throughput, but only require a fraction of the I2C fast-mode performance.\",\"A standardized set of common command codes\",\"Support for command queues\",\"Error detection and recovery (parity check in SDR mode and 5-bit CRC for HDR modes)\",\"Dynamic Address Assignment (DAA) for I3C slaves, but still supports static addresses for older I2C devices\",\"Hot-Join (some devices on the bus can be turned on and off during operation)\",\"Multi-master operation with clearly defined transfer\",\"Four different device classes can be supported on an I3C bus in standard mode (SDR)\"]},\"1510\":{\"h\":\"I2C Problem\",\"t\":[\"✅✅✅ Q: I2C 总线可以挂多个 Sensor, 但是我们的 SoC 中设置了很多 I2C Controller, 为什么要这么做呢？\",\"虽然一个 I2C 总线可以挂多个 Sensor, 但是总线可以传输的总的数据是固定的\",\"不同的 I2C Controller 是挂在不同的处理器上面的，如 ACPU 有一个 I2C Controller, MCPU 也有一个 I2C Controller, 那么我们设置多个 I2C Controller 可以避免不同的 CPU 子系统对一个 controller 进行复用，简化软件控制\",\"✅✅✅ Q: SensorHub 和 I2C 对 Sensor 而言有什么区别？\",\"I2C Controller 有些属于 CPU 控制，有些属于 SensorHub 控制；这也是为什么说 I2C 控制 Sensor 但是有一个 SensorHub，其关系应该是这样的：SensorHub --> I2C Controller(驱动软件) --> I2C 总线 --> Sensor.\"]},\"1511\":{\"h\":\"Reference\",\"t\":[\"https://evision-webshop.de/I2C-vs-I3C-Protocol-Analyzers-Differences-and-Similarities↩︎\",\"I3C Bus Wiki↩︎\",\"MIPI Alliance↩︎\"]},\"1512\":{\"h\":\"Idle\"},\"1513\":{\"h\":\"Abstract\",\"t\":[\"本文主要研究 kernel 中的 idle 机制以及代码实现。\"]},\"1514\":{\"h\":\"Function Flow\",\"t\":[\"我们先对大体上的函数调用栈进行一个简单的示意图总结：\",\"cpuidle_enter_state() 之后的流程可以参考 tick_broadcast_oneshot_control() 的分析。\"]},\"1515\":{\"h\":\"cpu_startup_entry\",\"t\":[\"笔者在实际的业务场景中抓取过 idle 函数的调用栈，大概如下所示：\",\"[] [pid:0,cpu6,swapper/6,0] show_stack+0x14/0x1c [] [pid:0,cpu6,swapper/6,1] dump_stack_lvl+0xb8/0x108 [] [pid:0,cpu6,swapper/6,2] dump_stack+0x14/0x1c [] [pid:0,cpu6,swapper/6,3] cpuidle_select+0x20/0x54 [] [pid:0,cpu6,swapper/6,4] 0xffffffe55f4d072c [] [pid:0,cpu6,swapper/6,5] cpu_startup_entry+0x20/0x24 [] [pid:0,cpu6,swapper/6,6] secondary_start_kernel+0x1e8/0x208 [] [pid:0,cpu6,swapper/6,7]CPU: 6 PID: 0 Comm: swapper/6 VIP: 00 [] [pid:0,cpu6,swapper/6,8]TGID: 0 Comm: swapper/6 [] [pid:0,cpu6,swapper/6,9]Hardware name: xxx (DT) \",\"这是一个很关键的调用栈，我们可以看到 cpu_startup_entry 会调用到 cpuidle_select, 在图中进行了高亮。\",\"start_kernel → rest_init → cpu_startup_entry, 基本的调用关系可以如此理解，看 cpu_startup_entry 的实现：\",\"// in kernel/linux-5.10/kernel/sched/idle.c void cpu_startup_entry(enum cpuhp_state state) { arch_cpu_idle_prepare(); cpuhp_online_idle(state); while (1) do_idle(); } \",\"cpu_startup_entry 流程\",\"void cpu_startup_entry(enum cpuhp_state state)\",\"arch_cpu_idle_prepare()，进行 idle 前的准备工作，ARM64 中没有实现 \",\"cpu idle loop: 进入 cpuidle 的主循环；在上面代码中体现为 while loop \",\"…\",\"下面的流程见 do_idle()\",\"也就是说，idle 线程执行的时候，是一直在运行这个 do_idle() 的。\"]},\"1516\":{\"h\":\"do_idle\",\"t\":[\"do_idle() 会执行 CPU idle 的主要操作。\",\"cpu_idle_loop 调用流程 static void do_idle(void)\",\"__current_set_polling(): 后续研究\",\"tick_nohz_idle_enter(): 后续研究\",\"如果系统当前不需要调度（while (!need_resched())），执行后续的动作\",\"local_irq_disable()，关闭 irq 中断\",\"arch_cpu_idle_enter()，arch 相关的 cpuidle enter，ARM64 中没有实现\",\"cpuidle_idle_call()，main idle function\",\"cpuidle_select，通过 cpuidle governor，选择一个 cpuidle state\",\"cpuidle_enter，通过 cpuidle state，进入该 idle 状态\",\"…\",\"中断产生，idle 返回（注意，此时irq是被禁止的，因此CPU不能响应产生中断的事件）\",\"cpuidle_reflect，通知 cpuidle governor，更新状态\",\"local_irq_enable，使能中断，响应中断事件，跳转到对应的中断处理函数\",\"…\",\"arch_cpu_idle_exit，和 enter 类似，ARM64没有实现\"]},\"1517\":{\"h\":\"local_irq_dis(en)able\",\"t\":[\"这个函数涉及到中断处理的相关操作，local_irq_disable() 会禁止本地中断的传递，在这个地方有 4 个相似的接口，可以加以区分便于使用：\",\"函数\",\"说明\",\"local_irq_disable()\",\"禁止本地中断传递\",\"local_irq_enable()\",\"激活本地中断传递（无条件激活中断）\",\"local_irq_save()\",\"保存本地中断传递的当前状态，然后禁止本地中断传递\",\"local_irq_restore()\",\"恢复本地中断传递到更定的状态\",\"通常而言，我们会使用 local_irq_save() 和 local_irq_restore() 配合使用，这样做的好处在于：我们在此之前并不知道本地中断是开启还是关闭的，如果要使我们的代码对中断的原始状态不做过多的影响，用这两个接口是非常合适的。再多说一些，local_irq_enable() 是会无条件激活中断的，尽管这个中断可能在开始时就是关闭的。\",\"再回到禁止中断这个事情本身，通过禁止中断，可以确保某个中断处理程序不会抢占当前的代码；此外，禁止中断还可以禁止内核抢占。但是需要注意的是，禁止中断并不能避免来自其他处理器的并发访问（使用锁来防止并发访问，或者使用核独占的数据结构）。\",\"实现禁止中断只需要使用一条汇编指令即可，在 arm64 中使用的是 msr daifclr, #2 来禁止中断。\"]},\"1518\":{\"h\":\"cpuidle_idle_call\",\"t\":[\"在外围对是否进入该函数有一个判断：\",\"if (cpu_idle_force_poll || tick_check_broadcast_expired()) { tick_nohz_idle_restart_tick(); cpu_idle_poll(); } else { cpuidle_idle_call(); } \",\"cpu_idle_force_poll 表示是否开启强制轮询模式，关于 idle polling 可以见下面章节的描述；\",\"tick_check_broadcast_expired 表示 tick 是否过期需要重新开始以免进入深度睡眠。\",\"在进入 cpuidle_idle_call 之后，会有一段较长的逻辑：\",\"static void cpuidle_idle_call(void) { // ... if (need_resched()) { local_irq_enable(); return; } if (cpuidle_not_available(drv, dev)) { tick_nohz_idle_stop_tick(); default_idle_call(); goto exit_idle; } if (idle_should_enter_s2idle() || dev->forced_idle_latency_limit_ns) { // ... call_cpuidle(drv, dev, next_state); } else { next_state = cpuidle_select(drv, dev, &stop_tick); if (stop_tick || tick_nohz_tick_stopped()) tick_nohz_idle_stop_tick(); else tick_nohz_idle_retain_tick(); entered_state = call_cpuidle(drv, dev, next_state); cpuidle_reflect(dev, entered_state); } exit_idle: __current_set_polling(); // ... } \",\"我们去除了一些复杂细节，专注于我们的主体流程研究。\",\"cpuidle_idle_call 函数刚开始，先是两个判断：\",\"need_resched(): 是否有任务过来需要调度？\",\"cpuidle_not_available(drv, dev): 驱动是否支持？\",\"这两个判断的结果比较明显，分支预测准确的概览也较大。\",\"接下来的流程就是进行判断，根据策略的不同走不同的分支，最终都会调用到函数 call_cpuidle.\"]},\"1519\":{\"h\":\"call_cpuidle\",\"t\":[\"该函数的逻辑比较简单，就是一些特殊情况的判断，而后进行 cpuidle_enter 函数的调用：\",\"static int call_cpuidle(struct cpuidle_driver *drv, struct cpuidle_device *dev, int next_state) { if (current_clr_polling_and_test()) { // ... return -EBUSY; } return cpuidle_enter(drv, dev, next_state); } \",\"cpuidle_enter 的逻辑也是非常简单，进行一个判断：\",\"int cpuidle_enter(struct cpuidle_driver *drv, struct cpuidle_device *dev, int index) { // ... if (cpuidle_state_is_coupled(drv, index)) ret = cpuidle_enter_state_coupled(dev, drv, index); else ret = cpuidle_enter_state(dev, drv, index); // ... return ret; } \",\"无论哪种情况，都是会进行 cpuidle_enter_state 函数的调用。\"]},\"1520\":{\"h\":\"cpuidle_enter_state()\",\"t\":[\"函数位置：kernel/linux-5.10/drivers/cpuidle/cpuidle.c\",\"为了方便我们理解记忆，将该函数进行分解：\",\"int cpuidle_enter_state(struct cpuidle_device *dev, struct cpuidle_driver *drv, int index) { // ... if (index < 0) return index; broadcast = !!(target_state->flags & CPUIDLE_FLAG_TIMER_STOP); if (broadcast && tick_broadcast_enter()) { // maybe return } if (target_state->flags & CPUIDLE_FLAG_TLB_FLUSHED) leave_mm(dev->cpu); if (!(target_state->flags & CPUIDLE_FLAG_RCU_IDLE)) rcu_idle_enter(); entered_state = target_state->enter(dev, drv, index); if (!(target_state->flags & CPUIDLE_FLAG_RCU_IDLE)) rcu_idle_exit(); /* The cpu is no longer idle or about to enter idle. */ sched_idle_set_state(NULL); if (broadcast) { } if (!cpuidle_state_is_coupled(drv, index)) local_irq_enable(); if (entered_state >= 0) { } else { } return entered_state; } \",\"这个函数核心的逻辑是进入给定 index 的 idle 状态 target_state->enter(dev, drv, index);, 然后将这个状态返回；但是在实际的实现中，因为涉及到中断、tick、配置等逻辑，所以比较复杂。\",\"下文是对代码中细节和原理的研究：\"]},\"1521\":{\"h\":\"broadcast\",\"t\":[\"broadcast = !!(target_state->flags & CPUIDLE_FLAG_TIMER_STOP); \",\"这行代码的作用是设置一个广播标志，判断是否需要停止定时器。其中，target_state 是一个指向 cpuidle_state 结构体的指针，该结构体描述了 CPU 的空闲状态，包括状态标识、所需的底层硬件支持、进入和退出该状态所需的操作等信息。\",\"具体来说，target_state->flags 是一个位掩码，用于描述该空闲状态标识的一些特定属性。&运算符将该位掩码与 CPUIDLE_FLAG_TIMER_STOP 逐位进行 AND 运算，结果非零则表示 target_state 的 flags 属性中存在 CPUIDLE_FLAG_TIMER_STOP 标志，即需要停止定时器。!! 运算符则将结果转换为布尔类型，确保在任何情况下返回的都是 0 或 1 的布尔值，而不是整型数值（双重否定表示肯定）。\",\"因此，这行代码最终会将广播标志设置为 true 或 false，表示需要或不需要停止定时器。在 CPU 进入空闲状态之前，内核会根据广播标志来决定是否向其他 CPU 广播空闲状态，并通知它们停止当前正在运行的定时器。\",\"简单来说，如果 local timer 关闭的话（进入更深层次的 idle 状态），就需要使用 broadcast.\"]},\"1522\":{\"h\":\"CPUIDLE_FLAG_TLB_FLUSHED\",\"t\":[\"if (target_state->flags & CPUIDLE_FLAG_TLB_FLUSHED) { leave_mm(dev->cpu); } \",\"这段代码的作用是，在CPU进入指定的空闲状态之前检查该状态是否需要刷新TLB，并在必要时执行离开当前进程的操作。（从实测的数据来看，基本上没有刷新 TLB 的操作，这段逻辑很少被执行）\",\"其中，target_state 是一个指向 cpuidle_state 结构体的指针，描述了要进入的空闲状态，包括状态标识、所需的底层硬件支持和进入该状态所需的操作等信息。flags 字段表示该状态的一些特殊属性，如 CPUIDLE_FLAG_TLB_FLUSHED，表示在进入该状态前需要刷新 TLB（Translation Lookaside Buffer）。\",\"如果检测到目标状态需要刷新 TLB，则调用 leave_mm(dev->cpu) 函数执行离开当前进程的操作。该函数的作用是在该 CPU 上的所有进程中暂停当前进程，并切换到空闲进程，以便操作系统在进入空闲状态之前刷新 TLB 高速缓存。\",\"总之，这段代码的作用是确保在进入特定的空闲状态之前清除 TLB 以避免任何不必要的冲突，同时保证进程能够正确地切换。\"]},\"1523\":{\"h\":\"sched_idle_set_state\",\"t\":[\"/* Take note of the planned idle state. */ sched_idle_set_state(target_state); // 其实现如下： void sched_idle_set_state(struct cpuidle_state *idle_state) { idle_set_state(this_rq(), idle_state); } \",\"这段代码的作用是将当前 CPU 切换到指定的空闲状态，也就是进入一种较低功耗的状态以进行省电。注意到在我们的 cpuidle_enter_state 流程中，这个 sched_idle_set_state 函数被两次调用：\",\"/* Take note of the planned idle state. */ sched_idle_set_state(target_state); // ... /* The cpu is no longer idle or about to enter idle. */ sched_idle_set_state(NULL); \",\"sched_idle_set_state 是一个内核函数，用于设置当前 CPU 的空闲状态，并让 CPU 进入相应的空闲状态。target_state 是一个指向 cpuidle_state 结构体的指针，描述了要进入的空闲状态，包括状态标识、所需的底层硬件支持和进入该状态所需的操作等信息。\",\"this_rq() 表示当前 CPU 所在的 CPU 运行队列（runqueue），它的返回值是一个指向 struct rq 结构体的指针，该结构体描述了 CPU 调度器的运作情况和统计信息。\",\"在调用该函数之前，内核通常会执行一些准备工作，如停止定时器、暂停当前进程、刷新 TLB 等。接着，调用该函数将当前 CPU 切换到目标状态，并执行目标状态所需的操作，如关闭某些设备、降低 CPU 主频等。\",\"整个过程是由内核负责管理和控制的，程序员无法直接控制。当系统需要重新唤醒 CPU 时，内核会根据 CPU 的中断或事件触发来驱动 CPU 从空闲状态中返回，并恢复相关的设备和资源。\"]},\"1524\":{\"h\":\"rcu_idle_enter\",\"t\":[\"if (!(target_state->flags & CPUIDLE_FLAG_RCU_IDLE)) rcu_idle_enter(); \",\"这段代码用于判断当前进入空闲状态的目标状态是否需要进行RCU（Read-Copy-Update）空闲处理，如果需要，则调用 rcu_idle_enter 函数进行 RCU 空闲处理。\",\"在Linux内核中，RCU是一种无锁机制，用于在多个进程间共享数据。当一个进程需要修改共享数据时，该进程会先创建出一个新的副本，对其进行修改，然后将新副本加入到RCU保护区中。此时，其他进程仍然可以访问旧的副本，不会受到影响。当所有对旧副本的访问都结束后，RCU保护区才会被清空，新副本才会变成有效的数据。\",\"在进入空闲状态时，如果当前CPU正在进行RCU更新操作，就需要进行RCU空闲处理，即等待所有正在使用旧副本的进程完成访问后，再进行新副本的更新。这样一来，就可以避免数据的冲突和不一致性。\",\"rcu_idle_enter函数用于启动RCU空闲处理，并进入RCU空闲状态。该函数会将当前CPU所在的调度器的状态设置为RCU空闲状态，然后等待所有正在使用旧副本的进程访问完毕，直到RCU保护区被清空。在此期间，该CPU不会执行任何其他任务，以避免对正在访问旧副本的进程产生干扰。\",\"void rcu_idle_enter(void) { lockdep_assert_irqs_disabled(); rcu_eqs_enter(false); } \",\"rcu_idle_enter 函数是用于启动RCU空闲处理并进入RCU空闲状态的函数。\",\"其中，lockdep_assert_irqs_disabled 函数用于断言当前中断已经被禁止，在RCU空闲处理期间不会被重新打开。该函数会在执行时检查当前是否处于内核锁定状态，并通过锁依赖机制确保锁的正确性。如果当前存在锁冲突，则会抛出一个警告信息。\",\"rcu_eqs_enter 函数则用于进入RCU空闲状态并等待所有正在使用旧副本的进程访问完毕。其中，参数false表示不需要检查是否处于内核软件调试状态（KDB或KGDB）。在该函数中，会调用rcu_prepare_for_idle函数进行RCU更新准备工作，并将当前CPU所在的调度器状态设置为RCU空闲状态。然后，该函数会启动一个RCU处理线程，在其中等待所有正在使用旧副本的进程访问完毕并结束。❓❓ 待处理线程结束之后，该函数会将当前CPU所在调度器状态设置为正常运行状态，并返回。\"]},\"1525\":{\"h\":\"enter\",\"t\":[\"entered_state = target_state->enter(dev, drv, index); \",\"进入 state, 待深入研究。❌❌❌\"]},\"1526\":{\"h\":\"rcu_idle_exit\",\"t\":[\"if (!(target_state->flags & CPUIDLE_FLAG_RCU_IDLE)) rcu_idle_exit(); \",\"这段代码用于判断目标状态是否为RCU空闲状态，并在不是RCU空闲状态时退出RCU空闲处理。\",\"如果目标状态的flags字段中包含CPUIDLE_FLAG_RCU_IDLE标志，说明此时需要进入RCU空闲状态，即需要等待所有正在访问旧副本的进程结束后再进行新副本的更新。此时，不需要退出RCU空闲处理，代码直接跳过。\",\"但如果目标状态的flags字段中不包含CPUIDLE_FLAG_RCU_IDLE标志，则代表当前并不需要进行RCU空闲处理。此时，需要通过rcu_idle_exit函数退出RCU空闲处理。该函数会将当前CPU所在的调度器状态设置为正常运行状态，并唤醒所有等待RCU更新的进程（如等待RCU更新的进程队列等）。这样一来，RCU更新操作就可以继续进行，而不会被阻塞在RCU空闲状态中。\",\"需要注意的是，只有在完成了RCU更新操作之后，才能调用rcu_idle_exit函数退出RCU空闲状态。否则，会引起数据访问冲突和不一致性，导致系统出现异常。因此，在使用该函数时，需要保证系统支持RCU机制，并遵循相关的使用原则和规范。\"]},\"1527\":{\"h\":\"critical_timings\",\"t\":[\"stop_critical_timings(); // ... start_critical_timings(); \",\"stop_critical_timings 用于停止内核关键代码段的性能计数和统计，以便进行性能分析和优化。该函数通常在内核调试、性能测试等场景下使用，以了解内核关键代码段的耗时和执行情况，从而进行优化。\",\"该函数会将内核当前的性能计数器（如TSC、APIC计数器等）停止，并记录下停止时的值，然后将所有的性能计数器状态都设置为暂停。这样一来，在停止之前和停止之后，所有关键代码段的执行时间就可以计算出来了。\",\"start_critical_timings 的作用正好相反，就不过多赘述了。\"]},\"1528\":{\"h\":\"idle polling\",\"t\":[\"idle polling 是一个空闲轮询机制。\",\"我们来看代码：\",\"#ifdef CONFIG_GENERIC_IDLE_POLL_SETUP static int __init cpu_idle_poll_setup(char *__unused) { cpu_idle_force_poll = 1; return 1; } __setup(\\\"nohlt\\\", cpu_idle_poll_setup); static int __init cpu_idle_nopoll_setup(char *__unused) { cpu_idle_force_poll = 0; return 1; } __setup(\\\"hlt\\\", cpu_idle_nopoll_setup); #endif \",\"cpu_idle_poll_ctrl可以作为一个调度器选项，对空闲轮询机制进行控制。其具体做法是：\",\"当cpu_idle_poll_ctrl=1时，空闲轮询机制被启用，调度器会直接检查是否有可运行的进程；\",\"当cpu_idle_poll_ctrl=0时，空闲轮询机制被禁用，CPU会挂起或执行某些简单指令以等待其他事件的发生。\",\"在传统的CPU调度方案中，当CPU处于空闲状态时，调度器通常会挂起CPU或让CPU执行一些简单的指令，以避免CPU浪费过多的时间。而在空闲轮询机制下，调度器会在CPU空闲时，立即检查系统中是否有可运行的进程，如果有，则立即唤醒该进程并将CPU分配给它。\",\"具体的 polling 实现可能会分成很多种，如 busy-waiting, 表示如果没有可以运行的进程的话，则调度器会继续等待下一次轮询；如 sleep, 当 CPU 空闲时，会将整个 CPU 设置为休眠状态，以节能。\"]},\"1529\":{\"h\":\"DEFINE_PER_CPU\",\"t\":[\"DEFINE_PER_CPU 是一个宏，用于定义一种特殊的变量类型，称为 \\\"per-cpu 变量\\\"。这种变量在 Linux 内核中广泛使用，用于跨多个 CPU 核心共享数据时保证数据的一致性。\",\"使用 DEFINE_PER_CPU 宏定义的变量，会在每个 CPU 核心上都创建一个独立的副本，并通过内核提供的函数接口进行同步和访问。这样，在多核系统中，不同 CPU 核心上的代码可以同时访问该变量，而不会出现数据竞争或者锁竞争等问题。\",\"具体来说，DEFINE_PER_CPU 宏的语法如下：\",\"DEFINE_PER_CPU(type, var); \",\"其中，type 指定了变量的类型，var 是变量名。例如：\",\"DEFINE_PER_CPU(int, my_var); \",\"上述代码定义了一个名为 my_var 的 per-cpu 整型变量。在汇编层面，编译器会自动生成对应的代码，以便为每个 CPU 核心上创建一个独立的 int 类型的变量，并对其进行初始化和管理。在 C 代码层面，程序员可以通过 get_cpu_var() 和 put_cpu_var() 等函数来访问和修改 per-cpu 变量的值，例如：\",\"int val = get_cpu_var(my_var); put_cpu_var(my_var, val+1); \",\"需要注意的是，per-cpu 变量仅适用于每个 CPU 核心独立使用的数据，并不适用于需要全局同步的数据结构。此外，需要注意内存分配和访问的开销，以避免影响系统的性能。\"]},\"1530\":{\"h\":\"Idle Data Struct\"},\"1531\":{\"h\":\"Abstract\",\"t\":[\"本章节主要针对性分析 Idle 中的数据结构。在 kernel 中的 cpuidle framework 主体包括三个模块：cpuidle core, cpudile governors 和 cpuidle drivers.\",\"cpuidle core: 负责整体框架，对接 sched 模块，调度器发现没有任务在执行的时候，就切换到 idle 进程，通知就会给 cpuidle core; cpuidle core 负责向 cpuidle driver/governors 模块提供统一的注册和管理接口，向用户空间提供 governor 选择的接口。\",\"cpuidle governors: 在该模块进行 cpuidle 的选择；\",\"cpuidle driver: 负责具体 idle 机制的实现。\",\"总的来说，这几个的关系大致如下图所示：\"]},\"1532\":{\"h\":\"cpuidle core\",\"t\":[\"cpuidle core 是 cpuidle framework 的核心模块，负责抽象出 cpuidle device、cpuidle driver 和 cpuidle governor三个实体。\",\"其负责的功能有：\",\"（如上阐述）向底层的 cpuidle driver 模块提供 cpudile devic e和 cpuidle driver 的注册/注销接口；\",\"（如上阐述）向 cpuidle governors 提供 governor 的注册接口；\",\"提供全局的 puidle 机制的开、关、暂停、恢复等功能；\",\"（如上阐述）向用户空间程序提供 governor 选择的接口；\",\"向 kernel sched 中的 cpuidle entry 提供 cpuidle 的级别选择、进入等接口，以方便调用。\"]},\"1533\":{\"h\":\"cpuidle device\",\"t\":[\"在现在的 SMP 系统中，每个 cpu core 都会对应一个 cpuidle device, 内核通过 strcut cpuidle_device 抽象 cpuidle device.\"]},\"1534\":{\"h\":\"cpuidle driver\",\"t\":[\"cpuidle driver 是一个 “driver\\\", 其驱动的对象是 cpuidle device, 也就是 CPU；注意到在 SMP 系统中，有多个 CPU，也就意味着有多个 cpuidle device; 在实现 idle 的时候，如果这些 cpuidle device 的功能、参数相同，则可以使用一个 cpuidle driver 驱动，具体而言，kernel 中的宏 CONFIG_CPU_IDLE_MULTIPLE_DRIVERS 可以用来使能是否使用多个 cpu driver. 在实际的应用场景中，这个开关是被使能的。\",\"代码可见 https://github.com/torvalds/linux/blob/master/include/linux/cpuidle.h\",\"/**************************** * CPUIDLE DRIVER INTERFACE * ****************************/ struct cpuidle_driver { const char *name; struct module *owner; /* used by the cpuidle framework to setup the broadcast timer */ unsigned int bctimer:1; /* states array must be ordered in decreasing power consumption */ struct cpuidle_state states[CPUIDLE_STATE_MAX]; int state_count; int safe_state_index; /* the driver handles the cpus in cpumask */ struct cpumask *cpumask; /* preferred governor to switch at register time */ const char *governor; }; \",\"bctimer:1: 一个标志，用于指示在 cpuidle driver 注册和注销时，是否需要设置一个 broadcast timer;\",\"cpumask: 一个 struct cpumask 结构的 bit map 指针，用于说明该 driver 支持哪些 cpu core;\",\"states, state_count：该 driver 所支持的 idle state 及其个数。cpuidle driver 的主要任务就是定义所支持的 cpuidle state; 需要注意注释中所提到的，states 应该按照功耗大小降序排列。\",\"cpuidle driver 的注册，我们在这边主演研究多个 cpu driver 的场景，主要是分为几个：\",\"💄 __cpuidle_get_cpu_driver:\",\"static struct cpuidle_driver *__cpuidle_get_cpu_driver(int cpu) { // 返回 pre_cpu 指针的值 return per_cpu(cpuidle_drivers, cpu); } \",\"💄__cpuidle_set_driver\",\"static inline int __cpuidle_set_driver(struct cpuidle_driver *drv) { int cpu; for_each_cpu(cpu, drv->cpumask) { struct cpuidle_driver *old_drv; old_drv = __cpuidle_get_cpu_driver(cpu); if (old_drv && (old_drv != drv)) return -EBUSY; } for_each_cpu(cpu, drv->cpumask) per_cpu(cpuidle_drivers, cpu) = drv; return 0; } \",\"对于每个 cpumask 的 cpu, 设置 drv; 条件是原有的 cpu 无 drv 或者是有 drv 并且和需要设置的不相等（不相等的话直接 return 不进行设置）\",\"设置的方法如高亮行所示\"]},\"1535\":{\"h\":\"Something Else\"},\"1536\":{\"h\":\"tickless\",\"t\":[\"In the context of operating systems, \\\"tickless\\\" refers to a power management feature that allows the system to reduce power consumption by dynamically adjusting the frequency of timer interrupts.\",\"About \\\"tick\\\" interrupt:\",\"Traditionally, operating systems use a periodic timer interrupt, often called the \\\"tick,\\\" to keep track of time and to perform various tasks such as updating the system clock, scheduling tasks, and handling interrupts. These timer interrupts are generated at a fixed frequency, regardless of whether there is any work to be done, which can consume a significant amount of power.\"]},\"1537\":{\"h\":\"WFI\",\"t\":[\"WFI 是英文 Wait for Interrupt 的缩写，意为等待中断。WFI 指令是 ARM 处理器提供的一种指令，用于将处理器置于等待状态，直到下一个中断事件发生后才会继续执行。\",\"Arm64 提供了 WFI 指令，使得 CPU 一旦执行该指令就进入低功耗状态，该状态会关闭 CPU 时钟，从而降低动态功耗。\",\"如果我们想实现一个简单的 idle 的话，需要以下的流程即可[1]：\",\"while (1) { if (condition) break; } \",\"在上述代码中，我们的 CPU 空转一直等待某个条件成立；这是最简单的实现方法。\",\"而 Arm64 提供的 WFI 指令可以帮助系统降低功耗。此外，操作系统还可以通过 WFI 指令实现快速唤醒，以保证系统的响应速度和实时性。\",\"https://zhuanlan.zhihu.com/p/539722367↩︎\"]},\"1538\":{\"c\":[\"Kernel\"]},\"1539\":{\"h\":\"Tick in Idle\"},\"1540\":{\"h\":\"Abstract\",\"t\":[\"本文研究 tick, 在 kernel 的 idle 流程中，会出现对 tick 的调用，用于进行 idle 状态时钟的控制等。由于其机制复杂，代码量大，故将其单独进行研究。\",\"本文主要针对于 idle 流程中涉及到的 tick 进行简单研究。\"]},\"1541\":{\"h\":\"tick_nohz_idle_stop_tick\",\"t\":[\"当出现需要处理的中断时，CPU 将从无操作系统状态恢复到正常运行状态，并执行 tick_nohz_idle_stop_tick 函数来重新启用时钟事件处理器。\",\"tick_nohz_stop_tick 的作用类似。\",\"tick\",\"tick 是周期性产生的 timer 中断事件，在系统中断的时候，不想产生周期性的中断，提出了动态时钟的概念，在系统空闲的阶段停掉周期性的时钟达到节省功耗的目的。\",\"内核可以通过配置项 CONFIG_NO_HZ 及 CONFIG_NO_HZ_IDLE 来打开该功能，这样在系统空闲的时候就可以停掉 tick 一段时间，但并不是完全没有 tick 了，当有除了 idle 进程之外的其它进程运行的时候会恢复 tick[^2] 。\",\"tick_device_mode 有两种模式：TICKDEV_MODE_PERIODIC 和 TICKDEV_MODE_ONESHOT，即周期模式和单触发模式。\"]},\"1542\":{\"h\":\"tick_broadcast_oneshot_control()\",\"t\":[\"在研究之前，我们先给出调用关系图：\",\"该函数代码的作用是打开或者关闭本地定时器。当 CPU 要进入需要关闭 local timer 的 idle 状态的时候，会调用tick_broadcast_enter()函数，从而告诉 tick 广播层属于本 CPU 的本地定时事件设备就要停止掉了，需要广播层提供服务。相反的，如果要退出某种 idle 状态之后，会调用 tick_broadcast_exit() 函数，恢复本 CPU 的本地定时事件设备，停止针对本 CPU 的 tick 广播服务。\",\"这两个函数的代码如下：\",\"static inline int tick_broadcast_enter(void) { return tick_broadcast_oneshot_control(TICK_BROADCAST_ENTER); } static inline void tick_broadcast_exit(void) { tick_broadcast_oneshot_control(TICK_BROADCAST_EXIT); } \",\"从中我们可以看出，这两个函数都是调用了 tick_broadcast_oneshot_control(我们本小节的主角函数)，只不过是传入了不同的 state 参数，该函数的实现如下：\",\"// in kernel/linux-5.10/kernel/time/tick-common.c int tick_broadcast_oneshot_control(enum tick_broadcast_state state) { struct tick_device *td = this_cpu_ptr(&tick_cpu_device); if (!(td->evtdev->features & CLOCK_EVT_FEAT_C3STOP)) return 0; return __tick_broadcast_oneshot_control(state); } EXPORT_SYMBOL_GPL(tick_broadcast_oneshot_control); \",\"函数首先那倒本地的 tick 设备，然后判断如果本 CPU 的 tick 设备不支持 CLOCK_EVT_FEAT_C3STOP 也就是 C3_STOP 状态的话直接退出。否则会调用 __tick_broadcast_oneshot_control 函数，我们继续看其实现：\",\"// kernel/linux-5.10/kernel/time/tick-broadcast.c int __tick_broadcast_oneshot_control(enum tick_broadcast_state state) { struct tick_device *td = this_cpu_ptr(&tick_cpu_device); int cpu = smp_processor_id(); if (!tick_oneshot_wakeup_control(state, td, cpu)) return 0; if (tick_broadcast_device.evtdev) return ___tick_broadcast_oneshot_control(state, td, cpu); /* * If there is no broadcast or wakeup device, tell the caller not * to go into deep idle. */ return -EBUSY; } \",\"该函数分为两个大的部分:\",\"tick_oneshot_wakeup_control\",\"___tick_broadcast_oneshot_control\",\"我们在后文进行分析。\"]},\"1543\":{\"h\":\"tick_oneshot_wakeup_control\",\"t\":[\"static int tick_oneshot_wakeup_control(enum tick_broadcast_state state, struct tick_device *td, int cpu) { struct clock_event_device *dev, *wd; dev = td->evtdev; if (td->mode != TICKDEV_MODE_ONESHOT) return -EINVAL; wd = tick_get_oneshot_wakeup_device(cpu); if (!wd) return -ENODEV; switch (state) { case TICK_BROADCAST_ENTER: clockevents_switch_state(dev, CLOCK_EVT_STATE_ONESHOT_STOPPED); clockevents_switch_state(wd, CLOCK_EVT_STATE_ONESHOT); clockevents_program_event(wd, dev->next_event, 1); break; case TICK_BROADCAST_EXIT: /* We may have transitioned to oneshot mode while idle */ if (clockevent_get_state(wd) != CLOCK_EVT_STATE_ONESHOT) return -ENODEV; } return 0; } \"]},\"1544\":{\"h\":\"___tick_broadcast_oneshot_control\",\"t\":[\"这段代码很长，不在此进行全部列举。\",\"static int ___tick_broadcast_oneshot_control(enum tick_broadcast_state state, struct tick_device *td, int cpu) { // ... raw_spin_lock(&tick_broadcast_lock); if (state == TICK_BROADCAST_ENTER) { } else { } out: raw_spin_unlock(&tick_broadcast_lock); return ret; } \",\"函数的整体框架如上所示，按照传入的 state 进行划分，我们在上文说过，state 可以分为 TICK_BROADCAST_ENTER 和 TICK_BROADCAST_EXIT。\",\"后续会使用到的两个设备变量分别为：struct clock_event_device *bc, *dev = td->evtdev;\",\"bc: clock_event_device 结构体，bc = tick_broadcast_device.evtdev; 表示 tick 广播 设备；\",\"dev: clock_event_device 结构体，*dev = td->evtdev, td 来自于函数传参，是一个 tick 设备，这里指代的是待休眠(本) CPU 上面的 tick 设备。\",\"下文我们先对传入的两个 state 进行研究。\"]},\"1545\":{\"h\":\"TICK_BROADCAST_ENTER\",\"t\":[\"该 state 表征的是当前 CPU 要进入 idle 状态。其步骤可以分解为以下的：\",\"➡️➡️ 判断当前 CPU 能否进入（更深层次的）休眠状态。\",\"ret = broadcast_needs_cpu(bc, cpu); if (ret) goto out; \",\"If the current CPU owns the hrtimer broadcast mechanism, it cannot go deep idle and we do not add the CPU to the broadcast mask. We don't have to go through the EXIT path as the local timer is not shutdown.\",\"如果当前的 CPU 不支持广播模式的话，就不能使能更深层次的 idle 状态，故直接退出。判断是否可以支持 broadcast 使用下面的逻辑：\",\"static int broadcast_needs_cpu(struct clock_event_device *bc, int cpu) { if (!(bc->features & CLOCK_EVT_FEAT_HRTIMER)) return 0; if (bc->next_event == KTIME_MAX) return 0; return bc->bound_on == cpu ? -EBUSY : 0; } \",\"➡️➡️ TICKDEV_MODE_PERIODIC, 如果 tick 广播设备还在周期触发模式（与之对立的就是 one shot 模式）的话，执行以下逻辑：\",\"if (tick_broadcast_device.mode == TICKDEV_MODE_PERIODIC) { /* If it is a hrtimer based broadcast, return busy */ if (bc->features & CLOCK_EVT_FEAT_HRTIMER) ret = -EBUSY; goto out; } \",\"当 tick 广播设备是由高分辨率定时器模拟的则返回 -EBUSY.\",\"➡️➡️ one shot 模式 下面的处理逻辑，是设置 tick_broadcast_oneshot_mask 中当前 CPU 对应的位。\",\"tick_broadcast_oneshot_mask\",\"需要留意到 tick_broadcast_oneshot_mask 这个变量能否使用 __cpumask_var_read_mostly 进行修饰！后续遇到的变量也应当注意。\",\"if (!cpumask_test_and_set_cpu(cpu, tick_broadcast_oneshot_mask)) { WARN_ON_ONCE(cpumask_test_cpu(cpu, tick_broadcast_pending_mask)); /* Conditionally shut down the local timer. */ // 尝试关闭本 CPU 上的定时事件设备 broadcast_shutdown_local(bc, dev); /* * We only reprogram the broadcast timer if we * did not mark ourself in the force mask and * if the cpu local event is earlier than the * broadcast event. If the current CPU is in * the force mask, then we are going to be * woken by the IPI right away; we return * busy, so the CPU does not try to go deep * idle. */ // 如果 tick_broadcast_force_mask 中对应当前 CPU 的位被设置了 if (cpumask_test_cpu(cpu, tick_broadcast_force_mask)) { ret = -EBUSY; // 在此返回 -EBUSY 说明其暂时不能进入 idle /* 当前休眠 CPU 上的 tick 设备到期事件早于 tick 广播设备到期时间; * 如果该条件发生的话，则需要用当前 CPU 上 tick 设备的到期时间 * 去更新 tick 广播 */ } else if (dev->next_event < bc->next_event) { tick_broadcast_set_event(bc, cpu, dev->next_event); /* * In case of hrtimer broadcasts the * programming might have moved the * timer to this cpu. If yes, remove * us from the broadcast mask and * return busy. */ // 这边有个二次判断，很难理解 ret = broadcast_needs_cpu(bc, cpu); if (ret) { // 如果不支持广播模式的话，就清除掉当前 CPU 对应的那一位 cpumask_clear_cpu(cpu, tick_broadcast_oneshot_mask); } } } \",\"上面对每一行代码进行了解析，总结以下，总共做了以下的事情：\",\"关闭本地 CPU 的定时设备，主要的任务；\",\"关闭后设置 tick_broadcast_force_mask 中本 CPU 对应的标志位；这边可能会存在一个竞态，所以会查询一次看是否设置成功；\",\"在设置成功的前提下，调用 tick_broadcast_set_event, 设置 broadcast 事件；这个设置的前提是本 cpu 的 tick 事件早于广播的下一个事件（很好理解，否则我就用广播的事件时间就可以了）\",\"在此判断是否支持 broadcase, 为何要再次判断呢？这就涉及到了 hrtimer broadcasts 机制的运行原理，需要进行更加详细的研究。\"]},\"1546\":{\"h\":\"TICK_BROADCAST_EXIT\",\"t\":[\"@todo\"]},\"1547\":{\"c\":[\"Kernel\"]},\"1548\":{\"h\":\"init.h in Thermal\"},\"1549\":{\"h\":\"Abstract\",\"t\":[\"本文分析 Linux 源码 init.h 文件，并研究其中涉及到的内核初始化过程、Thermal 模块如何调用等问题。\"]},\"1550\":{\"h\":\"initcall\"},\"1551\":{\"h\":\"initcall{n}.init\",\"t\":[\"内核初始化过程中的调用顺序[1]：所有的 __init 函数在区段 .initcall.init 中还保存了一份函数指针，在初始化时内核会通过这些函数指针调用这些 __init 函数指针，并在整个初始化完成后，释放整个 init 区段，包括 .init.text，.initcall.init 等。\",\"这些函数在内核初始化过程中的调用顺序只和这里的函数指针的顺序有关，和函数本身在 .init.text 的区段无关。在 2.4 内核中，这些函数指针的顺序也是和链接的顺序有关的，是不确定的。在 2.6 内核中，initcall.init 区段又分成7个子区段，分别是:\",\".initcall1.init .initcall2.init .initcall3.init .initcall4.init .initcall5.init .initcall6.init .initcall7.init \",\"各个区段定义的方法分别是：\",\"core_initcall(fn) --->.initcall1.init postcore_initcall(fn) --->.initcall2.init arch_initcall(fn) --->.initcall3.init subsys_initcall(fn) --->.initcall4.init fs_initcall(fn) --->.initcall5.init device_initcall(fn) --->.initcall6.init late_initcall(fn) --->.initcall7.init \",\"在新的 5.17.4 内核中，各个区段的定义方法有所改变：\",\"#define pure_initcall(fn) __define_initcall(fn, 0) #define core_initcall(fn) __define_initcall(fn, 1) #define core_initcall_sync(fn) __define_initcall(fn, 1s) #define postcore_initcall(fn) __define_initcall(fn, 2) #define postcore_initcall_sync(fn) __define_initcall(fn, 2s) #define arch_initcall(fn) __define_initcall(fn, 3) #define arch_initcall_sync(fn) __define_initcall(fn, 3s) #define subsys_initcall(fn) __define_initcall(fn, 4) #define subsys_initcall_sync(fn) __define_initcall(fn, 4s) #define fs_initcall(fn) __define_initcall(fn, 5) #define fs_initcall_sync(fn) __define_initcall(fn, 5s) #define rootfs_initcall(fn) __define_initcall(fn, rootfs) #define device_initcall(fn) __define_initcall(fn, 6) #define device_initcall_sync(fn) __define_initcall(fn, 6s) #define late_initcall(fn) __define_initcall(fn, 7) #define late_initcall_sync(fn) __define_initcall(fn, 7s) \",\"不难看出，是多了一些同步的调用方法，其优先级是没有变化的。\",\"当我们需要把函数 fn() 放到 .initcall1.init 区段的时候，只需要声明：core_initcall(fn) 即可。\",\"而与 2.4 兼容的 initcall(fn) 则等价于 device_initcall(fn), 这个在内核中是如此兼容的：\",\"#define __initcall(fn) device_initcall(fn) \",\"各个子区段之间的顺序是确定的，即先调用 .initcall1.init 中的函数指针，在调用 .initcall2.init 中的函数指针，等。而在每个子区段中的函数指针的顺序是和链接的顺序相关的，是不确定的。\",\"在内核中，不同的 init 函数被放在不同的子区段中，因此也就决定了它们的调用顺序。这样做可以解决一些 init 函数之间必须保证一定的调用顺序的问题。\",\"A \\\"pure\\\" initcall has no dependencies on anything else, and purely initializes variables that couldn't be statically initialized.\"]},\"1552\":{\"h\":\"Thermal postcore_initcall()\",\"t\":[\"在 thermal_core.c 对 thermal 进行初始化，我们这么调用：\",\"postcore_initcall(thermal_init); \",\"也就是说，我们江 thermal_init 的步骤放在了 .initcall2.init 的子区段中，其 init 优先级仅次于 pure_init 和 core_init, 其中 pure_init 是不依赖于其他任何初始化函数的最先运行的。\"]},\"1553\":{\"h\":\"__section\",\"t\":[\"对于各个区段 section 的定义是这样的：\",\"/* These are for everybody (although not all archs will actually discard it in modules) */ #define __init __section(\\\".init.text\\\") __cold \\\\ __latent_entropy __noinitretpoline __nocfi #define __initdata __section(\\\".init.data\\\") #define __initconst __section(\\\".init.rodata\\\") #define __exitdata __section(\\\".exit.data\\\") #define __exit_call __used __section(\\\".exitcall.exit\\\") \",\"各个区段的示意图如下：\",\"上述应该在一个 Section 中，为了方便，将这两个分开画了。\",\"理解上述代码需要参考《Linux 内核初始化定义》[2] 这篇文章。\",\"第 3-4 行代码\",\"#define __init __section(\\\".init.text\\\") __cold __latent_entropy __noinitretpoline __nocfi\",\"__init 用于标记函数，这个放在 .init.text section, 标记为初始化的函数，仅仅只是能在初始化的期间使用，在模块装载后，会将初始化函数扔掉。这样做可以将初始化函数占用的内存释放出来。\",\"__cold 是告诉编译器这个函数很可能不被执行到。\",\"notrace\",\"#define notrace __attribute__((no_instrument_function)) 说明 notrace 的定义，其作用是在程序中加入 hook, 让它在每次进入和退出函数的时候分别调用这个函数。\",\"__initdata\",\"#define __initdata __section(\\\".init.data\\\")\",\"​ __initdata 用于标记数据。\",\"第 8 行代码 __exit_call\",\"#define __exit_call __used __section(\\\".exitcall.exit\\\")\",\"在模块卸载的时候使用，如果模块直接被编进内核就不会被调用；如果内核编译的时候没有包含该模块。则此标记的函数将被简单的丢弃。\",\"#define __ref __section(\\\".ref.text\\\") noinline #define __refdata __section(\\\".ref.data\\\") #define __refconst __section(\\\".ref.rodata\\\") \",\"noinline: 阻止该函数被内联。\",\"还有很多类似的定义 __section 的地方，就不一一列举了。\",\"对于 __section 的定义，在 compiler_attributes.h 中可以找到：\",\"#define __section(section) __attribute__((__section__(section))) \",\"我们不难看出，其本质就是一个 __attribute__.\"]},\"1554\":{\"h\":\"__attribute__\",\"t\":[\"可以设置函数属性(Function Attribute), 变量属性(Variable Attribute), 类型属性(Type Attribute)[3].\",\"GNU CC 需要使用 –Wall 编译器来击活 __attribute__ 功能。\",\"具体后续再进行研究。\"]},\"1555\":{\"h\":\"Linux 内核初始化\"},\"1556\":{\"h\":\"start_kernel\",\"t\":[\"内核初始化的 C 语言入口[4]是 start_kernel, 该函数首先初始化基础设施，即初始化内核的各个子系统，然后调用函数 rest_init, 该函数的执行流程如下：\",\"创建 1 号线程，即 init 线程，线程函数是 kernel_init\",\"创建 2 号线程，即 kthread 线程，负责创建内核线程\",\"0 号线程最终变成空闲线程\"]},\"1557\":{\"h\":\"init 线程\",\"t\":[\"init 线程继续初始化，执行的主要操作如下：\",\"smp_prepare_cpus() 在启动从处理器以前执行准备工作\",\"do_pre_smp_initcalls(): 执行必须在初始化 SMP 系统以前执行的早期初始化，即使用宏 early_initcall 注册的初始化函数\",\"smp_init(): 初始化 SMP 系统（对称多处理器系统），启动所有从处理器\",\"do_initcalls(): 执行级别 0~7 的初始化\",\"... 暂略\",\"分析：\",\"我们可以看到，do_initcalls() 这一步骤执行了级别 0~7 的初始化，所以说我们 thermal 模块的初始化就是在这个阶段完成的。\",\"从上文看到，在初始化 thermal 的时候，从处理器已经完成启动了。这句话的深层含义是说，系统启动时拔核等操作是在更底层完成的，要和加载区分进行区分，不要混淆。\"]},\"1558\":{\"h\":\"Reference\",\"t\":[\"内核初始化过程中的调用顺序↩︎\",\"Linux 内核初始化定义↩︎\",\"GNU attribute 机制↩︎\",\"《Linux 内核深度解析》 ↩︎\"]},\"1559\":{\"h\":\"Notifier\"},\"1560\":{\"h\":\"Abstract\",\"t\":[\"我们简单研究一下内核的 notify 机制。\",\"大多数内核子系统都是相互独立的，但是某个子系统可能会对其他子系统产生的事件感兴趣。为了满足这个需求，让某个子系统在发生某个事件的时候通知其他的子系统，Linux kernel 提供了通知链的机制，通知链表只能够在内核的子系统之间使用，而不能够在内核与用户空间之间进行事件的通知。\",\"提示\",\"本文分析的代码主要集中于：notifier.c 和 notifier.h 中。\"]},\"1561\":{\"h\":\"Notifier Struct\"},\"1562\":{\"h\":\"notifier_chain(notifier_head)\",\"t\":[\"我们需要了解到，通知链可以分为 4 种[1]，如下表所示：\",\"通知链(notifier.c)\",\"定义\",\"原子通知链 atomic_notifier_head\",\"采用自旋锁，通知链元素的回调函数（当事件发生时要执行的函数）在中断或原子操作上下文中运行，不允许阻塞。\",\"可阻塞通知链 blocking_notifier_head\",\"通知链使用信号量实现回调函数的加锁，通知链元素的回调函数在进程上下文中运行，允许阻塞。\",\"原始通知链 raw_notifier_head\",\"对通知链元素的回调函数没有任何限制，所有锁和保护机制都由调用者维护。\",\"SRCU 通知链 srcu_notifier_head\",\"可阻塞通知链的一种变体，采用互斥锁和叫做可睡眠的读拷贝更新机制 (Sleep-able Read-Copy Update)。\",\"这几种通知链的区别是在执行通知链上的回调函数时是否有安全保护措施。\",\"上图主要阐述了这 4 中 notifier_chain 中都有共同的 notifier_block, 阐述了 notifier 和 notifier_block 的关系。\"]},\"1563\":{\"h\":\"atomic_notifier_head\",\"t\":[\"struct atomic_notifier_head { spinlock_t lock; struct notifier_block __rcu *head; }; \",\"其中 spinlock_t 在 kernel 中表示自旋锁。自旋锁是用来避免竞争条件的一种机制。\",\"要初始化这个 head, 我们可以这么做：\",\"#define ATOMIC_NOTIFIER_HEAD(name) \\\\ struct atomic_notifier_head name = \\\\ ATOMIC_NOTIFIER_INIT(name) #define ATOMIC_NOTIFIER_INIT(name) { \\\\ .lock = __SPIN_LOCK_UNLOCKED(name.lock), \\\\ .head = NULL } \",\"或者使用对象直接初始化：\",\"#define ATOMIC_INIT_NOTIFIER_HEAD(name) do { \\\\ spin_lock_init(&(name)->lock); \\\\ (name)->head = NULL; \\\\ } while (0) \"]},\"1564\":{\"h\":\"blocking_notifier_head\",\"t\":[\"struct blocking_notifier_head { struct rw_semaphore rwsem; struct notifier_block __rcu *head; }; \",\"blocking_notifier_head 基于信号量的机制，本文不加以深入研究了。\",\"初始化类似于上文：\",\"#define BLOCKING_NOTIFIER_HEAD(name) \\\\ struct blocking_notifier_head name = \\\\ BLOCKING_NOTIFIER_INIT(name) #define BLOCKING_NOTIFIER_INIT(name) { \\\\ .rwsem = __RWSEM_INITIALIZER((name).rwsem), \\\\ .head = NULL } #define BLOCKING_INIT_NOTIFIER_HEAD(name) do { \\\\ init_rwsem(&(name)->rwsem); \\\\ (name)->head = NULL; \\\\ } while (0) \"]},\"1565\":{\"h\":\"raw_notifier_head\",\"t\":[\"其定义如下：\",\"struct raw_notifier_head { struct notifier_block __rcu *head; }; \",\"比较纯粹的调用链，其初始化过程如下：\",\"#define RAW_NOTIFIER_HEAD(name) \\\\ struct raw_notifier_head name = \\\\ RAW_NOTIFIER_INIT(name) #define RAW_NOTIFIER_INIT(name) { \\\\ .head = NULL } #define RAW_INIT_NOTIFIER_HEAD(name) do { \\\\ (name)->head = NULL; \\\\ } while (0) \"]},\"1566\":{\"h\":\"srcu_notifier_head\",\"t\":[\"其定义如下：\",\"struct srcu_notifier_head { struct mutex mutex; struct srcu_struct srcu; struct notifier_block __rcu *head; }; \",\"这个能不能用依赖于宏定义：\",\"#ifdef CONFIG_TREE_SRCU #define _SRCU_NOTIFIER_HEAD(name, mod) \\\\ static DEFINE_PER_CPU(struct srcu_data, name##_head_srcu_data); \\\\ mod struct srcu_notifier_head name = \\\\ SRCU_NOTIFIER_INIT(name, name##_head_srcu_data) #else #define _SRCU_NOTIFIER_HEAD(name, mod) \\\\ mod struct srcu_notifier_head name = \\\\ SRCU_NOTIFIER_INIT(name, name) #endif \",\"定义后其初始化过程为：\",\"#define SRCU_NOTIFIER_INIT(name, pcpu) \\\\ { \\\\ .mutex = __MUTEX_INITIALIZER(name.mutex), \\\\ .head = NULL, \\\\ .srcu = __SRCU_STRUCT_INIT(name.srcu, pcpu), \\\\ } \",\"暂时研究到这，以后如果有使用了再加以研究。\"]},\"1567\":{\"h\":\"notifier_block\",\"t\":[\"通知链表(也称作通知块，挂在通知链上面，上文有图)， notifier_block 的数据结构定义如下：\",\"struct notifier_block { int (*notifier_call)(struct notifier_block *self, unsigned long, void *); struct notifier_block *next; int priority; }; \",\"我们对参数进行分析：\",\"参数\",\"类型\",\"含义\",\"notifier_call\",\"函数指针\",\"表示这个节点所对应的要运行的那个函数\",\"next\",\"notifier_block *\",\"指向下一个节点，当前事件发生时还要继续指向的节点\",\"priority\",\"int\",\"表示该通知的优先级，同一条链上面的 notifier_block 是按照优先级排列的，数字越大，优先级越高。\",\"注意到在 5.17.4 内核中，我们对结构体的定义发生了变化：\",\"// notifier.h struct notifier_block { notifier_fn_t notifier_call; struct notifier_block __rcu *next; int priority; }; // notifier_fn_t typedef int (*notifier_fn_t)(struct notifier_block *nb, unsigned long action, void *data); \",\"我们对这个版本的参数也进行分析：\",\"参数\",\"类型\",\"含义\",\"notifier_call\",\"notifier_fn_t\",\"宏定义的一个函数指针，对原来的 int (*notifier_call) 进行了一个封装\",\"next\",\"notifier_block*\",\"还是指向下一个节点的 notifier_block\",\"priority\",\"int\",\"我们可以看到，新版的内核对函数指正进行了封装。个人理解这样做的好处在于，在阅读源码的时候，能更加方便的理解参数的含义。\",\"新封装的函数指针 notifier_fn_t 的参数理解如下：\",\"参数\",\"类型\",\"含义\",\"nb\",\"notifier_block *\",\"action\",\"unsigned long\",\"用于指明事件的类型；通知都是一个整数\",\"data\",\"void *\",\"void 类型的内存地址，在不同的子系统中表示不同的信息。\",\"对于第三个参数，需要注意的是：我们在设计自己的通知链系统可以用第三个入参实现在通知系统和被通知系统之间数据的传递，以便被通知系统的工作可以更加紧凑、高效。\"]},\"1568\":{\"h\":\"APIs\"},\"1569\":{\"h\":\"Abstract\",\"t\":[\"API 主要可以分为三类，如下图所示（无视那个虚线，为了排版）：\"]},\"1570\":{\"h\":\"notifier_chain_register\",\"t\":[\"通知链需要进行注册（注意到注册的时候要保证通知链存在，需要的前置步骤是后文的 init 部分，或者前文的 struct 部分也有介绍），对于一个链表的注册，需要一个表头，指向这个通知链表的第一个元素，注册函数的定义如下（Linux 内核中有很多的注册函数，我们拿一个举例）：\",\"// notifier.c // Returns 0 on success, %-EEXIST on error int atomic_notifier_chain_register(struct atomic_notifier_head *nh, struct notifier_block *n) { unsigned long flags; int ret; spin_lock_irqsave(&nh->lock, flags); ret = notifier_chain_register(&nh->head, n); spin_unlock_irqrestore(&nh->lock, flags); return ret; } \",\"这个函数的作用是 Add notifier to an atomic notifier chain, 就是在原子调用链中增加一个 notifier, 参数含义如下：\",\"参数\",\"类型\",\"含义\",\"nh\",\"atomic_notifier_head*\",\"Pointer to head of the atomic notifier chain. 指向调用链头部的一个指针。\",\"n\",\"notifier_block*\",\"前文分析过的 notifier_block\",\"第 9 行，使用了一个自旋锁，这是由 atomic_notifier_head 中的 lock 属性决定的。\",\"atomic_notifier_head 的定义如下：\",\"struct atomic_notifier_head { spinlock_t lock; struct notifier_block __rcu *head; }; \",\"具体分析见上文。\"]},\"1571\":{\"h\":\"notifier_chain_register\",\"t\":[\"静态方法 notifier_chain_register 的实现如下：\",\"Notifier chain core routines. The exported routines below are layered on top of these, with appropriate locking added.\",\"notifier chain 的核心代码。\",\"static int notifier_chain_register(struct notifier_block **nl, struct notifier_block *n) { while ((*nl) != NULL) { if (unlikely((*nl) == n)) { WARN(1, \\\"notifier callback %ps already registered\\\", n->notifier_call); return -EEXIST; } if (n->priority > (*nl)->priority) break; nl = &((*nl)->next); } n->next = *nl; rcu_assign_pointer(*nl, n); return 0; } \",\"n1 在调用的时候作为 head 传入，确保 n 的优先级比 n1 低。\"]},\"1572\":{\"h\":\"notifier_chain_unregister\",\"t\":[\"类似的，我们还有一个卸载函数 notifier_chain_unregister， 其定义如下：\",\"static int notifier_chain_unregister(struct notifier_block **nl, struct notifier_block *n); \",\"其含义是将节点 n 从 nl 指向的链表中删除。\"]},\"1573\":{\"h\":\"notifier_call_chain\",\"t\":[\"notifier_call_chain - Informs the registered notifiers about an event.\",\"notifier_call_chain returns the value returned by the last notifier function called.\",\"notifier_call_chain 的作用是：当有事件发生的时候，使用该函数通知链表发送消息。\",\"// notifier.c static int notifier_call_chain(struct notifier_block **nl, unsigned long val, void *v, int nr_to_call, int *nr_calls) { int ret = NOTIFY_DONE; struct notifier_block *nb, *next_nb; nb = rcu_dereference_raw(*nl); while (nb && nr_to_call) { next_nb = rcu_dereference_raw(nb->next); #ifdef CONFIG_DEBUG_NOTIFIERS if (unlikely(!func_ptr_is_kernel_text(nb->notifier_call))) { WARN(1, \\\"Invalid notifier called!\\\"); nb = next_nb; continue; } #endif ret = nb->notifier_call(nb, val, v); if (nr_calls) (*nr_calls)++; if (ret & NOTIFY_STOP_MASK) break; nb = next_nb; nr_to_call--; } return ret; } NOKPROBE_SYMBOL(notifier_call_chain); \",\"函数比较长，但是比较重要，我们首先分析这个函数的参数：\",\"参数\",\"类型\",\"含义\",\"nl\",\"notifier_block **\",\"Pointer to head of the blocking notifier chain这个是指向链表头结点\",\"val\",\"unsigned long\",\"Value passed unmodified to notifier function如何理解这个 passed unmodified? ❓❓❓\",\"v\",\"void*\",\"Pointer passed unmodified to notifier function\",\"nr_to_call\",\"int\",\"Number of notifier functions to be called. Don't care value of this parameter is -1.要调用的通知函数的数量。\",\"nr_calls\",\"int*\",\"Records the number of notifications sent. Don't care value of this field is NULL.\",\"我们这个函数实现大致可以概括如下：\",\"遍历链表 nl, 拿到当前的 notifier_block nb 和下一个 next_nb\",\"对于当前的 nb, 调用 nb->notifier_call 函数指针，我们结合这个函数的指针来看：\",\"// notifier_fn_t notifier_call in notifier_block typedef int (*notifier_fn_t)(struct notifier_block *nb, unsigned long action, void *data); // notifier_call_chain ret = nb->notifier_call(nb, val, v); \",\"这样参数就可以对应起来了，🔴🔴🔴 还需要根据调用继续理解。\",\"当前的通知过后，继续通知下一个。\"]},\"1574\":{\"h\":\"Usage\"},\"1575\":{\"h\":\"Usage: init\",\"t\":[\"在上文研究了 notifier 的基本机制以后，我们现在来研究如何使用。\",\"在前面我们提到，通知链有四种，我们在使用的时候，需要了解到我们的场景中，需要使用哪个调用链。\",\"我们在 notifier.h 文件中搜索通知链的大写名称即可看到不同类通知链的初始化函数，我们拿 ATOMIC_NOTIFIER_HEAD 举例（上文也研究过了）：\",\"#define ATOMIC_NOTIFIER_HEAD(name) \\\\ struct atomic_notifier_head name = \\\\ ATOMIC_NOTIFIER_INIT(name) #define ATOMIC_NOTIFIER_INIT(name) { \\\\ .lock = __SPIN_LOCK_UNLOCKED(name.lock), \\\\ .head = NULL } \",\"以上两者是等价的，我们初始化的方式要对比定义来看比较直观：\",\"struct atomic_notifier_head { spinlock_t lock; struct notifier_block __rcu *head; }; \",\"哈哈哈，十分巧妙！\",\"如果我们有一个现成的 atomic_notifier_head 通知链对象，我们可以调用以下的初始化方法：\",\"#define ATOMIC_INIT_NOTIFIER_HEAD(name) do { \\\\ spin_lock_init(&(name)->lock); \\\\ (name)->head = NULL; \\\\ } while (0) \",\"一般而言，我们要使用通知链的话，是这么玩的：\",\"static struct atomic_notifier_head dock_notifier_list; ATOMIC_INIT_NOTIFIER_HEAD(&dock_notifier_list); \",\"这样，我们就拥有通知链了。\"]},\"1576\":{\"h\":\"Usage: register, unregister and call\",\"t\":[\"init 通知链以后，我们还需要往通知链上面注册、卸载通知块，或者遍历通知块。这里的通知块指的是 notifier_block, 内核提供的通知链的接口我们在上文已经进行了研究，为了方便理解，我们再对其进行一个归类总结，主要可以分为三类，其源码定义如下：\",\"register：\",\"extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh, struct notifier_block *nb); extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh, struct notifier_block *nb); extern int raw_notifier_chain_register(struct raw_notifier_head *nh, struct notifier_block *nb); extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh, struct notifier_block *nb); \",\"unregister:\",\"extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh, struct notifier_block *nb); extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh, struct notifier_block *nb); extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh, struct notifier_block *nb); extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh, struct notifier_block *nb); \",\"call:\",\"extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh, unsigned long val, void *v); extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh, unsigned long val, void *v); extern int raw_notifier_call_chain(struct raw_notifier_head *nh, unsigned long val, void *v); extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh, unsigned long val, void *v); extern int blocking_notifier_call_chain_robust(struct blocking_notifier_head *nh, unsigned long val_up, unsigned long val_down, void *v); extern int raw_notifier_call_chain_robust(struct raw_notifier_head *nh, unsigned long val_up, unsigned long val_down, void *v); \"]},\"1577\":{\"h\":\"Usage: example\",\"t\":[\"上述这四类通知链的基本 API 又构成了内核中其他子系统定义、操作自己通知链的基础。例如 Netlink 定义了一个原子通知链，所以，它对原子通知链的基本API又封装了一层，以形成自己的特色:\",\"static ATOMIC_NOTIFIER_HEAD(netlink_chain); int netlink_register_notifier(struct notifier_block *nb) { return atomic_notifier_chain_register(&netlink_chain, nb); } EXPORT_SYMBOL(netlink_register_notifier); int netlink_unregister_notifier(struct notifier_block *nb) { return atomic_notifier_chain_unregister(&netlink_chain, nb); } EXPORT_SYMBOL(netlink_unregister_notifier); \",\"网络事件也有一个原子通知链 net/core/netevent.c, 只列举接口名称：\",\"int register_netevent_notifier(struct notifier_block *nb); int unregister_netevent_notifier(struct notifier_block *nb); int call_netevent_notifiers(unsigned long val, void *v); \"]},\"1578\":{\"h\":\"How notifier works\",\"t\":[\"通知链的运作机制包括两个角色：\",\"被通知者：对某一事件感兴趣的一方。定义了当事件发生的时候，相应的处理函数，即回调函数，被通知者将其注册到通知链中。\",\"通知者：事件的通知者。检测到某个事件或者产生某个事件的时候，通知所有对该事件产生兴趣的一方，通知者需要定义一个通知链，并在其中保存每一个被通知者对事件的回调函数。\",\"通知这个过程本质上就是遍历通知链中的每一项，然后调用相应的回调函数。\"]},\"1579\":{\"h\":\"Summary\"},\"1580\":{\"h\":\"Something\",\"t\":[\"我们以后在阅读调用链相关的源码的时候，可以参考以下的方法：\",\"注册通知链回调函数的系统和提供通知链的系统之间一定存在某种联系，且本系统需要那个系统对某个重要事件进行响应\",\"看本系统注册的通知链回调函数的实现：它对哪些事情感兴趣，是怎么处理的？\",\"提供通知链对象的系统有哪些事件？\"]},\"1581\":{\"h\":\"Reference\",\"t\":[\"linux内核通知链↩︎\"]},\"1582\":{\"h\":\"RCU(todo)\"},\"1583\":{\"h\":\"RCU\",\"t\":[\"什么是 RCU 状态？\",\"在Linux内核中，RCU（Read-Copy-Update）是一种读取数据不加锁的机制，它通过使用复制而不是传统的互斥量机制来实现对共享数据结构的并发安全。\",\"也就是说 RCU 是一种同步机制，其可以支持一个写操作和多个读操作同时进行。对比而言，读写锁是一种排他锁，写的同时不允许其他读的操作。\",\"❗本文为了研究清楚 idle, 故针对 idle 流程中的 RCU 进行研究。\",\"🔗 名词解释\",\"Grace period: 宽限期\",\"Quiescent state: 静止态\"]},\"1584\":{\"h\":\"QS\",\"t\":[\"在 RCU（Read-Copy-Update）机制中，QS（Quiescent State）是指一个 RCU 线程已经处理完正在使用的共享数据并即将睡眠时所处的状态。\",\"在 QS 中，RCU 线程不再持有任何共享数据，并且等待其他线程完成对共享数据的访问并退出 read-side 临界区。在所有线程退出 read-side 临界区后，RCU 线程才会进入睡眠状态，等待下一次需要访问共享数据时再被唤醒。\",\"RCU 的 QS 机制是用来保证 RCU 的正确性和高效性，因为当某个 RCW 对共享数据进行修改时，RCU 不能立即释放内存，需要等待所有正在使用共享数据的线程都退出 read-side 临界区，即进入了 QS，才能安全地释放该共享数据占用的内存。\",\"❓❓❓ 普通的 QS: CPU 发生进程切换，或是运行在用户态都标志着它进入了 QS[^3]\",\"这段引用较难理解？\",\"Extended QS：CPU 执行 idle 进程、进入中断、运行在用户态的 tickless 模式下标志着它进入 EQS；\",\"RCU 是一个非常有用的内核机制，可以大幅度提升多 CPU 系统中并发读取共享数据的性能。然而，在过去的一些 RCU 实现中，需要定期调用 tick 以帮助检测 CPU 是否空闲并进行相应的操作。这样，系统就不可能真正进入 tickless 模式，因为为了保证 RCU 正确性，tick 仍然需要启动。为了解决这种矛盾，Linux 内核引入了一种新的 RCU 实现方法：RCU-Dynticks。该实现允许 RCU 在不定期使用计时器的情况下执行，从而允许系统真正进入 tickless 模式。具体来说，当所有 RCU 线程都被阻塞时，RCU-Dynticks 可以安全地关闭计时器，以避免后台 tick 等待造成的功耗和延迟。RCU-Dynticks 实现对应了 EQS 状态。\"]},\"1585\":{\"h\":\"rcu_idle_enter\",\"t\":[\"rcu_idle_enter()是Linux内核中的一个函数，它用于将CPU置于RCU空闲状态，以便让RCU子系统在RCU调度器中执行后台工作。在具体实现上，该函数会挂起当前CPU的所有进程并使其休眠，以便其他CPU可以更快地访问共享资源。\",\"具体来说，rcu_idle_enter()的功能可以简单地概括为以下几个方面：\",\"检查当前CPU是否已经成功进入空闲状态（即没有正在运行或等待运行的进程）。\",\"如果当前CPU还有进程在运行，则调用相应的函数停止这些进程的运行，并等待它们进入休眠状态。\",\"如果当前CPU已经成功进入空闲状态，则向RCU调度器发送空闲通知，通知RCU子系统开始执行后台任务。\",\"需要注意的是，当CPU处于RCU空闲状态时，只有RCU子系统中的相关线程可以运行，其他进程无法在该CPU上运行，这可以避免竞态条件和死锁等问题。当后台任务完成后，调度器会自动唤醒CPU并恢复正常的进程调度。\"]},\"1586\":{\"h\":\"note_gp_changes\",\"t\":[\"这个函数名字中的 gp 的含义是 grace period, 表示 RCU 的宽限期或者临界区。gp 的结束时间是在所有的 CPU 都经过一次静止态（QS）的时候。\",\"这个函数位于 kernel/linux-5.10/kernel/rcu/tree.c 这个路径下面，对于 tree.c 这个文件，对于 tree 的含义，找到了一个解释：\",\"还有一种分类可以通过内核源码中 RCU 文件名可以看到，分为 Tiny RCU 和 Tree RCU。Tiny RCU 适用于嵌入式系统单 CPU 的场景，而 Tree RCU 则适用于大型系统。\",\"根据这个线索，我们从源码路径下面果然是看到了 tiny.c 这个文件。\"]},\"1587\":{\"c\":[\"Kernel\"]},\"1588\":{\"h\":\"Thermal Overview\"},\"1589\":{\"h\":\"Abstract\",\"t\":[\"Linux Thermal 是 Linux 系统下温度控制相关的模块，主要用来控制系统运行中芯片产生的热量。配合 ic 内部温度传感器，对 ic 温度进行管控，保证系统稳定性[1]。\",\"其基本的架构可以简单概括为下图：\",\"Thermal 中有一些基础概念，下文会结合定义的代码对其进行分析。\"]},\"1590\":{\"h\":\"Thermal Zone Device\",\"t\":[\"Thermal Zone 代表一个温控区间，将其看成一个虚拟的温度 sensor, 但是需要有物理 sensor 与其关联才可以发挥作用。 需要注意的是，一个 Thermal zone 最多可以关联一个 sensor, 但是一个 sensor 可以是多个硬件 Sensor 的混合。\",\"🤔🤔🤔 为什么一个 Thermal zone 只能关联一个 sensor? 系统中会有多个 Thermal zone 吗？\",\"Thermal Zone Device 在 Thermal 框架中理解为获取温度的设备。\",\"我们列举并分析其结构组成：\",\"// thermal.h struct thermal_zone_device { int id; char type[THERMAL_NAME_LENGTH]; struct device device; struct attribute_group trips_attribute_group; struct thermal_attr *trip_temp_attrs; struct thermal_attr *trip_type_attrs; struct thermal_attr *trip_hyst_attrs; void *devdata; int trips; unsigned long trips_disabled; /* bitmap for disabled trips */ int passive_delay; int polling_delay; int temperature; int last_temperature; int emul_temperature; int passive; int prev_low_trip; int prev_high_trip; unsigned int forced_passive; atomic_t need_update; struct thermal_zone_device_ops *ops; struct thermal_zone_params *tzp; struct thermal_governor *governor; void *governor_data; struct list_head thermal_instances; struct ida ida; struct mutex lock; struct list_head node; struct delayed_work poll_queue; enum thermal_notify_event notify_event; } \",\"为了更方便分析，我们给出一个简单的类图：\"]},\"1591\":{\"h\":\"thermal_zone_params *tzp\",\"t\":[\"在上述结构体的 24 行，结构体细节如下：\",\"/* Structure to define Thermal Zone parameters */ struct thermal_zone_params { char governor_name[THERMAL_NAME_LENGTH]; bool no_hwmon; int num_tbps; struct thermal_bind_params *tbp; u32 sustainable_power; s32 k_po; s32 k_pu; s32 k_i; s32 k_d; s32 integral_cutoff; int slope; int offset; }; \",\"🟡🟡🟡发散：如寻找对应的 governor: governor = __find_governor(tz->tzp->governor_name); 就用到了 tzp->governor_name 这个参数。\",\"我们看一下 tzp 的位置：\",\"我们去掉原生代码中的注释信息，然后用表格的形式一一分析这些参数：\",\"param\",\"type\",\"comments\",\"means\",\"governor_name\",\"char[]\",\"no_hwmon\",\"bool\",\"a boolean to indicate if the thermal to hwmon sysfs interface is required. when no_hwmon == false, a hwmon sysfs interface will be created. when no_hwmon == true, nothing will be done\",\"num_tbps\",\"int\",\"Number of tbp entries\",\"tbp\",\"struct\",\"Structure that holds binding parameters for a zone\",\"struct thermal_bind_params 结构体定义在 thermal.h\",\"sustainable_power\",\"u32\",\"Sustainable power (heat) that this thermal zone can dissipate in mW\",\"该热区可消散的持续功率\",\"k_po\",\"s32\",\"Proportional parameter of the PID controller when\",\"PID 控制器的比例参数\",\"k_pu\",\"s32\",\"Proportional parameter of the PID controller when undershooting\",\"k_i\",\"s32\",\"Integral parameter of the PID controller\",\"k_d\",\"s32\",\"Derivative parameter of the PID controller\",\"integral_cutoff\",\"s32\",\"threshold below which the error is no longer accumulated\",\"低于此阈值的错误将不再累计\",\"slope\",\"int\",\"slope of a linear temperature adjustment curve.\",\"线性温度调节曲线的斜率\",\"offset\",\"int\",\"offset of a linear temperature adjustment curve.\",\"线性温度调节曲线的偏移\",\"s32, u32 in int-l64.h\",\"typedef __signed__ int __s32; typedef unsigned int __u32; \"]},\"1592\":{\"h\":\"thermal_bind_params\",\"t\":[\"thermal_bind_params (thermal.h)结构体如下：\",\"/* Structure that holds binding parameters for a zone */ struct thermal_bind_params { struct thermal_cooling_device *cdev; int weight; int trip_mask; unsigned long *binding_limits; int (*match) (struct thermal_zone_device *tz, struct thermal_cooling_device *cdev); }; \",\"在深入分析之前，我们需要了解到，thermal_bind_params 隶属结构如下：\",\"param\",\"type\",\"comments\",\"means\",\"weight\",\"int\",\"This is a measure of 'how effectively these devices can cool 'this' thermal zone. It shall be determined by platform characterization. This value is relative to the rest of the weights so a cooling device whose weight is double that of another cooling device is twice as effective. See Documentation/driver-api/thermal/sysfs-api.rst for more information.\",\"trip_mask\",\"int\",\"This is a bit mask that gives the binding relation between this thermal zone and cdev, for a particular trip point.\",\"binding_limits\",\"unsigned long\",\"This is an array of cooling state limits. Must have exactly 2 * thermal_zone.number_of_trip_points. It is an array consisting of tuples <lower-state upper-state> of state limits. Each trip will be associated with one state limit tuple when binding. A NULL pointer means <THERMAL_NO_LIMITS THERMAL_NO_LIMITS> on all trips.\",\"match\",\"int (*match) (struct thermal_zone_device *tz, struct thermal_cooling_device *cdev);\"]},\"1593\":{\"h\":\"thermal_zone_device_ops *ops\",\"t\":[\"指的是 thermal 可以操作的类型：\",\"其隶属的结构如下：\",\"其结构体定义如下：\",\"struct thermal_zone_device_ops { int (*bind) (struct thermal_zone_device *, struct thermal_cooling_device *); int (*unbind) (struct thermal_zone_device *, struct thermal_cooling_device *); int (*get_temp) (struct thermal_zone_device *, int *); int (*set_trips) (struct thermal_zone_device *, int, int); int (*get_mode) (struct thermal_zone_device *, enum thermal_device_mode *); int (*set_mode) (struct thermal_zone_device *, enum thermal_device_mode); int (*get_trip_type) (struct thermal_zone_device *, int, enum thermal_trip_type *); int (*get_trip_temp) (struct thermal_zone_device *, int, int *); int (*set_trip_temp) (struct thermal_zone_device *, int, int); int (*get_trip_hyst) (struct thermal_zone_device *, int, int *); int (*set_trip_hyst) (struct thermal_zone_device *, int, int); int (*get_crit_temp) (struct thermal_zone_device *, int *); int (*set_emul_temp) (struct thermal_zone_device *, int); int (*get_trend) (struct thermal_zone_device *, int, enum thermal_trend *); int (*notify) (struct thermal_zone_device *, int, enum thermal_trip_type); }; \"]},\"1594\":{\"h\":\"int (*get_temp)\",\"t\":[\"获取温度 int (*get_temp) (struct thermal_zone_device *, int *);\",\"if (d->override_ops && d->override_ops->get_temp) return d->override_ops->get_temp(zone, temp); \"]},\"1595\":{\"h\":\"int (*get_trip_temp)\",\"t\":[\"在 thermal_sysfs.c 中调用：\",\"static ssize_t trip_point_temp_show(struct device *dev, struct device_attribute *attr, char *buf) { struct thermal_zone_device *tz = to_thermal_zone(dev); int trip, ret; int temperature; if (!tz->ops->get_trip_temp) return -EPERM; if (sscanf(attr->attr.name, \\\"trip_point_%d_temp\\\", &trip) != 1) return -EINVAL; ret = tz->ops->get_trip_temp(tz, trip, &temperature); if (ret) return ret; return sprintf(buf, \\\"%d\\\\n\\\", temperature); } \"]},\"1596\":{\"h\":\"int (*set_trip_temp)\",\"t\":[\"static ssize_t trip_point_temp_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) { struct thermal_zone_device *tz = to_thermal_zone(dev); int trip, ret; int temperature, hyst = 0; enum thermal_trip_type type; if (!tz->ops->set_trip_temp) return -EPERM; if (sscanf(attr->attr.name, \\\"trip_point_%d_temp\\\", &trip) != 1) return -EINVAL; if (kstrtoint(buf, 10, &temperature)) return -EINVAL; ret = tz->ops->set_trip_temp(tz, trip, temperature); if (ret) return ret; if (tz->ops->get_trip_hyst) { ret = tz->ops->get_trip_hyst(tz, trip, &hyst); if (ret) return ret; } ret = tz->ops->get_trip_type(tz, trip, &type); if (ret) return ret; thermal_notify_tz_trip_change(tz->id, trip, type, temperature, hyst); thermal_zone_device_update(tz, THERMAL_EVENT_UNSPECIFIED); return count; } \",\"这个调用中有几个知识点可以注意的：\",\"关于 sscanf(): sscanf(attr->attr.name, \\\"trip_point_%d_temp\\\", &trip) != 1, 这个调用的意思是说，attr->attr.name 类似于 trip_point_123_temp, 然后我们可以把这个 123 拿出来写进 trip 中去，并返回写入变量的个数。在这个例子中我们只写入了 trip, 所以写入成功的话就返回 1.\",\"kstrtoint(buf, 10, &temperature) 是将字符串转化为 int 整数，我们将 buf 中的值以 10 进制的形式传递给了 temperature.\",\"返回的错误码：#define EINVAL 22;#define EPERM 1;\"]},\"1597\":{\"h\":\"Trip point\",\"t\":[\"The binding of the cooling devices to the trip point is left for the user.\",\"触发点由 Thermal Zone 维护，每个 Thermal Zone 可以维护多个 Trip Point, 其包含的信息有：\",\"temp: 当前温度\",\"type: 类型，有以下方式：passive、active、hot、critical\",\"cooling device: 绑定信息。\",\"这个绑定信息指的是 Trip Point 和 cooling device 的绑定关系，即当 Trip Point 触发后由哪个 cooling device 去实施冷却措施。每个 Trip Point 要与 cooling device 绑定，才有其实际意义。\",\"cooling device 是实际对系统实施冷却措施的驱动，是温控的执行者。cooling device 维护一个 cooling 等级 state, state 越高则表示系统的冷却需求越高（注意到 cooling device 只根据 state 进行冷却操作）。\",\"🤔🤔🤔 state 这个取值是由谁决定的？state 的计算由 Thermal Governor 完成。\"]},\"1598\":{\"h\":\"Source Code\",\"t\":[\"dts 的配置：\",\"thermal-zones { cpu_thermal_zone { polling-delay-passive = <1000>; //超过阀值轮询时间 polling-delay = <2000>; //未超阀值轮询时间 thermal-sensors = <&ths_combine0 0>; trips { cpu_trip0:t0 { temperature = <70>; type = \\\"passive\\\"; hysteresis = <0>; }; \",\"上述代码为拷贝过来的，具体的理解，目前如下：\",\"轮询时间有 2 个，如果超过了温度阈值，则缩短轮询的时间。\",\"@todo\"]},\"1599\":{\"h\":\"Thermal Governal\",\"t\":[\"Thermal Governal 是降温策略的一个抽象，与 cpufreq 的 governal 概念类似。\",\"内核实现的策略定义如下：\",\"(仅仅举例用，不是最新的代码实现，废弃)\",\"struct thermal_governor { char name[THERMAL_NAME_LENGTH]; /* 策略函数 */ int (*throttle)(struct thermal_zone_device *tz, int trip); struct list_head governor_list; }; \"]},\"1600\":{\"h\":\"Thermal Cooling Device\",\"t\":[\"Thermal Cooling Device 是可以降温设备的抽象，如风扇。除此之外，还会包括CPU、GPU 这些，如何理解呢？\",\"散热的方式有两种，一种是加快散热，一种是降低产热量，CPU、GPU 就是后者的体现。\",\"struct thermal_cooling_device { int id; char type[THERMAL_NAME_LENGTH]; struct device device; struct device_node *np; void *devdata; /* cooling device 操作函数 */ const struct thermal_cooling_device_ops *ops; bool updated; /* true if the cooling device does not need update */ struct mutex lock; /* protect thermal_instances list */ struct list_head thermal_instances; struct list_head node; }; struct thermal_cooling_device_ops { int (*get_max_state) (struct thermal_cooling_device *, unsigned long *); int (*get_cur_state) (struct thermal_cooling_device *, unsigned long *); /* 设定等级 */ int (*set_cur_state) (struct thermal_cooling_device *, unsigned long); }; \"]},\"1601\":{\"h\":\"Thermal Core\",\"t\":[\"Thermal Core 作为中枢注册 Governor, 注册 Thermal 类，并且基于 Device Tree 注册 Thermal Zone;\",\"除此之外，提供 Thermal Zone 注册函数、Cooling Device 注册函数、提供将 Cooling 设备绑定到 Zone 的函数，一个 Thermal Zone 可以有多个 Cooling 设备；\",\"提供了核心函数 thermal_zone_device_update 作为 Thermal 中断处理函数和轮询函数，轮询的时候会根据不同 Trip Delay 调节。\"]},\"1602\":{\"h\":\"struct thermal_governor\",\"t\":[\"对于 thermal_governor 结构体组成如下：\",\"/** * struct thermal_governor - structure that holds thermal governor information * @name: name of the governor * @bind_to_tz: callback called when binding to a thermal zone. If it * returns 0, the governor is bound to the thermal zone, * otherwise it fails. * @unbind_from_tz: callback called when a governor is unbound from a * thermal zone. * @throttle: callback called for every trip point even if temperature is * below the trip point temperature * @governor_list: node in thermal_governor_list (in thermal_core.c) */ struct thermal_governor { char name[THERMAL_NAME_LENGTH]; int (*bind_to_tz)(struct thermal_zone_device *tz); void (*unbind_from_tz)(struct thermal_zone_device *tz); int (*throttle)(struct thermal_zone_device *tz, int trip); struct list_head governor_list; }; \",\"name: thermal governor 名称\",\"bind_to_tz: 回调函数，callback called when binding to a thermal zone. 如果返回 0, 则 governor 绑定到 thermal zone 成功，否则失败\",\"unbind_from_tz: 解绑回调函数\",\"throttle: callback called for every trip point even if temperature is below the trip point temperature. 意思就是说，每个触发点的回调，即使是温度低于触发点温度，也会回调这个函数; 在有些解释中，throttle 被认为是策略函数，其参数传入 int (*thermal_governor::throttle)\",\"governor_list: governor 列表\",\"list_head 结构体定义如下：\",\"struct list_head { struct list_head *next, *prev; }; \"]},\"1603\":{\"h\":\"Reference\",\"t\":[\"Linux电源管理（五）thermal↩︎\"]},\"1604\":{\"h\":\"Thermal Init\"},\"1605\":{\"h\":\"Abstract\",\"t\":[\"__init thermal_init 是 thermal 的初始化函数，thermal 驱动模块的入口（thermel_core.c）。\",\"thermal_netlink_init();\",\"netlink 机制，猜测是用于内核空间和用户空间通信。\",\"thermal_register_governors()\",\"这个步骤是向 thermal core 注册 governors.\",\"class_register(&thermal_class)\",\"注册 thermal_class\",\"of_parse_thermal_zones()\",\"解析 dts 里面的 thermal_zones，这个是重中之重。\",\"register_pm_notifier(&thermal_pm_nb)\",\"notifier 机制，表明 Thermal core 对 pm 时间感兴趣。\",\"我们为了方便理解，用一个流程图来形象化这个步骤：\",\"关于 postcore_initcall:\",\"注意最后调用：postcore_initcall(thermal_init);, 在之前的代码中使用的是 fs_initcall(), 但是最新的代码更改成了前者。\",\"fs_initcall() 用的原因是因为：thermal 模块加载进内核用的 fs_initcall()，tsadc 驱动一般用的是 module_init()，前者会早于后者加载，这点比较重要，有些代码流程上会依赖这种先后关系，需要留意[1]。 这边使用 postcore_initcall(thermal_init);, 也是为了解决调用顺序的问题。\",\"要理解这个我们需要了解内核初始化过程中的调用顺序[2], 可以参考 <init.h> 那篇文章的分析。\"]},\"1606\":{\"h\":\"thermal_register_governors\",\"t\":[\"这个代码比较重要，所以在这边列举出来：\",\"// 5.17.4 static int __init thermal_register_governors(void) { int ret = 0; struct thermal_governor **governor; for_each_governor_table(governor) { ret = thermal_register_governor(*governor); if (ret) { pr_err(\\\"Failed to register governor: '%s'\\\", (*governor)->name); break; } pr_info(\\\"Registered thermal governor '%s'\\\", (*governor)->name); } if (ret) { struct thermal_governor **gov; for_each_governor_table(gov) { if (gov == governor) break; thermal_unregister_governor(*gov); } } return ret; } \",\"这个是 Linux 5.17.4 的代码实现，做了一些封装，封装过后调用了 thermal_register_governor.\",\"其调用的流程图如下：\"]},\"1607\":{\"h\":\"thermal_register_governor\",\"t\":[\"函数定义如下：int thermal_register_governor(struct thermal_governor *governor).\",\"注册 governor 实现了几件事：\",\"根据传入的 governor 去查找，调用 __find_governor, 传入的 governor 名称是否有对应的存在，存在于什么地方呢？thermal_governor_list, 这个 list 是一个静态的 static LIST_HEAD(thermal_governor_list); 不存在的 governor 会被添加进去\",\"找到的话，把 governor -> governor_list 放到 thermal_governor_list 中去\",\"对于 thermal_unregister_governor 道理相似，不再赘述。\",\"我们再分析一下源码：\",\"int thermal_register_governor(struct thermal_governor *governor) { int err; const char *name; struct thermal_zone_device *pos; if (!governor) return -EINVAL; mutex_lock(&thermal_governor_lock); err = -EBUSY; if (!__find_governor(governor->name)) { // __find_governor == NULL bool match_default; err = 0; list_add(&governor->governor_list, &thermal_governor_list); match_default = !strncmp(governor->name, DEFAULT_THERMAL_GOVERNOR, THERMAL_NAME_LENGTH); // match_default is true when governor->name == DEFAULT_xxx if (!def_governor && match_default) def_governor = governor; } mutex_lock(&thermal_list_lock); list_for_each_entry(pos, &thermal_tz_list, node) { /* * only thermal zones with specified tz->tzp->governor_name * may run with tz->govenor unset */ if (pos->governor) continue; name = pos->tzp->governor_name; if (!strncasecmp(name, governor->name, THERMAL_NAME_LENGTH)) { int ret; ret = thermal_set_governor(pos, governor); if (ret) dev_err(&pos->device, \\\"Failed to set governor %s for thermal zone %s: %d\\\\n\\\", governor->name, pos->type, ret); } } mutex_unlock(&thermal_list_lock); mutex_unlock(&thermal_governor_lock); return err; } \",\"第 7 行进行了安全性检查，确保传进来的 govenor 不是空指针；\",\"第 10 行使用了互斥锁 mutex_lock, 这个互斥锁用于对临界区上锁。之所以可以对 thermal_governor_lock 上锁，是因为这是一个静态初始化的全局变量。\",\"static DEFINE_MUTEX(thermal_governor_lock); \",\"后续会对全局变量 thermal_governor_list 进行操作，所以在此加锁。\",\"第 17 行，如果没找到，就把当前的 thermal_governor 加入全局链表 thermal_governor_list\",\"第 18 行，找到 match 的 governor, 然后和默认值进行对比，默认的 governor 定义如下：\",\"/* Default Thermal Governor */ // in thermal_cor.h #if defined(CONFIG_THERMAL_DEFAULT_GOV_STEP_WISE) #define DEFAULT_THERMAL_GOVERNOR \\\"step_wise\\\" #elif defined(CONFIG_THERMAL_DEFAULT_GOV_FAIR_SHARE) #define DEFAULT_THERMAL_GOVERNOR \\\"fair_share\\\" #elif defined(CONFIG_THERMAL_DEFAULT_GOV_USER_SPACE) #define DEFAULT_THERMAL_GOVERNOR \\\"user_space\\\" #elif defined(CONFIG_THERMAL_DEFAULT_GOV_POWER_ALLOCATOR) #define DEFAULT_THERMAL_GOVERNOR \\\"power_allocator\\\" #endif \",\"第 22 行，如果默认的全局变量 def_governor 为空且要注册的 governor 的名称和默认的 DEFAULT_THERMAL_GOVERNO 一致，则赋值给 def_governor\",\"第 41 行，调用 thermal_set_governor(), 下文继续分析\"]},\"1608\":{\"h\":\"__find_governor\",\"t\":[\"static struct thermal_governor *__find_governor(const char *name) { struct thermal_governor *pos; if (!name || !name[0]) return def_governor; list_for_each_entry(pos, &thermal_governor_list, governor_list) if (!strncasecmp(name, pos->name, THERMAL_NAME_LENGTH)) return pos; return NULL; } \",\"预设 static struct thermal_governor *def_governor; 没有传入 name 的时候返回预设的 governor.\",\"传入 name 的话，进行名称循环校验，和 LIST_HEAD 中的进行对比。\",\"调用地方：\",\"int thermal_register_governor(struct thermal_governor *governor)\",\"void thermal_unregister_governor(struct thermal_governor *governor)\",\"int thermal_zone_device_set_policy(struct thermal_zone_device *tz, char *policy)\",\"policy 作为 governor 的名称传入，进行了 strim(policy) 操作。\",\"thermal_zone_device_register\",\"总结一下，__find_governor 主要的作用是根据 policy 去拿到对应的 governor, 如果 policy 是不存在的，则从预先设置的里面返回。\",\"❌❌❌ 了解预先设置的返回什么？\"]},\"1609\":{\"h\":\"thermal_set_governor\",\"t\":[\"thermal_set_governor() - Switch to another governor\",\"/** * thermal_set_governor() - Switch to another governor * @tz: a valid pointer to a struct thermal_zone_device * @new_gov: pointer to the new governor * * Change the governor of thermal zone @tz. * * Return: 0 on success, an error if the new governor's bind_to_tz() failed. */ static int thermal_set_governor(struct thermal_zone_device *tz, struct thermal_governor *new_gov) { // code } \",\"先解绑 tz 之前的 governor, 再绑定 new_gov 到其中，绑定解绑分别对应的写法为：\",\"// unbind tz->governor->unbind_from_tz(tz); // bind ret = new_gov->bind_to_tz(tz); \",\"到目前位置，thermal_register_governors 的步骤已经完成了。\"]},\"1610\":{\"h\":\"thermal_zone_device_set_policy\",\"t\":[\"int thermal_zone_device_set_policy(struct thermal_zone_device *tz, char *policy){ // ... } \",\"*tz: thermal zone device\",\"policy: 根据这个去找到 thermal_governor, 如下所示：\",\"struct thermal_governor *gov; gov = __find_governor(strim(policy)); \",\"policy 作为 governor 的名称去寻找对应的 governor.\",\"如果成功找到的话，调用 thermal_set_governor.\"]},\"1611\":{\"h\":\"thermal_zone_device_register\",\"t\":[\"/** * thermal_zone_device_register() - register a new thermal zone device * @type: the thermal zone device type * @trips: the number of trip points the thermal zone support * @mask: a bit string indicating the writeablility of trip points * @devdata: private device data * @ops: standard thermal zone device callbacks * @tzp: thermal zone platform parameters * @passive_delay: number of milliseconds to wait between polls when * performing passive cooling * @polling_delay: number of milliseconds to wait between polls when checking * whether trip points have been crossed (0 for interrupt * driven systems) * * This interface function adds a new thermal zone device (sensor) to * /sys/class/thermal folder as thermal_zone[0-*]. It tries to bind all the * thermal cooling devices registered at the same time. * thermal_zone_device_unregister() must be called when the device is no * longer needed. The passive cooling depends on the .get_trend() return value. * * Return: a pointer to the created struct thermal_zone_device or an * in case of error, an ERR_PTR. Caller must check return value with * IS_ERR*() helpers. */ struct thermal_zone_device * thermal_zone_device_register(const char *type, int trips, int mask, void *devdata, struct thermal_zone_device_ops *ops, struct thermal_zone_params *tzp, int passive_delay, int polling_delay) { // code } \",\"@type: 如 soc_thermal\",\"如注释所示，这个接口实现了增加一个新的 thermal zone device(sensor), 位置在 /sys/class/thermal , 其中每个文件夹的名称都类似于 thermal_zone[0-*], 如 thermal_zone0 这样。\"]},\"1612\":{\"h\":\"class_register\",\"t\":[\"@todo\"]},\"1613\":{\"h\":\"of_parse_thermal_zones\",\"t\":[\"thermal_of.c\",\"of_parse_thermal_zones - parse device tree thermal data Initialization function that can be called by machine initialization code to parse thermal data and populate the thermal framework with hardware thermal zones info. This function only parses thermal zones.\",\"Cooling devices and sensor devices nodes are supposed to be parsed by their respective drivers.\",\"Return: 0 on success, proper error code otherwise\"]},\"1614\":{\"h\":\"register_pm_notifier\"},\"1615\":{\"h\":\"Reference\",\"t\":[\"内核初始化过程中的调用顺序↩︎\",\"https://blog.csdn.net/beatbean/article/details/8448623↩︎\"]},\"1616\":{\"h\":\"XV6(6.828)\",\"t\":[\"xv6: a simple, Unix-like teaching operating system.\"]},\"1617\":{\"h\":\"Foreword and acknowledgements\"},\"1618\":{\"h\":\"RISC-V(risk-five)\",\"t\":[\"An open standard instruction set architecture (ISA)\",\"Open source\",\"A RISC architecture, a load–store architecture;\"]},\"1619\":{\"h\":\"XV6\",\"t\":[\"XV6 is a Linux example kernel, re-implementation.\",\"Understanding xv6 is a good start toward understanding any of these systems and many others.\"]},\"1620\":{\"h\":\"Register\",\"t\":[\"In computer engineering, a load–store architecture is an instruction set architecture that divides instructions into two categories: memory access (load and store between memory and registers[1]) and ALU operations (which only occur between registers).\",\"关于寄存器：寄存器可以分为 Processor register 和 Register, 前者是在 CPU 核内，后者是在 CPU 核外，核外寄存器通过地址访问。\",\"一个处理器通常包含多种类型的寄存器，寄存器可以分为以下几种：\",\"Name\",\"Abbr\",\"Means\",\"Remark\",\"Program Counter\",\"PC\",\"A program counter keeps track of the next instruction to be executed.\",\"主要记录下一条要执行的指令\",\"Instruction Register\",\"IR\",\"Instruction Register is a register which holds the instruction to be decoded by the control unit.\",\"记录控制单元解码的指定\",\"Memory Address Register\",\"MAR\",\"Memory Address Register is a register which points to the memory location which the CPU plans to access, either for reading or writing.\",\"指向 CPU 要访问的存储位置\",\"Memory Buffer Register\",\"MBR\",\"which is also referred to as the memory data register (MDR) is used for storage data either for coming to the CPU or data being transferred by the CPU.\",\"存储进入 CPU 的数据或者是被 CPU 传输的数据\",\"Accumulator\",\"ACC\",\"a general purpose used for strong variables, temporary results and results produced by arithmetic logic until of the CPU.\",\"累加器\",\"寄存器的 size：一般寄存器由的数量由其可以承载的 bits 数量来衡量，如 32-bit 寄存器、64-bit 寄存器等。\",\"GPU 上的寄存器远远多于 CPU 上寄存器的数量。\"]},\"1621\":{\"h\":\"Operation System Interfaces\",\"t\":[\"操作系统的作用主要可以归类为以下几点：\",\"在多个程序之间共享一台计算机；\",\"管理底层硬件；在多个程序之间共享硬件，使得我们感知程序是在同一时间运行；\",\"提供程序之间的交互、共享数据或者协同工作。\",\"而接口的作用就是操作系统为用户提供服务的方式。\"]},\"1622\":{\"h\":\"References\",\"t\":[\"Processor register, 寄存器；Processor register 为处理器寄存器。 ↩︎\"]},\"1623\":{\"h\":\"\",\"t\":[\"On the Advantages and Disadvantages of Marketing Strategy from the Perspective of Enterprise Development\",\"With the rapid development of Internet economy, the marketing amount of enterprises has changed greatly. Over the past decade or so, we have witnessed many micro-enterprises achieve business success through excellent marketing strategies, and many enterprises have been abandoned by the times because of improper marketing. This paper selects several typical enterprises and their landmark marketing strategies to explain how marketing strategies become the key to enterprise success.\",\"Pinduoduo: Rise in the Micro End\",\"Not long ago, Pinduoduo's market value has surpassed Alibaba and become one of the leaders of e-commerce in China. I believe that in the near future, Pinduoduo can also strive for their own market overseas and compete for hegemony with international e-commerce giants.\",\"Pinduoduo was founded in 2015. At the beginning of its establishment, it focused on the sinking market of e-commerce. Through the marketing strategy of CM2 group purchase, it seized the market at the speed of viral spread. Simply put, the marketing strategy of Pinduo is to encourage users to initiate a group with relatives, friends, neighbors, etc., to obtain lower-cost purchase concessions, this is one of its marketing strategies; In addition, Pinduoduo also through the \\\"cut a knife\\\" of red envelope cashback, through the continuous sharing of social platforms, to spread their applications to potential customers around users. Through these two strategies, by 2020, Pinduo has gone from a small unappreciated company to an e-commerce giant with 788 million active buyers.\",\"Let's evaluate the business model of Pinduoduo. Simply put, the business model of Pinduoduo makes full use of the human weakness of human love to take advantage, through similar fraud \\\"cut a knife\\\", \\\"10 billion subsidy\\\" and other marketing strategies, successfully maintained huge user stickiness, and in a short time exponential expansion of market share. From a moral point of view, I don't agree with the practice, but from a business point of view, it's a successful marketing example.\",\"Hua Xizi: Success in Marketing, Perish in Marketing\",\"Huaxizi is a Chinese beauty company born in 2017 and headed downhill in 2023 and facing bankruptcy. The reason why this article cites Huaxizi's example, because this enterprise is too special: it succeeds in the development of Internet marketing, fails in the disadvantages of Internet marketing, with this example to explain the advantages and disadvantages of Internet marketing is simply appropriate.\",\"Huaxizi brand is a deep binding brand with Taobao anchor, through the platform above the head anchor signed a contract, let the anchor endorse, use the head anchor's huge traffic, to achieve exposure and cash. Huaxizi is a low-end makeup brand, but the price of its cosmetics is more expensive than many international first-line brands. Even so, many consumers are willing to pay the bill. The main reason is that Huaxizi colludes with head anchor Li Jiaqi. By controlling the price of all online shopping platforms, the price of their head anchors is the lowest, to mislead consumers, consumers think that they have got a huge discount, so they rush to buy. This marketing down, let consumers think that they have got benefits, businesses and head anchors also gained a lot of profits, from a certain angle, is the best of both worlds.\",\"However, as this marketing strategy was exposed by industry insiders, consumers realized that they were lambs to be slaughtered, so began to resist, Huaxizi also went downhill, but not to the company's bankruptcy.\",\"Unfortunately, years of successful experience in Internet marketing made Hana Xizi think he could do anything. So after the accident, they still used Internet platforms (such as TikTok, Weibo, and Little Red Book) to place a large number of soft advertisements and brainwashing articles. But not mentioning their marketing deception, making consumers more disgusted, and thus further disgusted with the brand.\",\"Comprehensively speaking, Huaxizi belongs to a no core technology, relying on the development of the Internet, focusing on marketing and successful enterprises, but also because of their own marketing and bury everything; Therefore, the purpose of the enterprise is to make money, marketing is the purpose of making money, but not the foundation of the enterprise.\",\"DongfengSokon: The Perfect Combination of Technology and Marketing\",\"DongfengSokon is a small and micro auto company with a history of more than 20 years. It has been committed to making affordable family cars for Chinese people. Its cars are reliable and cheap and have been loved by consumers.\",\"But all along, DongfengSokon auto companies are in a loss-making state all the year round, although sales are not bad, but bicycle prices are too cheap, resulting in low profits; And the company also values marketing, but has not found a good marketing strategy, resulting in its marketing spending a lot but little results.\",\"However, in recent years, DongfengSokon's deep cooperation with Huawei has achieved large-scale profit growth. Huawei is a company with a high marketing level. Through its cooperation with Huawei, DongfengSokon Company has aroused great discussion on the Internet and social news. Its brand awareness has even surpassed that of foreign brands such as Mercedes-Benz and BMW. As a result, its sales volume has increased greatly. Up to now, DongfengSokon has become one of the new energy giants in China.\",\"In this section, we will not elaborate on the specific marketing strategies used by Huawei to achieve success after the cooperation between DongfengSokon and Huawei. It is not just the methodology. In terms of direction, small and micro enterprises choose to cooperate with enterprises with strong marketing capabilities, which is a better marketing idea. This model is not only a win-win strategy, but also an example for all small and micro enterprises to study carefully.\"]},\"1624\":{\"h\":\"如何让业务代码有扩展性\"},\"1625\":{\"h\":\"Demo 实现\"},\"1626\":{\"h\":\"1. 定义 handler\",\"t\":[\"package cc.weigao.test01.handler; import org.aopalliance.intercept.Invocation; import org.springframework.core.Ordered; public interface AbstractHandler extends Ordered { default boolean preHandler(Invocation invocation) { return true; } default void afterHandler(Invocation invocation) { } } \",\"该步骤相当于创建了处理器接口。\",\"注意这个 Ordered 是 spring 中的。\",\"@todo 分析 Ordered\"]},\"1627\":{\"h\":\"2. 创建处理器 chain\",\"t\":[\"package cc.weigao.test01.chain; public class MethodInterceptorChain { private final List<AbstractHandler> abstractHandlerList = new ArrayList<>(); public void addHandler(AbstractHandler handler) { abstractHandlerList.add(handler); } public List<AbstractHandler> getAbstractHandlerList() { if (abstractHandlerList.isEmpty()) { return Collections.emptyList(); } AnnotationAwareOrderComparator.sort(abstractHandlerList); return Collections.unmodifiableList(abstractHandlerList); } } \"]},\"1628\":{\"h\":\"AnnotationAwareOrderComparator\",\"t\":[\"@TODO\"]},\"1629\":{\"h\":\"3. 定义 Invocation 类\",\"t\":[\"package cc.weigao.test01.model; @Data @AllArgsConstructor @NoArgsConstructor @Builder public class Invocation { private Method method; private Object target; private Object[] args; public Object invoke() throws InvocationTargetException, IllegalAccessException { return method.invoke(target, args); } } \"]},\"1630\":{\"h\":\"4. 业务逻辑和责任链整合\"},\"1631\":{\"h\":\"杂谈\",\"t\":[\"提示\",\"这个地方放置临时性的、不知道在哪个分类下放置的博客文章或者感悟\"]},\"1632\":{\"h\":\"B 面试\",\"t\":[\"云手机创建过程中涉及到的调度、父子任务、回滚\",\"云手机上下电硬重启的原因，为什么是组合接口？\",\"云手机磁盘包周期的计费模型怎么实现？\",\"自动化测试都做了什么？解决了哪些问题？\",\"nova 了解的多吗？\",\"云手机内部的发放是什么方案？kvm 对比容器的优劣？\",\"做题：二叉树的左视图\"]},\"1633\":{\"h\":\"bpytop\",\"t\":[\"https://github.com/aristocratos/bpytop\",\"很好看的资源监控终端\",\"pip3 install bpytop --upgrade \",\"安装之前确保安装了 psutil 模块。\",\"也可以参考 tiptop, 但是目前还不支持 WSL: https://github.com/nschloe/tiptop\"]},\"1634\":{\"h\":\"gem source\",\"t\":[\"gem source:\",\"$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/\\n$ gem sources -l\\n*** CURRENT SOURCES ***\\n\\nhttps://gems.ruby-china.org\\n# 请确保只有 gems.ruby-china.org\\n\"]},\"1635\":{\"h\":\"on-my-zsh\",\"t\":[\"sudo apt install zsh sh -c \\\"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\\\" \",\"要是 curl 失败的话可以手动下载下来 install.sh 然后执行，其主题的配置文件在 ~/.zshrc 下面。\",\"github 链接是 https://github.com/ohmyzsh/ohmyzsh\"]},\"1636\":{\"h\":\"Other Tools\",\"t\":[\"Office Viewer\",\"Markmap(vscode 插件)\"]},\"1637\":{\"h\":\"tools\",\"t\":[\"@todo\"]},\"1638\":{\"h\":\"VSCode Themes\",\"t\":[\"Name\",\"Rate\",\"Ayu\",\"⭐⭐⭐⭐⭐\",\"Cobalt2\",\"⭐⭐⭐⭐⭐\",\"Dainty\",\"流行主题的合集\"]},\"1639\":{\"h\":\"Some Tools\"},\"1640\":{\"h\":\"Tools\",\"t\":[\"on-my-zsh\",\"bytop\"]},\"1641\":{\"h\":\"Source\",\"t\":[\"apt\",\"pip\",\"gem\"]},\"1642\":{\"h\":\"Linux\",\"t\":[\"Vim\",\"Git\"]},\"1643\":{\"h\":\"Windows\"},\"1644\":{\"h\":\"VPS and Shadowsocks\"},\"1645\":{\"h\":\"1. 配置shadowsocks客户端\",\"t\":[\"GitHub of shadowsocks\",\"yum -y install epel-release yum -y install python-pip pip install shadowsocks #查看系统 cat /etc/redhat-release #查看内核 cat /proc/version uname -r vi /etc/shadowsocks.json { \\\"server\\\":\\\"0.0.0.0\\\", \\\"server_port\\\":8388, \\\"local_port\\\":1080, \\\"password\\\":\\\"chen852gao\\\", \\\"timeout\\\":600, \\\"method\\\":\\\"aes-256-cfb\\\" } #启动ss服务 ssserver -c /etc/shadowsocks.json -d start \"]},\"1646\":{\"h\":\"2. 配置91云一键加速工具\",\"t\":[\"在91云 上面下载加速工具\",\"chrome上的插件Proxy SwitchyOmega使用方法为：\",\"从GitHub下载该插件，进入到google chrome的插件中心\",\"配置Proxy\",\"protocol : SOCKS5\",\"server: 127.0.0.1\",\"Port: 1080\",\"配置Auto Switch\",\"Rule List rule 的Profile 填 proxy\",\"Default 的Profile 填[Direct]\",\"Rule List Format选择Autoproxy\",\"Rule List URL填写：\",\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt \",\"保存apply changes即可\"]},\"1647\":{\"h\":\"3. kcptun 加速工具\",\"t\":[\"安装并配置服务端\",\"kcptun GitHub\",\"#查找shadowsocks端口，将8388替换为ss端口 netstat -nl | grep 8388 ss -nl | grep 8388 \",\"参考教程\",\"#使用脚本一键安装 wget --no-check-certificate https://github.com/kuoruan/shell-scripts/raw/master/kcptun/kcptun.sh chmod +x ./kcptun.sh ./kcptun.sh \",\"进入配置界面，按照步骤进行，需要注意到 需要加速的端口 为shadowsocks的端口，本例中为8388\",\"安装客户端\",\"首先下载一个启动Kcptun的工具，注意到这只是用来启动 Kcptun 的工具，而不是 Kcptun 客户端。启动工具下载地址\",\"注意要下载服务端对应的Keptun，客户端下载地址\",\"配置客户端\",\"本地侦听端口：任意\",\"KCP服务器地址：VPS的IP\",\"端口：默认的29900\",\"其他都和服务端的配置一致\",\"配置shadowsocks客户端\",\"服务器地址：127.0.0.1\",\"服务器端口：本地侦听端口\",\"密码和加密方式：VPS的密码和加密方式\",\"配置完以上步骤以后，启动ss客户端和KCPTun客户端配置管理工具，日志区产生记录，即成功\",\"#查看服务器日志\\n./kcptun.sh\\n\"]},\"1648\":{\"h\":\"yarn\",\"t\":[\"配置不需要代理和禁用 lockfile:\",\"yarn config delete https-proxy\\nyarn config delete proxy\\nyarn install --no-lockfile\\n\"]},\"1649\":{\"h\":\"Cloud Server\"},\"1650\":{\"h\":\"Blogs\"},\"1651\":{\"h\":\"Database\"},\"1652\":{\"h\":\"Frameworks\"},\"1653\":{\"h\":\"Frontend\"},\"1654\":{\"h\":\"Networks\"},\"1655\":{\"h\":\"Others\"},\"1656\":{\"h\":\"Projects\"},\"1657\":{\"h\":\"Research\"},\"1658\":{\"h\":\"Tools\"},\"1659\":{\"h\":\"Android\"},\"1660\":{\"h\":\"Art\"},\"1661\":{\"h\":\"Others\"}},\"dirtCount\":0,\"index\":[[\"业务逻辑和责任链整合\",{\"0\":{\"1630\":1}}],[\"业务连续性\",{\"1\":{\"646\":1}}],[\"累加器\",{\"1\":{\"1620\":1}}],[\"核外寄存器通过地址访问\",{\"1\":{\"1620\":1}}],[\"核外\",{\"1\":{\"1620\":1}}],[\"核内\",{\"1\":{\"1620\":1}}],[\"核心独立使用的数据\",{\"1\":{\"1529\":1}}],[\"核心上创建一个独立的\",{\"1\":{\"1529\":1}}],[\"核心上的代码可以同时访问该变量\",{\"1\":{\"1529\":1}}],[\"核心上都创建一个独立的副本\",{\"1\":{\"1529\":1}}],[\"核心共享数据时保证数据的一致性\",{\"1\":{\"1529\":1}}],[\"核心转储文件\",{\"1\":{\"1459\":1}}],[\"核心思路在于\",{\"1\":{\"459\":1}}],[\"核心思路是使用\",{\"1\":{\"90\":1}}],[\"核心\",{\"1\":{\"256\":1,\"703\":1}}],[\"核心策略\",{\"1\":{\"215\":1,\"217\":1}}],[\"道理相似\",{\"1\":{\"1607\":1}}],[\"五\",{\"1\":{\"1603\":1}}],[\"五个\",{\"1\":{\"236\":1}}],[\"散热的方式有两种\",{\"1\":{\"1600\":1}}],[\"散列索引\",{\"1\":{\"812\":1}}],[\"废弃\",{\"1\":{\"1599\":1}}],[\"轮询的时候会根据不同\",{\"1\":{\"1601\":1}}],[\"轮询时间有\",{\"1\":{\"1598\":1}}],[\"轮询完后\",{\"1\":{\"954\":1}}],[\"隶属结构如下\",{\"1\":{\"1592\":1}}],[\"温度进行管控\",{\"1\":{\"1589\":1}}],[\"仍然需要启动\",{\"1\":{\"1584\":1}}],[\"仍然跟踪\",{\"1\":{\"1248\":1}}],[\"临界区后\",{\"1\":{\"1584\":1}}],[\"临界区\",{\"1\":{\"1584\":2}}],[\"临时编码\",{\"1\":{\"1170\":1}}],[\"临时变量\",{\"1\":{\"687\":2}}],[\"临时指定\",{\"0\":{\"334\":1}}],[\"临时存储节点\",{\"1\":{\"47\":1}}],[\"静止态\",{\"1\":{\"1583\":1}}],[\"静态链接库也可以属于这一类\",{\"1\":{\"1459\":1}}],[\"静态注册\",{\"0\":{\"699\":1,\"1398\":1}}],[\"静态方法没有\",{\"1\":{\"422\":1}}],[\"静态方法\",{\"0\":{\"422\":1},\"1\":{\"1571\":1}}],[\"宽限期\",{\"1\":{\"1583\":1}}],[\"卸载通知块\",{\"1\":{\"1576\":1}}],[\"低于此阈值的错误将不再累计\",{\"1\":{\"1591\":1}}],[\"低\",{\"1\":{\"1571\":1}}],[\"低带宽的通信协议\",{\"1\":{\"1507\":1}}],[\"挂在通知链上面\",{\"1\":{\"1567\":1}}],[\"阻止该函数被内联\",{\"1\":{\"1553\":1}}],[\"兼容的\",{\"1\":{\"1551\":1}}],[\"兼顾了精度和检测速度\",{\"1\":{\"1012\":1}}],[\"休眠状态\",{\"1\":{\"1545\":1}}],[\"及\",{\"1\":{\"1541\":1}}],[\"及其个数\",{\"1\":{\"1534\":1}}],[\"抽象\",{\"1\":{\"1533\":1}}],[\"待深入研究\",{\"1\":{\"1525\":1}}],[\"待处理线程结束之后\",{\"1\":{\"1524\":1}}],[\"待删除的接地那没有子节点\",{\"1\":{\"499\":1}}],[\"刷新\",{\"1\":{\"1523\":1}}],[\"禁止中断并不能避免来自其他处理器的并发访问\",{\"1\":{\"1517\":1}}],[\"禁止中断还可以禁止内核抢占\",{\"1\":{\"1517\":1}}],[\"禁止本地中断传递\",{\"1\":{\"1517\":1}}],[\"恢复本\",{\"1\":{\"1542\":1}}],[\"恢复本地中断传递到更定的状态\",{\"1\":{\"1517\":1}}],[\"恢复等功能\",{\"1\":{\"1532\":1}}],[\"恢复先前保存的寄存器上下文和栈\",{\"1\":{\"282\":1}}],[\"激活本地中断传递\",{\"1\":{\"1517\":1}}],[\"→\",{\"1\":{\"1515\":2}}],[\"✅✅✅\",{\"1\":{\"1510\":2}}],[\"串行外设接口\",{\"1\":{\"1508\":1}}],[\"旨在推进手机应用处理器接口的标准化\",{\"1\":{\"1508\":1}}],[\"怀疑是\",{\"1\":{\"1498\":1}}],[\"详细的\",{\"1\":{\"1498\":1}}],[\"镜像传输到\",{\"1\":{\"1493\":1}}],[\"镜像到安全内存中\",{\"1\":{\"1493\":1}}],[\"镜像可用的内存范围\",{\"1\":{\"1492\":1}}],[\"镜像加载的地址\",{\"1\":{\"1492\":1}}],[\"镜像\",{\"1\":{\"1492\":1}}],[\"镜像文件不存在\",{\"1\":{\"1487\":1}}],[\"镜像的时候\",{\"1\":{\"1487\":1}}],[\"镜像具体的加载地址会作为一个\",{\"1\":{\"1487\":1}}],[\"格式如下所示\",{\"1\":{\"1483\":1}}],[\"格式化文件标准\",{\"0\":{\"1111\":1}}],[\"格式化成自己需要的时间格式\",{\"1\":{\"905\":1}}],[\"格式化命令行参数\",{\"1\":{\"693\":1}}],[\"阐述有一个入口点在\",{\"1\":{\"1481\":1}}],[\"阐述了\",{\"1\":{\"1562\":1}}],[\"阐述了这个结论\",{\"1\":{\"590\":1}}],[\"阐述了一个公式\",{\"1\":{\"234\":1}}],[\"术语\",{\"1\":{\"1476\":1}}],[\"术语表\",{\"1\":{\"675\":1}}],[\"冷启动的时候把主\",{\"1\":{\"1481\":1}}],[\"冷启动的路径可以分为上述的步骤\",{\"1\":{\"1476\":1}}],[\"冷启动主要由主\",{\"1\":{\"1475\":1,\"1477\":1}}],[\"制定遵循着一些约定\",{\"1\":{\"1474\":1}}],[\"制定了需要申请的空间大小\",{\"1\":{\"1469\":1}}],[\"怎么选的主\",{\"1\":{\"1475\":1}}],[\"怎么理解这个电源管理用例\",{\"1\":{\"1474\":1}}],[\"怎样能在有限的时间内快速做出优化程度足够好的实现呢\",{\"1\":{\"690\":1}}],[\"普遍是\",{\"1\":{\"1470\":1}}],[\"普通线程\",{\"1\":{\"1293\":1}}],[\"普通的\",{\"1\":{\"120\":1,\"1584\":1}}],[\"魔数\",{\"1\":{\"1464\":1}}],[\"魔法方法\",{\"0\":{\"428\":1}}],[\"涉及到了字节序的问题\",{\"1\":{\"1463\":1}}],[\"涉及到三个参数\",{\"1\":{\"933\":1}}],[\"细节\",{\"1\":{\"1456\":1}}],[\"细致引入+解题模板+例题分析+代码呈现\",{\"1\":{\"140\":1}}],[\"跟我一起写makefile↩︎\",{\"1\":{\"1451\":1}}],[\"跟踪分支\",{\"1\":{\"1253\":1}}],[\"跟踪每一个\",{\"1\":{\"595\":1}}],[\"跟踪每个组件执行期间的错误预测率\",{\"1\":{\"594\":1}}],[\"太菜了\",{\"1\":{\"1449\":1}}],[\"太平洋\",{\"1\":{\"79\":1,\"80\":1}}],[\"太平洋大西洋水流问题\",{\"0\":{\"78\":1}}],[\"郁闷\",{\"1\":{\"1449\":2}}],[\"步\",{\"1\":{\"1445\":1,\"1477\":1}}],[\"步骤\",{\"1\":{\"597\":1}}],[\"步骤所做的事情\",{\"1\":{\"245\":1}}],[\"似乎也达到了效果\",{\"1\":{\"1424\":1}}],[\"严格区分大小写\",{\"1\":{\"1414\":1}}],[\"严格限制了一个进程可以映射的内存大小\",{\"1\":{\"1353\":1}}],[\"搞\",{\"1\":{\"1413\":1}}],[\"搞清楚\",{\"1\":{\"580\":1}}],[\"凡是涉及到\",{\"1\":{\"1392\":1}}],[\"❓较难理解\",{\"1\":{\"1389\":1}}],[\"❓\",{\"1\":{\"1388\":1}}],[\"❓❓\",{\"1\":{\"1498\":1,\"1524\":1}}],[\"❓❓如何理解\",{\"1\":{\"1383\":1}}],[\"❓❓❓\",{\"1\":{\"88\":1,\"425\":1,\"430\":3,\"1424\":1,\"1499\":1,\"1501\":2,\"1573\":1,\"1584\":1}}],[\"⚫⚫⚫\",{\"1\":{\"1385\":1}}],[\"⚪⚪⚪\",{\"1\":{\"1385\":1}}],[\"持有另一个\",{\"1\":{\"1383\":2}}],[\"扫描存活对象和其引用的对象\",{\"1\":{\"1380\":1}}],[\"扫描已安装\",{\"1\":{\"1374\":1}}],[\"淘宝安装后的首次搜索\",{\"1\":{\"1374\":1}}],[\"淘宝源安装\",{\"1\":{\"918\":1}}],[\"疑似\",{\"1\":{\"1374\":1}}],[\"敢于挑战权威和质疑现有的所有实现\",{\"1\":{\"1355\":1}}],[\"吹毛求疵一下\",{\"1\":{\"1353\":1}}],[\"牺牲了一部分性能\",{\"1\":{\"1353\":1}}],[\"期间做了无数精妙的优化\",{\"1\":{\"1352\":1}}],[\"期约和回调函数\",{\"1\":{\"1328\":1}}],[\"逐位进行\",{\"1\":{\"1521\":1}}],[\"逐个物理页处理\",{\"1\":{\"1342\":1}}],[\"逐渐被放弃使用\",{\"1\":{\"1012\":1}}],[\"映射空间不够用怎么办\",{\"1\":{\"1353\":1}}],[\"映射的这块缓冲区\",{\"1\":{\"1338\":1}}],[\"映射方式主要由以下几种\",{\"1\":{\"199\":1}}],[\"映射方式\",{\"0\":{\"199\":1}}],[\"抛开异常处理的过程不谈\",{\"1\":{\"1488\":1}}],[\"抛开无关细节\",{\"1\":{\"1333\":1}}],[\"抛出\",{\"1\":{\"1483\":1}}],[\"抛出相应的\",{\"1\":{\"1333\":1}}],[\"章节进行详细说明\",{\"1\":{\"1329\":1}}],[\"挑选其中一些细节进行说明\",{\"1\":{\"1329\":1}}],[\"侧\",{\"1\":{\"1327\":1}}],[\"侧实现\",{\"1\":{\"1291\":2}}],[\"彻底理解android\",{\"1\":{\"1322\":1}}],[\"探究binder\",{\"1\":{\"1322\":1}}],[\"探测\",{\"1\":{\"605\":1}}],[\"学习笔记\",{\"1\":{\"1411\":1}}],[\"学习binder前必须要了解的知识点\",{\"1\":{\"1322\":1}}],[\"学习中的收获和心得\",{\"1\":{\"722\":1}}],[\"➡️➡️\",{\"1\":{\"1320\":3,\"1329\":1,\"1545\":3}}],[\"唤醒后\",{\"1\":{\"1316\":1}}],[\"唤醒目标进程或线程进行处理\",{\"1\":{\"1308\":1}}],[\"驱动一般用的是\",{\"1\":{\"1605\":1}}],[\"驱动模块的入口\",{\"1\":{\"1605\":1}}],[\"驱动是否支持\",{\"1\":{\"1518\":1}}],[\"驱动软件\",{\"1\":{\"1510\":1}}],[\"驱动处理\",{\"1\":{\"1317\":1}}],[\"驱动发起请求或者应答数据\",{\"1\":{\"1311\":1}}],[\"驱动发送请求消息共\",{\"1\":{\"1310\":1}}],[\"驱动发送请求\",{\"1\":{\"1305\":1}}],[\"驱动设备向应用程序发送消息\",{\"1\":{\"1309\":1}}],[\"驱动设备发送请求消息\",{\"1\":{\"1309\":1}}],[\"驱动而言\",{\"1\":{\"1301\":1}}],[\"驱动\",{\"1\":{\"1301\":1,\"1333\":1,\"1534\":1}}],[\"驱动程序使用\",{\"1\":{\"724\":1}}],[\"清除队列的引用\",{\"1\":{\"1299\":1}}],[\"清单文件的\",{\"1\":{\"1240\":1}}],[\"拉取\",{\"1\":{\"1253\":1}}],[\"杀手锏\",{\"1\":{\"1252\":1}}],[\"舍弃对文件的修改\",{\"1\":{\"1241\":1}}],[\"撤销已暂存的文件\",{\"1\":{\"1241\":1}}],[\"衰减系数和衰减速度\",{\"1\":{\"1212\":1}}],[\"梯度下降算法的两个缺陷\",{\"1\":{\"1212\":1}}],[\"梯度下降法是最常用的神经网络优化算法\",{\"1\":{\"1212\":1}}],[\"△τ=b1​\",{\"1\":{\"1203\":1}}],[\"卷积核数量\",{\"1\":{\"1186\":1}}],[\"卷积核宽度\",{\"1\":{\"1186\":1}}],[\"卷积核高度\",{\"1\":{\"1186\":1}}],[\"效果如下\",{\"1\":{\"1181\":1}}],[\"效率最高\",{\"1\":{\"956\":1}}],[\"效率更好\",{\"1\":{\"200\":1}}],[\"效率较低但是不至于\",{\"1\":{\"100\":1}}],[\"版权协议\",{\"1\":{\"1179\":1}}],[\"版本号\",{\"1\":{\"1464\":1}}],[\"版本\",{\"1\":{\"841\":1,\"1464\":1}}],[\"版本进行安装\",{\"1\":{\"613\":1}}],[\"版本过低安装失败的问题↩︎\",{\"1\":{\"275\":1}}],[\"版本不正确的话\",{\"1\":{\"274\":1}}],[\"遵循\",{\"1\":{\"1179\":1}}],[\"遵循同样的高斯分布规律\",{\"1\":{\"1024\":1}}],[\"宏的语法如下\",{\"1\":{\"1529\":1}}],[\"宏包重要部分\",{\"1\":{\"1179\":1}}],[\"宏定义的一个函数指针\",{\"1\":{\"1567\":1}}],[\"宏定义的变量\",{\"1\":{\"1529\":1}}],[\"宏定义如下\",{\"1\":{\"1309\":1}}],[\"宏定义\",{\"1\":{\"180\":1}}],[\"触发后由哪个\",{\"1\":{\"1597\":1}}],[\"触发点由\",{\"1\":{\"1597\":1}}],[\"触发的概率越低\",{\"1\":{\"1171\":1}}],[\"触发调整算法\",{\"1\":{\"1170\":1}}],[\"极大降低了计算复杂度\",{\"1\":{\"1170\":1}}],[\"极大提升了模型的速度\",{\"1\":{\"1012\":1}}],[\"影响插入操作的编码策略的复杂度依赖于树的高度\",{\"1\":{\"1170\":1}}],[\"影响存储的唯一操作是\",{\"1\":{\"235\":1}}],[\"观察发现\",{\"1\":{\"1170\":1}}],[\"观察最大值为\",{\"1\":{\"165\":1}}],[\"沿着插入路径从下往上回溯节点\",{\"1\":{\"1169\":1}}],[\"沿着树的宽度遍历树的结点\",{\"1\":{\"71\":1}}],[\"窃取隐私数据\",{\"1\":{\"1166\":1}}],[\"隐私的威胁来自于两个方面\",{\"1\":{\"1166\":1}}],[\"隐私保护在各个领域都是一个很重要的研究课题\",{\"1\":{\"1166\":1}}],[\"范围\",{\"1\":{\"1155\":1}}],[\"范围是\",{\"1\":{\"36\":1}}],[\"幸运的是\",{\"1\":{\"1153\":1}}],[\"校验一下\",{\"1\":{\"1145\":1}}],[\"校正器会对中心频率偏移进行补偿\",{\"1\":{\"1024\":1}}],[\"校正器会对信号的中心频率进行校准\",{\"1\":{\"1020\":1}}],[\"台式机为pcie接口\",{\"1\":{\"1144\":1}}],[\"半高网卡\",{\"1\":{\"1144\":1}}],[\"半连接队列\",{\"1\":{\"984\":1}}],[\"笔记本为mini\",{\"1\":{\"1144\":1}}],[\"笔者把\",{\"1\":{\"1461\":1}}],[\"笔者存在一个需要读取大的\",{\"1\":{\"329\":1}}],[\"笔者在实际的业务场景中抓取过\",{\"1\":{\"1515\":1}}],[\"笔者在研究\",{\"1\":{\"1371\":1}}],[\"笔者在尝试了很久之后\",{\"1\":{\"289\":1}}],[\"笔者在调试这个多进程程序的时候\",{\"1\":{\"288\":1}}],[\"笔者对页表的理解如下\",{\"1\":{\"252\":1}}],[\"边界框的大小与位置可以用4个值来表征\",{\"1\":{\"1155\":1}}],[\"边界框的准确度可以用预测框与实际框\",{\"1\":{\"1155\":1}}],[\"边缘像素的丢失\",{\"1\":{\"1142\":1}}],[\"边沿非阻塞触发模式\",{\"1\":{\"956\":1}}],[\"边沿触发模式\",{\"1\":{\"956\":1}}],[\"训练神经网络的过程可以分为以下三个步骤\",{\"1\":{\"1212\":1}}],[\"训练循环了5000次\",{\"1\":{\"1212\":1}}],[\"训练网络\",{\"1\":{\"1162\":1}}],[\"训练数据配置文件voc\",{\"1\":{\"1159\":1}}],[\"训练时采用24大小的batch\",{\"1\":{\"1138\":1}}],[\"训练好的网络只使用无线信号来预测人的活动方式\",{\"1\":{\"1131\":1}}],[\"神经网络将输出关键支干的置信图\",{\"1\":{\"1137\":1}}],[\"神经网络无线感知交叉模型\",{\"1\":{\"1132\":1}}],[\"像之前提到过的一样\",{\"1\":{\"1137\":1}}],[\"像素的狸花猫图片分别对应两个\",{\"1\":{\"1021\":1}}],[\"垂直的和纵向的\",{\"1\":{\"1134\":1}}],[\"感知的目的\",{\"1\":{\"1133\":1}}],[\"感觉我就像是一个小学生\",{\"1\":{\"1048\":1}}],[\"感觉到上述的方法较为复杂\",{\"1\":{\"147\":1}}],[\"穿墙的rf信号在频域上的空间分辨率很低\",{\"1\":{\"1134\":1}}],[\"穿墙追踪可以分为两类\",{\"1\":{\"1133\":1}}],[\"穿过障碍物后信号衰弱但未发生反射\",{\"1\":{\"1019\":1}}],[\"坐下\",{\"1\":{\"1132\":1}}],[\"估计人的骨架\",{\"1\":{\"1132\":1}}],[\"绘制出主要的关键点\",{\"1\":{\"1131\":1}}],[\"绘制边界框\",{\"1\":{\"1021\":1}}],[\"躯干中的一个\",{\"1\":{\"1131\":1}}],[\"近几年来\",{\"1\":{\"1151\":1}}],[\"近期相关的研究大致可分为两类\",{\"1\":{\"1133\":1}}],[\"近期研究的先进的无线感知系统使用了rf信号来检测人类活动或者穿墙检测他们的行进速度\",{\"1\":{\"1131\":1}}],[\"近年来被广泛研究\",{\"1\":{\"1012\":1}}],[\"老人防护等\",{\"1\":{\"1131\":1}}],[\"人名\",{\"1\":{\"1162\":1}}],[\"人脸可能被多次检测\",{\"1\":{\"1157\":1}}],[\"人体可以反射出无线信号\",{\"1\":{\"1137\":1}}],[\"人体在可穿墙的频率下会反射无线信号\",{\"1\":{\"1134\":1}}],[\"人工对无线信号进行标签也很不现实\",{\"1\":{\"1132\":1}}],[\"人的姿态的预测在无线感知领域一直是一个重要的课题\",{\"1\":{\"1131\":1}}],[\"人活着已经很累了\",{\"1\":{\"1041\":1}}],[\"光谱\",{\"1\":{\"1124\":1}}],[\"鸭子\",{\"1\":{\"1111\":1}}],[\"烤\",{\"1\":{\"1111\":1}}],[\"烤鸭的做法\",{\"1\":{\"1111\":1}}],[\"爱好\",{\"1\":{\"1111\":1}}],[\"爱吃香蕉的珂珂\",{\"0\":{\"34\":1}}],[\"烹饪\",{\"1\":{\"1111\":1}}],[\"陕西\",{\"1\":{\"1094\":1}}],[\"西安电子科技大学毕业论文\",{\"1\":{\"1176\":1}}],[\"西安\",{\"1\":{\"1094\":1}}],[\"博客更新计划\",{\"0\":{\"1064\":1}}],[\"繁兮繁兮\",{\"1\":{\"1060\":1}}],[\"既然说作者做出了一个安全策略\",{\"1\":{\"1357\":1}}],[\"既明且哲\",{\"1\":{\"1060\":1}}],[\"既可以追加到文件中\",{\"1\":{\"361\":1}}],[\"夙夜解之\",{\"1\":{\"1060\":1}}],[\"闻于苍穹\",{\"1\":{\"1060\":1}}],[\"远程主机地址\",{\"1\":{\"1453\":2}}],[\"远程分支\",{\"1\":{\"1253\":1}}],[\"远程\",{\"1\":{\"1236\":1}}],[\"远程访问\",{\"0\":{\"446\":1}}],[\"远远小于视觉数据\",{\"1\":{\"1134\":1}}],[\"远歧近理\",{\"1\":{\"1060\":1}}],[\"岂不思异\",{\"1\":{\"1060\":1}}],[\"殊从于规\",{\"1\":{\"1060\":1}}],[\"心之忧矣\",{\"1\":{\"1060\":1}}],[\"心灵上更加强大\",{\"1\":{\"1028\":1}}],[\"愠于从涩\",{\"1\":{\"1060\":1}}],[\"吾心繁繁\",{\"1\":{\"1060\":1}}],[\"涩以从繁\",{\"1\":{\"1060\":1}}],[\"何不躬行\",{\"1\":{\"1060\":1}}],[\"何彼涩矣\",{\"1\":{\"1060\":1}}],[\"何彼繁矣\",{\"1\":{\"1060\":1}}],[\"何必想得太多\",{\"1\":{\"1041\":1}}],[\"勿陋勿隐\",{\"1\":{\"1060\":1}}],[\"真丧\",{\"1\":{\"1048\":1}}],[\"真的不喜欢这门语言\",{\"1\":{\"1048\":1}}],[\"真的很痛恨加班\",{\"1\":{\"478\":1}}],[\"今天写了博客的新版本\",{\"1\":{\"1046\":1}}],[\"今天练习了一下\",{\"1\":{\"296\":1}}],[\"睡起来再点一下\",{\"1\":{\"1042\":1}}],[\"睡觉的时候点一下\",{\"1\":{\"1042\":1}}],[\"珍惜当下才是根本\",{\"1\":{\"1041\":1}}],[\"活在当下\",{\"1\":{\"1041\":1}}],[\"纯粹地去coding\",{\"1\":{\"1041\":1}}],[\"永远比与人打交道来得简单\",{\"1\":{\"1041\":1}}],[\"永久指定\",{\"0\":{\"335\":1}}],[\"喜欢这件事\",{\"1\":{\"1040\":1}}],[\"日志区产生记录\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"日就月将\",{\"1\":{\"1060\":1}}],[\"日记\",{\"0\":{\"1051\":1}}],[\"日常感悟\",{\"0\":{\"1037\":1}}],[\"日期\",{\"1\":{\"1032\":1}}],[\"必要时进行调整的\",{\"1\":{\"1034\":1}}],[\"必须确定其引用的对象不会被意外回收\",{\"1\":{\"1383\":1}}],[\"必须要知道目标主机的\",{\"1\":{\"993\":1}}],[\"必须实现选择一个报文段的最大生存时间\",{\"1\":{\"983\":1}}],[\"必须在具有\",{\"1\":{\"724\":1}}],[\"必须尽可能得放弃\",{\"1\":{\"552\":1}}],[\"必须是在\",{\"1\":{\"549\":1}}],[\"必须先将内存中的数据从内存移到寄存器中\",{\"1\":{\"523\":1}}],[\"必须先拿到gil\",{\"1\":{\"277\":1}}],[\"必须的\",{\"1\":{\"208\":1}}],[\"必须\",{\"1\":{\"86\":1}}],[\"短期目标\",{\"1\":{\"1032\":1}}],[\"短的元素均不相同\",{\"1\":{\"168\":1}}],[\"厨师没有本质区别\",{\"1\":{\"1030\":1}}],[\"绝不要做他人都在做的事\",{\"0\":{\"1030\":1}}],[\"绝对路径或者相对路径都可以\",{\"1\":{\"658\":1}}],[\"职业发展的驱动力一定是来自个体本身\",{\"1\":{\"1029\":1}}],[\"职业\",{\"0\":{\"1029\":1}}],[\"美\",{\"1\":{\"1028\":1}}],[\"软硬件协同的机会来了\",{\"1\":{\"1355\":1}}],[\"软技能\",{\"1\":{\"1028\":1}}],[\"软件要求\",{\"1\":{\"1144\":1}}],[\"软件环境的配置较为困难\",{\"1\":{\"1144\":1}}],[\"软件环境\",{\"1\":{\"1144\":1}}],[\"软件包中\",{\"1\":{\"764\":1}}],[\"软件服务\",{\"1\":{\"639\":1}}],[\"软件管理的\",{\"1\":{\"226\":1}}],[\"便认为其未发生改变\",{\"1\":{\"1025\":1}}],[\"频谱图上抑制或消除多径信号的峰值\",{\"1\":{\"1025\":1}}],[\"频谱区分出多径和主径\",{\"1\":{\"1025\":1}}],[\"频谱峰值中心轴的角度差距小于\",{\"1\":{\"1025\":1}}],[\"频谱上的主径峰值通常十分稳定\",{\"1\":{\"1025\":1}}],[\"频段无关\",{\"1\":{\"1024\":1}}],[\"频段重叠子载波相位的形状会变得相似\",{\"1\":{\"1024\":1}}],[\"振幅等于补偿后的功率\",{\"1\":{\"1024\":1}}],[\"受限于硬件的分辨率\",{\"1\":{\"1024\":1}}],[\"偏置项\",{\"1\":{\"1212\":1}}],[\"偏差一般不会导致斜率上的偏移\",{\"1\":{\"1024\":1}}],[\"偏移用于衡量bbox的位置\",{\"1\":{\"1012\":1}}],[\"偏移地址\",{\"1\":{\"681\":1}}],[\"偏移量\",{\"1\":{\"529\":1}}],[\"测量数量\",{\"1\":{\"1024\":1}}],[\"测量越多的\",{\"1\":{\"1024\":1}}],[\"测试结果如表所示\",{\"1\":{\"1012\":1}}],[\"测试结果如下\",{\"1\":{\"173\":1}}],[\"测试是否安装成功\",{\"1\":{\"863\":1}}],[\"测试的\",{\"1\":{\"667\":1}}],[\"测试并连接到\",{\"1\":{\"611\":1}}],[\"测试用例\",{\"0\":{\"386\":1}}],[\"测试用例如下\",{\"1\":{\"150\":1}}],[\"测试后清理的固定代码\",{\"1\":{\"377\":1}}],[\"φ\",{\"1\":{\"1024\":1}}],[\"误差消除的效果也会越好\",{\"1\":{\"1024\":1}}],[\"误差消除研究成果\",{\"1\":{\"1012\":1}}],[\"误差的目的\",{\"1\":{\"1024\":1}}],[\"旋转后的整棵二叉树又重新处于平衡状态\",{\"1\":{\"1169\":1}}],[\"旋转\",{\"1\":{\"1024\":1,\"1169\":1}}],[\"β\",{\"1\":{\"1024\":2,\"1206\":1,\"1208\":1}}],[\"λo​\",{\"1\":{\"1206\":1,\"1208\":1}}],[\"λb​\",{\"1\":{\"1206\":1,\"1208\":1}}],[\"λ\",{\"1\":{\"1024\":5,\"1025\":2}}],[\"τ\",{\"1\":{\"1024\":4,\"1203\":1}}],[\"τp\",{\"1\":{\"1020\":1}}],[\"采集需要识别的头像\",{\"1\":{\"1162\":1}}],[\"采用互斥锁和叫做可睡眠的读拷贝更新机制\",{\"1\":{\"1562\":1}}],[\"采用自旋锁\",{\"1\":{\"1562\":1}}],[\"采用普通的二叉搜索树\",{\"1\":{\"1170\":1}}],[\"采用leaky\",{\"1\":{\"1156\":1}}],[\"采用轮询的方式扫描文件描述符\",{\"1\":{\"954\":1}}],[\"采样频偏\",{\"1\":{\"1024\":1}}],[\"倍\",{\"1\":{\"1022\":1}}],[\"倍大小\",{\"1\":{\"253\":1}}],[\"速度和内存消耗的前提下\",{\"1\":{\"1022\":1}}],[\"速度介于\",{\"1\":{\"34\":1}}],[\"弱语义的特征连接起来\",{\"1\":{\"1022\":1}}],[\"弱光环境\",{\"1\":{\"1012\":1}}],[\"固定虚拟平台\",{\"1\":{\"1476\":1}}],[\"固有的金字塔特征结构\",{\"1\":{\"1022\":1}}],[\"固件保存在非易失性存储器\",{\"1\":{\"1501\":1}}],[\"固件可以充当操作系统的角色\",{\"1\":{\"1501\":1}}],[\"固件参数化需要使用\",{\"1\":{\"382\":1}}],[\"固件参数化结合了前面\",{\"1\":{\"382\":1}}],[\"固件在定义时使用\",{\"1\":{\"382\":1}}],[\"固件的作用就是可以自动运行的\",{\"1\":{\"1501\":1}}],[\"固件的作用是在执行测试函数之前\",{\"1\":{\"377\":1}}],[\"固件的默认名称为定义时的函数名\",{\"1\":{\"381\":1}}],[\"固件相关的操作\",{\"1\":{\"376\":1}}],[\"固件\",{\"0\":{\"376\":1}}],[\"绿色代表预测网格生成的\",{\"1\":{\"1021\":1}}],[\"绿皮书\",{\"1\":{\"610\":1}}],[\"蓝牙\",{\"0\":{\"1271\":1}}],[\"蓝牙定位技术成本较低但是精度无法达到室内定位的要求\",{\"1\":{\"1012\":1}}],[\"蓝色和绿色标识的多径都经过墙壁或家具的反射\",{\"1\":{\"1019\":1}}],[\"红黑树此时是一个空树\",{\"1\":{\"1340\":1}}],[\"红黑树\",{\"1\":{\"1340\":1}}],[\"红黑树的根节点\",{\"1\":{\"955\":1}}],[\"红色的代表\",{\"1\":{\"1021\":1}}],[\"红色的为主径\",{\"1\":{\"1019\":1}}],[\"室内多径效应及其影响和多信号分类算法\",{\"1\":{\"1017\":1}}],[\"室内定位的国内外研究现状\",{\"0\":{\"1016\":1}}],[\"室内定位的发展过程\",{\"0\":{\"1015\":1}}],[\"室内定位的发展已经有将近\",{\"1\":{\"1012\":1}}],[\"室内定位拥有广阔的应用场景\",{\"1\":{\"1014\":1}}],[\"室内定位拥有很广阔的应用前景\",{\"1\":{\"1012\":1}}],[\"室内定位系统中\",{\"1\":{\"1012\":1}}],[\"室内定位算法\",{\"0\":{\"1025\":1},\"1\":{\"1012\":2}}],[\"论文中的基于rf信号的系统的原理在于发射低频率的信号并接收其反射信号\",{\"1\":{\"1134\":1}}],[\"论文结构\",{\"0\":{\"1017\":1}}],[\"论文是在李瑞导师的悉心指点下完成的\",{\"1\":{\"1012\":1}}],[\"地下停车场等室内环境中\",{\"1\":{\"1014\":1}}],[\"地址以及每个分支的跟踪信息\",{\"1\":{\"1250\":1}}],[\"地址是一一对应的\",{\"1\":{\"994\":1}}],[\"地址与\",{\"1\":{\"994\":1}}],[\"地址为https\",{\"1\":{\"1177\":1}}],[\"地址为\",{\"1\":{\"993\":2}}],[\"地址解析为\",{\"1\":{\"993\":1}}],[\"地址范围\",{\"1\":{\"973\":1}}],[\"地址的过程\",{\"1\":{\"993\":1}}],[\"地址的类别\",{\"0\":{\"973\":1}}],[\"地址的长度\",{\"0\":{\"972\":1}}],[\"地址的偏移地址计算目标地址\",{\"1\":{\"530\":1}}],[\"地址转化成目标\",{\"1\":{\"993\":1}}],[\"地址转化函数\",{\"1\":{\"949\":1}}],[\"地址转换应该是可以进来的\",{\"1\":{\"728\":1}}],[\"地址转换\",{\"1\":{\"255\":1}}],[\"地址所在页的地址加上\",{\"1\":{\"530\":1}}],[\"地址所在页的地址\",{\"1\":{\"530\":1}}],[\"地址\",{\"1\":{\"524\":1,\"530\":1,\"993\":5,\"994\":2,\"1236\":1}}],[\"北斗导航卫星等\",{\"1\":{\"1014\":1}}],[\"灵活地将多尺度的上下文信息聚合在一起\",{\"1\":{\"1012\":1}}],[\"距离衡量人物头部距离\",{\"1\":{\"1012\":1}}],[\"折中结合可以有效提升编码器\",{\"1\":{\"1012\":1}}],[\"折扣对应的价格\",{\"1\":{\"102\":1}}],[\"翻页\",{\"1\":{\"1012\":5}}],[\"翻译过来就是说静态\",{\"1\":{\"584\":1}}],[\"翻译名称叫做前向概率计数器\",{\"1\":{\"558\":1}}],[\"围绕bbox\",{\"1\":{\"1012\":1}}],[\"围绕这两个模块\",{\"1\":{\"1012\":1}}],[\"功率时延谱可以由信道脉冲响应计算得到\",{\"1\":{\"1020\":1}}],[\"功率时延谱可以在测量\",{\"1\":{\"1012\":1}}],[\"功率时延谱\",{\"1\":{\"1020\":1}}],[\"功能\",{\"1\":{\"1304\":1,\"1554\":1}}],[\"功能简要介绍\",{\"1\":{\"1179\":1}}],[\"功能有传输连接管理\",{\"1\":{\"977\":1}}],[\"功能的\",{\"1\":{\"724\":1}}],[\"超过阀值轮询时间\",{\"1\":{\"1598\":1}}],[\"超级简单\",{\"1\":{\"1352\":1}}],[\"超声波定位技术易受干扰\",{\"1\":{\"1012\":1}}],[\"超时需要\",{\"1\":{\"988\":1}}],[\"超时引起\",{\"1\":{\"987\":1}}],[\"超时和接收到重复的确认\",{\"1\":{\"987\":1}}],[\"超时和重传\",{\"0\":{\"986\":1}}],[\"超时\",{\"0\":{\"152\":1}}],[\"鲁棒性强\",{\"1\":{\"1012\":1}}],[\"融合indetectnet\",{\"1\":{\"1012\":1}}],[\"融合后的定位系统相比于单个定位系统精度更高\",{\"1\":{\"1012\":1}}],[\"融合的算法为基于线性卡尔曼滤波的定位信息融合算法\",{\"1\":{\"1012\":1}}],[\"融合了wifi室内定位的可穿墙性和视觉室内定位的高精度优点\",{\"1\":{\"1012\":1}}],[\"融合过后的组合预测器性能得到了很大的提升\",{\"1\":{\"583\":1}}],[\"恳请各位老师批评指导\",{\"1\":{\"1012\":1}}],[\"晚上好\",{\"1\":{\"1012\":1}}],[\"努力提高自己\",{\"1\":{\"1008\":1}}],[\"希望能做到理解\",{\"1\":{\"1468\":1}}],[\"希望通过这个目的\",{\"1\":{\"1443\":1}}],[\"希望新的一年继续好好学习\",{\"1\":{\"1008\":1}}],[\"希望我们用迭代的方法进行求解\",{\"1\":{\"486\":1}}],[\"响应中断事件\",{\"1\":{\"1516\":1}}],[\"响应正文\",{\"1\":{\"999\":1}}],[\"响应消息包括四部分\",{\"1\":{\"999\":1}}],[\"响应更快\",{\"1\":{\"997\":1}}],[\"携带\",{\"1\":{\"998\":1}}],[\"辅助文件\",{\"1\":{\"1179\":1}}],[\"辅助域名服务器会定时\",{\"1\":{\"997\":1}}],[\"辅助函数进行递归\",{\"1\":{\"56\":1}}],[\"属于非易失性存储器\",{\"1\":{\"1501\":1}}],[\"属于计算机软件中特殊的一类\",{\"1\":{\"1501\":1}}],[\"属于应用层协议\",{\"1\":{\"997\":1}}],[\"属性决定的\",{\"1\":{\"1570\":1}}],[\"属性用来表示该段在文件中存在\",{\"1\":{\"1462\":1}}],[\"属性中存在\",{\"1\":{\"1521\":1}}],[\"属性中\",{\"1\":{\"933\":1}}],[\"属性\",{\"1\":{\"925\":1}}],[\"属性的值为\",{\"1\":{\"623\":1}}],[\"属性能否进行修改呢\",{\"1\":{\"422\":1}}],[\"认为只是预测一张输入图片\",{\"1\":{\"1157\":1}}],[\"认为数据发生丢失\",{\"1\":{\"987\":1}}],[\"认证\",{\"1\":{\"996\":1}}],[\"工作是属于公司的\",{\"1\":{\"1029\":1}}],[\"工作原理\",{\"0\":{\"994\":1}}],[\"工作在网络层\",{\"1\":{\"993\":1}}],[\"工具可以作为\",{\"1\":{\"1464\":1}}],[\"工具软件\",{\"0\":{\"802\":1}}],[\"工具\",{\"1\":{\"345\":1}}],[\"略过\",{\"1\":{\"988\":1}}],[\"延缓\",{\"1\":{\"988\":1}}],[\"监视系统的半开连接和不活动连接\",{\"1\":{\"988\":1}}],[\"监听套接字由\",{\"1\":{\"952\":1}}],[\"监听套接字\",{\"1\":{\"952\":1}}],[\"监听协议的缺点在于沟通成本很高\",{\"1\":{\"225\":1}}],[\"俗称syn\",{\"1\":{\"988\":1}}],[\"秒\",{\"1\":{\"988\":1}}],[\"微信安装后的首次启动\",{\"1\":{\"1374\":1}}],[\"微观上等于\",{\"1\":{\"987\":1}}],[\"微软\",{\"1\":{\"725\":1}}],[\"快速恢复\",{\"1\":{\"987\":1}}],[\"线性温度调节曲线的偏移\",{\"1\":{\"1591\":1}}],[\"线性温度调节曲线的斜率\",{\"1\":{\"1591\":1}}],[\"线性增加\",{\"1\":{\"987\":1}}],[\"线程都被阻塞时\",{\"1\":{\"1584\":1}}],[\"线程都拥有一个\",{\"1\":{\"667\":1}}],[\"线程才会进入睡眠状态\",{\"1\":{\"1584\":1}}],[\"线程不再持有任何共享数据\",{\"1\":{\"1584\":1}}],[\"线程已经处理完正在使用的共享数据并即将睡眠时所处的状态\",{\"1\":{\"1584\":1}}],[\"线程继续初始化\",{\"1\":{\"1557\":1}}],[\"线程函数是\",{\"1\":{\"1556\":1}}],[\"线程执行的时候\",{\"1\":{\"1515\":1}}],[\"线程看到不可达的对象\",{\"1\":{\"1389\":1}}],[\"线程看不到\",{\"1\":{\"1389\":1}}],[\"线程调度造成的性能瓶颈\",{\"1\":{\"1358\":1}}],[\"线程读取数据进行处理同样是在\",{\"1\":{\"1317\":1}}],[\"线程退出循环\",{\"1\":{\"1299\":1}}],[\"线程加入线程池的函数\",{\"1\":{\"1298\":1}}],[\"线程并加入线程池\",{\"1\":{\"1297\":1}}],[\"线程命名\",{\"1\":{\"1297\":1}}],[\"线程起名\",{\"1\":{\"1295\":1}}],[\"线程队列\",{\"1\":{\"1293\":1}}],[\"线程来决定是否创建\",{\"1\":{\"1293\":1}}],[\"线程可以分为主线程和普通线程\",{\"1\":{\"1293\":1}}],[\"线程可以看做轻量级的进程\",{\"1\":{\"736\":1}}],[\"线程的命名格式为\",{\"1\":{\"1293\":1}}],[\"线程了\",{\"1\":{\"1293\":1}}],[\"线程池↩︎\",{\"1\":{\"1322\":1}}],[\"线程池中的某个线程进行处理\",{\"1\":{\"1298\":1}}],[\"线程池中\",{\"1\":{\"1298\":2}}],[\"线程池的创建\",{\"1\":{\"1297\":1}}],[\"线程池创建好之后\",{\"1\":{\"1293\":1}}],[\"线程池是如何创建的\",{\"1\":{\"1293\":1}}],[\"线程池\",{\"0\":{\"1293\":1},\"1\":{\"1293\":1,\"1294\":1}}],[\"线程上下文切换效率比进程上下文切换效率高很多\",{\"1\":{\"736\":1}}],[\"线程组之间只能共享资源\",{\"1\":{\"736\":1}}],[\"线程之间的切换开销小\",{\"1\":{\"736\":1}}],[\"线程是如何管理\",{\"1\":{\"1293\":1}}],[\"线程是为了在系统层面做到并发\",{\"1\":{\"736\":1}}],[\"线程是进程的一部分\",{\"1\":{\"736\":2}}],[\"线程是\",{\"1\":{\"736\":1}}],[\"线程\",{\"0\":{\"1557\":1},\"1\":{\"252\":1,\"282\":1,\"736\":1,\"1293\":2,\"1298\":1,\"1316\":1,\"1317\":1,\"1556\":2}}],[\"试探一下网络的承受能力\",{\"1\":{\"987\":1}}],[\"刚建立连接时\",{\"1\":{\"987\":1}}],[\"刚好填满一列\",{\"1\":{\"104\":1}}],[\"慢启动允许一方放松连续的未经确认的分组的增加方式采用指数增加\",{\"1\":{\"987\":1}}],[\"慢启动\",{\"1\":{\"987\":1}}],[\"拥塞发生时算法\",{\"1\":{\"987\":1}}],[\"拥塞避免算法要求每收到一个确认时将\",{\"1\":{\"987\":1}}],[\"拥塞避免算法和慢启动算法需要对每个连接维持两个变量\",{\"1\":{\"987\":1}}],[\"拥塞避免允许一方放松连续的未经确认的分组的增加方式采用线性增加\",{\"1\":{\"987\":1}}],[\"拥塞避免\",{\"1\":{\"987\":1}}],[\"拥塞控制算法\",{\"0\":{\"987\":1}}],[\"拥塞控制状态机的状态有五种\",{\"1\":{\"986\":1}}],[\"拥塞控制有其状态机和四种算法\",{\"1\":{\"986\":1}}],[\"拥塞控制\",{\"1\":{\"986\":1}}],[\"拥有更快的擦除重写速度\",{\"1\":{\"1501\":1}}],[\"拥有很多成熟的定位技术\",{\"1\":{\"1014\":1}}],[\"拥有丰富的数据结构\",{\"1\":{\"825\":1}}],[\"拥有者位\",{\"1\":{\"741\":1}}],[\"知识拓展\",{\"1\":{\"982\":1}}],[\"知乎\",{\"1\":{\"264\":1,\"708\":1}}],[\"攻击者在短时间内发送大量的\",{\"1\":{\"988\":1}}],[\"攻击\",{\"1\":{\"982\":1,\"988\":1}}],[\"片相对整个包的位置\",{\"1\":{\"981\":1}}],[\"片内可寻址寄存器可以通过软件控制\",{\"1\":{\"226\":1}}],[\"片内可寻址寄存器的应用\",{\"1\":{\"226\":1}}],[\"片内可寻址存储器\",{\"0\":{\"226\":1}}],[\"补充说明\",{\"1\":{\"980\":1}}],[\"往\",{\"1\":{\"1328\":2}}],[\"往返延迟时间\",{\"1\":{\"978\":1}}],[\"往队列中放\",{\"1\":{\"52\":1}}],[\"见mss\",{\"1\":{\"978\":1}}],[\"报文以后\",{\"1\":{\"988\":1}}],[\"报文再分配\",{\"1\":{\"988\":1}}],[\"报文时\",{\"1\":{\"988\":1}}],[\"报文段\",{\"1\":{\"981\":1}}],[\"报文段的某一片丢失后\",{\"1\":{\"981\":1}}],[\"报文中有一个标志位\",{\"1\":{\"981\":1}}],[\"报文\",{\"1\":{\"978\":1,\"983\":1}}],[\"报头后面也可以提供若干选项\",{\"1\":{\"978\":1}}],[\"报错\",{\"1\":{\"361\":2}}],[\"紧接着就执行\",{\"1\":{\"1316\":1}}],[\"紧急数据\",{\"1\":{\"978\":1}}],[\"紧跟着的\",{\"1\":{\"761\":1}}],[\"握手时发送的为自己的\",{\"1\":{\"982\":1}}],[\"握手时同步\",{\"1\":{\"978\":1}}],[\"握手时状态\",{\"1\":{\"978\":1}}],[\"握手过后\",{\"1\":{\"978\":1}}],[\"握手是存储的是\",{\"1\":{\"978\":1}}],[\"段表在文件中的偏移\",{\"1\":{\"1464\":1}}],[\"段\",{\"1\":{\"1460\":4}}],[\"段作为应答\",{\"1\":{\"982\":1}}],[\"段中包含优先级数据\",{\"1\":{\"978\":1}}],[\"段包含了发送端希望接收的下一个字节的窗口索引\",{\"1\":{\"978\":1}}],[\"段号+段内偏移\",{\"1\":{\"198\":1}}],[\"顺序\",{\"1\":{\"977\":1}}],[\"顺序不同的序列被视作不同的组合\",{\"1\":{\"136\":1}}],[\"七层模型\",{\"1\":{\"977\":1}}],[\"链表时\",{\"1\":{\"1341\":1}}],[\"链路层\",{\"1\":{\"977\":2,\"979\":1,\"993\":1}}],[\"链接是\",{\"1\":{\"1635\":1}}],[\"链接于特定的平台\",{\"1\":{\"1490\":1}}],[\"链接器使用这种文件跟其他的可重定位文件和共享目录链接\",{\"1\":{\"1459\":1}}],[\"链接监听器\",{\"1\":{\"961\":1}}],[\"链接\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"75\":1,\"76\":1,\"86\":1,\"87\":1,\"92\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1,\"269\":1,\"1065\":1,\"1066\":1,\"1067\":1,\"1068\":1,\"1176\":2}}],[\"收集到的数据集具有成千上万的人的室内活动\",{\"1\":{\"1132\":1}}],[\"收到数据则往下执行一次\",{\"1\":{\"1333\":1}}],[\"收到应答消息后写入\",{\"1\":{\"1333\":1}}],[\"收到重复的ack不仅仅告诉我们一个分组丢失了\",{\"1\":{\"987\":1}}],[\"收到\",{\"1\":{\"983\":1}}],[\"收到了被损坏的包或者段\",{\"1\":{\"976\":1}}],[\"收录了微体系结构中经典的具有影响力的论文\",{\"1\":{\"568\":1}}],[\"奠定了基础\",{\"1\":{\"967\":1}}],[\"年的历史\",{\"1\":{\"1012\":1}}],[\"年\",{\"1\":{\"967\":1}}],[\"年发布\",{\"1\":{\"966\":1}}],[\"年年底发布\",{\"1\":{\"966\":1}}],[\"年被该奖项收录\",{\"1\":{\"568\":1}}],[\"于嗟益兮\",{\"1\":{\"1060\":1}}],[\"于乎哀哉\",{\"1\":{\"1060\":1}}],[\"于简于繁\",{\"1\":{\"1060\":1}}],[\"于美于显\",{\"1\":{\"1060\":1}}],[\"于\",{\"1\":{\"966\":2}}],[\"于是要与服务器同步\",{\"1\":{\"1253\":1}}],[\"于是设\",{\"1\":{\"987\":1}}],[\"于是就提升了解释器速度\",{\"1\":{\"687\":1}}],[\"于是有总的错误预测惩罚计算如下\",{\"1\":{\"547\":1}}],[\"于是增加了一个新的标志位\",{\"1\":{\"217\":1}}],[\"释放整个\",{\"1\":{\"1551\":1}}],[\"释放内存\",{\"1\":{\"1310\":1,\"1383\":1}}],[\"释放资源\",{\"1\":{\"961\":1,\"962\":1}}],[\"释放锁的时候根据\",{\"1\":{\"833\":1}}],[\"带缓冲区\",{\"1\":{\"961\":1}}],[\"带空白的文本文件和电子表格中的空白单元\",{\"1\":{\"600\":1}}],[\"跨平台\",{\"1\":{\"958\":1}}],[\"跨进程的调用\",{\"1\":{\"702\":1,\"703\":1}}],[\"专注于我们的主体流程研究\",{\"1\":{\"1518\":1}}],[\"专注于网络\",{\"1\":{\"958\":1}}],[\"专门设计的\",{\"1\":{\"1353\":1}}],[\"专有的命令如下表格所示\",{\"1\":{\"1239\":1}}],[\"专属加密\",{\"1\":{\"648\":1}}],[\"突破文件描述符上限\",{\"0\":{\"957\":1}}],[\"满\",{\"1\":{\"956\":1}}],[\"满足\",{\"1\":{\"153\":1}}],[\"满足数量条件\",{\"1\":{\"102\":1}}],[\"客户端调用到\",{\"1\":{\"1333\":1}}],[\"客户端会调用\",{\"1\":{\"1332\":1}}],[\"客户端会回应\",{\"1\":{\"984\":1}}],[\"客户端数据封装\",{\"1\":{\"1328\":1}}],[\"客户端数据库可视化查询软件\",{\"1\":{\"802\":1}}],[\"客户端完成了几件事情\",{\"1\":{\"1328\":1}}],[\"客户端请求到达服务端后\",{\"1\":{\"1298\":1}}],[\"客户端下载地址\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"客户端\",{\"1\":{\"1176\":1,\"1265\":1,\"1320\":1,\"1326\":1,\"1647\":1}}],[\"客户端错误\",{\"1\":{\"999\":1}}],[\"客户端向服务端发起请求时\",{\"1\":{\"1298\":1}}],[\"客户端向\",{\"1\":{\"997\":1}}],[\"客户端首先连接到服务器的\",{\"1\":{\"992\":1}}],[\"客户端将自己的\",{\"1\":{\"982\":1}}],[\"客户端发送一个\",{\"1\":{\"982\":1}}],[\"客户端连接服务器使用\",{\"1\":{\"962\":1}}],[\"客户端给\",{\"1\":{\"956\":1}}],[\"万一漏了没改\",{\"1\":{\"1441\":1}}],[\"万一模块存在依赖属性的问题时\",{\"1\":{\"719\":1}}],[\"万个连接告诉操作系统\",{\"1\":{\"954\":1}}],[\"万个客户端同时与一个服务器保持着\",{\"1\":{\"954\":1}}],[\"键反选选择\",{\"1\":{\"917\":1,\"1101\":1}}],[\"键切换所有\",{\"1\":{\"917\":1,\"1101\":1}}],[\"升级\",{\"1\":{\"916\":1,\"1032\":1}}],[\"升序\",{\"1\":{\"341\":1}}],[\"继续通知下一个\",{\"1\":{\"1573\":1}}],[\"继续处理\",{\"1\":{\"999\":1}}],[\"继续书写\",{\"1\":{\"885\":1}}],[\"继承\",{\"1\":{\"1296\":1}}],[\"继承的超类\",{\"1\":{\"665\":1}}],[\"继承易错知识点\",{\"0\":{\"426\":1}}],[\"继承了父类的属性\",{\"1\":{\"424\":1}}],[\"继承与多态\",{\"0\":{\"423\":1}}],[\"流行主题的合集\",{\"1\":{\"1638\":1}}],[\"流程\",{\"1\":{\"1515\":1}}],[\"流程中的\",{\"1\":{\"1583\":1}}],[\"流程中的各个阶段\",{\"1\":{\"1325\":1}}],[\"流程中涉及到的\",{\"1\":{\"1540\":1}}],[\"流程中\",{\"1\":{\"1313\":1,\"1523\":1,\"1540\":1}}],[\"流程的源码分析循环依赖问题\",{\"1\":{\"881\":1}}],[\"流量控制\",{\"0\":{\"989\":1}}],[\"流水线或设备初始化完成\",{\"1\":{\"961\":1}}],[\"流水线聚焦于指令\",{\"1\":{\"542\":1}}],[\"流水线\",{\"1\":{\"542\":1}}],[\"流水线并行\",{\"1\":{\"542\":1}}],[\"流水线被反转了么\",{\"1\":{\"243\":1}}],[\"流水线的主要作用还是降低指令的平均执行时间\",{\"1\":{\"234\":1}}],[\"流水线的概念理解较为简单\",{\"1\":{\"234\":1}}],[\"流水线技术分为两个大的部分\",{\"1\":{\"233\":1}}],[\"封装过后调用了\",{\"1\":{\"1606\":1}}],[\"封装了\",{\"1\":{\"958\":1}}],[\"封装起来\",{\"1\":{\"878\":1}}],[\"封装的有\",{\"1\":{\"740\":1}}],[\"问问题\",{\"1\":{\"873\":1}}],[\"问题等价于\",{\"1\":{\"117\":2}}],[\"问题有很多的子问题\",{\"1\":{\"106\":1}}],[\"问题\",{\"1\":{\"91\":1,\"112\":1,\"114\":1,\"115\":1,\"122\":1,\"138\":1,\"144\":1,\"251\":1,\"738\":1,\"950\":1,\"980\":1,\"1114\":1}}],[\"问题的时候\",{\"1\":{\"88\":1}}],[\"问题的本质就是让你在一副\",{\"1\":{\"83\":1}}],[\"问题分析\",{\"1\":{\"88\":1,\"120\":1}}],[\"问题求解\",{\"1\":{\"56\":1}}],[\"轻量相对于j2ee\",{\"1\":{\"869\":1}}],[\"建立内核空间虚拟地址和物理页的映射\",{\"1\":{\"1342\":1}}],[\"建立应用\",{\"1\":{\"864\":1}}],[\"建立项目\",{\"1\":{\"864\":1}}],[\"建议值\",{\"1\":{\"253\":1}}],[\"退出可以使用\",{\"1\":{\"856\":1}}],[\"退出虚拟环境使用deactive\",{\"1\":{\"854\":1}}],[\"序列号回绕的问题\",{\"1\":{\"982\":1}}],[\"序列号回绕\",{\"1\":{\"982\":1}}],[\"序列化和反序列化使用\",{\"1\":{\"842\":1}}],[\"序列内的数字由小到大排列\",{\"1\":{\"165\":1}}],[\"槽\",{\"0\":{\"834\":1}}],[\"互斥性\",{\"1\":{\"831\":1}}],[\"互补的\",{\"1\":{\"605\":1}}],[\"尽量少的在博客里贴代码\",{\"1\":{\"1044\":1}}],[\"尽量发送小于\",{\"1\":{\"980\":1}}],[\"尽量不用\",{\"1\":{\"936\":1}}],[\"尽量不给每一个字段去设置单独的key\",{\"1\":{\"829\":1}}],[\"尽量避免死锁\",{\"1\":{\"831\":1}}],[\"尽管这个中断可能在开始时就是关闭的\",{\"1\":{\"1517\":1}}],[\"尽管这可能不是一个问题\",{\"1\":{\"559\":1}}],[\"尽管卷积过程中图片大小减少\",{\"1\":{\"1153\":1}}],[\"尽管说\",{\"1\":{\"602\":1}}],[\"尽管如此\",{\"1\":{\"559\":1}}],[\"事先建立一个缓冲区\",{\"1\":{\"1338\":1}}],[\"事件的通知者\",{\"1\":{\"1578\":1}}],[\"事件的底层处理框架\",{\"1\":{\"961\":1}}],[\"事件早于广播的下一个事件\",{\"1\":{\"1545\":1}}],[\"事件\",{\"1\":{\"1545\":1}}],[\"事件回调函数原型为\",{\"1\":{\"962\":1}}],[\"事件驱动\",{\"1\":{\"958\":1}}],[\"事件修饰符\",{\"1\":{\"938\":1}}],[\"事务\",{\"1\":{\"878\":1}}],[\"事务相关的命令\",{\"1\":{\"828\":1}}],[\"事务中的所有命令要么全部被执行\",{\"1\":{\"828\":1}}],[\"事务中的所有命令都会序列化\",{\"1\":{\"828\":1}}],[\"事务是一个原子操作\",{\"1\":{\"828\":1}}],[\"事务是一个单独的隔离操作\",{\"1\":{\"828\":1}}],[\"事务在执行的过程中不会被其他客户端发送过来的命令打断\",{\"1\":{\"828\":1}}],[\"事务操作\",{\"1\":{\"828\":1}}],[\"事实上\",{\"1\":{\"557\":1,\"1356\":1}}],[\"排行榜\",{\"1\":{\"828\":1}}],[\"排序时\",{\"1\":{\"341\":1}}],[\"排序\",{\"1\":{\"304\":1}}],[\"队列为空时\",{\"1\":{\"1316\":1}}],[\"队列可以使用\",{\"1\":{\"828\":1}}],[\"队列中的指令可以直接\",{\"1\":{\"550\":1}}],[\"队列中了\",{\"1\":{\"550\":1}}],[\"队列中会存放投机指令\",{\"1\":{\"550\":1}}],[\"达到减少多径效应影响的目的\",{\"1\":{\"1025\":1}}],[\"达到了染色标记的目的\",{\"1\":{\"1388\":1}}],[\"达到了视觉三维定位的目的\",{\"1\":{\"1012\":1}}],[\"达到了我们上文提到的\",{\"1\":{\"558\":1}}],[\"达到了我们剪枝的目的\",{\"1\":{\"11\":1}}],[\"达到最大的内存限制的时候\",{\"1\":{\"827\":1}}],[\"丰富的数据结构给了它很多的应用\",{\"1\":{\"825\":1}}],[\"缓冲区分配器\",{\"1\":{\"1338\":1}}],[\"缓冲区中要是有没发完的数据\",{\"1\":{\"956\":1}}],[\"缓冲区满的时候\",{\"1\":{\"956\":1}}],[\"缓冲区能写数据\",{\"1\":{\"956\":1}}],[\"缓冲池值缓存索引文件\",{\"1\":{\"815\":1}}],[\"缓存表中查询是否有目标\",{\"1\":{\"994\":1}}],[\"缓存表\",{\"1\":{\"994\":1}}],[\"缓存在\",{\"1\":{\"766\":1}}],[\"缓存\",{\"0\":{\"766\":1}}],[\"缓存已满的时候新加入的数据节点插入链表头部\",{\"1\":{\"460\":1}}],[\"缓存未命中\",{\"1\":{\"212\":1}}],[\"缓存未命中的处理会导致流水线\",{\"1\":{\"212\":1}}],[\"缓存处理起来\",{\"1\":{\"212\":1}}],[\"缓存中的数据肯定是无效的\",{\"1\":{\"197\":1}}],[\"树中找到对应的\",{\"1\":{\"1315\":1}}],[\"树\",{\"1\":{\"812\":2}}],[\"邻接表存储一个\",{\"1\":{\"808\":1}}],[\"邻接表的两个无向边可以确定一个有向边\",{\"1\":{\"89\":1}}],[\"插入链表中\",{\"1\":{\"1341\":1}}],[\"插入\",{\"1\":{\"1341\":1}}],[\"插入命令\",{\"1\":{\"1316\":1}}],[\"插入和删除操作\",{\"1\":{\"801\":1}}],[\"插件\",{\"1\":{\"646\":1,\"1636\":1}}],[\"机场车站\",{\"1\":{\"1014\":1}}],[\"机器\",{\"1\":{\"789\":1}}],[\"机制是用来保证\",{\"1\":{\"1584\":1}}],[\"机制中\",{\"1\":{\"1584\":1}}],[\"机制↩︎\",{\"1\":{\"1558\":1}}],[\"机制的运行原理\",{\"1\":{\"1545\":1}}],[\"机制的开\",{\"1\":{\"1532\":1}}],[\"机制的实现\",{\"1\":{\"1531\":1}}],[\"机制以及代码实现\",{\"1\":{\"1513\":1}}],[\"机制\",{\"1\":{\"206\":2,\"542\":1,\"543\":1,\"1383\":1,\"1560\":1,\"1605\":2}}],[\"尝试关闭本\",{\"1\":{\"1545\":1}}],[\"尝试清除缓存重新\",{\"1\":{\"1114\":1}}],[\"尝试了很多安装方法\",{\"1\":{\"770\":1}}],[\"尝试使用\",{\"1\":{\"445\":1}}],[\"停止针对本\",{\"1\":{\"1542\":1}}],[\"停止\",{\"1\":{\"1527\":1}}],[\"停止迭代\",{\"1\":{\"396\":1}}],[\"停留多久\",{\"1\":{\"763\":1}}],[\"允许阻塞\",{\"1\":{\"1562\":1}}],[\"允许请求失败的次数\",{\"1\":{\"763\":1}}],[\"允许多个进程共享一个主存\",{\"1\":{\"253\":1}}],[\"权重越大被访问的几率越大\",{\"1\":{\"763\":1}}],[\"权重\",{\"1\":{\"763\":2}}],[\"别人向\",{\"1\":{\"1253\":1}}],[\"别人信任了我\",{\"1\":{\"87\":1}}],[\"别名\",{\"0\":{\"1251\":1}}],[\"别名的方式指定\",{\"1\":{\"761\":1}}],[\"别名指定\",{\"1\":{\"761\":1}}],[\"拷贝出来或者拷贝出去\",{\"1\":{\"743\":1}}],[\"拷贝到\",{\"1\":{\"658\":1}}],[\"头中\",{\"1\":{\"981\":1}}],[\"头\",{\"1\":{\"980\":1}}],[\"头的\",{\"1\":{\"980\":1}}],[\"头和\",{\"1\":{\"980\":1}}],[\"头部加\",{\"1\":{\"974\":1}}],[\"头部和\",{\"1\":{\"974\":1}}],[\"头文件只是用作一个申明的作用\",{\"1\":{\"1449\":1}}],[\"头文件\",{\"1\":{\"743\":1}}],[\"头删\",{\"1\":{\"468\":1}}],[\"四肢\",{\"1\":{\"1131\":1}}],[\"四种算法分别为\",{\"1\":{\"987\":1}}],[\"四层模型\",{\"0\":{\"977\":1}}],[\"四位数字代表特殊权限位\",{\"1\":{\"741\":1}}],[\"四舍五入\",{\"1\":{\"28\":1}}],[\"读写锁是一种排他锁\",{\"1\":{\"1583\":1}}],[\"读写操作\",{\"1\":{\"1333\":1}}],[\"读写回调函数原型为\",{\"1\":{\"962\":1}}],[\"读之妙哉\",{\"1\":{\"1060\":1}}],[\"读\",{\"1\":{\"741\":1,\"962\":1}}],[\"读取应答消息的异常情况\",{\"1\":{\"1329\":1}}],[\"读取返回数据\",{\"1\":{\"1316\":1}}],[\"读取命名管道\",{\"1\":{\"741\":1}}],[\"读取文件指针\",{\"1\":{\"741\":1}}],[\"读取并格式化llvm\",{\"1\":{\"693\":1}}],[\"读取\",{\"1\":{\"527\":1}}],[\"读取时间\",{\"1\":{\"207\":2}}],[\"套接字地址结构从内核到进程方向的传递\",{\"1\":{\"950\":1}}],[\"套接字结构体为\",{\"1\":{\"949\":1}}],[\"套接字\",{\"1\":{\"740\":1}}],[\"套用公式的要点在于\",{\"1\":{\"118\":1}}],[\"套用\",{\"1\":{\"88\":1}}],[\"套用回溯模板可以很轻松求解\",{\"1\":{\"12\":1}}],[\"套用上述的公式\",{\"1\":{\"10\":1}}],[\"消除误差后的相位拼接结果\",{\"1\":{\"1012\":1}}],[\"消除算法从数学上定义了相位和\",{\"1\":{\"1024\":1}}],[\"消除算法速度更快\",{\"1\":{\"1012\":1}}],[\"消除算法\",{\"1\":{\"1012\":1,\"1024\":1}}],[\"消息报头\",{\"1\":{\"999\":1}}],[\"消息循环\",{\"1\":{\"961\":1}}],[\"消息的方式一般为\",{\"1\":{\"742\":1}}],[\"消息\",{\"0\":{\"742\":1}}],[\"消息队列\",{\"1\":{\"740\":1}}],[\"消耗大量服务器资源\",{\"1\":{\"988\":1}}],[\"消耗很少\",{\"1\":{\"280\":1}}],[\"消耗cpu资源\",{\"1\":{\"280\":1}}],[\"管道\",{\"1\":{\"740\":1}}],[\"管理底层硬件\",{\"1\":{\"1621\":1}}],[\"管理所有已分配的\",{\"1\":{\"1340\":1}}],[\"管理所有可分配的\",{\"1\":{\"1340\":1}}],[\"管理与部署服务\",{\"1\":{\"643\":2}}],[\"管理与部署\",{\"1\":{\"640\":1}}],[\"管理工具\",{\"1\":{\"616\":1}}],[\"管理\",{\"1\":{\"605\":1,\"1338\":1}}],[\"信道响应具有更细粒度的频率分辨率和时域分辨率\",{\"1\":{\"1020\":1}}],[\"信道状态信息\",{\"1\":{\"1012\":1}}],[\"信号波长\",{\"1\":{\"1025\":1}}],[\"信号在收集过程中可能出现的振幅偏差包括以下几点\",{\"1\":{\"1024\":1}}],[\"信号在传播过程中会随着传输距离的增加而变宽\",{\"1\":{\"1019\":1}}],[\"信号传播最短的路径叫做直接路径或主径\",{\"1\":{\"1019\":1}}],[\"信号的处理过程\",{\"1\":{\"1020\":1}}],[\"信号的接收功率\",{\"1\":{\"1020\":1}}],[\"信号的振幅和相位产生偏差\",{\"1\":{\"1012\":1}}],[\"信号的同时得到\",{\"1\":{\"1012\":1}}],[\"信号包含丰富的子载波信息\",{\"1\":{\"1012\":1}}],[\"信号量\",{\"1\":{\"740\":1}}],[\"信号\",{\"1\":{\"740\":1,\"985\":1}}],[\"信息确定主径\",{\"1\":{\"1012\":1}}],[\"信息并提出精确的\",{\"1\":{\"1012\":1}}],[\"信息中也伴随着很多误差和干扰信息\",{\"1\":{\"1012\":1}}],[\"信息的语法已经它们的关联\",{\"1\":{\"977\":1}}],[\"信息\",{\"1\":{\"662\":1,\"1416\":1}}],[\"信息以及最关键的\",{\"1\":{\"460\":1}}],[\"答\",{\"1\":{\"738\":1,\"980\":1}}],[\"答案是页表\",{\"1\":{\"252\":1}}],[\"答案可以按\",{\"1\":{\"8\":1}}],[\"父子任务\",{\"1\":{\"1632\":1}}],[\"父子组件\",{\"1\":{\"930\":1}}],[\"父进程进行\",{\"1\":{\"1374\":1}}],[\"父进程应当回收子进程\",{\"1\":{\"738\":1}}],[\"父进程可以有很多个子进程\",{\"1\":{\"738\":1}}],[\"父类的信息\",{\"1\":{\"674\":1}}],[\"父类的\",{\"1\":{\"425\":1}}],[\"父类名称\",{\"1\":{\"424\":1}}],[\"号线程最终变成空闲线程\",{\"1\":{\"1556\":1}}],[\"号线程\",{\"1\":{\"1556\":2}}],[\"号端口\",{\"1\":{\"1453\":1}}],[\"号\",{\"1\":{\"738\":1}}],[\"号房间的\",{\"1\":{\"84\":1}}],[\"号房间外的其余所有房间都被锁住\",{\"1\":{\"75\":1}}],[\"号房间\",{\"1\":{\"75\":1,\"84\":1}}],[\"称为\",{\"1\":{\"1529\":1}}],[\"称为指数退避\",{\"1\":{\"985\":1}}],[\"称为父进程\",{\"1\":{\"738\":1}}],[\"称它的第二个参数为\",{\"1\":{\"952\":1}}],[\"称作\",{\"1\":{\"203\":1}}],[\"负责创建内核线程\",{\"1\":{\"1556\":1}}],[\"负责抽象出\",{\"1\":{\"1532\":1}}],[\"负责具体\",{\"1\":{\"1531\":1}}],[\"负责向\",{\"1\":{\"1531\":1}}],[\"负责整体框架\",{\"1\":{\"1531\":1}}],[\"负责地址转换\",{\"1\":{\"252\":1}}],[\"负载均衡\",{\"0\":{\"762\":1}}],[\"负数\",{\"1\":{\"738\":1}}],[\"隔离能保障资源的回收\",{\"1\":{\"736\":1}}],[\"隔离是并发以后要解决的重要问题\",{\"1\":{\"736\":1}}],[\"联系\",{\"1\":{\"736\":1}}],[\"联系的称作\",{\"1\":{\"559\":1}}],[\"桥接模式\",{\"1\":{\"730\":1}}],[\"走进\",{\"1\":{\"1456\":1}}],[\"走\",{\"1\":{\"728\":1}}],[\"宿主机的网络如果断开了\",{\"1\":{\"728\":1}}],[\"架构是\",{\"1\":{\"1507\":1}}],[\"架构\",{\"0\":{\"725\":1},\"1\":{\"1352\":1,\"1507\":1}}],[\"架构中的一种用于从内存中读取带符号整数的指令\",{\"1\":{\"529\":1}}],[\"架构中\",{\"1\":{\"529\":1,\"534\":1}}],[\"共产生4个子区域\",{\"1\":{\"1153\":1}}],[\"共分了3000个网格以方便测试\",{\"1\":{\"1012\":1}}],[\"共享数据或者协同工作\",{\"1\":{\"1621\":1}}],[\"共享目标文件shared\",{\"1\":{\"1459\":1}}],[\"共享问题\",{\"1\":{\"764\":1}}],[\"共享内存\",{\"0\":{\"743\":1},\"1\":{\"740\":1}}],[\"共计\",{\"1\":{\"724\":1}}],[\"共有\",{\"1\":{\"167\":1}}],[\"若\",{\"1\":{\"1021\":1,\"1333\":1}}],[\"若取\",{\"1\":{\"1021\":1}}],[\"若现在有一个\",{\"1\":{\"902\":1}}],[\"若该模块在使用\",{\"1\":{\"719\":1}}],[\"若不存在\",{\"1\":{\"168\":1}}],[\"强语义与高分辨率\",{\"1\":{\"1022\":1}}],[\"强光环境\",{\"1\":{\"1012\":1}}],[\"强势删除\",{\"1\":{\"719\":1}}],[\"强制推送使用\",{\"1\":{\"1246\":1}}],[\"强制推行\",{\"1\":{\"605\":1}}],[\"强制实行\",{\"1\":{\"605\":1}}],[\"显示地直接使用fetch和merge命令比使用git\",{\"1\":{\"1253\":1}}],[\"显示出git存储的每个远程仓库对应的\",{\"1\":{\"1250\":1}}],[\"显示出当前已加载但不可执行的模块名称\",{\"1\":{\"717\":1}}],[\"显示全部请求过程\",{\"1\":{\"998\":1}}],[\"显然不是我们想要的\",{\"1\":{\"13\":1}}],[\"双重否定表示肯定\",{\"1\":{\"1521\":1}}],[\"双向绑定\",{\"1\":{\"925\":1}}],[\"双核为4\",{\"1\":{\"714\":1}}],[\"双指针\",{\"0\":{\"496\":1,\"497\":1}}],[\"双指针的适用性\",{\"1\":{\"169\":1}}],[\"双指针技术可以解决很多问题\",{\"1\":{\"162\":1}}],[\"准备编译\",{\"0\":{\"713\":1}}],[\"准确率高但是不增加复杂性和时延\",{\"1\":{\"558\":1}}],[\"省略这部分代码\",{\"1\":{\"1300\":1}}],[\"省略\",{\"1\":{\"702\":1}}],[\"端线程启动后就调用\",{\"1\":{\"1317\":1}}],[\"端是\",{\"1\":{\"703\":1}}],[\"端\",{\"1\":{\"702\":1}}],[\"端口来进行传输\",{\"1\":{\"992\":1}}],[\"端口用于传输数据\",{\"1\":{\"992\":1}}],[\"端口用于连接\",{\"1\":{\"992\":1}}],[\"端口号\",{\"1\":{\"992\":1}}],[\"端口就可以发现不同的输出结果\",{\"1\":{\"760\":1}}],[\"端口映射出去至\",{\"1\":{\"621\":1}}],[\"端口即可\",{\"1\":{\"612\":1}}],[\"端口\",{\"1\":{\"610\":1,\"611\":1,\"621\":1,\"992\":1,\"1265\":1,\"1647\":1}}],[\"端口桥接到宿主机的\",{\"1\":{\"610\":1}}],[\"端口到本地\",{\"1\":{\"446\":1}}],[\"充当一个\",{\"1\":{\"702\":1}}],[\"调节\",{\"1\":{\"1601\":1}}],[\"调度器发现没有任务在执行的时候\",{\"1\":{\"1531\":1}}],[\"调度器会自动唤醒cpu并恢复正常的进程调度\",{\"1\":{\"1585\":1}}],[\"调度器会在cpu空闲时\",{\"1\":{\"1528\":1}}],[\"调度器会直接检查是否有可运行的进程\",{\"1\":{\"1528\":1}}],[\"调度器通常会挂起cpu或让cpu执行一些简单的指令\",{\"1\":{\"1528\":1}}],[\"调度器的运作情况和统计信息\",{\"1\":{\"1523\":1}}],[\"调度和分派的基本单位\",{\"1\":{\"736\":1}}],[\"调试信息\",{\"1\":{\"1460\":1}}],[\"调整需要遍历所有节点\",{\"1\":{\"1171\":1}}],[\"调起后的过程如下分析\",{\"1\":{\"701\":1}}],[\"调用地方\",{\"1\":{\"1608\":1}}],[\"调用该函数将当前\",{\"1\":{\"1523\":1}}],[\"调用流程\",{\"1\":{\"1516\":1}}],[\"调用驱动中的\",{\"1\":{\"1333\":1}}],[\"调用了\",{\"1\":{\"1320\":1,\"1376\":1}}],[\"调用到了\",{\"1\":{\"1307\":1}}],[\"调用到\",{\"1\":{\"1307\":1}}],[\"调用binder\",{\"1\":{\"1301\":1}}],[\"调用次数越多\",{\"1\":{\"956\":1}}],[\"调用变多\",{\"1\":{\"956\":1}}],[\"调用还是会将这些文件描述符通知进程\",{\"1\":{\"954\":1}}],[\"调用这个函数就可以进行\",{\"1\":{\"706\":1,\"1402\":1}}],[\"调用的\",{\"1\":{\"697\":1}}],[\"调用过程\",{\"0\":{\"697\":1}}],[\"调用一个具有\",{\"1\":{\"419\":1}}],[\"调用\",{\"0\":{\"442\":1,\"696\":1,\"844\":1},\"1\":{\"419\":1,\"696\":1,\"702\":1,\"739\":1,\"844\":1,\"955\":1,\"1212\":1,\"1327\":1,\"1328\":1,\"1333\":1,\"1396\":1,\"1545\":1,\"1573\":1,\"1607\":2,\"1610\":1}}],[\"调用协程函数所返回的对象\",{\"1\":{\"414\":1}}],[\"调用生成器时\",{\"1\":{\"294\":1}}],[\"启动所有从处理器\",{\"1\":{\"1557\":1}}],[\"启动由硬件完成\",{\"1\":{\"1477\":1}}],[\"启动创建\",{\"1\":{\"1293\":1}}],[\"启动抖音\",{\"1\":{\"1276\":1}}],[\"启动\",{\"0\":{\"1276\":1}}],[\"启动ss客户端和kcptun客户端配置管理工具\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"启动ss服务\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"启动工具下载地址\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"启动程序\",{\"1\":{\"802\":1}}],[\"启动过程\",{\"0\":{\"700\":1,\"701\":1}}],[\"启动使用\",{\"1\":{\"444\":1}}],[\"世界之间的关系\",{\"1\":{\"696\":1,\"1396\":1}}],[\"世界和\",{\"1\":{\"696\":1,\"1396\":1}}],[\"世界\",{\"1\":{\"696\":1,\"1396\":1}}],[\"仔细思考一下\",{\"1\":{\"695\":1,\"1395\":1}}],[\"仔细看那段英文原文的话我们可以发现\",{\"1\":{\"552\":1}}],[\"打破页表的限制\",{\"1\":{\"1355\":1}}],[\"打工人\",{\"1\":{\"1028\":1}}],[\"打印出来\",{\"1\":{\"1487\":1}}],[\"打印参数类型\",{\"1\":{\"693\":1}}],[\"打印函数名\",{\"1\":{\"693\":1}}],[\"打印函数返回类型\",{\"1\":{\"693\":1}}],[\"打开\",{\"1\":{\"1307\":1}}],[\"打开wifi设置界面\",{\"1\":{\"1272\":1}}],[\"打开wifi\",{\"1\":{\"1272\":1}}],[\"打开蓝牙\",{\"1\":{\"1271\":1}}],[\"打开其中的\",{\"1\":{\"1177\":1}}],[\"打开命名管道\",{\"1\":{\"741\":1}}],[\"打开大文件的工具\",{\"1\":{\"345\":1}}],[\"打开文件是为了将结果及时写入到文件中\",{\"1\":{\"289\":1}}],[\"打开转盘锁\",{\"0\":{\"88\":1},\"1\":{\"88\":1}}],[\"诊断实例\",{\"1\":{\"693\":1}}],[\"汇编形式的\",{\"0\":{\"692\":1}}],[\"汇编文件形式\",{\"1\":{\"690\":1}}],[\"汇编指令的一个通用的格式说明\",{\"1\":{\"514\":1}}],[\"门槛挺高\",{\"1\":{\"690\":1}}],[\"门课程\",{\"1\":{\"86\":2}}],[\"门课需要选\",{\"1\":{\"86\":1}}],[\"让某个子系统在发生某个事件的时候通知其他的子系统\",{\"1\":{\"1560\":1}}],[\"让它在每次进入和退出函数的时候分别调用这个函数\",{\"1\":{\"1553\":1}}],[\"让它生成现成的后端能接受的ir\",{\"1\":{\"690\":1}}],[\"让我们拭目以待\",{\"1\":{\"1307\":1}}],[\"让我们按照这个邻接表对图进行深拷贝\",{\"1\":{\"89\":1}}],[\"让服务器应用程序轮询处理已发生的网络事件\",{\"1\":{\"954\":1}}],[\"让操作系统内核去查询这些套接字上是否有事件发生\",{\"1\":{\"954\":1}}],[\"适用性更强\",{\"1\":{\"1012\":1}}],[\"适用范围广\",{\"1\":{\"1012\":1}}],[\"适用范围比较小\",{\"1\":{\"812\":1}}],[\"适用于嵌入式系统单\",{\"1\":{\"1586\":1}}],[\"适用于终端文件\",{\"1\":{\"956\":1}}],[\"适用于后序遍历表达树的寄存器分配思路\",{\"1\":{\"689\":1}}],[\"适用表中最长历史\",{\"1\":{\"586\":1}}],[\"里读取结果\",{\"1\":{\"1328\":1}}],[\"里写入参数\",{\"1\":{\"1328\":2}}],[\"里\",{\"1\":{\"689\":1}}],[\"里面的\",{\"1\":{\"1605\":1}}],[\"里面的函数\",{\"1\":{\"1365\":1}}],[\"里面的值是什么时候写进去的呢\",{\"1\":{\"602\":1}}],[\"里面调用到\",{\"1\":{\"1314\":1}}],[\"里面进行研究\",{\"1\":{\"100\":1}}],[\"里面才算是合法的变化\",{\"1\":{\"92\":1}}],[\"里面\",{\"1\":{\"92\":1,\"196\":1}}],[\"早期\",{\"1\":{\"688\":1}}],[\"交互一次\",{\"1\":{\"1333\":1}}],[\"交叉熵刚开始的意义是刻画了两个概论分布之间的距离\",{\"1\":{\"1212\":1}}],[\"交叉监督模型\",{\"0\":{\"1136\":1}}],[\"交并比\",{\"1\":{\"1155\":1}}],[\"交谈等行为\",{\"1\":{\"1132\":1}}],[\"交换\",{\"1\":{\"982\":1}}],[\"交换的最小单位\",{\"1\":{\"195\":1}}],[\"交给框架来管理\",{\"1\":{\"871\":1}}],[\"交由同等优化程度的\",{\"1\":{\"687\":1}}],[\"差别不大\",{\"1\":{\"687\":1}}],[\"部分也有介绍\",{\"1\":{\"1570\":1}}],[\"部分\",{\"1\":{\"1570\":1}}],[\"部分组成\",{\"1\":{\"725\":1}}],[\"部分的\",{\"1\":{\"692\":1}}],[\"部分并不是大头\",{\"1\":{\"687\":1}}],[\"部署在云服务器上\",{\"1\":{\"644\":1}}],[\"杂谈\",{\"0\":{\"685\":1,\"1631\":1}}],[\"占\",{\"1\":{\"682\":1}}],[\"占用了\",{\"1\":{\"261\":1}}],[\"视觉模块实现与测试结果如表所示\",{\"1\":{\"1012\":1}}],[\"视觉定位模块最后一个网络incrownet的训练基于shanghai\",{\"1\":{\"1012\":1}}],[\"视觉定位模块的深度提取网络indepthnet的实现细节如下所示\",{\"1\":{\"1012\":1}}],[\"视觉定位模块的实现与测试分为几个部分\",{\"1\":{\"1012\":1}}],[\"视觉定位模块第二个实现与测试是对目标检测网络indetectnet的实现与测试\",{\"1\":{\"1012\":1}}],[\"视觉定位技术对光线环境较为敏感等\",{\"1\":{\"1012\":1}}],[\"视情况而定\",{\"1\":{\"674\":1}}],[\"视为相同列表时\",{\"1\":{\"10\":1}}],[\"英文名称\",{\"1\":{\"674\":1}}],[\"英语\",{\"1\":{\"5\":1,\"70\":1}}],[\"压缩和解压缩命令和工具\",{\"1\":{\"1454\":1}}],[\"压缩和解压缩组合操作\",{\"1\":{\"1454\":1}}],[\"压缩一个目录并将其打包为\",{\"1\":{\"1454\":1}}],[\"压缩的\",{\"1\":{\"1454\":2}}],[\"压缩文件\",{\"1\":{\"1454\":4}}],[\"压缩\",{\"0\":{\"1454\":1}}],[\"压缩解压缩等\",{\"1\":{\"977\":1}}],[\"压缩又是怎么使能的\",{\"1\":{\"672\":1}}],[\"压缩等处理\",{\"1\":{\"669\":1}}],[\"规划中\",{\"1\":{\"1064\":2}}],[\"规范的就可以\",{\"1\":{\"667\":1}}],[\"规定右边界\",{\"1\":{\"36\":1}}],[\"各位老师\",{\"1\":{\"1012\":1}}],[\"各个子区段之间的顺序是确定的\",{\"1\":{\"1551\":1}}],[\"各个区段的示意图如下\",{\"1\":{\"1553\":1}}],[\"各个区段的定义方法有所改变\",{\"1\":{\"1551\":1}}],[\"各个区段定义的方法分别是\",{\"1\":{\"1551\":1}}],[\"各个业务模块可以公用的模块\",{\"1\":{\"878\":1}}],[\"各个字段的解析\",{\"1\":{\"190\":1}}],[\"各种人为的大小限制都跟不上时代了\",{\"1\":{\"688\":1}}],[\"各部分的数量与大小\",{\"1\":{\"665\":1}}],[\"名词解释\",{\"1\":{\"1583\":1}}],[\"名称是否有对应的存在\",{\"1\":{\"1607\":1}}],[\"名称是\",{\"1\":{\"1293\":1,\"1295\":1}}],[\"名称\",{\"1\":{\"664\":1,\"844\":1,\"1602\":1}}],[\"名为\",{\"1\":{\"657\":1}}],[\"始终使用\",{\"1\":{\"662\":1}}],[\"产品\",{\"1\":{\"1031\":1}}],[\"产生新的目标文件\",{\"1\":{\"1459\":1}}],[\"产生\",{\"1\":{\"1418\":1}}],[\"产生region\",{\"1\":{\"1151\":1}}],[\"产生相位偏移\",{\"1\":{\"1024\":1}}],[\"产生一个微小的时钟偏移\",{\"1\":{\"1024\":1}}],[\"产生信道频率响应\",{\"1\":{\"1020\":1}}],[\"产生了yolo9000算法\",{\"1\":{\"1151\":1}}],[\"产生了一系列的相关理论\",{\"1\":{\"1012\":1}}],[\"产生了巨大的开销\",{\"1\":{\"954\":1}}],[\"产生汇编形式的\",{\"1\":{\"692\":1}}],[\"产生的值之间的亲和性来预测\",{\"1\":{\"599\":1}}],[\"产生的警告\",{\"1\":{\"383\":1}}],[\"产物\",{\"0\":{\"658\":1}}],[\"过后\",{\"1\":{\"1388\":1}}],[\"过大可能导致迭代速度过慢\",{\"1\":{\"1185\":1}}],[\"过小可能导致不收敛\",{\"1\":{\"1185\":1}}],[\"过完所有的训练数据需要的迭代次数\",{\"1\":{\"1185\":1}}],[\"过莫避之\",{\"1\":{\"1060\":1}}],[\"过滤掉那些以llvm\",{\"1\":{\"693\":1}}],[\"过程中触发\",{\"1\":{\"1374\":1}}],[\"过程中\",{\"1\":{\"1330\":1,\"1380\":1}}],[\"过程如下\",{\"1\":{\"703\":1}}],[\"过程\",{\"0\":{\"656\":1},\"1\":{\"1374\":1}}],[\"过的节点\",{\"1\":{\"89\":1}}],[\"叫做\",{\"1\":{\"655\":1}}],[\"面试\",{\"0\":{\"1632\":1}}],[\"面试题17\",{\"0\":{\"168\":1}}],[\"面试题\",{\"0\":{\"63\":1},\"1\":{\"46\":1,\"63\":1}}],[\"面临的较为严重的问题\",{\"1\":{\"654\":1}}],[\"广播设备到期时间\",{\"1\":{\"1545\":1}}],[\"广播设备是由高分辨率定时器模拟的则返回\",{\"1\":{\"1545\":1}}],[\"广播设备还在周期触发模式\",{\"1\":{\"1545\":1}}],[\"广播\",{\"1\":{\"1544\":1,\"1545\":1}}],[\"广播服务\",{\"1\":{\"1542\":1}}],[\"广播层属于本\",{\"1\":{\"1542\":1}}],[\"广播空闲状态\",{\"1\":{\"1521\":1}}],[\"广泛\",{\"1\":{\"652\":1}}],[\"广度优先搜索总结\",{\"1\":{\"1066\":1}}],[\"广度优先搜索也广泛应用在图论问题中\",{\"1\":{\"71\":1}}],[\"广度优先搜索算法\",{\"0\":{\"71\":1},\"1\":{\"69\":1}}],[\"敏感数据发现和脱敏场景\",{\"1\":{\"648\":1}}],[\"敏感数据保护\",{\"1\":{\"648\":1}}],[\"防火墙\",{\"1\":{\"988\":1}}],[\"防攻击体系\",{\"0\":{\"647\":1}}],[\"防止出现段异常\",{\"1\":{\"962\":1}}],[\"防止逐层代理\",{\"1\":{\"761\":1}}],[\"防止内部碎片化\",{\"1\":{\"258\":1}}],[\"防止一个进程读另一个进程的数据\",{\"1\":{\"253\":1}}],[\"防止在同一个\",{\"1\":{\"236\":1}}],[\"防止漏掉元素\",{\"1\":{\"13\":1}}],[\"堡垒机主要为运维操作\",{\"1\":{\"646\":1}}],[\"系统下温度控制相关的模块\",{\"1\":{\"1589\":1}}],[\"系统就不可能真正进入\",{\"1\":{\"1584\":1}}],[\"系统启动时拔核等操作是在更底层完成的\",{\"1\":{\"1557\":1}}],[\"系统\",{\"1\":{\"1557\":1}}],[\"系统以前执行的早期初始化\",{\"1\":{\"1557\":1}}],[\"系统中会有多个\",{\"1\":{\"1590\":1}}],[\"系统中并发读取共享数据的性能\",{\"1\":{\"1584\":1}}],[\"系统中\",{\"1\":{\"1533\":1,\"1534\":1}}],[\"系统寄存器的初始化和\",{\"1\":{\"1498\":1}}],[\"系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件\",{\"1\":{\"1459\":1}}],[\"系统调用的时间在轻量级通信中的占比还是很大的\",{\"1\":{\"1356\":1}}],[\"系统调用打开\",{\"1\":{\"1307\":1}}],[\"系统安装完成后\",{\"1\":{\"1145\":1}}],[\"系统采用的无线信号的波长大约在5cm左右\",{\"1\":{\"1134\":1}}],[\"系统使用无线信号在环境中的反射作为唯一输入\",{\"1\":{\"1132\":1}}],[\"系统的最终实现方式为只需要在无线信号的输入下感知人类的活动\",{\"1\":{\"1132\":1}}],[\"系统的最终结果实现了一个基于无线信号的活动感知系统\",{\"1\":{\"1131\":1}}],[\"系统的这种强访问局部性\",{\"1\":{\"192\":1}}],[\"系统在收到一个\",{\"1\":{\"988\":1}}],[\"系统在运行时为每个进程分配不同的内存空间\",{\"1\":{\"736\":1}}],[\"系统开销越大\",{\"1\":{\"956\":1}}],[\"系统不会为线程分配内存\",{\"1\":{\"736\":1}}],[\"系统等\",{\"1\":{\"646\":1}}],[\"检索\",{\"1\":{\"1499\":1}}],[\"检测到某个事件或者产生某个事件的时候\",{\"1\":{\"1578\":1}}],[\"检测到数据包的头部信息时\",{\"1\":{\"1020\":1}}],[\"检测半打开连接\",{\"1\":{\"983\":1}}],[\"检测安装环境\",{\"1\":{\"959\":1}}],[\"检测资产安全\",{\"1\":{\"646\":1}}],[\"检测主流的漏洞事件\",{\"1\":{\"646\":1}}],[\"检测高效\",{\"1\":{\"646\":1}}],[\"检查当前cpu是否已经成功进入空闲状态\",{\"1\":{\"1585\":1}}],[\"检查当前操作系统进程是否可以访问目标内存地址\",{\"1\":{\"252\":1}}],[\"检查远程仓库\",{\"1\":{\"1250\":1}}],[\"检查每个节点为根的子树是否不再是平衡二叉树\",{\"1\":{\"1169\":1}}],[\"检查不长发生的条件经常会编译到\",{\"1\":{\"600\":1}}],[\"检查在上一个周期中读取的寄存器\",{\"1\":{\"245\":1}}],[\"检查越界情况\",{\"1\":{\"20\":1,\"21\":1}}],[\"漏洞扫描服务\",{\"1\":{\"646\":1}}],[\"长期实战积累\",{\"1\":{\"646\":1}}],[\"长度进行限制\",{\"1\":{\"998\":1}}],[\"长度是\",{\"1\":{\"972\":2}}],[\"长度\",{\"0\":{\"475\":1}}],[\"长度较长的链表指针向后移动\",{\"1\":{\"459\":1}}],[\"长度为\",{\"1\":{\"285\":1}}],[\"长度最小的子数组\",{\"0\":{\"160\":1},\"1\":{\"144\":1}}],[\"急速可靠访问\",{\"1\":{\"646\":1}}],[\"海量攻击防护\",{\"1\":{\"646\":1}}],[\"合理\",{\"1\":{\"1388\":1}}],[\"合理理解题目非常重要\",{\"1\":{\"479\":1}}],[\"合并冲突处理\",{\"1\":{\"1252\":1}}],[\"合并分支\",{\"1\":{\"1252\":1}}],[\"合并到一个名为\",{\"1\":{\"670\":1}}],[\"合规遵从三类\",{\"1\":{\"646\":1}}],[\"冰山安全体系\",{\"0\":{\"645\":1}}],[\"企业项目管理\",{\"1\":{\"643\":1}}],[\"企业的数据备份\",{\"1\":{\"643\":1}}],[\"媒体加速\",{\"1\":{\"643\":1}}],[\"汽车制造等\",{\"1\":{\"643\":1}}],[\"高效\",{\"1\":{\"1567\":1}}],[\"高速缓存\",{\"1\":{\"1522\":1}}],[\"高新二路\",{\"1\":{\"1094\":1}}],[\"高防服务\",{\"1\":{\"646\":1}}],[\"高弹性\",{\"1\":{\"644\":1}}],[\"高安全\",{\"1\":{\"644\":1}}],[\"高可靠\",{\"1\":{\"644\":1}}],[\"高性能关系数据库\",{\"1\":{\"643\":1}}],[\"高性能数据库的场景\",{\"1\":{\"643\":1}}],[\"高覆盖率反而是没有必要的\",{\"1\":{\"543\":1}}],[\"网格\",{\"1\":{\"1155\":1}}],[\"网段\",{\"1\":{\"973\":1}}],[\"网站和企业\",{\"1\":{\"643\":1}}],[\"网络事件也有一个原子通知链\",{\"1\":{\"1577\":1}}],[\"网络配置文件\",{\"1\":{\"1159\":1}}],[\"网络结构参考goolenet模型\",{\"1\":{\"1156\":1}}],[\"网络拥塞的情况\",{\"1\":{\"986\":1}}],[\"网络层\",{\"0\":{\"993\":1},\"1\":{\"977\":2,\"979\":1,\"981\":1}}],[\"网络协议的一个重大修订版本\",{\"1\":{\"965\":1,\"966\":1}}],[\"网络地址转换\",{\"1\":{\"728\":1}}],[\"网络虚拟化技术\",{\"0\":{\"726\":1}}],[\"网络通道加密\",{\"1\":{\"648\":1}}],[\"网络服务器一般都用这个方法\",{\"1\":{\"739\":1}}],[\"网络服务\",{\"1\":{\"643\":1}}],[\"网络直播\",{\"1\":{\"643\":1}}],[\"网络资源\",{\"1\":{\"640\":1}}],[\"网络\",{\"1\":{\"639\":1,\"643\":1,\"1012\":1}}],[\"网络空闲的时刻\",{\"0\":{\"90\":1}}],[\"裸金属服务器\",{\"1\":{\"643\":1}}],[\"物理页是内核管理物理页的基本单位\",{\"1\":{\"1318\":1}}],[\"物理页\",{\"1\":{\"1318\":1}}],[\"物理内存\",{\"1\":{\"1318\":1}}],[\"物理层\",{\"1\":{\"977\":1}}],[\"物理寻址\",{\"1\":{\"977\":1}}],[\"物理资源\",{\"1\":{\"641\":1}}],[\"物品循环放在外侧\",{\"1\":{\"118\":1}}],[\"逻辑化物理资源\",{\"1\":{\"641\":1}}],[\"华为\",{\"1\":{\"643\":1,\"644\":1}}],[\"华为云\",{\"0\":{\"642\":1},\"1\":{\"643\":1}}],[\"华为特色为软件开发云\",{\"1\":{\"641\":1}}],[\"华为公有云服务架构可分为四层\",{\"1\":{\"641\":1}}],[\"华为公有云服务架构\",{\"0\":{\"641\":1}}],[\"弹性可扩展的计算云服务器\",{\"1\":{\"644\":1}}],[\"弹性文件服务\",{\"1\":{\"643\":1}}],[\"弹性负载均衡\",{\"1\":{\"640\":1}}],[\"弹性云服务器\",{\"0\":{\"644\":1},\"1\":{\"640\":1}}],[\"安卓自动化工具\",{\"1\":{\"1287\":1}}],[\"安卓进程启动调起\",{\"1\":{\"701\":1}}],[\"安卓\",{\"1\":{\"652\":1}}],[\"安全状态\",{\"1\":{\"1483\":1}}],[\"安全度达标吗\",{\"1\":{\"1357\":1}}],[\"安全并且灵活\",{\"1\":{\"1356\":1}}],[\"安全监管\",{\"1\":{\"1131\":1}}],[\"安全协议\",{\"1\":{\"977\":1}}],[\"安全态势感知服务\",{\"1\":{\"646\":1}}],[\"安全组等\",{\"1\":{\"640\":1}}],[\"安装之前确保安装了\",{\"1\":{\"1633\":1}}],[\"安装的位置存储在环境变量\",{\"1\":{\"1424\":1}}],[\"安装一个\",{\"1\":{\"1374\":1}}],[\"安装客户端\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"安装并配置服务端\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"安装包\",{\"1\":{\"1176\":1}}],[\"安装包的命令如下\",{\"1\":{\"311\":1}}],[\"安装用于安装\",{\"1\":{\"916\":1}}],[\"安装和\",{\"0\":{\"915\":1}}],[\"安装虚拟机后会创建两张网卡\",{\"1\":{\"728\":1}}],[\"安装虚环境\",{\"1\":{\"445\":1}}],[\"安装内核\",{\"1\":{\"714\":1}}],[\"安装模块\",{\"1\":{\"714\":1}}],[\"安装必要的依赖\",{\"1\":{\"770\":1}}],[\"安装必要的软件\",{\"1\":{\"712\":2}}],[\"安装必要的库\",{\"1\":{\"273\":1}}],[\"安装完成后在\",{\"1\":{\"1177\":1}}],[\"安装完成后测试\",{\"1\":{\"771\":1}}],[\"安装完成之后\",{\"1\":{\"613\":1}}],[\"安装完成以后\",{\"1\":{\"445\":1}}],[\"安装时\",{\"1\":{\"274\":1}}],[\"安装\",{\"0\":{\"918\":1,\"1274\":1},\"1\":{\"274\":1,\"388\":1,\"444\":1,\"692\":2,\"824\":1,\"841\":1,\"842\":1,\"916\":1,\"1374\":1}}],[\"云堡垒机+iam\",{\"1\":{\"646\":1}}],[\"云上数据的全生命周期保护\",{\"1\":{\"648\":1}}],[\"云上权限监控\",{\"1\":{\"646\":1}}],[\"云上主要的安全挑战可以分为\",{\"1\":{\"646\":1}}],[\"云上安全挑战\",{\"0\":{\"646\":1}}],[\"云日志\",{\"1\":{\"643\":1}}],[\"云审计\",{\"1\":{\"643\":1}}],[\"云监控\",{\"1\":{\"643\":1}}],[\"云监控服务\",{\"1\":{\"640\":1}}],[\"云备份等\",{\"1\":{\"643\":1}}],[\"云解析等\",{\"1\":{\"643\":1}}],[\"云手机内部的发放是什么方案\",{\"1\":{\"1632\":1}}],[\"云手机磁盘包周期的计费模型怎么实现\",{\"1\":{\"1632\":1}}],[\"云手机上下电硬重启的原因\",{\"1\":{\"1632\":1}}],[\"云手机创建过程中涉及到的调度\",{\"1\":{\"1632\":1}}],[\"云手机\",{\"1\":{\"643\":1}}],[\"云硬盘\",{\"1\":{\"640\":1,\"643\":1}}],[\"云服务器的种类\",{\"0\":{\"640\":1}}],[\"云服务的类型\",{\"0\":{\"639\":1}}],[\"云计算\",{\"1\":{\"1166\":1}}],[\"云计算的部署\",{\"0\":{\"638\":1}}],[\"云计算的优点和缺点\",{\"0\":{\"637\":1}}],[\"云计算基础\",{\"0\":{\"636\":1}}],[\"私有云和混合云\",{\"1\":{\"638\":1}}],[\"公式\",{\"0\":{\"1180\":1},\"1\":{\"1182\":1}}],[\"公式的含义是\",{\"1\":{\"165\":1}}],[\"公司推出了对\",{\"1\":{\"724\":1}}],[\"公司的虚拟化技术将自己的虚拟化引擎\",{\"1\":{\"724\":1}}],[\"公有云的安全性是否相对于私有云有所降低\",{\"1\":{\"637\":1}}],[\"公有云在成本角度\",{\"1\":{\"637\":1}}],[\"研究方法\",{\"0\":{\"1018\":1}}],[\"研究\",{\"0\":{\"632\":1,\"651\":1,\"685\":1},\"1\":{\"664\":1}}],[\"起到一个\",{\"1\":{\"1325\":1}}],[\"起限制作用的是服务器的处理程序的处理能力\",{\"1\":{\"998\":1}}],[\"起的一个名字\",{\"1\":{\"623\":1}}],[\"起点就是\",{\"1\":{\"53\":1}}],[\"守护进程\",{\"0\":{\"754\":1},\"1\":{\"618\":1}}],[\"构建密文对敏感数据加密后存入云端数据库能有效防止以上两种威胁\",{\"1\":{\"1166\":1}}],[\"构建项目\",{\"1\":{\"614\":1}}],[\"构造中序遍历\",{\"1\":{\"1170\":1}}],[\"构造二叉搜索树t\",{\"1\":{\"1169\":1}}],[\"构造方法进行依赖主语的时候\",{\"1\":{\"881\":1}}],[\"构造一个排序的字典\",{\"1\":{\"406\":1}}],[\"构造物品数组\",{\"1\":{\"132\":1}}],[\"服务端对象\",{\"1\":{\"1304\":1,\"1305\":1}}],[\"服务端的线程池是由\",{\"1\":{\"1298\":1}}],[\"服务端通过\",{\"1\":{\"984\":1}}],[\"服务端发送自己的\",{\"1\":{\"982\":1}}],[\"服务端\",{\"1\":{\"961\":1}}],[\"服务器监听的端口不是默认的\",{\"1\":{\"1453\":1}}],[\"服务器端口\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"服务器端错误\",{\"1\":{\"999\":1}}],[\"服务器地址\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"服务器推送了数据\",{\"1\":{\"1253\":1}}],[\"服务器的负载更低\",{\"1\":{\"997\":1}}],[\"服务器的地址用如下方式获取\",{\"1\":{\"609\":1}}],[\"服务器查询域名\",{\"1\":{\"997\":1}}],[\"服务器打开\",{\"1\":{\"992\":1}}],[\"服务器\",{\"1\":{\"985\":1}}],[\"服务器进入\",{\"1\":{\"984\":1}}],[\"服务器进程每次都把\",{\"1\":{\"954\":1}}],[\"服务器维护该半连接队列\",{\"1\":{\"984\":1}}],[\"服务器会维护两种队列\",{\"1\":{\"984\":1}}],[\"服务器等硬件\",{\"1\":{\"641\":1}}],[\"服务\",{\"0\":{\"642\":1},\"1\":{\"612\":1,\"643\":2,\"648\":1,\"725\":1,\"1031\":1,\"1474\":1}}],[\"密码和加密方式\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"密码等信息\",{\"1\":{\"829\":1}}],[\"密码为\",{\"1\":{\"609\":1}}],[\"密码\",{\"1\":{\"609\":1}}],[\"密集型任务\",{\"1\":{\"280\":1}}],[\"密集型涉及到网络\",{\"1\":{\"280\":1}}],[\"密集型\",{\"1\":{\"280\":1}}],[\"密集\",{\"0\":{\"280\":1}}],[\"账号为邮箱\",{\"1\":{\"609\":1}}],[\"登录\",{\"1\":{\"609\":1}}],[\"冗余\",{\"1\":{\"605\":1}}],[\"投机性的\",{\"1\":{\"605\":1}}],[\"投机执行的分类\",{\"1\":{\"571\":1}}],[\"滞后\",{\"1\":{\"605\":1}}],[\"回滚\",{\"1\":{\"1632\":1}}],[\"回到远程仓库的状态\",{\"1\":{\"1241\":1}}],[\"回绕呢\",{\"1\":{\"982\":1}}],[\"回调\",{\"1\":{\"1293\":1}}],[\"回调中\",{\"1\":{\"962\":1}}],[\"回调函数\",{\"1\":{\"955\":1,\"1602\":1}}],[\"回答\",{\"1\":{\"873\":1}}],[\"回差\",{\"1\":{\"605\":1}}],[\"回溯\",{\"1\":{\"9\":1}}],[\"回溯法会导致一次复杂度为指数时间的计算\",{\"1\":{\"5\":1}}],[\"回溯法通常用最简单的递归方法来实现\",{\"1\":{\"5\":1}}],[\"回溯法采用试错的思想\",{\"1\":{\"5\":1}}],[\"回溯法是一种可以找出所有\",{\"1\":{\"5\":1}}],[\"回溯法\",{\"1\":{\"5\":1}}],[\"猜测是用于内核空间和用户空间通信\",{\"1\":{\"1605\":1}}],[\"猜测\",{\"1\":{\"605\":1}}],[\"推送变更时需要拥有远程仓库的写权限\",{\"1\":{\"1250\":1}}],[\"推测\",{\"1\":{\"605\":1}}],[\"推导其他预测器\",{\"1\":{\"562\":1}}],[\"推导一下\",{\"1\":{\"160\":1}}],[\"含义或者全程就是\",{\"1\":{\"1471\":1}}],[\"含义为分配的内存类型\",{\"1\":{\"1345\":1}}],[\"含义为\",{\"1\":{\"1345\":1}}],[\"含义为从\",{\"1\":{\"536\":1}}],[\"含义\",{\"1\":{\"605\":2,\"978\":1,\"1460\":1,\"1567\":3,\"1570\":1,\"1573\":1}}],[\"唯一索引\",{\"1\":{\"811\":1}}],[\"唯一可以阻止内存访问的时候是在\",{\"1\":{\"603\":1}}],[\"唯一的主要修改时\",{\"1\":{\"557\":1}}],[\"想迁移到诸如微内核等上面\",{\"1\":{\"1353\":1}}],[\"想查看其性能如何\",{\"1\":{\"810\":1}}],[\"想关联的\",{\"1\":{\"602\":1}}],[\"想要把本地的文件拷贝到容器中\",{\"1\":{\"613\":1}}],[\"想要学习课程\",{\"1\":{\"86\":1}}],[\"想要使用此布局\",{\"1\":{\"0\":1}}],[\"归类于\",{\"1\":{\"602\":1}}],[\"归类在一起\",{\"1\":{\"268\":1}}],[\"几乎无可扩展性\",{\"1\":{\"1353\":1}}],[\"几乎可以预测\",{\"1\":{\"601\":1}}],[\"几个选项\",{\"1\":{\"1033\":1}}],[\"几个函数\",{\"1\":{\"961\":3}}],[\"几个模块中\",{\"1\":{\"766\":1}}],[\"几个特点\",{\"1\":{\"217\":1}}],[\"体系结构初始化最小化\",{\"1\":{\"1491\":1}}],[\"体系结构都具有以下的关键属性\",{\"1\":{\"235\":1}}],[\"体现在一些例子比如稀疏矩阵\",{\"1\":{\"600\":1}}],[\"追踪所有对象的\",{\"1\":{\"1383\":1}}],[\"追踪你的目标\",{\"0\":{\"1034\":1}}],[\"追踪每一个\",{\"1\":{\"595\":1}}],[\"追加\",{\"1\":{\"361\":2}}],[\"精神上\",{\"1\":{\"1028\":1}}],[\"精确的定位系统十分重要\",{\"0\":{\"1014\":1}}],[\"精简\",{\"1\":{\"958\":1}}],[\"精简代码\",{\"1\":{\"382\":1}}],[\"精准攻击防御\",{\"1\":{\"646\":1}}],[\"精度更高\",{\"1\":{\"595\":1}}],[\"维护一个\",{\"1\":{\"1597\":1}}],[\"维护\",{\"1\":{\"1597\":1}}],[\"维护上一个访问的节点\",{\"1\":{\"64\":1}}],[\"维度\",{\"1\":{\"593\":1}}],[\"依旧使用relu激活函数\",{\"1\":{\"1138\":1}}],[\"依次执行这三步\",{\"1\":{\"1145\":1}}],[\"依次代表\",{\"1\":{\"789\":1}}],[\"依次访问\",{\"1\":{\"761\":1}}],[\"依据这个我们可以对预测器的预测结果进行压缩\",{\"1\":{\"593\":1}}],[\"依赖了很多\",{\"1\":{\"1440\":1}}],[\"依赖了若干个\",{\"1\":{\"1440\":1}}],[\"依赖了局部性原理\",{\"1\":{\"193\":1}}],[\"依赖注入\",{\"1\":{\"881\":1}}],[\"依赖指令\",{\"1\":{\"565\":1}}],[\"依赖\",{\"1\":{\"299\":1,\"599\":1}}],[\"依赖编译时可用信息的低成本静态方案\",{\"1\":{\"241\":1}}],[\"节流机制\",{\"1\":{\"592\":1}}],[\"节点开始\",{\"1\":{\"1385\":1}}],[\"节点的地址\",{\"1\":{\"459\":1}}],[\"节点\",{\"1\":{\"47\":1,\"53\":1,\"59\":1,\"63\":2,\"89\":1,\"1169\":1}}],[\"矢量\",{\"1\":{\"589\":1}}],[\"饱和\",{\"1\":{\"605\":1}}],[\"饱和置信计数器\",{\"1\":{\"585\":1}}],[\"饱和计数器理解\",{\"1\":{\"605\":1}}],[\"饱和计数器\",{\"1\":{\"576\":1,\"605\":1}}],[\"饱和计数器饱和的时候才使用预测的值\",{\"1\":{\"559\":1}}],[\"饱和计数器的合理使用可以达到\",{\"1\":{\"558\":1}}],[\"技术的稍微深入\",{\"1\":{\"1353\":1}}],[\"技术创建一个\",{\"1\":{\"1298\":1}}],[\"技术详解与实战\",{\"0\":{\"722\":1}}],[\"技术\",{\"0\":{\"1318\":1},\"1\":{\"581\":2,\"651\":1,\"695\":1,\"1395\":1}}],[\"策略函数\",{\"1\":{\"1599\":1}}],[\"策略\",{\"1\":{\"827\":2}}],[\"策略是\",{\"1\":{\"602\":1}}],[\"策略是什么\",{\"1\":{\"590\":1}}],[\"策略维护\",{\"1\":{\"577\":1}}],[\"策略还包括着\",{\"1\":{\"217\":1}}],[\"迟滞\",{\"1\":{\"576\":1}}],[\"迟滞计数器\",{\"1\":{\"562\":1}}],[\"理论与应用\",{\"1\":{\"1064\":1}}],[\"理想主义是作者对其的评价\",{\"1\":{\"565\":1}}],[\"理解上述代码需要参考\",{\"1\":{\"1553\":1}}],[\"理解这句话\",{\"1\":{\"550\":1}}],[\"理解下面这行代码所实现的功能\",{\"1\":{\"392\":1}}],[\"理解称为\",{\"1\":{\"245\":1}}],[\"理解\",{\"1\":{\"10\":1,\"192\":1,\"641\":1}}],[\"十分方便\",{\"1\":{\"1182\":1}}],[\"十分理想主义的\",{\"1\":{\"565\":1}}],[\"十分巧妙\",{\"1\":{\"486\":1,\"1575\":1}}],[\"仿真\",{\"1\":{\"564\":1}}],[\"混合预测我们在\",{\"1\":{\"563\":1}}],[\"意思就是说\",{\"1\":{\"1602\":1}}],[\"意思是偏向锁\",{\"1\":{\"676\":1}}],[\"意为等待中断\",{\"1\":{\"1537\":1}}],[\"意味着我们硬件也可以出手了\",{\"1\":{\"1355\":1}}],[\"意味着任务将在当前进程中执行\",{\"1\":{\"844\":1}}],[\"意味着没有\",{\"1\":{\"559\":1}}],[\"意外\",{\"1\":{\"224\":1}}],[\"匹配时则不区分字符串的大小写\",{\"1\":{\"820\":1}}],[\"匹配时需要全量比较吗\",{\"1\":{\"196\":1}}],[\"匹配\",{\"1\":{\"587\":1}}],[\"匹配的话\",{\"1\":{\"584\":1}}],[\"匹配的条目\",{\"1\":{\"559\":1}}],[\"存放类的数据信息\",{\"1\":{\"674\":1}}],[\"存在于什么地方呢\",{\"1\":{\"1607\":1}}],[\"存在半打开连接的话\",{\"1\":{\"983\":1}}],[\"存在多个线程共享这个\",{\"1\":{\"876\":1}}],[\"存在着以下的模块\",{\"1\":{\"691\":1}}],[\"存在着一些挑战\",{\"1\":{\"654\":1}}],[\"存在一个全局分支预测历史寄存器\",{\"1\":{\"559\":1}}],[\"存于全相联的\",{\"1\":{\"602\":1}}],[\"存储进入\",{\"1\":{\"1620\":1}}],[\"存储中\",{\"1\":{\"1493\":1}}],[\"存储于一张表temp中\",{\"1\":{\"1170\":1}}],[\"存储的密文除了大小关系之外\",{\"1\":{\"1169\":1}}],[\"存储的情况出现\",{\"1\":{\"679\":1}}],[\"存储引擎采用聚集\",{\"1\":{\"814\":1}}],[\"存储引擎\",{\"0\":{\"813\":1}}],[\"存储为例\",{\"1\":{\"674\":1}}],[\"存储服务\",{\"1\":{\"643\":1}}],[\"存储密集型\",{\"1\":{\"643\":2}}],[\"存储资源\",{\"1\":{\"640\":1}}],[\"存储位置\",{\"1\":{\"572\":1}}],[\"存储操作\",{\"1\":{\"534\":1}}],[\"存储\",{\"1\":{\"523\":1,\"639\":1,\"643\":1}}],[\"存储其\",{\"1\":{\"460\":1}}],[\"存储了最近使用过的\",{\"1\":{\"255\":1}}],[\"存储在了临时寄存器\",{\"1\":{\"245\":1}}],[\"存储层次结构如何利用时间局部性和空间局部性\",{\"1\":{\"192\":1}}],[\"存储层次遍历的结果\",{\"1\":{\"47\":1}}],[\"存储前缀和出现的次数\",{\"1\":{\"153\":1}}],[\"存储每一个\",{\"1\":{\"153\":1}}],[\"存储节点的入度\",{\"1\":{\"86\":1}}],[\"存储起来\",{\"1\":{\"86\":1,\"88\":1}}],[\"存储当前层次内的节点\",{\"1\":{\"47\":1}}],[\"能更加方便的理解参数的含义\",{\"1\":{\"1567\":1}}],[\"能写简单的\",{\"1\":{\"1437\":1}}],[\"能读懂大型项目中的\",{\"1\":{\"1437\":1}}],[\"能不能避免这次拷贝\",{\"1\":{\"1353\":1}}],[\"能够精确地根据wifi信号计算空间中的目标位置\",{\"1\":{\"1012\":1}}],[\"能可靠传输数据帧的数据链路\",{\"1\":{\"977\":1}}],[\"能比其他的预测器表现得更好\",{\"1\":{\"559\":1}}],[\"能否进入\",{\"1\":{\"1545\":1}}],[\"能否从\",{\"1\":{\"1465\":1}}],[\"能否通过使用这两个水壶\",{\"1\":{\"91\":1}}],[\"能否继续使用上面的解法模板来求解这个问题\",{\"1\":{\"58\":1}}],[\"计数器来说\",{\"1\":{\"605\":1}}],[\"计数器可以这么分类\",{\"1\":{\"601\":1}}],[\"计数器都被重置\",{\"1\":{\"559\":1}}],[\"计数器而不是完整计数器限制了置信度估计的开销\",{\"1\":{\"558\":1}}],[\"计数器\",{\"1\":{\"558\":2,\"789\":1,\"828\":1}}],[\"计算机视觉模型\",{\"0\":{\"1133\":1}}],[\"计算机视觉系统采用了交叉和多模拟态建模的方法\",{\"1\":{\"1133\":1}}],[\"计算机视觉系统完全失效\",{\"1\":{\"1132\":1}}],[\"计算机视觉系统平均精度为68\",{\"1\":{\"1132\":1}}],[\"计算机视觉系统\",{\"1\":{\"1132\":1}}],[\"计算机视觉信号作为深度学习的训练标签\",{\"1\":{\"1131\":1}}],[\"计算机视觉相关理论\",{\"0\":{\"1021\":1}}],[\"计算机视觉室内定位技术对光线环境较为敏感和容易受到遮挡等缺陷\",{\"1\":{\"1012\":1}}],[\"计算机用户以及各种应用程序和网络之间的接口\",{\"1\":{\"977\":1}}],[\"计算机的资源一般是共享的\",{\"1\":{\"736\":1}}],[\"计算某个字符串\",{\"1\":{\"904\":1}}],[\"计算某个状态在一次拨动以后能到达的所有下一个状态\",{\"1\":{\"88\":1}}],[\"计算加速型\",{\"1\":{\"643\":2}}],[\"计算服务\",{\"1\":{\"643\":1}}],[\"计算资源\",{\"1\":{\"640\":1}}],[\"计算置信值并且只使用置信度很高的预测\",{\"1\":{\"558\":1}}],[\"计算了一个指令的结果和最后\",{\"1\":{\"545\":1}}],[\"计算了两个整数之间的\",{\"1\":{\"400\":1}}],[\"计算的\",{\"1\":{\"545\":1}}],[\"计算10的阶乘\",{\"1\":{\"398\":1}}],[\"计算密集型\",{\"1\":{\"643\":2}}],[\"计算密集型任务由于主要消耗\",{\"1\":{\"280\":1}}],[\"计算密集型任务同时进行的数量应当等于\",{\"1\":{\"280\":1}}],[\"计算密集型也叫\",{\"1\":{\"280\":1}}],[\"计算密集和i\",{\"0\":{\"280\":1}}],[\"计算出了result=n1+n2的表达式的值\",{\"1\":{\"904\":1}}],[\"计算出最终的物理地址\",{\"1\":{\"252\":1}}],[\"计算出来有效地址并作为\",{\"1\":{\"245\":1}}],[\"计算出来他能拨到的所有\",{\"1\":{\"88\":1}}],[\"计算\",{\"1\":{\"28\":1,\"639\":1}}],[\"越高则表示系统的冷却需求越高\",{\"1\":{\"1597\":1}}],[\"越晚饱和\",{\"1\":{\"558\":1}}],[\"越大\",{\"1\":{\"196\":1}}],[\"覆盖掉\",{\"1\":{\"1498\":1}}],[\"覆盖率会降低\",{\"1\":{\"558\":1}}],[\"覆盖之\",{\"1\":{\"218\":1}}],[\"错误偏移\",{\"1\":{\"1024\":1}}],[\"错误\",{\"1\":{\"960\":1}}],[\"错误处理\",{\"1\":{\"693\":1}}],[\"错误检查\",{\"1\":{\"600\":1}}],[\"错误预测的恢复损耗从两个方面衡量\",{\"1\":{\"558\":1}}],[\"错误惩罚可能和分支预测的错误惩罚一样高\",{\"1\":{\"543\":1}}],[\"甚至也可以根据优先级选择使用最关键的指令\",{\"1\":{\"557\":1}}],[\"甚至带移位操作的寄存器\",{\"1\":{\"514\":1}}],[\"限制单个\",{\"1\":{\"557\":1}}],[\"经验有助于设置好学习率\",{\"1\":{\"1212\":1}}],[\"经理\",{\"1\":{\"1033\":1}}],[\"经过syscall\",{\"1\":{\"1301\":1}}],[\"经过实测\",{\"1\":{\"1284\":1}}],[\"经过这层处理我们得到各个预测框的预测类别及对应的置信度值\",{\"1\":{\"1157\":1}}],[\"经过一系列卷积操作\",{\"1\":{\"1153\":1}}],[\"经过一系列的计算\",{\"1\":{\"557\":1}}],[\"经过路径长度为\",{\"1\":{\"1025\":1}}],[\"经典的建局域网的场景\",{\"1\":{\"729\":1}}],[\"经典背包问题\",{\"0\":{\"118\":1}}],[\"级表的读取\",{\"1\":{\"556\":1}}],[\"级别\",{\"1\":{\"321\":1,\"724\":3}}],[\"场景和密钥管理\",{\"1\":{\"648\":1}}],[\"场景\",{\"1\":{\"556\":1,\"648\":1}}],[\"场景在实际是普遍存在的\",{\"1\":{\"552\":1}}],[\"场景下的一个\",{\"1\":{\"218\":1}}],[\"乍一看\",{\"1\":{\"552\":1,\"557\":1}}],[\"缩短了指令的延迟时间\",{\"1\":{\"550\":1}}],[\"缩写为\",{\"1\":{\"71\":1,\"1484\":1}}],[\"综合来看\",{\"1\":{\"549\":1}}],[\"综上\",{\"1\":{\"283\":1}}],[\"失败\",{\"1\":{\"603\":1,\"743\":2}}],[\"失败的话可以手动下载下来\",{\"1\":{\"1635\":1}}],[\"失败的\",{\"1\":{\"548\":1}}],[\"失效的两种可能\",{\"1\":{\"256\":1}}],[\"失效的原因可能是\",{\"1\":{\"256\":1}}],[\"失效表明两种可能性之一\",{\"1\":{\"256\":1}}],[\"失效是在\",{\"1\":{\"256\":1}}],[\"失效\",{\"1\":{\"256\":2}}],[\"失效率的微小降低都显得十分重要\",{\"1\":{\"213\":1}}],[\"失效率的改进来自于减少对于同一位置的竞争而产生的失效\",{\"1\":{\"206\":1}}],[\"做题\",{\"1\":{\"1632\":1}}],[\"做的初始化操作都可以被\",{\"1\":{\"1498\":1}}],[\"做一个清理的工作\",{\"1\":{\"1440\":1}}],[\"做学术就应该如此\",{\"1\":{\"1355\":1}}],[\"做创新\",{\"1\":{\"1355\":1}}],[\"做了一些封装\",{\"1\":{\"1606\":1}}],[\"做了一个硬件\",{\"1\":{\"1357\":1}}],[\"做了一个很完善的隔离策略\",{\"1\":{\"1356\":1}}],[\"做了参数重载\",{\"1\":{\"1366\":1}}],[\"做了取舍\",{\"1\":{\"1353\":1}}],[\"做了什么呢\",{\"1\":{\"1318\":1}}],[\"做了什么事情\",{\"1\":{\"548\":1,\"1334\":1}}],[\"做性能优化\",{\"1\":{\"1326\":1}}],[\"做优秀的产品\",{\"1\":{\"1032\":1}}],[\"做定时任务或循环任务\",{\"1\":{\"290\":1}}],[\"降低了mope构建平衡二叉树的开销\",{\"1\":{\"1168\":1}}],[\"降低耦合\",{\"1\":{\"878\":1}}],[\"降低单个预测错误惩罚\",{\"1\":{\"547\":1}}],[\"降低\",{\"1\":{\"547\":1,\"1523\":1}}],[\"降序\",{\"1\":{\"341\":1}}],[\"衡量\",{\"1\":{\"547\":1}}],[\"忽略\",{\"1\":{\"1248\":3}}],[\"忽略当前目录的\",{\"1\":{\"1248\":1}}],[\"忽略了实际的加速效果\",{\"1\":{\"547\":1}}],[\"忽略常见单词\",{\"1\":{\"344\":1}}],[\"然而\",{\"1\":{\"545\":1,\"559\":1,\"1584\":1}}],[\"然后和默认值进行对比\",{\"1\":{\"1607\":1}}],[\"然后等待所有正在使用旧副本的进程访问完毕\",{\"1\":{\"1524\":1}}],[\"然后等待安装完成\",{\"1\":{\"1177\":1}}],[\"然后禁止本地中断传递\",{\"1\":{\"1517\":1}}],[\"然后我们可以把这个\",{\"1\":{\"1596\":1}}],[\"然后我们调用\",{\"1\":{\"1294\":1}}],[\"然后我点进去\",{\"1\":{\"1469\":1}}],[\"然后其实我们的\",{\"1\":{\"1446\":1}}],[\"然后其中一个副本\",{\"1\":{\"739\":1}}],[\"然后做细微的修改\",{\"1\":{\"1443\":1}}],[\"然后调用相应的回调函数\",{\"1\":{\"1578\":1}}],[\"然后调用函数\",{\"1\":{\"1556\":1}}],[\"然后调用\",{\"1\":{\"1366\":1}}],[\"然后执行最简单的\",{\"1\":{\"1445\":1}}],[\"然后执行\",{\"1\":{\"1333\":1,\"1635\":1}}],[\"然后让你自己进行合并\",{\"1\":{\"1253\":1}}],[\"然后更新本地数据库\",{\"1\":{\"1253\":1}}],[\"然后才能推送\",{\"1\":{\"1250\":1}}],[\"然后给出三组数据即可\",{\"1\":{\"1212\":1}}],[\"然后分类别地对置信度值采用nms\",{\"1\":{\"1157\":1}}],[\"然后分别实现三个回调\",{\"1\":{\"962\":1}}],[\"然后挨个计算其与剩余框的iou\",{\"1\":{\"1157\":1}}],[\"然后添加一个average\",{\"1\":{\"1156\":1}}],[\"然后紧跟3x3卷积\",{\"1\":{\"1156\":1}}],[\"然后每个单元格负责去检测那些中心点落在该格子内的目标\",{\"1\":{\"1155\":1}}],[\"然后送入cnn网络\",{\"1\":{\"1155\":1}}],[\"然后通过梯度和学习率来更新参数的取值\",{\"1\":{\"1212\":1}}],[\"然后通过反向传播算法来调整神经网络的取值从而缩小差距\",{\"1\":{\"1212\":1}}],[\"然后通过反射放到容器里面\",{\"1\":{\"871\":1}}],[\"然后通过卷积最后生产这样大小的特征图\",{\"1\":{\"1153\":1}}],[\"然后继续解压得到的zip文件\",{\"1\":{\"1145\":1}}],[\"然后进行下一步\",{\"1\":{\"1145\":1}}],[\"然后进入\",{\"1\":{\"712\":1}}],[\"然后应用人类行为检测算法检测图片上面的人类\",{\"1\":{\"1133\":1}}],[\"然后引用\",{\"1\":{\"1108\":1,\"1446\":1}}],[\"然后统计一天的睡觉总时长\",{\"1\":{\"1042\":1}}],[\"然后统计符合条件的数量\",{\"1\":{\"36\":1}}],[\"然后到达目的地\",{\"1\":{\"1019\":1}}],[\"然后对剩余的检测框重复上述过程\",{\"1\":{\"1157\":1}}],[\"然后对这些窗口对应的区域做图像分类\",{\"1\":{\"1153\":1}}],[\"然后对融合的定位方法进行说明\",{\"1\":{\"1012\":1}}],[\"然后对整体使用\",{\"1\":{\"86\":1}}],[\"然后输入\",{\"1\":{\"960\":1}}],[\"然后不再返回\",{\"1\":{\"956\":1}}],[\"然后不停滑动右指针直到满足题目的条件\",{\"1\":{\"168\":1}}],[\"然后可以使用\",{\"1\":{\"819\":1}}],[\"然后可以打印出\",{\"1\":{\"693\":1}}],[\"然后把该进程放入就绪队列\",{\"1\":{\"738\":1}}],[\"然后把这个选项用进去\",{\"1\":{\"659\":1}}],[\"然后遍历\",{\"1\":{\"693\":1,\"1385\":1}}],[\"然后遍历完之后再走到右子树\",{\"1\":{\"46\":1}}],[\"然后就是主\",{\"1\":{\"1481\":1}}],[\"然后就可以运行detector了\",{\"1\":{\"1161\":1}}],[\"然后就可以轻松使用\",{\"1\":{\"690\":1}}],[\"然后就不返回了\",{\"1\":{\"956\":1}}],[\"然后就会在当下目录下生成\",{\"1\":{\"657\":1}}],[\"然后打印出来的内存布局如下所示\",{\"1\":{\"682\":1}}],[\"然后使能\",{\"1\":{\"659\":1}}],[\"然后使用最简单的方式验证一下\",{\"1\":{\"1446\":1}}],[\"然后使用自定义的隔离算法来保证安全性\",{\"1\":{\"1354\":1}}],[\"然后使用全连接层来得到预测值\",{\"1\":{\"1156\":1}}],[\"然后使用\",{\"1\":{\"495\":1,\"743\":1,\"1463\":1}}],[\"然后使用双向链表的操作进行插入\",{\"1\":{\"460\":1}}],[\"然后使用它\",{\"1\":{\"391\":1}}],[\"然后使用文件读取的方式进行读取\",{\"1\":{\"387\":1}}],[\"然后启动程序\",{\"1\":{\"653\":1}}],[\"然后启动虚环境\",{\"1\":{\"275\":1}}],[\"然后访问\",{\"1\":{\"616\":1}}],[\"然后设置账号密码\",{\"1\":{\"612\":1}}],[\"然后概述使用了比较多的篇幅来说明提升\",{\"1\":{\"580\":1}}],[\"然后提出了仅预测\",{\"1\":{\"580\":1}}],[\"然后重新\",{\"1\":{\"551\":1}}],[\"然后递归调用\",{\"1\":{\"499\":1}}],[\"然后用表格的形式一一分析这些参数\",{\"1\":{\"1591\":1}}],[\"然后用每个元素来可以预测那些中心点在该小方格内的目标\",{\"1\":{\"1153\":1}}],[\"然后用双指针去找\",{\"1\":{\"496\":1}}],[\"然后用内存中的\",{\"1\":{\"218\":1}}],[\"然后先遍历\",{\"1\":{\"486\":1}}],[\"然后开始遍历两个链表\",{\"1\":{\"459\":1}}],[\"然后转化成\",{\"1\":{\"401\":1}}],[\"然后在\",{\"1\":{\"681\":1}}],[\"然后在命令行中使用\",{\"1\":{\"372\":1}}],[\"然后在这个文件夹下面新建\",{\"1\":{\"336\":1}}],[\"然后读取这一行的元素\",{\"1\":{\"354\":1}}],[\"然后新建一个虚环境\",{\"1\":{\"445\":1}}],[\"然后新建\",{\"1\":{\"336\":1}}],[\"然后拿到第\",{\"1\":{\"331\":1}}],[\"然后从文件中得到一个\",{\"1\":{\"289\":1}}],[\"然后函数负责单一一次的计算\",{\"1\":{\"289\":1}}],[\"然后解压\",{\"1\":{\"273\":1}}],[\"然后再生成\",{\"1\":{\"1445\":1}}],[\"然后再逐一分析使用这些数据结构的相关函数和算法\",{\"1\":{\"1338\":1}}],[\"然后再确定各个box的类别\",{\"1\":{\"1157\":1}}],[\"然后再在region\",{\"1\":{\"1151\":1}}],[\"然后再应用处理算法检测关键点是否属于同一个目标\",{\"1\":{\"1133\":1}}],[\"然后再命令行中启动\",{\"1\":{\"843\":1}}],[\"然后再计算出对应的\",{\"1\":{\"589\":1}}],[\"然后再通过基地址的偏移地址获取具体变量的地址\",{\"1\":{\"530\":1}}],[\"然后再进行操作\",{\"1\":{\"523\":1}}],[\"然后再恢复执行被中断的进程\",{\"1\":{\"256\":1}}],[\"然后再去内存中找\",{\"1\":{\"212\":1}}],[\"然后再使用上述公式直接计算出二叉树的最大深度\",{\"1\":{\"56\":1}}],[\"然后计算之间\",{\"1\":{\"150\":1}}],[\"然后计算出这些元素的个数\",{\"1\":{\"59\":1}}],[\"然后求和\",{\"1\":{\"149\":1}}],[\"然后判断如果本\",{\"1\":{\"1542\":1}}],[\"然后判断\",{\"1\":{\"134\":1}}],[\"然后判断其值是否相等\",{\"1\":{\"52\":1}}],[\"然后将所有的性能计数器状态都设置为暂停\",{\"1\":{\"1527\":1}}],[\"然后将新副本加入到rcu保护区中\",{\"1\":{\"1524\":1}}],[\"然后将这个状态返回\",{\"1\":{\"1520\":1}}],[\"然后将该虚拟地址空间中的每个地址都映射到文件或设备的实际物理地址上\",{\"1\":{\"1318\":1}}],[\"然后将密文与对应的编码存储\",{\"1\":{\"1169\":1}}],[\"然后将前两项相乘可以得到类别置信度值为\",{\"1\":{\"1157\":1}}],[\"然后将当前\",{\"1\":{\"530\":1}}],[\"然后将高\",{\"1\":{\"527\":1}}],[\"然后将寄存器\",{\"1\":{\"524\":1}}],[\"然后将尾部的\",{\"1\":{\"459\":1}}],[\"然后将它们一起粉碎\",{\"1\":{\"125\":1}}],[\"然后将元组\",{\"1\":{\"88\":1}}],[\"然后串联起来得到表达式\",{\"1\":{\"124\":1}}],[\"然后串联起所有整数\",{\"1\":{\"124\":1}}],[\"然后看其对应的置信值是否大于阈值\",{\"1\":{\"584\":1}}],[\"然后看能不能根据这个房间的钥匙把每个房间都走了\",{\"1\":{\"84\":1}}],[\"然后看这个二维矩阵中的元素是不是都可以到太平洋和大西洋\",{\"1\":{\"78\":1}}],[\"然后逐一判断即可\",{\"1\":{\"52\":1}}],[\"然后\",{\"1\":{\"46\":1,\"252\":1,\"431\":1,\"657\":1,\"962\":1,\"1524\":1}}],[\"然后这一小时内不会再吃更多的香蕉\",{\"1\":{\"34\":1}}],[\"然后相减得到答案\",{\"1\":{\"32\":1}}],[\"典型的单阶段目标检测器包括\",{\"1\":{\"1021\":1}}],[\"典型的如\",{\"1\":{\"545\":2}}],[\"典型的例子就是数组\",{\"1\":{\"192\":1}}],[\"挖掘出来了互补的关系\",{\"1\":{\"545\":1}}],[\"🧨🧨这点我不是非常确定\",{\"1\":{\"1357\":1}}],[\"🩸🩸\",{\"1\":{\"1330\":1}}],[\"🤔🤔🤔\",{\"1\":{\"580\":1,\"1590\":1,\"1597\":1}}],[\"🤷‍♂️🤷‍♂️🤷‍♂️\",{\"1\":{\"544\":1}}],[\"🧡在\",{\"1\":{\"1383\":1}}],[\"🧡🧡\",{\"1\":{\"192\":1,\"200\":1,\"542\":1}}],[\"🧡🧡🧡\",{\"1\":{\"56\":1,\"210\":1,\"564\":2,\"1424\":1}}],[\"🧡💛💚💙\",{\"1\":{\"118\":1}}],[\"具有同一个\",{\"1\":{\"981\":1}}],[\"具有投机性质\",{\"1\":{\"599\":1}}],[\"具有两个优点\",{\"1\":{\"599\":1}}],[\"具有很高的研究价值\",{\"1\":{\"570\":1}}],[\"具有很高的精度\",{\"1\":{\"543\":1}}],[\"具体分析见上文\",{\"1\":{\"1570\":1}}],[\"具体后续再进行研究\",{\"1\":{\"1554\":1}}],[\"具体为\",{\"1\":{\"997\":1}}],[\"具体过程为\",{\"1\":{\"992\":1}}],[\"具体来简单讲述一下其中的细节\",{\"1\":{\"701\":1}}],[\"具体来说\",{\"1\":{\"323\":1,\"529\":1,\"534\":1,\"1155\":1,\"1353\":1,\"1521\":1,\"1529\":1,\"1584\":1,\"1585\":1}}],[\"具体怎么使用\",{\"1\":{\"558\":1}}],[\"具体代码可以参考这里\",{\"1\":{\"460\":1}}],[\"具体参照上述\",{\"1\":{\"454\":1}}],[\"具体可以查询\",{\"1\":{\"453\":1}}],[\"具体可以查阅官方文档\",{\"1\":{\"383\":1}}],[\"具体可以参考这里\",{\"1\":{\"1179\":1}}],[\"具体可以参考apt\",{\"1\":{\"1145\":1}}],[\"具体可以参考代码\",{\"1\":{\"390\":1}}],[\"具体可以参考后面的实例章节\",{\"1\":{\"173\":1}}],[\"具体用法如下\",{\"1\":{\"373\":1}}],[\"具体用法可以参考官方文档\",{\"1\":{\"372\":1}}],[\"具体多个标记的执行如上代码所示\",{\"1\":{\"372\":1}}],[\"具体到指令级别\",{\"1\":{\"252\":1}}],[\"具体的理解\",{\"1\":{\"1598\":1}}],[\"具体的分析可以看我的另一篇博文\",{\"1\":{\"1352\":1}}],[\"具体的代码实现在后面的章节可以查阅\",{\"1\":{\"1169\":1}}],[\"具体的做法是强制将\",{\"1\":{\"602\":1}}],[\"具体的意义\",{\"1\":{\"580\":1}}],[\"具体的实现代码可以参考\",{\"1\":{\"460\":1}}],[\"具体的完整示例可以参考\",{\"1\":{\"297\":1}}],[\"具体的细节较为简单\",{\"1\":{\"243\":1}}],[\"具体的\",{\"1\":{\"217\":1,\"703\":1,\"1528\":1}}],[\"具体而言\",{\"1\":{\"252\":1,\"1132\":1,\"1212\":3,\"1534\":1}}],[\"具体而言就是递归计算出二叉树左子树和右子树的最大深度\",{\"1\":{\"56\":1}}],[\"具体而言不是很好理解的\",{\"1\":{\"43\":1}}],[\"具体看代码\",{\"1\":{\"11\":1}}],[\"±4gb范围内的地址\",{\"1\":{\"530\":1}}],[\"浮点数转换为定点数\",{\"1\":{\"519\":1}}],[\"减少了训练所需要的参数数量\",{\"1\":{\"1012\":1}}],[\"减少重复代码\",{\"1\":{\"878\":1}}],[\"减少解释器的中间消耗\",{\"1\":{\"655\":1}}],[\"减少字节码解释\",{\"1\":{\"653\":1}}],[\"减法指令\",{\"1\":{\"516\":1}}],[\"减去第\",{\"1\":{\"102\":1}}],[\"嵌入式系统也属于固件的一种\",{\"1\":{\"1501\":1}}],[\"嵌入式汇编代码中指定的寄存器可能会产生冲突\",{\"1\":{\"505\":1}}],[\"嵌兮密兮\",{\"1\":{\"1060\":1}}],[\"嵌套的字典\",{\"1\":{\"388\":1}}],[\"约束字符串和\",{\"1\":{\"504\":1}}],[\"约翰\",{\"1\":{\"70\":1}}],[\"三方库找到的话对应的位置a\",{\"1\":{\"1418\":1}}],[\"三次握手\",{\"0\":{\"982\":1}}],[\"三种工作模式\",{\"0\":{\"956\":1}}],[\"三种方式进行查找的对比\",{\"1\":{\"206\":1}}],[\"三种方式的对比\",{\"1\":{\"206\":1}}],[\"三路握手的客户端对应1其中的一项\",{\"1\":{\"951\":1}}],[\"三路握手过程\",{\"1\":{\"951\":1}}],[\"三级缓存\",{\"0\":{\"885\":1}}],[\"三大缓存\",{\"0\":{\"882\":1}}],[\"三个\",{\"1\":{\"1434\":1}}],[\"三个技术对模型精度的影响\",{\"1\":{\"1012\":1}}],[\"三个参数应该分别是\",{\"1\":{\"706\":1,\"1403\":1}}],[\"三个字段\",{\"1\":{\"504\":1}}],[\"冒号后面跟汇编代码的输出\",{\"1\":{\"503\":1}}],[\"冒泡排序\",{\"0\":{\"183\":1}}],[\"符号表\",{\"1\":{\"1460\":1}}],[\"符号包含住表示的是这个参数是可选的\",{\"1\":{\"502\":1}}],[\"符合我们染色算法中的定义\",{\"1\":{\"1388\":1}}],[\"符合正态分布\",{\"1\":{\"1212\":1}}],[\"符合\",{\"1\":{\"156\":1}}],[\"展开的话\",{\"1\":{\"502\":1}}],[\"令牌环协议\",{\"1\":{\"977\":1}}],[\"令\",{\"1\":{\"955\":1}}],[\"令代码更加优雅\",{\"1\":{\"499\":1}}],[\"令整数\",{\"1\":{\"156\":1}}],[\"θp\",{\"1\":{\"1020\":1}}],[\"θ\",{\"1\":{\"492\":1,\"1025\":4}}],[\"逆序入栈\",{\"1\":{\"486\":1}}],[\"叉树的前序遍历\",{\"1\":{\"486\":1}}],[\"阿里云\",{\"1\":{\"712\":1}}],[\"阿里云开源镜像站下载内核\",{\"1\":{\"712\":1}}],[\"阿里\",{\"0\":{\"480\":1}}],[\"空转一直等待某个条件成立\",{\"1\":{\"1537\":1}}],[\"空闲时\",{\"1\":{\"1528\":1}}],[\"空闲时段或者开机之后触发的\",{\"1\":{\"1374\":1}}],[\"空闲轮询机制被禁用\",{\"1\":{\"1528\":1}}],[\"空闲轮询机制被启用\",{\"1\":{\"1528\":1}}],[\"空闲处理\",{\"1\":{\"1524\":2}}],[\"空闲线程减1\",{\"1\":{\"1316\":1}}],[\"空行\",{\"1\":{\"999\":1}}],[\"空字符串\",{\"1\":{\"479\":1}}],[\"空间不足\",{\"1\":{\"1487\":1}}],[\"空间\",{\"1\":{\"1487\":1}}],[\"空间用于加载\",{\"1\":{\"1487\":1}}],[\"空间的限制\",{\"1\":{\"256\":1}}],[\"空间被分成了\",{\"1\":{\"195\":1}}],[\"空间局部性\",{\"1\":{\"191\":1,\"192\":1}}],[\"空间复杂度是o\",{\"1\":{\"1170\":1}}],[\"空间复杂度\",{\"1\":{\"95\":1,\"98\":1}}],[\"言归正传\",{\"1\":{\"478\":1}}],[\"言外之意在于\",{\"1\":{\"200\":1}}],[\"又构成了内核中其他子系统定义\",{\"1\":{\"1577\":1}}],[\"又使用了两根天线作为天线阵列\",{\"1\":{\"1134\":1}}],[\"又似乎可以\",{\"1\":{\"729\":1}}],[\"又是被牺牲的一代人~\",{\"1\":{\"478\":1}}],[\"又称为宽度优先搜索\",{\"1\":{\"71\":1}}],[\"删除远程服务器上的master分支\",{\"1\":{\"1253\":1}}],[\"删除远程仓库\",{\"1\":{\"1250\":1}}],[\"删除分支\",{\"1\":{\"1252\":1}}],[\"删除新增文件\",{\"0\":{\"1242\":1}}],[\"删除该条目\",{\"1\":{\"984\":1}}],[\"删除同理\",{\"1\":{\"806\":1}}],[\"删除连续的重复字母\",{\"1\":{\"751\":1}}],[\"删除所有的the\",{\"1\":{\"751\":1}}],[\"删除所有重复出现字符序列\",{\"1\":{\"751\":1}}],[\"删除某个模块\",{\"1\":{\"719\":1}}],[\"删除找到的最左边节点这个节点\",{\"1\":{\"499\":1}}],[\"删除二叉搜索树中的节点\",{\"0\":{\"498\":1,\"499\":1}}],[\"删除\",{\"0\":{\"1274\":1},\"1\":{\"468\":1,\"499\":1,\"805\":1,\"833\":1}}],[\"删除最近最少使用的\",{\"1\":{\"827\":1}}],[\"删除最左边的元素\",{\"1\":{\"303\":1}}],[\"删除最后的元素\",{\"1\":{\"303\":1}}],[\"栈分配的局部变量\",{\"1\":{\"692\":1}}],[\"栈顶缓存\",{\"0\":{\"689\":1},\"1\":{\"689\":1}}],[\"栈顶缓存技术\",{\"1\":{\"687\":1}}],[\"栈顶元素是左侧元素\",{\"1\":{\"486\":1}}],[\"栈顶元素相等的元素时\",{\"1\":{\"466\":1}}],[\"栈顶元素和外面相匹配\",{\"1\":{\"465\":1}}],[\"栈更简单一些\",{\"1\":{\"687\":1}}],[\"栈\",{\"0\":{\"686\":1}}],[\"栈式虚拟机和寄存器式虚拟机\",{\"1\":{\"708\":1}}],[\"栈式虚拟机\",{\"1\":{\"685\":1}}],[\"栈帧都包括\",{\"1\":{\"667\":1}}],[\"栈空则合法\",{\"1\":{\"465\":1}}],[\"栈不空则表达式非法\",{\"1\":{\"465\":1}}],[\"栈内元素是\",{\"1\":{\"46\":1}}],[\"尾插\",{\"1\":{\"460\":1,\"468\":1}}],[\"尾项\",{\"1\":{\"165\":1}}],[\"思路就是使用两个栈\",{\"1\":{\"468\":1}}],[\"思路是初始化一个\",{\"1\":{\"460\":1}}],[\"思考未来\",{\"0\":{\"1032\":1}}],[\"思考为什么\",{\"1\":{\"652\":1}}],[\"思考\",{\"1\":{\"56\":1,\"89\":1,\"293\":1}}],[\"常见清单位于\",{\"1\":{\"1240\":1}}],[\"常见语法\",{\"0\":{\"901\":1}}],[\"常见的方法是使用avl算法\",{\"1\":{\"1169\":1}}],[\"常见的目标检测算法一般基于滑动窗口模型\",{\"1\":{\"1153\":1}}],[\"常见的虚拟机可以分为两种\",{\"1\":{\"687\":1}}],[\"常见的几个\",{\"1\":{\"652\":1}}],[\"常见的有应用开发环境\",{\"1\":{\"639\":1}}],[\"常量项的具体内容\",{\"1\":{\"666\":1}}],[\"常量池的组织方式不便于直接从文件映射到内存然后高效执行\",{\"1\":{\"688\":1}}],[\"常量池对应的数据结构伪代码就是一个类型为\",{\"1\":{\"666\":1}}],[\"常量池\",{\"1\":{\"664\":2,\"665\":1}}],[\"常常用于缓存技术中\",{\"1\":{\"460\":1}}],[\"常用于固件\",{\"1\":{\"1501\":1}}],[\"常用于机器性能不均衡时\",{\"1\":{\"763\":1}}],[\"常用的是指数衰减法\",{\"1\":{\"1212\":1}}],[\"常用的企业级虚拟化产品主要有\",{\"1\":{\"725\":1}}],[\"常用\",{\"1\":{\"83\":1}}],[\"源文件路径>\",{\"1\":{\"1453\":1}}],[\"源文件名\",{\"1\":{\"664\":1,\"692\":1}}],[\"源代码和标准\",{\"1\":{\"1240\":1}}],[\"源代码的生成难度\",{\"1\":{\"687\":1}}],[\"源寄存器\",{\"1\":{\"534\":1}}],[\"源\",{\"0\":{\"448\":1}}],[\"源码地址\",{\"1\":{\"770\":1}}],[\"源码会最终编译\",{\"1\":{\"670\":1}}],[\"源码文件\",{\"1\":{\"670\":2}}],[\"源码\",{\"1\":{\"269\":1,\"1549\":1}}],[\"源码分析\",{\"1\":{\"269\":1}}],[\"虚线部分表示未涉及到的但是完全二叉树已构建的节点\",{\"1\":{\"1170\":1}}],[\"虚构的\",{\"1\":{\"1139\":1}}],[\"虚环境\",{\"0\":{\"444\":1},\"1\":{\"444\":1}}],[\"虚拟页\",{\"1\":{\"1318\":1}}],[\"虚拟主机\",{\"0\":{\"760\":1}}],[\"虚拟网卡\",{\"1\":{\"730\":1}}],[\"虚拟化进行举例\",{\"1\":{\"728\":1}}],[\"虚拟化的方式\",{\"1\":{\"728\":1}}],[\"虚拟化介绍\",{\"0\":{\"724\":1}}],[\"虚拟交换机上\",{\"1\":{\"728\":1}}],[\"虚拟机中的\",{\"1\":{\"1392\":1}}],[\"虚拟机中\",{\"1\":{\"1380\":1}}],[\"虚拟机进行初始化\",{\"1\":{\"1366\":1}}],[\"虚拟机实例\",{\"1\":{\"1366\":3}}],[\"虚拟机和主机在一个网段下面\",{\"1\":{\"730\":1}}],[\"虚拟机被视为和宿主机同等地位的存在\",{\"1\":{\"730\":1}}],[\"虚拟机只能和宿主机通信\",{\"1\":{\"729\":1}}],[\"虚拟机之间\",{\"1\":{\"727\":1}}],[\"虚拟机的创建过程\",{\"1\":{\"1373\":1}}],[\"虚拟机的网络也就挂了\",{\"1\":{\"728\":1}}],[\"虚拟机的网络比较依赖宿主机的网络\",{\"1\":{\"728\":1}}],[\"虚拟机的网络模式\",{\"0\":{\"727\":1}}],[\"虚拟机的管理\",{\"1\":{\"725\":1}}],[\"虚拟机的一个杂谈\",{\"1\":{\"685\":1}}],[\"虚拟机是由\",{\"1\":{\"695\":1,\"1395\":1}}],[\"虚拟机通过这个指针来确定这个对象是哪个类的实例\",{\"1\":{\"677\":1}}],[\"虚拟机art\",{\"1\":{\"664\":1}}],[\"虚拟机都是这样的\",{\"1\":{\"655\":1}}],[\"虚拟机都采取了解释器与编译器并存的运行架构\",{\"1\":{\"655\":1}}],[\"虚拟机替换成了\",{\"1\":{\"652\":1}}],[\"虚拟机规范呢\",{\"1\":{\"652\":1}}],[\"虚拟机规范\",{\"1\":{\"652\":1}}],[\"虚拟机相关的基础知识和软硬件结合点\",{\"1\":{\"651\":1}}],[\"虚拟机\",{\"0\":{\"651\":1,\"685\":1},\"1\":{\"651\":1,\"652\":1,\"667\":2,\"727\":4,\"728\":1,\"1365\":1}}],[\"虚拟资源\",{\"1\":{\"641\":1}}],[\"虚拟私有云\",{\"1\":{\"640\":1}}],[\"虚拟地址\",{\"1\":{\"261\":1}}],[\"虚拟地址经过\",{\"1\":{\"252\":1}}],[\"虚拟地址是由物理地址转化而来的\",{\"1\":{\"250\":1}}],[\"虚拟进程与页表\",{\"0\":{\"252\":1}}],[\"虚拟内存支持以受保护的方式在多个同时活跃的进程之间共享主存\",{\"1\":{\"253\":1}}],[\"虚拟内存一般可以设置为主存的\",{\"1\":{\"253\":1}}],[\"虚拟内存允许单个程序将其地址空间扩展到超出主存的限制\",{\"1\":{\"253\":1}}],[\"虚拟内存可以理解成在主存和辅存\",{\"1\":{\"253\":1}}],[\"虚拟内存为每个进程提供了单独的地址空间\",{\"1\":{\"251\":1}}],[\"虚拟内存具体是如何实现进程之间的隔离的\",{\"1\":{\"251\":1}}],[\"虚拟内存\",{\"1\":{\"251\":1,\"1318\":1}}],[\"虚拟内存是保证进程之间隔离的重要机制之一\",{\"1\":{\"251\":1}}],[\"虚拟内存与进程\",{\"0\":{\"251\":1}}],[\"虚拟内存的存在使得程序可以使用比可用物理内存更多的存储空间\",{\"1\":{\"250\":1}}],[\"什么才算做\",{\"1\":{\"667\":1}}],[\"什么条件下对应使用什么策略\",{\"1\":{\"590\":1}}],[\"什么是\",{\"0\":{\"869\":1,\"871\":1,\"878\":1},\"1\":{\"548\":1,\"825\":1,\"1438\":2,\"1468\":1,\"1501\":1,\"1583\":1}}],[\"什么是元类\",{\"0\":{\"438\":1}}],[\"什么时候被触发\",{\"0\":{\"1374\":1}}],[\"什么时候将要访问数据的\",{\"1\":{\"226\":1}}],[\"什么时候会剩下呢\",{\"1\":{\"91\":1}}],[\"元数据\",{\"1\":{\"665\":1}}],[\"元类是类的模板\",{\"1\":{\"438\":1}}],[\"元类\",{\"0\":{\"437\":1}}],[\"元素均值为0\",{\"1\":{\"1212\":1}}],[\"元素使其成为先进先出队列\",{\"1\":{\"406\":1}}],[\"元素都是在队列头部的\",{\"1\":{\"59\":1}}],[\"元素\",{\"1\":{\"11\":2,\"674\":1}}],[\"绑定解绑分别对应的写法为\",{\"1\":{\"1609\":1}}],[\"绑定到\",{\"1\":{\"1602\":1}}],[\"绑定到自己的页表\",{\"1\":{\"252\":1}}],[\"绑定\",{\"1\":{\"1597\":1}}],[\"绑定信息\",{\"1\":{\"1597\":1}}],[\"绑定变量的值\",{\"1\":{\"937\":1}}],[\"绑定了一个新的属性\",{\"1\":{\"436\":1}}],[\"未超阀值轮询时间\",{\"1\":{\"1598\":1}}],[\"未初始化的全局变量和局部静态变量\",{\"1\":{\"1460\":1}}],[\"未来将出现更多高精度的室内定位技术\",{\"1\":{\"1012\":1}}],[\"未完成连接队列中的任何一项在其中的存留时间就是一个\",{\"1\":{\"951\":1}}],[\"未完成连接队列\",{\"1\":{\"951\":1}}],[\"未定位到的\",{\"1\":{\"759\":1}}],[\"未命名的局部标识符\",{\"1\":{\"692\":1}}],[\"未命中的时候的代价变大\",{\"1\":{\"210\":1}}],[\"未找到就返回\",{\"1\":{\"467\":1}}],[\"未被调用\",{\"1\":{\"432\":1}}],[\"✨✨✨\",{\"1\":{\"432\":1}}],[\"少的话会发生什么呢\",{\"1\":{\"432\":1}}],[\"`add\",{\"1\":{\"1449\":1}}],[\"`main\",{\"1\":{\"1449\":1}}],[\"`bias`\",{\"1\":{\"1186\":1}}],[\"`tf\",{\"1\":{\"1186\":1}}],[\"`filter`\",{\"1\":{\"1186\":1}}],[\"`input`\",{\"1\":{\"1186\":1}}],[\"`value`\",{\"1\":{\"1186\":1}}],[\"`v\",{\"1\":{\"941\":1}}],[\"`$\",{\"1\":{\"906\":1}}],[\"`\",{\"1\":{\"431\":1,\"906\":1,\"1434\":9,\"1448\":2,\"1449\":2}}],[\"`object\",{\"1\":{\"431\":1}}],[\"完\",{\"1\":{\"1012\":1}}],[\"完整性保护\",{\"1\":{\"996\":1}}],[\"完整的特殊方法列表可在这里查看\",{\"1\":{\"428\":1}}],[\"完成\",{\"1\":{\"1475\":1,\"1477\":1,\"1597\":1}}],[\"完成了什么事情\",{\"1\":{\"1329\":1}}],[\"完成了实际的功能\",{\"1\":{\"696\":1,\"1396\":1}}],[\"完成以后\",{\"1\":{\"1293\":1,\"1380\":1}}],[\"完成上述命令以后\",{\"1\":{\"1253\":1}}],[\"完成之后\",{\"1\":{\"1145\":1}}],[\"完成之后目录结构类似于\",{\"1\":{\"864\":1}}],[\"完成的时候\",{\"1\":{\"587\":1}}],[\"完美无缺\",{\"1\":{\"605\":1}}],[\"完全二叉搜索树编码\",{\"1\":{\"1166\":1}}],[\"完全可以随时换个地方另起炉灶\",{\"1\":{\"1030\":1}}],[\"完全不适合计算密集型任务\",{\"1\":{\"280\":1}}],[\"完全背包总结\",{\"1\":{\"1068\":1}}],[\"完全背包正着来\",{\"1\":{\"139\":1}}],[\"完全背包的内层循环是正着来的\",{\"1\":{\"128\":1}}],[\"完全背包的递推公式和\",{\"1\":{\"128\":1}}],[\"完全背包中的每种物品都有无限件可以用\",{\"1\":{\"127\":1}}],[\"完全背包组合问题\",{\"1\":{\"115\":2}}],[\"完全背包最大最小值问题\",{\"1\":{\"115\":2}}],[\"完全背包\",{\"0\":{\"115\":1,\"127\":1},\"1\":{\"115\":1,\"1068\":1}}],[\"完全背包问题的伪代码如下所示\",{\"1\":{\"139\":1}}],[\"完全背包问题\",{\"1\":{\"112\":1,\"130\":1,\"132\":1,\"136\":1,\"138\":1}}],[\"完全平方数\",{\"0\":{\"31\":1,\"131\":1,\"132\":1},\"1\":{\"115\":1,\"132\":1}}],[\"拓展\",{\"1\":{\"424\":1,\"454\":1}}],[\"装饰的方法由于持有\",{\"1\":{\"421\":1}}],[\"装饰器让我们实现上述功能\",{\"1\":{\"421\":1}}],[\"装饰器来优雅地实现这个功能\",{\"1\":{\"408\":1}}],[\"倒数第二个作用域包含当前模块的全局名称\",{\"1\":{\"418\":1}}],[\"倒着来\",{\"1\":{\"126\":1}}],[\"倒着循环能够保证在推\",{\"1\":{\"120\":1}}],[\"变成了\",{\"1\":{\"432\":1}}],[\"变量属性\",{\"1\":{\"1554\":1}}],[\"变量仅适用于每个\",{\"1\":{\"1529\":1}}],[\"变量的值\",{\"1\":{\"1529\":1}}],[\"变量的应用\",{\"1\":{\"1450\":1}}],[\"变量\",{\"0\":{\"1441\":1},\"1\":{\"418\":1,\"1418\":1,\"1529\":1}}],[\"变化为\",{\"1\":{\"92\":1}}],[\"您还可以发现在\",{\"1\":{\"418\":1}}],[\"赋值之前没有\",{\"1\":{\"418\":1}}],[\"赋值会改变模块层级的绑定\",{\"1\":{\"418\":1}}],[\"赋值会改变\",{\"1\":{\"418\":1}}],[\"赋值\",{\"1\":{\"418\":1,\"454\":1}}],[\"赋值为\",{\"1\":{\"22\":1}}],[\"局部标识符还存在两种命名方式\",{\"1\":{\"692\":1}}],[\"局部变量\",{\"1\":{\"692\":1}}],[\"局部变量区栈帧\",{\"1\":{\"667\":1}}],[\"局部变量区\",{\"1\":{\"667\":1}}],[\"局部\",{\"1\":{\"418\":1}}],[\"局部性是计算机系统中的一种可预测的行为\",{\"1\":{\"192\":1}}],[\"局部性原理\",{\"1\":{\"191\":1}}],[\"异常外不期望接收任何异常\",{\"1\":{\"1483\":1}}],[\"异常类\",{\"1\":{\"1483\":1}}],[\"异常级别\",{\"1\":{\"1483\":1}}],[\"异常码会写入\",{\"1\":{\"1483\":1}}],[\"异常向量实现了更加详细的\",{\"1\":{\"1498\":1}}],[\"异常向量\",{\"1\":{\"1482\":1}}],[\"异常终止\",{\"1\":{\"983\":1}}],[\"异常终止连接丢弃任何待发数据立即发送\",{\"1\":{\"983\":1}}],[\"异常终止一个连接\",{\"1\":{\"983\":1}}],[\"异常处理器表\",{\"1\":{\"665\":1}}],[\"异构\",{\"1\":{\"605\":1}}],[\"异步调用等\",{\"1\":{\"878\":1}}],[\"异步\",{\"1\":{\"414\":1}}],[\"异或实现\",{\"1\":{\"180\":1}}],[\"支持哪些\",{\"1\":{\"1534\":1}}],[\"支持多个\",{\"1\":{\"1508\":1}}],[\"支持获取二进制文件\",{\"1\":{\"1424\":1}}],[\"支持国际化\",{\"1\":{\"873\":1}}],[\"支持全文索引\",{\"1\":{\"815\":1}}],[\"支持外检\",{\"1\":{\"814\":1}}],[\"支持主流的编程语言\",{\"1\":{\"725\":1}}],[\"支持\",{\"1\":{\"411\":1,\"690\":1}}],[\"码\",{\"1\":{\"390\":1}}],[\"转为\",{\"1\":{\"1333\":1}}],[\"转载请附上原文出处链接及本声明\",{\"1\":{\"1179\":1}}],[\"转化其为二叉平衡树\",{\"1\":{\"1169\":1}}],[\"转化为\",{\"1\":{\"618\":1}}],[\"转换为\",{\"1\":{\"1365\":1}}],[\"转换为数字信号\",{\"1\":{\"1020\":1}}],[\"转换成\",{\"1\":{\"388\":1}}],[\"转变你的心态\",{\"1\":{\"1030\":1}}],[\"转变\",{\"1\":{\"983\":1}}],[\"转而测试其他的部分候选解\",{\"1\":{\"5\":1}}],[\"扩展\",{\"1\":{\"388\":1,\"442\":1}}],[\"扩展问题\",{\"1\":{\"103\":1}}],[\"$>\",{\"1\":{\"1159\":1}}],[\"$file\",{\"1\":{\"1145\":2}}],[\"$2\",{\"1\":{\"1124\":1}}],[\"$path\",{\"1\":{\"1073\":1}}],[\"$lt\",{\"1\":{\"793\":1}}],[\"$currentdate\",{\"1\":{\"793\":3}}],[\"$site\",{\"1\":{\"910\":1,\"933\":1}}],[\"$set\",{\"1\":{\"793\":2}}],[\"$sudo\",{\"1\":{\"786\":1}}],[\"$gt\",{\"1\":{\"792\":1}}],[\"$upstream\",{\"1\":{\"766\":1}}],[\"$0x1\",{\"1\":{\"1463\":1}}],[\"$0x10\",{\"1\":{\"1463\":2}}],[\"$0x0\",{\"1\":{\"1463\":1}}],[\"$0\",{\"1\":{\"751\":1}}],[\"$4\",{\"1\":{\"751\":3}}],[\"$3\",{\"1\":{\"751\":3,\"1125\":1}}],[\"$answer\",{\"1\":{\"748\":1}}],[\"$\",{\"1\":{\"378\":2,\"411\":1,\"693\":1,\"713\":1,\"717\":3,\"746\":1,\"747\":2,\"749\":2,\"751\":1,\"759\":1,\"783\":1,\"786\":3,\"906\":5,\"1145\":4,\"1159\":1,\"1418\":1,\"1421\":2,\"1424\":12,\"1426\":2,\"1427\":3,\"1428\":1,\"1429\":1,\"1432\":1,\"1434\":1,\"1445\":14,\"1446\":6,\"1448\":4,\"1449\":4,\"1463\":2,\"1464\":1,\"1634\":2,\"1635\":1}}],[\"集成电路拆了再焊新的上去\",{\"1\":{\"1501\":1}}],[\"集成现有技术实现一个基于yolo算法的人脸识别系统是一项很有挑战性的工作\",{\"1\":{\"1151\":1}}],[\"集成性等都得到了极大的提升\",{\"1\":{\"1151\":1}}],[\"集中管理固件\",{\"1\":{\"377\":1}}],[\"集合\",{\"1\":{\"120\":1,\"299\":1}}],[\"集合中有重复的元素\",{\"1\":{\"13\":1}}],[\"哪个没通过\",{\"1\":{\"375\":1}}],[\"哪怕虚拟地址相同\",{\"1\":{\"251\":1}}],[\"预设\",{\"1\":{\"1608\":1}}],[\"预训练之后\",{\"1\":{\"1156\":1}}],[\"预备工作\",{\"0\":{\"712\":1,\"1144\":1}}],[\"预热期间被调用了\",{\"1\":{\"660\":1}}],[\"预编译成\",{\"1\":{\"653\":1}}],[\"预处理和后处理\",{\"0\":{\"378\":1}}],[\"预见的错误\",{\"0\":{\"374\":1}}],[\"预测框的准确度也反映在该乘积中\",{\"1\":{\"1155\":1}}],[\"预测之中的一些细节\",{\"1\":{\"601\":1}}],[\"预测历史的影响\",{\"1\":{\"576\":1,\"577\":1}}],[\"预测和指令和不通过\",{\"1\":{\"576\":1}}],[\"预测是否与数据的位置或者值有关\",{\"1\":{\"571\":1}}],[\"预测是否正确\",{\"1\":{\"243\":1}}],[\"预测值必须在\",{\"1\":{\"557\":1}}],[\"预测必须重新设计\",{\"1\":{\"549\":1}}],[\"预测的准确度越高\",{\"1\":{\"1021\":1}}],[\"预测的指令\",{\"1\":{\"576\":1}}],[\"预测的延迟似乎不是一个问题\",{\"1\":{\"552\":1}}],[\"预测的值需要在所有的\",{\"1\":{\"549\":1}}],[\"预测的\",{\"1\":{\"549\":1}}],[\"预测的验证可以在\",{\"1\":{\"543\":1}}],[\"预测的设计思路在于\",{\"1\":{\"543\":1}}],[\"预测器的工作方式如下\",{\"1\":{\"587\":1}}],[\"预测器在\",{\"1\":{\"587\":1}}],[\"预测器在有\",{\"1\":{\"562\":1}}],[\"预测器备份\",{\"1\":{\"559\":1}}],[\"预测器是如何实现的\",{\"1\":{\"559\":1}}],[\"预测器可以完美预测\",{\"1\":{\"556\":1}}],[\"预测器可以理解为一个\",{\"1\":{\"545\":1}}],[\"预测器可以被添加在任何\",{\"1\":{\"545\":1}}],[\"预测器而言\",{\"1\":{\"545\":2}}],[\"预测器\",{\"1\":{\"543\":1,\"545\":2,\"559\":1,\"562\":1,\"599\":1}}],[\"预测大思想的完美应用\",{\"1\":{\"193\":1}}],[\"选取图像中的某一部分作为兴趣区域\",{\"1\":{\"1021\":1}}],[\"选题背景\",{\"0\":{\"1013\":1}}],[\"选择的接口\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"选择合适的命令和选项来进行操作\",{\"1\":{\"1454\":1}}],[\"选择代码库中的清单文件\",{\"1\":{\"1240\":1}}],[\"选择一个\",{\"1\":{\"1516\":1}}],[\"选择一个适当的batch\",{\"1\":{\"1185\":1}}],[\"选择一个版本下载完成后\",{\"1\":{\"1177\":1}}],[\"选择一个组件的\",{\"1\":{\"559\":1}}],[\"选择图表并加入购物车\",{\"1\":{\"1102\":1}}],[\"选择load→ok→save→ok→exit→exit的执行顺序\",{\"1\":{\"713\":1}}],[\"选择标记的函数\",{\"1\":{\"372\":1}}],[\"选项可以查看\",{\"1\":{\"1464\":1}}],[\"选项打印出每一个段的基本信息\",{\"1\":{\"1463\":1}}],[\"选项是可以打印出\",{\"1\":{\"1462\":1}}],[\"选项指定端口号\",{\"1\":{\"1453\":1}}],[\"选项指定名称\",{\"1\":{\"381\":1}}],[\"选项来递归复制整个目录\",{\"1\":{\"1453\":1}}],[\"选项\",{\"1\":{\"1240\":1,\"1448\":1,\"1453\":4}}],[\"选项看是否被实际调用了\",{\"1\":{\"658\":1}}],[\"选项跟踪更细额固件执行\",{\"1\":{\"378\":1}}],[\"选修\",{\"1\":{\"86\":1}}],[\"脚本来进行安卓\",{\"1\":{\"1227\":1}}],[\"脚本\",{\"0\":{\"1230\":1},\"1\":{\"372\":1}}],[\"捕获异常\",{\"0\":{\"371\":1}}],[\"入门\",{\"0\":{\"370\":1,\"607\":1,\"635\":1,\"1212\":1}}],[\"入栈指令\",{\"1\":{\"531\":1}}],[\"入栈以后再遍历左边\",{\"1\":{\"64\":1}}],[\"入栈\",{\"1\":{\"64\":1,\"465\":1}}],[\"手动打开\",{\"1\":{\"1275\":1}}],[\"手写数字识别\",{\"0\":{\"1185\":1}}],[\"手册\",{\"1\":{\"361\":1,\"537\":1}}],[\"手工实现在很多情况下都需要调试\",{\"1\":{\"20\":1}}],[\"手工实现\",{\"1\":{\"19\":1,\"20\":1,\"21\":1}}],[\"否\",{\"1\":{\"361\":2}}],[\"否则失败\",{\"1\":{\"1602\":1}}],[\"否则我就用广播的事件时间就可以了\",{\"1\":{\"1545\":1}}],[\"否则还需要等待\",{\"1\":{\"1333\":1}}],[\"否则的话\",{\"1\":{\"1269\":1,\"1366\":1}}],[\"否则该项也是无法计算的\",{\"1\":{\"1156\":1}}],[\"否则进行拥塞避免\",{\"1\":{\"987\":1}}],[\"否则数据将无法发送成功\",{\"1\":{\"981\":1}}],[\"否则就需要分片\",{\"1\":{\"980\":1}}],[\"否则发送消息\",{\"1\":{\"742\":1}}],[\"否则接收到消息值\",{\"1\":{\"742\":1}}],[\"否则不匹配的话\",{\"1\":{\"584\":1}}],[\"否则不跳转\",{\"1\":{\"517\":1}}],[\"否则往下\",{\"1\":{\"517\":3}}],[\"否则直接往下走\",{\"1\":{\"517\":2}}],[\"否则会调用\",{\"1\":{\"1542\":1}}],[\"否则会返回实际发送的字节\",{\"1\":{\"980\":1}}],[\"否则会报错\",{\"1\":{\"424\":1}}],[\"否则会出现死循环\",{\"1\":{\"22\":1}}],[\"否则抛出硬件异常\",{\"1\":{\"229\":1}}],[\"否则\",{\"1\":{\"87\":1,\"156\":1,\"186\":1,\"534\":1,\"742\":1,\"1298\":1,\"1526\":1}}],[\"否则返回\",{\"1\":{\"75\":1}}],[\"创建处理器\",{\"0\":{\"1627\":1}}],[\"创建页表\",{\"1\":{\"1498\":1}}],[\"创建的实例保存在静态成员变量\",{\"1\":{\"1366\":1}}],[\"创建新的binder线程\",{\"1\":{\"1310\":1}}],[\"创建binder线程\",{\"1\":{\"1299\":1}}],[\"创建了一个名为\",{\"1\":{\"1298\":1}}],[\"创建并切换到该分支\",{\"1\":{\"1252\":1}}],[\"创建分支\",{\"1\":{\"1252\":1}}],[\"创建数据集文件\",{\"1\":{\"1162\":1}}],[\"创建事件\",{\"1\":{\"961\":1}}],[\"创建模型和表字段\",{\"1\":{\"819\":1}}],[\"创建cur游标对象用于执行sql命令\",{\"1\":{\"797\":1}}],[\"创建失败\",{\"1\":{\"742\":1}}],[\"创建一个带缓冲区的事件\",{\"1\":{\"962\":1}}],[\"创建一个事件\",{\"1\":{\"961\":1}}],[\"创建一个事件处理框架\",{\"1\":{\"961\":1}}],[\"创建一个共享内存的方式一般如下\",{\"1\":{\"743\":1}}],[\"创建一个\",{\"1\":{\"742\":1,\"1366\":1}}],[\"创建一个自身的副本\",{\"1\":{\"739\":1}}],[\"创建一个子类对象仅调用顶层父类初始化函数一次\",{\"1\":{\"426\":1}}],[\"创建子进程失败\",{\"1\":{\"738\":1}}],[\"创建进程\",{\"1\":{\"702\":1}}],[\"创建后\",{\"1\":{\"701\":1}}],[\"创建型模式\",{\"1\":{\"629\":1}}],[\"创建临时文件\",{\"1\":{\"383\":1}}],[\"创建目临时录\",{\"1\":{\"383\":1}}],[\"创建\",{\"0\":{\"702\":1},\"1\":{\"361\":4,\"741\":1,\"952\":1,\"1293\":1,\"1295\":1,\"1297\":1,\"1556\":2}}],[\"切记\",{\"1\":{\"348\":1}}],[\"切换到目标状态\",{\"1\":{\"1523\":1}}],[\"切换到指定的空闲状态\",{\"1\":{\"1523\":1}}],[\"切换的时候发送\",{\"1\":{\"1479\":1}}],[\"切换回master分支\",{\"1\":{\"1252\":1}}],[\"切换分支\",{\"1\":{\"1252\":1}}],[\"切换分支还是使用\",{\"1\":{\"1239\":1}}],[\"切换镜像仓到国内\",{\"0\":{\"619\":1}}],[\"切换线程上下文\",{\"1\":{\"282\":1}}],[\"切换进程上下文\",{\"1\":{\"282\":1}}],[\"免费版还是很好用的\",{\"1\":{\"345\":1}}],[\"^3\",{\"1\":{\"1584\":1}}],[\"^~~~~~~~~~~~\",{\"1\":{\"1448\":1}}],[\"^2\",{\"1\":{\"1239\":1,\"1254\":1,\"1541\":1}}],[\"^1\",{\"1\":{\"1123\":1}}],[\"^0\",{\"1\":{\"909\":1}}],[\"^\",{\"1\":{\"343\":1,\"400\":2,\"411\":1,\"989\":4,\"1181\":3}}],[\"^=\",{\"1\":{\"180\":9}}],[\"电擦除的优点在于更新其的时候不需要把这个东西从电脑中移除\",{\"1\":{\"1501\":1}}],[\"电源管理接口\",{\"1\":{\"1498\":1}}],[\"电脑端乱码\",{\"1\":{\"1114\":1}}],[\"电脑中\",{\"1\":{\"336\":1}}],[\"电话号码的字母组合\",{\"0\":{\"8\":1}}],[\"新封装的函数指针\",{\"1\":{\"1567\":1}}],[\"新版的内核对函数指正进行了封装\",{\"1\":{\"1567\":1}}],[\"新副本才会变成有效的数据\",{\"1\":{\"1524\":1}}],[\"新增的\",{\"1\":{\"1449\":1}}],[\"新增了\",{\"1\":{\"682\":1}}],[\"新分配的对象在\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"新建\",{\"1\":{\"1102\":1}}],[\"新建文件\",{\"1\":{\"336\":1}}],[\"新年快乐~\",{\"1\":{\"1008\":1}}],[\"新年感悟\",{\"0\":{\"1007\":1}}],[\"新的室内定位系统精度较高\",{\"1\":{\"1012\":1}}],[\"新的博客的\",{\"1\":{\"1008\":1}}],[\"新的一年\",{\"1\":{\"1008\":1}}],[\"新的\",{\"1\":{\"587\":1}}],[\"新加入的\",{\"1\":{\"460\":1}}],[\"新数据到来\",{\"1\":{\"208\":1}}],[\"获取温度\",{\"1\":{\"1594\":1}}],[\"获取对应的\",{\"1\":{\"1341\":1}}],[\"获取或创建\",{\"1\":{\"1329\":1}}],[\"获取用户空间数据\",{\"1\":{\"1315\":1}}],[\"获取一个网站的\",{\"1\":{\"998\":1}}],[\"获取一个基地址\",{\"1\":{\"530\":1}}],[\"获取月份的完整拼写\",{\"1\":{\"907\":1}}],[\"获取月份的英文\",{\"1\":{\"905\":1}}],[\"获取不到则继续往下走\",{\"1\":{\"881\":1}}],[\"获取锁和超时时间\",{\"1\":{\"833\":1}}],[\"获取到真实\",{\"1\":{\"761\":1}}],[\"获取\",{\"0\":{\"1275\":1,\"1278\":1,\"1279\":1},\"1\":{\"706\":2,\"1402\":2}}],[\"获取root的前驱节点\",{\"1\":{\"499\":1}}],[\"获取root的后继节点\",{\"1\":{\"499\":2}}],[\"获取命令行参数\",{\"1\":{\"383\":1}}],[\"获取参数\",{\"1\":{\"382\":1}}],[\"获取某列的数据\",{\"0\":{\"331\":1}}],[\"获得更高的执行效率\",{\"1\":{\"655\":1}}],[\"获得字典\",{\"1\":{\"299\":1}}],[\"获得物理地址中的数据\",{\"1\":{\"255\":1}}],[\"文章还提出了一个轻量级版本fast\",{\"1\":{\"1156\":1}}],[\"文章中使用\",{\"1\":{\"601\":1}}],[\"文章提出了\",{\"1\":{\"575\":1}}],[\"文件名可以看到\",{\"1\":{\"1586\":1}}],[\"文件名为a\",{\"1\":{\"717\":1}}],[\"文件2\",{\"1\":{\"1464\":1}}],[\"文件类0\",{\"1\":{\"1464\":1}}],[\"文件类型\",{\"1\":{\"1459\":1,\"1464\":1}}],[\"文件通用的\",{\"1\":{\"1464\":1}}],[\"文件每个段的基本信息\",{\"1\":{\"1462\":1}}],[\"文件得到\",{\"1\":{\"1459\":1}}],[\"文件就被一直使用了\",{\"1\":{\"1441\":1}}],[\"文件就是字节码么\",{\"0\":{\"665\":1}}],[\"文件同在一个路径的有\",{\"1\":{\"1434\":1}}],[\"文件结构的研究\",{\"1\":{\"1371\":1}}],[\"文件结构信息\",{\"1\":{\"664\":1}}],[\"文件设备\",{\"1\":{\"1307\":1}}],[\"文件在远程\",{\"1\":{\"1240\":1}}],[\"文件来制定\",{\"1\":{\"1240\":1}}],[\"文件来实现数据驱动\",{\"1\":{\"388\":1}}],[\"文件里释放宏包文件\",{\"1\":{\"1179\":1}}],[\"文件传输时\",{\"1\":{\"992\":1}}],[\"文件描述符\",{\"1\":{\"955\":1}}],[\"文件描述符越多\",{\"1\":{\"954\":1}}],[\"文件吗\",{\"1\":{\"693\":1}}],[\"文件较小是取决于其中的共享常量池等技术\",{\"1\":{\"688\":1}}],[\"文件较小\",{\"1\":{\"688\":1}}],[\"文件都必须携带自己的常量池以及用于符号链接的符号引用信息\",{\"1\":{\"688\":1}}],[\"文件都是独立存储\",{\"1\":{\"688\":1}}],[\"文件都对应生成一个同名的\",{\"1\":{\"670\":1}}],[\"文件为单位来进行传输与存储的\",{\"1\":{\"688\":1}}],[\"文件解压缩\",{\"1\":{\"671\":1}}],[\"文件新定义了\",{\"1\":{\"670\":1}}],[\"文件可以对应多个\",{\"1\":{\"670\":1}}],[\"文件对应一个\",{\"1\":{\"670\":1}}],[\"文件对应的\",{\"1\":{\"669\":1}}],[\"文件存在很多区别\",{\"1\":{\"670\":1}}],[\"文件和\",{\"1\":{\"670\":1,\"960\":1}}],[\"文件是如何产生的\",{\"1\":{\"1373\":1}}],[\"文件是如何生成的\",{\"1\":{\"669\":1}}],[\"文件是不能被直接解释执行的\",{\"1\":{\"669\":1}}],[\"文件是怎么解析的\",{\"1\":{\"667\":1}}],[\"文件众多组成部分其中之一\",{\"1\":{\"665\":1}}],[\"文件的魔数\",{\"1\":{\"1464\":1}}],[\"文件的\",{\"1\":{\"1464\":1}}],[\"文件的产生\",{\"0\":{\"1373\":1}}],[\"文件的过程分析\",{\"1\":{\"1371\":1}}],[\"文件的一些槽点\",{\"1\":{\"688\":1}}],[\"文件的优势就在这显现出来了\",{\"1\":{\"688\":1}}],[\"文件的小部分\",{\"1\":{\"688\":1}}],[\"文件的话\",{\"1\":{\"671\":1}}],[\"文件的字节序是\",{\"1\":{\"670\":2}}],[\"文件的具体构成\",{\"1\":{\"665\":1}}],[\"文件的操作\",{\"1\":{\"329\":1}}],[\"文件还记录了很多信息\",{\"1\":{\"665\":1}}],[\"文件进行\",{\"1\":{\"1424\":1}}],[\"文件进行翻译\",{\"1\":{\"669\":1}}],[\"文件进行解析\",{\"1\":{\"664\":1,\"671\":1}}],[\"文件进行研究\",{\"1\":{\"664\":1}}],[\"文件中搜索通知链的大写名称即可看到不同类通知链的初始化函数\",{\"1\":{\"1575\":1}}],[\"文件中得到符号表\",{\"1\":{\"1465\":1}}],[\"文件中指向本地\",{\"1\":{\"761\":1}}],[\"文件中存储\",{\"1\":{\"717\":1}}],[\"文件中的奥秘\",{\"1\":{\"664\":1}}],[\"文件中配置了\",{\"1\":{\"624\":1}}],[\"文件格式一般是\",{\"1\":{\"669\":1}}],[\"文件格式版本号\",{\"1\":{\"665\":1}}],[\"文件格式\",{\"0\":{\"663\":1,\"668\":1,\"671\":1}}],[\"文件到\",{\"1\":{\"657\":1}}],[\"文件后追加\",{\"1\":{\"361\":1}}],[\"文件不存在\",{\"1\":{\"361\":1}}],[\"文件操作\",{\"1\":{\"345\":1}}],[\"文件\",{\"1\":{\"336\":1,\"449\":1,\"652\":1,\"657\":2,\"658\":2,\"664\":3,\"669\":1,\"670\":1,\"671\":1,\"693\":1,\"705\":1,\"960\":2,\"1177\":1,\"1248\":1,\"1374\":1,\"1400\":1,\"1424\":2,\"1454\":8,\"1456\":1,\"1463\":1,\"1464\":2,\"1549\":1}}],[\"文件夹中去了\",{\"1\":{\"1448\":1}}],[\"文件夹外面执行\",{\"1\":{\"1145\":1}}],[\"文件夹下面找到\",{\"1\":{\"1448\":1}}],[\"文件夹下面\",{\"1\":{\"658\":1}}],[\"文件夹\",{\"0\":{\"1226\":1},\"1\":{\"336\":1,\"1421\":1}}],[\"文件常用的分割符\",{\"1\":{\"329\":1}}],[\"文档进行理解\",{\"1\":{\"1486\":1}}],[\"文档\",{\"1\":{\"310\":1}}],[\"哦\",{\"1\":{\"329\":1}}],[\"掌握其用法对整体\",{\"1\":{\"328\":1}}],[\"掌握几个关键点\",{\"1\":{\"120\":1}}],[\"环境下强烈推荐这种方式\",{\"1\":{\"1176\":1}}],[\"环境下面使用控制台输出\",{\"1\":{\"326\":1}}],[\"环境中\",{\"1\":{\"445\":1}}],[\"环节\",{\"1\":{\"190\":1}}],[\"针对这个情况\",{\"1\":{\"1269\":1}}],[\"针对这个问题\",{\"1\":{\"325\":1}}],[\"针对ope方法进行研究学习\",{\"1\":{\"1166\":1}}],[\"针对于所有的key\",{\"1\":{\"827\":1}}],[\"针对输入的语言写个编译器前端\",{\"1\":{\"690\":1}}],[\"针对\",{\"1\":{\"648\":1}}],[\"针对已经排序的字符串\",{\"1\":{\"478\":1}}],[\"针对此问题\",{\"1\":{\"23\":1}}],[\"滑动屏幕\",{\"0\":{\"1228\":1}}],[\"滑动窗口是非常耗时的\",{\"1\":{\"1153\":1}}],[\"滑动窗口的实现\",{\"1\":{\"310\":1}}],[\"滑动左指针\",{\"1\":{\"168\":1}}],[\"牛客网上面刷题时可能用到的多组输入输出\",{\"1\":{\"307\":1}}],[\"成员\",{\"1\":{\"1464\":1}}],[\"成为一个企业家创建自己的产品并将其推向市场\",{\"1\":{\"1033\":1}}],[\"成本较高\",{\"1\":{\"1012\":1}}],[\"成功后更新\",{\"1\":{\"1494\":1}}],[\"成功消息\",{\"1\":{\"999\":1}}],[\"成功创建\",{\"1\":{\"742\":1}}],[\"成功\",{\"1\":{\"603\":1,\"1602\":1}}],[\"成功给全局变量赋值\",{\"1\":{\"418\":1}}],[\"成功之后\",{\"1\":{\"274\":1}}],[\"成了\",{\"1\":{\"303\":1}}],[\"背景\",{\"1\":{\"296\":1}}],[\"背包在外循环\",{\"1\":{\"138\":1}}],[\"背包相同\",{\"1\":{\"128\":1}}],[\"背包十分相似\",{\"1\":{\"128\":1}}],[\"背包的伪代码可以为\",{\"1\":{\"126\":1}}],[\"背包倒着来\",{\"1\":{\"125\":1}}],[\"背包倒着循环\",{\"1\":{\"118\":1,\"120\":1}}],[\"背包从后往前\",{\"1\":{\"120\":1}}],[\"背包容量在外\",{\"1\":{\"139\":1}}],[\"背包容量\",{\"1\":{\"118\":1}}],[\"背包true\",{\"1\":{\"114\":1}}],[\"背包最大最小值问题\",{\"1\":{\"114\":2}}],[\"背包\",{\"0\":{\"114\":1,\"116\":1,\"1068\":1},\"1\":{\"120\":1}}],[\"背包和完全背包\",{\"1\":{\"112\":1}}],[\"背包问题只有一种容量\",{\"1\":{\"120\":1}}],[\"背包问题外层循环物体\",{\"1\":{\"120\":1}}],[\"背包问题比较简单\",{\"1\":{\"116\":1}}],[\"背包问题\",{\"1\":{\"112\":1,\"120\":2,\"122\":1,\"124\":1,\"125\":1}}],[\"背包问题可以大致分为三类\",{\"1\":{\"112\":1}}],[\"背包组合问题\",{\"1\":{\"112\":1,\"114\":1,\"124\":1,\"1068\":1}}],[\"月\",{\"1\":{\"291\":1}}],[\"月的第几天\",{\"1\":{\"291\":1}}],[\"作用于特定的硬件\",{\"1\":{\"1501\":1}}],[\"作用于整体网络\",{\"1\":{\"986\":1}}],[\"作用\",{\"1\":{\"1310\":1}}],[\"作用域与命名空间\",{\"1\":{\"439\":1}}],[\"作用域和命名空间\",{\"0\":{\"418\":1}}],[\"作用域可以用来指定固件的作用范围\",{\"1\":{\"379\":1}}],[\"作用域\",{\"0\":{\"379\":1},\"1\":{\"379\":1,\"380\":2}}],[\"作者复用了他之前的一个研究\",{\"1\":{\"1355\":1}}],[\"作者刚开始就对现有的页表机制做了抨击\",{\"1\":{\"1355\":1}}],[\"作者是john\",{\"1\":{\"1028\":1}}],[\"作者的一些描述\",{\"1\":{\"688\":1}}],[\"作者通过对\",{\"1\":{\"601\":1}}],[\"作者从几个方面来论证\",{\"1\":{\"600\":1}}],[\"作者缩小了预测的范围\",{\"1\":{\"600\":1}}],[\"作者对预测的范围也进行了一个限制\",{\"1\":{\"600\":1}}],[\"作者对比了其他人的研究结果\",{\"1\":{\"599\":1}}],[\"作者将值局部性定义为了以前在某个存储位置出现过的值还有可能再次重复出现\",{\"1\":{\"600\":1}}],[\"作者确实使用了预测+验证的机制\",{\"1\":{\"599\":1}}],[\"作者阐述了\",{\"1\":{\"599\":1}}],[\"作者阐述了一下\",{\"1\":{\"563\":1}}],[\"作者提出了一个新的复合预测器\",{\"1\":{\"580\":1}}],[\"作者选择了一个慢的前端耦合到快速的后端中\",{\"1\":{\"564\":1}}],[\"作者模拟了相当激进的\",{\"1\":{\"564\":1}}],[\"作者发现使用\",{\"1\":{\"558\":1}}],[\"作者说明了减少寄存器的数量不在本文的研究范围之内\",{\"1\":{\"557\":1}}],[\"作者说在未来的多核架构中\",{\"1\":{\"542\":1}}],[\"作者在后面通过实验的结果阐述了\",{\"1\":{\"552\":1}}],[\"作者在当代语境\",{\"1\":{\"542\":1}}],[\"作者引入了一个新的预测器\",{\"1\":{\"542\":1}}],[\"作业来执行上面的脚本来输出到另一个文件\",{\"1\":{\"291\":1}}],[\"作为中枢注册\",{\"1\":{\"1601\":1}}],[\"作为进程映像的一部分来执行\",{\"1\":{\"1459\":1}}],[\"作为进程名\",{\"1\":{\"703\":1}}],[\"作为返回的\",{\"1\":{\"982\":1}}],[\"作为\",{\"1\":{\"982\":1,\"1601\":1,\"1608\":1,\"1610\":1}}],[\"作为这个\",{\"1\":{\"980\":1}}],[\"作为消息代理和后端存储\",{\"1\":{\"842\":1}}],[\"作为内存地址\",{\"1\":{\"524\":1}}],[\"作为辅助操作\",{\"1\":{\"466\":1}}],[\"作为切片\",{\"1\":{\"397\":1}}],[\"作为页表的\",{\"1\":{\"255\":1}}],[\"作为答案\",{\"1\":{\"169\":1}}],[\"作为对比\",{\"1\":{\"157\":1}}],[\"语义差异也较大\",{\"1\":{\"1022\":1}}],[\"语言入口\",{\"1\":{\"1556\":1}}],[\"语言中的宏\",{\"1\":{\"1441\":1}}],[\"语言\",{\"0\":{\"947\":1}}],[\"语言写的\",{\"1\":{\"695\":2,\"1395\":2}}],[\"语言写的函数\",{\"1\":{\"695\":1,\"1395\":1}}],[\"语言目标是成为一种通用中间语言\",{\"1\":{\"690\":1}}],[\"语言编写\",{\"1\":{\"280\":1}}],[\"语法格式如下\",{\"1\":{\"424\":1}}],[\"语法进行声明\",{\"1\":{\"414\":1}}],[\"语法\",{\"1\":{\"325\":1,\"392\":1}}],[\"语句创建表字段\",{\"1\":{\"819\":1}}],[\"语句中加载\",{\"1\":{\"696\":1,\"1396\":1}}],[\"语句结束\",{\"1\":{\"691\":1}}],[\"语句\",{\"1\":{\"288\":1}}],[\"确认\",{\"1\":{\"984\":1}}],[\"确保传进来的\",{\"1\":{\"1607\":1}}],[\"确保\",{\"1\":{\"1571\":1}}],[\"确保在任何情况下返回的都是\",{\"1\":{\"1521\":1}}],[\"确保每个线程只有一个实例对象\",{\"1\":{\"1333\":1}}],[\"确保对象的字段可以出现在同一个\",{\"1\":{\"679\":1}}],[\"确保我们的多进程的相关执行在\",{\"1\":{\"288\":1}}],[\"确定启动路径\",{\"1\":{\"1481\":1}}],[\"确定这些对象应该继续存活还是被回收\",{\"1\":{\"1380\":1}}],[\"确定指定了正确的文件路径\",{\"1\":{\"288\":1}}],[\"确定的时候\",{\"1\":{\"261\":1}}],[\"参数含义如下\",{\"1\":{\"1570\":1}}],[\"参数相同\",{\"1\":{\"1534\":1}}],[\"参数false表示不需要检查是否处于内核软件调试状态\",{\"1\":{\"1524\":1}}],[\"参数将所有包含指令的段反汇编\",{\"1\":{\"1463\":1}}],[\"参数将所有的内容以\",{\"1\":{\"1463\":1}}],[\"参数可以打印出详细信息\",{\"1\":{\"1462\":1}}],[\"参数可以将所有包含指令的段反汇编\",{\"1\":{\"1462\":1}}],[\"参数可以将所有段的内容以\",{\"1\":{\"1462\":1}}],[\"参数带在\",{\"1\":{\"998\":1}}],[\"参数2\",{\"1\":{\"424\":2}}],[\"参数1\",{\"1\":{\"424\":2}}],[\"参数进行指定\",{\"1\":{\"1240\":1}}],[\"参数进行参数化\",{\"1\":{\"382\":1}}],[\"参数进行自定义\",{\"1\":{\"375\":1}}],[\"参数声明作用域\",{\"1\":{\"379\":1}}],[\"参数阻止消息被吞\",{\"1\":{\"378\":1}}],[\"参数化的用法\",{\"1\":{\"382\":1}}],[\"参数化测试可以保证每组参数都独立进行一次测试\",{\"1\":{\"375\":1}}],[\"参数化\",{\"0\":{\"375\":1,\"382\":1}}],[\"参数校验\",{\"1\":{\"354\":1}}],[\"参数\",{\"1\":{\"288\":1,\"293\":1,\"302\":1,\"303\":1,\"380\":1,\"421\":1,\"422\":1,\"950\":1,\"1298\":1,\"1333\":1,\"1342\":1,\"1542\":1,\"1567\":3,\"1570\":1,\"1573\":1}}],[\"参考教程\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"参考libevent\",{\"1\":{\"962\":1}}],[\"参考这个教程\",{\"1\":{\"1107\":1}}],[\"参考这里的\",{\"1\":{\"961\":1}}],[\"参考这篇文章\",{\"1\":{\"844\":1}}],[\"参考这篇教程\",{\"1\":{\"411\":1}}],[\"参考程序\",{\"1\":{\"961\":1}}],[\"参考文档\",{\"1\":{\"618\":1}}],[\"参考文献\",{\"0\":{\"37\":1,\"140\":1,\"439\":1},\"1\":{\"418\":1,\"610\":1}}],[\"参考视频\",{\"1\":{\"23\":1}}],[\"参考\",{\"0\":{\"22\":1},\"1\":{\"195\":1,\"590\":1,\"731\":1,\"885\":1,\"1486\":1}}],[\"参考该blog\",{\"1\":{\"10\":1}}],[\"筛选\",{\"1\":{\"285\":1}}],[\"附自动刷抖音脚本实例\",{\"1\":{\"1287\":1}}],[\"附近\",{\"1\":{\"1124\":1}}],[\"附加段\",{\"1\":{\"282\":1}}],[\"附上官方的解释\",{\"1\":{\"418\":1}}],[\"附上\",{\"1\":{\"184\":1}}],[\"协商通信双方的\",{\"1\":{\"980\":1}}],[\"协程对象\",{\"1\":{\"414\":1}}],[\"协程函数\",{\"1\":{\"414\":1}}],[\"协程有两个紧密关联的概念\",{\"1\":{\"414\":1}}],[\"协程通过\",{\"1\":{\"414\":1}}],[\"协程\",{\"0\":{\"414\":1}}],[\"协程调度切换时\",{\"1\":{\"282\":1}}],[\"协程拥有自己的寄存器上下文和栈\",{\"1\":{\"282\":1}}],[\"协程上下文切换\",{\"0\":{\"282\":1}}],[\"协议定义了数据如何发送\",{\"1\":{\"1507\":1}}],[\"协议进行加密传输\",{\"1\":{\"1453\":1}}],[\"协议的直接调用处\",{\"1\":{\"1311\":1}}],[\"协议的基本功能就是通过目标设备的\",{\"1\":{\"993\":1}}],[\"协议规范也没有进行大小限制\",{\"1\":{\"998\":1}}],[\"协议会检查每个从上层协议下来的数据包的大小\",{\"1\":{\"981\":1}}],[\"协议中\",{\"1\":{\"224\":1}}],[\"协议中有\",{\"1\":{\"224\":1}}],[\"协议对此没有做任何要求\",{\"1\":{\"224\":1}}],[\"协议就可以描述这种共享状态\",{\"1\":{\"224\":1}}],[\"协议\",{\"1\":{\"224\":1,\"225\":2,\"971\":1,\"977\":3,\"997\":3}}],[\"资源的释放\",{\"1\":{\"961\":1}}],[\"资源\",{\"1\":{\"280\":1,\"988\":1}}],[\"执行级别\",{\"1\":{\"1557\":1}}],[\"执行必须在初始化\",{\"1\":{\"1557\":1}}],[\"执行以下逻辑\",{\"1\":{\"1545\":1}}],[\"执行以上操作后\",{\"1\":{\"273\":1}}],[\"执行具体情况\",{\"1\":{\"1333\":1}}],[\"执行命令进入fastboot\",{\"1\":{\"1285\":1}}],[\"执行该命令以后\",{\"1\":{\"1241\":1}}],[\"执行过后\",{\"1\":{\"1162\":1}}],[\"执行上述代码安装\",{\"1\":{\"1161\":1}}],[\"执行下一步\",{\"1\":{\"1145\":1}}],[\"执行完以后基本上就完成了\",{\"1\":{\"1145\":1}}],[\"执行完成\",{\"1\":{\"602\":1}}],[\"执行完成以后\",{\"1\":{\"599\":1}}],[\"执行慢启动算法一般是\",{\"1\":{\"987\":1}}],[\"执行异常关闭\",{\"1\":{\"983\":1}}],[\"执行态\",{\"1\":{\"736\":1}}],[\"执行这个命令之后\",{\"1\":{\"658\":1}}],[\"执行机器码\",{\"1\":{\"653\":1}}],[\"执行的主要操作如下\",{\"1\":{\"1557\":1}}],[\"执行的是编译后的\",{\"1\":{\"652\":1}}],[\"执行的时候\",{\"1\":{\"586\":1}}],[\"执行度高的话就进行预测\",{\"1\":{\"601\":1}}],[\"执行\",{\"1\":{\"529\":1,\"741\":1,\"1333\":2,\"1418\":1,\"1584\":1}}],[\"执行地址中的方法\",{\"1\":{\"517\":1}}],[\"执行地址\",{\"1\":{\"517\":3}}],[\"执行标号\",{\"1\":{\"517\":1}}],[\"执行条件\",{\"1\":{\"514\":1}}],[\"执行后续的动作\",{\"1\":{\"1516\":1}}],[\"执行后会创建一个\",{\"1\":{\"1418\":1}}],[\"执行后面的地址中的方法\",{\"1\":{\"517\":1}}],[\"执行后\",{\"1\":{\"418\":1}}],[\"执行后命令行显示\",{\"1\":{\"373\":1,\"374\":1}}],[\"执行任务的效率就越低\",{\"1\":{\"280\":1}}],[\"花在任务切换的时间就越多\",{\"1\":{\"280\":1}}],[\"拿出来写进\",{\"1\":{\"1596\":1}}],[\"拿出当前层次的节点的值\",{\"1\":{\"47\":1}}],[\"拿到当前的\",{\"1\":{\"1573\":1}}],[\"拿到该\",{\"1\":{\"1341\":1}}],[\"拿到字典中的\",{\"1\":{\"299\":1}}],[\"拿不到通行证的线程\",{\"1\":{\"277\":1}}],[\"运输层\",{\"1\":{\"977\":1}}],[\"运行在用户态的\",{\"1\":{\"1584\":1}}],[\"运行在安卓上\",{\"1\":{\"652\":1}}],[\"运行队列\",{\"1\":{\"1523\":1}}],[\"运行操作系统\",{\"1\":{\"1479\":1}}],[\"运行中的应用程序\",{\"1\":{\"1479\":1}}],[\"运行后会产生如下的输出\",{\"1\":{\"1161\":1}}],[\"运行栈\",{\"1\":{\"736\":1}}],[\"运行时\",{\"1\":{\"1365\":1,\"1371\":1}}],[\"运行时的功能简单来说分为\",{\"1\":{\"701\":1}}],[\"运行时只有拿到这个锁才能执行\",{\"1\":{\"276\":1,\"279\":1}}],[\"运行一个协程使用\",{\"1\":{\"415\":1}}],[\"运算\",{\"1\":{\"1521\":1}}],[\"运算的结果类型是\",{\"1\":{\"1471\":1}}],[\"运算符则将结果转换为布尔类型\",{\"1\":{\"1521\":1}}],[\"运算符将该位掩码与\",{\"1\":{\"1521\":1}}],[\"运算符\",{\"1\":{\"400\":1}}],[\"运算结果等于\",{\"1\":{\"124\":1}}],[\"菜鸟教程↩︎\",{\"1\":{\"275\":1}}],[\"替换时间字符串中所有非数字\",{\"1\":{\"905\":1}}],[\"替换掉以后\",{\"1\":{\"499\":1}}],[\"替换字符串中的空格\",{\"0\":{\"481\":1}}],[\"替换成自己\",{\"1\":{\"274\":1}}],[\"替换的时候使用近似\",{\"1\":{\"259\":1}}],[\"路由器就可能对\",{\"1\":{\"981\":1}}],[\"路由选择\",{\"1\":{\"977\":1}}],[\"路径的替换\",{\"1\":{\"274\":1}}],[\"路径\",{\"0\":{\"447\":1},\"1\":{\"274\":1}}],[\"路组相连\",{\"1\":{\"204\":1}}],[\"官网示例\",{\"1\":{\"962\":1}}],[\"官网下载\",{\"1\":{\"273\":1}}],[\"官方对此的使用说明如下\",{\"1\":{\"1240\":1}}],[\"官方网站\",{\"1\":{\"1176\":1}}],[\"官方安装教程\",{\"1\":{\"770\":1}}],[\"官方教程\",{\"1\":{\"414\":1}}],[\"官方提示\",{\"1\":{\"377\":1}}],[\"官方示例\",{\"1\":{\"371\":1,\"372\":1}}],[\"官方文档↩︎\",{\"1\":{\"511\":1}}],[\"官方文档\",{\"1\":{\"310\":1,\"379\":1,\"439\":1,\"824\":1,\"841\":1,\"1413\":1}}],[\"官方库的实现方式\",{\"1\":{\"299\":1}}],[\"官方行文\",{\"1\":{\"253\":1}}],[\"官方的示意图\",{\"1\":{\"195\":1}}],[\"更深层次的\",{\"1\":{\"1545\":1}}],[\"更幸运的是\",{\"1\":{\"1131\":1}}],[\"更多的折叠方式可以参考官方文档\",{\"1\":{\"1109\":1}}],[\"更在于享受其过程\",{\"1\":{\"1040\":1}}],[\"更复杂的带回调的\",{\"1\":{\"955\":1}}],[\"更快\",{\"1\":{\"842\":1}}],[\"更直白的讲就是一些\",{\"1\":{\"691\":1}}],[\"更长的\",{\"1\":{\"559\":1}}],[\"更加注意的一点就是之前提到的rf信号较低的空间分辨率\",{\"1\":{\"1137\":1}}],[\"更加严重的是\",{\"1\":{\"1131\":1}}],[\"更加明显\",{\"1\":{\"573\":1}}],[\"更加厉害的是\",{\"1\":{\"543\":1}}],[\"更加应该去了解应用等\",{\"1\":{\"268\":1}}],[\"更优雅的方式是定义一个生成器\",{\"1\":{\"420\":1}}],[\"更不容易出\",{\"1\":{\"356\":1}}],[\"更新状态\",{\"1\":{\"1516\":1}}],[\"更新剩余的\",{\"1\":{\"1487\":1}}],[\"更新或者拷贝\",{\"1\":{\"1380\":1}}],[\"更新grub\",{\"0\":{\"715\":1}}],[\"更新了服务器上的\",{\"1\":{\"1253\":1}}],[\"更新了\",{\"1\":{\"245\":1}}],[\"更新内存中的\",{\"1\":{\"218\":1}}],[\"更新\",{\"1\":{\"154\":1,\"587\":1}}],[\"更新层次\",{\"1\":{\"47\":1}}],[\"命名为ope\",{\"1\":{\"1169\":1}}],[\"命名空间\",{\"1\":{\"1060\":1}}],[\"命名管道变编程使用\",{\"1\":{\"741\":1}}],[\"命名管道\",{\"0\":{\"741\":1}}],[\"命名的局部标识符\",{\"1\":{\"692\":1}}],[\"命名后的文件类似于\",{\"1\":{\"349\":1}}],[\"命令来查看相应的文件格式\",{\"1\":{\"1459\":1}}],[\"命令来进行解析\",{\"1\":{\"664\":1}}],[\"命令解压缩\",{\"1\":{\"1454\":2}}],[\"命令创建归档文件\",{\"1\":{\"1454\":1}}],[\"命令压缩文件\",{\"1\":{\"1454\":1}}],[\"命令观察一下\",{\"1\":{\"1448\":1}}],[\"命令一共执行了\",{\"1\":{\"1445\":1}}],[\"命令用于清除\",{\"1\":{\"1445\":1}}],[\"命令就是说我们把生成的文件进行一个消除\",{\"1\":{\"1440\":1}}],[\"命令也是可以的\",{\"1\":{\"1439\":1}}],[\"命令在执行的时候\",{\"1\":{\"1438\":1}}],[\"命令的\",{\"1\":{\"1418\":1}}],[\"命令的文件\",{\"1\":{\"1414\":1}}],[\"命令后会生成一个\",{\"1\":{\"1424\":1}}],[\"命令后\",{\"1\":{\"1317\":1}}],[\"命令之间增加\",{\"1\":{\"1284\":1}}],[\"命令参考资料↩︎\",{\"1\":{\"1254\":1}}],[\"命令会报错\",{\"1\":{\"1449\":1}}],[\"命令会自动把这台服务器命名为\",{\"1\":{\"1253\":1}}],[\"命令会改变\",{\"1\":{\"1252\":1}}],[\"命令进行加载\",{\"1\":{\"1179\":2}}],[\"命令即可\",{\"1\":{\"810\":1}}],[\"命令行工具\",{\"1\":{\"725\":1}}],[\"命令行位置参数全局变量\",{\"1\":{\"693\":1}}],[\"命令如下\",{\"1\":{\"660\":1,\"1424\":1}}],[\"命令\",{\"1\":{\"266\":1,\"717\":1,\"738\":1,\"1232\":1,\"1239\":1,\"1240\":1,\"1275\":1,\"1307\":1,\"1333\":1,\"1418\":1,\"1438\":1,\"1439\":2,\"1445\":1,\"1452\":1}}],[\"命中的话\",{\"1\":{\"255\":1}}],[\"命中\",{\"1\":{\"207\":1}}],[\"额外一提\",{\"1\":{\"1440\":1}}],[\"额外的页表\",{\"1\":{\"263\":1}}],[\"额外空间的算法\",{\"1\":{\"77\":1}}],[\"算法效率分析\",{\"0\":{\"1171\":1}}],[\"算法分析\",{\"1\":{\"1169\":1}}],[\"算法返回x93d12a\",{\"1\":{\"1169\":1}}],[\"算法进行改进\",{\"1\":{\"1012\":1}}],[\"算法的工作过程如下\",{\"1\":{\"987\":1}}],[\"算法代价太高\",{\"1\":{\"259\":1}}],[\"算法\",{\"1\":{\"259\":1,\"689\":1,\"982\":1,\"1064\":1}}],[\"缺点\",{\"0\":{\"1353\":1,\"1357\":1},\"1\":{\"954\":1}}],[\"缺点在于\",{\"1\":{\"825\":1,\"1133\":1}}],[\"缺少带有强语义的描述模块的信息\",{\"1\":{\"688\":1}}],[\"缺页失效发生的时候\",{\"1\":{\"259\":1}}],[\"缺失\",{\"1\":{\"258\":1}}],[\"较为学术的文章可以参考具体技术的架构和代码分析\",{\"1\":{\"1359\":1}}],[\"较小页面则可以节省内存\",{\"1\":{\"258\":1}}],[\"较大\",{\"1\":{\"687\":1}}],[\"较大页面意味着可以高效地映射更多存储器\",{\"1\":{\"258\":1}}],[\"较大页面可使得缓存更大\",{\"1\":{\"258\":1}}],[\"较大的\",{\"1\":{\"210\":1}}],[\"传统的加密方案将会破坏明文数据原有的顺序信息\",{\"1\":{\"1166\":1}}],[\"传统的室外定位无法对目标进行精确的定位\",{\"1\":{\"1014\":1}}],[\"传递数据\",{\"1\":{\"1329\":1}}],[\"传递的参数就是\",{\"1\":{\"1311\":1}}],[\"传递给后续的模块进行处理\",{\"1\":{\"1020\":1}}],[\"传递较大页面效率更高\",{\"1\":{\"258\":1}}],[\"传播路径更长\",{\"1\":{\"1019\":1}}],[\"传播路径最短\",{\"1\":{\"1019\":1}}],[\"传播并且预测的结果必须经过验证\",{\"1\":{\"549\":1}}],[\"传送到上一层\",{\"1\":{\"977\":1}}],[\"传输的数据\",{\"1\":{\"1620\":1}}],[\"传输数据\",{\"1\":{\"1333\":1}}],[\"传输对的采样频率会产生偏移\",{\"1\":{\"1024\":1}}],[\"传输文件时\",{\"1\":{\"992\":1}}],[\"传输中\",{\"1\":{\"981\":2}}],[\"传输来说\",{\"1\":{\"981\":1}}],[\"传输层\",{\"1\":{\"977\":1,\"979\":1}}],[\"传输\",{\"1\":{\"977\":1}}],[\"传输代码的大小较小\",{\"1\":{\"687\":1}}],[\"传入的\",{\"1\":{\"1607\":1}}],[\"传入的参数比\",{\"1\":{\"432\":2}}],[\"传入配置文件的位置\",{\"1\":{\"872\":1}}],[\"传入了\",{\"1\":{\"706\":1,\"1403\":1}}],[\"传入\",{\"1\":{\"658\":1,\"955\":1,\"1571\":1,\"1608\":1}}],[\"传入参数\",{\"1\":{\"435\":1,\"933\":1}}],[\"传给\",{\"1\":{\"293\":1}}],[\"传言称\",{\"1\":{\"87\":1}}],[\"增强了\",{\"1\":{\"1508\":1}}],[\"增强了处理\",{\"1\":{\"1498\":1}}],[\"增大页面的大小可以节省存储器\",{\"1\":{\"258\":1}}],[\"增加了大量的系统接口\",{\"1\":{\"1508\":1}}],[\"增加全局的流程图\",{\"1\":{\"1363\":1}}],[\"增加上设备序列号的推送程序\",{\"1\":{\"1287\":1}}],[\"增加的开销成本是十分庞大的\",{\"1\":{\"1170\":1}}],[\"增加1个报文段\",{\"1\":{\"987\":1}}],[\"增加日志的例子\",{\"1\":{\"704\":1,\"1399\":1}}],[\"增加\",{\"1\":{\"576\":1,\"581\":1,\"987\":1}}],[\"增加饱和计数器的\",{\"1\":{\"576\":1}}],[\"增加以后的\",{\"1\":{\"217\":1}}],[\"增加块的大小会降低\",{\"1\":{\"210\":1}}],[\"增加相联度的好处通常是降低失效率\",{\"1\":{\"206\":1}}],[\"增加到了递归中去了\",{\"1\":{\"42\":1}}],[\"没做\",{\"1\":{\"1353\":1}}],[\"没办法实现值重传\",{\"1\":{\"981\":1}}],[\"没有传入\",{\"1\":{\"1608\":1}}],[\"没有较好的软硬件协同能力\",{\"1\":{\"1357\":1}}],[\"没有打破进程隔离的属性\",{\"1\":{\"1352\":1}}],[\"没有通过\",{\"1\":{\"1293\":1}}],[\"没有成就感\",{\"1\":{\"1048\":1}}],[\"没有执行慢启动的原因\",{\"1\":{\"987\":1}}],[\"没有超时重传的机智\",{\"1\":{\"981\":1}}],[\"没有引入\",{\"1\":{\"871\":1}}],[\"没有线程的进程可以看做是单线程的\",{\"1\":{\"736\":1}}],[\"没有遵守\",{\"1\":{\"652\":1}}],[\"没有完全遵守\",{\"1\":{\"652\":1}}],[\"没有\",{\"1\":{\"548\":1,\"994\":1,\"1388\":1}}],[\"没有就创建一个\",{\"1\":{\"450\":1}}],[\"没有返回实例对象\",{\"1\":{\"432\":1}}],[\"没有了~\",{\"1\":{\"303\":1}}],[\"没在内存中\",{\"1\":{\"256\":1}}],[\"没多久\",{\"1\":{\"165\":1}}],[\"顾名思义就是\",{\"1\":{\"256\":1}}],[\"简化软件控制\",{\"1\":{\"1510\":1}}],[\"简短的定义说明\",{\"1\":{\"1126\":1}}],[\"简兮简兮\",{\"1\":{\"1060\":1}}],[\"简述\",{\"0\":{\"825\":1}}],[\"简易实现中数据移动次数\",{\"1\":{\"687\":1}}],[\"简介\",{\"0\":{\"643\":1,\"1131\":1},\"1\":{\"958\":1}}],[\"简要说明\",{\"1\":{\"597\":1}}],[\"简称h2\",{\"1\":{\"965\":1,\"966\":1}}],[\"简称\",{\"1\":{\"541\":1}}],[\"简而言之\",{\"1\":{\"255\":1,\"590\":1,\"724\":1,\"1507\":1}}],[\"简单而言\",{\"1\":{\"1388\":1}}],[\"简单来说就是可信的级别\",{\"1\":{\"1479\":1}}],[\"简单来说\",{\"1\":{\"1354\":1,\"1521\":1}}],[\"简单来说流程如下\",{\"1\":{\"1308\":1}}],[\"简单\",{\"1\":{\"1126\":1}}],[\"简单的\",{\"1\":{\"1239\":1}}],[\"简单的构建应用\",{\"1\":{\"869\":1}}],[\"简单的说\",{\"1\":{\"71\":1}}],[\"简单列举如下\",{\"1\":{\"670\":1}}],[\"简单使用表格进行概括\",{\"1\":{\"549\":1}}],[\"简单可以理解为将栈弹出到\",{\"1\":{\"526\":1}}],[\"简单版本\",{\"1\":{\"465\":1}}],[\"简单地说\",{\"1\":{\"428\":1}}],[\"简单理解的话\",{\"1\":{\"1459\":1}}],[\"简单理解\",{\"1\":{\"424\":1}}],[\"简单介绍\",{\"1\":{\"190\":1}}],[\"简单概括一下\",{\"1\":{\"78\":1}}],[\"查询即可\",{\"1\":{\"997\":1}}],[\"查询目标设备的\",{\"1\":{\"993\":1}}],[\"查阅资料后表明这是因为最后一位是压缩的标志位\",{\"1\":{\"673\":1}}],[\"查看其信息\",{\"1\":{\"1463\":1}}],[\"查看单板sn号是否修改成功\",{\"1\":{\"1285\":1}}],[\"查看是否连接成功\",{\"1\":{\"1268\":1}}],[\"查看服务器日志\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"查看内核\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"查看内核模块的信息\",{\"1\":{\"718\":1}}],[\"查看系统\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"查看哪些分支已经合并入当前分支的\",{\"1\":{\"1253\":1}}],[\"查看每个分支上的最新提交\",{\"1\":{\"1253\":1}}],[\"查看简略信息\",{\"1\":{\"1249\":1}}],[\"查看提交历史\",{\"1\":{\"1249\":1}}],[\"查看有哪些已暂存的内容会进入下一次提交\",{\"1\":{\"1249\":1}}],[\"查看一下内核信息\",{\"1\":{\"1145\":1}}],[\"查看受计算机限制的文件描述符上限\",{\"1\":{\"957\":1}}],[\"查看运行\",{\"1\":{\"758\":1}}],[\"查看端口被哪个进程占用\",{\"1\":{\"753\":1}}],[\"查看端口号\",{\"0\":{\"753\":1}}],[\"查看密码文件内容\",{\"1\":{\"612\":1}}],[\"查看\",{\"0\":{\"447\":1},\"1\":{\"427\":1,\"446\":1,\"623\":1}}],[\"查页表获得物理地址\",{\"1\":{\"255\":1}}],[\"查找shadowsocks端口\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"查找的时候使用二分查找\",{\"1\":{\"812\":1}}],[\"查找到新模块再更新该文件\",{\"1\":{\"717\":1}}],[\"查找字符串中第一个出现的不重复的元素\",{\"0\":{\"480\":1}}],[\"查找时会检测非法或者权限\",{\"1\":{\"252\":1}}],[\"查找页表\",{\"1\":{\"252\":1}}],[\"查找所有cache\",{\"1\":{\"206\":1}}],[\"查找有多少个\",{\"1\":{\"154\":1}}],[\"查找二维数组中是否存在某个元素\",{\"0\":{\"30\":1}}],[\"查找插入位置\",{\"0\":{\"26\":1}}],[\"查找后条件应当是\",{\"1\":{\"22\":1}}],[\"查找后条件应当变成\",{\"1\":{\"22\":1}}],[\"硬件环境\",{\"1\":{\"1144\":1}}],[\"硬件复杂性也不同\",{\"1\":{\"548\":1}}],[\"硬件会首先检查\",{\"1\":{\"255\":1}}],[\"硬盘\",{\"1\":{\"253\":1}}],[\"保存本地中断传递的当前状态\",{\"1\":{\"1517\":1}}],[\"保存\",{\"1\":{\"1333\":1}}],[\"保存apply\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"保序加密\",{\"1\":{\"1166\":1}}],[\"保序加密可以使得云服务器根据密文的顺序信息来得到明文顺序信息\",{\"1\":{\"1166\":1}}],[\"保序加密是一种密文保持明文顺序的特殊加密方案\",{\"1\":{\"1166\":1}}],[\"保持对\",{\"1\":{\"1008\":1}}],[\"保护机制确保\",{\"1\":{\"253\":1}}],[\"保护多个应用程序不会同时访问到同一块物理地址\",{\"1\":{\"253\":1}}],[\"保证系统稳定性\",{\"1\":{\"1589\":1}}],[\"保证每个进程只会启动一个\",{\"1\":{\"1294\":1}}],[\"保证通信的顺利进行\",{\"1\":{\"993\":1}}],[\"保证提前量\",{\"1\":{\"508\":1}}],[\"保证了先出栈的元素一定是最左侧的\",{\"1\":{\"486\":1}}],[\"保证\",{\"1\":{\"156\":1}}],[\"点\",{\"1\":{\"253\":1,\"1383\":1}}],[\"主体包括三个模块\",{\"1\":{\"1531\":1}}],[\"主频等\",{\"1\":{\"1523\":1}}],[\"主线程\",{\"1\":{\"1293\":2}}],[\"主题\",{\"1\":{\"1064\":1}}],[\"主径\",{\"1\":{\"1020\":1}}],[\"主动发起断开的一端的\",{\"1\":{\"983\":1}}],[\"主动套接字\",{\"1\":{\"951\":1}}],[\"主动创建并注入\",{\"1\":{\"871\":1}}],[\"主键索引\",{\"1\":{\"811\":1}}],[\"主流的商用\",{\"1\":{\"655\":1}}],[\"主机会在自己的\",{\"1\":{\"994\":1}}],[\"主机\",{\"1\":{\"727\":2,\"728\":1}}],[\"主机安全\",{\"1\":{\"647\":1}}],[\"主机交付\",{\"1\":{\"639\":1}}],[\"主存也可以理解为辅存的\",{\"1\":{\"253\":1}}],[\"主要记录下一条要执行的指令\",{\"1\":{\"1620\":1}}],[\"主要用来控制系统运行中芯片产生的热量\",{\"1\":{\"1589\":1}}],[\"主要可以分为三类\",{\"1\":{\"1569\":1,\"1576\":1}}],[\"主要就是因为这几个优点\",{\"1\":{\"1352\":1}}],[\"主要还是调用到\",{\"1\":{\"1333\":1}}],[\"主要完成对\",{\"1\":{\"1333\":1}}],[\"主要的作用是根据\",{\"1\":{\"1608\":1}}],[\"主要的任务\",{\"1\":{\"1545\":1}}],[\"主要的操作耗时还是在\",{\"1\":{\"1330\":1}}],[\"主要的思想是把内存分为\",{\"1\":{\"201\":1}}],[\"主要关注\",{\"1\":{\"1301\":1}}],[\"主要使用1x1卷积来做channle\",{\"1\":{\"1156\":1}}],[\"主要使用三个命令\",{\"1\":{\"833\":1}}],[\"主要有三个方法\",{\"1\":{\"955\":1}}],[\"主要由\",{\"1\":{\"725\":1}}],[\"主要阅读书籍为\",{\"1\":{\"722\":1}}],[\"主要带着问题\",{\"1\":{\"672\":1}}],[\"主要针对\",{\"1\":{\"651\":1}}],[\"主要针对企业官网搭建办公环境\",{\"1\":{\"643\":1}}],[\"主要基于公私钥体系\",{\"1\":{\"648\":1}}],[\"主要要求\",{\"1\":{\"643\":1}}],[\"主要应用为工业辅助设计\",{\"1\":{\"643\":1}}],[\"主要负责对下三层进行管理\",{\"1\":{\"641\":1}}],[\"主要包括五大服务\",{\"1\":{\"643\":1}}],[\"主要包括\",{\"1\":{\"461\":1}}],[\"主要为代码的解析和实验说明\",{\"1\":{\"1158\":1}}],[\"主要为云资源操作\",{\"1\":{\"646\":1}}],[\"主要为\",{\"1\":{\"376\":1}}],[\"主要参考文档为\",{\"1\":{\"310\":1}}],[\"主要切换堆栈\",{\"1\":{\"282\":1}}],[\"主要特点是要进行大量的计算\",{\"1\":{\"280\":1}}],[\"主要分析\",{\"1\":{\"269\":1}}],[\"主要介绍\",{\"1\":{\"269\":2}}],[\"主要研究基于\",{\"1\":{\"224\":1}}],[\"主要研究指令\",{\"1\":{\"212\":1}}],[\"主要体现在不同\",{\"1\":{\"220\":1}}],[\"主要体现在以下方面\",{\"1\":{\"36\":1}}],[\"主要是分为几个\",{\"1\":{\"1534\":1}}],[\"主要是看平台实现\",{\"1\":{\"1475\":1}}],[\"主要是解决了\",{\"1\":{\"1358\":1}}],[\"主要是一些实例\",{\"1\":{\"1227\":1}}],[\"主要是一些常见的用法和笔记\",{\"1\":{\"327\":1}}],[\"主要是存储代理的\",{\"1\":{\"885\":1}}],[\"主要是存储原生的早期\",{\"1\":{\"884\":1}}],[\"主要是调用\",{\"1\":{\"703\":1,\"1333\":1}}],[\"主要是有两点区别\",{\"1\":{\"652\":1}}],[\"主要是针对\",{\"1\":{\"646\":1}}],[\"主要是涉及到这篇文章中的\",{\"1\":{\"599\":1}}],[\"主要是使用了很多\",{\"1\":{\"559\":1}}],[\"主要是讲述性能优化\",{\"1\":{\"238\":1}}],[\"主要是体现在\",{\"1\":{\"210\":1}}],[\"主要是\",{\"1\":{\"192\":1,\"703\":1,\"807\":1}}],[\"主要到\",{\"1\":{\"184\":1}}],[\"磁盘\",{\"1\":{\"253\":1,\"280\":1}}],[\"验证是否安装成功\",{\"1\":{\"959\":1}}],[\"验证后填写结论\",{\"1\":{\"707\":1,\"1405\":1}}],[\"验证到某个条目的预测是正确的时候\",{\"1\":{\"602\":1}}],[\"验证过后更新\",{\"1\":{\"599\":1}}],[\"验证当前指令是否允许访问特定内存地址\",{\"1\":{\"252\":1}}],[\"验证外星语词典\",{\"0\":{\"186\":1},\"1\":{\"173\":1,\"186\":1}}],[\"页面大小是比较常见的体系结构参数\",{\"1\":{\"258\":1}}],[\"页面大小的权衡\",{\"0\":{\"258\":1}}],[\"页不在内存中\",{\"1\":{\"256\":1}}],[\"页在内存中\",{\"1\":{\"256\":1}}],[\"页表使用全相联\",{\"1\":{\"263\":1}}],[\"页表通常选择使用全相联的方式\",{\"1\":{\"263\":1}}],[\"页表的映射方式\",{\"0\":{\"263\":1}}],[\"页表的大小与页面的大小成反比\",{\"1\":{\"258\":1}}],[\"页表和\",{\"1\":{\"258\":1}}],[\"页表存储在主存中\",{\"1\":{\"255\":1}}],[\"页表是怎么处理的\",{\"1\":{\"253\":1}}],[\"页表不同意味着物理页不同\",{\"1\":{\"252\":1}}],[\"页就是内存的最小单位\",{\"1\":{\"251\":1}}],[\"操作函数\",{\"1\":{\"1600\":1}}],[\"操作自己通知链的基础\",{\"1\":{\"1577\":1}}],[\"操作符\",{\"1\":{\"1450\":1}}],[\"操作符可以模糊匹配字符串\",{\"1\":{\"820\":1}}],[\"操作方法概括如下\",{\"1\":{\"1170\":1}}],[\"操作步骤如下\",{\"1\":{\"770\":1}}],[\"操作数栈\",{\"1\":{\"667\":1}}],[\"操作将部分字节码提前编译未机器代码库\",{\"1\":{\"653\":1}}],[\"操作来判断之类的思路\",{\"1\":{\"478\":1}}],[\"操作后\",{\"1\":{\"460\":1}}],[\"操作\",{\"1\":{\"361\":1,\"955\":1,\"1608\":1}}],[\"操作完成\",{\"1\":{\"280\":1}}],[\"操作系统的作用主要可以归类为以下几点\",{\"1\":{\"1621\":1}}],[\"操作系统还可以通过\",{\"1\":{\"1537\":1}}],[\"操作系统还可以通过异常\",{\"1\":{\"950\":1}}],[\"操作系统在加载完进程后从这个地址开始指向进程的指令\",{\"1\":{\"1464\":1}}],[\"操作系统镜像\",{\"1\":{\"1144\":1}}],[\"操作系统中有两个重要的概念\",{\"1\":{\"736\":1}}],[\"操作系统中的多级页表到底是为了解决什么问题\",{\"1\":{\"264\":1}}],[\"操作系统一般使用\",{\"1\":{\"724\":1}}],[\"操作系统\",{\"1\":{\"256\":1}}],[\"操作系统如何保证其访问权限\",{\"1\":{\"252\":1}}],[\"操作系统会为每个映射的文件或设备创建一个虚拟地址空间\",{\"1\":{\"1318\":1}}],[\"操作系统会检查当前进程是否有权限访问该页面\",{\"1\":{\"251\":1}}],[\"操作系统会加载虚拟页对应的物理页\",{\"1\":{\"251\":1}}],[\"操作过于原始\",{\"1\":{\"10\":1}}],[\"引擎渲染成\",{\"1\":{\"1179\":1}}],[\"引入了\",{\"1\":{\"1383\":1}}],[\"引入了一种新的无线雷达\",{\"1\":{\"1134\":1}}],[\"引入方式为\",{\"1\":{\"1179\":1}}],[\"引入默认展开的代码块\",{\"1\":{\"1109\":1}}],[\"引入默认折叠的代码块\",{\"1\":{\"1109\":1}}],[\"引入代码块的方法\",{\"0\":{\"1109\":1}}],[\"引入以后\",{\"1\":{\"871\":1}}],[\"引入\",{\"1\":{\"695\":1,\"1102\":1,\"1395\":1}}],[\"引入相关llvm头文件\",{\"1\":{\"693\":1}}],[\"引用一段英文原文\",{\"1\":{\"1381\":1}}],[\"引用一个博客中的一段描述\",{\"1\":{\"530\":1}}],[\"引用\",{\"1\":{\"580\":1,\"688\":1}}],[\"引用实现\",{\"1\":{\"180\":1}}],[\"引出后续\",{\"1\":{\"250\":1}}],[\"立即检查系统中是否有可运行的进程\",{\"1\":{\"1528\":1}}],[\"立即运行\",{\"1\":{\"655\":1}}],[\"立即数\",{\"1\":{\"245\":1,\"514\":1}}],[\"立即更新\",{\"1\":{\"215\":1}}],[\"讲述了如何使用\",{\"1\":{\"808\":1}}],[\"讲述了三种冒险方式\",{\"1\":{\"237\":1}}],[\"讲述\",{\"1\":{\"245\":1}}],[\"供下一个周期使用\",{\"1\":{\"245\":1}}],[\"供下一个\",{\"1\":{\"245\":1}}],[\"暂略\",{\"1\":{\"1557\":1}}],[\"暂停\",{\"1\":{\"1532\":1}}],[\"暂停当前进程\",{\"1\":{\"1523\":1}}],[\"暂且不用关心其中的文件细节\",{\"1\":{\"1440\":1}}],[\"暂时研究到这\",{\"1\":{\"1566\":1}}],[\"暂时地暂停线程\",{\"1\":{\"1381\":1}}],[\"暂时不研究\",{\"1\":{\"1491\":1,\"1495\":1}}],[\"暂时不关注\",{\"1\":{\"1300\":1}}],[\"暂时不能返回\",{\"1\":{\"20\":1,\"21\":1}}],[\"暂时可以理解为栈的一部分\",{\"1\":{\"689\":1}}],[\"暂时可以理解为\",{\"1\":{\"548\":1}}],[\"暂不研究\",{\"1\":{\"238\":1}}],[\"寄存器等\",{\"1\":{\"1620\":1}}],[\"寄存器可以分为以下几种\",{\"1\":{\"1620\":1}}],[\"寄存器可以分为\",{\"1\":{\"1620\":1}}],[\"寄存器相关的\",{\"1\":{\"1491\":1}}],[\"寄存器里面涉及到\",{\"1\":{\"1483\":1}}],[\"寄存器是什么\",{\"1\":{\"1483\":1}}],[\"寄存器用于区分是冷启动还是热启动\",{\"1\":{\"1481\":1}}],[\"寄存器分配问题\",{\"1\":{\"708\":1}}],[\"寄存器分配的局部变量\",{\"1\":{\"692\":1}}],[\"寄存器虚拟机\",{\"0\":{\"686\":1},\"1\":{\"685\":1}}],[\"寄存器的\",{\"1\":{\"1620\":1}}],[\"寄存器的细节暂不关注\",{\"1\":{\"1485\":1}}],[\"寄存器的写入会反映在\",{\"1\":{\"1483\":1}}],[\"寄存器的第\",{\"1\":{\"521\":1,\"536\":1}}],[\"寄存器的值\",{\"1\":{\"517\":1}}],[\"寄存器的值写入到\",{\"1\":{\"245\":1}}],[\"寄存器的值加上立即数\",{\"1\":{\"245\":1}}],[\"寄存器为一个不需要开启用户态访问权限也能访问到的寄存器\",{\"1\":{\"510\":1}}],[\"寄存器中相应的\",{\"1\":{\"514\":1}}],[\"寄存器中的数据的示例\",{\"1\":{\"510\":1}}],[\"寄存器中的数据可能不仅仅被严格相邻的两个指令使用\",{\"1\":{\"236\":1}}],[\"寄存器中\",{\"1\":{\"245\":1,\"524\":1,\"536\":1}}],[\"寄存器和立即数\",{\"1\":{\"245\":1}}],[\"寄存器之间\",{\"1\":{\"245\":1}}],[\"寄存器\",{\"1\":{\"245\":3,\"514\":1,\"1483\":1,\"1620\":1,\"1622\":1}}],[\"寄存器向前走了\",{\"1\":{\"212\":1}}],[\"虽然一个\",{\"1\":{\"1510\":1}}],[\"虽然很长很复杂\",{\"1\":{\"1308\":1}}],[\"虽然\",{\"1\":{\"1024\":1,\"1353\":1}}],[\"虽然安装方法很多\",{\"1\":{\"916\":1}}],[\"虽然说预测所有指令类型的值是可以做到的\",{\"1\":{\"580\":1}}],[\"虽然作用域是静态地确定的\",{\"1\":{\"418\":1}}],[\"虽然虚拟存储是为了小容量的存储看起来像大容量的存储\",{\"1\":{\"253\":1}}],[\"虽然确保\",{\"1\":{\"236\":1}}],[\"虽然阅读的这本书使用的是\",{\"1\":{\"235\":1}}],[\"斜体的没有理解\",{\"1\":{\"236\":1}}],[\"⭐⭐⭐⭐⭐\",{\"1\":{\"1638\":2}}],[\"⭐⭐\",{\"1\":{\"236\":1}}],[\"生命周期中加载数据\",{\"1\":{\"925\":1}}],[\"生命周期加载\",{\"1\":{\"925\":1}}],[\"生命周期包括\",{\"1\":{\"922\":1}}],[\"生产适用场景\",{\"0\":{\"828\":1}}],[\"生态繁荣\",{\"1\":{\"235\":1}}],[\"生成以\",{\"1\":{\"1454\":1}}],[\"生成所需要的依赖\",{\"1\":{\"1445\":1}}],[\"生成该\",{\"1\":{\"1439\":1}}],[\"生成会话并且在训练数据上反复运行反向传播优化算法\",{\"1\":{\"1212\":1}}],[\"生成项目\",{\"1\":{\"1102\":1}}],[\"生成数据移植文件\",{\"1\":{\"864\":1}}],[\"生成的那些文件\",{\"1\":{\"1445\":1}}],[\"生成的\",{\"1\":{\"657\":1}}],[\"生成的括号总数为\",{\"1\":{\"9\":1}}],[\"生成\",{\"1\":{\"404\":1,\"664\":1,\"669\":1,\"959\":1,\"1454\":3}}],[\"生成器是使用\",{\"1\":{\"294\":1}}],[\"生成器\",{\"1\":{\"88\":1}}],[\"授权费较低\",{\"1\":{\"235\":1}}],[\"↩︎↩︎\",{\"1\":{\"708\":1}}],[\"↩︎\",{\"1\":{\"230\":1,\"264\":1,\"539\":1,\"566\":1,\"606\":3,\"708\":2,\"1209\":1,\"1287\":1,\"1406\":1,\"1502\":1,\"1558\":1,\"1622\":1}}],[\"性能测试等场景下使用\",{\"1\":{\"1527\":1}}],[\"性能问题\",{\"1\":{\"1354\":1}}],[\"性能不是最优\",{\"1\":{\"1353\":1}}],[\"性能\",{\"1\":{\"1151\":1}}],[\"性能高\",{\"1\":{\"958\":1}}],[\"性能越差\",{\"1\":{\"954\":1}}],[\"性能分析\",{\"1\":{\"911\":1}}],[\"性能的时候会将二进制反汇编\",{\"1\":{\"657\":1}}],[\"性能是可以得到提升的\",{\"1\":{\"549\":1}}],[\"性能原因\",{\"1\":{\"229\":1}}],[\"性能很烂\",{\"1\":{\"200\":1}}],[\"某些数据\",{\"1\":{\"998\":1}}],[\"某些平台只能在特定的地址处取某些特定类型的数据\",{\"1\":{\"229\":1}}],[\"某个第三方库是否找到\",{\"1\":{\"1418\":1}}],[\"某个预测正确或者错误的时候\",{\"1\":{\"576\":1}}],[\"某个线程想要执行\",{\"1\":{\"277\":1}}],[\"某种外星语也使用英文小写字母\",{\"1\":{\"186\":1}}],[\"平均概率远低于avl\",{\"1\":{\"1171\":1}}],[\"平兮稀兮\",{\"1\":{\"1060\":1}}],[\"平台可以自定义\",{\"1\":{\"1470\":1}}],[\"平台属性\",{\"1\":{\"1464\":1}}],[\"平台的指令集权限分为\",{\"1\":{\"724\":1}}],[\"平台上运行\",{\"1\":{\"724\":1}}],[\"平台上份额较高的虚拟化引擎\",{\"1\":{\"724\":1}}],[\"平台上\",{\"1\":{\"670\":2}}],[\"平台上和传统的\",{\"1\":{\"669\":1}}],[\"平台原因\",{\"1\":{\"229\":1}}],[\"平衡\",{\"1\":{\"9\":1}}],[\"另一类是yolo\",{\"1\":{\"1151\":1}}],[\"另一类使用的是低频率的无线信号\",{\"1\":{\"1133\":1}}],[\"另一部分被障碍物反射\",{\"1\":{\"1019\":1}}],[\"另一部分作为可寻址寄存器\",{\"1\":{\"226\":1}}],[\"另一方\",{\"1\":{\"980\":1}}],[\"另一方面\",{\"1\":{\"234\":1}}],[\"另一个参数是该结构的整数大小\",{\"1\":{\"950\":1}}],[\"另一个正确的排序是\",{\"1\":{\"86\":1}}],[\"统一身份认证服务\",{\"1\":{\"640\":1}}],[\"统一都可以称为监听协议\",{\"1\":{\"225\":1}}],[\"统治\",{\"1\":{\"605\":1}}],[\"统计一个数字在排序数组中出现的次数\",{\"1\":{\"32\":1}}],[\"演化了\",{\"1\":{\"225\":2}}],[\"处于\",{\"1\":{\"983\":1}}],[\"处于这个等待时间时\",{\"1\":{\"983\":1}}],[\"处于半关闭状态\",{\"1\":{\"983\":1}}],[\"处罚\",{\"1\":{\"547\":1}}],[\"处的数据与当前处理器正在执行的\",{\"1\":{\"534\":1}}],[\"处的值读取到\",{\"1\":{\"524\":1}}],[\"处\",{\"1\":{\"532\":1,\"533\":1}}],[\"处开始执行\",{\"1\":{\"517\":1}}],[\"处同步数据\",{\"1\":{\"224\":1}}],[\"处理进程的工作队列\",{\"1\":{\"1316\":1}}],[\"处理下一条指令\",{\"1\":{\"1299\":1}}],[\"处理传输差错\",{\"1\":{\"977\":1}}],[\"处理字符串成为\",{\"1\":{\"902\":1}}],[\"处理一些\",{\"1\":{\"703\":1}}],[\"处理\",{\"0\":{\"703\":1},\"1\":{\"902\":1,\"1498\":1}}],[\"处理器提供的一种指令\",{\"1\":{\"1537\":1}}],[\"处理器提供了两个操作来保证\",{\"1\":{\"220\":1}}],[\"处理器中目前已有两种机制去管理\",{\"1\":{\"548\":1}}],[\"处理器并行\",{\"1\":{\"542\":1}}],[\"处理器需要两次访存操作\",{\"1\":{\"229\":1}}],[\"处理器存储的一部分作为\",{\"1\":{\"226\":1}}],[\"处理器同时写入\",{\"1\":{\"216\":1}}],[\"处理缓存\",{\"1\":{\"212\":1}}],[\"处理数据未命中\",{\"1\":{\"212\":1}}],[\"处理指令未命中\",{\"1\":{\"212\":1}}],[\"处理异常场景\",{\"1\":{\"88\":1}}],[\"独立存储的情况下\",{\"1\":{\"688\":1}}],[\"独立的\",{\"1\":{\"602\":1}}],[\"独立的查找表\",{\"1\":{\"206\":1}}],[\"独有的\",{\"1\":{\"224\":2}}],[\"置信度部分为\",{\"1\":{\"1157\":1}}],[\"置信度包含两个方面\",{\"1\":{\"1155\":1}}],[\"置信度估计方案\",{\"1\":{\"558\":1}}],[\"置信值置\",{\"1\":{\"587\":1}}],[\"置信值归零\",{\"1\":{\"584\":1}}],[\"置无效\",{\"1\":{\"221\":1}}],[\"置换策略\",{\"0\":{\"213\":1}}],[\"容易虚拟化当下发展较为广泛\",{\"1\":{\"724\":1}}],[\"容易出现数据不一致的情况\",{\"1\":{\"220\":1}}],[\"容器中存放着各种对象\",{\"1\":{\"871\":1}}],[\"容器概念\",{\"1\":{\"871\":1}}],[\"容器是实现\",{\"1\":{\"871\":1}}],[\"容器启动以后\",{\"1\":{\"612\":1}}],[\"容器的时候\",{\"1\":{\"871\":1}}],[\"容器的\",{\"1\":{\"609\":1}}],[\"容器\",{\"1\":{\"480\":1,\"872\":1}}],[\"容量变大\",{\"1\":{\"213\":1}}],[\"容量满了的时候\",{\"1\":{\"208\":1}}],[\"容量\",{\"1\":{\"206\":1}}],[\"容量的水\",{\"1\":{\"91\":2}}],[\"定向到同一个后端服务器\",{\"1\":{\"764\":1}}],[\"定位服务与我们的生活息息相关\",{\"1\":{\"1014\":1}}],[\"定位算法之外\",{\"1\":{\"1012\":1}}],[\"定位算法是基于csi的室内定位技术的重点\",{\"1\":{\"1012\":1}}],[\"定位到\",{\"1\":{\"499\":4}}],[\"定位方法\",{\"1\":{\"206\":1}}],[\"定义如下\",{\"1\":{\"1607\":1}}],[\"定义后其初始化过程为\",{\"1\":{\"1566\":1}}],[\"定义了当事件发生的时候\",{\"1\":{\"1578\":1}}],[\"定义了一个原子通知链\",{\"1\":{\"1577\":1}}],[\"定义了\",{\"1\":{\"1492\":1}}],[\"定义损失函数和选择反向传播优化的算法\",{\"1\":{\"1212\":1}}],[\"定义网络的结构和前向传播的输出\",{\"1\":{\"1212\":1}}],[\"定义无状态\",{\"1\":{\"876\":1}}],[\"定义在\",{\"1\":{\"703\":1}}],[\"定义一个相似度函数\",{\"1\":{\"1024\":1}}],[\"定义一个\",{\"1\":{\"420\":1}}],[\"定义形式为\",{\"1\":{\"414\":1}}],[\"定义\",{\"0\":{\"377\":1,\"1401\":1,\"1626\":1,\"1629\":1},\"1\":{\"220\":1,\"1307\":1,\"1562\":1}}],[\"吗\",{\"1\":{\"218\":1,\"1590\":1}}],[\"修改后的\",{\"1\":{\"1449\":1}}],[\"修改后的块被移动到\",{\"1\":{\"217\":1}}],[\"修改后者的数据\",{\"1\":{\"1383\":1}}],[\"修改页表只需操作系统介入即可\",{\"1\":{\"1357\":1}}],[\"修改完后\",{\"1\":{\"1239\":1}}],[\"修改如下\",{\"1\":{\"1162\":1}}],[\"修改网络参数的最后一层\",{\"1\":{\"1162\":1}}],[\"修改``\",{\"1\":{\"1162\":1}}],[\"修改配置文件\",{\"1\":{\"1162\":1}}],[\"修改script文件夹下面的voc\",{\"1\":{\"1162\":1}}],[\"修改成功\",{\"1\":{\"1114\":1}}],[\"修改\",{\"1\":{\"450\":1,\"682\":1,\"956\":1}}],[\"修改了一份数据\",{\"1\":{\"221\":1}}],[\"修改了\",{\"1\":{\"214\":1,\"215\":1}}],[\"惩罚\",{\"1\":{\"217\":1,\"564\":1}}],[\"程序入口的虚拟地址\",{\"1\":{\"1464\":1}}],[\"程序被装载后\",{\"1\":{\"1460\":1}}],[\"程序代码编译后的机器指令经常被放在代码段中\",{\"1\":{\"1460\":1}}],[\"程序如何编译和链接程序\",{\"1\":{\"1438\":1}}],[\"程序需要访问\",{\"1\":{\"1383\":1}}],[\"程序真正开始运行\",{\"1\":{\"738\":1}}],[\"程序运行时操作系统会创建一个进程\",{\"1\":{\"738\":1}}],[\"程序运行会非常慢\",{\"1\":{\"253\":1}}],[\"程序计数器\",{\"1\":{\"736\":1}}],[\"程序之间切换会有较大的开销\",{\"1\":{\"736\":1}}],[\"程序中的函数可以调用\",{\"1\":{\"695\":1,\"1395\":1}}],[\"程序中可以调用\",{\"1\":{\"695\":1,\"1395\":1}}],[\"程序有跨平台的需求\",{\"1\":{\"652\":1}}],[\"程序一闪而过就执行完了\",{\"1\":{\"288\":1}}],[\"程序访问的地址近期没有被访问过\",{\"1\":{\"256\":1}}],[\"程序访存请求过来以后\",{\"1\":{\"255\":1}}],[\"程序员可以通过\",{\"1\":{\"1529\":1}}],[\"程序员可以直接访问这部分空间\",{\"1\":{\"226\":1}}],[\"程序员无法直接控制\",{\"1\":{\"1523\":1}}],[\"程序员的自我修养\",{\"1\":{\"1457\":1}}],[\"程序员是非常友好的\",{\"1\":{\"696\":1,\"1396\":1}}],[\"程序员调用\",{\"1\":{\"696\":1,\"1396\":1}}],[\"程序员想要无限多的存储空间\",{\"1\":{\"250\":1}}],[\"程序员\",{\"1\":{\"226\":1}}],[\"程序员总希望存储是无限的\",{\"1\":{\"190\":1}}],[\"程序\",{\"1\":{\"217\":1,\"664\":1,\"1440\":1,\"1445\":1}}],[\"才有其实际意义\",{\"1\":{\"1597\":1}}],[\"才计算分类误差项\",{\"1\":{\"1156\":1}}],[\"才停止\",{\"1\":{\"987\":1}}],[\"才知道第\",{\"1\":{\"985\":1}}],[\"才可进行重新组装\",{\"1\":{\"981\":1}}],[\"才会被存储在该缓存\",{\"1\":{\"883\":1}}],[\"才不存储\",{\"1\":{\"550\":1}}],[\"才修改到了函数外部的全局变量\",{\"1\":{\"418\":1}}],[\"才从内存中去拿数据的\",{\"1\":{\"226\":1}}],[\"才去更新内存中的内容\",{\"1\":{\"217\":1}}],[\"才能安全地释放该共享数据占用的内存\",{\"1\":{\"1584\":1}}],[\"才能调用rcu\",{\"1\":{\"1526\":1}}],[\"才能与后面的\",{\"1\":{\"61\":1}}],[\"才能做到不重不漏\",{\"1\":{\"10\":1}}],[\"掉了\",{\"1\":{\"216\":1}}],[\"控制权来源于\",{\"1\":{\"1497\":1}}],[\"控制\",{\"1\":{\"992\":1,\"1179\":1,\"1510\":3}}],[\"控制子网的运行\",{\"1\":{\"977\":1}}],[\"控制反转\",{\"1\":{\"871\":1}}],[\"控制反转和面向切面编程\",{\"1\":{\"869\":1}}],[\"控制流\",{\"1\":{\"559\":1}}],[\"控制寄存器的配置\",{\"1\":{\"1482\":1}}],[\"控制寄存器\",{\"1\":{\"252\":1}}],[\"控制器的比例参数\",{\"1\":{\"1591\":1}}],[\"控制器是可以监听\",{\"1\":{\"224\":1}}],[\"控制器\",{\"1\":{\"215\":1}}],[\"控制主存执行读取\",{\"1\":{\"212\":1}}],[\"随后用于\",{\"1\":{\"952\":1}}],[\"随之的代价是很小的覆盖率损失\",{\"1\":{\"558\":1}}],[\"随想\",{\"1\":{\"543\":2}}],[\"随着数据规模的大幅度增加\",{\"1\":{\"1169\":1}}],[\"随着流水线的加深\",{\"1\":{\"241\":1}}],[\"随着\",{\"1\":{\"213\":1}}],[\"随机优化某一条训练数据上的损失函数\",{\"1\":{\"1212\":1}}],[\"随机删除一部分key\",{\"1\":{\"827\":1}}],[\"随机策略\",{\"1\":{\"559\":1}}],[\"随机\",{\"1\":{\"213\":1}}],[\"重点在第\",{\"1\":{\"1448\":1}}],[\"重点关注其中的\",{\"1\":{\"1345\":1}}],[\"重点研究\",{\"1\":{\"269\":1}}],[\"重启\",{\"0\":{\"1270\":1},\"1\":{\"1270\":1,\"1285\":1}}],[\"重启指令的执行\",{\"1\":{\"212\":1}}],[\"重合度过高\",{\"1\":{\"1157\":1}}],[\"重要的是这种心态的转变\",{\"1\":{\"1030\":1}}],[\"重要的部分\",{\"1\":{\"552\":1}}],[\"重新计算看其是否与回应报文中的\",{\"1\":{\"988\":1}}],[\"重新排列每个数的顺序\",{\"1\":{\"182\":1}}],[\"重传丢失的报文段\",{\"1\":{\"987\":1}}],[\"重传时间利用指数退避的计算方式为\",{\"1\":{\"985\":1}}],[\"重传超时时间\",{\"1\":{\"978\":1}}],[\"重试的间隔时间从\",{\"1\":{\"985\":1}}],[\"重置\",{\"1\":{\"978\":1}}],[\"重构\",{\"1\":{\"669\":1}}],[\"重定向\",{\"1\":{\"446\":1,\"999\":1}}],[\"重写\",{\"1\":{\"434\":1}}],[\"重载\",{\"1\":{\"431\":1}}],[\"重命名\",{\"0\":{\"381\":1,\"1226\":1}}],[\"重复的元素被自动去掉\",{\"1\":{\"343\":1}}],[\"发出通知\",{\"1\":{\"1374\":1}}],[\"发音同speedy\",{\"1\":{\"967\":1}}],[\"发一次数据\",{\"1\":{\"956\":1}}],[\"发数据\",{\"1\":{\"956\":1}}],[\"发起连接的客户端套接字\",{\"1\":{\"951\":1}}],[\"发生进程切换\",{\"1\":{\"1584\":1}}],[\"发生多径传播效应\",{\"1\":{\"1019\":1}}],[\"发生\",{\"1\":{\"881\":1}}],[\"发生的原因\",{\"1\":{\"190\":1}}],[\"发布了开源的项目libvirt\",{\"1\":{\"725\":1}}],[\"发现其调用的路径是与\",{\"1\":{\"1371\":1}}],[\"发现其中有两个\",{\"1\":{\"761\":1}}],[\"发现其一直不\",{\"1\":{\"288\":1}}],[\"发现\",{\"1\":{\"707\":1,\"1405\":1}}],[\"发现可以使用迭代器去生成大的数组\",{\"1\":{\"289\":1}}],[\"发觉需要注意以下几点\",{\"1\":{\"288\":1}}],[\"发送请求\",{\"1\":{\"1328\":1}}],[\"发送的\",{\"1\":{\"1317\":1}}],[\"发送的数据包大小大于\",{\"1\":{\"980\":1}}],[\"发送命令br\",{\"1\":{\"1316\":1}}],[\"发送给了\",{\"1\":{\"1301\":1}}],[\"发送数据时\",{\"1\":{\"994\":1}}],[\"发送方的\",{\"1\":{\"979\":1}}],[\"发送端通知另一端数据段的最大值\",{\"1\":{\"980\":1}}],[\"发送端和接收端都包含此字段\",{\"1\":{\"978\":1}}],[\"发送端终止发送数据\",{\"1\":{\"978\":1}}],[\"发送端收到拥塞通知\",{\"1\":{\"978\":1}}],[\"发送端降低发送速率\",{\"1\":{\"978\":1}}],[\"发送端未收到接收端的\",{\"1\":{\"976\":1}}],[\"发送和接受端到端的确认分组等机制\",{\"1\":{\"977\":1}}],[\"发送\",{\"1\":{\"212\":1}}],[\"乱序执行的处理器此时还可以允许执行指令\",{\"1\":{\"212\":1}}],[\"冻结临时寄存器和程序员可见寄存器的内容\",{\"1\":{\"212\":1}}],[\"填\",{\"1\":{\"1264\":2,\"1646\":2}}],[\"填于上表中的\",{\"1\":{\"1170\":1}}],[\"填充的异常向量\",{\"1\":{\"1498\":1}}],[\"填充\",{\"1\":{\"536\":1}}],[\"填充缓存\",{\"1\":{\"212\":1}}],[\"填满其中的两列\",{\"1\":{\"104\":1}}],[\"填满其中的一列\",{\"1\":{\"104\":1}}],[\"导致系统出现异常\",{\"1\":{\"1526\":1}}],[\"导致了\",{\"1\":{\"1352\":1}}],[\"导致了很多竞争\",{\"1\":{\"210\":1}}],[\"导致此对象读取的时候需要读两个\",{\"1\":{\"679\":1}}],[\"导致这段话不能理解\",{\"1\":{\"584\":1}}],[\"导致的惨案\",{\"1\":{\"522\":1}}],[\"导致写错\",{\"1\":{\"64\":1}}],[\"利用b+树建立索引\",{\"1\":{\"1168\":1}}],[\"利用深度神经网络金字塔具有从低到高语义的结构建立\",{\"1\":{\"1022\":1}}],[\"利用不同尺寸的\",{\"1\":{\"1021\":1}}],[\"利用这种方式通知发送端\",{\"1\":{\"978\":1}}],[\"利用了全局分支历史\",{\"1\":{\"542\":1}}],[\"利用全局分支历史\",{\"1\":{\"542\":1}}],[\"利用\",{\"1\":{\"404\":1}}],[\"利用空间局部性原理来降低\",{\"1\":{\"210\":1}}],[\"利用二分查找的思想\",{\"1\":{\"30\":1}}],[\"索引文件\",{\"1\":{\"815\":1}}],[\"索引内部数据结构\",{\"0\":{\"812\":1}}],[\"索引的值必须唯一\",{\"1\":{\"811\":1}}],[\"索引的方式是\",{\"1\":{\"559\":1}}],[\"索引类型\",{\"0\":{\"811\":1}}],[\"索引组\",{\"1\":{\"206\":1}}],[\"索引\",{\"0\":{\"809\":1},\"1\":{\"206\":1}}],[\"呢\",{\"1\":{\"205\":1,\"431\":1,\"1475\":1}}],[\"叠加处理\",{\"1\":{\"204\":1}}],[\"❤️❤️\",{\"1\":{\"1318\":1}}],[\"❤️❤️❤️\",{\"1\":{\"261\":1}}],[\"❤️\",{\"1\":{\"204\":1}}],[\"优点十分明显\",{\"1\":{\"1356\":1}}],[\"优点\",{\"0\":{\"1352\":1,\"1356\":1}}],[\"优缺点\",{\"0\":{\"1351\":1}}],[\"优先级越高\",{\"1\":{\"1567\":1}}],[\"优先级仅次于\",{\"1\":{\"1552\":1}}],[\"优先处理线程工作队列\",{\"1\":{\"1316\":1}}],[\"优先删除剩余时间短的key\",{\"1\":{\"827\":1}}],[\"优于insmod\",{\"1\":{\"719\":1}}],[\"优秀的查找算法前提下\",{\"1\":{\"200\":1}}],[\"优化版本\",{\"1\":{\"465\":1}}],[\"优化解法\",{\"0\":{\"153\":1}}],[\"优化\",{\"0\":{\"829\":1},\"1\":{\"118\":1}}],[\"悲剧的被比较对象\",{\"1\":{\"200\":1}}],[\"访客固定访问一个后端服务器\",{\"1\":{\"764\":1}}],[\"访问文件\",{\"1\":{\"1318\":1}}],[\"访问\",{\"1\":{\"760\":1}}],[\"访问或存储时必须使用\",{\"1\":{\"692\":1}}],[\"访问局部性\",{\"1\":{\"191\":1}}],[\"访存地址可以被分为两部分\",{\"1\":{\"198\":1}}],[\"实践\",{\"1\":{\"1350\":1}}],[\"实获我心\",{\"1\":{\"1060\":1}}],[\"实时性较差\",{\"1\":{\"1021\":1}}],[\"实时场景\",{\"1\":{\"643\":1}}],[\"实验手工标注了2000多个rgb图像用于测试视觉系统和无线系统\",{\"1\":{\"1132\":1}}],[\"实验的设计环境选择在实验室周围作为收集数据的地点\",{\"1\":{\"1132\":1}}],[\"实验的定位误差用下式衡量\",{\"1\":{\"1012\":1}}],[\"实验区域大小为10m×3m\",{\"1\":{\"1012\":1}}],[\"实验使用了\",{\"1\":{\"564\":1}}],[\"实战\",{\"0\":{\"680\":1,\"1442\":1}}],[\"实际值和预测值之间存在的差值分配不用的系数\",{\"1\":{\"1212\":1}}],[\"实际应用中一般会设置为一个很接近1的数字\",{\"1\":{\"1185\":1}}],[\"实际上\",{\"1\":{\"1252\":1}}],[\"实际上会将其分为\",{\"1\":{\"980\":1}}],[\"实际上底层就是一个\",{\"1\":{\"871\":1}}],[\"实际生产中较难\",{\"1\":{\"876\":1}}],[\"实际的值\",{\"1\":{\"572\":1}}],[\"实际构成了总的\",{\"1\":{\"198\":1}}],[\"实例进行说明\",{\"1\":{\"696\":1,\"1396\":1}}],[\"实例数据\",{\"0\":{\"678\":1},\"1\":{\"674\":2}}],[\"实例初始化本质是向\",{\"1\":{\"432\":1}}],[\"实例化\",{\"1\":{\"881\":1}}],[\"实例化的本质\",{\"0\":{\"432\":1},\"1\":{\"432\":2}}],[\"实例化子类\",{\"1\":{\"424\":1,\"425\":1}}],[\"实例化子类时\",{\"1\":{\"424\":1}}],[\"实例对象还没有被创建\",{\"1\":{\"430\":1}}],[\"实例\",{\"0\":{\"288\":1,\"704\":1},\"1\":{\"884\":1,\"1459\":1}}],[\"实现对应了\",{\"1\":{\"1584\":1}}],[\"实现方法\",{\"1\":{\"1584\":1}}],[\"实现可能会分成很多种\",{\"1\":{\"1528\":1}}],[\"实现禁止中断只需要使用一条汇编指令即可\",{\"1\":{\"1517\":1}}],[\"实现细节\",{\"0\":{\"1138\":1}}],[\"实现相同的准确率\",{\"1\":{\"1022\":1}}],[\"实现中\",{\"1\":{\"1584\":1}}],[\"实现中可以改变这个值\",{\"1\":{\"983\":1}}],[\"实现中的\",{\"1\":{\"691\":1}}],[\"实现以及\",{\"0\":{\"947\":1}}],[\"实现过后会被注册\",{\"1\":{\"706\":1,\"1402\":1}}],[\"实现如下\",{\"1\":{\"702\":1}}],[\"实现了几件事\",{\"1\":{\"1607\":1}}],[\"实现了高精度的融合室内定位算法\",{\"1\":{\"1012\":1}}],[\"实现了\",{\"1\":{\"545\":2,\"1474\":1}}],[\"实现了更高的性能\",{\"1\":{\"542\":1}}],[\"实现简单\",{\"1\":{\"543\":1}}],[\"实现前缀树\",{\"1\":{\"491\":1}}],[\"实现会比较麻烦\",{\"1\":{\"481\":1}}],[\"实现比较简单\",{\"1\":{\"481\":1}}],[\"实现的运行时服务\",{\"1\":{\"1498\":1}}],[\"实现的系统服务的唯一机制\",{\"1\":{\"1498\":1}}],[\"实现的功能如下文阐述\",{\"1\":{\"1490\":1}}],[\"实现的时候\",{\"1\":{\"1371\":1}}],[\"实现的较好的话\",{\"1\":{\"687\":1}}],[\"实现的接口声明信息\",{\"1\":{\"665\":1}}],[\"实现的代码如下\",{\"1\":{\"479\":1}}],[\"实现的作用为在\",{\"1\":{\"390\":1}}],[\"实现思想为\",{\"1\":{\"460\":1}}],[\"实现思路有\",{\"1\":{\"459\":1}}],[\"实现单例\",{\"1\":{\"431\":1}}],[\"实现预见错误功能\",{\"1\":{\"374\":1}}],[\"实现函数每一次处理一个迭代器对象\",{\"1\":{\"289\":1}}],[\"实现\",{\"0\":{\"706\":1,\"1480\":1,\"1625\":1},\"1\":{\"149\":1,\"344\":1,\"667\":1,\"1383\":1}}],[\"实现代码如下所示\",{\"1\":{\"74\":1}}],[\"说服别人接受你这个技术\",{\"1\":{\"1357\":1}}],[\"说了一下\",{\"1\":{\"562\":1}}],[\"说了几个避免冒险的方式\",{\"1\":{\"237\":1}}],[\"说的是如果处理器刚刚启动的时候\",{\"1\":{\"197\":1}}],[\"说明其暂时不能进入\",{\"1\":{\"1545\":1}}],[\"说明此时需要进入rcu空闲状态\",{\"1\":{\"1526\":1}}],[\"说明这个可能是自动生成的\",{\"1\":{\"1445\":1}}],[\"说明\",{\"1\":{\"138\":1,\"158\":1,\"674\":1,\"844\":1,\"1065\":1,\"1066\":1,\"1067\":1,\"1068\":1,\"1459\":1,\"1517\":1,\"1553\":1}}],[\"说明速度太慢了\",{\"1\":{\"34\":1}}],[\"说明在同一层\",{\"1\":{\"13\":1}}],[\"条非视距路径\",{\"1\":{\"1020\":1}}],[\"条视距路径\",{\"1\":{\"1020\":1}}],[\"条路径的时延\",{\"1\":{\"1020\":1}}],[\"条件是原有的\",{\"1\":{\"1534\":1}}],[\"条件执行和即时跳转指令\",{\"1\":{\"534\":1}}],[\"条件存在\",{\"1\":{\"13\":1}}],[\"条\",{\"1\":{\"196\":1,\"204\":2,\"1020\":1,\"1310\":1}}],[\"✔️✔️\",{\"1\":{\"196\":1}}],[\"目的端的\",{\"1\":{\"981\":1}}],[\"目的在于合理地对\",{\"1\":{\"590\":1}}],[\"目录>\",{\"1\":{\"1454\":1}}],[\"目录是影响到所有得子目录的\",{\"1\":{\"1240\":1}}],[\"目录即可\",{\"1\":{\"1240\":1}}],[\"目录下的所有\",{\"1\":{\"1248\":1}}],[\"目录下的所有文件\",{\"1\":{\"1248\":1}}],[\"目录下\",{\"1\":{\"1108\":1}}],[\"目录访问协议\",{\"1\":{\"977\":1}}],[\"目录\",{\"1\":{\"449\":1,\"1240\":1,\"1454\":2}}],[\"目录中创建一个\",{\"1\":{\"449\":1}}],[\"目录中\",{\"1\":{\"273\":1}}],[\"目前如下\",{\"1\":{\"1598\":1}}],[\"目前暂无接触\",{\"1\":{\"1499\":1}}],[\"目前的\",{\"1\":{\"1470\":1}}],[\"目前的理解是\",{\"1\":{\"690\":1}}],[\"目前的理解\",{\"1\":{\"550\":1,\"589\":1}}],[\"目前来看\",{\"1\":{\"1318\":1}}],[\"目前流行的加密方法称作保序加密\",{\"1\":{\"1166\":1}}],[\"目前流行的取代\",{\"1\":{\"856\":1}}],[\"目前为止\",{\"1\":{\"1151\":1}}],[\"目前\",{\"1\":{\"985\":1,\"1350\":1}}],[\"目前主流的web服务器包括nginx\",{\"1\":{\"859\":1}}],[\"目前已知的mope方法基于平衡二叉树编码实现了保序加密\",{\"1\":{\"1168\":1}}],[\"目前已知的可以通过\",{\"1\":{\"832\":1}}],[\"目前已经完成的有\",{\"1\":{\"266\":1}}],[\"目前我的理解是\",{\"1\":{\"602\":1}}],[\"目前可以看出来的是\",{\"1\":{\"584\":1}}],[\"目前自己理解的\",{\"1\":{\"580\":1}}],[\"目前限制了这个\",{\"1\":{\"573\":1}}],[\"目前预测仅在饱和计数器饱和的时候进行预测\",{\"1\":{\"558\":1}}],[\"目前猜测的\",{\"1\":{\"548\":1}}],[\"目前得到文件中的连续行用该方法比较不错\",{\"1\":{\"356\":1}}],[\"目前国内外也有在做\",{\"1\":{\"235\":1}}],[\"目前看来是这样的\",{\"1\":{\"196\":1}}],[\"目标文件的格式\",{\"0\":{\"1459\":1}}],[\"目标文件的研究\",{\"1\":{\"1456\":1}}],[\"目标文件\",{\"0\":{\"1458\":1},\"1\":{\"1459\":1}}],[\"目标路径>\",{\"1\":{\"1453\":1}}],[\"目标像一个反射体一样\",{\"1\":{\"1134\":1}}],[\"目标检测算法取得了很大的突破\",{\"1\":{\"1151\":1}}],[\"目标检测模型可分为两阶段目标检测器和单阶段目标检测器\",{\"1\":{\"1021\":1}}],[\"目标检测网络\",{\"1\":{\"1012\":1}}],[\"目标机器架构数据布局\",{\"1\":{\"692\":1}}],[\"目标代码生成等功能\",{\"1\":{\"690\":1}}],[\"目标地址寄存器\",{\"1\":{\"534\":1}}],[\"目标寄存器\",{\"1\":{\"529\":1,\"534\":1}}],[\"目标是写入寄存器堆中\",{\"1\":{\"245\":1}}],[\"目标\",{\"1\":{\"124\":1}}],[\"目标和\",{\"0\":{\"123\":1,\"124\":1},\"1\":{\"114\":1}}],[\"目标元素\",{\"1\":{\"20\":1}}],[\"❌📛❌\",{\"1\":{\"1481\":1}}],[\"❌🚫❌\",{\"1\":{\"88\":2}}],[\"❌❌❌\",{\"1\":{\"211\":1,\"235\":1,\"243\":1,\"432\":2,\"543\":1,\"557\":1,\"559\":1,\"584\":1,\"600\":1,\"604\":1,\"653\":1,\"1483\":1,\"1487\":1,\"1525\":1,\"1608\":1}}],[\"❌❌\",{\"1\":{\"196\":1,\"236\":1,\"245\":1,\"548\":1,\"559\":1,\"562\":1,\"599\":1,\"1318\":1}}],[\"原子通知链\",{\"1\":{\"1562\":1}}],[\"原子操作\",{\"1\":{\"828\":1}}],[\"原生的\",{\"1\":{\"1508\":1}}],[\"原地\",{\"1\":{\"1419\":2}}],[\"原来的都删除掉\",{\"1\":{\"1162\":1}}],[\"原来的循环\",{\"1\":{\"153\":1}}],[\"原因未知\",{\"1\":{\"1114\":2}}],[\"原因是\",{\"1\":{\"981\":1}}],[\"原因是我们在\",{\"1\":{\"624\":1}}],[\"原封不动从这个网络接口发送\",{\"1\":{\"980\":1}}],[\"原始通知链\",{\"1\":{\"1562\":1}}],[\"原始比特流传输\",{\"1\":{\"977\":1}}],[\"原始的对于\",{\"1\":{\"196\":1}}],[\"原理类似\",{\"1\":{\"1426\":1}}],[\"原理\",{\"0\":{\"826\":1},\"1\":{\"1322\":1,\"1392\":1}}],[\"原理是采集用户数据\",{\"1\":{\"646\":1}}],[\"原文\",{\"1\":{\"1501\":1}}],[\"原文链接\",{\"1\":{\"1179\":1}}],[\"原文是\",{\"1\":{\"593\":1}}],[\"原文参考\",{\"1\":{\"204\":1}}],[\"包检测过程中包检测器对不同数据包头部检测偏差\",{\"1\":{\"1024\":1}}],[\"包检测阶段通过包边界检测器\",{\"1\":{\"1020\":1}}],[\"包边界检测pbd错误\",{\"1\":{\"1024\":1}}],[\"包给\",{\"1\":{\"988\":1}}],[\"包以后\",{\"1\":{\"984\":1}}],[\"包向下到达\",{\"1\":{\"981\":1}}],[\"包太大引起的分片\",{\"1\":{\"980\":1}}],[\"包的\",{\"1\":{\"981\":1}}],[\"包的尺寸\",{\"1\":{\"980\":1}}],[\"包的首部需要占\",{\"1\":{\"979\":1}}],[\"包就会被丢弃\",{\"1\":{\"979\":1}}],[\"包中的数据多于\",{\"1\":{\"979\":1}}],[\"包首部占\",{\"1\":{\"979\":1}}],[\"包乱序或者包损坏时会\",{\"1\":{\"976\":1}}],[\"包管理\",{\"0\":{\"774\":1,\"915\":1}}],[\"包含了可以直接执行的文件\",{\"1\":{\"1459\":1}}],[\"包含了代码和数据\",{\"1\":{\"1459\":2}}],[\"包含内存地址或者指向对象内存位置的指针\",{\"1\":{\"1383\":1}}],[\"包含24个卷积层和2个全连接层\",{\"1\":{\"1156\":1}}],[\"包含关系\",{\"1\":{\"736\":1}}],[\"包含的内容\",{\"1\":{\"195\":1}}],[\"包到项目中\",{\"1\":{\"681\":1}}],[\"包裹起来的方法\",{\"1\":{\"428\":1}}],[\"包\",{\"1\":{\"273\":1,\"670\":1,\"979\":2,\"984\":1,\"985\":1,\"988\":1,\"1287\":1}}],[\"包括状态标识\",{\"1\":{\"1521\":1,\"1522\":1,\"1523\":1}}],[\"包括很多取值\",{\"1\":{\"1483\":1}}],[\"包括普通安装和通过\",{\"1\":{\"1374\":1}}],[\"包括信道状态信息\",{\"1\":{\"1017\":1}}],[\"包括视距路径\",{\"1\":{\"1012\":1}}],[\"包括的有\",{\"1\":{\"962\":1}}],[\"包括的内容为\",{\"1\":{\"289\":1}}],[\"包括读缓冲区和写缓冲区\",{\"1\":{\"962\":1}}],[\"包括在\",{\"1\":{\"725\":1}}],[\"包括arch\",{\"1\":{\"717\":1}}],[\"包括堆对象的布局\",{\"1\":{\"674\":1}}],[\"包括抛出异常\",{\"1\":{\"667\":1}}],[\"包括数据库防火墙场景\",{\"1\":{\"648\":1}}],[\"包括数据加密\",{\"1\":{\"648\":1}}],[\"包括网络安全\",{\"1\":{\"647\":1}}],[\"包括几个字段\",{\"1\":{\"595\":1}}],[\"包括对\",{\"1\":{\"310\":1}}],[\"包括分配的内存\",{\"1\":{\"282\":1}}],[\"包括两个重要的算法和通用的处理\",{\"1\":{\"190\":1}}],[\"包括\",{\"1\":{\"190\":1,\"205\":1,\"545\":1,\"562\":1,\"577\":1,\"955\":1,\"1020\":1,\"1132\":1,\"1371\":1,\"1551\":1}}],[\"整数\",{\"1\":{\"1596\":1}}],[\"整数组成的数组\",{\"1\":{\"136\":1}}],[\"整型变量\",{\"1\":{\"1529\":1}}],[\"整整大一倍\",{\"1\":{\"1470\":1}}],[\"整体来看\",{\"1\":{\"1155\":1}}],[\"整个过程是由内核负责管理和控制的\",{\"1\":{\"1523\":1}}],[\"整个过程的描述大致为\",{\"1\":{\"1380\":1}}],[\"整个过程完成\",{\"1\":{\"1162\":1}}],[\"整个缓冲区大小\",{\"1\":{\"1340\":1}}],[\"整个模型的预测值结构如下图所示\",{\"1\":{\"1155\":1}}],[\"整个系统如图所示\",{\"1\":{\"1155\":1}}],[\"整个数据库都在内存中加载\",{\"1\":{\"825\":1}}],[\"整个进程也会奔溃\",{\"1\":{\"738\":1}}],[\"整个cache\",{\"1\":{\"195\":1}}],[\"整理了一些问题和感悟\",{\"1\":{\"685\":1}}],[\"量化研究方法如下所描述\",{\"1\":{\"194\":1}}],[\"通知rcu子系统开始执行后台任务\",{\"1\":{\"1585\":1}}],[\"通知这个过程本质上就是遍历通知链中的每一项\",{\"1\":{\"1578\":1}}],[\"通知所有对该事件产生兴趣的一方\",{\"1\":{\"1578\":1}}],[\"通知者需要定义一个通知链\",{\"1\":{\"1578\":1}}],[\"通知者\",{\"1\":{\"1578\":1}}],[\"通知都是一个整数\",{\"1\":{\"1567\":1}}],[\"通知链的运作机制包括两个角色\",{\"1\":{\"1578\":1}}],[\"通知链以后\",{\"1\":{\"1576\":1}}],[\"通知链对象\",{\"1\":{\"1575\":1}}],[\"通知链有四种\",{\"1\":{\"1575\":1}}],[\"通知链需要进行注册\",{\"1\":{\"1570\":1}}],[\"通知链表\",{\"1\":{\"1567\":1}}],[\"通知链表只能够在内核的子系统之间使用\",{\"1\":{\"1560\":1}}],[\"通知链使用信号量实现回调函数的加锁\",{\"1\":{\"1562\":1}}],[\"通知链元素的回调函数在进程上下文中运行\",{\"1\":{\"1562\":1}}],[\"通知链元素的回调函数\",{\"1\":{\"1562\":1}}],[\"通知链\",{\"1\":{\"1562\":2}}],[\"通知链可以分为\",{\"1\":{\"1562\":1}}],[\"通知就会给\",{\"1\":{\"1531\":1}}],[\"通知\",{\"1\":{\"1516\":1}}],[\"通知客户端\",{\"1\":{\"984\":1}}],[\"通道数\",{\"1\":{\"1186\":1}}],[\"通信与\",{\"1\":{\"1322\":1}}],[\"通信所需要的数据\",{\"1\":{\"1320\":1}}],[\"通信的信息大小存在限制\",{\"1\":{\"1353\":1}}],[\"通信的进程\",{\"1\":{\"1338\":1}}],[\"通信的时候\",{\"1\":{\"1309\":1}}],[\"通信的复杂性\",{\"1\":{\"1305\":1}}],[\"通信的原理大致如下\",{\"1\":{\"1292\":1}}],[\"通信机制的代理类\",{\"1\":{\"1305\":1}}],[\"通信机制的基类\",{\"1\":{\"1304\":2}}],[\"通信拥有比较大的优势\",{\"1\":{\"1292\":1}}],[\"通信时\",{\"1\":{\"980\":1}}],[\"通信\",{\"0\":{\"1292\":1},\"1\":{\"958\":1,\"1305\":1,\"1314\":1}}],[\"通\",{\"1\":{\"728\":1}}],[\"通用的做法是在类的\",{\"1\":{\"696\":1,\"1396\":1}}],[\"通用计算型\",{\"1\":{\"643\":2}}],[\"通用寄存器的输出被读入两个临时寄存器\",{\"1\":{\"245\":1}}],[\"通行证\",{\"1\":{\"277\":1}}],[\"通常协议会做的事情\",{\"1\":{\"1507\":1}}],[\"通常\",{\"1\":{\"1383\":2}}],[\"通常用来确定哪个对象正在被使用或者哪个对象可以安全地被释放\",{\"1\":{\"1383\":1}}],[\"通常用\",{\"1\":{\"1383\":1}}],[\"通常在\",{\"1\":{\"1380\":1}}],[\"通常情况下会走同步模式\",{\"1\":{\"1333\":1}}],[\"通常作为客户端使用\",{\"1\":{\"1305\":1}}],[\"通常为子进程\",{\"1\":{\"739\":1}}],[\"通常的使用场景是先通过\",{\"1\":{\"530\":1}}],[\"通常选用组相连\",{\"1\":{\"264\":1}}],[\"通常2~16\",{\"1\":{\"206\":1}}],[\"通常是\",{\"1\":{\"195\":1,\"954\":1}}],[\"通常而言\",{\"1\":{\"194\":1,\"196\":1,\"210\":1,\"226\":1,\"262\":1,\"545\":1,\"732\":1,\"1033\":1,\"1293\":1,\"1388\":1,\"1517\":1}}],[\"通过禁止中断\",{\"1\":{\"1517\":1}}],[\"通过串行的\",{\"1\":{\"1507\":1}}],[\"通过可擦除的\",{\"1\":{\"1501\":1}}],[\"通过以上文章\",{\"1\":{\"1481\":1}}],[\"通过这篇文章\",{\"1\":{\"1468\":1}}],[\"通过这个例子简单了解\",{\"1\":{\"1393\":1}}],[\"通过这个实现类与客户端进行交互\",{\"1\":{\"1298\":1}}],[\"通过本章节很多例子\",{\"1\":{\"1443\":1}}],[\"通过向系统的\",{\"1\":{\"1305\":1}}],[\"通过比较输出的结果可以看出\",{\"1\":{\"1212\":1}}],[\"通过rf无线信号感知人类活动的一个巨大挑战在于缺少已标记的数据集\",{\"1\":{\"1136\":1}}],[\"通过自顶向下\",{\"1\":{\"1022\":1}}],[\"通过模数转换器\",{\"1\":{\"1020\":1}}],[\"通过各种控制协议\",{\"1\":{\"977\":1}}],[\"通过路径选择\",{\"1\":{\"977\":1}}],[\"通过配置修改上限值\",{\"1\":{\"957\":1}}],[\"通过构造方法进行依赖注入的时候产生的循环依赖\",{\"1\":{\"881\":1}}],[\"通过延迟加载的方式来注入\",{\"1\":{\"873\":1}}],[\"通过上面的代码\",{\"1\":{\"873\":1}}],[\"通过异步操作可以持久化到磁盘中\",{\"1\":{\"825\":1}}],[\"通过宿主机所在的机器网络对公网进行访问\",{\"1\":{\"728\":1}}],[\"通过对书籍\",{\"1\":{\"664\":1}}],[\"通过对比这两者的不同\",{\"1\":{\"195\":1}}],[\"通过什么样的方式使能的\",{\"1\":{\"593\":1}}],[\"通过追踪\",{\"1\":{\"545\":1}}],[\"通过当前\",{\"1\":{\"530\":1}}],[\"通过求交集看是否结果等于自身就可以很方便地求解出结果\",{\"1\":{\"343\":1}}],[\"通过例外机制来中断活跃进程\",{\"1\":{\"256\":1}}],[\"通过与寄存器\",{\"1\":{\"245\":1}}],[\"通过代码可以看出\",{\"1\":{\"130\":1}}],[\"通过\",{\"1\":{\"9\":1,\"379\":1,\"383\":1,\"530\":1,\"576\":1,\"599\":1,\"623\":1,\"667\":1,\"695\":1,\"703\":1,\"812\":1,\"879\":1,\"881\":3,\"916\":1,\"1179\":1,\"1293\":1,\"1307\":1,\"1329\":1,\"1342\":3,\"1395\":1,\"1453\":1,\"1516\":2}}],[\"接受异常的时候会设置异常状态码\",{\"1\":{\"1483\":1}}],[\"接受该连接请求\",{\"1\":{\"955\":1}}],[\"接着\",{\"1\":{\"1523\":1}}],[\"接着对于5个数用任意的det确定加密算法加密\",{\"1\":{\"1169\":1}}],[\"接着将\",{\"1\":{\"530\":1}}],[\"接口作为运行时服务\",{\"1\":{\"1474\":1}}],[\"接口解析\",{\"1\":{\"1322\":1}}],[\"接口并提供了一些基本的\",{\"1\":{\"1304\":1}}],[\"接口的实现类\",{\"1\":{\"1298\":1}}],[\"接口的使用\",{\"1\":{\"508\":1}}],[\"接口\",{\"1\":{\"411\":1,\"701\":1,\"1320\":1,\"1449\":1}}],[\"接口可以实现这个功能\",{\"1\":{\"329\":1}}],[\"接上面的英文原文\",{\"1\":{\"584\":1}}],[\"接上\",{\"1\":{\"397\":1}}],[\"接收器根据\",{\"1\":{\"1020\":1}}],[\"接收方\",{\"1\":{\"981\":1}}],[\"接收到\",{\"1\":{\"980\":1}}],[\"接收端收到\",{\"1\":{\"980\":1}}],[\"接收端应该尽快将数据推\",{\"1\":{\"978\":1}}],[\"接收和发送消息使用\",{\"1\":{\"742\":1}}],[\"接收两个字符串参数\",{\"1\":{\"390\":1}}],[\"接收的是\",{\"1\":{\"285\":1}}],[\"接下来的流程就是进行判断\",{\"1\":{\"1518\":1}}],[\"接下来的过程就是涉及到\",{\"1\":{\"707\":1,\"1406\":1}}],[\"接下来分别进行阐述说明\",{\"1\":{\"1482\":1}}],[\"接下来分别讲述每个模块的测试\",{\"1\":{\"1012\":1}}],[\"接下来再看\",{\"1\":{\"1345\":1}}],[\"接下来这段代码实现神经网络的前向传播过程\",{\"1\":{\"1212\":1}}],[\"接下来reload\",{\"1\":{\"1145\":1}}],[\"接下来编译\",{\"1\":{\"1145\":1}}],[\"接下来找到我们之前下载好的csi\",{\"1\":{\"1145\":1}}],[\"接下来重点讲述一下indefi的测试\",{\"1\":{\"1012\":1}}],[\"接下来重点讲述一下本文的两个重点模型之一\",{\"1\":{\"1012\":1}}],[\"接下来讲述第二个模型\",{\"1\":{\"1012\":1}}],[\"接下来介绍本文的第二个重点模块\",{\"1\":{\"1012\":1}}],[\"接下来我将分别重点讲述这些算法\",{\"1\":{\"1012\":1}}],[\"接下来将分别讲述每个模块的细节\",{\"1\":{\"1012\":1}}],[\"接下来就会存储对象中的实际数据\",{\"1\":{\"674\":1}}],[\"接下来\",{\"1\":{\"600\":1,\"1145\":1,\"1308\":1,\"1380\":1}}],[\"接下来主要是对比\",{\"1\":{\"552\":1}}],[\"接下来若干行输入\",{\"1\":{\"309\":1}}],[\"接下来是测试步骤\",{\"1\":{\"1145\":1}}],[\"接下来是对寄存器消耗的计算\",{\"1\":{\"557\":1}}],[\"接下来是访存指令\",{\"1\":{\"245\":1}}],[\"接下来是执行的过程\",{\"1\":{\"245\":1}}],[\"接下来进行指令的译码\",{\"1\":{\"245\":1}}],[\"接下来说明\",{\"1\":{\"245\":1}}],[\"接下来看第一版本的代码\",{\"1\":{\"59\":1}}],[\"接近处理器的存储比较小的话\",{\"1\":{\"192\":1}}],[\"接近处理器的存储是比较小和比较快的\",{\"1\":{\"192\":1}}],[\"移到了新建的\",{\"1\":{\"1448\":1}}],[\"移动端界面一直卡在加载中\",{\"1\":{\"1114\":1}}],[\"移动到最后面\",{\"1\":{\"302\":1}}],[\"移动到最前面\",{\"1\":{\"302\":1}}],[\"移动到\",{\"1\":{\"302\":1}}],[\"移动到上层存储中来利用空间局部性\",{\"1\":{\"192\":1}}],[\"移植到数据库\",{\"1\":{\"864\":1}}],[\"移项可得\",{\"1\":{\"160\":1}}],[\"块内位移用于确定所访问的数据在块内的位置\",{\"1\":{\"198\":1}}],[\"块地址+块内位移\",{\"1\":{\"198\":1}}],[\"块\",{\"1\":{\"192\":1,\"198\":1}}],[\"被认为是策略函数\",{\"1\":{\"1602\":1}}],[\"被认为是一个比较糟糕的预测\",{\"1\":{\"1021\":1}}],[\"被通知者将其注册到通知链中\",{\"1\":{\"1578\":1}}],[\"被通知者\",{\"1\":{\"1578\":1}}],[\"被选为主\",{\"1\":{\"1475\":1}}],[\"被广泛应用于信道测量\",{\"1\":{\"1020\":1}}],[\"被反射的信号会经过更长的路径延迟到达\",{\"1\":{\"1019\":1}}],[\"被服务程序最终感知到前\",{\"1\":{\"984\":1}}],[\"被动套接字\",{\"1\":{\"951\":1}}],[\"被当做\",{\"1\":{\"682\":1}}],[\"被分配的策略是\",{\"1\":{\"559\":1}}],[\"被分配\",{\"1\":{\"559\":1}}],[\"被分割成为了一些相同大小的块\",{\"1\":{\"203\":1}}],[\"被指令的\",{\"1\":{\"559\":1}}],[\"被需要的阶段\",{\"1\":{\"552\":1}}],[\"被问到了一个题目\",{\"1\":{\"453\":1}}],[\"被\",{\"1\":{\"421\":1,\"548\":1,\"696\":1,\"1396\":1}}],[\"被两个\",{\"1\":{\"236\":1}}],[\"被表示成了三个部分\",{\"1\":{\"195\":1}}],[\"被引用过一次的存储器位置在未来会被多次引用\",{\"1\":{\"192\":1}}],[\"被剪枝\",{\"1\":{\"10\":1}}],[\"倾向于访问内存中较为靠近的值\",{\"1\":{\"192\":1}}],[\"造成的影响以及可能的解决方案\",{\"1\":{\"190\":1}}],[\"介绍了\",{\"1\":{\"1501\":1}}],[\"介绍主\",{\"1\":{\"1475\":1}}],[\"介绍何时启动\",{\"1\":{\"1475\":1}}],[\"介绍几个环境变量\",{\"1\":{\"1418\":1}}],[\"介绍的\",{\"1\":{\"445\":1}}],[\"介绍\",{\"0\":{\"723\":1},\"1\":{\"190\":2}}],[\"介绍空间局部性原理和时间局部性原理\",{\"1\":{\"190\":1}}],[\"哲学含义\",{\"1\":{\"190\":1}}],[\"位系统中为\",{\"1\":{\"1469\":1}}],[\"位对应的也可以找到\",{\"1\":{\"1464\":1}}],[\"位置在\",{\"1\":{\"1611\":1}}],[\"位置在其他参数之前\",{\"1\":{\"419\":1}}],[\"位置\",{\"1\":{\"983\":1}}],[\"位标志位表示该分片后面是否还有新的分片和是否要分片\",{\"1\":{\"981\":1}}],[\"位片偏移则记录了\",{\"1\":{\"981\":1}}],[\"位最大可以接收\",{\"1\":{\"978\":1}}],[\"位二进制表示\",{\"1\":{\"972\":1}}],[\"位二进制\",{\"1\":{\"972\":1}}],[\"位图索引是一个针对多个字段的简单查询设计一种特殊的索引\",{\"1\":{\"812\":1}}],[\"位图索引\",{\"1\":{\"812\":1}}],[\"位寄存器的值\",{\"1\":{\"599\":1}}],[\"位导致的预测结果集后移\",{\"1\":{\"576\":1}}],[\"位可能会增加分类过程中的\",{\"1\":{\"576\":1}}],[\"位组成\",{\"1\":{\"576\":1}}],[\"位开始\",{\"1\":{\"536\":1}}],[\"位操作\",{\"0\":{\"535\":1}}],[\"位清零\",{\"1\":{\"530\":1}}],[\"位有符号立即数左移\",{\"1\":{\"530\":1}}],[\"位有符号整数的场景中\",{\"1\":{\"529\":1}}],[\"位的\",{\"1\":{\"676\":1}}],[\"位的计数器\",{\"1\":{\"558\":1}}],[\"位的有符号数\",{\"1\":{\"530\":2}}],[\"位的有符号整数\",{\"1\":{\"529\":1}}],[\"位的字数据传送到目的寄存器中\",{\"1\":{\"524\":1}}],[\"位带符号整数\",{\"1\":{\"529\":1}}],[\"位带符号整数到寄存器的指令\",{\"1\":{\"529\":1}}],[\"位填\",{\"1\":{\"528\":1}}],[\"位填充位\",{\"1\":{\"527\":1}}],[\"位到\",{\"1\":{\"527\":1,\"536\":1}}],[\"位常量\",{\"1\":{\"524\":1}}],[\"位值将需要三种类型的指令\",{\"1\":{\"523\":1}}],[\"位\",{\"1\":{\"522\":1,\"527\":1,\"528\":2,\"529\":1,\"530\":1,\"559\":3,\"676\":3,\"682\":1,\"972\":2,\"993\":2,\"1464\":2,\"1470\":2}}],[\"位是否为\",{\"1\":{\"521\":1}}],[\"位不为\",{\"1\":{\"521\":1}}],[\"位后的值\",{\"1\":{\"514\":2}}],[\"位随机密码\",{\"1\":{\"404\":1}}],[\"位就留给了\",{\"1\":{\"261\":1}}],[\"位进行了符号扩展\",{\"1\":{\"245\":1}}],[\"位以创建字偏移\",{\"1\":{\"245\":1}}],[\"位为\",{\"1\":{\"217\":2}}],[\"位用于\",{\"1\":{\"196\":1}}],[\"位于\",{\"1\":{\"186\":1,\"984\":2}}],[\"位整数范围\",{\"1\":{\"136\":1}}],[\"模型的实际运行结果如图所示\",{\"1\":{\"1012\":1}}],[\"模型\",{\"1\":{\"691\":1,\"954\":1}}],[\"模型其实就是对应\",{\"1\":{\"691\":1}}],[\"模糊匹配等\",{\"1\":{\"372\":1}}],[\"模式下标志着它进入\",{\"1\":{\"1584\":1}}],[\"模式是想要将多个物理网卡绑定为一个逻辑网卡\",{\"1\":{\"732\":1}}],[\"模式可以使得虚拟机通过网络地址转换功能\",{\"1\":{\"728\":1}}],[\"模式\",{\"0\":{\"732\":1},\"1\":{\"361\":1,\"732\":1,\"1545\":2,\"1584\":2}}],[\"模块加载进内核用的\",{\"1\":{\"1605\":1}}],[\"模块如何调用等问题\",{\"1\":{\"1549\":1}}],[\"模块提供\",{\"1\":{\"1532\":1}}],[\"模块提供统一的注册和管理接口\",{\"1\":{\"1531\":1}}],[\"模块安装指定的\",{\"1\":{\"916\":1}}],[\"模块驱动注解\",{\"1\":{\"879\":1}}],[\"模块兼容的\",{\"1\":{\"411\":1}}],[\"模块内函数和方法都可使用\",{\"1\":{\"379\":1}}],[\"模块级\",{\"1\":{\"379\":1}}],[\"模块的初始化就是在这个阶段完成的\",{\"1\":{\"1557\":1}}],[\"模块的使用\",{\"1\":{\"351\":1}}],[\"模块的时候\",{\"1\":{\"325\":1}}],[\"模块可以把我们只需要一次生成的中间结果缓存起来\",{\"1\":{\"298\":1}}],[\"模块之外\",{\"1\":{\"287\":1}}],[\"模块\",{\"1\":{\"175\":1,\"284\":1,\"310\":1,\"320\":1,\"352\":2,\"879\":1,\"1371\":1,\"1531\":1,\"1633\":1}}],[\"模板不能万能的\",{\"1\":{\"158\":1}}],[\"模板是否具有普适性\",{\"1\":{\"58\":1}}],[\"模板\",{\"0\":{\"6\":1,\"157\":1,\"159\":1},\"1\":{\"1176\":1}}],[\"默认读缓冲区是不可用的\",{\"1\":{\"962\":1}}],[\"默认读取操作不会产生锁\",{\"1\":{\"814\":1}}],[\"默认目录是\",{\"1\":{\"959\":1}}],[\"默认阻塞属性\",{\"1\":{\"956\":1}}],[\"默认模式\",{\"1\":{\"956\":1}}],[\"默认策略\",{\"1\":{\"827\":1}}],[\"默认\",{\"1\":{\"761\":1,\"814\":1}}],[\"默认关闭\",{\"1\":{\"729\":1}}],[\"默认用户名是root\",{\"1\":{\"610\":1}}],[\"默认为字符串的最后一个位置\",{\"1\":{\"392\":1}}],[\"默认为第一个字符\",{\"1\":{\"392\":1}}],[\"默认的\",{\"1\":{\"1607\":1}}],[\"默认的参数\",{\"1\":{\"1293\":1}}],[\"默认的29900\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"默认的分隔符是空格\",{\"1\":{\"1231\":1}}],[\"默认的作用域为\",{\"1\":{\"379\":1}}],[\"默认的是升序\",{\"1\":{\"172\":1}}],[\"默认情况下\",{\"1\":{\"372\":1,\"662\":1,\"1333\":1}}],[\"默认参数\",{\"1\":{\"303\":1}}],[\"默认是事务存储引擎\",{\"1\":{\"814\":1}}],[\"默认是使用的是桥接方式进行网络连接\",{\"1\":{\"729\":1}}],[\"默认是\",{\"1\":{\"302\":1}}],[\"默认值是\",{\"1\":{\"1418\":1}}],[\"默认值\",{\"1\":{\"302\":1,\"303\":1}}],[\"默认会查找元素需要插入的位置\",{\"1\":{\"27\":1}}],[\"取消映射\",{\"1\":{\"1342\":1}}],[\"取消注册死亡通知\",{\"1\":{\"1310\":1}}],[\"取而代之的是只需要判断哪些节点需要调整\",{\"1\":{\"1170\":1}}],[\"取最小值\",{\"1\":{\"984\":1}}],[\"取得父进程的进程\",{\"1\":{\"738\":1}}],[\"取值有\",{\"1\":{\"1483\":1}}],[\"取值为\",{\"1\":{\"534\":1}}],[\"取值默认从\",{\"1\":{\"354\":1}}],[\"取内该存地址的值放入寄存器\",{\"1\":{\"524\":1}}],[\"取该内存地址的值放入寄存器\",{\"1\":{\"524\":3}}],[\"取到全局变量\",{\"1\":{\"418\":1}}],[\"取决于\",{\"1\":{\"261\":1,\"983\":1,\"1344\":1}}],[\"取模后返回\",{\"1\":{\"167\":1}}],[\"取下界\",{\"1\":{\"23\":1}}],[\"仅仅举例用\",{\"1\":{\"1599\":1}}],[\"仅仅只是能在初始化的期间使用\",{\"1\":{\"1553\":1}}],[\"仅仅只接收简单类型的\",{\"1\":{\"1483\":1}}],[\"仅仅从单一的rf帧上面我们是无法判断出人类的姿态的\",{\"1\":{\"1137\":1}}],[\"仅仅预测通用的或浮点数寄存器\",{\"1\":{\"600\":1}}],[\"仅主机\",{\"1\":{\"729\":1}}],[\"仅列出授权\",{\"1\":{\"718\":1}}],[\"仅列出作者名称\",{\"1\":{\"718\":1}}],[\"仅description\",{\"1\":{\"718\":1}}],[\"仅由\",{\"1\":{\"167\":1}}],[\"仅含\",{\"0\":{\"167\":1}}],[\"胜哥强\",{\"1\":{\"165\":1}}],[\"指明训练图片绝对路径的train\",{\"1\":{\"1159\":1}}],[\"指明自己的\",{\"1\":{\"982\":1}}],[\"指示是否将当前线程作为主线程加入到线程池中\",{\"1\":{\"1298\":1}}],[\"指示信息\",{\"1\":{\"999\":1}}],[\"指示内核应该接受指向该套接字的连接请求\",{\"1\":{\"951\":1}}],[\"指数增长直到到达\",{\"1\":{\"987\":1}}],[\"指数退避\",{\"0\":{\"985\":1}}],[\"指出\",{\"1\":{\"983\":1}}],[\"指向的链表中删除\",{\"1\":{\"1572\":1}}],[\"指向的地址\",{\"1\":{\"1470\":1}}],[\"指向这个通知链表的第一个元素\",{\"1\":{\"1570\":1}}],[\"指向这个结构体\",{\"1\":{\"955\":1}}],[\"指向下一个节点\",{\"1\":{\"1567\":1}}],[\"指向地址开始的\",{\"1\":{\"1470\":1}}],[\"指向一个\",{\"1\":{\"1381\":1}}],[\"指向正在被移动的对象\",{\"1\":{\"1381\":1}}],[\"指向进程中的一个\",{\"1\":{\"1366\":1}}],[\"指向该缓冲区的起始位置\",{\"1\":{\"1341\":1}}],[\"指向调用链头部的一个指针\",{\"1\":{\"1570\":1}}],[\"指向调用\",{\"1\":{\"1340\":1}}],[\"指向\",{\"1\":{\"955\":1,\"1333\":1,\"1344\":2,\"1380\":1,\"1620\":1}}],[\"指向方法已解析的常量池的引用\",{\"1\":{\"667\":1}}],[\"指向了\",{\"1\":{\"46\":1}}],[\"指定了变量的类型\",{\"1\":{\"1529\":1}}],[\"指定了mysql\",{\"1\":{\"610\":1}}],[\"指定端口号\",{\"1\":{\"1453\":1}}],[\"指定修订版本\",{\"1\":{\"1240\":1}}],[\"指定从中检索清单代码库的网址\",{\"1\":{\"1240\":1}}],[\"指定的是\",{\"1\":{\"980\":1}}],[\"指定轮询几率\",{\"1\":{\"763\":1}}],[\"指定类名即可\",{\"1\":{\"661\":1}}],[\"指定只需要编译的\",{\"1\":{\"659\":1}}],[\"指定\",{\"1\":{\"613\":1,\"761\":1,\"763\":1,\"1307\":1,\"1418\":1,\"1479\":1}}],[\"指定被忽略的条件\",{\"1\":{\"373\":1}}],[\"指定为\",{\"1\":{\"302\":2,\"303\":2}}],[\"指的是控制反转\",{\"1\":{\"871\":1}}],[\"指的是\",{\"1\":{\"582\":1,\"1476\":1,\"1593\":1}}],[\"指的是指令从内存中加载出来的值\",{\"1\":{\"580\":1}}],[\"指的是同一时刻只能有一个程序在运行\",{\"1\":{\"281\":1}}],[\"指的是没有写在缓存里面\",{\"1\":{\"218\":1}}],[\"指的就是\",{\"1\":{\"214\":1}}],[\"指令实现快速唤醒\",{\"1\":{\"1537\":1}}],[\"指令实现了一种快速锁定和释放内存地址的机制\",{\"1\":{\"534\":1}}],[\"指令可以帮助系统降低功耗\",{\"1\":{\"1537\":1}}],[\"指令来访问\",{\"1\":{\"1474\":1}}],[\"指令区域\",{\"1\":{\"1460\":1}}],[\"指令进行改造的方案\",{\"1\":{\"724\":1}}],[\"指令在栈帧上分配的局部变量\",{\"1\":{\"692\":1}}],[\"指令类是\",{\"1\":{\"691\":1}}],[\"指令类型操作下列四个函数中的一个\",{\"1\":{\"245\":1}}],[\"指令分为了三类\",{\"1\":{\"601\":1}}],[\"指令地址和\",{\"1\":{\"599\":1}}],[\"指令级并行\",{\"1\":{\"582\":1}}],[\"指令中有访存的操作\",{\"1\":{\"580\":1}}],[\"指令中的细节\",{\"1\":{\"537\":1}}],[\"指令取值\",{\"1\":{\"580\":1}}],[\"指令如下\",{\"1\":{\"537\":1}}],[\"指令一般有两种用法\",{\"1\":{\"536\":1}}],[\"指令只能读取\",{\"1\":{\"529\":1}}],[\"指令时\",{\"1\":{\"529\":1,\"534\":1}}],[\"指令才能访问内存\",{\"1\":{\"523\":1}}],[\"指令是串行执行的\",{\"1\":{\"691\":1}}],[\"指令是原子性的存储\",{\"1\":{\"534\":1}}],[\"指令是\",{\"1\":{\"529\":1,\"1537\":1}}],[\"指令是用于从内存中读取一个\",{\"1\":{\"529\":1}}],[\"指令是判断是否无符号大于等于\",{\"1\":{\"517\":1}}],[\"指令是判断是否无符号大于\",{\"1\":{\"517\":1}}],[\"指令是判断是否无符号小于\",{\"1\":{\"517\":1}}],[\"指令是按照顺序执行的\",{\"1\":{\"192\":1}}],[\"指令的话\",{\"1\":{\"602\":1}}],[\"指令的结果\",{\"1\":{\"599\":1}}],[\"指令的结果是取决于控制流的\",{\"1\":{\"559\":1}}],[\"指令的指令编码来分析一下\",{\"1\":{\"537\":1}}],[\"指令的含义如下\",{\"1\":{\"534\":1}}],[\"指令的语法如下所示\",{\"1\":{\"529\":1}}],[\"指令的使用方法如下\",{\"1\":{\"522\":1}}],[\"指令的一些变体\",{\"1\":{\"517\":1}}],[\"指令的助记符\",{\"1\":{\"514\":1}}],[\"指令的速查表使用\",{\"1\":{\"514\":1}}],[\"指令格式中处于固定位置\",{\"1\":{\"245\":1}}],[\"指令格式的数量很少\",{\"1\":{\"235\":1}}],[\"指令集\",{\"1\":{\"235\":2}}],[\"指令\",{\"1\":{\"198\":1,\"245\":2,\"502\":1,\"507\":1,\"529\":1,\"530\":1,\"599\":1,\"602\":2,\"603\":1,\"692\":1,\"1537\":1}}],[\"指针的值\",{\"1\":{\"1534\":1}}],[\"指针移动到最新的位置上去\",{\"1\":{\"1253\":1}}],[\"指针\",{\"1\":{\"1252\":1,\"1333\":2,\"1534\":1}}],[\"指针后调用\",{\"1\":{\"706\":1,\"1402\":1}}],[\"指针指向另一个链表\",{\"1\":{\"459\":1}}],[\"指针指向的到第\",{\"1\":{\"169\":1}}],[\"指针实现\",{\"1\":{\"180\":1}}],[\"指针左移\",{\"1\":{\"165\":1}}],[\"指针右移\",{\"1\":{\"165\":1}}],[\"项信息\",{\"1\":{\"1333\":1}}],[\"项目结构\",{\"0\":{\"1179\":1}}],[\"项目中时\",{\"1\":{\"1113\":1}}],[\"项目↩︎\",{\"1\":{\"708\":1}}],[\"项目\",{\"1\":{\"693\":1}}],[\"项目主页配置\",{\"1\":{\"0\":1}}],[\"项目主页\",{\"0\":{\"0\":1}}],[\"项数\",{\"1\":{\"165\":1}}],[\"首部占\",{\"1\":{\"979\":1}}],[\"首项\",{\"1\":{\"165\":1}}],[\"首先初始化\",{\"1\":{\"1488\":1}}],[\"首先计算可用的\",{\"1\":{\"1487\":1}}],[\"首先安装\",{\"1\":{\"1431\":1}}],[\"首先下载一个启动kcptun的工具\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"首先请求插入\",{\"1\":{\"1169\":1}}],[\"首先将小于置信度阈值的值归0\",{\"1\":{\"1157\":1}}],[\"首先将输入图片resize到448x448\",{\"1\":{\"1155\":1}}],[\"首先不考虑batch\",{\"1\":{\"1157\":1}}],[\"首先从所有的检测框中找到置信度较大的那个框\",{\"1\":{\"1157\":1}}],[\"首先用cd命令进入到linux\",{\"1\":{\"1145\":1}}],[\"首先需要弄明白\",{\"1\":{\"1373\":1}}],[\"首先需要更换软件源\",{\"1\":{\"1145\":1}}],[\"首先需要对其进行定义\",{\"1\":{\"173\":1}}],[\"首先讲述第一个模型\",{\"1\":{\"1012\":1}}],[\"首先先看\",{\"1\":{\"696\":1,\"1396\":1}}],[\"首先看需要解析字节码的\",{\"1\":{\"693\":1}}],[\"首先看优化后的\",{\"1\":{\"154\":1}}],[\"首先增加\",{\"1\":{\"681\":1}}],[\"首先研究一下\",{\"1\":{\"669\":1}}],[\"首先使用\",{\"1\":{\"657\":1}}],[\"首先是往\",{\"1\":{\"1328\":1}}],[\"首先是对相机的标定\",{\"1\":{\"1012\":1}}],[\"首先是wifi定位模块的实现与测试\",{\"1\":{\"1012\":1}}],[\"首先是indefi系统的概要\",{\"1\":{\"1012\":1}}],[\"首先是室内的多径效应\",{\"1\":{\"1012\":1}}],[\"首先是\",{\"1\":{\"601\":1,\"1012\":1,\"1373\":1}}],[\"首先阐述\",{\"1\":{\"580\":1}}],[\"首先作者阐述了简单的硬件就可以实现精确度较高的\",{\"1\":{\"542\":1}}],[\"首先\",{\"1\":{\"530\":1,\"1157\":1,\"1333\":1,\"1334\":1,\"1383\":1,\"1389\":1}}],[\"首先找到\",{\"1\":{\"499\":1}}],[\"首先来看一个例子\",{\"1\":{\"418\":1}}],[\"首先第一步\",{\"1\":{\"245\":1}}],[\"首先联想到\",{\"1\":{\"159\":1}}],[\"首先确定模板\",{\"1\":{\"136\":1}}],[\"首先按照例子解释一下这个用例\",{\"1\":{\"102\":1}}],[\"首先查找在前面出现的位置\",{\"1\":{\"32\":1}}],[\"∗iou\",{\"1\":{\"1155\":1}}],[\"∗\",{\"1\":{\"165\":1,\"557\":1}}],[\"剑指\",{\"1\":{\"165\":1}}],[\"剑指offer\",{\"0\":{\"165\":1}}],[\"他们负责追踪对象的\",{\"1\":{\"1383\":1}}],[\"他们分别是\",{\"1\":{\"736\":1}}],[\"他在调用进程中\",{\"1\":{\"738\":1}}],[\"他在想究竟有多少种连续的正数序列的和为\",{\"1\":{\"165\":1}}],[\"他就得到另一组连续正数和为\",{\"1\":{\"165\":1}}],[\"他马上就写出了正确答案是\",{\"1\":{\"165\":1}}],[\"牢记前缀和的推导\",{\"1\":{\"160\":1}}],[\"≥\",{\"1\":{\"160\":1}}],[\"至今已经发展到了v3\",{\"1\":{\"1151\":1}}],[\"至于为什么是异或\",{\"1\":{\"559\":1}}],[\"至于执行的顺序\",{\"1\":{\"424\":1}}],[\"至\",{\"1\":{\"529\":1,\"624\":1}}],[\"至少有\",{\"1\":{\"736\":1}}],[\"至少含有两个数\",{\"1\":{\"165\":1}}],[\"至少包括两个数\",{\"1\":{\"165\":1}}],[\"至少为\",{\"1\":{\"156\":1}}],[\"至此也证明了这个接口中的可迭代对象是必不可少的\",{\"1\":{\"289\":1}}],[\"至此\",{\"1\":{\"103\":1,\"1162\":1}}],[\"子系统对一个\",{\"1\":{\"1510\":1}}],[\"子主题\",{\"1\":{\"1065\":1,\"1066\":1,\"1067\":1,\"1068\":1}}],[\"子进程用来执行\",{\"1\":{\"1374\":1}}],[\"子进程\",{\"1\":{\"738\":1}}],[\"子类允许定义的属性就是自身的\",{\"1\":{\"436\":1}}],[\"子类其实是重写了父类的\",{\"1\":{\"425\":1}}],[\"子类与父类的init\",{\"1\":{\"425\":1}}],[\"子类继承父类时\",{\"1\":{\"425\":1}}],[\"子类也通过\",{\"1\":{\"424\":1}}],[\"子类\",{\"1\":{\"424\":1}}],[\"子类不重写\",{\"1\":{\"424\":1}}],[\"子数组\",{\"1\":{\"160\":1}}],[\"子数组元素总和为\",{\"1\":{\"156\":1}}],[\"子数组大小\",{\"1\":{\"156\":1}}],[\"子集\",{\"1\":{\"120\":1}}],[\"巧妙用到了前缀和\",{\"1\":{\"155\":1}}],[\"换个地方\",{\"1\":{\"1419\":1}}],[\"换取了安全和架构上的简洁\",{\"1\":{\"1353\":1}}],[\"换成\",{\"1\":{\"164\":2}}],[\"换言之\",{\"1\":{\"155\":1,\"576\":1}}],[\"换句话说\",{\"1\":{\"132\":1,\"159\":1,\"1131\":1}}],[\"天线的水平和垂直分辨角度可以达到15度\",{\"1\":{\"1134\":1}}],[\"天线阵列通过其空间位置分离反射信号\",{\"1\":{\"1134\":1}}],[\"天你可以吃到类型\",{\"1\":{\"155\":1}}],[\"天吃到第\",{\"1\":{\"155\":1}}],[\"天吃到类型\",{\"1\":{\"155\":2}}],[\"天吃\",{\"1\":{\"155\":4}}],[\"颗糖果的限制下在第\",{\"1\":{\"155\":1}}],[\"颗糖果\",{\"1\":{\"155\":6}}],[\"得到服务端的回复后进行处理\",{\"1\":{\"1328\":1}}],[\"得到其编码值\",{\"1\":{\"1170\":1}}],[\"得到密文x27716c\",{\"1\":{\"1169\":1}}],[\"得到zip文件\",{\"1\":{\"1145\":1}}],[\"得到一个\",{\"1\":{\"530\":1}}],[\"得到结果\",{\"1\":{\"401\":1}}],[\"得到的结果是一模一样的\",{\"1\":{\"687\":1}}],[\"得到的\",{\"1\":{\"196\":1}}],[\"得到\",{\"1\":{\"164\":2}}],[\"得到恰好\",{\"1\":{\"91\":1}}],[\"得出可以用前缀和求解的思路\",{\"1\":{\"155\":1}}],[\"次左右\",{\"1\":{\"1501\":1}}],[\"次也超时了\",{\"1\":{\"985\":1}}],[\"次发出后还要等\",{\"1\":{\"985\":1}}],[\"次的重试时间间隔为\",{\"1\":{\"985\":1}}],[\"次重发\",{\"1\":{\"985\":1}}],[\"次\",{\"1\":{\"154\":1,\"167\":3,\"1475\":1}}],[\"次元素\",{\"1\":{\"52\":1}}],[\"干掉内层的\",{\"1\":{\"153\":1}}],[\"相加取均值以达到消除\",{\"1\":{\"1024\":1}}],[\"相加可得\",{\"1\":{\"124\":1}}],[\"相位以\",{\"1\":{\"1025\":1}}],[\"相位\",{\"1\":{\"1024\":1}}],[\"相位上产生一个随机误差\",{\"1\":{\"1024\":1}}],[\"相位产生一个常数误差\",{\"1\":{\"1024\":1}}],[\"相位误差消除\",{\"0\":{\"1024\":1}}],[\"相位的波动也会引起频率的选择性衰弱\",{\"1\":{\"1020\":1}}],[\"相位和第\",{\"1\":{\"1020\":1}}],[\"相应的处理函数\",{\"1\":{\"1578\":1}}],[\"相应的已连接套接字就被关闭\",{\"1\":{\"952\":1}}],[\"相应的\",{\"1\":{\"741\":1,\"993\":1}}],[\"相反的\",{\"1\":{\"1133\":1,\"1542\":1}}],[\"相反\",{\"1\":{\"738\":1}}],[\"相当于在原图上做大小为14x14的窗口滑动\",{\"1\":{\"1153\":1}}],[\"相当于apply\",{\"1\":{\"844\":1}}],[\"相当于程序流程图中的基本过程\",{\"1\":{\"691\":1}}],[\"相当于每个\",{\"1\":{\"276\":1,\"279\":1}}],[\"相似的方式创建页表\",{\"1\":{\"1491\":1}}],[\"相似的图像金字塔\",{\"1\":{\"1022\":1}}],[\"相似\",{\"1\":{\"539\":1}}],[\"相比r\",{\"1\":{\"1155\":1}}],[\"相比于传统的\",{\"1\":{\"1292\":1}}],[\"相比于传统的加密方案\",{\"1\":{\"1166\":1}}],[\"相比于fpn\",{\"1\":{\"1012\":1}}],[\"相比于现有的\",{\"1\":{\"1012\":1}}],[\"相比于一些小项目或者小企业\",{\"1\":{\"637\":1}}],[\"相比于以前的基于上下文的预测器\",{\"1\":{\"542\":1}}],[\"相比于\",{\"1\":{\"325\":1,\"954\":1,\"962\":1,\"1357\":1,\"1501\":1}}],[\"相比\",{\"1\":{\"245\":1,\"842\":1}}],[\"相联度\",{\"1\":{\"206\":3}}],[\"相同\",{\"1\":{\"201\":1,\"988\":1}}],[\"相关常量以\",{\"1\":{\"1464\":1}}],[\"相关信息\",{\"1\":{\"1333\":1}}],[\"相关工作\",{\"0\":{\"1168\":1}}],[\"相关理论包括wifi相关理论和计算机视觉目标检测相关理论\",{\"1\":{\"1012\":1}}],[\"相关\",{\"1\":{\"266\":1,\"1025\":1}}],[\"相关的信息\",{\"1\":{\"1487\":1}}],[\"相关的内容放在一起\",{\"1\":{\"1461\":1}}],[\"相关的\",{\"1\":{\"1392\":1,\"1516\":1}}],[\"相关的视觉特征\",{\"1\":{\"1021\":1}}],[\"相关的一些信息\",{\"1\":{\"693\":1}}],[\"相关的推测指令\",{\"1\":{\"603\":1}}],[\"相关的性能损失\",{\"1\":{\"547\":1}}],[\"相关的基础用法和学习心得\",{\"1\":{\"369\":1}}],[\"相关的逻辑和设计理念\",{\"1\":{\"269\":1}}],[\"相关的技术\",{\"1\":{\"266\":1}}],[\"相关的技术点\",{\"1\":{\"190\":1}}],[\"相关的研究\",{\"1\":{\"245\":1}}],[\"相关介绍\",{\"1\":{\"190\":1}}],[\"相等\",{\"1\":{\"153\":1}}],[\"颠倒后的循环\",{\"1\":{\"153\":1}}],[\"区段的时候\",{\"1\":{\"1551\":1}}],[\"区段又分成7个子区段\",{\"1\":{\"1551\":1}}],[\"区段\",{\"1\":{\"1551\":1}}],[\"区分为多个域\",{\"1\":{\"1355\":1}}],[\"区分\",{\"1\":{\"973\":1}}],[\"区别\",{\"1\":{\"736\":1}}],[\"区别在于边界条件的不同\",{\"1\":{\"34\":1}}],[\"区间内的区间和\",{\"1\":{\"165\":1}}],[\"区间和一类的解法就使用前缀和的思想\",{\"1\":{\"150\":1}}],[\"|c|e|u|a|p|r|s|f|\",{\"1\":{\"978\":1}}],[\"|len1\",{\"1\":{\"459\":1}}],[\"||\",{\"1\":{\"150\":1,\"703\":1,\"1320\":1,\"1518\":3,\"1608\":1}}],[\"|\",{\"1\":{\"150\":11,\"195\":8,\"220\":24,\"343\":1,\"400\":1,\"438\":25,\"750\":2,\"753\":1,\"758\":1,\"776\":1,\"820\":1,\"906\":1,\"931\":2,\"956\":2,\"961\":1,\"978\":13,\"989\":14,\"1079\":1,\"1145\":4,\"1231\":2,\"1265\":2,\"1269\":1,\"1275\":2,\"1279\":1,\"1309\":3,\"1345\":1,\"1434\":18,\"1445\":2,\"1448\":3,\"1449\":5,\"1454\":2,\"1647\":2}}],[\"|=\",{\"1\":{\"88\":2,\"956\":1,\"1316\":1,\"1320\":2,\"1333\":1}}],[\"蜡烛之间的盘子\",{\"0\":{\"150\":1}}],[\"奇数子序列的和\",{\"1\":{\"149\":1}}],[\"奇数层\",{\"1\":{\"61\":1}}],[\"考虑用生成器来改写直接返回列表的函数\",{\"1\":{\"294\":1}}],[\"考虑\",{\"1\":{\"218\":1}}],[\"考虑到在官网下载可能会速度比较慢\",{\"1\":{\"1177\":1}}],[\"考虑到每次需要\",{\"1\":{\"169\":1}}],[\"考虑到边界条件\",{\"1\":{\"169\":1}}],[\"考虑顺序\",{\"1\":{\"115\":2,\"136\":2,\"138\":1}}],[\"考试的最大困扰度\",{\"0\":{\"164\":1}}],[\"考验编程的基础\",{\"1\":{\"149\":1}}],[\"并等待它们进入休眠状态\",{\"1\":{\"1585\":1}}],[\"并等待内存完成访问\",{\"1\":{\"212\":1}}],[\"并研究其中涉及到的内核初始化过程\",{\"1\":{\"1549\":1}}],[\"并记录下停止时的值\",{\"1\":{\"1527\":1}}],[\"并遵循相关的使用原则和规范\",{\"1\":{\"1526\":1}}],[\"并唤醒所有等待rcu更新的进程\",{\"1\":{\"1526\":1}}],[\"并进入rcu空闲状态\",{\"1\":{\"1524\":1}}],[\"并恢复相关的设备和资源\",{\"1\":{\"1523\":1}}],[\"并让\",{\"1\":{\"1523\":1}}],[\"并切换到空闲进程\",{\"1\":{\"1522\":1}}],[\"并通知它们停止当前正在运行的定时器\",{\"1\":{\"1521\":1}}],[\"并通过内核提供的函数接口进行同步和访问\",{\"1\":{\"1529\":1}}],[\"并通过锁依赖机制确保锁的正确性\",{\"1\":{\"1524\":1}}],[\"并通过2d关键点图显示出来\",{\"1\":{\"1133\":1}}],[\"并通过\",{\"1\":{\"382\":1,\"1454\":1}}],[\"并保持了向后兼容性\",{\"1\":{\"1508\":1}}],[\"并保持了向后兼容\",{\"1\":{\"1508\":1}}],[\"并初始化\",{\"1\":{\"1498\":1}}],[\"并结合其他压缩工具\",{\"1\":{\"1454\":1}}],[\"并最终使编译通过\",{\"1\":{\"1443\":1}}],[\"并以该向量作为传入传递给\",{\"1\":{\"1365\":1}}],[\"并解析\",{\"1\":{\"1308\":1}}],[\"并解压\",{\"1\":{\"274\":1}}],[\"并运行\",{\"1\":{\"1295\":1}}],[\"并给它起一个简短的名称以便于引用\",{\"1\":{\"1250\":1}}],[\"并设置给变量\",{\"1\":{\"1231\":1}}],[\"并设置超时时间\",{\"1\":{\"833\":1}}],[\"并能直接操作加密数据\",{\"1\":{\"1168\":1}}],[\"并不适用于需要全局同步的数据结构\",{\"1\":{\"1529\":1}}],[\"并不泄露其他任何的密文信息\",{\"1\":{\"1169\":1}}],[\"并不同于本系统中的自由移动\",{\"1\":{\"1133\":1}}],[\"并不是很好用\",{\"1\":{\"1178\":1}}],[\"并不是平台无关的\",{\"1\":{\"695\":1,\"1395\":1}}],[\"并不是\",{\"1\":{\"213\":1}}],[\"并从服务器取得本地尚未包含的数据\",{\"1\":{\"1253\":1}}],[\"并从无线信号中进行学习\",{\"1\":{\"1133\":1}}],[\"并从各个方面优化其精度\",{\"1\":{\"1021\":1}}],[\"并用之训练\",{\"1\":{\"1131\":1}}],[\"并提交新的\",{\"1\":{\"1114\":1}}],[\"并格式化为英文\",{\"1\":{\"1113\":1}}],[\"并绘制误差累计分布图\",{\"1\":{\"1012\":1}}],[\"并分别在三个密度图数据集上进行了测试\",{\"1\":{\"1012\":1}}],[\"并对其进行初始化和管理\",{\"1\":{\"1529\":1}}],[\"并对视觉信号和无线信号进行同步\",{\"1\":{\"1132\":1}}],[\"并对比先进的目标检测模型\",{\"1\":{\"1012\":1}}],[\"并对比了现有的先进的目标检测器\",{\"1\":{\"1012\":1}}],[\"并对结果进行了测试\",{\"1\":{\"1012\":1}}],[\"并对他们进行了融合\",{\"1\":{\"583\":1}}],[\"并使用脚本生成文件名称列表\",{\"1\":{\"1162\":1}}],[\"并使用了\",{\"1\":{\"1012\":1}}],[\"并使用官方的语法和命令\",{\"1\":{\"824\":1}}],[\"并在其中保存每一个被通知者对事件的回调函数\",{\"1\":{\"1578\":1}}],[\"并在整个初始化完成后\",{\"1\":{\"1551\":1}}],[\"并在不是rcu空闲状态时退出rcu空闲处理\",{\"1\":{\"1526\":1}}],[\"并在必要时执行离开当前进程的操作\",{\"1\":{\"1522\":1}}],[\"并在该对象上调用远程方法以实现跨进程通信\",{\"1\":{\"1298\":1}}],[\"并在\",{\"1\":{\"1113\":1}}],[\"并在每个往返时间内最多增加1个报文段\",{\"1\":{\"987\":1}}],[\"并在调用\",{\"1\":{\"951\":1}}],[\"并向客户端发送\",{\"1\":{\"984\":1}}],[\"并指明客户端的\",{\"1\":{\"982\":1}}],[\"并根据本机\",{\"1\":{\"981\":1}}],[\"并根据结果更新\",{\"1\":{\"518\":1}}],[\"并执行\",{\"1\":{\"1541\":1}}],[\"并执行目标状态所需的操作\",{\"1\":{\"1523\":1}}],[\"并执行命令\",{\"1\":{\"1275\":1}}],[\"并执行其中的js代码\",{\"1\":{\"904\":1}}],[\"并执行文件内的所有以\",{\"1\":{\"372\":1}}],[\"并支持各种参数使用\",{\"1\":{\"844\":1}}],[\"并为它分配资源\",{\"1\":{\"738\":1}}],[\"并增加了一些自己的理解\",{\"1\":{\"635\":1}}],[\"并没有避免一次拷贝操作\",{\"1\":{\"1358\":1}}],[\"并没有产生引用或者是\",{\"1\":{\"682\":1}}],[\"并没有看懂这个是何种优点\",{\"1\":{\"599\":1}}],[\"并没有达到调用\",{\"1\":{\"426\":1}}],[\"并和最先进的模型进行了对比\",{\"1\":{\"581\":1}}],[\"并传给\",{\"1\":{\"522\":1}}],[\"并无太大的增益\",{\"1\":{\"508\":1}}],[\"并临时关闭系统输出\",{\"1\":{\"383\":1}}],[\"并行查找与\",{\"1\":{\"559\":1}}],[\"并行\",{\"1\":{\"281\":1,\"283\":2}}],[\"并发是为了尽量让硬件利用率高\",{\"1\":{\"736\":1}}],[\"并发和隔离\",{\"1\":{\"736\":2}}],[\"并发\",{\"1\":{\"281\":1}}],[\"并发与并行\",{\"0\":{\"281\":1}}],[\"并将当前cpu所在的调度器状态设置为rcu空闲状态\",{\"1\":{\"1524\":1}}],[\"并将其初始化为\",{\"1\":{\"1345\":1}}],[\"并将其加入到默认的\",{\"1\":{\"1298\":1}}],[\"并将响应结果返回给调用方\",{\"1\":{\"1305\":1}}],[\"并将\",{\"1\":{\"1020\":1}}],[\"并将事件添加到框架上\",{\"1\":{\"961\":1}}],[\"并将目标寄存器\",{\"1\":{\"534\":1}}],[\"并将结果存储到目标寄存器中\",{\"1\":{\"529\":1}}],[\"并将这个映射关系添加到\",{\"1\":{\"258\":1}}],[\"并将指令从内存中读取出来到指令寄存器\",{\"1\":{\"245\":1}}],[\"并打开有效位\",{\"1\":{\"212\":1}}],[\"并返回写入变量的个数\",{\"1\":{\"1596\":1}}],[\"并返回\",{\"1\":{\"1524\":1}}],[\"并返回其长度\",{\"1\":{\"160\":1}}],[\"并返回该子数组的长度\",{\"1\":{\"158\":1}}],[\"并求和\",{\"1\":{\"149\":1}}],[\"并且基于\",{\"1\":{\"1601\":1}}],[\"并且等待其他线程完成对共享数据的访问并退出\",{\"1\":{\"1584\":1}}],[\"并且和需要设置的不相等\",{\"1\":{\"1534\":1}}],[\"并且和为\",{\"1\":{\"156\":1}}],[\"并且将可达对象标记为\",{\"1\":{\"1385\":1}}],[\"并且将张量中的数值限制在1e\",{\"1\":{\"1212\":1}}],[\"并且可以识别在程序运行期间哪个对象是可达的\",{\"1\":{\"1383\":1}}],[\"并且可以分类为基于地址的\",{\"1\":{\"583\":1}}],[\"并且进行\",{\"1\":{\"1380\":1}}],[\"并且进行了举例\",{\"1\":{\"236\":1}}],[\"并且应用起来\",{\"1\":{\"1357\":1}}],[\"并且克隆后没有任何其他人向远程仓库推送过数据\",{\"1\":{\"1250\":1}}],[\"并且其卡表也是\",{\"1\":{\"1386\":1}}],[\"并且其左右子树也是平衡二叉树\",{\"1\":{\"1169\":1}}],[\"并且其失效相对不那么频繁发生\",{\"1\":{\"213\":1}}],[\"并且卷积层中使用更少的卷积核\",{\"1\":{\"1156\":1}}],[\"并且还要选取合适的步长\",{\"1\":{\"1153\":1}}],[\"并且还提供了在运行时调整概率的机会\",{\"1\":{\"558\":1}}],[\"并且受到fmcw的带宽的影响\",{\"1\":{\"1134\":1}}],[\"并且两端同步\",{\"1\":{\"985\":1}}],[\"并且拥有特定的目录结构\",{\"1\":{\"864\":1}}],[\"并且需要注意\",{\"1\":{\"692\":1}}],[\"并且没有\",{\"1\":{\"601\":1}}],[\"并且没有显式调用父类的初始化函数\",{\"1\":{\"424\":1}}],[\"并且是将值进行了分类\",{\"1\":{\"599\":1}}],[\"并且是不进位的减法\",{\"1\":{\"516\":1}}],[\"并且要求这个预测是正确的\",{\"1\":{\"599\":1}}],[\"并且从错误预测中恢复过来\",{\"1\":{\"578\":1}}],[\"并且限制了预测器的大小\",{\"1\":{\"562\":1}}],[\"并且只有在饱和计数器饱和的时候对应的预测才被使用\",{\"1\":{\"562\":1}}],[\"并且只读取一个字节\",{\"1\":{\"527\":1}}],[\"并且新的条目会被分配\",{\"1\":{\"559\":1}}],[\"并且提出了一种\",{\"1\":{\"581\":1}}],[\"并且提出了\",{\"1\":{\"558\":1}}],[\"并且发觉其作为提高单线程性能方向的一个潜力\",{\"1\":{\"542\":1}}],[\"并且左右子树都存在的情况\",{\"1\":{\"499\":1}}],[\"并且显式调用了父类的初始化函数\",{\"1\":{\"424\":1}}],[\"并且使用了分隔符\",{\"1\":{\"1231\":1}}],[\"并且使用简单\",{\"1\":{\"646\":1}}],[\"并且使用\",{\"1\":{\"375\":1,\"926\":1}}],[\"并且涉及多组输入输出时\",{\"1\":{\"309\":1}}],[\"并且最后对多进程进行关闭\",{\"1\":{\"288\":1}}],[\"并且不需要额外的硬件\",{\"1\":{\"263\":1}}],[\"并且存储在\",{\"1\":{\"245\":1}}],[\"并且通常会更改整个寄存器\",{\"1\":{\"235\":1}}],[\"并且数据是这个\",{\"1\":{\"224\":1}}],[\"并且性能也最好\",{\"1\":{\"213\":1}}],[\"并且所有物品的价值均为\",{\"1\":{\"120\":1}}],[\"并且每一次的变化也要在基因库\",{\"1\":{\"92\":1}}],[\"并且每座岛屿只能由水平方向和\",{\"1\":{\"76\":1}}],[\"并且课程\",{\"1\":{\"86\":1}}],[\"并且房间里可能有一些钥匙能使你进入下一个房间\",{\"1\":{\"75\":1}}],[\"并且中序遍历过程中\",{\"1\":{\"64\":1}}],[\"并且\",{\"1\":{\"13\":1,\"36\":1,\"593\":1,\"984\":1,\"1212\":1,\"1386\":1}}],[\"并且在上层的\",{\"1\":{\"1352\":1}}],[\"并且在不同实验环境下测试以保证该神经网络适用的场景可以进行一般化推广\",{\"1\":{\"1132\":1}}],[\"并且在需要的时候\",{\"1\":{\"599\":1}}],[\"并且在最后返回了一个\",{\"1\":{\"401\":1}}],[\"并且在一个python进程中\",{\"1\":{\"277\":1}}],[\"并且在回溯的时候把\",{\"1\":{\"11\":1}}],[\"并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解\",{\"1\":{\"5\":1}}],[\"故针对\",{\"1\":{\"1583\":1}}],[\"故直接退出\",{\"1\":{\"1545\":1}}],[\"故将其单独进行研究\",{\"1\":{\"1540\":1}}],[\"故需要对avl算法进行改进\",{\"1\":{\"1169\":1}}],[\"故需要进行调整节点的步骤\",{\"1\":{\"1169\":1}}],[\"故查询和插入的效率得到了保证\",{\"1\":{\"1169\":1}}],[\"故其编码策略可以进行调整\",{\"1\":{\"1170\":1}}],[\"故其操作复杂度为o\",{\"1\":{\"1169\":1}}],[\"故其效率非常高\",{\"1\":{\"724\":1}}],[\"故取3位加以说明\",{\"1\":{\"1169\":1}}],[\"故无法得知69对应的保序编码\",{\"1\":{\"1169\":1}}],[\"故测量到的\",{\"1\":{\"1024\":1}}],[\"故\",{\"1\":{\"1024\":1}}],[\"故通常假定第一个到达的峰值是主径的接收功率\",{\"1\":{\"1020\":1}}],[\"故在默认情况下\",{\"1\":{\"729\":1}}],[\"故此作者提出\",{\"1\":{\"543\":1}}],[\"故建议经常使用迭代法\",{\"1\":{\"458\":1}}],[\"故得出结论\",{\"1\":{\"147\":1}}],[\"故为左闭右闭区间\",{\"1\":{\"22\":1}}],[\"故为左闭右开区间\",{\"1\":{\"22\":1}}],[\"画个表格\",{\"1\":{\"147\":1}}],[\"画图分析一下\",{\"1\":{\"13\":1}}],[\"写的同时不允许其他读的操作\",{\"1\":{\"1583\":1}}],[\"写的还是比较清晰的\",{\"1\":{\"499\":1}}],[\"写作时间2022年10月28日\",{\"1\":{\"1371\":1}}],[\"写作本文的目的在于\",{\"1\":{\"1371\":1}}],[\"写数据\",{\"1\":{\"1316\":1}}],[\"写完之后进行验证\",{\"1\":{\"1285\":1}}],[\"写进\",{\"1\":{\"1162\":1}}],[\"写过的代码忘记了也就罢了\",{\"1\":{\"1040\":1}}],[\"写代码\",{\"1\":{\"1040\":1}}],[\"写在这随时查阅\",{\"1\":{\"726\":1}}],[\"写在这里备忘一下\",{\"1\":{\"296\":1}}],[\"写更新\",{\"1\":{\"222\":1}}],[\"写也会\",{\"1\":{\"218\":1}}],[\"写入的类型是\",{\"1\":{\"1333\":1}}],[\"写入\",{\"1\":{\"1329\":1,\"1333\":1}}],[\"写入命名管道\",{\"1\":{\"741\":1}}],[\"写入数据\",{\"1\":{\"534\":1,\"1333\":1}}],[\"写入地址\",{\"1\":{\"212\":1}}],[\"写入缓存\",{\"1\":{\"212\":1}}],[\"写\",{\"0\":{\"1285\":1},\"1\":{\"190\":1,\"214\":1,\"741\":1,\"962\":1}}],[\"写伪代码实现前缀和\",{\"1\":{\"147\":1}}],[\"写出函数来计算可以凑成总金额的硬币组合数\",{\"1\":{\"134\":1}}],[\"写出这道题的暴力搜索程序\",{\"1\":{\"100\":1}}],[\"写出的解法如下\",{\"1\":{\"10\":1}}],[\"概念类似\",{\"1\":{\"1599\":1}}],[\"概述\",{\"0\":{\"145\":1,\"652\":1,\"695\":1,\"763\":1},\"1\":{\"693\":1,\"708\":1}}],[\"概览\",{\"0\":{\"73\":1,\"83\":1,\"112\":1,\"1338\":1,\"1443\":1},\"1\":{\"53\":1,\"83\":1}}],[\"连接可能处于\",{\"1\":{\"984\":1}}],[\"连接队列\",{\"0\":{\"984\":1}}],[\"连接未启动的服务或者端口\",{\"1\":{\"983\":1}}],[\"连接的\",{\"1\":{\"980\":1,\"988\":1}}],[\"连接保持时一直保持\",{\"1\":{\"978\":1}}],[\"连接\",{\"1\":{\"954\":1,\"977\":1,\"978\":1,\"983\":1,\"997\":1}}],[\"连接着编译器前端和后端\",{\"1\":{\"690\":1}}],[\"连接到多个\",{\"1\":{\"1508\":1}}],[\"连接到\",{\"1\":{\"612\":1,\"1507\":1}}],[\"连接数据库即可\",{\"1\":{\"609\":1}}],[\"连接方式是\",{\"1\":{\"204\":1}}],[\"连续调用三次\",{\"1\":{\"738\":1}}],[\"连续的表查找是独立的\",{\"1\":{\"553\":1}}],[\"连续的子数组和\",{\"0\":{\"156\":1}}],[\"连续子数组\",{\"1\":{\"160\":1}}],[\"连续数组\",{\"0\":{\"158\":1},\"1\":{\"144\":1}}],[\"连通\",{\"1\":{\"89\":1}}],[\"外设\",{\"1\":{\"1507\":1}}],[\"外\",{\"1\":{\"736\":1}}],[\"外循环\",{\"1\":{\"139\":1}}],[\"外层循环还是和\",{\"1\":{\"134\":1}}],[\"内\",{\"1\":{\"1025\":1}}],[\"内容如下\",{\"1\":{\"1449\":2}}],[\"内容\",{\"1\":{\"982\":1}}],[\"内容时的感知性能\",{\"1\":{\"965\":1,\"966\":1}}],[\"内部温度传感器\",{\"1\":{\"1589\":1}}],[\"内部网络与桥接网络相似\",{\"1\":{\"731\":1}}],[\"内部网络\",{\"1\":{\"731\":1}}],[\"内部实现需要的数据\",{\"1\":{\"667\":1}}],[\"内部的框架裸机使用该缓存\",{\"1\":{\"884\":1}}],[\"内部的\",{\"1\":{\"418\":1}}],[\"内部\",{\"1\":{\"418\":1,\"602\":1}}],[\"内置web服务器运行\",{\"1\":{\"864\":1}}],[\"内置固件\",{\"0\":{\"383\":1}}],[\"内置的\",{\"1\":{\"453\":1}}],[\"内置的固件\",{\"1\":{\"382\":1}}],[\"内置的数据结构\",{\"1\":{\"301\":1}}],[\"内核实现的策略定义如下\",{\"1\":{\"1599\":1}}],[\"内核引入了一种新的\",{\"1\":{\"1584\":1}}],[\"内核提供的通知链的接口我们在上文已经进行了研究\",{\"1\":{\"1576\":1}}],[\"内核深度解析\",{\"1\":{\"1558\":1}}],[\"内核初始化的\",{\"1\":{\"1556\":1}}],[\"内核初始化\",{\"0\":{\"1555\":1}}],[\"内核初始化定义↩︎\",{\"1\":{\"1558\":1}}],[\"内核初始化定义\",{\"1\":{\"1553\":1}}],[\"内核初始化过程中的调用顺序↩︎\",{\"1\":{\"1558\":1,\"1615\":1}}],[\"内核初始化过程中的调用顺序\",{\"1\":{\"1551\":1}}],[\"内核中有很多的注册函数\",{\"1\":{\"1570\":1}}],[\"内核中\",{\"1\":{\"1551\":3,\"1567\":1}}],[\"内核中广泛使用\",{\"1\":{\"1529\":1}}],[\"内核可以通过配置项\",{\"1\":{\"1541\":1}}],[\"内核通过\",{\"1\":{\"1533\":1}}],[\"内核通常会执行一些准备工作\",{\"1\":{\"1523\":1}}],[\"内核会根据\",{\"1\":{\"1523\":1}}],[\"内核会根据广播标志来决定是否向其他\",{\"1\":{\"1521\":1}}],[\"内核会给申请者分配一个物理页\",{\"1\":{\"1345\":1}}],[\"内核\",{\"1\":{\"954\":1}}],[\"内核为任何一个给定的套接字维护两个队列\",{\"1\":{\"951\":1}}],[\"内核以后加入了对\",{\"1\":{\"724\":1}}],[\"内核模块的加载与删除\",{\"0\":{\"719\":1}}],[\"内核模块的查看\",{\"0\":{\"718\":1}}],[\"内核模块\",{\"0\":{\"717\":1}}],[\"内核与内核模块\",{\"0\":{\"716\":1}}],[\"内核编译\",{\"0\":{\"711\":1}}],[\"内核把新的页表的地址写入\",{\"1\":{\"252\":1}}],[\"内核空间\",{\"1\":{\"251\":2}}],[\"内核使用以下的技术来保证进程之间的隔离\",{\"1\":{\"251\":1}}],[\"内存转换\",{\"1\":{\"1484\":1}}],[\"内存管理指的是\",{\"1\":{\"1338\":1}}],[\"内存管理\",{\"0\":{\"1337\":1}}],[\"内存分配的时候\",{\"1\":{\"1345\":1}}],[\"内存分配\",{\"1\":{\"736\":1,\"1345\":1}}],[\"内存存储模式为小端模式\",{\"1\":{\"692\":1}}],[\"内存模型\",{\"0\":{\"691\":1}}],[\"内存对象布局↩︎\",{\"1\":{\"682\":1}}],[\"内存对齐\",{\"0\":{\"229\":1}}],[\"内存中会多出如下几个数据结构\",{\"1\":{\"1340\":1}}],[\"内存中的\",{\"1\":{\"691\":1}}],[\"内存中的表示形式\",{\"1\":{\"690\":1}}],[\"内存中的内容\",{\"1\":{\"215\":1}}],[\"内存中当前存储的值\",{\"1\":{\"681\":1}}],[\"内存区域\",{\"1\":{\"674\":1}}],[\"内存布局的打印\",{\"1\":{\"681\":1}}],[\"内存布局\",{\"0\":{\"672\":1}}],[\"内存密集型\",{\"1\":{\"643\":2}}],[\"内存的值并且存储其低\",{\"1\":{\"527\":1}}],[\"内存的数据也要随之改变\",{\"1\":{\"214\":1}}],[\"内存读写\",{\"0\":{\"523\":1}}],[\"内存此时就不够了\",{\"1\":{\"289\":1}}],[\"内存引用\",{\"1\":{\"245\":1}}],[\"内存预读取等\",{\"1\":{\"192\":1}}],[\"内存层次结构\",{\"1\":{\"191\":1}}],[\"内循环\",{\"1\":{\"139\":1}}],[\"内层循环了物品\",{\"1\":{\"130\":1}}],[\"内层循环容量\",{\"1\":{\"120\":1}}],[\"内层循环遍历背包容量\",{\"1\":{\"118\":1}}],[\"←0\",{\"1\":{\"139\":1}}],[\"←\",{\"1\":{\"139\":5}}],[\"拆分时可以重复使用字典中的单词\",{\"1\":{\"138\":2}}],[\"判定\",{\"1\":{\"138\":1}}],[\"判断当前\",{\"1\":{\"1545\":1}}],[\"判断需要优化时\",{\"1\":{\"1374\":1}}],[\"判断发生了回绕\",{\"1\":{\"982\":1}}],[\"判断\",{\"1\":{\"521\":1,\"833\":1}}],[\"判断上面camp的值是\",{\"1\":{\"517\":1}}],[\"判断上面cmp的值是小于等于\",{\"1\":{\"517\":1}}],[\"判断子序列\",{\"0\":{\"479\":1}}],[\"判断这两个字符串是否只相差一个字母\",{\"1\":{\"478\":1}}],[\"判断两个字符串是否只相差一个字母\",{\"0\":{\"478\":1}}],[\"判断两个链表是否有交叉\",{\"1\":{\"459\":1}}],[\"判断是否可以支持\",{\"1\":{\"1545\":1}}],[\"判断是否需要停止定时器\",{\"1\":{\"1521\":1}}],[\"判断是否新连接\",{\"1\":{\"955\":1}}],[\"判断是否已连接的客户端\",{\"1\":{\"955\":1}}],[\"判断是否合法\",{\"1\":{\"466\":1}}],[\"判断是否到达终点\",{\"1\":{\"54\":1}}],[\"判断单链表是否有环\",{\"1\":{\"459\":1}}],[\"判断节点是否相等\",{\"1\":{\"459\":1}}],[\"判断原来的两个链表是否有交叉也就变成了判断一个单链表是否有环\",{\"1\":{\"459\":1}}],[\"判断对象是否能被调用\",{\"1\":{\"435\":1}}],[\"判断的话\",{\"1\":{\"432\":1}}],[\"判断一个值是否存在其中\",{\"1\":{\"344\":1}}],[\"判断二叉树是否镜像对称\",{\"1\":{\"50\":1,\"52\":1}}],[\"判断数组中是否含有该整数\",{\"1\":{\"30\":1}}],[\"看本系统注册的通知链回调函数的实现\",{\"1\":{\"1580\":1}}],[\"看\",{\"1\":{\"1515\":1}}],[\"看起来不整洁的话可以换为截图\",{\"1\":{\"1463\":1}}],[\"看来\",{\"1\":{\"1352\":1}}],[\"看注释里面的\",{\"1\":{\"1320\":1}}],[\"看了国外那么多厉害的程序员\",{\"1\":{\"1048\":1}}],[\"看一下\",{\"1\":{\"690\":1}}],[\"看一下大佬门是怎么使用预取\",{\"1\":{\"508\":1}}],[\"看能否再后续的工作上对这些提出优化的思路\",{\"1\":{\"688\":1}}],[\"看能否从中获得一些心得体会\",{\"1\":{\"545\":1}}],[\"看能否尝试理解\",{\"1\":{\"543\":1}}],[\"看有没有结果\",{\"1\":{\"496\":1}}],[\"看其是否会相等\",{\"1\":{\"459\":1}}],[\"看以下代码\",{\"1\":{\"426\":1}}],[\"看以后是否有用\",{\"1\":{\"383\":1}}],[\"看下面的例子\",{\"1\":{\"421\":1}}],[\"看下面的代码\",{\"1\":{\"343\":1}}],[\"看中其访问时间短并且实现简单\",{\"1\":{\"264\":1}}],[\"看到这样的问题\",{\"1\":{\"136\":1}}],[\"看代码\",{\"1\":{\"90\":1}}],[\"ⅳ\",{\"0\":{\"136\":1}}],[\"改进的mope方法维护了树高与编码长度\",{\"1\":{\"1170\":1}}],[\"改进的mope方法\",{\"0\":{\"1170\":1}}],[\"改变的信号加以抑制或删除\",{\"1\":{\"1025\":1}}],[\"改题目求解的是凑成目标数量的硬币组合数\",{\"1\":{\"134\":1}}],[\"改写城\",{\"1\":{\"100\":1}}],[\"编程生涯总结\",{\"0\":{\"1003\":1}}],[\"编程时最好在\",{\"1\":{\"979\":1}}],[\"编写时区代码\",{\"1\":{\"1113\":1}}],[\"编写中\",{\"1\":{\"1064\":1}}],[\"编写的函数\",{\"1\":{\"695\":1,\"1395\":1}}],[\"编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组\",{\"1\":{\"156\":1}}],[\"编写一个函数来计算可以凑成总金额所需的最少的硬币个数\",{\"1\":{\"130\":1}}],[\"编译后的机器代码\",{\"1\":{\"1460\":1}}],[\"编译后生成的文件就是可重定位文件\",{\"1\":{\"1459\":1}}],[\"编译相关的\",{\"1\":{\"1374\":1}}],[\"编译产物\",{\"1\":{\"1287\":1}}],[\"编译完成后会看到三个\",{\"1\":{\"960\":1}}],[\"编译模块\",{\"1\":{\"714\":1}}],[\"编译启动映像\",{\"1\":{\"714\":1}}],[\"编译的时候\",{\"1\":{\"662\":1}}],[\"编译\",{\"1\":{\"662\":1,\"693\":1}}],[\"编译选项\",{\"0\":{\"659\":1}}],[\"编译被修改的\",{\"1\":{\"658\":1}}],[\"编译器来击活\",{\"1\":{\"1554\":1}}],[\"编译器会自动生成对应的代码\",{\"1\":{\"1529\":1}}],[\"编译器的执行引擎的速度而言\",{\"1\":{\"687\":1}}],[\"编译器编译后生成的代码速度\",{\"1\":{\"687\":1}}],[\"编译器中\",{\"1\":{\"657\":1}}],[\"编译器得到\",{\"1\":{\"657\":1}}],[\"编译器也叫\",{\"1\":{\"655\":1}}],[\"编译器模式或者混合模式呢\",{\"1\":{\"655\":1}}],[\"编译器无法预测程序执行的时候需要加载哪些类\",{\"1\":{\"654\":1}}],[\"编译器\",{\"1\":{\"653\":1,\"655\":2,\"690\":1}}],[\"编码效率也不同\",{\"1\":{\"1171\":1}}],[\"编码的改变\",{\"1\":{\"1169\":1}}],[\"编码可以表示为\",{\"1\":{\"1169\":1}}],[\"编码层一共有4层\",{\"1\":{\"1138\":1}}],[\"编码\",{\"1\":{\"88\":1}}],[\"本\",{\"1\":{\"1544\":1}}],[\"本质是软件\",{\"1\":{\"1501\":1}}],[\"本质上是检测写缓冲区是否可以写\",{\"1\":{\"956\":1}}],[\"本质上是一个排序问题\",{\"1\":{\"182\":1}}],[\"本质上就是一个虚拟网桥\",{\"1\":{\"730\":1}}],[\"本质上其就是一种非常简单使用的\",{\"1\":{\"689\":1}}],[\"本质上和\",{\"1\":{\"128\":1}}],[\"本地侦听端口\",{\"1\":{\"1265\":2,\"1647\":2}}],[\"本例中为8388\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"本例中的\",{\"1\":{\"844\":1}}],[\"本报告提出了一种改进的方法\",{\"1\":{\"1170\":1}}],[\"本报告例子比较简单\",{\"1\":{\"1169\":1}}],[\"本系统的设计遵循teacher\",{\"1\":{\"1135\":1}}],[\"本系统的无线信号的分辨率可达到10cm\",{\"1\":{\"1134\":1}}],[\"本论文系统将感知更多的信息\",{\"1\":{\"1133\":1}}],[\"本论文提出了一种完全不同的解决方案来处理遮挡和其他感知类问题\",{\"1\":{\"1131\":1}}],[\"本论文提出了一种融合视觉的室内定位算法\",{\"1\":{\"1017\":1}}],[\"本篇主要研究\",{\"1\":{\"1379\":1}}],[\"本篇主要讲述在应用层\",{\"1\":{\"1302\":1}}],[\"本篇文章主要是研究\",{\"1\":{\"1392\":1}}],[\"本篇文章首先对\",{\"1\":{\"1379\":1}}],[\"本篇文章中没有给出\",{\"1\":{\"559\":1}}],[\"本篇论文实现基于该思想\",{\"1\":{\"1131\":1}}],[\"本次报告主要分为六个部分\",{\"1\":{\"1012\":1}}],[\"本函数通常在调用\",{\"1\":{\"951\":1}}],[\"本小节用实际的代码走读来理解\",{\"1\":{\"697\":1}}],[\"本小节通过分析\",{\"1\":{\"432\":1}}],[\"本程序参考知乎的文章\",{\"1\":{\"693\":1}}],[\"本章结合这篇博文\",{\"1\":{\"1470\":1}}],[\"本章研究\",{\"1\":{\"1321\":1}}],[\"本章主要讲述在\",{\"1\":{\"1303\":1}}],[\"本章主要是对\",{\"1\":{\"664\":1}}],[\"本章主要研究\",{\"1\":{\"580\":1}}],[\"本章节主要针对性分析\",{\"1\":{\"1531\":1}}],[\"本章节主要研究\",{\"1\":{\"570\":1}}],[\"本章节通过一个实战的\",{\"1\":{\"681\":1}}],[\"本章节研究文章\",{\"1\":{\"541\":1}}],[\"本身比较复杂\",{\"1\":{\"1353\":1}}],[\"本身平台无关的特性\",{\"1\":{\"695\":1,\"1395\":1}}],[\"本身\",{\"1\":{\"545\":1}}],[\"本部分主要研究文章\",{\"1\":{\"599\":1}}],[\"本部分主要是研究\",{\"1\":{\"266\":1}}],[\"本部分首先阐述了\",{\"1\":{\"552\":1}}],[\"本部分统一研究流水线的基础知识部分\",{\"1\":{\"233\":1}}],[\"本栏目主要是总结计算机体系结构中的一些知识点\",{\"1\":{\"187\":1}}],[\"本文不加以深入研究了\",{\"1\":{\"1564\":1}}],[\"本文分析的代码主要集中于\",{\"1\":{\"1560\":1}}],[\"本文分析\",{\"1\":{\"1549\":1}}],[\"本文分为几个部分\",{\"1\":{\"1393\":1}}],[\"本文研究\",{\"1\":{\"1540\":1}}],[\"本文参考以下比较好的文档\",{\"1\":{\"1413\":1}}],[\"本文行为比较随性\",{\"1\":{\"1359\":1}}],[\"本文先对这两个关键的数据结构进行研究\",{\"1\":{\"1338\":1}}],[\"本文先研究\",{\"1\":{\"112\":1}}],[\"本文为csdn博主\",{\"1\":{\"1179\":1}}],[\"本文在此基础上进行改进\",{\"1\":{\"1168\":1}}],[\"本文作为信息论与编码的大作业\",{\"1\":{\"1166\":1}}],[\"本文将介绍yolo算法\",{\"1\":{\"1151\":1}}],[\"本文定义一个角度值\",{\"1\":{\"1025\":1}}],[\"本文共分为六章\",{\"1\":{\"1017\":1}}],[\"本文共设计了两组benchmark\",{\"1\":{\"1012\":1}}],[\"本文共提出了三个创新性的深度卷积神经网络模型\",{\"1\":{\"1012\":1}}],[\"本文使用点云的方式结合了indetectnet\",{\"1\":{\"1012\":1}}],[\"本文使用了\",{\"1\":{\"581\":1,\"583\":1}}],[\"本文还提出了tdoa定位算法与aoa加以结合\",{\"1\":{\"1012\":1}}],[\"本文还从数学角度基于传统的\",{\"1\":{\"1012\":1}}],[\"本文还研究了\",{\"1\":{\"276\":1}}],[\"本文结合\",{\"1\":{\"1012\":1}}],[\"本文针对每一个偏差提出了有效的误差消除算法\",{\"1\":{\"1012\":1}}],[\"本文基于传统的特征金字塔进行优化\",{\"1\":{\"1012\":1}}],[\"本文从论文中选取了四个经典的基本理论\",{\"1\":{\"1012\":1}}],[\"本文选择了成本较低的摄像头和商用wifi设备\",{\"1\":{\"1012\":1}}],[\"本文由两个主要的模块组成\",{\"1\":{\"1012\":1}}],[\"本文对这些预测器进行了一个排序\",{\"1\":{\"583\":1}}],[\"本文一共使用的四个预测器\",{\"1\":{\"583\":1}}],[\"本文提出混合流萤算法\",{\"1\":{\"1012\":1}}],[\"本文提出了\",{\"1\":{\"1024\":1}}],[\"本文提出了多路径抑制算法\",{\"1\":{\"1012\":1}}],[\"本文提出了一系列创新性的算法和计算机视觉模型\",{\"1\":{\"1012\":1}}],[\"本文提出的\",{\"1\":{\"556\":1}}],[\"本文提出来的\",{\"1\":{\"545\":1}}],[\"本文的sfpn结构十分具有创新性\",{\"1\":{\"1012\":1}}],[\"本文的\",{\"1\":{\"1012\":1,\"1024\":1}}],[\"本文的部分算法都是基于这四个基本理论改进而来\",{\"1\":{\"1012\":1}}],[\"本文的融合算法优点在于\",{\"1\":{\"1012\":1}}],[\"本文的贡献主要由两点\",{\"1\":{\"543\":1}}],[\"本文的行文构成包含如下\",{\"1\":{\"190\":1}}],[\"本文章主要是\",{\"1\":{\"1457\":1}}],[\"本文章主要总结几个使用该模块的时候需要注意的问题和实战示例\",{\"1\":{\"320\":1}}],[\"本文章作为一个\",{\"1\":{\"514\":1}}],[\"本文主要针对于\",{\"1\":{\"1540\":1}}],[\"本文主要涉及的内容有\",{\"1\":{\"1456\":1}}],[\"本文主要记录常见的\",{\"1\":{\"1452\":1}}],[\"本文主要是针对\",{\"1\":{\"1291\":1}}],[\"本文主要是总结\",{\"1\":{\"295\":1}}],[\"本文主要总结\",{\"1\":{\"1174\":1}}],[\"本文主要讲述\",{\"1\":{\"1325\":1}}],[\"本文主要讲述yolo\",{\"1\":{\"1151\":1}}],[\"本文主要讲述和理解虚拟内存\",{\"1\":{\"248\":1}}],[\"本文主要提出了indefi\",{\"1\":{\"1012\":1}}],[\"本文主要介绍了\",{\"1\":{\"801\":1}}],[\"本文主要结合软硬件去研究\",{\"1\":{\"651\":1}}],[\"本文主要研究\",{\"1\":{\"310\":1,\"327\":1,\"345\":1,\"1371\":1,\"1513\":1}}],[\"本文主要研究流水线技术在计算机体系结构中的应用\",{\"1\":{\"233\":1}}],[\"本文主要研究存储层次结构中的\",{\"1\":{\"190\":1}}],[\"本文主要研究了\",{\"1\":{\"40\":1}}],[\"值的一半\",{\"1\":{\"987\":1}}],[\"值的计算方法\",{\"1\":{\"978\":1}}],[\"值小于或者等于\",{\"1\":{\"987\":1}}],[\"值为\",{\"1\":{\"984\":2}}],[\"值计算出来的\",{\"1\":{\"979\":1}}],[\"值就是一个随机生成的\",{\"1\":{\"833\":1}}],[\"值冗余\",{\"1\":{\"600\":1}}],[\"值局部性存在的一些原因\",{\"1\":{\"600\":1}}],[\"值预测器的原理是什么\",{\"1\":{\"597\":1}}],[\"值预测在\",{\"1\":{\"552\":1}}],[\"值标记的几何预测器\",{\"1\":{\"559\":1}}],[\"值\",{\"0\":{\"950\":1},\"1\":{\"453\":1,\"950\":1,\"978\":1,\"980\":1,\"1024\":1}}],[\"值到内存\",{\"1\":{\"212\":1}}],[\"值得借鉴\",{\"1\":{\"360\":1}}],[\"值得一提的是\",{\"1\":{\"173\":1,\"1132\":1,\"1501\":1}}],[\"值得深入去理解\",{\"1\":{\"42\":1}}],[\"值是石头总重量的一半\",{\"1\":{\"125\":1}}],[\"且本系统需要那个系统对某个重要事件进行响应\",{\"1\":{\"1580\":1}}],[\"且不能支持字符串等其他数据类型\",{\"1\":{\"1168\":1}}],[\"且步长为2\",{\"1\":{\"1153\":1}}],[\"且消除效果更佳\",{\"1\":{\"1012\":1}}],[\"且是由目的端的\",{\"1\":{\"981\":1}}],[\"且可以保证菱形继承场景下\",{\"1\":{\"426\":1}}],[\"且价值总和最大\",{\"1\":{\"127\":1}}],[\"且\",{\"1\":{\"125\":1,\"156\":1}}],[\"且使用\",{\"1\":{\"77\":1}}],[\"证明过程为\",{\"1\":{\"124\":1}}],[\"进一步\",{\"1\":{\"1133\":1}}],[\"进一步提高了室内定位的精度\",{\"1\":{\"1012\":1}}],[\"进而导致了已存在的ope\",{\"1\":{\"1169\":1}}],[\"进而保证涉及顺序信息的查询操作可以在密文空间高效进行\",{\"1\":{\"1166\":1}}],[\"进而确定关键骨干点\",{\"1\":{\"1133\":1}}],[\"进而写出代码\",{\"1\":{\"124\":1}}],[\"进度\",{\"1\":{\"1064\":1,\"1065\":1,\"1066\":1,\"1067\":1,\"1068\":1}}],[\"进入中断\",{\"1\":{\"1584\":1}}],[\"进入等接口\",{\"1\":{\"1532\":1}}],[\"进入相应的空闲状态\",{\"1\":{\"1523\":1}}],[\"进入更深层次的\",{\"1\":{\"1521\":1}}],[\"进入空闲状态之前\",{\"1\":{\"1521\":1}}],[\"进入和退出该状态所需的操作等信息\",{\"1\":{\"1521\":1}}],[\"进入该\",{\"1\":{\"1516\":1}}],[\"进入\",{\"1\":{\"1333\":1,\"1515\":1,\"1525\":1}}],[\"进入binder驱动\",{\"1\":{\"1301\":1}}],[\"进入配置界面\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"进入到google\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"进入ubuntu桌面系统\",{\"1\":{\"1145\":1}}],[\"进入拥塞避免算法\",{\"1\":{\"987\":1}}],[\"进入容器\",{\"1\":{\"612\":1}}],[\"进出路由控制等\",{\"1\":{\"977\":1}}],[\"进制的形式传递给了\",{\"1\":{\"1596\":1}}],[\"进制的方式打印出来\",{\"1\":{\"1462\":1,\"1463\":1}}],[\"进制由\",{\"1\":{\"972\":1}}],[\"进制数\",{\"1\":{\"972\":1}}],[\"进去文件完成更新\",{\"1\":{\"1286\":1}}],[\"进去\",{\"1\":{\"575\":1}}],[\"进程之外的其它进程运行的时候会恢复\",{\"1\":{\"1541\":1}}],[\"进程触发的\",{\"1\":{\"1374\":1}}],[\"进程在启动过程中\",{\"1\":{\"1365\":1}}],[\"进程创建过程中调用\",{\"1\":{\"1293\":1}}],[\"进程对应的\",{\"1\":{\"1278\":1}}],[\"进程间通信\",{\"0\":{\"740\":1},\"1\":{\"740\":1,\"1350\":1}}],[\"进程间通信的时候\",{\"1\":{\"252\":1}}],[\"进程号为\",{\"1\":{\"738\":1}}],[\"进程调取器选中的话就为该进程分配\",{\"1\":{\"738\":1}}],[\"进程上下文\",{\"1\":{\"736\":1}}],[\"进程是操作系统资源分配的基本单位\",{\"1\":{\"736\":1}}],[\"进程是程序的一次执行过程\",{\"1\":{\"736\":1}}],[\"进程和线程\",{\"0\":{\"735\":1}}],[\"进程的启动\",{\"1\":{\"1374\":1}}],[\"进程的启动等知识了\",{\"1\":{\"707\":1,\"1406\":1}}],[\"进程的创建是由\",{\"1\":{\"701\":1}}],[\"进程运行起来以后\",{\"1\":{\"701\":1}}],[\"进程描述符\",{\"1\":{\"252\":1}}],[\"进程隔离的一个很重要的机制保证就是虚拟内存\",{\"1\":{\"252\":1}}],[\"进程\",{\"1\":{\"251\":2,\"282\":1,\"725\":1,\"736\":1,\"758\":1,\"789\":1,\"1293\":2,\"1374\":2,\"1531\":1,\"1584\":1}}],[\"进程控制块\",{\"1\":{\"251\":1}}],[\"进行名称循环校验\",{\"1\":{\"1608\":1}}],[\"进行操作\",{\"1\":{\"1607\":1}}],[\"进行冷却操作\",{\"1\":{\"1597\":1}}],[\"进行修饰\",{\"1\":{\"1545\":1}}],[\"进行划分\",{\"1\":{\"1544\":1}}],[\"进行简单研究\",{\"1\":{\"1540\":1}}],[\"进行简单的配置\",{\"1\":{\"612\":1}}],[\"进行复用\",{\"1\":{\"1510\":1}}],[\"进行一个判断\",{\"1\":{\"1519\":1}}],[\"进行一个简单的理解\",{\"1\":{\"1470\":1}}],[\"进行一个全局性的概览\",{\"1\":{\"1379\":1}}],[\"进行压缩\",{\"1\":{\"1454\":2}}],[\"进行改造\",{\"1\":{\"1449\":1}}],[\"进行引用计数的时候\",{\"1\":{\"1380\":1}}],[\"进行dex2oat\",{\"1\":{\"1374\":1}}],[\"进行调用\",{\"1\":{\"1333\":1}}],[\"进行分解\",{\"1\":{\"1326\":1}}],[\"进行分类达到减少预测错误率的目的\",{\"1\":{\"601\":1}}],[\"进行研究\",{\"1\":{\"1310\":1,\"1544\":1,\"1583\":1}}],[\"进行相对应的操作\",{\"1\":{\"1307\":1}}],[\"进行测试\",{\"1\":{\"1162\":1}}],[\"进行目标检测\",{\"1\":{\"1021\":1}}],[\"进行数据同步\",{\"1\":{\"997\":1}}],[\"进行用户的认证\",{\"1\":{\"992\":1}}],[\"进行\",{\"1\":{\"992\":1,\"1338\":1,\"1515\":1}}],[\"进行查询以外的操作\",{\"1\":{\"876\":1}}],[\"进行配置\",{\"1\":{\"760\":1}}],[\"进行重新编译\",{\"1\":{\"658\":1}}],[\"进行观察\",{\"1\":{\"658\":1}}],[\"进行异或\",{\"1\":{\"559\":1}}],[\"进行符号位扩展\",{\"1\":{\"522\":1}}],[\"进行隔离\",{\"1\":{\"486\":1}}],[\"进行判断\",{\"1\":{\"465\":1}}],[\"进行赋值操作\",{\"1\":{\"460\":1}}],[\"进行初始化\",{\"1\":{\"431\":1,\"1552\":1}}],[\"进行的\",{\"1\":{\"424\":1}}],[\"进行解析的话\",{\"1\":{\"388\":1}}],[\"进行标记\",{\"1\":{\"372\":1}}],[\"进行了一个封装\",{\"1\":{\"1567\":1}}],[\"进行了\",{\"1\":{\"706\":1,\"1403\":1,\"1608\":1}}],[\"进行了定义\",{\"1\":{\"706\":1,\"1402\":1}}],[\"进行了删除\",{\"1\":{\"303\":1}}],[\"进行了修改\",{\"1\":{\"220\":1}}],[\"进行并行程序的执行\",{\"1\":{\"287\":1}}],[\"进行安装\",{\"1\":{\"273\":1}}],[\"进行转换\",{\"1\":{\"252\":1}}],[\"进行排序的话\",{\"1\":{\"185\":1}}],[\"进行排序\",{\"1\":{\"36\":1}}],[\"表征的是当前\",{\"1\":{\"1545\":1}}],[\"表中表示在coco\",{\"1\":{\"1012\":1}}],[\"表中保存这种半连接信息\",{\"1\":{\"988\":1}}],[\"表中的\",{\"1\":{\"584\":1,\"994\":1}}],[\"表明\",{\"1\":{\"1605\":1}}],[\"表明服务器已收到\",{\"1\":{\"984\":1}}],[\"表明混合预测是可行的\",{\"1\":{\"563\":1}}],[\"表锁设计\",{\"1\":{\"815\":1}}],[\"表格中列举了网络的详细架构\",{\"1\":{\"1012\":1}}],[\"表格\",{\"1\":{\"676\":1}}],[\"表被同时索引了\",{\"1\":{\"603\":1}}],[\"表现在不进入多进程的程序中\",{\"1\":{\"288\":1}}],[\"表项\",{\"1\":{\"206\":1}}],[\"表优化\",{\"1\":{\"153\":1}}],[\"表达式来表示指向这个对象存储内存的位置\",{\"1\":{\"1383\":1}}],[\"表达式栈\",{\"1\":{\"687\":2}}],[\"表达式的函数\",{\"1\":{\"294\":1}}],[\"表达式中出现了一个\",{\"1\":{\"184\":1}}],[\"表达式\",{\"1\":{\"124\":2,\"504\":1}}],[\"表示如果没有可以运行的进程的话\",{\"1\":{\"1528\":1}}],[\"表示当前\",{\"1\":{\"1523\":1}}],[\"表示当前的\",{\"1\":{\"430\":1}}],[\"表示在进入该状态前需要刷新\",{\"1\":{\"1522\":1}}],[\"表示在选修课程\",{\"1\":{\"86\":1}}],[\"表示需要或不需要停止定时器\",{\"1\":{\"1521\":1}}],[\"表示是否开启强制轮询模式\",{\"1\":{\"1518\":1}}],[\"表示是否有用\",{\"1\":{\"559\":1}}],[\"表示用户空间\",{\"1\":{\"1479\":1}}],[\"表示两个指针之间的距离的数据类型\",{\"1\":{\"1471\":1}}],[\"表示从段表的低\",{\"1\":{\"1464\":1}}],[\"表示链表中的一个节点\",{\"1\":{\"1341\":1}}],[\"表示不是主线程\",{\"1\":{\"1293\":1}}],[\"表示的含义是\",{\"1\":{\"1231\":1}}],[\"表示的是按下电源按钮\",{\"1\":{\"1269\":1}}],[\"表示的是这个一个\",{\"1\":{\"696\":1,\"1396\":1}}],[\"表示的是预测的两种结果\",{\"1\":{\"571\":1}}],[\"表示的是\",{\"1\":{\"529\":1,\"571\":1}}],[\"表示利用\",{\"1\":{\"1022\":1}}],[\"表示只在单一尺度下的特征预测\",{\"1\":{\"1022\":1}}],[\"表示使用单个图像金字塔来构建特征金字塔的示意图\",{\"1\":{\"1022\":1}}],[\"表示网卡上天线的信噪比\",{\"1\":{\"1020\":1}}],[\"表示请求已经接受\",{\"1\":{\"999\":1}}],[\"表示之前收到的\",{\"1\":{\"987\":1}}],[\"表示发送\",{\"1\":{\"984\":1}}],[\"表示直接丢弃\",{\"1\":{\"984\":1}}],[\"表示有符号整型的意思\",{\"1\":{\"982\":1}}],[\"表示有效的\",{\"1\":{\"576\":1}}],[\"表示一个原子的计数\",{\"1\":{\"1295\":1}}],[\"表示一个计数器\",{\"1\":{\"982\":1}}],[\"表示一个有效的\",{\"1\":{\"576\":1}}],[\"表示能否进行\",{\"1\":{\"981\":1}}],[\"表示层\",{\"1\":{\"977\":1}}],[\"表示表达\",{\"1\":{\"949\":1}}],[\"表示内连接\",{\"1\":{\"807\":1}}],[\"表示这个节点所对应的要运行的那个函数\",{\"1\":{\"1567\":1}}],[\"表示这个数据和内存中的数据是一致的\",{\"1\":{\"217\":1}}],[\"表示这个数据已经被修改\",{\"1\":{\"217\":1}}],[\"表示这是一个\",{\"1\":{\"705\":1,\"1400\":1}}],[\"表示形式\",{\"1\":{\"690\":1}}],[\"表示对象被\",{\"1\":{\"676\":1}}],[\"表示锁标志位\",{\"1\":{\"676\":1}}],[\"表示饱和计数器\",{\"1\":{\"559\":1}}],[\"表示写寄存器\",{\"1\":{\"557\":1}}],[\"表示读寄存器\",{\"1\":{\"557\":1}}],[\"表示存储失败\",{\"1\":{\"534\":1}}],[\"表示存储成功\",{\"1\":{\"534\":1}}],[\"表示其在编译链中\",{\"1\":{\"705\":1,\"1400\":1}}],[\"表示其可以在编译的时候被重命名\",{\"1\":{\"505\":1}}],[\"表示其价值\",{\"1\":{\"126\":1}}],[\"表示栈顶元素的\",{\"1\":{\"467\":1}}],[\"表示所有的标点符号\",{\"1\":{\"390\":1}}],[\"表示数的数量\",{\"1\":{\"307\":1}}],[\"表示数组的长度\",{\"1\":{\"22\":1}}],[\"表示每次都会运行\",{\"1\":{\"291\":1}}],[\"表示本\",{\"1\":{\"225\":1}}],[\"表示该通知的优先级\",{\"1\":{\"1567\":1}}],[\"表示该\",{\"1\":{\"195\":1}}],[\"表示自己喜欢吃的糖果的区间\",{\"1\":{\"155\":1}}],[\"表示某个物体的容量\",{\"1\":{\"126\":1}}],[\"表示背包中最多有\",{\"1\":{\"120\":1}}],[\"表示行\",{\"1\":{\"118\":1}}],[\"表示列举出第三方应用\",{\"1\":{\"1275\":1}}],[\"表示列\",{\"1\":{\"118\":1}}],[\"表示购物清单\",{\"1\":{\"102\":1}}],[\"表示大礼包中的物品清单\",{\"1\":{\"102\":1}}],[\"表示第\",{\"1\":{\"102\":1,\"354\":1}}],[\"表示第一个节点\",{\"1\":{\"89\":1}}],[\"表示满足购物清单\",{\"1\":{\"102\":1}}],[\"表示折扣\",{\"1\":{\"102\":2}}],[\"表示编号为\",{\"1\":{\"87\":1}}],[\"表示\",{\"1\":{\"20\":1,\"81\":1,\"195\":2,\"655\":1,\"666\":1,\"949\":1,\"978\":2,\"982\":1,\"1020\":2,\"1022\":1,\"1307\":1,\"1439\":1,\"1445\":1,\"1518\":1,\"1544\":1,\"1586\":1}}],[\"表示可以重复读取当前的数\",{\"1\":{\"10\":1}}],[\"表示做出的选择\",{\"1\":{\"6\":1}}],[\"表示路径的总数\",{\"1\":{\"1020\":1}}],[\"表示路径\",{\"1\":{\"6\":1}}],[\"均是通过比较\",{\"1\":{\"196\":1}}],[\"均需要分别占用\",{\"1\":{\"120\":1}}],[\"均表示边界元素的坐标\",{\"1\":{\"79\":1}}],[\"字面意思是所有第一次使用的指令都在\",{\"1\":{\"550\":1}}],[\"字符中第一个字符的索引为\",{\"1\":{\"392\":1}}],[\"字符串等\",{\"1\":{\"1460\":1}}],[\"字符串的形式\",{\"1\":{\"690\":1}}],[\"字符串的操作和数组一样\",{\"1\":{\"477\":1}}],[\"字符串中结束搜索的位置\",{\"1\":{\"392\":1}}],[\"字符串开始搜索的位置\",{\"1\":{\"392\":1}}],[\"字符串\",{\"1\":{\"120\":1,\"479\":1}}],[\"字典中被映射为\",{\"1\":{\"390\":1}}],[\"字典\",{\"1\":{\"388\":1}}],[\"字典序排数\",{\"0\":{\"77\":1}}],[\"字节序0\",{\"1\":{\"1464\":1}}],[\"字节全部成功\",{\"1\":{\"980\":1}}],[\"字节以内\",{\"1\":{\"979\":1}}],[\"字节码解析\",{\"0\":{\"693\":1}}],[\"字节码是可以看出来\",{\"1\":{\"688\":1}}],[\"字节码只代表程序逻辑\",{\"1\":{\"665\":1}}],[\"字节码\",{\"1\":{\"655\":1,\"664\":1,\"665\":1,\"689\":1}}],[\"字节码文件\",{\"1\":{\"652\":1,\"669\":1}}],[\"字节的数据\",{\"1\":{\"978\":1,\"980\":1}}],[\"字节的值保存到栈内存\",{\"1\":{\"533\":1}}],[\"字节的立即数\",{\"1\":{\"529\":1}}],[\"字节\",{\"1\":{\"205\":1,\"789\":1,\"972\":2,\"978\":1,\"979\":3,\"980\":2,\"988\":2,\"997\":1}}],[\"字段表示该状态的一些特殊属性\",{\"1\":{\"1522\":1}}],[\"字段用于表示该常量的类型\",{\"1\":{\"666\":1}}],[\"字段\",{\"1\":{\"576\":1,\"675\":1}}],[\"字段的大小是\",{\"1\":{\"562\":1}}],[\"字段就是起到这样一个作用\",{\"1\":{\"197\":1}}],[\"字段进行比较\",{\"1\":{\"196\":1}}],[\"字母表的顺序\",{\"1\":{\"186\":1}}],[\"两阶段目标检测器无法完成端到端的目标检测任务\",{\"1\":{\"1021\":1}}],[\"两队列之和不超过\",{\"1\":{\"951\":1}}],[\"两者相减\",{\"1\":{\"982\":1}}],[\"两者都是衡量的可信指标\",{\"1\":{\"593\":1}}],[\"两者的代价是一致的\",{\"1\":{\"548\":1}}],[\"两数之和问题可以使用双指针来求解\",{\"1\":{\"494\":1}}],[\"两数之和\",{\"0\":{\"494\":1}}],[\"两整数的乘积\",{\"1\":{\"399\":1}}],[\"两种方式\",{\"1\":{\"341\":1}}],[\"两种替换策略的性能差异也逐渐缩小\",{\"1\":{\"213\":1}}],[\"两种情况下\",{\"1\":{\"164\":1}}],[\"两种容量\",{\"1\":{\"120\":1}}],[\"两个模式都会调用到\",{\"1\":{\"1333\":1}}],[\"两个维度以得到不同的视角信息\",{\"1\":{\"1134\":1}}],[\"两个\",{\"1\":{\"1021\":1}}],[\"两个字段之间的\",{\"1\":{\"981\":1}}],[\"两个字段都被更新了\",{\"1\":{\"575\":1}}],[\"两个端点之间的若干个\",{\"1\":{\"979\":1}}],[\"两个文件进行存储\",{\"1\":{\"814\":1}}],[\"两个链\",{\"1\":{\"691\":1}}],[\"两个操作\",{\"1\":{\"468\":1}}],[\"两个数\",{\"1\":{\"307\":1}}],[\"两个特殊的控制寄存器\",{\"1\":{\"256\":1}}],[\"两个进程的虚拟地址空间可能会是什么样子的\",{\"1\":{\"251\":1}}],[\"两个背包\",{\"1\":{\"114\":1}}],[\"两个水壶\",{\"1\":{\"91\":1}}],[\"两个节点的值不相等\",{\"1\":{\"51\":1}}],[\"两个节点中有一个不存在\",{\"1\":{\"51\":1}}],[\"两个节点都为空\",{\"1\":{\"51\":2}}],[\"遍历链表\",{\"1\":{\"1573\":1}}],[\"遍历链表的时候\",{\"1\":{\"1341\":1}}],[\"遍历数组\",{\"1\":{\"933\":1}}],[\"遍历函数的每一个参数\",{\"1\":{\"693\":1}}],[\"遍历module中的每一个function\",{\"1\":{\"693\":1}}],[\"遍历的是指令的\",{\"1\":{\"691\":1}}],[\"遍历的函数的\",{\"1\":{\"691\":1}}],[\"遍历直到两个移动的指针相等\",{\"1\":{\"459\":1}}],[\"遍历两个链表\",{\"1\":{\"459\":1}}],[\"遍历\",{\"1\":{\"120\":1}}],[\"遍历物品\",{\"1\":{\"118\":1}}],[\"遍历顺序\",{\"1\":{\"61\":2}}],[\"那岂不是悲剧了\",{\"1\":{\"1441\":1}}],[\"那进程多了\",{\"1\":{\"1353\":1}}],[\"那一段就是\",{\"1\":{\"1275\":1}}],[\"那些人的研究是在\",{\"1\":{\"599\":1}}],[\"那能不能直接在实例本身上调用呢\",{\"1\":{\"435\":1}}],[\"那应该怎么办呢\",{\"1\":{\"421\":1}}],[\"那篇文章的分析\",{\"1\":{\"1605\":1}}],[\"那篇文章\",{\"1\":{\"329\":1}}],[\"那就意味着前者可以访问\",{\"1\":{\"1383\":1}}],[\"那就是我们如果使用\",{\"1\":{\"196\":1}}],[\"那就是\",{\"1\":{\"195\":1}}],[\"那就是两重\",{\"1\":{\"118\":1}}],[\"那就等价于找和为\",{\"1\":{\"158\":1}}],[\"那么目标文件中都有什么呢\",{\"1\":{\"1460\":1}}],[\"那么如何确定对象是处于这个状态的呢\",{\"1\":{\"1381\":1}}],[\"那么作者是如何做的呢\",{\"1\":{\"1355\":1}}],[\"那么你的这次推送会直接被拒绝\",{\"1\":{\"1250\":1}}],[\"那么你自己作为一个企业\",{\"1\":{\"1031\":1}}],[\"那么宽泛\",{\"1\":{\"1249\":1}}],[\"那么可以这么写\",{\"1\":{\"1231\":1}}],[\"那么可以采用nms算法来实现这样的效果\",{\"1\":{\"1157\":1}}],[\"那么是否真的安全\",{\"1\":{\"1357\":1}}],[\"那么是否可以证明其path改变之后依旧符合保序性\",{\"1\":{\"1170\":1}}],[\"那么是如何仅根据一个\",{\"1\":{\"205\":1}}],[\"那么只选择与ground\",{\"1\":{\"1156\":1}}],[\"那么在训练时\",{\"1\":{\"1156\":1}}],[\"那么在实际中\",{\"1\":{\"658\":1}}],[\"那么最终的预测结果就是7∗7∗30大小的张量\",{\"1\":{\"1155\":1}}],[\"那么最终预测值为s∗s∗\",{\"1\":{\"1155\":1}}],[\"那么该单元格负责预测这个狗\",{\"1\":{\"1155\":1}}],[\"那么会导致\",{\"1\":{\"982\":1}}],[\"那么会使用\",{\"1\":{\"878\":1}}],[\"那么之后再次\",{\"1\":{\"954\":1}}],[\"那么进程将被投入休眠\",{\"1\":{\"951\":1}}],[\"那么各个线程不会对这个\",{\"1\":{\"876\":1}}],[\"那么它必须记录每次调用\",{\"1\":{\"738\":1}}],[\"那么接下来的问题就只剩下\",{\"1\":{\"706\":1,\"1403\":1}}],[\"那么我就从\",{\"1\":{\"559\":1}}],[\"那么我的\",{\"1\":{\"559\":1}}],[\"那么我们设置多个\",{\"1\":{\"1510\":1}}],[\"那么我们只训练以下的预测器\",{\"1\":{\"590\":1}}],[\"那么我们是否可以在用户态创建一个共享的页表\",{\"1\":{\"252\":1}}],[\"那么我们就可以进一步改善缓存的性能\",{\"1\":{\"210\":1}}],[\"那么我们每个\",{\"1\":{\"198\":1}}],[\"那么我们需要比较的次数就越多\",{\"1\":{\"196\":1}}],[\"那么我们需要在右边区间搜索\",{\"1\":{\"34\":1}}],[\"那么预测的覆盖率就越低\",{\"1\":{\"558\":1}}],[\"那么预测位的那个\",{\"1\":{\"243\":1}}],[\"那么就变成了\",{\"1\":{\"1185\":1}}],[\"那么就将该框剔除\",{\"1\":{\"1157\":1}}],[\"那么就给攻击者一个攻击服务器的机会\",{\"1\":{\"988\":1}}],[\"那么就重新发送数据\",{\"1\":{\"978\":1}}],[\"那么就需要使用\",{\"1\":{\"927\":1}}],[\"那么就使用\",{\"1\":{\"827\":1,\"829\":1}}],[\"那么就意味着\",{\"1\":{\"558\":1}}],[\"那么就发生缺页失效\",{\"1\":{\"259\":1}}],[\"那么总的\",{\"1\":{\"549\":1}}],[\"那么总的方式\",{\"1\":{\"104\":1}}],[\"那么父类的初始化函数会被默认调用\",{\"1\":{\"424\":1}}],[\"那么快速找到这个文件夹的方法是\",{\"1\":{\"336\":1}}],[\"那么从底层来看\",{\"1\":{\"252\":1}}],[\"那么流水线技术可以降低\",{\"1\":{\"234\":1}}],[\"那么拿什么\",{\"1\":{\"216\":1}}],[\"那么处理器来写这个的时候必须停止\",{\"1\":{\"216\":1}}],[\"那么将来他附近的位置也会被引用\",{\"1\":{\"192\":1}}],[\"那么必须满足\",{\"1\":{\"185\":1}}],[\"那么说明后者到前者之前1和0的数量相等\",{\"1\":{\"159\":1}}],[\"那么重量为\",{\"1\":{\"125\":1}}],[\"那么两块石头都会被完全粉碎\",{\"1\":{\"125\":1}}],[\"那么粉碎的可能结果如下\",{\"1\":{\"125\":1}}],[\"那么这两个地方都需要改\",{\"1\":{\"1441\":1}}],[\"那么这个\",{\"1\":{\"196\":1}}],[\"那么这个大礼包不能要\",{\"1\":{\"102\":1}}],[\"那么这句话可以写成如下形式\",{\"1\":{\"94\":1}}],[\"那么这时候有两种情况\",{\"1\":{\"91\":1}}],[\"那么剩下的水就是\",{\"1\":{\"91\":1}}],[\"那么剩下了多少呢\",{\"1\":{\"91\":1}}],[\"那么此时\",{\"1\":{\"91\":1}}],[\"那么\",{\"1\":{\"87\":1,\"89\":1,\"251\":1,\"261\":1,\"1307\":1,\"1318\":1,\"1381\":1}}],[\"那么整个二叉树的最大深度就是根节点的深度\",{\"1\":{\"56\":1}}],[\"那么其肯定不是一个对称二叉树\",{\"1\":{\"52\":1}}],[\"❗本文为了研究清楚\",{\"1\":{\"1583\":1}}],[\"❗🔴🔴🔴\",{\"1\":{\"118\":1}}],[\"❗❗❗\",{\"1\":{\"59\":1,\"427\":1,\"432\":1}}],[\"非安全的镜像加载\",{\"1\":{\"1496\":1}}],[\"非\",{\"1\":{\"1469\":1}}],[\"非主线程出现timeout则线程退出\",{\"1\":{\"1299\":1}}],[\"非基于设备的系统的空间分辨率一般都比较低并且无法同时地定位身体的多个部位\",{\"1\":{\"1133\":1}}],[\"非基于设备的系统不需要人携带任何感知设备就可以达到追踪\",{\"1\":{\"1133\":1}}],[\"非视距路径\",{\"1\":{\"1012\":1}}],[\"非本地的默认值\",{\"1\":{\"980\":1}}],[\"非阻塞\",{\"1\":{\"956\":1}}],[\"非创建中的\",{\"1\":{\"883\":1}}],[\"非常优秀\",{\"1\":{\"1508\":1}}],[\"非常实用\",{\"1\":{\"1012\":1}}],[\"非常消耗磁盘空间\",{\"1\":{\"811\":1}}],[\"非常方便\",{\"1\":{\"118\":1}}],[\"非结构化的数据应用\",{\"1\":{\"643\":1}}],[\"非空\",{\"1\":{\"122\":1}}],[\"非商业转载请注明出处\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"75\":1,\"76\":1,\"86\":1,\"87\":1,\"92\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1}}],[\"去拿到对应的\",{\"1\":{\"1608\":1}}],[\"去查找\",{\"1\":{\"1607\":1}}],[\"去实施冷却措施\",{\"1\":{\"1597\":1}}],[\"去更新\",{\"1\":{\"1545\":1}}],[\"去告诉\",{\"1\":{\"1438\":1}}],[\"去监听\",{\"1\":{\"926\":1}}],[\"去判断是否其中有一个\",{\"1\":{\"559\":1}}],[\"去存储预测\",{\"1\":{\"559\":1}}],[\"去限制这一开销\",{\"1\":{\"557\":1}}],[\"去预测\",{\"1\":{\"545\":1}}],[\"去求解的话只需要\",{\"1\":{\"453\":1}}],[\"去计算有效地址的同时执行减法操作\",{\"1\":{\"236\":1}}],[\"去定义\",{\"1\":{\"118\":1}}],[\"去重\",{\"1\":{\"11\":1}}],[\"放到\",{\"1\":{\"1551\":1,\"1607\":1}}],[\"放弃所有更改\",{\"1\":{\"1241\":1}}],[\"放置于\",{\"1\":{\"933\":1}}],[\"放入工作队列\",{\"1\":{\"1316\":1}}],[\"放入文件夹中\",{\"1\":{\"1162\":1}}],[\"放入代码缓存\",{\"1\":{\"653\":1}}],[\"放入寄存器\",{\"1\":{\"524\":2}}],[\"放第\",{\"1\":{\"117\":1}}],[\"放在什么地方或者状态\",{\"1\":{\"1481\":1}}],[\"放在了\",{\"1\":{\"724\":1}}],[\"放在这里可以参考\",{\"1\":{\"481\":1}}],[\"放在\",{\"1\":{\"185\":2}}],[\"放在外面\",{\"1\":{\"136\":1}}],[\"放在外循环\",{\"1\":{\"115\":1}}],[\"放在一个元组中\",{\"1\":{\"88\":1}}],[\"件物品的重量\",{\"1\":{\"117\":1}}],[\"件物品放入剩下容量为\",{\"1\":{\"117\":1}}],[\"件物品放入容量为\",{\"1\":{\"117\":2}}],[\"件物品\",{\"1\":{\"117\":2}}],[\"件物品恰放入一个容量为\",{\"1\":{\"117\":1}}],[\"单文件夹例子\",{\"0\":{\"1444\":1}}],[\"单独新开章节研究\",{\"1\":{\"1311\":1}}],[\"单阶段目标检测器实时性较高但是精度较差\",{\"1\":{\"1021\":1}}],[\"单个进程能够监视的文件描述符的数量存在最大限制\",{\"1\":{\"954\":1}}],[\"单个正确预测的收益比较有限\",{\"1\":{\"547\":1}}],[\"单例模式下\",{\"1\":{\"881\":1}}],[\"单例\",{\"1\":{\"875\":1,\"1366\":1}}],[\"单核为2\",{\"1\":{\"714\":1}}],[\"单核多线程无法使用多核\",{\"1\":{\"283\":1}}],[\"单状态栈顶缓存\",{\"1\":{\"689\":2}}],[\"单元可以避免访存操作\",{\"1\":{\"602\":1}}],[\"单元\",{\"1\":{\"602\":1}}],[\"单元的两级预测结构\",{\"1\":{\"575\":1}}],[\"单元测试\",{\"0\":{\"384\":1}}],[\"单词计数器\",{\"1\":{\"455\":1}}],[\"单词拆分\",{\"0\":{\"137\":1,\"138\":1},\"1\":{\"115\":1}}],[\"单线程流水线\",{\"1\":{\"542\":1}}],[\"单线程\",{\"1\":{\"414\":1}}],[\"单位是相对于单元格大小的\",{\"1\":{\"1155\":1}}],[\"单位字节\",{\"1\":{\"681\":1}}],[\"单位\",{\"1\":{\"34\":1}}],[\"零钱兑换2\",{\"0\":{\"133\":1},\"1\":{\"115\":1}}],[\"零钱兑换\",{\"0\":{\"129\":1,\"130\":1,\"134\":1},\"1\":{\"115\":1}}],[\"备注\",{\"1\":{\"114\":1,\"115\":1,\"144\":1,\"269\":1,\"977\":1,\"1064\":1}}],[\"递增和存储\",{\"1\":{\"523\":1}}],[\"递增\",{\"1\":{\"245\":1}}],[\"递推公式为\",{\"1\":{\"122\":1,\"130\":1,\"132\":1,\"136\":1,\"138\":1}}],[\"递推公式dp\",{\"1\":{\"118\":1}}],[\"递推公式\",{\"0\":{\"117\":1,\"128\":1},\"1\":{\"114\":1,\"115\":1,\"124\":1}}],[\"递归的方法比较简单\",{\"1\":{\"486\":1}}],[\"递归在访问到空节点时退出\",{\"1\":{\"56\":1}}],[\"递归终止\",{\"1\":{\"51\":1}}],[\"递归终止条件\",{\"1\":{\"51\":1}}],[\"递归\",{\"1\":{\"51\":1}}],[\"递归法的实现如下\",{\"1\":{\"486\":1}}],[\"递归法\",{\"0\":{\"42\":1,\"45\":1,\"95\":1},\"1\":{\"486\":1,\"487\":1}}],[\"递归和迭代实现\",{\"1\":{\"40\":1}}],[\"递归时会把相同元素去除\",{\"1\":{\"13\":1}}],[\"类维护的\",{\"1\":{\"1298\":1}}],[\"类文件\",{\"1\":{\"1179\":1}}],[\"类别名列表文件voc\",{\"1\":{\"1159\":1}}],[\"类别代码为从0开始的整数\",{\"1\":{\"1159\":1}}],[\"类别代码>\",{\"1\":{\"1159\":1}}],[\"类别概率部分为\",{\"1\":{\"1157\":1}}],[\"类别\",{\"1\":{\"973\":1}}],[\"类与类之间的依赖关系形成了闭环\",{\"1\":{\"881\":1}}],[\"类初始化\",{\"1\":{\"836\":1}}],[\"类名\",{\"1\":{\"706\":1,\"1403\":1}}],[\"类的成员函数\",{\"1\":{\"1366\":1}}],[\"类的静态成员变量\",{\"1\":{\"1366\":1}}],[\"类的加载和函数\",{\"1\":{\"701\":1}}],[\"类的方式调用父类初始化方法\",{\"1\":{\"426\":1}}],[\"类中的一些功能需要由\",{\"1\":{\"696\":1,\"1396\":1}}],[\"类有两个很实用的函数\",{\"1\":{\"691\":1}}],[\"类比于重量级锁\",{\"1\":{\"676\":1}}],[\"类比于轻量级锁\",{\"1\":{\"676\":1}}],[\"类比于\",{\"1\":{\"676\":1}}],[\"类\",{\"0\":{\"1629\":1},\"1\":{\"665\":1,\"690\":1,\"691\":6,\"944\":1,\"1296\":1,\"1601\":1}}],[\"类声明\",{\"1\":{\"664\":1}}],[\"类为虚拟的\",{\"1\":{\"643\":1}}],[\"类是实例对象的模板\",{\"1\":{\"438\":1}}],[\"类是最大的父类\",{\"1\":{\"430\":1}}],[\"类会先调用\",{\"1\":{\"431\":1}}],[\"类方法\",{\"0\":{\"421\":1}}],[\"类级别\",{\"1\":{\"379\":1}}],[\"类糖果\",{\"1\":{\"155\":1}}],[\"类型属性\",{\"1\":{\"1554\":1}}],[\"类型作为这些函数的返回值\",{\"1\":{\"1469\":1}}],[\"类型的内存地址\",{\"1\":{\"1567\":1}}],[\"类型的内存数据库\",{\"1\":{\"825\":1}}],[\"类型的变量\",{\"1\":{\"1529\":1}}],[\"类型的成员变量\",{\"1\":{\"1345\":1}}],[\"类型的节点\",{\"1\":{\"460\":1}}],[\"类型字符串\",{\"1\":{\"789\":1}}],[\"类型为\",{\"1\":{\"789\":1,\"1345\":1}}],[\"类型描述\",{\"1\":{\"681\":1}}],[\"类型指针\",{\"1\":{\"677\":1}}],[\"类型\",{\"1\":{\"114\":1,\"115\":1,\"144\":1,\"155\":4,\"674\":1,\"675\":1,\"1236\":1,\"1333\":1,\"1469\":1,\"1567\":3,\"1570\":1,\"1573\":1,\"1597\":1}}],[\"类似的还有\",{\"1\":{\"1471\":1}}],[\"类似的\",{\"1\":{\"1469\":1,\"1572\":1}}],[\"类似的场景\",{\"1\":{\"552\":1}}],[\"类似于\",{\"1\":{\"1307\":1,\"1508\":1,\"1596\":1}}],[\"类似于网页中的\",{\"1\":{\"1179\":1}}],[\"类似于huffman编码\",{\"1\":{\"1169\":1}}],[\"类似于这道题目\",{\"1\":{\"480\":1}}],[\"类似于下图三的情况\",{\"1\":{\"468\":1}}],[\"类似\",{\"1\":{\"87\":1,\"1516\":1}}],[\"列举了两种方式\",{\"1\":{\"1328\":1}}],[\"列举出来的下标从\",{\"1\":{\"397\":1}}],[\"列出所有应用\",{\"1\":{\"1275\":1}}],[\"列出所有分支\",{\"1\":{\"1252\":1}}],[\"列出远程仓库的\",{\"1\":{\"1250\":1}}],[\"列出远程仓库的简短名称\",{\"1\":{\"1250\":1}}],[\"列出ath模块的路径\",{\"1\":{\"718\":1}}],[\"列出该模块的详细路径\",{\"1\":{\"718\":1}}],[\"列表问题\",{\"1\":{\"425\":1}}],[\"列表\",{\"1\":{\"388\":2,\"427\":2,\"691\":2,\"1602\":1}}],[\"列的数据\",{\"1\":{\"331\":1}}],[\"列\",{\"1\":{\"104\":2}}],[\"剩下的都是\",{\"1\":{\"1475\":1}}],[\"剩下的用于连接虚拟机\",{\"1\":{\"730\":1}}],[\"剩下的\",{\"1\":{\"204\":1,\"261\":1}}],[\"剩下的是\",{\"1\":{\"198\":1}}],[\"剩下的可以直接研究\",{\"1\":{\"172\":1}}],[\"剩下的就是回溯的基本步骤\",{\"1\":{\"15\":1}}],[\"剩余的\",{\"1\":{\"1477\":1}}],[\"剩余的是置信度比较高的预测框\",{\"1\":{\"1157\":1}}],[\"剩余的数据才会被发送出来\",{\"1\":{\"956\":1}}],[\"剩余的高\",{\"1\":{\"528\":1}}],[\"剩余高位用\",{\"1\":{\"536\":1}}],[\"剩余\",{\"1\":{\"104\":2}}],[\"×\",{\"1\":{\"104\":2,\"727\":11,\"1021\":1,\"1022\":1}}],[\"横向需要两个填满两列\",{\"1\":{\"104\":1}}],[\"√\",{\"1\":{\"104\":4,\"727\":9}}],[\"矩阵转置\",{\"0\":{\"1181\":1}}],[\"矩阵中的最长递增路径\",{\"0\":{\"74\":1}}],[\"矩形\",{\"1\":{\"691\":1}}],[\"矩形覆盖无非就是两种情况\",{\"1\":{\"104\":1}}],[\"矩形覆盖\",{\"0\":{\"104\":1}}],[\"阶段所做的事情\",{\"1\":{\"1497\":1}}],[\"阶段成功\",{\"1\":{\"1487\":1}}],[\"阶段除了\",{\"1\":{\"1483\":1}}],[\"阶段处于指令\",{\"1\":{\"552\":1}}],[\"阶段\",{\"1\":{\"552\":1,\"553\":1,\"593\":1,\"602\":1,\"1474\":1,\"1490\":1}}],[\"阶段去验证比较复杂\",{\"1\":{\"549\":1}}],[\"阶段完成\",{\"1\":{\"543\":1}}],[\"阶段的事情么\",{\"1\":{\"1490\":1}}],[\"阶段的\",{\"1\":{\"543\":1}}],[\"阶段并按顺序完成\",{\"1\":{\"543\":1}}],[\"阶\",{\"1\":{\"103\":2}}],[\"跳转指令\",{\"1\":{\"691\":1}}],[\"跳转到对应的中断处理函数\",{\"1\":{\"1516\":1}}],[\"跳转到标号出执行\",{\"1\":{\"517\":1}}],[\"跳转到某地址\",{\"1\":{\"517\":1}}],[\"跳过\",{\"1\":{\"386\":2}}],[\"跳过测试\",{\"0\":{\"373\":1}}],[\"跳\",{\"1\":{\"103\":2}}],[\"跳台阶游戏\",{\"0\":{\"103\":1}}],[\"购买购物清单中所有物品需要的花费\",{\"1\":{\"102\":1}}],[\"购买大礼包\",{\"1\":{\"102\":1}}],[\"避免出现网络负载过大\",{\"1\":{\"986\":1}}],[\"避免了重复造轮子\",{\"1\":{\"695\":1,\"1395\":1}}],[\"避免了进一步的分析工作\",{\"1\":{\"298\":1}}],[\"避免搜索到无用状态\",{\"1\":{\"100\":1}}],[\"避免走回头路\",{\"1\":{\"83\":1}}],[\"函数比较长\",{\"1\":{\"1573\":1}}],[\"函数被放在不同的子区段中\",{\"1\":{\"1551\":1}}],[\"函数被两次调用\",{\"1\":{\"1523\":1}}],[\"函数首先那倒本地的\",{\"1\":{\"1542\":1}}],[\"函数来重新启用时钟事件处理器\",{\"1\":{\"1541\":1}}],[\"函数来定位的一种索引\",{\"1\":{\"812\":1}}],[\"函数则用于进入rcu空闲状态并等待所有正在使用旧副本的进程访问完毕\",{\"1\":{\"1524\":1}}],[\"函数用于断言当前中断已经被禁止\",{\"1\":{\"1524\":1}}],[\"函数执行离开当前进程的操作\",{\"1\":{\"1522\":1}}],[\"函数位置\",{\"1\":{\"1520\":1}}],[\"函数刚开始\",{\"1\":{\"1518\":1}}],[\"函数等\",{\"1\":{\"1392\":1}}],[\"函数注册的流程\",{\"1\":{\"1392\":1}}],[\"函数定义如下\",{\"1\":{\"1376\":1,\"1607\":1}}],[\"函数返回\",{\"1\":{\"1366\":1}}],[\"函数返回值的新列表\",{\"1\":{\"393\":1}}],[\"函数为\",{\"1\":{\"1333\":1}}],[\"函数映射\",{\"1\":{\"1320\":1}}],[\"函数和\",{\"1\":{\"1312\":1}}],[\"函数较为复杂\",{\"1\":{\"1311\":1}}],[\"函数是用于启动rcu空闲处理并进入rcu空闲状态的函数\",{\"1\":{\"1524\":1}}],[\"函数是上层调用下来以后的入口函数\",{\"1\":{\"1313\":1}}],[\"函数是\",{\"1\":{\"1307\":1}}],[\"函数是怎么被注册\",{\"1\":{\"697\":1}}],[\"函数就是将当前线程加入到\",{\"1\":{\"1298\":1}}],[\"函数进行\",{\"1\":{\"1297\":1,\"1524\":1}}],[\"函数时\",{\"1\":{\"980\":1}}],[\"函数回调\",{\"1\":{\"961\":1}}],[\"函数之间必须保证一定的调用顺序的问题\",{\"1\":{\"1551\":1}}],[\"函数之间\",{\"1\":{\"1333\":1}}],[\"函数之后\",{\"1\":{\"951\":1}}],[\"函数之前调用\",{\"1\":{\"951\":1}}],[\"函数之前\",{\"1\":{\"696\":1,\"1396\":1}}],[\"函数把一个未连接的套接字转化为\",{\"1\":{\"951\":1}}],[\"函数创建了一个套接字时\",{\"1\":{\"951\":1}}],[\"函数有\",{\"1\":{\"739\":1}}],[\"函数在区段\",{\"1\":{\"1551\":1}}],[\"函数在这个\",{\"1\":{\"1312\":1}}],[\"函数在调用之后会返回两次\",{\"1\":{\"738\":1}}],[\"函数在\",{\"1\":{\"707\":1,\"1345\":1,\"1406\":1}}],[\"函数参数和返回值\",{\"1\":{\"706\":1,\"1403\":1}}],[\"函数名\",{\"1\":{\"706\":1,\"1403\":1}}],[\"函数指针\",{\"1\":{\"706\":1,\"1403\":1,\"1551\":1,\"1567\":1,\"1573\":1}}],[\"函数声明前的\",{\"1\":{\"705\":1,\"1400\":1}}],[\"函数调用之前\",{\"1\":{\"696\":1,\"1396\":1}}],[\"函数调用指令\",{\"1\":{\"691\":1}}],[\"函数的整体框架如上所示\",{\"1\":{\"1544\":1}}],[\"函数的调用\",{\"1\":{\"1519\":2}}],[\"函数的调用栈\",{\"1\":{\"1515\":1}}],[\"函数的参数\",{\"1\":{\"1469\":1}}],[\"函数的返回类型是\",{\"1\":{\"1469\":1}}],[\"函数的申明\",{\"1\":{\"1469\":1}}],[\"函数的总结\",{\"1\":{\"1393\":1}}],[\"函数的基本调用流程\",{\"1\":{\"1393\":1}}],[\"函数的定义\",{\"1\":{\"1392\":1,\"1469\":1}}],[\"函数的定义和实现如下\",{\"1\":{\"1345\":1}}],[\"函数的过程中\",{\"1\":{\"1293\":1}}],[\"函数的注册呢\",{\"1\":{\"706\":1,\"1403\":1}}],[\"函数的注册\",{\"1\":{\"706\":1,\"1402\":1}}],[\"函数的声明\",{\"1\":{\"696\":1,\"1396\":1}}],[\"函数的汇编\",{\"1\":{\"692\":1}}],[\"函数的作用是\",{\"1\":{\"34\":1}}],[\"函数如下\",{\"1\":{\"682\":1}}],[\"函数未做修改\",{\"1\":{\"682\":1}}],[\"函数继承\",{\"0\":{\"424\":1}}],[\"函数语法\",{\"1\":{\"393\":1}}],[\"函数级\",{\"1\":{\"379\":1}}],[\"函数中要求实现\",{\"1\":{\"961\":1}}],[\"函数中如下写\",{\"1\":{\"681\":1}}],[\"函数中\",{\"1\":{\"288\":1,\"952\":1,\"1376\":1}}],[\"函数\",{\"1\":{\"100\":1,\"354\":1,\"393\":2,\"696\":1,\"707\":1,\"1300\":1,\"1307\":3,\"1308\":1,\"1314\":1,\"1333\":2,\"1396\":1,\"1405\":1,\"1463\":1,\"1469\":1,\"1517\":1,\"1542\":3}}],[\"无视那个虚线\",{\"1\":{\"1569\":1}}],[\"无\",{\"1\":{\"1534\":1}}],[\"无条件激活中断\",{\"1\":{\"1517\":1}}],[\"无条件执行\",{\"1\":{\"514\":1}}],[\"无线路由器\",{\"1\":{\"1144\":1}}],[\"无线信号拥有复杂的数据信息以得到不同的代表\",{\"1\":{\"1134\":1}}],[\"无效格式1\",{\"1\":{\"1464\":1}}],[\"无效文件1\",{\"1\":{\"1464\":1}}],[\"无效连接的监视释放\",{\"1\":{\"988\":1}}],[\"无效状态是无效的\",{\"1\":{\"224\":1}}],[\"无符号右移一位才行\",{\"1\":{\"673\":1}}],[\"无符号位域提取指令\",{\"1\":{\"536\":1}}],[\"无论哪种情况\",{\"1\":{\"1519\":1}}],[\"无论是在实现人体感知还是神经网络的时候\",{\"1\":{\"1134\":1}}],[\"无论是否被使用\",{\"1\":{\"719\":1}}],[\"无论是直接的还是间接的\",{\"1\":{\"550\":1}}],[\"无论预测是正确或者不正确\",{\"1\":{\"559\":1}}],[\"无论怎么称呼\",{\"1\":{\"252\":1}}],[\"无返回\",{\"1\":{\"517\":1}}],[\"无需使能\",{\"1\":{\"1381\":1}}],[\"无需访问\",{\"1\":{\"227\":1}}],[\"无需外部变量\",{\"1\":{\"100\":1}}],[\"无法找到与其共同编码的明文数据\",{\"1\":{\"1169\":1}}],[\"无法使得振幅与发射功率一致\",{\"1\":{\"1024\":1}}],[\"无法访问或者忙时备用\",{\"1\":{\"763\":1}}],[\"无法访问外网\",{\"1\":{\"729\":1}}],[\"无法获取对方的内容\",{\"1\":{\"691\":1}}],[\"无法预测\",{\"1\":{\"601\":1}}],[\"无法包含程序执行期间所需的所有块\",{\"1\":{\"208\":1}}],[\"无法重复使用\",{\"1\":{\"11\":1}}],[\"动态连接器将几个这种文件与可执行文件结合\",{\"1\":{\"1459\":1}}],[\"动态变化\",{\"1\":{\"983\":1}}],[\"动态代理生成一个代理的子类来作为代理\",{\"1\":{\"878\":1}}],[\"动态注册\",{\"0\":{\"699\":1,\"1398\":1}}],[\"动态类加载\",{\"1\":{\"654\":1}}],[\"动态规划例题\",{\"1\":{\"1067\":1}}],[\"动态规划\",{\"0\":{\"96\":1,\"1067\":1},\"1\":{\"1064\":1}}],[\"动作\",{\"1\":{\"91\":1}}],[\"斐波那契数列\",{\"1\":{\"94\":1}}],[\"明显是没有这种方式巧妙的\",{\"1\":{\"92\":1}}],[\"等级\",{\"1\":{\"1597\":1}}],[\"等函数来访问和修改\",{\"1\":{\"1529\":1}}],[\"等的数据结构\",{\"1\":{\"988\":1}}],[\"等应用程序协议\",{\"1\":{\"977\":1}}],[\"等头文件\",{\"1\":{\"741\":1,\"742\":1}}],[\"等技术将进程隔离\",{\"1\":{\"724\":1}}],[\"等步骤\",{\"1\":{\"550\":1}}],[\"等等\",{\"1\":{\"549\":1,\"688\":1}}],[\"等效于\",{\"1\":{\"393\":1}}],[\"等使用方法\",{\"1\":{\"391\":1}}],[\"等以后加深理解了再研究吧\",{\"1\":{\"358\":1}}],[\"等值的\",{\"1\":{\"331\":1}}],[\"等\",{\"1\":{\"248\":1,\"517\":1,\"643\":5,\"724\":1,\"725\":1,\"977\":1,\"1012\":1,\"1021\":1,\"1474\":1,\"1523\":1,\"1551\":2}}],[\"等不被同时使用\",{\"1\":{\"236\":1}}],[\"等性能要求很高的处理器中\",{\"1\":{\"226\":1}}],[\"等待造成的功耗和延迟\",{\"1\":{\"1584\":1}}],[\"等待下一次需要访问共享数据时再被唤醒\",{\"1\":{\"1584\":1}}],[\"等待完成后再运行其他逻辑\",{\"1\":{\"1374\":1}}],[\"等待读取数据\",{\"1\":{\"1317\":1}}],[\"等待进程或线程工作队列被唤醒\",{\"1\":{\"1316\":1}}],[\"等待设备重启\",{\"0\":{\"1284\":1}}],[\"等待客户端的确认\",{\"1\":{\"984\":1}}],[\"等待状态的端口号在\",{\"1\":{\"983\":1}}],[\"等待时间\",{\"1\":{\"983\":1}}],[\"等待态\",{\"1\":{\"736\":1}}],[\"等待插件安装完成\",{\"1\":{\"612\":1}}],[\"等待一个协程使用\",{\"1\":{\"415\":1}}],[\"等待\",{\"1\":{\"216\":1,\"1374\":1}}],[\"等于\",{\"1\":{\"154\":1,\"517\":1,\"987\":1}}],[\"等价于下述代码的省略形式\",{\"1\":{\"1253\":1}}],[\"等价于\",{\"1\":{\"153\":1,\"411\":1,\"465\":1}}],[\"等同\",{\"1\":{\"118\":1}}],[\"等遍历完以后再恢复\",{\"1\":{\"92\":1}}],[\"等复位\",{\"1\":{\"88\":1}}],[\"多文件夹例子\",{\"0\":{\"1447\":1}}],[\"多行\",{\"1\":{\"1367\":1}}],[\"多尝试几次也是自身提升的过程\",{\"1\":{\"1144\":1}}],[\"多写一写文字感悟类的\",{\"1\":{\"1044\":1}}],[\"多径抑制算法对于未改变的信号加以保留\",{\"1\":{\"1025\":1}}],[\"多径抑制算法的思想在于\",{\"1\":{\"1025\":1}}],[\"多径\",{\"1\":{\"1020\":1}}],[\"多径地抑制一直是研究的重点和难点\",{\"1\":{\"1012\":1}}],[\"多径效应使得室内定位存在两个比较大的挑战\",{\"1\":{\"1019\":1}}],[\"多径效应使得信号的一部分到达目的地\",{\"1\":{\"1019\":1}}],[\"多径效应普遍存在于室内环境中\",{\"1\":{\"1019\":1}}],[\"多径效应\",{\"0\":{\"1019\":1}}],[\"多径效应的存在会导致多径失真现象\",{\"1\":{\"1012\":1}}],[\"多径效应在室内环境中十分常见\",{\"1\":{\"1012\":1}}],[\"多路转接\",{\"1\":{\"958\":1}}],[\"多例模式下\",{\"1\":{\"881\":1}}],[\"多了持久化功能\",{\"1\":{\"828\":1}}],[\"多了一个\",{\"1\":{\"225\":1}}],[\"多网卡绑定一共有\",{\"1\":{\"732\":1}}],[\"多网卡\",{\"0\":{\"732\":1}}],[\"多采用带前缀的无符号数字表示\",{\"1\":{\"692\":1}}],[\"多状态栈顶缓存有几种不同的做法\",{\"1\":{\"689\":1}}],[\"多状态栈顶缓存\",{\"1\":{\"689\":1}}],[\"多处理器\",{\"1\":{\"542\":1}}],[\"多叉树的前序遍历\",{\"0\":{\"486\":1},\"1\":{\"486\":1}}],[\"多组输入\",{\"1\":{\"307\":1}}],[\"多线程同步\",{\"1\":{\"1294\":1,\"1297\":1}}],[\"多线程流水线\",{\"1\":{\"542\":1}}],[\"多线程有两个好处\",{\"1\":{\"283\":1}}],[\"多线程相当于单核多线程\",{\"1\":{\"283\":1}}],[\"多线程结论\",{\"0\":{\"283\":1}}],[\"多进程相比于多线程而言更加健壮\",{\"1\":{\"738\":1}}],[\"多进程\",{\"0\":{\"737\":1}}],[\"多进程程序的运行原理\",{\"1\":{\"288\":1}}],[\"多进程可以使用\",{\"1\":{\"284\":1}}],[\"多进程虽然是并发的\",{\"1\":{\"277\":1}}],[\"多进程的吗\",{\"1\":{\"277\":1}}],[\"多进程的相关实现\",{\"1\":{\"276\":1}}],[\"多的话会发生什么呢\",{\"1\":{\"432\":1}}],[\"多的\",{\"1\":{\"225\":1}}],[\"多核处理器\",{\"1\":{\"220\":1}}],[\"多个class文件之间的常量池冗余\",{\"1\":{\"688\":1}}],[\"多个函数也可以打相同的标记\",{\"1\":{\"372\":1}}],[\"多个核会存在共享数据的情况\",{\"1\":{\"224\":1}}],[\"多个\",{\"1\":{\"194\":1,\"534\":1,\"691\":1,\"1507\":1}}],[\"多个前驱用列表保存\",{\"1\":{\"86\":1}}],[\"多多理解\",{\"1\":{\"92\":1,\"486\":1}}],[\"犯了一些错误\",{\"1\":{\"92\":1}}],[\"假设用户想要对5个数值进行加密\",{\"1\":{\"1169\":1}}],[\"假设在\",{\"1\":{\"987\":1}}],[\"假设由于客户端发送确认\",{\"1\":{\"983\":1}}],[\"假设发送了\",{\"1\":{\"980\":1}}],[\"假设有\",{\"1\":{\"954\":1}}],[\"假设有两个同层的节点都能指向\",{\"1\":{\"92\":1}}],[\"假设\",{\"1\":{\"559\":1,\"980\":1}}],[\"假设其有\",{\"1\":{\"559\":1}}],[\"假设你想从考试分数的一个列表中删除所有的\",{\"1\":{\"402\":1}}],[\"假设你有两个数组\",{\"1\":{\"168\":1}}],[\"假设现在我们不用\",{\"1\":{\"252\":1}}],[\"假设每一种面额的硬币有无限个\",{\"1\":{\"134\":1}}],[\"假设石头的重量分别为\",{\"1\":{\"125\":1}}],[\"假设我们已经知道了左子树和右子树的最大深度\",{\"1\":{\"56\":1}}],[\"以帮助检测\",{\"1\":{\"1584\":1}}],[\"以形成自己的特色\",{\"1\":{\"1577\":1}}],[\"以保证系统的响应速度和实时性\",{\"1\":{\"1537\":1}}],[\"以保证数据的一致性和正确性\",{\"1\":{\"534\":1}}],[\"以方便调用\",{\"1\":{\"1532\":1}}],[\"以节能\",{\"1\":{\"1528\":1}}],[\"以节约成本\",{\"1\":{\"644\":1}}],[\"以了解内核关键代码段的耗时和执行情况\",{\"1\":{\"1527\":1}}],[\"以非常低的功耗提供了高速的数据传输速率\",{\"1\":{\"1508\":1}}],[\"以避免后台\",{\"1\":{\"1584\":1}}],[\"以避免影响系统的性能\",{\"1\":{\"1529\":1}}],[\"以避免cpu浪费过多的时间\",{\"1\":{\"1528\":1}}],[\"以避免对正在访问旧副本的进程产生干扰\",{\"1\":{\"1524\":1}}],[\"以避免任何不必要的冲突\",{\"1\":{\"1522\":1}}],[\"以避免敏感数据泄露\",{\"1\":{\"1345\":1}}],[\"以避免一些运算错误\",{\"1\":{\"1212\":1}}],[\"以空格分隔的第\",{\"1\":{\"1231\":1}}],[\"以70为例\",{\"1\":{\"1169\":1}}],[\"以完成本课程的大作业要求\",{\"1\":{\"1166\":1}}],[\"以永终誉\",{\"1\":{\"1060\":1}}],[\"以寻找最佳精度的模型\",{\"1\":{\"1012\":1}}],[\"以寻址下一个顺序指令\",{\"1\":{\"245\":1}}],[\"以太网协议\",{\"1\":{\"977\":1}}],[\"以基于端口的虚拟主机为例\",{\"1\":{\"760\":1}}],[\"以进程的形式运行\",{\"1\":{\"701\":1}}],[\"以此实现对整张图片的检测\",{\"1\":{\"1153\":1}}],[\"以此来观察有数组元素的类的内存布局是什么样子的\",{\"1\":{\"682\":1}}],[\"以此来补齐对象头和实例数据占用内存之后的剩余空间的大小\",{\"1\":{\"679\":1}}],[\"以此类推\",{\"1\":{\"61\":1,\"89\":1,\"201\":1,\"559\":1,\"714\":1,\"985\":1,\"1169\":1}}],[\"以表格形式给出\",{\"1\":{\"674\":1}}],[\"以每一个\",{\"1\":{\"594\":1}}],[\"以免陷入太多的细节\",{\"1\":{\"1291\":1}}],[\"以免陷入死循环\",{\"1\":{\"165\":1}}],[\"以免用了不那么有用的值替换掉有用的值\",{\"1\":{\"577\":1}}],[\"以前的系统大多数都实现了分类级别的感知\",{\"1\":{\"1133\":1}}],[\"以前看到的值在存储位置中重复出现\",{\"1\":{\"573\":1}}],[\"以前基于\",{\"1\":{\"542\":1}}],[\"以前很擅长写这个\",{\"1\":{\"296\":1}}],[\"以便其他cpu可以更快地访问共享资源\",{\"1\":{\"1585\":1}}],[\"以便让rcu子系统在rcu调度器中执行后台工作\",{\"1\":{\"1585\":1}}],[\"以便被通知系统的工作可以更加紧凑\",{\"1\":{\"1567\":1}}],[\"以便为每个\",{\"1\":{\"1529\":1}}],[\"以便进行性能分析和优化\",{\"1\":{\"1527\":1}}],[\"以便操作系统在进入空闲状态之前刷新\",{\"1\":{\"1522\":1}}],[\"以便在服务端接收客户端请求时能够被分配到该线程处理\",{\"1\":{\"1298\":1}}],[\"以便管理员检测故障原因\",{\"1\":{\"763\":1}}],[\"以便首先将特定地址上的值加载到寄存器中\",{\"1\":{\"523\":1}}],[\"以便于适应具体的需求\",{\"1\":{\"1170\":1}}],[\"以便于让其适应保序编码的要求\",{\"1\":{\"1169\":1}}],[\"以便于我们进行人脸识别\",{\"1\":{\"1162\":1}}],[\"以便于推广到穿墙的应用场景上来\",{\"1\":{\"1137\":1}}],[\"以便于得到多种可能存在的感知状态\",{\"1\":{\"1133\":1}}],[\"以便于实施更有针对性的沉默\",{\"1\":{\"595\":1}}],[\"以便于衡量置信度\",{\"1\":{\"545\":1}}],[\"以便于引起注意\",{\"1\":{\"348\":1}}],[\"以便于在后续的时钟周期中使用\",{\"1\":{\"245\":1}}],[\"以便于在时钟周期结束时\",{\"1\":{\"236\":1}}],[\"以达到打印的目的\",{\"1\":{\"434\":1}}],[\"以参数序列中的每一个元素调用\",{\"1\":{\"393\":1}}],[\"以下为内部服务器\",{\"1\":{\"761\":1}}],[\"以下内容均可以跳过\",{\"1\":{\"386\":1}}],[\"以下是\",{\"1\":{\"1453\":1}}],[\"以下是使用的例子\",{\"1\":{\"1239\":1}}],[\"以下是正确示例\",{\"1\":{\"426\":1}}],[\"以下是四路组相联的结构\",{\"1\":{\"202\":1}}],[\"以下是一个例子\",{\"1\":{\"194\":1}}],[\"以确保最后的进程是正常结束了\",{\"1\":{\"285\":1}}],[\"以确定是否采用分支\",{\"1\":{\"245\":1}}],[\"以一个\",{\"1\":{\"262\":1}}],[\"以实现进程之间的隔离\",{\"1\":{\"251\":1}}],[\"以读取寄存器\",{\"1\":{\"245\":1}}],[\"以上两者是等价的\",{\"1\":{\"1575\":1}}],[\"以上就是\",{\"1\":{\"1453\":1}}],[\"以上就是报头的信息\",{\"1\":{\"978\":1}}],[\"以上代码概括了一般神经网络的训练大致遵循的过程\",{\"1\":{\"1212\":1}}],[\"以上自定义了一个损失函数\",{\"1\":{\"1212\":1}}],[\"以上几点在实现系统的时候需要被深度考虑\",{\"1\":{\"1134\":1}}],[\"以上简单的熟悉导致了流水线实现的显著简化\",{\"1\":{\"235\":1}}],[\"以上的条件就是我们记忆化搜索时可以用来筛选的条件\",{\"1\":{\"102\":1}}],[\"以后如果有使用了再加以研究\",{\"1\":{\"1566\":1}}],[\"以后还会增加\",{\"1\":{\"1418\":1}}],[\"以后还需要再经过以下编译器\",{\"1\":{\"653\":1}}],[\"以后废弃\",{\"1\":{\"875\":1}}],[\"以后把\",{\"1\":{\"652\":1}}],[\"以后才可以预测\",{\"1\":{\"576\":1}}],[\"以后研究该命令\",{\"1\":{\"537\":1}}],[\"以后再将其转化为\",{\"1\":{\"304\":1}}],[\"以后会慢慢复习到\",{\"1\":{\"297\":1}}],[\"以后\",{\"1\":{\"212\":1,\"394\":1}}],[\"以\",{\"1\":{\"192\":1,\"299\":1,\"573\":1,\"962\":1,\"1170\":1,\"1440\":1}}],[\"以及边界框的置信度\",{\"1\":{\"1155\":1}}],[\"以及\",{\"1\":{\"801\":1}}],[\"以及计算出来的\",{\"1\":{\"706\":1,\"1403\":1}}],[\"以及将其从寄存器存储回存储器\",{\"1\":{\"523\":1}}],[\"以及各寄存器\",{\"1\":{\"282\":1}}],[\"以及其字母表的顺序\",{\"1\":{\"186\":1}}],[\"以及一个基因库\",{\"1\":{\"92\":1}}],[\"肯定是\",{\"1\":{\"1440\":1}}],[\"肯定能\",{\"1\":{\"1353\":1}}],[\"肯定有解\",{\"1\":{\"124\":1}}],[\"肯定会有部分的水剩下在了\",{\"1\":{\"91\":1}}],[\"肯定在左边\",{\"1\":{\"20\":1}}],[\"壶现有的水减去\",{\"1\":{\"91\":1}}],[\"壶可以倒入的水\",{\"1\":{\"91\":1}}],[\"壶可以倒入\",{\"1\":{\"91\":1}}],[\"壶里面\",{\"1\":{\"91\":1}}],[\"壶的容量\",{\"1\":{\"91\":1}}],[\"壶中应该是有剩下的水的\",{\"1\":{\"91\":1}}],[\"壶没有被倒空\",{\"1\":{\"91\":1}}],[\"壶全被倒空了\",{\"1\":{\"91\":1}}],[\"壶全部倒入\",{\"1\":{\"91\":2}}],[\"壶\",{\"1\":{\"91\":4}}],[\"壶倒入\",{\"1\":{\"91\":2}}],[\"壶倒满\",{\"1\":{\"91\":2}}],[\"壶倒空\",{\"1\":{\"91\":2}}],[\"标志\",{\"1\":{\"1521\":1}}],[\"标志位有效\",{\"1\":{\"676\":1}}],[\"标志位和一个\",{\"1\":{\"562\":1}}],[\"标志位\",{\"1\":{\"217\":2,\"978\":1}}],[\"标注人名为类别名\",{\"1\":{\"1162\":1}}],[\"标识了\",{\"1\":{\"1421\":1}}],[\"标识该\",{\"1\":{\"1341\":1}}],[\"标识的标志位记录了一个\",{\"1\":{\"981\":1}}],[\"标识的函数表示它将由\",{\"1\":{\"696\":1,\"1396\":1}}],[\"标识壶号\",{\"1\":{\"91\":1}}],[\"标记为初始化的函数\",{\"1\":{\"1553\":1}}],[\"标记要跳过的函数\",{\"1\":{\"373\":1}}],[\"标记和\",{\"1\":{\"372\":1}}],[\"标记函数的作用是在某些情况下\",{\"1\":{\"372\":1}}],[\"标记函数\",{\"0\":{\"372\":1}}],[\"标题\",{\"1\":{\"269\":1}}],[\"标准差为2\",{\"1\":{\"1212\":1}}],[\"标准启动方式\",{\"0\":{\"445\":1}}],[\"标准程序参考链接\",{\"1\":{\"22\":1}}],[\"标准回溯\",{\"1\":{\"8\":1}}],[\"状态之后\",{\"1\":{\"1542\":1}}],[\"状态时钟的控制等\",{\"1\":{\"1540\":1}}],[\"状态码包括\",{\"1\":{\"999\":1}}],[\"状态行\",{\"1\":{\"999\":1}}],[\"状态或是\",{\"1\":{\"984\":1}}],[\"状态机\",{\"0\":{\"983\":1}}],[\"状态表示\",{\"1\":{\"225\":1}}],[\"状态的话直接退出\",{\"1\":{\"1542\":1}}],[\"状态的时候\",{\"1\":{\"1542\":1}}],[\"状态的一种合体\",{\"1\":{\"225\":1}}],[\"状态的转换\",{\"1\":{\"91\":1}}],[\"状态位打开的话\",{\"1\":{\"978\":1}}],[\"状态位\",{\"1\":{\"224\":2}}],[\"状态为\",{\"1\":{\"224\":1}}],[\"状态转移数组初始化的时候初始化为\",{\"1\":{\"120\":1}}],[\"状态\",{\"1\":{\"91\":1,\"224\":1,\"225\":1,\"674\":1,\"676\":1,\"951\":2,\"984\":4,\"986\":1,\"1516\":1,\"1520\":1,\"1521\":1,\"1545\":2,\"1583\":1,\"1584\":1}}],[\"zshrc\",{\"1\":{\"1635\":1}}],[\"zsh\",{\"0\":{\"1635\":1},\"1\":{\"1635\":1,\"1640\":1}}],[\"zset\",{\"1\":{\"825\":1}}],[\"zr\",{\"1\":{\"1463\":1}}],[\"zloge\",{\"1\":{\"1320\":2}}],[\"zen\",{\"0\":{\"1060\":1}}],[\"zero\",{\"1\":{\"120\":3,\"126\":2,\"361\":1,\"520\":1,\"892\":1,\"949\":1,\"1098\":1,\"1208\":1,\"1345\":2}}],[\"zeros\",{\"1\":{\"118\":1,\"120\":1,\"692\":1,\"1212\":1}}],[\"zone0\",{\"1\":{\"1611\":1}}],[\"zones\",{\"0\":{\"1613\":1},\"1\":{\"1598\":1,\"1605\":2,\"1607\":1,\"1613\":3}}],[\"zone\",{\"0\":{\"1590\":1,\"1591\":1,\"1593\":1,\"1610\":1,\"1611\":1},\"1\":{\"1590\":8,\"1591\":4,\"1592\":6,\"1593\":16,\"1594\":2,\"1595\":2,\"1596\":3,\"1597\":2,\"1598\":1,\"1599\":1,\"1601\":5,\"1602\":8,\"1607\":2,\"1608\":3,\"1609\":3,\"1610\":3,\"1611\":16}}],[\"zone=mycache\",{\"1\":{\"766\":1}}],[\"zon\",{\"1\":{\"1060\":1}}],[\"zookeeper\",{\"1\":{\"831\":1}}],[\"zombie\",{\"1\":{\"738\":1}}],[\"za\",{\"1\":{\"751\":1,\"1463\":1}}],[\"zygoteoutputwriter\",{\"1\":{\"703\":4}}],[\"zygoteinputstream\",{\"1\":{\"703\":4}}],[\"zygotesessionsocket\",{\"1\":{\"703\":6}}],[\"zygotesendargsandgetresult\",{\"1\":{\"703\":1}}],[\"zygotesocketaddress\",{\"1\":{\"703\":5}}],[\"zygotestate\",{\"1\":{\"703\":4}}],[\"zygotestartfailedex\",{\"1\":{\"702\":1,\"703\":4}}],[\"zygoteprocess\",{\"1\":{\"702\":4,\"703\":1}}],[\"zygotepolicyflags\",{\"1\":{\"702\":2,\"703\":1}}],[\"zygoteargs\",{\"1\":{\"702\":2}}],[\"zygote\",{\"0\":{\"702\":1},\"1\":{\"701\":1,\"702\":7,\"703\":10,\"1365\":1}}],[\"z3addii\",{\"1\":{\"692\":1}}],[\"z=1\",{\"1\":{\"518\":1}}],[\"z=0\",{\"1\":{\"518\":1}}],[\"zhihu\",{\"1\":{\"1537\":1}}],[\"zhuanlan\",{\"1\":{\"1537\":1}}],[\"zhui\",{\"1\":{\"491\":1}}],[\"zhou\",{\"1\":{\"545\":1}}],[\"zhanshen\",{\"1\":{\"387\":1,\"388\":1,\"432\":1,\"434\":3,\"1446\":7,\"1448\":6,\"1449\":9}}],[\"zh\",{\"1\":{\"383\":1,\"1057\":1,\"1099\":1,\"1113\":1,\"1178\":1}}],[\"zxcvbnm\",{\"1\":{\"343\":1}}],[\"zip\",{\"0\":{\"396\":1},\"1\":{\"314\":3,\"396\":3,\"397\":2,\"1145\":2}}],[\"zigzaglevelorder\",{\"1\":{\"61\":1}}],[\"z\",{\"1\":{\"91\":4,\"435\":2,\"436\":5,\"751\":3,\"1028\":1,\"1320\":2,\"1454\":1}}],[\"🍉🍉🍉\",{\"1\":{\"431\":1}}],[\"🆚🆚🆚🆚🆚\",{\"1\":{\"118\":1}}],[\"🎈🎈🎈\",{\"1\":{\"89\":1}}],[\"🏀🏀🏀\",{\"1\":{\"53\":1}}],[\"关\",{\"1\":{\"1532\":1}}],[\"关机\",{\"0\":{\"1270\":1},\"1\":{\"1270\":1}}],[\"关系\",{\"1\":{\"996\":1}}],[\"关闭后设置\",{\"1\":{\"1545\":1}}],[\"关闭本地\",{\"1\":{\"1545\":1}}],[\"关闭的话\",{\"1\":{\"1521\":1}}],[\"关闭wifi\",{\"1\":{\"1272\":1}}],[\"关闭蓝牙\",{\"1\":{\"1271\":1}}],[\"关闭\",{\"0\":{\"1277\":1},\"1\":{\"983\":2,\"1516\":1}}],[\"关联了\",{\"1\":{\"559\":1}}],[\"关联容器\",{\"1\":{\"454\":1}}],[\"关联到\",{\"1\":{\"89\":1}}],[\"关于寄存器\",{\"1\":{\"1620\":1}}],[\"关于placeholder\",{\"1\":{\"1212\":1}}],[\"关于加载\",{\"1\":{\"696\":1,\"1396\":1}}],[\"关于这两个方面的优劣\",{\"1\":{\"687\":1}}],[\"关于对齐填充与\",{\"1\":{\"679\":1}}],[\"关于其硬件原理的介绍\",{\"1\":{\"527\":1}}],[\"关于\",{\"1\":{\"431\":2,\"568\":1,\"689\":1,\"1293\":1,\"1329\":1,\"1345\":1,\"1440\":1,\"1474\":1,\"1518\":1,\"1596\":1,\"1605\":1}}],[\"关于虚拟内存与进程的关系\",{\"1\":{\"251\":1}}],[\"关于虚拟内存可以参考另外的一遍文章\",{\"1\":{\"198\":1}}],[\"关于替换策略的选择\",{\"1\":{\"213\":1}}],[\"关于队列初始化的基本语法技巧\",{\"1\":{\"88\":1}}],[\"关键点检测\",{\"0\":{\"1137\":1}}],[\"关键字\",{\"1\":{\"424\":1,\"1166\":1,\"1460\":1}}],[\"关键字声明函数\",{\"1\":{\"696\":1,\"1396\":1}}],[\"关键字声明\",{\"1\":{\"418\":1}}],[\"关键字一般是用来修改函数外部的变量\",{\"1\":{\"418\":1}}],[\"关键字修改了函数\",{\"1\":{\"418\":1}}],[\"关键字可以成功修改\",{\"1\":{\"418\":1}}],[\"关键字了\",{\"1\":{\"418\":1}}],[\"关键词将固件分为两个部分\",{\"1\":{\"378\":1}}],[\"关键还是要理解\",{\"1\":{\"158\":1}}],[\"关键在于从题目中进行抽象\",{\"1\":{\"155\":1}}],[\"很好看的资源监控终端\",{\"1\":{\"1633\":1}}],[\"很好理解\",{\"1\":{\"1481\":1,\"1545\":1}}],[\"很好解决了密文数据库系统的比较操作实现问题\",{\"1\":{\"1168\":1}}],[\"很明显\",{\"1\":{\"1448\":1}}],[\"很明显这四个状态是互斥的\",{\"1\":{\"224\":1}}],[\"很安全\",{\"1\":{\"1352\":1}}],[\"很\",{\"1\":{\"1042\":1}}],[\"很大程度上提高了目标检测模型的精度和性能\",{\"1\":{\"1012\":1}}],[\"很难理解\",{\"1\":{\"1545\":1}}],[\"很难建立起连接\",{\"1\":{\"988\":1}}],[\"很难将其和\",{\"1\":{\"89\":1}}],[\"很强\",{\"1\":{\"730\":1}}],[\"很快返回虚拟地址对应的物理地址\",{\"1\":{\"255\":1}}],[\"很多相关的论文都没有实现对于人体姿态的检测\",{\"1\":{\"1133\":1}}],[\"很多程序都用\",{\"1\":{\"695\":1,\"1395\":1}}],[\"很多时候我们使用的都不是标准库的头文件\",{\"1\":{\"1446\":1}}],[\"很多时候我们需要遍历一个文件夹下面的所有文件\",{\"1\":{\"348\":1}}],[\"很多时候行号都是从\",{\"1\":{\"360\":1}}],[\"很多时候\",{\"1\":{\"345\":1,\"1278\":1}}],[\"很多进程很小\",{\"1\":{\"258\":1}}],[\"很多\",{\"1\":{\"217\":1}}],[\"很重要\",{\"1\":{\"196\":1}}],[\"很容易想到双指针的解法\",{\"1\":{\"169\":1}}],[\"很容易写出如下的代码\",{\"1\":{\"152\":1}}],[\"很轻松写出代码\",{\"1\":{\"136\":1}}],[\"很经典的一道题目\",{\"1\":{\"84\":1}}],[\"克隆较慢时使用\",{\"1\":{\"1245\":1}}],[\"克隆该节点并且存储到哈希表中\",{\"1\":{\"89\":1}}],[\"克隆\",{\"1\":{\"89\":1}}],[\"克隆图\",{\"0\":{\"89\":1},\"1\":{\"89\":1}}],[\"深度优先搜索总结\",{\"1\":{\"1066\":1}}],[\"深度优先搜索算法\",{\"0\":{\"70\":1},\"1\":{\"69\":1,\"70\":1}}],[\"深度提取网络\",{\"1\":{\"1012\":1}}],[\"深度实践\",{\"0\":{\"722\":1},\"1\":{\"722\":1}}],[\"深入理解背包\",{\"1\":{\"1068\":1}}],[\"深入理解\",{\"1\":{\"664\":1}}],[\"深入思考\",{\"1\":{\"600\":1}}],[\"深入研究这个策略\",{\"1\":{\"590\":1}}],[\"深入分析比较了这种融合的方式对于预测准确度的提升\",{\"1\":{\"581\":1}}],[\"深拷贝\",{\"1\":{\"89\":1}}],[\"特征金字塔网络\",{\"1\":{\"1022\":1}}],[\"特征金字塔网络是多尺度下的目标识别网络的常用组成部分\",{\"1\":{\"1022\":1}}],[\"特征金字塔\",{\"0\":{\"1022\":1}}],[\"特征金字塔结构在目标检测中十分有用\",{\"1\":{\"1012\":1}}],[\"特别需要注意的是\",{\"1\":{\"1445\":1}}],[\"特别值得一提的是\",{\"1\":{\"1134\":1}}],[\"特别注意\",{\"1\":{\"979\":1}}],[\"特别注意这个细节\",{\"1\":{\"602\":1}}],[\"特别是那些经常遇到但是容易忘记的命令用法\",{\"1\":{\"1452\":1}}],[\"特别是系统通过交叉拟态创建的teacher\",{\"1\":{\"1133\":1}}],[\"特别是针对\",{\"1\":{\"1012\":1}}],[\"特别是针对缓冲区大小不够的情况\",{\"1\":{\"956\":1}}],[\"特别是在室内存在大量反射物体的环境下\",{\"1\":{\"1019\":1}}],[\"特别是在学术上的定义\",{\"1\":{\"604\":1}}],[\"特别是在硬件预算不高的情况下\",{\"1\":{\"580\":1}}],[\"特别是对于存储在云端服务器数据库上的数据\",{\"1\":{\"1170\":1}}],[\"特别是对于\",{\"1\":{\"549\":1}}],[\"特别是基于\",{\"1\":{\"543\":1}}],[\"特别是\",{\"1\":{\"542\":1,\"573\":1}}],[\"特别的\",{\"1\":{\"149\":1}}],[\"特殊场景考虑\",{\"1\":{\"88\":1}}],[\"特性解法\",{\"0\":{\"65\":1}}],[\"全高网卡\",{\"1\":{\"1144\":1}}],[\"全连接队列\",{\"1\":{\"984\":1}}],[\"全页缓存\",{\"1\":{\"828\":1}}],[\"全文索引\",{\"1\":{\"811\":1}}],[\"全流程的走了一遍\",{\"1\":{\"704\":1,\"1399\":1}}],[\"全称\",{\"1\":{\"644\":1,\"724\":1,\"980\":1}}],[\"全称是\",{\"1\":{\"555\":1,\"690\":1}}],[\"全局遍历和静态变量数据经常被放在数据段中\",{\"1\":{\"1460\":1}}],[\"全局跨文件夹如何引用\",{\"1\":{\"1450\":1}}],[\"全局的\",{\"1\":{\"706\":1,\"1403\":1}}],[\"全局寄存器分配的算法之一\",{\"1\":{\"689\":1}}],[\"全局变量值被修改\",{\"1\":{\"418\":1}}],[\"全局变量\",{\"1\":{\"418\":1}}],[\"全局解释器锁\",{\"1\":{\"276\":1,\"279\":1}}],[\"全靠cpu的运算能力\",{\"1\":{\"280\":1}}],[\"全程\",{\"1\":{\"224\":1}}],[\"全相联很容易索引\",{\"1\":{\"263\":1}}],[\"全相联允许软件使用负责的替换策略以降低失效率\",{\"1\":{\"263\":1}}],[\"全相联具有优越性\",{\"1\":{\"263\":1}}],[\"全相联\",{\"1\":{\"199\":1,\"206\":2}}],[\"全部替换成\",{\"1\":{\"158\":1}}],[\"全部的可分为\",{\"1\":{\"124\":1}}],[\"全部加入\",{\"1\":{\"88\":1}}],[\"全排列ii\",{\"0\":{\"13\":1}}],[\"全排列是经典的回溯问题\",{\"1\":{\"12\":1}}],[\"全排列问题举例如下\",{\"1\":{\"12\":1}}],[\"全排列问题就变得简单了\",{\"1\":{\"12\":1}}],[\"全排列\",{\"0\":{\"12\":1}}],[\"添加一个远程仓库\",{\"1\":{\"1250\":1}}],[\"添加一条规则\",{\"1\":{\"1236\":1}}],[\"添加这行\",{\"1\":{\"960\":1}}],[\"添加附加依赖项和附加包含项即可\",{\"1\":{\"960\":1}}],[\"添加记忆化数组\",{\"1\":{\"100\":2}}],[\"添加到\",{\"1\":{\"88\":1,\"245\":1}}],[\"添加进去是相同的效果\",{\"1\":{\"88\":1}}],[\"举一反三\",{\"1\":{\"422\":1}}],[\"举个基本的用例\",{\"1\":{\"385\":1}}],[\"举个反例\",{\"1\":{\"88\":1}}],[\"举例了\",{\"1\":{\"558\":1}}],[\"举例说明\",{\"1\":{\"536\":1,\"987\":1}}],[\"举例如下\",{\"1\":{\"426\":1,\"432\":1,\"1424\":1,\"1425\":1}}],[\"举例\",{\"1\":{\"202\":1,\"573\":1,\"717\":1,\"1276\":1,\"1575\":1}}],[\"举例来说就是\",{\"1\":{\"1474\":1}}],[\"举例来说\",{\"1\":{\"118\":1,\"172\":1,\"185\":1,\"354\":1,\"526\":1,\"1133\":1,\"1169\":1}}],[\"举例而言\",{\"1\":{\"11\":1,\"261\":1,\"418\":2,\"431\":1,\"1169\":2}}],[\"会出现对\",{\"1\":{\"1540\":1}}],[\"会在每个\",{\"1\":{\"1529\":1}}],[\"会在堆上为其分配内存\",{\"1\":{\"1383\":1}}],[\"会将初始化函数扔掉\",{\"1\":{\"1553\":1}}],[\"会将整个\",{\"1\":{\"1528\":1}}],[\"会将数据拷贝到对应的目录\",{\"1\":{\"959\":1}}],[\"会将数据表分为\",{\"1\":{\"814\":1}}],[\"会引起数据访问冲突和不一致性\",{\"1\":{\"1526\":1}}],[\"会禁止本地中断的传递\",{\"1\":{\"1517\":1}}],[\"会执行\",{\"1\":{\"1516\":1}}],[\"会执行一次区域传送\",{\"1\":{\"997\":1}}],[\"会创建一个页表\",{\"1\":{\"1484\":1}}],[\"会解答疑问\",{\"1\":{\"1388\":1}}],[\"会把\",{\"1\":{\"1380\":1}}],[\"会回收那些堆中没有被\",{\"1\":{\"1380\":1}}],[\"会通知\",{\"1\":{\"1374\":2}}],[\"会负责创建\",{\"1\":{\"1355\":1}}],[\"会经过\",{\"1\":{\"1333\":1}}],[\"会唤醒\",{\"1\":{\"1317\":1}}],[\"会调用tick\",{\"1\":{\"1542\":1}}],[\"会调用rcu\",{\"1\":{\"1524\":1}}],[\"会调用到\",{\"1\":{\"1381\":1,\"1515\":1}}],[\"会调用到其他的逻辑\",{\"1\":{\"1327\":1}}],[\"会调用后者\",{\"1\":{\"1333\":1}}],[\"会调用\",{\"1\":{\"1308\":1,\"1365\":1,\"1542\":1}}],[\"会调用父类的\",{\"1\":{\"425\":1}}],[\"会先去调用\",{\"1\":{\"1307\":1}}],[\"会失败\",{\"1\":{\"1226\":1}}],[\"会存在树高增长过快的问题\",{\"1\":{\"1169\":1}}],[\"会生成标注文件对应的txt文件\",{\"1\":{\"1162\":1}}],[\"会设置置信度阈值\",{\"1\":{\"1157\":1}}],[\"会看到提示\",{\"1\":{\"1145\":1}}],[\"会对\",{\"1\":{\"1024\":1}}],[\"会牺牲其他尺度下的特征\",{\"1\":{\"1022\":1}}],[\"会牺牲平台无关性和代码质量\",{\"1\":{\"654\":1}}],[\"会产生时区偏差\",{\"1\":{\"1113\":1}}],[\"会产生大量重复波前\",{\"1\":{\"1019\":1}}],[\"会产生一些错误\",{\"1\":{\"960\":1}}],[\"会产生一个预测值\",{\"1\":{\"593\":1}}],[\"会进入\",{\"1\":{\"984\":1,\"1313\":1}}],[\"会选择较小的一方的\",{\"1\":{\"980\":1}}],[\"会使用读缓冲区和写缓冲区\",{\"1\":{\"962\":1}}],[\"会使用两个端口映射到宿主机上面\",{\"1\":{\"612\":1}}],[\"会阻塞\",{\"1\":{\"956\":1}}],[\"会一直返回\",{\"1\":{\"956\":1}}],[\"会话层\",{\"1\":{\"977\":1}}],[\"会话缓存\",{\"1\":{\"828\":1}}],[\"会话级\",{\"1\":{\"379\":1}}],[\"会采用一些策略\",{\"1\":{\"827\":1}}],[\"会返回一次\",{\"1\":{\"956\":1}}],[\"会返回几个进程\",{\"1\":{\"738\":1}}],[\"会返回迭代器\",{\"1\":{\"294\":1}}],[\"会遇到模块的依赖性问题\",{\"1\":{\"717\":1}}],[\"会以跳转语句或者\",{\"1\":{\"691\":1}}],[\"会发生错误\",{\"1\":{\"658\":1}}],[\"会提示配置密码\",{\"1\":{\"612\":1}}],[\"会被添加进去\",{\"1\":{\"1607\":1}}],[\"会被分段发送\",{\"1\":{\"980\":1}}],[\"会被替换掉\",{\"1\":{\"559\":1}}],[\"会被更新\",{\"1\":{\"559\":1}}],[\"会被保留在\",{\"1\":{\"550\":1}}],[\"会要求关键路径尽可能短\",{\"1\":{\"552\":1}}],[\"会读入半个字长\",{\"1\":{\"528\":1}}],[\"会指定一个函数用于元素的比较\",{\"1\":{\"453\":1}}],[\"会计算出一个方法解析顺序\",{\"1\":{\"427\":1}}],[\"会自动调用父类定义的\",{\"1\":{\"424\":1}}],[\"会根据提供的函数对指定序列做映射\",{\"1\":{\"393\":1}}],[\"会输出一个字典\",{\"1\":{\"388\":1}}],[\"会递归查找当前目录下所有以\",{\"1\":{\"372\":1}}],[\"会跳转到一个文件夹下\",{\"1\":{\"336\":1}}],[\"会安装在\",{\"1\":{\"273\":1}}],[\"会导致屏幕状态切换为开启状态\",{\"1\":{\"1269\":1}}],[\"会导致\",{\"1\":{\"1024\":1}}],[\"会导致插值表达式闪烁问题\",{\"1\":{\"934\":1}}],[\"会导致较高的\",{\"1\":{\"549\":1}}],[\"会导致程序消耗尽内存而奔溃\",{\"1\":{\"294\":1}}],[\"会导致整个处理器暂停\",{\"1\":{\"212\":1}}],[\"会导致更高的\",{\"1\":{\"196\":1}}],[\"会造成\",{\"1\":{\"210\":1}}],[\"会有一段较长的逻辑\",{\"1\":{\"1518\":1}}],[\"会有\",{\"1\":{\"204\":1,\"418\":1}}],[\"会得出商为\",{\"1\":{\"184\":1}}],[\"会数组越界\",{\"1\":{\"96\":1}}],[\"会给每个候选项加上其对应的次数\",{\"1\":{\"88\":1}}],[\"会报错\",{\"1\":{\"88\":1}}],[\"会判断sum\",{\"1\":{\"10\":1}}],[\"锁的实现思路基本上是\",{\"1\":{\"833\":1}}],[\"锁的初始数字为\",{\"1\":{\"88\":1}}],[\"锁只能由加锁人解锁\",{\"1\":{\"831\":1}}],[\"锁定\",{\"0\":{\"1269\":1}}],[\"锁定右侧边界\",{\"1\":{\"21\":1}}],[\"锁定左侧边界\",{\"1\":{\"20\":1}}],[\"框架中理解为获取温度的设备\",{\"1\":{\"1590\":1}}],[\"框架概述\",{\"0\":{\"961\":1}}],[\"框架的原理\",{\"1\":{\"269\":1}}],[\"框架\",{\"1\":{\"88\":1,\"869\":1}}],[\"复制\",{\"1\":{\"1492\":1}}],[\"复制整个目录\",{\"1\":{\"1453\":1}}],[\"复制代码\",{\"1\":{\"1102\":1}}],[\"复制当前内核的config文件到linux\",{\"1\":{\"713\":1}}],[\"复制了这份数据的核的这行\",{\"1\":{\"225\":1}}],[\"复合\",{\"1\":{\"605\":1}}],[\"复习一下\",{\"1\":{\"224\":1}}],[\"复位\",{\"1\":{\"88\":1}}],[\"复杂度分析\",{\"1\":{\"56\":1}}],[\"方案已经属于行业内非常优秀的实践案例\",{\"1\":{\"1350\":1}}],[\"方案名\",{\"1\":{\"1236\":1}}],[\"方便我们理解\",{\"1\":{\"1463\":1}}],[\"方便我们的理解\",{\"1\":{\"1461\":1}}],[\"方便我们定制一个类\",{\"1\":{\"428\":1}}],[\"方便快速查权限\",{\"1\":{\"1357\":1}}],[\"方便日后需要的时候进行查阅\",{\"1\":{\"1227\":1}}],[\"方便查阅学习\",{\"1\":{\"477\":1}}],[\"方便观看\",{\"1\":{\"388\":1}}],[\"方便理解\",{\"1\":{\"147\":1,\"255\":1}}],[\"方便理解的方法\",{\"1\":{\"42\":1}}],[\"方便赋值\",{\"1\":{\"88\":1}}],[\"方法相关的处理流程\",{\"1\":{\"1392\":1}}],[\"方法对应的\",{\"1\":{\"1333\":1}}],[\"方法对应起来了\",{\"1\":{\"706\":1,\"1402\":1}}],[\"方法中的\",{\"1\":{\"1333\":1}}],[\"方法最终调用\",{\"1\":{\"1296\":1}}],[\"方法提交的数据大小长度并没有限制\",{\"1\":{\"998\":1}}],[\"方法进行依赖注入的时候产生的循环依赖\",{\"1\":{\"881\":2}}],[\"方法创建\",{\"1\":{\"704\":1,\"1293\":1,\"1399\":1}}],[\"方法调用栈\",{\"1\":{\"667\":1}}],[\"方法信息\",{\"1\":{\"665\":1}}],[\"方法元数据\",{\"1\":{\"664\":1}}],[\"方法为\",{\"1\":{\"460\":1}}],[\"方法用于得到某个\",{\"1\":{\"453\":1}}],[\"方法不会被调用\",{\"1\":{\"432\":1}}],[\"方法共享同名的参数\",{\"1\":{\"432\":1}}],[\"方法始终被调用了\",{\"1\":{\"431\":1}}],[\"方法来实现\",{\"1\":{\"431\":1}}],[\"方法来返回一个带有\",{\"1\":{\"420\":1}}],[\"方法再对该实例\",{\"1\":{\"431\":1}}],[\"方法就默认被调用\",{\"1\":{\"430\":1}}],[\"方法就不会被执行\",{\"1\":{\"425\":1}}],[\"方法将自动被调用\",{\"1\":{\"430\":1}}],[\"方法如果返回\",{\"1\":{\"430\":1}}],[\"方法可以对实例属性进行初始化\",{\"1\":{\"428\":1}}],[\"方法吗\",{\"1\":{\"425\":1}}],[\"方法解析顺序\",{\"1\":{\"424\":1}}],[\"方法的长度限制\",{\"1\":{\"998\":1}}],[\"方法的一次调用结束\",{\"1\":{\"667\":1}}],[\"方法的对象\",{\"1\":{\"420\":1}}],[\"方法的第一个参数常常被命名为\",{\"1\":{\"419\":1}}],[\"方法的特殊之处就在于实例对象会作为函数的第一个参数被传入\",{\"1\":{\"419\":1}}],[\"方法的\",{\"1\":{\"293\":1}}],[\"方法\",{\"0\":{\"1135\":1},\"1\":{\"88\":1,\"147\":1,\"392\":1,\"421\":2,\"425\":2,\"430\":1,\"431\":2,\"435\":1,\"460\":1,\"696\":1,\"702\":1,\"703\":1,\"705\":1,\"764\":1,\"827\":1,\"933\":1,\"1293\":1,\"1296\":1,\"1320\":2,\"1328\":1,\"1332\":1,\"1333\":4,\"1396\":1,\"1400\":1}}],[\"种基本状态\",{\"1\":{\"736\":1}}],[\"种\",{\"1\":{\"732\":1,\"825\":1,\"1562\":1}}],[\"种方法让最终目标和为\",{\"1\":{\"124\":1}}],[\"种下一个状态中的每一个也是这样的结构\",{\"1\":{\"88\":1}}],[\"种下一个状态\",{\"1\":{\"88\":2}}],[\"种转动的可能\",{\"1\":{\"88\":1}}],[\"我一直使用\",{\"1\":{\"1469\":1}}],[\"我是这么写的\",{\"1\":{\"1469\":1}}],[\"我是没有想到的\",{\"1\":{\"92\":1}}],[\"我调用了\",{\"1\":{\"1469\":1}}],[\"我之前使用了\",{\"1\":{\"1424\":1}}],[\"我之前想不明白的是\",{\"1\":{\"205\":1}}],[\"我的简单理解就是\",{\"1\":{\"1388\":1}}],[\"我的论文题目是融合视觉的wifi室内定位算法\",{\"1\":{\"1012\":1}}],[\"我给配置读写权限\",{\"1\":{\"1355\":1}}],[\"我在遇到\",{\"1\":{\"1469\":1}}],[\"我在此引用作者的\",{\"1\":{\"1355\":1}}],[\"我在源码中未找到其定义\",{\"1\":{\"706\":1,\"1403\":1}}],[\"我认为这是最正常与自然的处理\",{\"1\":{\"1157\":1}}],[\"我需要写一个\",{\"1\":{\"1042\":1}}],[\"我希望自己能够静下心来\",{\"1\":{\"1041\":1}}],[\"我叫陈惟高\",{\"1\":{\"1012\":1}}],[\"我个人的理解就是\",{\"1\":{\"688\":1}}],[\"我只是使用了\",{\"1\":{\"558\":1}}],[\"我猜测可能是因为使用了饱和计数器的缘故\",{\"1\":{\"558\":1}}],[\"我真的是个猪脑子\",{\"1\":{\"478\":1}}],[\"我发现其并不能很好地适用于所有的并行场景\",{\"1\":{\"289\":1}}],[\"我信任了别人\",{\"1\":{\"87\":1}}],[\"我们为了方便理解\",{\"1\":{\"1605\":1}}],[\"我们去掉原生代码中的注释信息\",{\"1\":{\"1591\":1}}],[\"我们去除了一些复杂细节\",{\"1\":{\"1518\":1}}],[\"我们列举并分析其结构组成\",{\"1\":{\"1590\":1}}],[\"我们列举几个\",{\"1\":{\"508\":1}}],[\"我们再分析一下源码\",{\"1\":{\"1607\":1}}],[\"我们再对其进行一个归类总结\",{\"1\":{\"1576\":1}}],[\"我们再仔细看看第\",{\"1\":{\"289\":1}}],[\"我们拿\",{\"1\":{\"1575\":1}}],[\"我们拿一个举例\",{\"1\":{\"1570\":1}}],[\"我们拿容量去定义\",{\"1\":{\"118\":1}}],[\"我们简单研究一下内核的\",{\"1\":{\"1560\":1}}],[\"我们简单观察就可以发现\",{\"1\":{\"692\":1}}],[\"我们江\",{\"1\":{\"1552\":1}}],[\"我们这么调用\",{\"1\":{\"1552\":1}}],[\"我们这个函数实现大致可以概括如下\",{\"1\":{\"1573\":1}}],[\"我们这个\",{\"1\":{\"1440\":1}}],[\"我们继续看其实现\",{\"1\":{\"1542\":1}}],[\"我们本小节的主角函数\",{\"1\":{\"1542\":1}}],[\"我们结合这个函数的指针来看\",{\"1\":{\"1573\":1}}],[\"我们结合\",{\"1\":{\"1470\":1}}],[\"我们结合一个\",{\"1\":{\"537\":1}}],[\"我们来看代码\",{\"1\":{\"1528\":1}}],[\"我们来看\",{\"1\":{\"1469\":1}}],[\"我们参考下表\",{\"1\":{\"1464\":1}}],[\"我们通常不会在头文件中去定义函数\",{\"1\":{\"1449\":1}}],[\"我们通过\",{\"1\":{\"1307\":1}}],[\"我们通过设定计算机视觉模型预测图片中的人类活动很好地解决了这个挑战\",{\"1\":{\"1136\":1}}],[\"我们通过标定板和本文提到的基于单应矩阵的相机标定算法得到了相机的内参和外参矩阵\",{\"1\":{\"1012\":1}}],[\"我们通过一系列的技术手段让程序员产生这种错觉\",{\"1\":{\"190\":1}}],[\"我们增加了\",{\"1\":{\"1448\":1}}],[\"我们会使用\",{\"1\":{\"1517\":1}}],[\"我们会自己写头文件\",{\"1\":{\"1446\":1}}],[\"我们会生成一个这样的变量供我们使用\",{\"1\":{\"1426\":1}}],[\"我们执行\",{\"1\":{\"1445\":1}}],[\"我们执行完后\",{\"1\":{\"1424\":1}}],[\"我们实际生产中遇到的结构一般都不会这么简单\",{\"1\":{\"1440\":1}}],[\"我们暂且把其叫做\",{\"1\":{\"1440\":1}}],[\"我们暂时不对其进行研究\",{\"1\":{\"562\":1}}],[\"我们引用原文\",{\"1\":{\"1425\":1}}],[\"我们引用下面的图来进行参考说明\",{\"1\":{\"1326\":1}}],[\"我们涉及到了使用\",{\"1\":{\"1424\":1}}],[\"我们只允许新分配的对象在\",{\"1\":{\"1389\":1}}],[\"我们只想执行指定的测试函数\",{\"1\":{\"372\":1}}],[\"我们禁止\",{\"1\":{\"1389\":1}}],[\"我们重点先研究一下\",{\"1\":{\"1386\":1}}],[\"我们提到了一个对象\",{\"1\":{\"1381\":1}}],[\"我们初步研究分析了一下三种进程间通信的方式\",{\"1\":{\"1359\":1}}],[\"我们初始化的方式要对比定义来看比较直观\",{\"1\":{\"1575\":1}}],[\"我们初始化队列为\",{\"1\":{\"88\":1}}],[\"我们初始化每个课程\",{\"1\":{\"86\":1}}],[\"我们截取论文中的一张图片进行简单介绍\",{\"1\":{\"1355\":1}}],[\"我们发现\",{\"1\":{\"1353\":1}}],[\"我们发现遍历的顺序是和层级有关的\",{\"1\":{\"61\":1}}],[\"我们先给出调用关系图\",{\"1\":{\"1542\":1}}],[\"我们先准备一个很简单的\",{\"1\":{\"1445\":1}}],[\"我们先简单说明一下\",{\"1\":{\"1333\":1}}],[\"我们先对大体上的函数调用栈进行一个简单的示意图总结\",{\"1\":{\"1514\":1}}],[\"我们先对\",{\"1\":{\"1310\":1}}],[\"我们留到\",{\"1\":{\"1329\":1}}],[\"我们所说的\",{\"1\":{\"1328\":1}}],[\"我们接下来对这些协议进行一一分析\",{\"1\":{\"1310\":1}}],[\"我们接下来研究一下\",{\"1\":{\"601\":1}}],[\"我们下个章节进行详细的分析\",{\"1\":{\"1296\":1}}],[\"我们下面研究这个函数\",{\"1\":{\"1295\":1}}],[\"我们可能需要\",{\"1\":{\"1286\":1}}],[\"我们可以调用以下的初始化方法\",{\"1\":{\"1575\":1}}],[\"我们可以这么做\",{\"1\":{\"1563\":1}}],[\"我们可以掌握\",{\"1\":{\"1443\":1}}],[\"我们可以参考这个\",{\"1\":{\"1440\":1}}],[\"我们可以写一个简单的例子\",{\"1\":{\"1440\":1}}],[\"我们可以写出大致的状态转移方程\",{\"1\":{\"102\":1}}],[\"我们可以指定构建工具进行构建\",{\"1\":{\"1432\":1}}],[\"我们可以指定\",{\"1\":{\"1427\":1}}],[\"我们可以设置\",{\"1\":{\"1416\":1}}],[\"我们可以根据上层传入的\",{\"1\":{\"1307\":1}}],[\"我们可以根据中序遍历的应用题目\",{\"1\":{\"46\":1}}],[\"我们可以通过在日志中查找是否有这个对应的打印来确定启动的时候是否调用到了这个流程\",{\"1\":{\"707\":1,\"1405\":1}}],[\"我们可以给\",{\"1\":{\"659\":1}}],[\"我们可以求助于\",{\"1\":{\"655\":1}}],[\"我们可以在脚本中使用判断\",{\"1\":{\"1269\":1}}],[\"我们可以在流水线很早期的时候\",{\"1\":{\"599\":1}}],[\"我们可以在每次遍历之后\",{\"1\":{\"60\":1}}],[\"我们可以对其进行限制\",{\"1\":{\"592\":1}}],[\"我们可以容忍大表或者复杂计算\",{\"1\":{\"552\":1}}],[\"我们可以看出来\",{\"1\":{\"1445\":1}}],[\"我们可以看出生成\",{\"1\":{\"1440\":1}}],[\"我们可以看出\",{\"1\":{\"550\":1}}],[\"我们可以看到其地址是\",{\"1\":{\"1463\":1}}],[\"我们可以看到打印\",{\"1\":{\"1428\":1}}],[\"我们可以看到创建了一个\",{\"1\":{\"703\":1}}],[\"我们可以看到\",{\"1\":{\"89\":1,\"426\":1,\"673\":1,\"681\":1,\"1300\":1,\"1301\":1,\"1307\":1,\"1330\":1,\"1515\":1,\"1557\":1,\"1567\":1}}],[\"我们可以观察到\",{\"1\":{\"431\":1}}],[\"我们可以只使用\",{\"1\":{\"430\":1}}],[\"我们可以经常看到以双下划线\",{\"1\":{\"428\":1}}],[\"我们可以使用变量\",{\"1\":{\"1383\":1}}],[\"我们可以使用cnn实现更高效的滑动窗口方法\",{\"1\":{\"1153\":1}}],[\"我们可以使用多种方式来实现\",{\"1\":{\"432\":1}}],[\"我们可以使用固件做任何事情\",{\"1\":{\"377\":1}}],[\"我们可以使用\",{\"1\":{\"345\":1,\"1429\":1}}],[\"我们可以使用中序遍历的方法来求解这个问题\",{\"1\":{\"64\":1}}],[\"我们可以同一套代码在不同的平台使用不同的日志配置\",{\"1\":{\"326\":1}}],[\"我们可以把gil看作是\",{\"1\":{\"277\":1}}],[\"我们可以把这些组合和\",{\"1\":{\"88\":1}}],[\"我们可以进行分析\",{\"1\":{\"1464\":1}}],[\"我们可以进行\",{\"1\":{\"274\":1}}],[\"我们可以获得一个启发\",{\"1\":{\"210\":1}}],[\"我们可以放心交换\",{\"1\":{\"169\":1}}],[\"我们可以将第二个\",{\"1\":{\"164\":1}}],[\"我们可以将最前面的\",{\"1\":{\"164\":1}}],[\"我们可以套公式写出一维\",{\"1\":{\"118\":1}}],[\"我们可以理解为\",{\"1\":{\"118\":1}}],[\"我们可以用看一下哪些类实际上在\",{\"1\":{\"660\":1}}],[\"我们可以用\",{\"1\":{\"104\":1}}],[\"我们可以定义\",{\"1\":{\"88\":1}}],[\"我们可以举例说\",{\"1\":{\"46\":1}}],[\"我们打开该\",{\"1\":{\"1275\":1}}],[\"我们开启屏幕再解锁\",{\"1\":{\"1269\":1}}],[\"我们同步最新改动并提交我们的改动\",{\"1\":{\"1239\":1}}],[\"我们采用了100帧的编码rf无线信号\",{\"1\":{\"1138\":1}}],[\"我们采用帧序列作为输入\",{\"1\":{\"1137\":1}}],[\"我们采取一个隐藏一些传输时间的方法来减少未命中的惩罚\",{\"1\":{\"211\":1}}],[\"我们设置了\",{\"1\":{\"1428\":1}}],[\"我们设置了两个变量\",{\"1\":{\"1231\":1}}],[\"我们设置初始状态为\",{\"1\":{\"91\":1}}],[\"我们设计的神经网络聚合了rf热量图中多张快照中的信息以便于它能够很好地处理不同的支干和动态地对身体的移动进行建模\",{\"1\":{\"1137\":1}}],[\"我们设计了一个基于teacher\",{\"1\":{\"1136\":1}}],[\"我们和中世纪的铁匠\",{\"1\":{\"1030\":1}}],[\"我们观察图中的相位偏差可知\",{\"1\":{\"1024\":1}}],[\"我们分别给出一个\",{\"1\":{\"1327\":1}}],[\"我们分别列举了视距路径和非视距路径的聚类结果\",{\"1\":{\"1012\":1}}],[\"我们分类\",{\"1\":{\"571\":1}}],[\"我们共选取了5000\",{\"1\":{\"1012\":1}}],[\"我们称它的第一个参数为\",{\"1\":{\"952\":1}}],[\"我们称之为\",{\"1\":{\"377\":1}}],[\"我们后续再进行研究\",{\"1\":{\"707\":1,\"1405\":1}}],[\"我们搜索全局的register\",{\"1\":{\"707\":1,\"1405\":1}}],[\"我们进行下一章节的旅程\",{\"1\":{\"706\":1,\"1403\":1}}],[\"我们进行分析\",{\"1\":{\"89\":1}}],[\"我们看一下\",{\"1\":{\"1591\":1}}],[\"我们看接下来的\",{\"1\":{\"1299\":1}}],[\"我们看\",{\"1\":{\"692\":1}}],[\"我们直接使用一个对象数组\",{\"1\":{\"682\":1}}],[\"我们现在来研究如何使用\",{\"1\":{\"1575\":1}}],[\"我们现在来逐一分析这些代码\",{\"1\":{\"702\":1}}],[\"我们现在soc上用的是不可擦除的\",{\"1\":{\"1501\":1}}],[\"我们现在需要联系\",{\"1\":{\"1381\":1}}],[\"我们现在可以做一些更加深入的研究\",{\"1\":{\"681\":1}}],[\"我们现在不研究这个\",{\"1\":{\"200\":1}}],[\"我们编写一个简单的类\",{\"1\":{\"681\":1}}],[\"我们以后在阅读调用链相关的源码的时候\",{\"1\":{\"1580\":1}}],[\"我们以\",{\"1\":{\"674\":1}}],[\"我们想对\",{\"1\":{\"1326\":1}}],[\"我们想要得到\",{\"1\":{\"671\":1}}],[\"我们想控制实例的创建过程\",{\"1\":{\"431\":1}}],[\"我们说的一般的\",{\"1\":{\"667\":1}}],[\"我们思考一个问题\",{\"1\":{\"657\":1}}],[\"我们思考满足购物清单\",{\"1\":{\"102\":1}}],[\"我们认为所有的预测器都可以瞬间预测\",{\"1\":{\"562\":1}}],[\"我们考虑一个预测器\",{\"1\":{\"562\":1}}],[\"我们希望神经网络在时间和空间上的传播都保持稳定的不变性\",{\"1\":{\"1137\":1}}],[\"我们希望\",{\"1\":{\"559\":1}}],[\"我们希望能同时实现父类的功能\",{\"1\":{\"427\":1}}],[\"我们如何定位函数的地址\",{\"1\":{\"1463\":1}}],[\"我们如何保证预测的正确性呢\",{\"1\":{\"543\":1}}],[\"我们如果需要验证是否找到了这个包\",{\"1\":{\"1426\":1}}],[\"我们如果要选择基于寄存器的虚拟机的时候\",{\"1\":{\"687\":1}}],[\"我们如果在创建实例的时候加入判断\",{\"1\":{\"432\":1}}],[\"我们如果购买大礼包的时候\",{\"1\":{\"102\":1}}],[\"我们\",{\"1\":{\"537\":1}}],[\"我们总结了一些常见的跳转指令的集合\",{\"1\":{\"517\":1}}],[\"我们总共有\",{\"1\":{\"502\":1}}],[\"我们将其改造成\",{\"1\":{\"1445\":1}}],[\"我们将时空间卷积层用极少的步长卷积编码人的动作\",{\"1\":{\"1138\":1}}],[\"我们将结果转化成有符号数\",{\"1\":{\"982\":1}}],[\"我们将这两个缓冲区都\",{\"1\":{\"962\":1}}],[\"我们将分别研究\",{\"1\":{\"675\":1}}],[\"我们将\",{\"1\":{\"504\":1,\"1596\":1}}],[\"我们仔细研究上述的例子\",{\"1\":{\"502\":1}}],[\"我们仔细研究一下\",{\"1\":{\"486\":1}}],[\"我们选择\",{\"1\":{\"479\":1}}],[\"我们遍历字符串\",{\"1\":{\"465\":1}}],[\"我们一般是对解释器的执行速度有所要求\",{\"1\":{\"687\":1}}],[\"我们一般使用\",{\"1\":{\"435\":1}}],[\"我们一定要在队列中先添加左节点\",{\"1\":{\"61\":1}}],[\"我们常用的定义类的写法\",{\"1\":{\"432\":1}}],[\"我们不难看出\",{\"1\":{\"691\":2,\"1441\":1,\"1553\":1}}],[\"我们不需要重载\",{\"1\":{\"431\":1}}],[\"我们不能进入\",{\"1\":{\"84\":1}}],[\"我们就拥有通知链了\",{\"1\":{\"1575\":1}}],[\"我们就可以认为这个属性段在文件中是不存在的\",{\"1\":{\"1462\":1}}],[\"我们就可以解决了\",{\"1\":{\"499\":1}}],[\"我们就将\",{\"1\":{\"1307\":1}}],[\"我们就直接点解锁\",{\"1\":{\"1269\":1}}],[\"我们就把这个条目刷新到\",{\"1\":{\"602\":1}}],[\"我们就增加置信值\",{\"1\":{\"584\":1}}],[\"我们就需要调用父类的方法了\",{\"1\":{\"427\":1}}],[\"我们就进行了统一\",{\"1\":{\"118\":1}}],[\"我们当然可以把它写到类外面\",{\"1\":{\"422\":1}}],[\"我们有必要研究一下相关的工作\",{\"1\":{\"545\":1}}],[\"我们有时候可能只需要获取某一列的数据\",{\"1\":{\"331\":1}}],[\"我们有一个函数\",{\"1\":{\"288\":1}}],[\"我们有的时候可以递归函数本身\",{\"1\":{\"73\":1}}],[\"我们传入了\",{\"1\":{\"285\":1,\"329\":1}}],[\"我们此时就可以使用新版的\",{\"1\":{\"275\":1}}],[\"我们自己是可以实现这样的机制的\",{\"1\":{\"252\":1}}],[\"我们都是多文件夹的\",{\"1\":{\"1448\":1}}],[\"我们都要对\",{\"1\":{\"658\":1}}],[\"我们都需要把数据\",{\"1\":{\"252\":1}}],[\"我们都保证了把同一层的元素进行迭代\",{\"1\":{\"59\":1}}],[\"我们上面说过\",{\"1\":{\"1353\":1}}],[\"我们上面说\",{\"1\":{\"252\":1}}],[\"我们做一个简单的总结\",{\"1\":{\"245\":1}}],[\"我们讨论\",{\"1\":{\"245\":1}}],[\"我们也无从得知\",{\"1\":{\"243\":1}}],[\"我们也可以根据这个函数来获取范围行的元素\",{\"1\":{\"355\":1}}],[\"我们也可以使用均方误差\",{\"1\":{\"1212\":1}}],[\"我们也可以使用固定长度的不\",{\"1\":{\"314\":1}}],[\"我们也可以使用\",{\"1\":{\"287\":1,\"1445\":1}}],[\"我们也可以从背包的容量遍历到当前要放的物品的重量停止\",{\"1\":{\"118\":1}}],[\"我们也可以不使用辅助函数\",{\"1\":{\"56\":1}}],[\"我们必须确保管道中的指令的重叠不会产生这种冲突\",{\"1\":{\"236\":1}}],[\"我们长这样\",{\"1\":{\"198\":1}}],[\"我们取了虚拟地址的\",{\"1\":{\"196\":1}}],[\"我们明白\",{\"1\":{\"195\":1}}],[\"我们使用mope的方法对于上述密文进行编码\",{\"1\":{\"1169\":1}}],[\"我们使用的是ubuntu\",{\"1\":{\"1161\":1}}],[\"我们使用的最多\",{\"1\":{\"213\":1}}],[\"我们使用一个简单的\",{\"1\":{\"664\":1}}],[\"我们使用双指针\",{\"1\":{\"496\":1}}],[\"我们使用数据驱动了\",{\"1\":{\"387\":1}}],[\"我们使用空格进行分割\",{\"1\":{\"331\":1}}],[\"我们使用标准的\",{\"1\":{\"325\":1}}],[\"我们使用了这个\",{\"1\":{\"558\":1}}],[\"我们使用了时间戳\",{\"1\":{\"349\":1}}],[\"我们使用了\",{\"1\":{\"196\":1,\"1231\":1,\"1381\":1}}],[\"我们使用\",{\"1\":{\"186\":1,\"422\":1,\"1439\":1,\"1463\":1}}],[\"我们使用二维\",{\"1\":{\"118\":1}}],[\"我们举例说明\",{\"1\":{\"213\":1}}],[\"我们举例一个地址字段来说明这个\",{\"1\":{\"198\":1}}],[\"我们举例\",{\"1\":{\"185\":1}}],[\"我们判断了\",{\"1\":{\"169\":1}}],[\"我们的代码结构可能是这样的\",{\"1\":{\"1449\":1}}],[\"我们的文件结构如下\",{\"1\":{\"1448\":1}}],[\"我们的所有\",{\"1\":{\"1428\":1}}],[\"我们的\",{\"1\":{\"1380\":1,\"1537\":1}}],[\"我们的输入数据以二维度热量图的形式表现\",{\"1\":{\"1134\":1}}],[\"我们的方法是\",{\"1\":{\"499\":1}}],[\"我们的条件是符合的\",{\"1\":{\"169\":1}}],[\"我们的解法如下\",{\"1\":{\"36\":1,\"92\":1}}],[\"我们起始的\",{\"1\":{\"165\":1}}],[\"我们套入了区间求和公式\",{\"1\":{\"165\":1}}],[\"我们套用\",{\"1\":{\"88\":1}}],[\"我们尝试使用数组来维护这个边界\",{\"1\":{\"150\":1}}],[\"我们枚举所有的奇数数组区间\",{\"1\":{\"149\":1}}],[\"我们靠二维\",{\"1\":{\"118\":1}}],[\"我们从源码路径下面果然是看到了\",{\"1\":{\"1586\":1}}],[\"我们从此处开始研究\",{\"1\":{\"1311\":1}}],[\"我们从构造过程开始说明该问题\",{\"1\":{\"1170\":1}}],[\"我们从\",{\"1\":{\"118\":1,\"562\":1}}],[\"我们踩了几个坑\",{\"1\":{\"118\":1}}],[\"我们定义一个变量\",{\"1\":{\"1441\":1}}],[\"我们定义一个\",{\"1\":{\"486\":1}}],[\"我们定义一个比较函数\",{\"1\":{\"185\":1}}],[\"我们定义两个栈\",{\"1\":{\"468\":1}}],[\"我们定义\",{\"1\":{\"118\":1}}],[\"我们定义递归终止条件\",{\"1\":{\"51\":1}}],[\"我们首先分析这个函数的参数\",{\"1\":{\"1573\":1}}],[\"我们首先需要了解这些基础概念\",{\"1\":{\"1438\":1}}],[\"我们首先要会求解经典背包问题\",{\"1\":{\"118\":1}}],[\"我们首先过滤掉无用的状态\",{\"1\":{\"102\":1}}],[\"我们该什么时候使用\",{\"1\":{\"1468\":1}}],[\"我们该怎么合理使用大礼包呢\",{\"1\":{\"102\":1}}],[\"我们该如何保证这个呢\",{\"1\":{\"52\":1}}],[\"我们写记忆化搜索算法的步骤大致为\",{\"1\":{\"100\":1}}],[\"我们找到\",{\"1\":{\"1334\":1}}],[\"我们找到以后把找到的最左边节点的值赋值给\",{\"1\":{\"499\":1}}],[\"我们找到的第一个叶子节点就是最短的\",{\"1\":{\"92\":1}}],[\"我们找到符合条件的数字\",{\"1\":{\"36\":1}}],[\"我们知道\",{\"1\":{\"91\":1,\"205\":1,\"1470\":1}}],[\"我们知道了邻接表\",{\"1\":{\"89\":1}}],[\"我们把书中的表格也引用过来\",{\"1\":{\"1459\":1}}],[\"我们把上章节的例子中的\",{\"1\":{\"1448\":1}}],[\"我们把\",{\"1\":{\"165\":2}}],[\"我们把这个问题理解为一个\",{\"1\":{\"91\":1}}],[\"我们把火柴数量从大到小排列\",{\"1\":{\"15\":1}}],[\"我们解析邻接表\",{\"1\":{\"89\":1}}],[\"我们要使用通知链的话\",{\"1\":{\"1575\":1}}],[\"我们要了解\",{\"1\":{\"1479\":1}}],[\"我们要怎么才能做到预测下一个可能出现的值呢\",{\"1\":{\"573\":1}}],[\"我们要怎么深拷贝这个图呢\",{\"1\":{\"89\":1}}],[\"我们要绕过\",{\"1\":{\"252\":1}}],[\"我们要访问的内容是不是在\",{\"1\":{\"196\":1}}],[\"我们要求解在装更可能多的物品的条件下\",{\"1\":{\"118\":1}}],[\"我们要明白\",{\"1\":{\"89\":1}}],[\"我们维护一个\",{\"1\":{\"86\":1}}],[\"我们整理思路如下\",{\"1\":{\"86\":1}}],[\"我们用一张图来进行表述\",{\"1\":{\"1311\":1}}],[\"我们用一个匹配来表示\",{\"1\":{\"86\":1}}],[\"我们用\",{\"1\":{\"59\":1,\"102\":1}}],[\"我们根据二叉搜索树策略对其进行构造\",{\"1\":{\"1170\":1}}],[\"我们根据这个排序对这\",{\"1\":{\"583\":1}}],[\"我们根据\",{\"1\":{\"53\":1}}],[\"我们根据题目要求分析得知\",{\"1\":{\"34\":1}}],[\"我们得出一个简单的规律\",{\"1\":{\"52\":1}}],[\"我们对这个版本的参数也进行分析\",{\"1\":{\"1567\":1}}],[\"我们对这张图片进行分析\",{\"1\":{\"575\":1}}],[\"我们对结构体的定义发生了变化\",{\"1\":{\"1567\":1}}],[\"我们对参数进行分析\",{\"1\":{\"1567\":1}}],[\"我们对上面存在四个\",{\"1\":{\"1424\":1}}],[\"我们对上述代码进行一个简单的阐述\",{\"1\":{\"34\":1}}],[\"我们对于理想情况下\",{\"1\":{\"1170\":1}}],[\"我们对此也进行研究\",{\"1\":{\"600\":1}}],[\"我们对预测的值进行验证\",{\"1\":{\"599\":1}}],[\"我们对其进行排序\",{\"1\":{\"172\":1}}],[\"我们对题目进行分析可以发现遍历顺序和层级的关系\",{\"1\":{\"61\":1}}],[\"我们对\",{\"1\":{\"51\":1,\"422\":1,\"706\":1,\"1402\":1,\"1437\":1}}],[\"我们第一趟的时候\",{\"1\":{\"46\":1}}],[\"我们还有一个卸载函数\",{\"1\":{\"1572\":1}}],[\"我们还有一种很\",{\"1\":{\"42\":1}}],[\"我们还会从各个角度深入分析\",{\"1\":{\"1307\":1}}],[\"我们还在coco数据集上对indetectnet进行了测试\",{\"1\":{\"1012\":1}}],[\"我们还使用了一系列有效的数据扩充操作\",{\"1\":{\"1012\":1}}],[\"我们还是需要根据分类进行不同的决策\",{\"1\":{\"602\":1}}],[\"我们还是有限使用\",{\"1\":{\"356\":1}}],[\"我们还可以给该实例绑定任意新的属性和方法\",{\"1\":{\"436\":1}}],[\"我们还可以通过\",{\"1\":{\"433\":1}}],[\"我们还可以使用较为简单的方式来进行理解\",{\"1\":{\"198\":1}}],[\"我们还需要往通知链上面注册\",{\"1\":{\"1576\":1}}],[\"我们还需要对比一些\",{\"1\":{\"562\":1}}],[\"我们还需要考虑到几种特殊场景的用例\",{\"1\":{\"88\":1}}],[\"我们还需要写一个辅助函数\",{\"1\":{\"88\":1}}],[\"我们还能给出一个暴力的\",{\"1\":{\"15\":1}}],[\"我们假设存在一个\",{\"1\":{\"36\":1}}],[\"我们需要修改\",{\"1\":{\"1448\":1}}],[\"我们需要进行查找\",{\"1\":{\"1426\":1}}],[\"我们需要了解到\",{\"1\":{\"1562\":1,\"1592\":1}}],[\"我们需要了解\",{\"1\":{\"1381\":1}}],[\"我们需要分析一下这个重要函数的源码\",{\"1\":{\"1308\":1}}],[\"我们需要处理\",{\"1\":{\"1301\":1}}],[\"我们需要获取到\",{\"1\":{\"1278\":1}}],[\"我们需要一个\",{\"1\":{\"1240\":1,\"1438\":1}}],[\"我们需要慎重选择nms算法\",{\"1\":{\"1157\":1}}],[\"我们需要研究一下\",{\"1\":{\"672\":1}}],[\"我们需要从文章中找到以下问题的答案\",{\"1\":{\"544\":1}}],[\"我们需要自己创建一个\",{\"1\":{\"480\":1}}],[\"我们需要知道\",{\"1\":{\"205\":1}}],[\"我们需要和所有的\",{\"1\":{\"196\":1}}],[\"我们需要把\",{\"1\":{\"185\":1}}],[\"我们需要把所有的状态转化点都列举出来\",{\"1\":{\"91\":1}}],[\"我们需要对这个题目进行更加深入的理解\",{\"1\":{\"185\":1}}],[\"我们需要对结果进行去重\",{\"1\":{\"13\":1}}],[\"我们需要在每次判断的时候判断下是否越界\",{\"1\":{\"169\":1}}],[\"我们需要重点理解一下后面两种情况\",{\"1\":{\"91\":1}}],[\"我们需要使用常量\",{\"1\":{\"1212\":1}}],[\"我们需要使用\",{\"1\":{\"89\":1,\"204\":1}}],[\"我们需要加深对\",{\"1\":{\"46\":1}}],[\"我们需要找到\",{\"1\":{\"36\":1}}],[\"我们计算出这个时间\",{\"1\":{\"34\":1}}],[\"我们则继续遍历其他的桶\",{\"1\":{\"15\":1}}],[\"我们给\",{\"1\":{\"1380\":1}}],[\"我们给出一个简单的类图\",{\"1\":{\"1590\":1}}],[\"我们给出来一个示例的\",{\"1\":{\"1463\":1}}],[\"我们给出迭代的解法如下所示\",{\"1\":{\"486\":1}}],[\"我们给出这个含有子目录的文件结构\",{\"1\":{\"1434\":1}}],[\"我们给出这个问题的\",{\"1\":{\"79\":1,\"80\":1}}],[\"我们给出这个题目的求解\",{\"1\":{\"15\":1}}],[\"我们给了四个桶\",{\"1\":{\"15\":1}}],[\"我们在使用的时候\",{\"1\":{\"1575\":1}}],[\"我们在设计自己的通知链系统可以用第三个入参实现在通知系统和被通知系统之间数据的传递\",{\"1\":{\"1567\":1}}],[\"我们在上文说过\",{\"1\":{\"1544\":1}}],[\"我们在上一步将\",{\"1\":{\"658\":1}}],[\"我们在后文进行分析\",{\"1\":{\"1542\":1}}],[\"我们在后文需要进行研究\",{\"1\":{\"1484\":1}}],[\"我们在这边主演研究多个\",{\"1\":{\"1534\":1}}],[\"我们在实际的环境中进行编译\",{\"1\":{\"1443\":1}}],[\"我们在实验室中选取了一块实验区域如图所示\",{\"1\":{\"1012\":1}}],[\"我们在执行完\",{\"1\":{\"1424\":1}}],[\"我们在前文已经进行了研究\",{\"1\":{\"1373\":1}}],[\"我们在知道\",{\"1\":{\"1279\":1}}],[\"我们在part\",{\"1\":{\"1012\":1}}],[\"我们在nyu\",{\"1\":{\"1012\":1}}],[\"我们在voc数据集上对indetectnet进行了测试\",{\"1\":{\"1012\":1}}],[\"我们在类中构造一个数组\",{\"1\":{\"682\":1}}],[\"我们在看汇编的时候有一段这样的代码\",{\"1\":{\"673\":1}}],[\"我们在分析\",{\"1\":{\"657\":1}}],[\"我们在本地只需要连接\",{\"1\":{\"612\":1}}],[\"我们在提到上文的\",{\"1\":{\"602\":1}}],[\"我们在预测的时候\",{\"1\":{\"602\":1}}],[\"我们在训练和预测时候使用的预测器的数量是减少的\",{\"1\":{\"590\":1}}],[\"我们在每个\",{\"1\":{\"562\":1}}],[\"我们在主流程中\",{\"1\":{\"499\":1}}],[\"我们在定义类的时候可以定义属性和方法\",{\"1\":{\"436\":1}}],[\"我们在定义一个类的时候可能会涉及到访问这个类中的私有元素\",{\"1\":{\"408\":1}}],[\"我们在此之前并不知道本地中断是开启还是关闭的\",{\"1\":{\"1517\":1}}],[\"我们在此不进行赘述了\",{\"1\":{\"1356\":1}}],[\"我们在此对其做一个简单的总结\",{\"1\":{\"274\":1}}],[\"我们在此重复研究这张图片\",{\"1\":{\"196\":1}}],[\"我们在时钟周期的前半部分执行寄存器写入\",{\"1\":{\"236\":1}}],[\"我们在指令上已经指定了需要访问的数据大小\",{\"1\":{\"205\":1}}],[\"我们在确定左边界\",{\"1\":{\"160\":1}}],[\"我们在求解\",{\"1\":{\"88\":1}}],[\"我们在外层循环递归的时候从\",{\"1\":{\"77\":1}}],[\"我们在快速排序或者二分查找中如果要计算\",{\"1\":{\"28\":1}}],[\"我们在\",{\"1\":{\"11\":1,\"326\":1,\"360\":1,\"1446\":1,\"1575\":1}}],[\"我们在代码中增加了一段剪枝\",{\"1\":{\"11\":1}}],[\"我们逐步构造更多的候选解\",{\"1\":{\"5\":1}}],[\"把焊上去的\",{\"1\":{\"1501\":1}}],[\"把雇主当做自己软件开发的一个客户\",{\"1\":{\"1030\":1}}],[\"把自己当做一个企业去思考\",{\"1\":{\"1030\":1}}],[\"把自身替换成新的程序\",{\"1\":{\"739\":1}}],[\"把软件开发事业当做生意来看待\",{\"1\":{\"1030\":1}}],[\"把内核目录linux\",{\"1\":{\"712\":1}}],[\"把一个寄存器的内容和另一个寄存器的内容进行按位与操作\",{\"1\":{\"518\":1}}],[\"把这个\",{\"1\":{\"495\":1}}],[\"把这道题目的\",{\"1\":{\"100\":1}}],[\"把所有的结果都放在列表里面\",{\"1\":{\"294\":1}}],[\"把\",{\"1\":{\"268\":1,\"486\":1,\"1607\":1}}],[\"把背包放在外层循环\",{\"1\":{\"136\":1}}],[\"把节点的入度全部初始化为\",{\"1\":{\"86\":1}}],[\"把每一个\",{\"1\":{\"15\":1}}],[\"之所以可以对\",{\"1\":{\"1607\":1}}],[\"之杂谈\",{\"0\":{\"1349\":1}}],[\"之内移动都被视为轻微的运动\",{\"1\":{\"1025\":1}}],[\"之中\",{\"1\":{\"679\":1}}],[\"之旅\",{\"1\":{\"439\":1}}],[\"之前发生的一些事情\",{\"1\":{\"1507\":1}}],[\"之前还会有一个自带的\",{\"1\":{\"728\":1}}],[\"之前完美地传递预测\",{\"1\":{\"562\":1}}],[\"之前写入物理寄存器\",{\"1\":{\"557\":1}}],[\"之前想法是\",{\"1\":{\"478\":1}}],[\"之前被调用的\",{\"1\":{\"431\":1}}],[\"之前的研究成果有通过物体的可见部分推测被遮挡物体的剩余部分的计算机视觉解决方案\",{\"1\":{\"1131\":1}}],[\"之前的很多研究都没有意识到\",{\"1\":{\"547\":1}}],[\"之前的\",{\"1\":{\"303\":1,\"1609\":1}}],[\"之前错误的理解\",{\"1\":{\"196\":1}}],[\"之前\",{\"1\":{\"186\":1,\"552\":1,\"1388\":1}}],[\"之前添加\",{\"1\":{\"124\":2}}],[\"之前我的想法是定义一个全局的\",{\"1\":{\"92\":1}}],[\"之后再进行引用的更新\",{\"1\":{\"1381\":1}}],[\"之后不必再显示地调用虚环境bin文件夹中的命令\",{\"1\":{\"854\":1}}],[\"之后运行python时可以直接运行该项目的bin文件夹中的命令\",{\"1\":{\"854\":1}}],[\"之后的流程可以参考\",{\"1\":{\"1514\":1}}],[\"之后的\",{\"1\":{\"1389\":1}}],[\"之后的10秒开始执行\",{\"1\":{\"844\":1}}],[\"之后的代码属于后处理\",{\"1\":{\"378\":1}}],[\"之后速度是差不多的\",{\"1\":{\"687\":1}}],[\"之后\",{\"1\":{\"86\":1,\"552\":1,\"682\":1,\"1024\":1,\"1388\":1,\"1518\":1}}],[\"之间做映射\",{\"1\":{\"1353\":1}}],[\"之间也有丰富的鉴权机制\",{\"1\":{\"1352\":1}}],[\"之间相交区域面积除以\",{\"1\":{\"1021\":1}}],[\"之间是相互隔离的\",{\"1\":{\"691\":1}}],[\"之间是怎么合作的呢\",{\"1\":{\"603\":1}}],[\"之间的关系\",{\"1\":{\"1024\":1,\"1381\":1}}],[\"之间的关系需要加以理解\",{\"1\":{\"261\":1}}],[\"之间的使用\",{\"1\":{\"601\":1}}],[\"之间的互相调用呢\",{\"1\":{\"441\":1}}],[\"之间进行数据缓存管理的一级存储层次\",{\"1\":{\"253\":1}}],[\"之间引入流水线寄存器来实现的\",{\"1\":{\"236\":1}}],[\"之间\",{\"1\":{\"20\":1,\"34\":1,\"562\":2}}],[\"正确性\",{\"1\":{\"1584\":1}}],[\"正确的做法是\",{\"1\":{\"478\":1}}],[\"正确的课程顺序为\",{\"1\":{\"86\":1}}],[\"正在被\",{\"1\":{\"1381\":1}}],[\"正数\",{\"1\":{\"738\":1}}],[\"正常而言\",{\"1\":{\"1439\":1}}],[\"正常的调用如下所示\",{\"1\":{\"426\":1}}],[\"正常循环\",{\"1\":{\"130\":1,\"132\":1}}],[\"正则表达式30分钟入门教程\",{\"1\":{\"411\":1}}],[\"正则表达式\",{\"0\":{\"411\":1}}],[\"正着循环\",{\"1\":{\"130\":1,\"132\":1,\"136\":1,\"138\":1}}],[\"正好是要查找的值的情况\",{\"1\":{\"22\":1}}],[\"例\",{\"1\":{\"854\":1}}],[\"例子02\",{\"0\":{\"1449\":1}}],[\"例子01\",{\"0\":{\"1448\":1}}],[\"例子\",{\"1\":{\"763\":1,\"955\":1,\"1278\":1,\"1393\":1,\"1413\":1}}],[\"例子比较长\",{\"1\":{\"511\":1}}],[\"例子如上面例子\",{\"1\":{\"431\":1}}],[\"例子为第\",{\"1\":{\"357\":1}}],[\"例如头部\",{\"1\":{\"1131\":1}}],[\"例如图\",{\"1\":{\"1021\":2}}],[\"例如读缓冲区的\",{\"1\":{\"956\":1}}],[\"例如add\",{\"1\":{\"844\":1}}],[\"例如每个方法的字节码最多65535字节\",{\"1\":{\"688\":1}}],[\"例如我们有一个\",{\"1\":{\"657\":1}}],[\"例如可以限制写入预测需要的额外寄存器数量\",{\"1\":{\"557\":1}}],[\"例如第一行表示接下来要输入的行数\",{\"1\":{\"309\":1}}],[\"例如\",{\"1\":{\"86\":1,\"124\":1,\"132\":1,\"453\":1,\"479\":1,\"481\":1,\"741\":1,\"864\":1,\"978\":1,\"982\":1,\"1169\":1,\"1454\":1,\"1529\":2,\"1577\":1}}],[\"例题索引\",{\"0\":{\"113\":1,\"144\":1}}],[\"例题\",{\"0\":{\"48\":1,\"101\":1,\"118\":1,\"119\":1,\"121\":1,\"123\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1},\"1\":{\"114\":4,\"115\":5,\"1065\":2,\"1066\":2,\"1068\":2}}],[\"例题解析\",{\"0\":{\"7\":1,\"148\":1}}],[\"记得将\",{\"1\":{\"761\":1}}],[\"记录控制单元解码的指定\",{\"1\":{\"1620\":1}}],[\"记录论文答辩的答辩稿\",{\"1\":{\"1011\":1}}],[\"记录每次加入红黑树\",{\"1\":{\"955\":1}}],[\"记录每个基本块开头处操作数栈的类型状态\",{\"1\":{\"664\":1}}],[\"记录元素出现的个数\",{\"1\":{\"495\":1}}],[\"记录下来有几个\",{\"1\":{\"153\":1}}],[\"记住协程是\",{\"1\":{\"415\":1}}],[\"记住口诀\",{\"1\":{\"25\":1}}],[\"记忆化搜索和\",{\"1\":{\"100\":1}}],[\"记忆化搜索概览\",{\"0\":{\"100\":1}}],[\"记忆化搜索\",{\"0\":{\"97\":1,\"99\":1}}],[\"记为\",{\"1\":{\"86\":1}}],[\"现有的室内定位技术都存在着一些缺陷\",{\"1\":{\"1014\":1}}],[\"现有的大多数管理平台通过\",{\"1\":{\"725\":1}}],[\"现有的分步答案不能得到有效的正确的解答的时候\",{\"1\":{\"5\":1}}],[\"现阶段主要是\",{\"1\":{\"266\":1}}],[\"现代处理器设计了一个特殊的\",{\"1\":{\"255\":1}}],[\"现在可能已经有更新\",{\"1\":{\"1491\":1}}],[\"现在可以使用多进程运行之\",{\"1\":{\"288\":1}}],[\"现在的目标是什么\",{\"1\":{\"1032\":1}}],[\"现在需要一个准确度高的\",{\"1\":{\"558\":1}}],[\"现在先写上基本的实现\",{\"1\":{\"297\":1}}],[\"现在记性不太好了\",{\"1\":{\"296\":1}}],[\"现在\",{\"1\":{\"291\":1,\"760\":1}}],[\"现在有一个很重要的问题\",{\"1\":{\"252\":1}}],[\"现在再体会一下这句话\",{\"1\":{\"204\":1}}],[\"现在把问题交给你\",{\"1\":{\"165\":1}}],[\"现在外层循环了背包\",{\"1\":{\"130\":1}}],[\"现在逐一说明\",{\"1\":{\"92\":1}}],[\"现在你总共有\",{\"1\":{\"86\":1}}],[\"课程表\",{\"0\":{\"86\":1},\"1\":{\"86\":1}}],[\"描述了要进入的空闲状态\",{\"1\":{\"1522\":1,\"1523\":1}}],[\"描述了整个文件的属性\",{\"1\":{\"1460\":1}}],[\"描述了一个\",{\"1\":{\"559\":1}}],[\"描述用户空间的虚拟地址\",{\"1\":{\"1340\":1}}],[\"描述缓冲区的数据结构\",{\"1\":{\"1338\":1}}],[\"描述符\",{\"1\":{\"952\":2}}],[\"描述\",{\"1\":{\"85\":1,\"224\":1,\"400\":1}}],[\"前文分析过的\",{\"1\":{\"1570\":1}}],[\"前文研究的\",{\"1\":{\"545\":1}}],[\"前的准备工作\",{\"1\":{\"1515\":1}}],[\"前的数量就代表僵尸进程的数量\",{\"1\":{\"738\":1}}],[\"前半句话说的话\",{\"1\":{\"1498\":1}}],[\"前者是在\",{\"1\":{\"1620\":1}}],[\"前者是使用\",{\"1\":{\"689\":1}}],[\"前者会早于后者加载\",{\"1\":{\"1605\":1}}],[\"前者情况在上面举例说明了\",{\"1\":{\"987\":1}}],[\"前者表示某个\",{\"1\":{\"691\":1}}],[\"前端的输出\",{\"1\":{\"690\":1}}],[\"前缀树\",{\"0\":{\"491\":1}}],[\"前缀和就应该是\",{\"1\":{\"160\":1}}],[\"前缀和的本质是为了求解数组区间的和\",{\"1\":{\"149\":1}}],[\"前缀和关键问题在于\",{\"1\":{\"147\":1}}],[\"前缀和原理\",{\"0\":{\"147\":1}}],[\"前缀和是一种非常有用的算法思路\",{\"1\":{\"146\":1}}],[\"前缀和快速求解\",{\"0\":{\"146\":1}}],[\"前缀和综合应用问题\",{\"1\":{\"144\":1}}],[\"前缀和\",{\"1\":{\"144\":3,\"153\":1,\"154\":1}}],[\"前面第三点所提到的\",{\"1\":{\"692\":1}}],[\"前面的准确率是如何保证的\",{\"1\":{\"597\":1}}],[\"前面的章节提到了\",{\"1\":{\"557\":1}}],[\"前面\",{\"1\":{\"508\":1}}],[\"前面条件为\",{\"1\":{\"386\":1}}],[\"前面条件成立\",{\"1\":{\"386\":1}}],[\"前面分析过\",{\"1\":{\"88\":1}}],[\"前必须先选修\",{\"1\":{\"86\":1}}],[\"前\",{\"1\":{\"86\":1,\"117\":2,\"643\":1,\"993\":1}}],[\"前要明确终止条件\",{\"1\":{\"83\":1}}],[\"前序遍历的迭代\",{\"1\":{\"486\":1}}],[\"前序遍历的迭代实现依赖于栈结构\",{\"1\":{\"43\":1}}],[\"前序遍历二叉树\",{\"1\":{\"49\":1}}],[\"前序遍历\",{\"0\":{\"49\":1}}],[\"前序遍历函数\",{\"1\":{\"42\":1}}],[\"结尾的压缩文件\",{\"1\":{\"1454\":1}}],[\"结合所学过的huffman编码以及信息熵等基本知识\",{\"1\":{\"1166\":1}}],[\"结合卷积运算的特点\",{\"1\":{\"1153\":1}}],[\"结合最大似然聚类算法\",{\"1\":{\"1012\":1}}],[\"结合wsl算法的搜索思想改进\",{\"1\":{\"1012\":1}}],[\"结合wifi室内定位技术和计算机视觉技术\",{\"1\":{\"1012\":1}}],[\"结合下面这段话\",{\"1\":{\"543\":1}}],[\"结合\",{\"1\":{\"537\":1}}],[\"结合上面的分析\",{\"1\":{\"88\":1}}],[\"结果非零则表示\",{\"1\":{\"1521\":1}}],[\"结果显示\",{\"1\":{\"1132\":1}}],[\"结果如表格所示\",{\"1\":{\"1012\":1}}],[\"结果\",{\"1\":{\"950\":1}}],[\"结果参数\",{\"0\":{\"950\":1},\"1\":{\"950\":1}}],[\"结果来分配请求\",{\"1\":{\"764\":1}}],[\"结果分配\",{\"1\":{\"763\":1,\"764\":1}}],[\"结果会变成\",{\"1\":{\"390\":1}}],[\"结果放在\",{\"1\":{\"245\":1}}],[\"结果集不计算顺序\",{\"1\":{\"10\":1}}],[\"结构的\",{\"1\":{\"1534\":1}}],[\"结构的全局示意图\",{\"1\":{\"193\":1}}],[\"结构初始化的步骤可以分为三步\",{\"1\":{\"1482\":1}}],[\"结构大小又是一个\",{\"1\":{\"950\":1}}],[\"结构大小是一个\",{\"1\":{\"950\":1}}],[\"结构信息\",{\"1\":{\"665\":1}}],[\"结构基于寄存器指令结构\",{\"1\":{\"652\":1}}],[\"结构型模式\",{\"1\":{\"629\":1}}],[\"结构\",{\"1\":{\"285\":1}}],[\"结构图\",{\"1\":{\"255\":1}}],[\"结构称为快表\",{\"1\":{\"255\":1}}],[\"结构体定义如下\",{\"1\":{\"1602\":1}}],[\"结构体定义在\",{\"1\":{\"1591\":1}}],[\"结构体组成如下\",{\"1\":{\"1602\":1}}],[\"结构体如下\",{\"1\":{\"1592\":1}}],[\"结构体细节如下\",{\"1\":{\"1591\":1}}],[\"结构体的指针\",{\"1\":{\"1521\":1,\"1522\":1,\"1523\":2}}],[\"结构体成员用来保存该进程的页表\",{\"1\":{\"252\":1}}],[\"结构体\",{\"1\":{\"252\":1,\"1309\":1,\"1311\":1,\"1544\":2}}],[\"结构如下所示\",{\"1\":{\"217\":1}}],[\"结构来标记是否走过某段路程\",{\"1\":{\"83\":1}}],[\"结论\",{\"1\":{\"147\":1,\"1012\":1}}],[\"大多数内核子系统都是相互独立的\",{\"1\":{\"1560\":1}}],[\"大多数指令都可以直接对内存中的数据进行操作\",{\"1\":{\"523\":1}}],[\"大端格式\",{\"1\":{\"1464\":1}}],[\"大家可能会想如果一个单元格内存在多个目标怎么办\",{\"1\":{\"1156\":1}}],[\"大约3\",{\"1\":{\"1138\":1}}],[\"大道至简\",{\"1\":{\"1060\":1}}],[\"大部分都被常量池占了\",{\"1\":{\"688\":1}}],[\"大部分处理器都使用这个操作\",{\"1\":{\"221\":1}}],[\"大型公有云在安全方面反而是一种加强\",{\"1\":{\"637\":1}}],[\"大概如下所示\",{\"1\":{\"1515\":1}}],[\"大概只有数ghz\",{\"1\":{\"1133\":1}}],[\"大概\",{\"1\":{\"594\":1}}],[\"大\",{\"1\":{\"499\":1}}],[\"大小排序\",{\"1\":{\"1340\":1}}],[\"大小是否大于\",{\"1\":{\"1333\":1}}],[\"大小的类型\",{\"1\":{\"1471\":1}}],[\"大小的张量\",{\"1\":{\"1155\":1}}],[\"大小的数据包\",{\"1\":{\"980\":1}}],[\"大小或者取消\",{\"1\":{\"998\":1}}],[\"大小这个再\",{\"1\":{\"980\":1}}],[\"大小\",{\"1\":{\"261\":1,\"681\":1}}],[\"大神的解法\",{\"1\":{\"184\":1}}],[\"大致包括以下\",{\"1\":{\"106\":1}}],[\"大礼包可以购买\",{\"1\":{\"102\":1}}],[\"大礼包内不包含我们要买的物品\",{\"1\":{\"102\":1}}],[\"大礼包不划算则不选这个大礼包\",{\"1\":{\"102\":1}}],[\"大礼包\",{\"0\":{\"102\":1},\"1\":{\"102\":1}}],[\"大西洋在矩阵的右边和下边环绕\",{\"1\":{\"78\":1}}],[\"大于等于地址线宽度\",{\"1\":{\"1470\":1}}],[\"大于等于\",{\"1\":{\"517\":1}}],[\"大于\",{\"1\":{\"10\":1,\"25\":1,\"120\":1,\"517\":1,\"982\":1}}],[\"开头\",{\"1\":{\"1464\":1}}],[\"开头的无关函数\",{\"1\":{\"693\":1}}],[\"开头的\",{\"1\":{\"77\":1}}],[\"开机过程中\",{\"1\":{\"1374\":1}}],[\"开机扫描\",{\"1\":{\"1374\":1}}],[\"开发\",{\"1\":{\"1352\":1}}],[\"开发者可以继承\",{\"1\":{\"1304\":1}}],[\"开发也极度内卷\",{\"1\":{\"1048\":1}}],[\"开门\",{\"1\":{\"1132\":1}}],[\"开设一个条目\",{\"1\":{\"984\":1}}],[\"开销方面\",{\"1\":{\"736\":1}}],[\"开源开发框架\",{\"1\":{\"869\":1}}],[\"开源\",{\"1\":{\"725\":2}}],[\"开始于\",{\"1\":{\"1479\":1}}],[\"开始于平台上电的时候\",{\"1\":{\"1474\":1}}],[\"开始于第一个使用预测值的指令\",{\"1\":{\"551\":1}}],[\"开始处理传输\",{\"1\":{\"1316\":1}}],[\"开始事件循环\",{\"1\":{\"961\":1}}],[\"开始编译\",{\"0\":{\"714\":1}}],[\"开始查找\",{\"1\":{\"559\":1}}],[\"开始或结束的函数和方法\",{\"1\":{\"372\":1}}],[\"开始或结尾的\",{\"1\":{\"372\":1}}],[\"开始的部分\",{\"1\":{\"664\":1}}],[\"开始的\",{\"1\":{\"360\":1}}],[\"开始循环\",{\"1\":{\"134\":1,\"152\":1}}],[\"开始遍历到背包的容量为止\",{\"1\":{\"118\":1}}],[\"开始正向遍历\",{\"1\":{\"118\":1}}],[\"开始\",{\"0\":{\"1012\":1},\"1\":{\"77\":1,\"85\":1,\"89\":1,\"155\":1,\"165\":1,\"354\":1,\"360\":2,\"397\":1,\"562\":1,\"985\":1,\"1380\":1}}],[\"开始而不是从\",{\"1\":{\"77\":1}}],[\"开始时你位于\",{\"1\":{\"75\":1}}],[\"示例代码如下\",{\"1\":{\"375\":1}}],[\"示例\",{\"1\":{\"76\":1,\"86\":2,\"87\":2,\"122\":1,\"124\":1,\"132\":1,\"138\":1,\"151\":1,\"156\":1,\"158\":1,\"160\":1,\"165\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1,\"454\":1,\"844\":1,\"1453\":4}}],[\"此间调用\",{\"1\":{\"1333\":1}}],[\"此种编码方式保存了密文的顺序\",{\"1\":{\"1169\":1}}],[\"此索引的每一个索引值只对应唯一的数据记录\",{\"1\":{\"811\":1}}],[\"此方法再\",{\"1\":{\"764\":1}}],[\"此方法按访问\",{\"1\":{\"764\":1}}],[\"此类局部变量多采用\",{\"1\":{\"692\":1}}],[\"此类方案分为两类\",{\"1\":{\"241\":1}}],[\"此处便是\",{\"1\":{\"1333\":1}}],[\"此处不再赘述\",{\"1\":{\"664\":1}}],[\"此处页大小为\",{\"1\":{\"530\":1}}],[\"此外\",{\"1\":{\"76\":1,\"1517\":1,\"1529\":1,\"1537\":1}}],[\"此时irq是被禁止的\",{\"1\":{\"1516\":1}}],[\"此时该怎么办呢\",{\"1\":{\"1448\":1}}],[\"此时客户端视角下的通信已经完成了\",{\"1\":{\"1333\":1}}],[\"此时是把我们上面写的\",{\"1\":{\"1301\":1}}],[\"此时的状态是\",{\"1\":{\"1299\":1}}],[\"此时无线网卡的接收天线会接收到多个无线信号\",{\"1\":{\"1019\":1}}],[\"此时容器中就有各种对象了\",{\"1\":{\"871\":1}}],[\"此时就会报错\",{\"1\":{\"1487\":1}}],[\"此时就与\",{\"1\":{\"706\":1,\"1402\":1}}],[\"此时就可以在控制台看到\",{\"1\":{\"681\":1}}],[\"此时只需要传递名字即可\",{\"1\":{\"658\":1}}],[\"此时解释器直接解释执行\",{\"1\":{\"655\":1}}],[\"此时会自动安装一些插件\",{\"1\":{\"612\":1}}],[\"此时会得到类似于\",{\"1\":{\"612\":1}}],[\"此时可以看到输入类似于下面\",{\"1\":{\"1275\":1}}],[\"此时可以用连接工具\",{\"1\":{\"611\":1}}],[\"此时可以使用\",{\"1\":{\"374\":1}}],[\"此时我们执行\",{\"1\":{\"1449\":1}}],[\"此时我们是真正调用进了\",{\"1\":{\"1314\":1}}],[\"此时我们的问题已经解决了\",{\"1\":{\"675\":1}}],[\"此时我们使用\",{\"1\":{\"609\":1}}],[\"此时我们可以知道\",{\"1\":{\"185\":1}}],[\"此时我们可以确定\",{\"1\":{\"91\":1}}],[\"此时自增或者自减都是不会改变值的\",{\"1\":{\"605\":1}}],[\"此时不需要经过\",{\"1\":{\"550\":1}}],[\"此时\",{\"1\":{\"496\":1,\"603\":1,\"1132\":1,\"1333\":1,\"1388\":1,\"1469\":1,\"1524\":1,\"1526\":2}}],[\"此时对象会创建\",{\"1\":{\"432\":1}}],[\"此时对象不会创建\",{\"1\":{\"432\":1}}],[\"此时有一个问题\",{\"1\":{\"243\":1}}],[\"此时需要保存所有寄存器的状态\",{\"1\":{\"212\":1}}],[\"此时需要按顺序搜索\",{\"1\":{\"10\":1}}],[\"此时达到的效果是\",{\"1\":{\"172\":2}}],[\"此时杯子的容量不够了\",{\"1\":{\"91\":1}}],[\"此时如果让\",{\"1\":{\"22\":1}}],[\"岛屿总是被水包围\",{\"1\":{\"76\":1}}],[\"岛屿数量\",{\"0\":{\"76\":1,\"85\":1}}],[\"组csi信号进行拼接\",{\"1\":{\"1012\":1}}],[\"组织好之后再提交到上层协议传输层\",{\"1\":{\"981\":1}}],[\"组\",{\"1\":{\"972\":1}}],[\"组件的\",{\"1\":{\"559\":1}}],[\"组中的元素\",{\"1\":{\"206\":1}}],[\"组的数量\",{\"1\":{\"206\":1}}],[\"组相联\",{\"1\":{\"199\":1,\"206\":2}}],[\"组成的\",{\"1\":{\"194\":1,\"204\":1,\"691\":1}}],[\"组成的字符串\",{\"1\":{\"167\":1}}],[\"组成的的二维网格\",{\"1\":{\"76\":1}}],[\"组成\",{\"1\":{\"87\":1,\"167\":1,\"559\":2}}],[\"组合索引\",{\"1\":{\"811\":1}}],[\"组合总和\",{\"0\":{\"136\":1}}],[\"组合总数ii\",{\"0\":{\"11\":1}}],[\"组合总数\",{\"0\":{\"10\":1,\"135\":1},\"1\":{\"11\":1,\"115\":1}}],[\"组合问题\",{\"1\":{\"136\":1}}],[\"组合问题的递推公式为\",{\"1\":{\"134\":1}}],[\"组合问题解\",{\"1\":{\"124\":1}}],[\"组合\",{\"0\":{\"14\":1},\"1\":{\"605\":1}}],[\"水平触发模式\",{\"1\":{\"956\":1}}],[\"水壶问题\",{\"0\":{\"91\":1}}],[\"水必须流进大西洋\",{\"1\":{\"79\":1,\"80\":1}}],[\"水\",{\"1\":{\"76\":1}}],[\"陆地\",{\"1\":{\"76\":1}}],[\"除后缀名外\",{\"1\":{\"1159\":1}}],[\"除voc数据集以外\",{\"1\":{\"1012\":1}}],[\"除非满缓冲区被读\",{\"1\":{\"956\":1}}],[\"除非新数据到达\",{\"1\":{\"956\":1}}],[\"除非子类也定义了\",{\"1\":{\"436\":1}}],[\"除非在子类中显式调用\",{\"1\":{\"425\":1}}],[\"除以每条\",{\"1\":{\"196\":1}}],[\"除了必须有的编译后的机器指令代码和数据之外\",{\"1\":{\"1460\":1}}],[\"除了节点代表的已知密文与待插入密文之间的大小关系之外\",{\"1\":{\"1169\":1}}],[\"除了上面这个结构\",{\"1\":{\"1156\":1}}],[\"除了上述的解法之外\",{\"1\":{\"88\":1}}],[\"除了模型交叉设计\",{\"1\":{\"1132\":1}}],[\"除了aoa\",{\"1\":{\"1012\":1}}],[\"除了系统调用之外\",{\"1\":{\"950\":1}}],[\"除了字节码以外\",{\"1\":{\"665\":1}}],[\"除了一个基础组件外\",{\"1\":{\"562\":1}}],[\"除了第一个从\",{\"1\":{\"432\":1}}],[\"除了去掉重复元素外\",{\"1\":{\"343\":1}}],[\"除了几个默认的迭代方法之外\",{\"1\":{\"311\":1}}],[\"除了\",{\"1\":{\"287\":1,\"562\":1,\"736\":1,\"1386\":2}}],[\"除了这个\",{\"1\":{\"224\":1}}],[\"除了成本考虑之外\",{\"1\":{\"192\":1}}],[\"除了小镇法官外\",{\"1\":{\"87\":1}}],[\"除\",{\"1\":{\"75\":1}}],[\"除此之外也支持\",{\"1\":{\"1422\":1}}],[\"除此之外还介绍了简单的索引知识和存储引擎\",{\"1\":{\"801\":1}}],[\"除此之外\",{\"1\":{\"15\":1,\"34\":1,\"42\":1,\"57\":1,\"88\":1,\"204\":1,\"210\":1,\"256\":1,\"266\":1,\"372\":1,\"375\":1,\"549\":1,\"576\":1,\"641\":1,\"675\":1,\"691\":1,\"696\":1,\"707\":1,\"764\":1,\"1012\":2,\"1248\":1,\"1253\":1,\"1353\":1,\"1356\":1,\"1357\":1,\"1396\":1,\"1405\":1,\"1460\":2,\"1600\":1,\"1601\":1}}],[\"最坏条件下从根节点触发平衡操作\",{\"1\":{\"1171\":1}}],[\"最简单的保序编码方式是为以上5个数编号1\",{\"1\":{\"1169\":1}}],[\"最简单的动态分支预测是分支预测\",{\"1\":{\"243\":1}}],[\"最著名的就是\",{\"1\":{\"724\":1}}],[\"最高置信的字段\",{\"1\":{\"586\":1}}],[\"最高位为符号位\",{\"1\":{\"530\":1}}],[\"最近被命中的\",{\"1\":{\"460\":1}}],[\"最近最少使用\",{\"1\":{\"213\":1}}],[\"最标准的写法参考如下\",{\"1\":{\"432\":1}}],[\"最外面的作用域\",{\"1\":{\"418\":1}}],[\"最外循环\",{\"1\":{\"120\":1}}],[\"最先搜索的最内部作用域包含局部名称\",{\"1\":{\"418\":1}}],[\"最小和最大的\",{\"1\":{\"562\":1}}],[\"最小化错误预测的数量\",{\"1\":{\"558\":1}}],[\"最小化错误预测数量\",{\"1\":{\"547\":1}}],[\"最小公倍数\",{\"1\":{\"399\":2}}],[\"最小的target应该是3\",{\"1\":{\"165\":1}}],[\"最好传入文件的路径\",{\"1\":{\"348\":1}}],[\"最好用\",{\"1\":{\"280\":1}}],[\"最短超串\",{\"0\":{\"168\":1}}],[\"最经典的前缀和用法\",{\"1\":{\"144\":1}}],[\"最少数量\",{\"1\":{\"132\":1}}],[\"最多可以关联一个\",{\"1\":{\"1590\":1}}],[\"最多只会剩下一块石头\",{\"1\":{\"125\":1}}],[\"最多有\",{\"1\":{\"120\":1}}],[\"最后再加载\",{\"1\":{\"1488\":1}}],[\"最后再对这些预测框使用nms算法\",{\"1\":{\"1157\":1}}],[\"最后就是\",{\"1\":{\"1380\":1}}],[\"最后就可以使用这个接口的方式来调用了\",{\"1\":{\"289\":1}}],[\"最后根据\",{\"1\":{\"1333\":1}}],[\"最后把\",{\"1\":{\"1253\":1}}],[\"最后的两行输出表示训练之后神经网络的值\",{\"1\":{\"1212\":1}}],[\"最后才是确定各个box的类别\",{\"1\":{\"1157\":1}}],[\"最后留下来的就是检测结果\",{\"1\":{\"1157\":1}}],[\"最后处理网络预测结果得到检测的目标\",{\"1\":{\"1155\":1}}],[\"最后为了减少上采样的混叠效果\",{\"1\":{\"1022\":1}}],[\"最后讲述一下本文如何将两个定位模块有效融合并在实际测试中说明本文室内定位系统的优越性\",{\"1\":{\"1012\":1}}],[\"最后发现寄存器的面积要增加\",{\"1\":{\"557\":1}}],[\"最后将目标页地址写入通用寄存器\",{\"1\":{\"530\":1}}],[\"最后搜索\",{\"1\":{\"418\":1}}],[\"最后通过将其转化为\",{\"1\":{\"299\":1}}],[\"最后使用分类器进行识别\",{\"1\":{\"1021\":1}}],[\"最后使用\",{\"1\":{\"289\":1}}],[\"最后找了很多资料\",{\"1\":{\"288\":1}}],[\"最后一个参数也是来自于\",{\"1\":{\"1345\":1}}],[\"最后一个模型是\",{\"1\":{\"1012\":1}}],[\"最后一层``采用线性激活函数\",{\"1\":{\"1156\":1}}],[\"最后一部分对本文进行一个小结\",{\"1\":{\"1012\":1}}],[\"最后一步是写回操作\",{\"1\":{\"245\":1}}],[\"最后一块石头的重量\",{\"0\":{\"125\":1},\"1\":{\"114\":1}}],[\"最后\",{\"1\":{\"125\":1,\"559\":1,\"1352\":1,\"1385\":1}}],[\"最长的特殊序列的长度\",{\"1\":{\"479\":1}}],[\"最长特殊序列1\",{\"0\":{\"479\":1}}],[\"最长递增子序列\",{\"1\":{\"106\":1}}],[\"最长公共子序列\",{\"1\":{\"106\":1}}],[\"最长公共子串的长度\",{\"1\":{\"108\":1}}],[\"最长公共子串\",{\"0\":{\"107\":1},\"1\":{\"106\":1}}],[\"最大的挑战之一在于该任务很难确定训练的标签\",{\"1\":{\"1132\":1}}],[\"最大分段大小\",{\"1\":{\"980\":1}}],[\"最大报文长度\",{\"1\":{\"978\":1}}],[\"最大\",{\"1\":{\"978\":1}}],[\"最大地址个数为\",{\"1\":{\"972\":1}}],[\"最大值是\",{\"1\":{\"676\":1}}],[\"最大值就是这一对香蕉里面最多的那个\",{\"1\":{\"34\":1}}],[\"最大公约数\",{\"1\":{\"399\":2}}],[\"最大数\",{\"0\":{\"182\":1}}],[\"最大最小递推公式用\",{\"1\":{\"125\":1}}],[\"最大最小值的\",{\"1\":{\"120\":1}}],[\"最大最小问题的递推公式\",{\"1\":{\"120\":1}}],[\"最大最小问题\",{\"1\":{\"112\":1,\"130\":1,\"132\":1}}],[\"最大子序列\",{\"1\":{\"106\":1}}],[\"最终都会调用到函数\",{\"1\":{\"1518\":1}}],[\"最终实现\",{\"1\":{\"1307\":1}}],[\"最终输出的通道数为4\",{\"1\":{\"1153\":1}}],[\"最终在合并的特征图后追加一个\",{\"1\":{\"1022\":1}}],[\"最终在找到目标后返回了\",{\"1\":{\"88\":1}}],[\"最终通过各模块之间的有效融合\",{\"1\":{\"1012\":1}}],[\"最终导致\",{\"1\":{\"881\":1}}],[\"最终是调用了\",{\"1\":{\"706\":1,\"1403\":1}}],[\"最终生成机器码\",{\"1\":{\"653\":1}}],[\"最终返回值\",{\"1\":{\"465\":1}}],[\"最终可以减少\",{\"1\":{\"258\":1}}],[\"最终\",{\"1\":{\"210\":1,\"1155\":1}}],[\"最终影响性能\",{\"1\":{\"196\":1}}],[\"最终的调整目的是得到一颗完全二叉搜索树\",{\"1\":{\"1170\":1}}],[\"最终的网络输出是7730\",{\"1\":{\"1157\":1}}],[\"最终的结果是1\",{\"1\":{\"985\":1}}],[\"最终的结论是\",{\"1\":{\"425\":1}}],[\"最终的实现如下\",{\"1\":{\"185\":1}}],[\"最终的代码如下所示\",{\"1\":{\"156\":1}}],[\"最终的变化序列要在基因库\",{\"1\":{\"92\":1}}],[\"最初\",{\"1\":{\"75\":1}}],[\"钥匙\",{\"1\":{\"75\":1}}],[\"钥匙和房间\",{\"0\":{\"75\":1,\"84\":1}}],[\"由图中的三角关系可得出相位和方向角的关系\",{\"1\":{\"1025\":1}}],[\"由振幅频率响应和相位频率响应组成\",{\"1\":{\"1020\":1}}],[\"由单个\",{\"1\":{\"576\":1,\"577\":1}}],[\"由此计算\",{\"1\":{\"562\":1}}],[\"由此\",{\"1\":{\"558\":1}}],[\"由此我们可以计算出来\",{\"1\":{\"204\":1}}],[\"由\",{\"1\":{\"75\":1,\"559\":1,\"871\":1,\"972\":1,\"1374\":1,\"1383\":1}}],[\"由于其机制复杂\",{\"1\":{\"1540\":1}}],[\"由于其时二进制的形式\",{\"1\":{\"693\":1}}],[\"由于这个函数\",{\"1\":{\"1367\":1}}],[\"由于官方的下载地址可能需要翻墙\",{\"1\":{\"1178\":1}}],[\"由于55>32\",{\"1\":{\"1169\":1}}],[\"由于每个单元格预测多个边界框\",{\"1\":{\"1156\":1}}],[\"由于每一个尺度下的图像都需要分别计算并预测特征\",{\"1\":{\"1022\":1}}],[\"由于检测任务一般需要更高清的图片\",{\"1\":{\"1156\":1}}],[\"由于图片的空间位置信息的不变性\",{\"1\":{\"1153\":1}}],[\"由于rf无线信号的直接可读性很差\",{\"1\":{\"1136\":1}}],[\"由于定位是对于设备而不是对于人本身\",{\"1\":{\"1133\":1}}],[\"由于无线信号不能直接对应于人类的活动\",{\"1\":{\"1131\":1}}],[\"由于无法及时在\",{\"1\":{\"603\":1}}],[\"由于两根天线之间以距离\",{\"1\":{\"1025\":1}}],[\"由于振幅衰减产生的振幅误差与\",{\"1\":{\"1024\":1}}],[\"由于不同的包接收时延\",{\"1\":{\"1024\":1}}],[\"由于收发端的中心频率不能完全同步所导致\",{\"1\":{\"1024\":1}}],[\"由于室内多径的影响\",{\"1\":{\"1020\":1}}],[\"由于主径的路程最短\",{\"1\":{\"1020\":1}}],[\"由于现有的深度数据集数据较少\",{\"1\":{\"1012\":1}}],[\"由于在快速重传后使用拥塞避免算法\",{\"1\":{\"987\":1}}],[\"由于结果被强制类型转化为负数\",{\"1\":{\"982\":1}}],[\"由于对进程的管理十分复杂\",{\"1\":{\"725\":1}}],[\"由于基于硬件\",{\"1\":{\"724\":1}}],[\"由于代码太长\",{\"1\":{\"703\":1}}],[\"由于是依赖库的关系\",{\"1\":{\"692\":1}}],[\"由于是最小化问题\",{\"1\":{\"130\":1}}],[\"由于同一个函数实例可以在多个地方被调用\",{\"1\":{\"691\":1}}],[\"由于值预测本来就是投机性的\",{\"1\":{\"578\":1}}],[\"由于多个组件的索引哈希和复用\",{\"1\":{\"559\":1}}],[\"由于预测不依赖于先前的值\",{\"1\":{\"559\":1}}],[\"由于我们知道\",{\"1\":{\"496\":1}}],[\"由于我们枚举右边界去寻找左边界\",{\"1\":{\"36\":1}}],[\"由于迭代较快\",{\"1\":{\"458\":1}}],[\"由于所有的\",{\"1\":{\"234\":1}}],[\"由于答案可能很大\",{\"1\":{\"167\":1}}],[\"由于\",{\"1\":{\"124\":1,\"256\":1,\"543\":1,\"954\":1,\"979\":1,\"980\":1,\"981\":1,\"982\":1,\"988\":2,\"1024\":1}}],[\"由于递归需要栈空间\",{\"1\":{\"56\":1}}],[\"由于数组取不到下标\",{\"1\":{\"22\":1}}],[\"yum\",{\"1\":{\"1263\":2,\"1645\":2}}],[\"y2\",{\"1\":{\"1228\":1}}],[\"y2=\",{\"1\":{\"1228\":1}}],[\"yyyymmdd\",{\"1\":{\"1226\":1}}],[\"y代表预测结果\",{\"1\":{\"1212\":1}}],[\"ys\",{\"1\":{\"1185\":2}}],[\"y1=\",{\"1\":{\"1228\":1}}],[\"y1​表示该boundingbox左上角点的坐标\",{\"1\":{\"1159\":1}}],[\"y1\",{\"1\":{\"1159\":1,\"1228\":1}}],[\"yes\",{\"1\":{\"1545\":1}}],[\"years\",{\"1\":{\"1623\":3}}],[\"year\",{\"1\":{\"1075\":1,\"1623\":1}}],[\"yet\",{\"1\":{\"543\":2,\"548\":1,\"549\":1,\"989\":1,\"1385\":1}}],[\"ycm\",{\"1\":{\"1054\":1}}],[\"ycle\",{\"1\":{\"339\":1}}],[\"yaxiong\",{\"1\":{\"1201\":1}}],[\"yarnpkg\",{\"1\":{\"1099\":1}}],[\"yarn\",{\"0\":{\"915\":1,\"917\":1,\"1648\":1},\"1\":{\"917\":1,\"918\":3,\"923\":1,\"943\":2,\"1099\":4,\"1101\":7,\"1105\":1,\"1113\":1,\"1648\":3},\"2\":{\"920\":1}}],[\"yaml\",{\"1\":{\"388\":2,\"623\":1,\"776\":2,\"785\":2,\"786\":1}}],[\"yolov3\",{\"1\":{\"1161\":4}}],[\"yolo训练时需要\",{\"1\":{\"1159\":1}}],[\"yolo本身使用的是voc的数据集\",{\"1\":{\"1159\":1}}],[\"yolo预测过程也需要用到nms算法\",{\"1\":{\"1157\":1}}],[\"yolo采用卷积网络来提取特征\",{\"1\":{\"1156\":1}}],[\"yolo的置信度不仅仅是边界框是否含有目标的概率\",{\"1\":{\"1155\":1}}],[\"yolo的cnn网络将输入的图片分割成\",{\"1\":{\"1155\":1}}],[\"yolo算法采用一个单独的cnn模型实现end\",{\"1\":{\"1155\":1}}],[\"yolo算法很好的解决了这个问题\",{\"1\":{\"1153\":1}}],[\"yolo\",{\"0\":{\"1150\":1,\"1152\":1,\"1154\":1},\"1\":{\"1021\":1,\"1052\":1,\"1150\":1,\"1156\":1,\"1159\":1,\"1161\":1,\"1162\":5}}],[\"yolo网络\",{\"1\":{\"1012\":1}}],[\"york\",{\"1\":{\"606\":1}}],[\"youcompleteme\",{\"1\":{\"1259\":1}}],[\"yourself\",{\"1\":{\"1113\":1}}],[\"yours\",{\"1\":{\"1099\":1}}],[\"your\",{\"1\":{\"155\":2,\"271\":1,\"309\":1,\"336\":1,\"347\":1,\"620\":1,\"748\":1,\"774\":3,\"776\":1,\"778\":1,\"783\":1,\"786\":2,\"820\":1,\"1071\":2,\"1072\":1,\"1074\":3,\"1075\":6,\"1076\":3,\"1077\":2,\"1078\":1,\"1079\":1,\"1080\":1,\"1099\":5,\"1105\":2,\"1106\":8,\"1196\":1,\"1216\":1,\"1253\":1,\"1419\":3,\"1431\":2}}],[\"you\",{\"1\":{\"155\":1,\"204\":5,\"271\":5,\"326\":2,\"339\":2,\"341\":2,\"747\":1,\"759\":1,\"777\":1,\"780\":1,\"781\":2,\"785\":1,\"786\":1,\"856\":1,\"927\":1,\"941\":2,\"942\":1,\"1060\":1,\"1071\":2,\"1072\":1,\"1074\":4,\"1075\":7,\"1076\":4,\"1077\":2,\"1078\":1,\"1079\":1,\"1080\":3,\"1084\":1,\"1099\":10,\"1105\":1,\"1150\":1,\"1151\":1,\"1198\":2,\"1216\":2,\"1219\":3,\"1418\":2,\"1419\":1}}],[\"y=0\",{\"1\":{\"436\":2}}],[\"yml\",{\"0\":{\"388\":1},\"1\":{\"388\":10,\"623\":3,\"624\":1,\"1075\":3}}],[\"y+x\",{\"1\":{\"185\":1}}],[\"y−b\",{\"1\":{\"91\":1}}],[\"yields\",{\"1\":{\"234\":1,\"543\":2}}],[\"yield\",{\"1\":{\"88\":3,\"289\":2,\"294\":1,\"313\":2,\"315\":1,\"317\":1,\"378\":1,\"382\":1,\"420\":1}}],[\"y\",{\"1\":{\"74\":9,\"79\":10,\"80\":6,\"85\":5,\"91\":16,\"92\":4,\"108\":3,\"120\":2,\"125\":6,\"150\":4,\"173\":3,\"180\":40,\"185\":6,\"317\":2,\"349\":1,\"398\":3,\"399\":3,\"435\":4,\"436\":7,\"747\":2,\"820\":4,\"843\":2,\"906\":2,\"1155\":4,\"1159\":2,\"1185\":5,\"1212\":33,\"1228\":1,\"1263\":2,\"1446\":2,\"1449\":3,\"1645\":2}}],[\"搜索文件名即可搜到\",{\"1\":{\"676\":1}}],[\"搜索包\",{\"1\":{\"445\":1}}],[\"搜索的子字符串\",{\"1\":{\"392\":1}}],[\"搜索完成的话退回上一位\",{\"1\":{\"77\":1}}],[\"搜索\",{\"1\":{\"74\":1}}],[\"自旋锁是用来避免竞争条件的一种机制\",{\"1\":{\"1563\":1}}],[\"自定义的头文件\",{\"0\":{\"1446\":1}}],[\"自定义策略决策是否需要调整\",{\"1\":{\"1170\":1}}],[\"自定义排序函数\",{\"1\":{\"173\":1}}],[\"自yolo算法提出以来\",{\"1\":{\"1151\":1}}],[\"自顶向下的方法首先检测出rgb图像中的人类\",{\"1\":{\"1133\":1}}],[\"自顶向下的过程将迭代直到产生最细精度的分辨率\",{\"1\":{\"1022\":1}}],[\"自底向上的方法正与此相反\",{\"1\":{\"1133\":1}}],[\"自底向上和自顶向下的方法\",{\"1\":{\"1133\":1}}],[\"自底向上方法\",{\"1\":{\"73\":1}}],[\"自由自在写代码的日子还能有多久\",{\"1\":{\"1039\":1}}],[\"自动化测试都做了什么\",{\"1\":{\"1632\":1}}],[\"自动对齐\",{\"1\":{\"1259\":1}}],[\"自动更新\",{\"1\":{\"1236\":1}}],[\"自动聊天机器人\",{\"0\":{\"1090\":1}}],[\"自动增益控制器\",{\"1\":{\"1024\":1}}],[\"自动发送并且返回回调\",{\"1\":{\"962\":1}}],[\"自动代理注册器\",{\"1\":{\"879\":1}}],[\"自动代理\",{\"1\":{\"879\":1}}],[\"自动执行\",{\"0\":{\"380\":1}}],[\"自我感觉源码安装比较可靠\",{\"1\":{\"770\":1}}],[\"自然会想走这条路\",{\"1\":{\"690\":1}}],[\"自带了\",{\"1\":{\"320\":1}}],[\"自带的参数\",{\"1\":{\"1345\":1}}],[\"自带的一些解析函数\",{\"1\":{\"693\":1}}],[\"自带的文件处理模块\",{\"1\":{\"353\":1}}],[\"自带的工具打开大文件是很慢的\",{\"1\":{\"345\":1}}],[\"自带的\",{\"1\":{\"27\":1}}],[\"自己的简单理解\",{\"1\":{\"250\":1}}],[\"遇到\",{\"1\":{\"499\":1}}],[\"遇到右括号\",{\"1\":{\"465\":1}}],[\"遇到左括号则入栈\",{\"1\":{\"465\":2}}],[\"遇到了要打印多个参数但是报错的问题\",{\"1\":{\"325\":1}}],[\"遇到连续序列\",{\"1\":{\"165\":1}}],[\"遇到前缀和\",{\"1\":{\"159\":1}}],[\"遇到一个问题\",{\"1\":{\"73\":1}}],[\"遇到符合条件的返回即可\",{\"1\":{\"33\":1}}],[\"图像的像素越来越小\",{\"1\":{\"1142\":1}}],[\"图灵机器人\",{\"1\":{\"1094\":1}}],[\"图灵奖\",{\"1\":{\"70\":1}}],[\"图表示\",{\"1\":{\"1020\":1}}],[\"图表示incrownet的运行结果\",{\"1\":{\"1012\":1}}],[\"图的设计代码\",{\"1\":{\"801\":1}}],[\"图片高度\",{\"1\":{\"1159\":2}}],[\"图片宽度\",{\"1\":{\"1159\":2}}],[\"图片\",{\"1\":{\"676\":1}}],[\"图中的\",{\"1\":{\"1327\":1}}],[\"图中的每条路径都对应信道脉冲响应\",{\"1\":{\"1020\":1}}],[\"图中最上面所示为teacher模型\",{\"1\":{\"1135\":1}}],[\"图中列举了几种不同大小的\",{\"1\":{\"1021\":1}}],[\"图中展示了如何对wifi定位结果和视觉定位结果进行有效融合\",{\"1\":{\"1012\":1}}],[\"图中并未体现出多个\",{\"1\":{\"204\":1}}],[\"图中出现了\",{\"1\":{\"204\":1}}],[\"图中一个节点的引用\",{\"1\":{\"89\":1}}],[\"图\",{\"1\":{\"83\":1,\"559\":1,\"1022\":4}}],[\"图1\",{\"1\":{\"23\":1}}],[\"塔扬在1986年共同获得计算机领域的最高奖\",{\"1\":{\"70\":1}}],[\"霍普克洛夫特与罗伯特\",{\"1\":{\"70\":1}}],[\"出一个子进程\",{\"1\":{\"1374\":1}}],[\"出来的信息如下所示\",{\"1\":{\"1463\":1}}],[\"出来\",{\"1\":{\"552\":1}}],[\"出于以下几个原因\",{\"1\":{\"263\":1}}],[\"出现了警告\",{\"1\":{\"1469\":1}}],[\"出现版本号则安装成功\",{\"1\":{\"1177\":1}}],[\"出现崩溃\",{\"0\":{\"1114\":1}}],[\"出现\",{\"1\":{\"154\":1,\"542\":1}}],[\"出的还是很不错的\",{\"1\":{\"86\":1}}],[\"出栈的步骤不要忘记\",{\"1\":{\"64\":1}}],[\"出去\",{\"1\":{\"59\":1,\"550\":1}}],[\"也称作通知块\",{\"1\":{\"1567\":1}}],[\"也就意味着有多个\",{\"1\":{\"1534\":1}}],[\"也就是进入一种较低功耗的状态以进行省电\",{\"1\":{\"1523\":1}}],[\"也就是\",{\"1\":{\"1333\":3,\"1534\":1,\"1542\":1}}],[\"也就是需要等待服务端的返回结果\",{\"1\":{\"1333\":1}}],[\"也就是上面我们那个\",{\"1\":{\"1314\":1}}],[\"也就是边沿非阻塞触发模式\",{\"1\":{\"956\":1}}],[\"也就是我们经常知道的\",{\"1\":{\"245\":1}}],[\"也就是说把取到的数据放在目的寄存器的低\",{\"1\":{\"527\":1}}],[\"也就是说第二个字符串比第一个字符串多最后一个字母\",{\"1\":{\"478\":1}}],[\"也就是说需要找到那个\",{\"1\":{\"160\":1}}],[\"也就是说相当于\",{\"1\":{\"160\":1}}],[\"也就是说\",{\"1\":{\"88\":1,\"169\":1,\"224\":1,\"251\":1,\"548\":1,\"558\":1,\"559\":2,\"602\":1,\"662\":1,\"695\":1,\"706\":1,\"951\":1,\"1169\":1,\"1307\":1,\"1395\":1,\"1403\":1,\"1515\":1,\"1552\":1,\"1583\":1}}],[\"也很直观\",{\"1\":{\"1471\":1}}],[\"也编译出来了\",{\"1\":{\"1445\":1}}],[\"也能知道\",{\"1\":{\"1320\":1}}],[\"也能够实现密文数据高效查询\",{\"1\":{\"1166\":1}}],[\"也能够捕获\",{\"1\":{\"559\":1}}],[\"也叫做\",{\"1\":{\"1304\":1,\"1305\":1}}],[\"也叫类元数据指针\",{\"1\":{\"677\":1}}],[\"也比较麻烦\",{\"1\":{\"729\":1}}],[\"也被安装了\",{\"1\":{\"692\":1}}],[\"也被\",{\"1\":{\"575\":1}}],[\"也可单独使用某一个变量\",{\"1\":{\"926\":1}}],[\"也可能会存在超过\",{\"1\":{\"573\":1}}],[\"也可能存在其他可选的偏移量格式\",{\"1\":{\"529\":1}}],[\"也可以表示更大的数据范围\",{\"1\":{\"1470\":1}}],[\"也可以是一个标签\",{\"1\":{\"1439\":1}}],[\"也可以是一个执行文件\",{\"1\":{\"1439\":1}}],[\"也可以在外面\",{\"1\":{\"1419\":1}}],[\"也可以在\",{\"1\":{\"1101\":1}}],[\"也可以用来计算\",{\"1\":{\"978\":1}}],[\"也可以用与\",{\"1\":{\"548\":1}}],[\"也可以作为\",{\"1\":{\"933\":1}}],[\"也可以从服务角度理解\",{\"1\":{\"639\":1}}],[\"也可以从内存处同步\",{\"1\":{\"224\":1}}],[\"也可以称作节\",{\"1\":{\"1460\":1}}],[\"也可以称作动态融合预测器表\",{\"1\":{\"581\":1}}],[\"也可以称之为字节码\",{\"1\":{\"693\":1}}],[\"也可以称之为\",{\"1\":{\"545\":1}}],[\"也可以说是组件\",{\"1\":{\"559\":1}}],[\"也可以参考\",{\"1\":{\"1633\":1}}],[\"也可以参考这篇博客\",{\"1\":{\"527\":1}}],[\"也可以参考下面的解法\",{\"1\":{\"47\":1}}],[\"也可以\",{\"1\":{\"496\":1}}],[\"也可以利用\",{\"1\":{\"454\":1}}],[\"也可以将测试的数据用在文件中\",{\"1\":{\"387\":1}}],[\"也可以读取文件中的内容\",{\"1\":{\"361\":1}}],[\"也可以使用activate命令启动虚环境\",{\"1\":{\"854\":1}}],[\"也可以使用\",{\"1\":{\"460\":1,\"836\":1,\"842\":1}}],[\"也可以使用包来引入\",{\"1\":{\"311\":1}}],[\"也可以使用递归的方法\",{\"1\":{\"47\":1}}],[\"也可以这么称呼\",{\"1\":{\"255\":1}}],[\"也可以由软件近似实现\",{\"1\":{\"213\":1}}],[\"也可以跳上2级\",{\"1\":{\"103\":2}}],[\"也可以根据\",{\"1\":{\"65\":1}}],[\"也一样\",{\"1\":{\"479\":1}}],[\"也包括非全局名称\",{\"1\":{\"418\":1}}],[\"也不会被响应\",{\"1\":{\"984\":1}}],[\"也不行\",{\"1\":{\"728\":1}}],[\"也不用很复杂的\",{\"1\":{\"542\":1}}],[\"也不需要进行查找\",{\"1\":{\"263\":1}}],[\"也不能买\",{\"1\":{\"102\":1}}],[\"也是为了解决调用顺序的问题\",{\"1\":{\"1605\":1}}],[\"也是\",{\"1\":{\"1501\":1}}],[\"也是用到了\",{\"1\":{\"1469\":1}}],[\"也是息息相关的\",{\"1\":{\"1330\":1}}],[\"也是比较大了\",{\"1\":{\"869\":1}}],[\"也是一个指针\",{\"1\":{\"692\":1}}],[\"也是一种权衡的结果\",{\"1\":{\"202\":1}}],[\"也是我们接口中需要传入的\",{\"1\":{\"289\":1}}],[\"也是类似的\",{\"1\":{\"235\":1}}],[\"也有一个\",{\"1\":{\"1510\":1}}],[\"也有一些安卓的基本知识\",{\"1\":{\"266\":1}}],[\"也有一些考量在里面\",{\"1\":{\"213\":1}}],[\"也有如下的表示方法\",{\"1\":{\"195\":1}}],[\"也会回调这个函数\",{\"1\":{\"1602\":1}}],[\"也会修改项目中的\",{\"1\":{\"1443\":1}}],[\"也会对应不同的物理地址\",{\"1\":{\"251\":1}}],[\"也会导致\",{\"1\":{\"208\":1}}],[\"也会被视作正确答案\",{\"1\":{\"169\":1}}],[\"也即中序后继\",{\"1\":{\"63\":1}}],[\"设定等级\",{\"1\":{\"1600\":1}}],[\"设定大目标\",{\"0\":{\"1033\":1}}],[\"设备绑定到\",{\"1\":{\"1601\":1}}],[\"设备的到期时间\",{\"1\":{\"1545\":1}}],[\"设备到期事件早于\",{\"1\":{\"1545\":1}}],[\"设备不支持\",{\"1\":{\"1542\":1}}],[\"设备支持更高数据速率\",{\"1\":{\"1508\":1}}],[\"设备对应的\",{\"1\":{\"1307\":1}}],[\"设备\",{\"1\":{\"1307\":2,\"1542\":1,\"1544\":3,\"1601\":1}}],[\"设备和单目相机\",{\"1\":{\"1017\":1}}],[\"设备目标明确\",{\"1\":{\"652\":1}}],[\"设计的虚拟化层\",{\"1\":{\"1479\":1}}],[\"设计的角度去看看\",{\"1\":{\"1350\":1}}],[\"设计理念\",{\"0\":{\"1355\":1}}],[\"设计神经网络并训练到高的准确率存在很多的挑战\",{\"1\":{\"1132\":1}}],[\"设计一个独立的网络用于生成密度图像\",{\"1\":{\"1012\":1}}],[\"设计一个算法\",{\"1\":{\"63\":1}}],[\"设计之初支持分离编译和按需动态类加载\",{\"1\":{\"688\":1}}],[\"设计模式可以分为四种类型\",{\"1\":{\"629\":1}}],[\"设计模式总览\",{\"0\":{\"629\":1}}],[\"设计模式\",{\"0\":{\"628\":1}}],[\"设计都是存在差异的\",{\"1\":{\"195\":1}}],[\"设置了同步和异步的异常向量\",{\"1\":{\"1483\":1}}],[\"设置一个\",{\"1\":{\"1380\":1}}],[\"设置前台调度策略\",{\"1\":{\"1299\":1}}],[\"设置中文\",{\"1\":{\"1178\":1}}],[\"设置过小\",{\"1\":{\"956\":1}}],[\"设置key的过期时间\",{\"1\":{\"829\":1}}],[\"设置的方法如高亮行所示\",{\"1\":{\"1534\":1}}],[\"设置的\",{\"1\":{\"827\":1}}],[\"设置的属性仅对当前类有效\",{\"1\":{\"436\":1}}],[\"设置当前不参与负载均衡\",{\"1\":{\"763\":1}}],[\"设置容器使用的环境变量\",{\"1\":{\"610\":1}}],[\"设置\",{\"0\":{\"448\":1},\"1\":{\"987\":1,\"1534\":1,\"1545\":1}}],[\"设置右指针\",{\"1\":{\"168\":1}}],[\"设置为休眠状态\",{\"1\":{\"1528\":1}}],[\"设置为\",{\"1\":{\"534\":1,\"981\":1}}],[\"设置为克隆图中对应的节点\",{\"1\":{\"89\":1}}],[\"设置为原始图中的节点\",{\"1\":{\"89\":1}}],[\"设置为了\",{\"1\":{\"11\":1}}],[\"设立之初就是为的图的遍历\",{\"1\":{\"89\":1}}],[\"配合\",{\"1\":{\"1589\":1}}],[\"配合使用\",{\"1\":{\"1517\":1}}],[\"配置不需要代理和禁用\",{\"1\":{\"1648\":1}}],[\"配置等逻辑\",{\"1\":{\"1520\":1}}],[\"配置完以上步骤以后\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"配置完成\",{\"1\":{\"612\":1}}],[\"配置客户端\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"配置auto\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"配置proxy\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"配置91云一键加速工具\",{\"0\":{\"1264\":1,\"1646\":1}}],[\"配置shadowsocks客户端\",{\"0\":{\"1263\":1,\"1645\":1},\"1\":{\"1265\":1,\"1647\":1}}],[\"配置合并工具\",{\"1\":{\"1252\":1}}],[\"配置文件\",{\"1\":{\"1179\":1}}],[\"配置csi\",{\"0\":{\"1145\":1}}],[\"配置的方法如下\",{\"1\":{\"323\":1}}],[\"配置\",{\"1\":{\"274\":1,\"759\":1}}],[\"配置项的相关说明详见\",{\"1\":{\"0\":1}}],[\"配套\",{\"1\":{\"61\":1}}],[\"🟡🟡🟡发散\",{\"1\":{\"1591\":1}}],[\"🔗\",{\"1\":{\"1583\":1}}],[\"💄\",{\"1\":{\"1534\":2}}],[\"🟢\",{\"1\":{\"1508\":1}}],[\"🟢🟢🟢\",{\"1\":{\"545\":1}}],[\"🟢🟢\",{\"1\":{\"235\":1,\"245\":1}}],[\"🚫🚫🚫\",{\"1\":{\"1490\":1}}],[\"🛑🛑拓展实验🛑🛑\",{\"1\":{\"1445\":1}}],[\"🟤🟤🟤\",{\"1\":{\"1385\":1}}],[\"💛一个对象引用了其他对象如何理解\",{\"1\":{\"1383\":1}}],[\"💛💛\",{\"1\":{\"602\":1}}],[\"💚通常的概念如下\",{\"1\":{\"1383\":1}}],[\"💚💚\",{\"1\":{\"542\":1,\"548\":2,\"552\":1}}],[\"💚💚💚在命令行中指令日志的打印级别\",{\"1\":{\"324\":1}}],[\"💚💚💚💚\",{\"1\":{\"257\":1}}],[\"💚💚💚\",{\"1\":{\"255\":1,\"329\":1}}],[\"🐇🐇\",{\"1\":{\"1326\":3}}],[\"🐇🐇🐇\",{\"1\":{\"251\":1}}],[\"💊💊💊\",{\"1\":{\"1320\":1}}],[\"💯💯\",{\"1\":{\"1291\":1}}],[\"💯data\",{\"0\":{\"198\":1}}],[\"😋😋😋\",{\"1\":{\"679\":1}}],[\"🟥🟧🟨\",{\"1\":{\"672\":1}}],[\"📌📌\",{\"1\":{\"597\":1,\"600\":1}}],[\"📌📌📌问一个自己问题\",{\"1\":{\"1033\":1}}],[\"📌📌📌\",{\"1\":{\"580\":1,\"590\":1}}],[\"🔴🔴\",{\"1\":{\"559\":1}}],[\"🔴🔴🔴\",{\"1\":{\"61\":1,\"241\":1,\"542\":1,\"1465\":1,\"1573\":1}}],[\"📍📍📍\",{\"1\":{\"552\":1}}],[\"💘\",{\"1\":{\"432\":6}}],[\"😂😂😂\",{\"1\":{\"354\":1}}],[\"😭😭😭\",{\"1\":{\"348\":1}}],[\"💁‍♂️对比与进程和线程的调度\",{\"1\":{\"282\":1}}],[\"🟠🟠\",{\"1\":{\"253\":1}}],[\"📑📑📑\",{\"1\":{\"69\":2}}],[\"💓💓💓\",{\"1\":{\"56\":1}}],[\"偶数层从右往左\",{\"1\":{\"61\":1}}],[\"偶数层\",{\"1\":{\"61\":1}}],[\"层函数网上看\",{\"1\":{\"1320\":1}}],[\"层传递过来的\",{\"1\":{\"1313\":1}}],[\"层调用下来之后的第一个函数\",{\"1\":{\"1307\":1}}],[\"层来完成的\",{\"1\":{\"981\":1}}],[\"层来实现\",{\"1\":{\"696\":1,\"1396\":1}}],[\"层就需要对数据进行分片\",{\"1\":{\"981\":1}}],[\"层分段的时候\",{\"1\":{\"981\":1}}],[\"层分析\",{\"0\":{\"698\":1,\"1397\":1}}],[\"层是没有必要分片的\",{\"1\":{\"981\":1}}],[\"层已经进行了分段\",{\"1\":{\"981\":1}}],[\"层则需要对数据进行重组\",{\"1\":{\"979\":1}}],[\"层需要分片进行传输\",{\"1\":{\"979\":1}}],[\"层上\",{\"1\":{\"977\":1}}],[\"层\",{\"1\":{\"724\":1,\"981\":3,\"1303\":1,\"1320\":3}}],[\"层的实现\",{\"1\":{\"1392\":1}}],[\"层的方法\",{\"1\":{\"1334\":1}}],[\"层的功能\",{\"1\":{\"1307\":1}}],[\"层的数据绝对不会超过\",{\"1\":{\"981\":1}}],[\"层的时候\",{\"1\":{\"981\":1}}],[\"层的\",{\"1\":{\"706\":1,\"1307\":1,\"1402\":1}}],[\"层的函数进行了对应\",{\"1\":{\"1307\":1}}],[\"层的函数\",{\"1\":{\"695\":2,\"1395\":2}}],[\"层负责实现\",{\"1\":{\"706\":1,\"1402\":1}}],[\"层完成\",{\"1\":{\"696\":1,\"1396\":1}}],[\"层对应\",{\"1\":{\"696\":1,\"1396\":1}}],[\"层屏蔽平台之间的差异\",{\"1\":{\"695\":1,\"1395\":1}}],[\"层可以对\",{\"1\":{\"695\":1,\"1395\":1}}],[\"层次\",{\"1\":{\"641\":1}}],[\"层数\",{\"1\":{\"61\":1,\"977\":1}}],[\"层与层之间交替进行\",{\"1\":{\"61\":1}}],[\"向用户空间程序提供\",{\"1\":{\"1532\":1}}],[\"向用户空间提供\",{\"1\":{\"1531\":1}}],[\"向底层的\",{\"1\":{\"1532\":1}}],[\"向\",{\"1\":{\"1309\":1,\"1333\":1,\"1532\":2}}],[\"向下滑\",{\"1\":{\"1281\":1}}],[\"向右滑\",{\"1\":{\"1281\":1}}],[\"向左滑\",{\"1\":{\"1281\":1}}],[\"向左端插入\",{\"1\":{\"60\":1}}],[\"向各位老师不辞辛苦参加我的论文答辩表示衷心的感谢\",{\"1\":{\"1012\":1}}],[\"向主域名服务器进行查询以便于了解数据是否有变动\",{\"1\":{\"997\":1}}],[\"向应用层\",{\"1\":{\"978\":1}}],[\"向外暴露的是\",{\"1\":{\"612\":1}}],[\"向数组中的每个整数前添加\",{\"1\":{\"124\":1}}],[\"向上滑\",{\"1\":{\"1281\":1}}],[\"向上取整就是这个速度吃完当前堆的香蕉所需要的时间\",{\"1\":{\"34\":1}}],[\"向上取整\",{\"1\":{\"34\":1}}],[\"向上\",{\"0\":{\"28\":1}}],[\"将这两个分开画了\",{\"1\":{\"1553\":1}}],[\"将这个特征结构视作和图\",{\"1\":{\"1022\":1}}],[\"将这个\",{\"1\":{\"100\":1}}],[\"将这个操作单独拎出来\",{\"1\":{\"88\":1}}],[\"将从无操作系统状态恢复到正常运行状态\",{\"1\":{\"1541\":1}}],[\"将控制权转交给\",{\"1\":{\"1487\":1}}],[\"将控制传递给\",{\"1\":{\"1483\":1}}],[\"将控制转移到操作系统\",{\"1\":{\"256\":1}}],[\"将代码段和数据段分开\",{\"1\":{\"1460\":1}}],[\"将远程服务器上的文件复制到本地\",{\"1\":{\"1453\":1}}],[\"将本地文件复制到远程服务器\",{\"1\":{\"1453\":1}}],[\"将等待对象拷贝完成\",{\"1\":{\"1381\":1}}],[\"将会给这个对象设置一个\",{\"1\":{\"1380\":1}}],[\"将参数\",{\"1\":{\"1365\":1}}],[\"将多个组件按照页表\",{\"1\":{\"1355\":1}}],[\"将多个连续的\",{\"1\":{\"192\":1}}],[\"将需要进行进程间通信的进程分配到了一个共享页表中\",{\"1\":{\"1354\":1}}],[\"将需要的选项写在文件中\",{\"1\":{\"659\":1}}],[\"将发送的错误代码返回给最初的调用者\",{\"1\":{\"1333\":1}}],[\"将传输入栈到当前线程中\",{\"1\":{\"1308\":1}}],[\"将用户空间的数据拷贝到目前进程空间\",{\"1\":{\"1308\":1}}],[\"将请求转发给远程的\",{\"1\":{\"1305\":1}}],[\"将8388替换为ss端口\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"将变更推送到远程仓库\",{\"1\":{\"1250\":1}}],[\"将图2调整前的ope\",{\"1\":{\"1170\":1}}],[\"将图片放置于\",{\"1\":{\"1108\":1}}],[\"将它们按照顺序进行标号\",{\"1\":{\"1170\":1}}],[\"将得到的所有二进制编码调整为相同的长度\",{\"1\":{\"1169\":1}}],[\"将四个类别名称\",{\"1\":{\"1162\":1}}],[\"将检测问题转化为了图像分类问题\",{\"1\":{\"1153\":1}}],[\"将里面所有的内容替换成搜狐的软件源\",{\"1\":{\"1145\":1}}],[\"将上采样的结果与对应的自底向上的特征图通过\",{\"1\":{\"1022\":1}}],[\"将低分辨率\",{\"1\":{\"1022\":1}}],[\"将信号传播更长的路径叫做多径\",{\"1\":{\"1019\":1}}],[\"将信息从一个网络设备传送到另一个网络设备\",{\"1\":{\"977\":1}}],[\"将目标\",{\"1\":{\"993\":1}}],[\"将目标寄存器设置为\",{\"1\":{\"534\":1}}],[\"将客户端的数据\",{\"1\":{\"1342\":1}}],[\"将客户端的\",{\"1\":{\"982\":1}}],[\"将物理层的数据封装成帧\",{\"1\":{\"977\":1}}],[\"将有差错的物理信道变为无差错的\",{\"1\":{\"977\":1}}],[\"将数据链路层的数据转化成数据包\",{\"1\":{\"977\":1}}],[\"将缓冲区的数据全读出\",{\"1\":{\"956\":1}}],[\"将日期字符串转化成时间戳\",{\"1\":{\"909\":1}}],[\"将原本程序手中控制对象创建的权力\",{\"1\":{\"871\":1}}],[\"将被重定向到\",{\"1\":{\"759\":1}}],[\"将所有的节点进行二进制编码\",{\"1\":{\"1169\":1}}],[\"将所有的the替换为my\",{\"1\":{\"751\":1}}],[\"将所有入度为0的节点放入队列中\",{\"1\":{\"86\":1}}],[\"将虚拟机连接到了\",{\"1\":{\"729\":1}}],[\"将虚拟地址分解为页号和页内偏移\",{\"1\":{\"252\":1}}],[\"将虚拟地址转化为物理地址\",{\"1\":{\"251\":1}}],[\"将无法直接加载或删除该模块\",{\"1\":{\"719\":1}}],[\"将运行容器内部的\",{\"1\":{\"610\":1}}],[\"将其看成一个虚拟的温度\",{\"1\":{\"1590\":1}}],[\"将其标记为\",{\"1\":{\"1385\":1}}],[\"将其引用的对象也标记为\",{\"1\":{\"1385\":1}}],[\"将其整合到你的工作成果中\",{\"1\":{\"1250\":1}}],[\"将其用于无线感知系统的监督信号\",{\"1\":{\"1132\":1}}],[\"将其融合以获得精度的提升\",{\"1\":{\"1012\":1}}],[\"将其与预测的值进行比较\",{\"1\":{\"603\":1}}],[\"将其符号位扩展\",{\"1\":{\"529\":1}}],[\"将预测的值和从内存中检索出来的值进行比较\",{\"1\":{\"602\":1}}],[\"将资源从性能不佳的预测器重新分配到性能更好的预测器\",{\"1\":{\"581\":1}}],[\"将指令分为了两类\",{\"1\":{\"576\":1}}],[\"将指令存储在\",{\"1\":{\"245\":1}}],[\"将更多的硅面积用于提高单线程的性能是值得的\",{\"1\":{\"542\":1}}],[\"将当前线程加入\",{\"1\":{\"1293\":1}}],[\"将当前\",{\"1\":{\"530\":1}}],[\"将内存中的值读入寄存器中\",{\"1\":{\"527\":1}}],[\"将内存中的数据放入缓存的数据部分\",{\"1\":{\"212\":1}}],[\"将栈内存\",{\"1\":{\"524\":1}}],[\"将寄存器中的值写入到内存中\",{\"1\":{\"532\":1,\"533\":1}}],[\"将寄存器\",{\"1\":{\"524\":4,\"532\":1,\"533\":1}}],[\"将寄存器上下文和栈保存到其他地方\",{\"1\":{\"282\":1}}],[\"将根据计算结果更新\",{\"1\":{\"514\":1}}],[\"将一个\",{\"1\":{\"530\":1}}],[\"将一个字符串中的每个空格替换成\",{\"1\":{\"481\":1}}],[\"将一个列表中的整数转化成字符串存储如另一个列表中\",{\"1\":{\"393\":1}}],[\"将该函数进行分解\",{\"1\":{\"1520\":1}}],[\"将该位置指向链表头的位置\",{\"1\":{\"460\":1}}],[\"将该元素放置于字典的尾部\",{\"1\":{\"406\":1}}],[\"将来可以添加进来\",{\"1\":{\"236\":1}}],[\"将以后需要的数据提前搬到处理器内部\",{\"1\":{\"226\":1}}],[\"将经常访问的数据放在距离处理器更近的地方\",{\"1\":{\"192\":1}}],[\"将哪些物品装入背包\",{\"1\":{\"127\":1}}],[\"将第一维压缩后便得到和代码相同的递推公式\",{\"1\":{\"120\":1}}],[\"将第\",{\"1\":{\"117\":1}}],[\"将\",{\"1\":{\"88\":1,\"89\":1,\"91\":4,\"169\":1,\"202\":1,\"220\":1,\"245\":2,\"302\":2,\"303\":1,\"460\":1,\"528\":1,\"601\":1,\"602\":1,\"618\":1,\"621\":1,\"669\":1,\"743\":1,\"881\":1,\"987\":1,\"1020\":1,\"1308\":2,\"1316\":1,\"1333\":1,\"1341\":1}}],[\"将结果放在结果集的头部\",{\"1\":{\"60\":1}}],[\"将在当前目录中建立一个venv目录\",{\"1\":{\"854\":1}}],[\"将在\",{\"1\":{\"34\":1}}],[\"踢\",{\"1\":{\"59\":1}}],[\"上寄存器的数量\",{\"1\":{\"1620\":1}}],[\"上锁\",{\"1\":{\"1607\":1}}],[\"上文也研究过了\",{\"1\":{\"1575\":1}}],[\"上文有图\",{\"1\":{\"1567\":1}}],[\"上文已经提及了\",{\"1\":{\"665\":1}}],[\"上图主要阐述了这\",{\"1\":{\"1562\":1}}],[\"上图中的结果需要注意的几点在于\",{\"1\":{\"664\":1}}],[\"上段文字提到了固件的更新可以通过\",{\"1\":{\"1501\":1}}],[\"上的寄存器远远多于\",{\"1\":{\"1620\":1}}],[\"上的定时事件设备\",{\"1\":{\"1545\":1}}],[\"上的所有进程中暂停当前进程\",{\"1\":{\"1522\":1}}],[\"上的\",{\"1\":{\"1413\":1,\"1545\":1}}],[\"上的数据\",{\"1\":{\"648\":1}}],[\"上楼\",{\"1\":{\"1132\":1}}],[\"上对该模型进行了训练和测试\",{\"1\":{\"1012\":1}}],[\"上表表示收集的csi信号的解析结果\",{\"1\":{\"1012\":1}}],[\"上标准的\",{\"1\":{\"979\":1}}],[\"上三层的主要任务是数据处理\",{\"1\":{\"977\":1}}],[\"上开启\",{\"1\":{\"618\":1}}],[\"上下文是否感知的\",{\"1\":{\"583\":1}}],[\"上下文切换\",{\"1\":{\"282\":1}}],[\"上层会传递\",{\"1\":{\"1314\":1}}],[\"上层会进行传递\",{\"1\":{\"288\":1}}],[\"上层的设备是如何与该入口函数对应起来的呢\",{\"1\":{\"1307\":1}}],[\"上层组件的\",{\"1\":{\"559\":1}}],[\"上包含了实际的预测\",{\"1\":{\"545\":1}}],[\"上\",{\"1\":{\"523\":1,\"545\":1,\"1490\":1,\"1545\":1}}],[\"上有题目可以使用该方法求解回文子串\",{\"1\":{\"390\":1}}],[\"上执行两个不同的操作\",{\"1\":{\"236\":1}}],[\"上如果有这份数据的复制\",{\"1\":{\"221\":1}}],[\"上也有类似的\",{\"1\":{\"165\":1}}],[\"上面对每一行代码进行了解析\",{\"1\":{\"1545\":1}}],[\"上面这段过程比较长\",{\"1\":{\"1507\":1}}],[\"上面这段话讲述了\",{\"1\":{\"604\":1}}],[\"上面这段话说明了\",{\"1\":{\"601\":1}}],[\"上面出现了一个\",{\"1\":{\"1426\":1}}],[\"上面列举了两个函数\",{\"1\":{\"1366\":1}}],[\"上面下载加速工具\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"上面各个参数的含义是每训练100轮后学习率乘以0\",{\"1\":{\"1212\":1}}],[\"上面尽管可以减少滑动窗口的计算量\",{\"1\":{\"1153\":1}}],[\"上面提到过超时重传和接收到\",{\"1\":{\"987\":1}}],[\"上面\",{\"1\":{\"729\":1,\"1483\":1}}],[\"上面新的逻辑\",{\"1\":{\"702\":1}}],[\"上面安装了\",{\"1\":{\"614\":1}}],[\"上面执行搜索以避免内存访问\",{\"1\":{\"603\":1}}],[\"上面阐述了三个预测器的实现细节和缺点\",{\"1\":{\"556\":1}}],[\"上面就是\",{\"1\":{\"514\":1}}],[\"上面的例子太麻烦了\",{\"1\":{\"1441\":1}}],[\"上面的过程中会存在一个问题\",{\"1\":{\"1380\":1}}],[\"上面的v\",{\"1\":{\"938\":1}}],[\"上面的解析结果可以分为几个部分\",{\"1\":{\"664\":1}}],[\"上面的\",{\"1\":{\"418\":1,\"1544\":1}}],[\"上面的作用域作用于函数\",{\"1\":{\"379\":1}}],[\"上面代码中使用了\",{\"1\":{\"360\":1}}],[\"上面代码\",{\"1\":{\"326\":1}}],[\"上面代码求出的前缀和\",{\"1\":{\"147\":1}}],[\"上面函数的作用是读取文件中的每一行\",{\"1\":{\"289\":1}}],[\"上面题目是最大最小问题\",{\"1\":{\"134\":1}}],[\"上面题目求解的是凑成目标数量所需要的最小硬币数\",{\"1\":{\"134\":1}}],[\"上一层\",{\"1\":{\"59\":1}}],[\"上述这四类通知链的基本\",{\"1\":{\"1577\":1}}],[\"上述这段话定义了\",{\"1\":{\"543\":1}}],[\"上述应该在一个\",{\"1\":{\"1553\":1}}],[\"上述中的\",{\"1\":{\"1483\":1}}],[\"上述中就是一个对称的二叉树\",{\"1\":{\"52\":1}}],[\"上述是百度百科对于\",{\"1\":{\"1469\":1}}],[\"上述很好理解\",{\"1\":{\"1388\":1}}],[\"上述等待的实现称作\",{\"1\":{\"1381\":1}}],[\"上述函数采取了单例模式\",{\"1\":{\"1333\":1}}],[\"上述函数使用\",{\"1\":{\"705\":1,\"1400\":1}}],[\"上述操作只是删除了远程服务器上的分支指针\",{\"1\":{\"1253\":1}}],[\"上述过程中涉及到计算密文enc\",{\"1\":{\"1169\":1}}],[\"上述描述较为清晰\",{\"1\":{\"676\":1}}],[\"上述描述暂时不是很关键\",{\"1\":{\"236\":1}}],[\"上述命令可以对我们的\",{\"1\":{\"664\":1}}],[\"上述命令的字段含义是\",{\"1\":{\"610\":1}}],[\"上述预编译的代码会被一直使用\",{\"1\":{\"662\":1}}],[\"上述介绍了\",{\"1\":{\"599\":1}}],[\"上述两个例子都是举例说明了\",{\"1\":{\"584\":1}}],[\"上述文字说了一个问题\",{\"1\":{\"687\":1}}],[\"上述文字说明了\",{\"1\":{\"556\":1}}],[\"上述文字先是描述了对象头结构中都包含了哪些信息\",{\"1\":{\"675\":1}}],[\"上述文字的意思是说如果我们修改了\",{\"1\":{\"658\":1}}],[\"上述文字在陈述\",{\"1\":{\"559\":1}}],[\"上述文字主要描述了实验结果\",{\"1\":{\"552\":1}}],[\"上述文字严格定义了\",{\"1\":{\"234\":1}}],[\"上述话说明了保持一致的策略\",{\"1\":{\"602\":1}}],[\"上述话说明了\",{\"1\":{\"547\":1}}],[\"上述作者将\",{\"1\":{\"545\":1}}],[\"上述也是原文中的摘录\",{\"1\":{\"543\":1}}],[\"上述汇编的含义为\",{\"1\":{\"521\":1}}],[\"上述的字段在\",{\"1\":{\"1464\":1}}],[\"上述的\",{\"1\":{\"1462\":1}}],[\"上述的方式较新\",{\"1\":{\"325\":1}}],[\"上述的访存地址计算的方式是适用于页虚拟存储器\",{\"1\":{\"198\":1}}],[\"上述的说明属于比较专业的说法\",{\"1\":{\"198\":1}}],[\"上述的例子说明了\",{\"1\":{\"194\":1}}],[\"上述的判断语句\",{\"1\":{\"153\":1}}],[\"上述的解法会导致超时\",{\"1\":{\"74\":1}}],[\"上述代码为拷贝过来的\",{\"1\":{\"1598\":1}}],[\"上述代码定义了一个名为\",{\"1\":{\"1529\":1}}],[\"上述代码需要产生\",{\"1\":{\"1440\":1}}],[\"上述代码会创建出一个\",{\"1\":{\"1422\":2}}],[\"上述代码的作用是\",{\"1\":{\"904\":1}}],[\"上述代码的预取位置在\",{\"1\":{\"508\":1}}],[\"上述代码的理解应该包括一下几点\",{\"1\":{\"418\":1}}],[\"上述代码的两种解法都是可以的\",{\"1\":{\"34\":1}}],[\"上述代码实现了一个求解某序列是否在键盘的同一行的操作\",{\"1\":{\"343\":1}}],[\"上述代码中有些细节需要注意\",{\"1\":{\"329\":1}}],[\"上述代码中有几个细节需要注意\",{\"1\":{\"88\":1}}],[\"上述代码把\",{\"1\":{\"293\":1}}],[\"上述代码行将文件的标准输出重定向到名为\",{\"1\":{\"291\":1}}],[\"上述代码我们实现了一个自定义的比较函数\",{\"1\":{\"173\":1}}],[\"上述代码是经过了状态压缩后的结果\",{\"1\":{\"120\":1}}],[\"上述代码有几个关键点我们需要注意的\",{\"1\":{\"92\":1}}],[\"上述\",{\"1\":{\"73\":1,\"1463\":1}}],[\"上述做法使用了一个\",{\"1\":{\"56\":1}}],[\"上述二叉树的中序遍历结果是\",{\"1\":{\"46\":1}}],[\"上述就是递归实现的而阐述的前序遍历\",{\"1\":{\"42\":1}}],[\"还初始化了\",{\"1\":{\"1499\":1}}],[\"还指的是\",{\"1\":{\"1498\":1}}],[\"还会包括cpu\",{\"1\":{\"1600\":1}}],[\"还会包括一个段表\",{\"1\":{\"1460\":1}}],[\"还会跟随一个\",{\"1\":{\"675\":1}}],[\"还尚不清楚这里是否发生了翻转❌\",{\"1\":{\"1388\":1}}],[\"还请各位大佬不吝赐教\",{\"1\":{\"1359\":1}}],[\"还没有数据\",{\"1\":{\"1333\":1}}],[\"还没被遍历到的\",{\"1\":{\"59\":1}}],[\"还是指向下一个节点的\",{\"1\":{\"1567\":1}}],[\"还是计算一下能不能足够加载\",{\"1\":{\"1492\":1}}],[\"还是离不开这个啊\",{\"1\":{\"1413\":1}}],[\"还是\",{\"1\":{\"1293\":1,\"1471\":1}}],[\"还是同等对待所有的框\",{\"1\":{\"1157\":1}}],[\"还是区分每个类别\",{\"1\":{\"1157\":1}}],[\"还是建议使用\",{\"1\":{\"430\":1}}],[\"还不错\",{\"1\":{\"1046\":1}}],[\"还告诉我们一个数据包离开网络顺利到达接受者\",{\"1\":{\"987\":1}}],[\"还列举了\",{\"1\":{\"801\":1}}],[\"还在创建中\",{\"1\":{\"884\":1}}],[\"还在一处出现\",{\"1\":{\"707\":1,\"1405\":1}}],[\"还在使用旧值\",{\"1\":{\"220\":1}}],[\"还记得上一步中我们获得的\",{\"1\":{\"693\":1}}],[\"还存在一个云管理平台\",{\"1\":{\"641\":1}}],[\"还包括了链接时所需要的一些信息\",{\"1\":{\"1460\":1}}],[\"还包括\",{\"1\":{\"562\":1}}],[\"还需要根据调用继续理解\",{\"1\":{\"1573\":1}}],[\"还需要再深入理解一下\",{\"1\":{\"584\":1}}],[\"还需要进行深入的思考\",{\"1\":{\"559\":1}}],[\"还需要多多理解\",{\"1\":{\"89\":1}}],[\"还必须在每个乱序的阶段传播\",{\"1\":{\"549\":1}}],[\"还提供了更多功能和更全面的\",{\"1\":{\"411\":1}}],[\"还可以参考github官方示例\",{\"1\":{\"1248\":1}}],[\"还可以将指定分类为可预测和不可预测\",{\"1\":{\"576\":1}}],[\"还可以用\",{\"1\":{\"445\":1}}],[\"还可以传入多组参数进行参数化校验\",{\"1\":{\"375\":1}}],[\"还可以进行稽核之间的运算\",{\"1\":{\"343\":1}}],[\"还可以使用更多的迭代器\",{\"1\":{\"311\":1}}],[\"还可以再研究一下\",{\"1\":{\"173\":1}}],[\"还剩下多少物品需要购买\",{\"1\":{\"102\":1}}],[\"还有很多类似的定义\",{\"1\":{\"1553\":1}}],[\"还有几个问题需要解决的\",{\"1\":{\"1450\":1}}],[\"还有基本类型\",{\"1\":{\"691\":1}}],[\"还有用法如下\",{\"1\":{\"521\":1}}],[\"还有不为\",{\"1\":{\"520\":1}}],[\"还有一点就是\",{\"1\":{\"1357\":1}}],[\"还有一点\",{\"1\":{\"1353\":1,\"1424\":1}}],[\"还有一点是有些系统只能绘制出静态的人体行为的表述\",{\"1\":{\"1131\":1}}],[\"还有一些其他的方法可以指定要测试的具体函数\",{\"1\":{\"372\":1}}],[\"还有一个不利因素\",{\"1\":{\"1357\":1}}],[\"还有一个优点是论文作者引以为傲的\",{\"1\":{\"1356\":1}}],[\"还有一个例子可以参考这里\",{\"1\":{\"408\":1}}],[\"还有一个问题就是较大的页面可能会延长调用一个进程的时间\",{\"1\":{\"258\":1}}],[\"还有一个\",{\"1\":{\"173\":1,\"1460\":1}}],[\"还有一种分类可以通过内核源码中\",{\"1\":{\"1586\":1}}],[\"还有一种其他的\",{\"1\":{\"1293\":1}}],[\"还有一种容器虚拟化方案\",{\"1\":{\"724\":1}}],[\"还有一种技术是\",{\"1\":{\"550\":1}}],[\"还有一种解法是\",{\"1\":{\"52\":1}}],[\"还有一种不是很\",{\"1\":{\"42\":1}}],[\"还有\",{\"1\":{\"75\":1,\"764\":1}}],[\"直译为内部集成电路\",{\"1\":{\"1507\":1}}],[\"直译为计算机外围设备\",{\"1\":{\"1502\":1}}],[\"直到下一个中断事件发生后才会继续执行\",{\"1\":{\"1537\":1}}],[\"直到rcu保护区被清空\",{\"1\":{\"1524\":1}}],[\"直到固件\",{\"1\":{\"1474\":1}}],[\"直到收到应答消息\",{\"1\":{\"1333\":1}}],[\"直到收到正确的回应\",{\"1\":{\"988\":1}}],[\"直到处理完所有的检测框\",{\"1\":{\"1157\":1}}],[\"直到这两个向量的功率时延谱基本上保持一致就可以消除\",{\"1\":{\"1024\":1}}],[\"直到这些预测被\",{\"1\":{\"550\":1}}],[\"直到把完整的数据发送给应用层的\",{\"1\":{\"976\":1}}],[\"直到读完缓冲区中的数据\",{\"1\":{\"956\":1}}],[\"直到\",{\"1\":{\"951\":1,\"987\":1}}],[\"直到llvm普及之前\",{\"1\":{\"690\":1}}],[\"直到字节码变成符合\",{\"1\":{\"662\":1}}],[\"直到他们不再投机\",{\"1\":{\"550\":1}}],[\"直到不满足要求\",{\"1\":{\"168\":1}}],[\"直接执行\",{\"1\":{\"1445\":1}}],[\"直接是封装数据\",{\"1\":{\"1328\":1}}],[\"直接回复\",{\"1\":{\"983\":1}}],[\"直接取决于底层的限制\",{\"1\":{\"979\":1}}],[\"直接丢弃之而不需要通知发送端\",{\"1\":{\"976\":1}}],[\"直接创建\",{\"1\":{\"961\":1}}],[\"直接给循环增加\",{\"1\":{\"944\":1}}],[\"直接解析html\",{\"1\":{\"936\":1}}],[\"直接报错\",{\"1\":{\"827\":1}}],[\"直接插到现成的后端上\",{\"1\":{\"690\":1}}],[\"直接从这个\",{\"1\":{\"602\":1}}],[\"直接跳转到标签\",{\"1\":{\"517\":1}}],[\"直接搞定\",{\"1\":{\"478\":1}}],[\"直接加到链表头中\",{\"1\":{\"460\":1}}],[\"直接在\",{\"1\":{\"449\":1}}],[\"直接通过类来调用方法\",{\"1\":{\"421\":1}}],[\"直接操作栈没有内核切换的开销\",{\"1\":{\"282\":1}}],[\"直接进行进程间通信\",{\"1\":{\"252\":1}}],[\"直接获取数据的指令有\",{\"1\":{\"227\":1}}],[\"直接写为无效了\",{\"1\":{\"221\":1}}],[\"直接映射意味着确定的映射方式\",{\"1\":{\"201\":1}}],[\"直接映射\",{\"1\":{\"199\":1,\"206\":2}}],[\"直接暴力求解前缀和问题一般都会超时\",{\"1\":{\"156\":1}}],[\"直接找到满足条件的\",{\"1\":{\"153\":1}}],[\"直接用前缀和\",{\"0\":{\"152\":1}}],[\"直接看代码和测试用例\",{\"1\":{\"150\":1}}],[\"直接看代码实现\",{\"1\":{\"130\":1}}],[\"直接使用\",{\"1\":{\"88\":1,\"175\":1}}],[\"直接返回\",{\"1\":{\"74\":1}}],[\"直接递归\",{\"1\":{\"56\":1}}],[\"直观的思路是用set\",{\"1\":{\"13\":1}}],[\"用的原因是因为\",{\"1\":{\"1605\":1}}],[\"用一个流程图来形象化这个步骤\",{\"1\":{\"1605\":1}}],[\"用这两个接口是非常合适的\",{\"1\":{\"1517\":1}}],[\"用自己的异常向量替换\",{\"1\":{\"1498\":1}}],[\"用来确保线程看到最新的对象的值\",{\"1\":{\"1381\":1}}],[\"用来表示矩阵的乘法操作\",{\"1\":{\"1212\":1}}],[\"用来控制参考文献样式\",{\"1\":{\"1179\":1}}],[\"用户不感知的一个程序\",{\"1\":{\"1501\":1}}],[\"用户分配空间\",{\"1\":{\"1342\":1}}],[\"用户数据存储的复杂度一直为对数级\",{\"1\":{\"1170\":1}}],[\"用户将请求获取其右孩子节点\",{\"1\":{\"1169\":1}}],[\"用户解密得到32\",{\"1\":{\"1169\":1}}],[\"用户当前需要插入值为55的节点\",{\"1\":{\"1169\":1}}],[\"用户空间的虚拟地址\",{\"1\":{\"1341\":1}}],[\"用户空间拷贝问题\",{\"1\":{\"954\":1}}],[\"用户空间\",{\"1\":{\"251\":2}}],[\"用卷积层代替了全连接层\",{\"1\":{\"1153\":1}}],[\"用yolo来实现人脸识别算法\",{\"1\":{\"1151\":1}}],[\"用二进制表示就是\",{\"1\":{\"972\":1}}],[\"用到\",{\"1\":{\"741\":1,\"742\":1,\"743\":1}}],[\"用法和语法总结\",{\"0\":{\"1174\":1}}],[\"用法和\",{\"1\":{\"539\":1}}],[\"用数组表示\",{\"1\":{\"486\":1}}],[\"用两个队列实现一个栈\",{\"0\":{\"469\":1}}],[\"用两个栈实现一个队列\",{\"0\":{\"468\":1}}],[\"用了\",{\"1\":{\"236\":1}}],[\"用于指明事件的类型\",{\"1\":{\"1567\":1}}],[\"用于指示在\",{\"1\":{\"1534\":1}}],[\"用于标记数据\",{\"1\":{\"1553\":1}}],[\"用于标记函数\",{\"1\":{\"1553\":1}}],[\"用于进行\",{\"1\":{\"1540\":1}}],[\"用于将处理器置于等待状态\",{\"1\":{\"1537\":1}}],[\"用于跨多个\",{\"1\":{\"1529\":1}}],[\"用于定义一种特殊的变量类型\",{\"1\":{\"1529\":1}}],[\"用于定位数据在\",{\"1\":{\"205\":1}}],[\"用于停止内核关键代码段的性能计数和统计\",{\"1\":{\"1527\":1}}],[\"用于扫盲\",{\"1\":{\"1505\":1}}],[\"用于访问\",{\"1\":{\"1498\":1}}],[\"用于单独控制电源\",{\"1\":{\"1493\":1}}],[\"用于设置当前\",{\"1\":{\"1523\":1}}],[\"用于设置\",{\"1\":{\"1484\":1}}],[\"用于热启动\",{\"1\":{\"1481\":1}}],[\"用于描述该空闲状态标识的一些特定属性\",{\"1\":{\"1521\":1}}],[\"用于描述文件中各个段的数组\",{\"1\":{\"1460\":1}}],[\"用于描述目标机器信息的一个元组\",{\"1\":{\"692\":1}}],[\"用于编译\",{\"1\":{\"1445\":1}}],[\"用于编译器区分不用\",{\"1\":{\"692\":1}}],[\"用于接收客户端数据\",{\"1\":{\"1344\":1}}],[\"用于物理页回收\",{\"1\":{\"1340\":1}}],[\"用于检测\",{\"1\":{\"1333\":1}}],[\"用于检验\",{\"1\":{\"978\":1}}],[\"用于向\",{\"1\":{\"1311\":1}}],[\"用于向后兼容旧版本的\",{\"1\":{\"824\":1}}],[\"用于控制模型的更新速度\",{\"1\":{\"1185\":1}}],[\"用于代替特征化的图像金字塔能在不牺牲表达能力\",{\"1\":{\"1022\":1}}],[\"用于衡量\",{\"1\":{\"1021\":1}}],[\"用于矫正\",{\"1\":{\"1020\":1}}],[\"用于结合\",{\"1\":{\"1012\":1}}],[\"用于传输过程中大量丢包的情况\",{\"1\":{\"978\":1}}],[\"用于开启\",{\"1\":{\"879\":1}}],[\"用于实现大部分官方的命令\",{\"1\":{\"824\":1}}],[\"用于实现\",{\"1\":{\"824\":1}}],[\"用于其他\",{\"1\":{\"763\":2}}],[\"用于负载均衡的时候\",{\"1\":{\"763\":1}}],[\"用于后端服务器性能不均的情况\",{\"1\":{\"763\":1}}],[\"用于表示对象移动到的新的内存地址\",{\"1\":{\"1380\":1}}],[\"用于表示\",{\"1\":{\"670\":1}}],[\"用于表示偏移量\",{\"1\":{\"198\":1}}],[\"用于金融\",{\"1\":{\"643\":1}}],[\"用于时延较低\",{\"1\":{\"643\":1}}],[\"用于对某个指令分类\",{\"1\":{\"576\":1}}],[\"用于用于决定是否进行预测\",{\"1\":{\"575\":1}}],[\"用于计算每一个\",{\"1\":{\"978\":1}}],[\"用于计算精度要求较高的计算\",{\"1\":{\"643\":1}}],[\"用于计算实际要读取的内存地址\",{\"1\":{\"529\":1}}],[\"用于计算分支目标的地址\",{\"1\":{\"245\":1}}],[\"用于从存储器中将一个\",{\"1\":{\"524\":1}}],[\"用于存储单例模式下创建的\",{\"1\":{\"884\":1}}],[\"用于存储对象自身的运行时数据\",{\"1\":{\"676\":1}}],[\"用于存储待读取数据的内存地址\",{\"1\":{\"529\":1}}],[\"用于存储从内存中读取的带符号整数\",{\"1\":{\"529\":1}}],[\"用于存储最终结果\",{\"1\":{\"486\":1}}],[\"用于存储\",{\"1\":{\"460\":1,\"534\":1}}],[\"用于处理一些文件日志功能\",{\"1\":{\"406\":1}}],[\"用于统计字符串里某个字符出现的次数\",{\"1\":{\"392\":1}}],[\"用于创建字符映射的转换表\",{\"1\":{\"390\":1}}],[\"用于运行时动态修改类或模块\",{\"1\":{\"383\":1}}],[\"用于捕获程序中\",{\"1\":{\"383\":1}}],[\"用于捕获\",{\"1\":{\"383\":1}}],[\"用于说明该\",{\"1\":{\"1534\":1}}],[\"用于说明\",{\"1\":{\"288\":1}}],[\"用于确定页表中数据的具体位置\",{\"1\":{\"262\":1}}],[\"用于索引\",{\"1\":{\"261\":1}}],[\"用于加速虚拟地址到物理地址的映射过程\",{\"1\":{\"258\":1}}],[\"用于追踪最近使用过的地址转化\",{\"1\":{\"255\":1}}],[\"用于保存下一个顺序\",{\"1\":{\"245\":1}}],[\"用于保存后续时钟周期所需的指令\",{\"1\":{\"245\":1}}],[\"用于在多个进程间共享数据\",{\"1\":{\"1524\":1}}],[\"用于在预测正确或者错误的时候饱和计数器自增或者自减\",{\"1\":{\"576\":1}}],[\"用于在\",{\"1\":{\"217\":1}}],[\"用于\",{\"1\":{\"204\":1,\"224\":1,\"261\":1,\"1479\":1}}],[\"用于能够生成所有可能的并且\",{\"1\":{\"9\":1}}],[\"用\",{\"1\":{\"59\":1,\"393\":1,\"478\":1,\"695\":1,\"728\":1,\"1395\":1}}],[\"用公式表达是\",{\"1\":{\"56\":1}}],[\"加入全局链表\",{\"1\":{\"1607\":1}}],[\"加入到当前线程队列\",{\"1\":{\"1308\":1}}],[\"加入到目标队列\",{\"1\":{\"1308\":1}}],[\"加速工具\",{\"0\":{\"1265\":1,\"1647\":1}}],[\"加速\",{\"0\":{\"1236\":1}}],[\"加薪\",{\"1\":{\"1032\":1}}],[\"加油\",{\"1\":{\"1008\":1}}],[\"加密后不影响系统的原有功能\",{\"1\":{\"1168\":1}}],[\"加密密文\",{\"1\":{\"1111\":1}}],[\"加密算法\",{\"1\":{\"1111\":1}}],[\"加密\",{\"1\":{\"996\":1}}],[\"加密解密\",{\"1\":{\"977\":1}}],[\"加\",{\"1\":{\"982\":1}}],[\"加以处理\",{\"1\":{\"927\":1}}],[\"加以掌握\",{\"1\":{\"34\":1}}],[\"加上父类的\",{\"1\":{\"436\":1}}],[\"加上左右子树中的最大深度\",{\"1\":{\"56\":1}}],[\"加载可选的\",{\"1\":{\"1493\":1}}],[\"加载并且把控制权交给了\",{\"1\":{\"1490\":1}}],[\"加载的方法是调用\",{\"1\":{\"696\":1,\"1396\":1}}],[\"加载的时候\",{\"1\":{\"210\":1}}],[\"加载对应的\",{\"1\":{\"696\":1,\"1396\":1}}],[\"加载一个寄存器\",{\"1\":{\"524\":1}}],[\"加载\",{\"1\":{\"523\":1,\"693\":1,\"1371\":1,\"1494\":1}}],[\"加载运行的函数\",{\"1\":{\"377\":1}}],[\"加深理解\",{\"1\":{\"289\":1}}],[\"加深理解以后\",{\"1\":{\"118\":1}}],[\"加快地址转化\",{\"1\":{\"255\":1}}],[\"加减操作\",{\"1\":{\"180\":1}}],[\"终止态\",{\"1\":{\"736\":1}}],[\"终止条件\",{\"1\":{\"54\":1}}],[\"终点就是最靠近根节点的那个叶子节点\",{\"1\":{\"53\":1}}],[\"叶子节点的左右子节点都是\",{\"1\":{\"53\":1}}],[\"一致\",{\"1\":{\"1607\":1}}],[\"一致性协议\",{\"0\":{\"223\":1}}],[\"一致性\",{\"0\":{\"219\":1},\"1\":{\"831\":1}}],[\"一致性监听协议\",{\"1\":{\"190\":1}}],[\"一段时间\",{\"1\":{\"1541\":1}}],[\"一段物理内存或者其他对象映射到进程的虚拟地址空间\",{\"1\":{\"1318\":1}}],[\"一旦执行该指令就进入低功耗状态\",{\"1\":{\"1537\":1}}],[\"一旦确定就无法更改\",{\"1\":{\"1501\":1}}],[\"一旦预测的地址有了\",{\"1\":{\"603\":1}}],[\"一\",{\"1\":{\"1322\":1}}],[\"一文读懂\",{\"1\":{\"1322\":1}}],[\"一文轻松理解内存对齐↩︎\",{\"1\":{\"230\":1}}],[\"一切都变得非常简单\",{\"1\":{\"1278\":1}}],[\"一切通信都似乎不行\",{\"1\":{\"729\":1}}],[\"一是攻击者利用系统的漏洞或者非法权限访问数据库或云端\",{\"1\":{\"1166\":1}}],[\"一是这个边界框含有目标的可能性大小\",{\"1\":{\"1155\":1}}],[\"一类是基于region\",{\"1\":{\"1151\":1}}],[\"一有不慎可能会前功尽弃\",{\"1\":{\"1144\":1}}],[\"一点点提速\",{\"1\":{\"987\":1}}],[\"一次\",{\"1\":{\"980\":1,\"1419\":1}}],[\"一次测试只执行一次\",{\"1\":{\"379\":1}}],[\"一级缓存\",{\"0\":{\"883\":1},\"1\":{\"882\":1}}],[\"一套\",{\"1\":{\"725\":1}}],[\"一台虚拟机就是一个普通的\",{\"1\":{\"725\":1}}],[\"一种是降低产热量\",{\"1\":{\"1600\":1}}],[\"一种是加快散热\",{\"1\":{\"1600\":1}}],[\"一种是收到三个重复的\",{\"1\":{\"978\":1}}],[\"一种是超时重传\",{\"1\":{\"978\":1}}],[\"一种是基于寄存器的虚拟机\",{\"1\":{\"687\":1}}],[\"一种是基于堆栈\",{\"1\":{\"687\":1}}],[\"一种简明调用方式\",{\"1\":{\"844\":1}}],[\"一种或线性扫描的算法\",{\"1\":{\"689\":1}}],[\"一种上下文有关的\",{\"1\":{\"541\":1}}],[\"一步搞定\",{\"1\":{\"610\":1}}],[\"一样\",{\"1\":{\"525\":1,\"528\":1,\"1179\":1}}],[\"一周的第几天\",{\"1\":{\"291\":1}}],[\"一些容易忘的点\",{\"1\":{\"726\":1}}],[\"一些理解\",{\"1\":{\"542\":1}}],[\"一些常见的\",{\"1\":{\"266\":1}}],[\"一些系统使用直接映射\",{\"1\":{\"264\":1}}],[\"一路是直接映射\",{\"1\":{\"202\":1}}],[\"一刷\",{\"0\":{\"184\":1}}],[\"一篇文章吃透背包问题\",{\"1\":{\"140\":1}}],[\"一维背包的实现方式是\",{\"1\":{\"126\":1}}],[\"一共有\",{\"1\":{\"124\":1}}],[\"一和零\",{\"0\":{\"120\":1}}],[\"一只青蛙一次可以跳上1级台阶\",{\"1\":{\"103\":2}}],[\"一个处理器通常包含多种类型的寄存器\",{\"1\":{\"1620\":1}}],[\"一个标志\",{\"1\":{\"1534\":1}}],[\"一个接口\",{\"1\":{\"1474\":1}}],[\"一个对象创建后\",{\"1\":{\"1383\":1}}],[\"一个项目有很多优秀的从业者持续优化\",{\"1\":{\"1352\":1}}],[\"一个服务端\",{\"1\":{\"1352\":1}}],[\"一个服务器通常仅仅创建一个监听套接字\",{\"1\":{\"952\":1}}],[\"一个双向循环链表\",{\"1\":{\"1340\":1}}],[\"一个使用\",{\"1\":{\"1241\":1}}],[\"一个值得注意的点是nms是对所有预测框一视同仁\",{\"1\":{\"1157\":1}}],[\"一个人需要在身体的各个部分携带不同的无线感知设备以达到追踪的目的\",{\"1\":{\"1133\":1}}],[\"一个企业由什么组成\",{\"1\":{\"1031\":1}}],[\"一个融合视觉的wifi室内定位系统\",{\"1\":{\"1012\":1}}],[\"一个主机和另一个主机进行直接通信\",{\"1\":{\"993\":1}}],[\"一个拥塞窗口\",{\"1\":{\"987\":1}}],[\"一个字段长度为\",{\"1\":{\"972\":1}}],[\"一个函数\",{\"1\":{\"961\":2}}],[\"一个函数可以打多个标记\",{\"1\":{\"372\":1}}],[\"一个进程占一些\",{\"1\":{\"1353\":1}}],[\"一个进程想要执行另外一个程序\",{\"1\":{\"739\":1}}],[\"一个进程创建自身的副本\",{\"1\":{\"739\":1}}],[\"一个进程无法访问其他进程的地址空间\",{\"1\":{\"251\":1}}],[\"一个进程无法访问另一个进程的内存\",{\"1\":{\"251\":1}}],[\"一个线程只能属于一个进程\",{\"1\":{\"736\":1}}],[\"一个指令可以有一个或者多个操作数\",{\"1\":{\"691\":1}}],[\"一个继承于\",{\"1\":{\"691\":2}}],[\"一个程序会被编译成为一个\",{\"1\":{\"691\":1}}],[\"一个思路\",{\"1\":{\"690\":1}}],[\"一个负责具体的预测\",{\"1\":{\"603\":1}}],[\"一个负责分类\",{\"1\":{\"603\":1}}],[\"一个新的\",{\"1\":{\"559\":1}}],[\"一个新的计数器\",{\"1\":{\"543\":1}}],[\"一个include引起的惨案\",{\"1\":{\"522\":1}}],[\"一个做删除\",{\"1\":{\"468\":1}}],[\"一个做插入\",{\"1\":{\"468\":1}}],[\"一个或多个序列\",{\"1\":{\"393\":1}}],[\"一个用于保存\",{\"1\":{\"988\":1}}],[\"一个用于计算测试总耗时\",{\"1\":{\"380\":1}}],[\"一个用于统计每个函数运行时间\",{\"1\":{\"380\":1}}],[\"一个系统有\",{\"1\":{\"261\":1}}],[\"一个恶意进程不能写另一个用户进程或者操作系统的地址空间\",{\"1\":{\"253\":1}}],[\"一个\",{\"1\":{\"194\":2,\"460\":1,\"670\":1,\"691\":1,\"972\":1,\"998\":1,\"1355\":1,\"1383\":1,\"1475\":1,\"1534\":1,\"1590\":1,\"1601\":1}}],[\"一个长一个短\",{\"1\":{\"168\":1}}],[\"一个锁共有\",{\"1\":{\"88\":1}}],[\"一个正确的课程顺序是\",{\"1\":{\"86\":1}}],[\"一个空数组\",{\"1\":{\"86\":1}}],[\"一般寄存器由的数量由其可以承载的\",{\"1\":{\"1620\":1}}],[\"一般的名字都叫做\",{\"1\":{\"1460\":1}}],[\"一般都没有扩展名\",{\"1\":{\"1459\":1}}],[\"一般使用这个快速创建分支\",{\"1\":{\"1252\":1}}],[\"一般dacay越大模型越趋于稳定\",{\"1\":{\"1185\":1}}],[\"一般在实际中取32bit或者64bit\",{\"1\":{\"1169\":1}}],[\"一般在空旷环境下计算\",{\"1\":{\"1025\":1}}],[\"一般写作时复制如下代码\",{\"1\":{\"1111\":1}}],[\"一般与原始输入图像分辨率相等即可\",{\"1\":{\"1022\":1}}],[\"一般定义一个阈值\",{\"1\":{\"1021\":1}}],[\"一般作为测试的重点指标\",{\"1\":{\"1012\":1}}],[\"一般作为函数的入口\",{\"1\":{\"403\":1}}],[\"一般返回的内容都不超过\",{\"1\":{\"997\":1}}],[\"一般为常量\",{\"1\":{\"1464\":1}}],[\"一般为市面上常见的商用路由器即可\",{\"1\":{\"1144\":1}}],[\"一般为\",{\"1\":{\"997\":1}}],[\"一般至少为\",{\"1\":{\"988\":1}}],[\"一般需要等待\",{\"1\":{\"983\":1}}],[\"一般\",{\"1\":{\"983\":1}}],[\"一般网络接口都有一个\",{\"1\":{\"980\":1}}],[\"一般用来连接低速外设\",{\"1\":{\"1507\":1}}],[\"一般用不掉\",{\"1\":{\"962\":1}}],[\"一般用于获得地址\",{\"1\":{\"530\":1}}],[\"一般用于\",{\"1\":{\"344\":1}}],[\"一般只能处理几千的并发连接\",{\"1\":{\"954\":1}}],[\"一般业界使用\",{\"1\":{\"828\":1}}],[\"一般内核模块放置在lib\",{\"1\":{\"717\":1}}],[\"一般是应用层主动关闭的结果\",{\"1\":{\"978\":1}}],[\"一般是\",{\"1\":{\"695\":1,\"1395\":1}}],[\"一般是接受指令返回结果的局部变量\",{\"1\":{\"692\":1}}],[\"一般是本方法内的跳转\",{\"1\":{\"517\":1}}],[\"一般来说\",{\"1\":{\"691\":1,\"1142\":1,\"1253\":1}}],[\"一般判断单链表是否有环的方法是设置一块一慢两个指针\",{\"1\":{\"459\":1}}],[\"一般情况下我们会使用一个函数来返回它\",{\"1\":{\"408\":1}}],[\"一般情况下\",{\"1\":{\"408\":1,\"431\":1,\"933\":1,\"962\":1,\"987\":1,\"1157\":1}}],[\"一般这行代码会放在我们多进程完成以后的最后一句使用\",{\"1\":{\"286\":1}}],[\"一般会用到了递归的概念\",{\"1\":{\"73\":1}}],[\"一般而言这个\",{\"1\":{\"1240\":1}}],[\"一般而言\",{\"1\":{\"28\":1,\"88\":1,\"226\":1,\"377\":1,\"584\":1,\"691\":1,\"725\":1,\"1019\":1,\"1021\":1,\"1134\":1,\"1166\":1,\"1212\":1,\"1575\":1}}],[\"一组放入队列中\",{\"1\":{\"52\":1}}],[\"一组\",{\"1\":{\"52\":1}}],[\"反序列化的过程\",{\"1\":{\"1320\":1}}],[\"反real\",{\"1\":{\"1139\":1}}],[\"反向代理\",{\"0\":{\"761\":1}}],[\"反向搜索的时候\",{\"1\":{\"79\":1}}],[\"反向搜索\",{\"1\":{\"79\":1}}],[\"反而真正用于执行程序逻辑的\",{\"1\":{\"687\":1}}],[\"反而会上升\",{\"1\":{\"210\":1}}],[\"反之则存在非直接视距路径\",{\"1\":{\"1020\":1}}],[\"反之\",{\"1\":{\"518\":1,\"549\":1,\"1025\":1,\"1134\":1}}],[\"反之也一样\",{\"1\":{\"34\":1}}],[\"反例\",{\"1\":{\"51\":1}}],[\"当后台任务完成后\",{\"1\":{\"1585\":1}}],[\"当所有\",{\"1\":{\"1584\":1}}],[\"当所有对旧副本的访问都结束后\",{\"1\":{\"1524\":1}}],[\"当有事件发生的时候\",{\"1\":{\"1573\":1}}],[\"当有除了\",{\"1\":{\"1541\":1}}],[\"当事件发生时要执行的函数\",{\"1\":{\"1562\":1}}],[\"当出现需要处理的中断时\",{\"1\":{\"1541\":1}}],[\"当cpu处于rcu空闲状态时\",{\"1\":{\"1585\":1}}],[\"当cpu处于空闲状态时\",{\"1\":{\"1528\":1}}],[\"当cpu\",{\"1\":{\"1528\":2}}],[\"当系统需要重新唤醒\",{\"1\":{\"1523\":1}}],[\"当系统训练完成之后\",{\"1\":{\"1132\":1}}],[\"当两个进程要进行通信的时候\",{\"1\":{\"1355\":1}}],[\"当存在\",{\"1\":{\"1333\":1}}],[\"当缓存池没有现成的\",{\"1\":{\"1329\":1}}],[\"当同时没有输入和输出数据则直接返回\",{\"1\":{\"1301\":1}}],[\"当同时csi\",{\"1\":{\"1012\":1}}],[\"当服务端的进程启动时\",{\"1\":{\"1298\":1}}],[\"当服务器收到客户的确认包时\",{\"1\":{\"984\":1}}],[\"当服务器完成对某个客户的服务时\",{\"1\":{\"952\":1}}],[\"当应用程序需要与另一个进程通信时\",{\"1\":{\"1298\":1}}],[\"当你克隆一个远程仓库时\",{\"1\":{\"1253\":1}}],[\"当你创建一个新分支的时候会发生什么\",{\"1\":{\"1252\":1}}],[\"当分类问题只有一个正确答案时\",{\"1\":{\"1185\":1}}],[\"当分片后来自\",{\"1\":{\"981\":1}}],[\"当其置信度值不为0时才做出检测结果输出\",{\"1\":{\"1157\":1}}],[\"当该边界框包含目标时\",{\"1\":{\"1155\":1}}],[\"当该边界框是背景时\",{\"1\":{\"1155\":1}}],[\"当该队列满了以后\",{\"1\":{\"984\":1}}],[\"当人被物体完全遮挡的时候\",{\"1\":{\"1131\":1}}],[\"当目标在距离\",{\"1\":{\"1025\":1}}],[\"当发射端和接收端之间的目标产生轻微的运动时\",{\"1\":{\"1025\":1}}],[\"当发送天线发送数据包被接收天线接收到的过程中\",{\"1\":{\"1025\":1}}],[\"当发送的\",{\"1\":{\"981\":1}}],[\"当信号遇到多个干扰物体发生反射时\",{\"1\":{\"1019\":1}}],[\"当收到第三个重复的\",{\"1\":{\"987\":1}}],[\"当第三次握手服务端接收到\",{\"1\":{\"984\":1}}],[\"当第一次产生指令结果或者预测不正确的时候\",{\"1\":{\"577\":1}}],[\"当我们需要把函数\",{\"1\":{\"1551\":1}}],[\"当我们选择了\",{\"1\":{\"1365\":1}}],[\"当我们知道\",{\"1\":{\"1278\":1}}],[\"当我们\",{\"1\":{\"979\":1}}],[\"当我们创建了一个类的实例后\",{\"1\":{\"436\":1}}],[\"当我们创建一个类的实例时\",{\"1\":{\"431\":1}}],[\"当进程意外终止的时候\",{\"1\":{\"1459\":1}}],[\"当进程调用\",{\"1\":{\"951\":1}}],[\"当进程访问其虚拟地址空间中的某个页时\",{\"1\":{\"251\":1}}],[\"当函数返回时\",{\"1\":{\"950\":1}}],[\"当函数被调用时\",{\"1\":{\"950\":1}}],[\"当达到内存最大限制的时候\",{\"1\":{\"827\":1}}],[\"当做一个路由器来用\",{\"1\":{\"728\":1}}],[\"当程序需要快速启动和执行的时候\",{\"1\":{\"655\":1}}],[\"当代的\",{\"1\":{\"605\":1}}],[\"当真实的\",{\"1\":{\"603\":1}}],[\"当指令完成的时候\",{\"1\":{\"575\":1}}],[\"当指令的结果实际依赖于控制流的时候\",{\"1\":{\"559\":1}}],[\"当预测不是强制的时候\",{\"1\":{\"558\":1}}],[\"当执行\",{\"1\":{\"534\":1}}],[\"当作普通的二叉树处理\",{\"1\":{\"495\":1}}],[\"当字符串为we\",{\"1\":{\"481\":1}}],[\"当栈顶元素小于\",{\"1\":{\"467\":1}}],[\"当没有找到与\",{\"1\":{\"466\":1}}],[\"当内部作用域想修改外部作用域的变量时\",{\"1\":{\"418\":1}}],[\"当最短的迭代器遍历完成以后\",{\"1\":{\"396\":1}}],[\"当\",{\"1\":{\"261\":1,\"586\":1,\"761\":1,\"951\":1,\"1528\":1,\"1542\":1,\"1545\":1}}],[\"当一个进程需要修改共享数据时\",{\"1\":{\"1524\":1}}],[\"当一个对象和其本身引用的对象都被标记完成以后\",{\"1\":{\"1385\":1}}],[\"当一个线程读取一个对象的引用的时候\",{\"1\":{\"1381\":1}}],[\"当一个位置被命中以后\",{\"1\":{\"460\":1}}],[\"当一个内核修改了一份数据\",{\"1\":{\"222\":1}}],[\"当一个\",{\"1\":{\"221\":1}}],[\"当然我们还有基础的方法\",{\"1\":{\"1427\":1}}],[\"当然\",{\"1\":{\"1353\":1}}],[\"当然这个二进制的产物是没有可读性的\",{\"1\":{\"692\":1}}],[\"当然会了\",{\"1\":{\"218\":1}}],[\"当然也可以改变顺序\",{\"1\":{\"130\":1}}],[\"当然也可以使用上面的代码直接将结果反转\",{\"1\":{\"60\":1}}],[\"当区间和的值比较小的时候\",{\"1\":{\"165\":1}}],[\"当初始化为\",{\"1\":{\"160\":1}}],[\"当前温度\",{\"1\":{\"1597\":1}}],[\"当前的通知过后\",{\"1\":{\"1573\":1}}],[\"当前的工作目录必须是\",{\"1\":{\"1240\":1}}],[\"当前事件发生时还要继续指向的节点\",{\"1\":{\"1567\":1}}],[\"当前休眠\",{\"1\":{\"1545\":1}}],[\"当前线程没有传输并且\",{\"1\":{\"1316\":1}}],[\"当前实例的预测是依赖于指令先前出现指令的几次结果的\",{\"1\":{\"552\":1}}],[\"当前运算结果为\",{\"1\":{\"518\":1}}],[\"当前装下来的总价值\",{\"1\":{\"118\":1}}],[\"当前背包可用容量为\",{\"1\":{\"118\":1}}],[\"当前背包装不下\",{\"1\":{\"118\":1}}],[\"当前背包容量为\",{\"1\":{\"118\":1}}],[\"当遍历到一个新的深度\",{\"1\":{\"47\":1}}],[\"当它通过尝试发现\",{\"1\":{\"5\":1}}],[\"迭代\",{\"0\":{\"497\":1}}],[\"迭代循环的是\",{\"1\":{\"47\":1,\"59\":1}}],[\"迭代法\",{\"0\":{\"43\":1,\"46\":1},\"1\":{\"486\":1,\"487\":1}}],[\"qs\",{\"0\":{\"1584\":1},\"1\":{\"1584\":7,\"1586\":1}}],[\"qsee\",{\"1\":{\"1479\":1}}],[\"qsort\",{\"1\":{\"177\":3}}],[\"qqnumber\",{\"1\":{\"1091\":1}}],[\"qqbotsched\",{\"1\":{\"1095\":1}}],[\"qqbot\",{\"1\":{\"1055\":1,\"1091\":3}}],[\"qq\",{\"0\":{\"1090\":1},\"1\":{\"844\":1,\"1091\":1,\"1092\":1}}],[\"qty\",{\"1\":{\"793\":4}}],[\"qiniu\",{\"1\":{\"619\":1}}],[\"qian\",{\"1\":{\"491\":1}}],[\"qwertyuiop\",{\"1\":{\"343\":1}}],[\"qa\",{\"0\":{\"205\":1,\"425\":1,\"430\":1},\"1\":{\"192\":1}}],[\"quantized\",{\"1\":{\"1186\":1}}],[\"quiescent\",{\"1\":{\"1583\":1,\"1584\":1}}],[\"quit\",{\"1\":{\"748\":1,\"758\":1,\"1056\":1,\"1189\":1}}],[\"quite\",{\"1\":{\"547\":1,\"549\":3,\"552\":1,\"557\":1,\"783\":1}}],[\"quickly\",{\"1\":{\"255\":2,\"271\":1}}],[\"quick\",{\"0\":{\"177\":1},\"1\":{\"1085\":1}}],[\"questions\",{\"0\":{\"544\":1,\"975\":1},\"1\":{\"400\":1,\"1072\":1,\"1201\":1}}],[\"query\",{\"0\":{\"820\":1},\"1\":{\"150\":3,\"792\":1,\"820\":1,\"1055\":1}}],[\"queries\",{\"1\":{\"150\":6,\"155\":3,\"492\":1}}],[\"queues\",{\"1\":{\"341\":1,\"552\":2,\"828\":1,\"1509\":1}}],[\"queue\",{\"1\":{\"54\":6,\"84\":4,\"216\":1,\"341\":2,\"550\":1,\"951\":2,\"984\":3,\"1590\":1}}],[\"q\",{\"0\":{\"277\":1,\"593\":1},\"1\":{\"47\":7,\"52\":5,\"57\":5,\"59\":7,\"61\":6,\"80\":4,\"85\":4,\"86\":4,\"88\":9,\"89\":4,\"90\":5,\"91\":4,\"92\":5,\"593\":3,\"597\":2,\"1091\":1,\"1125\":1,\"1189\":2,\"1465\":1,\"1510\":2}}],[\"同步\",{\"1\":{\"1333\":1}}],[\"同步状态和标识\",{\"1\":{\"674\":1}}],[\"同组用户位\",{\"1\":{\"741\":1}}],[\"同等优化下的解释器速度\",{\"1\":{\"687\":1}}],[\"同\",{\"1\":{\"577\":1}}],[\"同时保证进程能够正确地切换\",{\"1\":{\"1522\":1}}],[\"同时允许主机处理器和外设之间的多点传输\",{\"1\":{\"1508\":1}}],[\"同时还有一个\",{\"1\":{\"1464\":1}}],[\"同时可以使收敛到的结果更加接近梯度下降的效果\",{\"1\":{\"1185\":1}}],[\"同时观测出环境中的反射\",{\"1\":{\"1132\":1}}],[\"同时兼顾误差和效率\",{\"1\":{\"1024\":1}}],[\"同时使用本文提到的三个优化算法可以获得很大的精度提升\",{\"1\":{\"1012\":1}}],[\"同时使用\",{\"1\":{\"997\":1}}],[\"同时将原始比特流转变为逻辑传输线路\",{\"1\":{\"977\":1}}],[\"同时加载多个配置文件等\",{\"1\":{\"873\":1}}],[\"同时也使得正常的连接请求无法被响应\",{\"1\":{\"988\":1}}],[\"同时也支持任务调度\",{\"1\":{\"841\":1}}],[\"同时也提高了可维护性\",{\"1\":{\"382\":1}}],[\"同时期的\",{\"1\":{\"605\":1}}],[\"同时牺牲了预测覆盖率\",{\"1\":{\"543\":1}}],[\"同时遍历两个链表\",{\"1\":{\"459\":1}}],[\"同时\",{\"1\":{\"411\":1,\"997\":1}}],[\"同时等待内存\",{\"1\":{\"212\":1}}],[\"同样逻辑的指令条数\",{\"1\":{\"687\":1}}],[\"同样逻辑的代码大小\",{\"1\":{\"687\":1}}],[\"同样\",{\"1\":{\"245\":1}}],[\"同样的\",{\"1\":{\"46\":1,\"520\":1}}],[\"同一条链上面的\",{\"1\":{\"1567\":1}}],[\"同一层\",{\"1\":{\"993\":1}}],[\"同一类线程共享代码和数据空间\",{\"1\":{\"736\":1}}],[\"同一宿主的虚拟机\",{\"1\":{\"728\":1}}],[\"同一时间只有一个获得\",{\"1\":{\"276\":1,\"279\":1}}],[\"同一个进程里面不同的线程主要是堆栈不同\",{\"1\":{\"282\":1}}],[\"同一个\",{\"1\":{\"236\":1}}],[\"同一树层上使用过的\",{\"1\":{\"11\":1}}],[\"同解法\",{\"1\":{\"144\":1}}],[\"了解的多吗\",{\"1\":{\"1632\":1}}],[\"了解预先设置的返回什么\",{\"1\":{\"1608\":1}}],[\"了解了基本构成以后\",{\"1\":{\"681\":1}}],[\"了解\",{\"1\":{\"667\":1}}],[\"了\",{\"1\":{\"46\":1,\"92\":1,\"208\":1,\"1048\":1,\"1386\":1,\"1419\":1,\"1448\":1,\"1541\":1}}],[\"到目前位置\",{\"1\":{\"1609\":1}}],[\"到其中\",{\"1\":{\"1609\":1}}],[\"到了\",{\"1\":{\"1474\":1}}],[\"到缓冲区\",{\"1\":{\"1342\":1}}],[\"到得到人类活动的2d图像的过程就要依赖于student模型发挥其作用\",{\"1\":{\"1137\":1}}],[\"到一定阈值的时候释放\",{\"1\":{\"988\":1}}],[\"到此为止\",{\"1\":{\"1333\":1}}],[\"到此\",{\"1\":{\"706\":1,\"1402\":1}}],[\"到底是怎么实现的呢\",{\"1\":{\"1389\":1}}],[\"到底\",{\"1\":{\"696\":1,\"1396\":1}}],[\"到达阈值以后\",{\"1\":{\"676\":1}}],[\"到下一条指令的地址\",{\"1\":{\"245\":1}}],[\"到终点\",{\"1\":{\"83\":1}}],[\"到\",{\"1\":{\"46\":1,\"86\":1,\"87\":1,\"252\":1,\"545\":1,\"724\":1,\"1326\":1,\"1327\":1,\"1331\":1,\"1334\":1,\"1380\":2,\"1474\":1}}],[\"右图简单展示了构建自顶向下架构的结构图\",{\"1\":{\"1022\":1}}],[\"右图表示\",{\"1\":{\"1012\":1}}],[\"右下图是带有5300网卡的信号接受和处理设备\",{\"1\":{\"1012\":1}}],[\"右边的属于容器\",{\"1\":{\"610\":1}}],[\"右边界\",{\"1\":{\"36\":1}}],[\"右子树的所有的节点的值大于根节点\",{\"1\":{\"1169\":1}}],[\"右子树的最左边的那个节点\",{\"1\":{\"499\":1}}],[\"右子树的最坐标节点找到\",{\"1\":{\"499\":1}}],[\"右子树都比他大\",{\"1\":{\"499\":1}}],[\"右子树\",{\"1\":{\"499\":2}}],[\"右的顺序返回各个节点\",{\"1\":{\"486\":1}}],[\"右括号\",{\"1\":{\"465\":1}}],[\"右移\",{\"1\":{\"400\":1}}],[\"右指针位置确定后\",{\"1\":{\"168\":1}}],[\"右指针滑动到最右边则不存在结果\",{\"1\":{\"168\":1}}],[\"右四个方向移动\",{\"1\":{\"74\":1}}],[\"右节点\",{\"1\":{\"499\":1}}],[\"右节点递归\",{\"1\":{\"49\":1}}],[\"右节点有\",{\"1\":{\"49\":1}}],[\"右节点没有\",{\"1\":{\"49\":1}}],[\"右\",{\"1\":{\"46\":1}}],[\"都经过一次静止态\",{\"1\":{\"1586\":1}}],[\"都没有了\",{\"1\":{\"1388\":1}}],[\"都变成了\",{\"1\":{\"1388\":1}}],[\"都不相同但是遵循均值为\",{\"1\":{\"1024\":1}}],[\"都不会起作用的\",{\"1\":{\"216\":1}}],[\"都描述了小尺度的多径效应\",{\"1\":{\"1020\":1}}],[\"都会对应一个\",{\"1\":{\"1533\":1}}],[\"都会产生一个新的\",{\"1\":{\"881\":1}}],[\"都会在本篇文章中进行收录\",{\"1\":{\"1392\":1}}],[\"都会在\",{\"1\":{\"390\":1}}],[\"都可能映射到同一个\",{\"1\":{\"601\":1}}],[\"都可以进行缓存\",{\"1\":{\"298\":1}}],[\"都含有一个饱和计数器\",{\"1\":{\"545\":1}}],[\"都使用逗号分隔开\",{\"1\":{\"504\":1}}],[\"都能复用这些数据库固件\",{\"1\":{\"382\":1}}],[\"都同时运行\",{\"1\":{\"234\":1}}],[\"都完成指令的一部分\",{\"1\":{\"234\":1}}],[\"都只能映射到\",{\"1\":{\"201\":1}}],[\"都有定义\",{\"1\":{\"1464\":1}}],[\"都有三个连续的\",{\"1\":{\"164\":1}}],[\"都有一个钥匙列表\",{\"1\":{\"75\":1}}],[\"都倒进去了\",{\"1\":{\"91\":1}}],[\"都信任小镇的法官\",{\"1\":{\"87\":1}}],[\"都是会进行\",{\"1\":{\"1519\":1}}],[\"都是整形\",{\"1\":{\"1471\":1}}],[\"都是保存在了\",{\"1\":{\"1428\":1}}],[\"都是采用非\",{\"1\":{\"1333\":1}}],[\"都是在进程\",{\"1\":{\"1293\":1}}],[\"都是利用\",{\"1\":{\"689\":1}}],[\"都是基于栈结构的\",{\"1\":{\"667\":1}}],[\"都是再后台运行的\",{\"1\":{\"653\":1}}],[\"都是很热门的考察点\",{\"1\":{\"477\":1}}],[\"都是\",{\"1\":{\"235\":1}}],[\"都是由\",{\"1\":{\"204\":1}}],[\"都是完全平方数\",{\"1\":{\"132\":1}}],[\"都是关于入度和出度的\",{\"1\":{\"87\":1}}],[\"都是被遍历完毕了\",{\"1\":{\"43\":1}}],[\"都应该排在课程\",{\"1\":{\"86\":1}}],[\"都递归\",{\"1\":{\"49\":1}}],[\"都放满\",{\"1\":{\"15\":1}}],[\"哈哈哈\",{\"1\":{\"1575\":1}}],[\"哈哈\",{\"1\":{\"42\":1}}],[\"二\",{\"1\":{\"1465\":1}}],[\"二是数据系统内部具有权限的数据管理员对于隐私信息的探查和泄露\",{\"1\":{\"1166\":1}}],[\"二是这个边界框的准确度\",{\"1\":{\"1155\":1}}],[\"二部分简单讲述一下室内定位的研究背景和相关理论\",{\"1\":{\"1012\":1}}],[\"二级缓存\",{\"0\":{\"884\":1},\"1\":{\"882\":1}}],[\"二进制首位为1111\",{\"1\":{\"973\":1}}],[\"二进制首位为1110\",{\"1\":{\"973\":1}}],[\"二进制首位为110\",{\"1\":{\"973\":1}}],[\"二进制首位为10\",{\"1\":{\"973\":1}}],[\"二进制首位为0\",{\"1\":{\"973\":1}}],[\"二进制\",{\"1\":{\"559\":1}}],[\"二进制编码如下\",{\"1\":{\"537\":1}}],[\"二叉平衡树要求其左右子树的高度差绝对值不超过1\",{\"1\":{\"1169\":1}}],[\"二叉搜索树的子树也是一个二叉搜索树\",{\"1\":{\"1169\":1}}],[\"二叉搜索树最早出现于本科学习当中的数据结构课程中\",{\"1\":{\"1169\":1}}],[\"二叉搜索树中序遍历出的结果是有序的\",{\"1\":{\"494\":1}}],[\"二叉树的左视图\",{\"1\":{\"1632\":1}}],[\"二叉树的直径\",{\"0\":{\"62\":1}}],[\"二叉树的锯齿形层序遍历\",{\"0\":{\"61\":1},\"1\":{\"61\":1}}],[\"二叉树的层序遍历ii\",{\"0\":{\"60\":1}}],[\"二叉树的层序遍历也会使用到\",{\"1\":{\"58\":1}}],[\"二叉树的层序遍历\",{\"0\":{\"58\":1},\"1\":{\"58\":1,\"60\":1}}],[\"二叉树的层次遍历\",{\"0\":{\"47\":1,\"489\":1},\"1\":{\"47\":1}}],[\"二叉树的最小高度\",{\"1\":{\"1170\":1}}],[\"二叉树的最小深度\",{\"0\":{\"53\":1},\"1\":{\"53\":1,\"88\":1}}],[\"二叉树的最大深度\",{\"0\":{\"55\":1},\"1\":{\"56\":1}}],[\"二叉树的中序遍历递归解法参考如下\",{\"1\":{\"45\":1}}],[\"二叉树的中序遍历\",{\"0\":{\"44\":1}}],[\"二叉树的前序遍历\",{\"0\":{\"41\":1,\"487\":1}}],[\"二叉树的三种遍历方式\",{\"1\":{\"40\":1}}],[\"二叉树相关的例题解析\",{\"1\":{\"40\":1}}],[\"二刷于\",{\"1\":{\"185\":1}}],[\"二刷\",{\"0\":{\"185\":1}}],[\"二刷的解法更加简洁\",{\"1\":{\"75\":1}}],[\"二维\",{\"1\":{\"118\":1}}],[\"二分的应用\",{\"1\":{\"1065\":1}}],[\"二分搜索\",{\"1\":{\"1064\":1,\"1065\":1}}],[\"二分搜索模板\",{\"0\":{\"18\":1}}],[\"二分\",{\"0\":{\"1065\":1},\"1\":{\"144\":1,\"1064\":1}}],[\"二分法\",{\"1\":{\"35\":2}}],[\"二分查找\",{\"1\":{\"33\":1,\"37\":1,\"1064\":1,\"1065\":1}}],[\"二分查找有序序列中某个元素的位置\",{\"1\":{\"26\":1}}],[\"二分查找思路整理\",{\"0\":{\"23\":1}}],[\"二分查找的边界\",{\"1\":{\"22\":1}}],[\"代理对象对应一个\",{\"1\":{\"1298\":1}}],[\"代理对象\",{\"1\":{\"1298\":1}}],[\"代表一个温控区间\",{\"1\":{\"1590\":1}}],[\"代表该网格所对应的\",{\"1\":{\"1021\":1}}],[\"代表的含义为\",{\"1\":{\"741\":1}}],[\"代表权限\",{\"1\":{\"741\":1}}],[\"代表生成括号的对数\",{\"1\":{\"9\":1}}],[\"代码量大\",{\"1\":{\"1540\":1}}],[\"代码可见\",{\"1\":{\"1534\":1}}],[\"代码可以如下所示\",{\"1\":{\"388\":1}}],[\"代码层面\",{\"1\":{\"1529\":1}}],[\"代码直接跳过\",{\"1\":{\"1526\":1}}],[\"代码段常见的名字有\",{\"1\":{\"1460\":1}}],[\"代码段等\",{\"1\":{\"282\":1}}],[\"代码第\",{\"1\":{\"1440\":1}}],[\"代码列举和文字之间关联度不高\",{\"1\":{\"1291\":1}}],[\"代码库\",{\"1\":{\"1240\":1}}],[\"代码块折叠\",{\"0\":{\"1110\":1}}],[\"代码之外的生存指南\",{\"1\":{\"1028\":1}}],[\"代码实现\",{\"1\":{\"956\":1}}],[\"代码实现可以参考\",{\"1\":{\"740\":1}}],[\"代码实现如下\",{\"1\":{\"47\":1,\"313\":1,\"468\":1}}],[\"代码有重构\",{\"1\":{\"702\":1}}],[\"代码的传输大小\",{\"1\":{\"688\":1}}],[\"代码转化成了\",{\"1\":{\"658\":1}}],[\"代码转化为二进制呢\",{\"1\":{\"657\":1}}],[\"代码\",{\"1\":{\"657\":1}}],[\"代码到\",{\"0\":{\"657\":1}}],[\"代码找到匹配行开始往下数的第\",{\"1\":{\"357\":1}}],[\"代码运行效率至关重要\",{\"1\":{\"280\":1}}],[\"代码也是可以通过的\",{\"1\":{\"130\":1}}],[\"代码如下所示\",{\"1\":{\"808\":1}}],[\"代码如下\",{\"1\":{\"51\":1,\"122\":1,\"124\":1,\"125\":1,\"132\":1,\"138\":1,\"289\":1,\"459\":1}}],[\"代码↩︎\",{\"1\":{\"37\":1}}],[\"注销接口\",{\"1\":{\"1532\":1}}],[\"注册函数\",{\"1\":{\"1601\":2}}],[\"注册函数的定义如下\",{\"1\":{\"1570\":1}}],[\"注册通知链回调函数的系统和提供通知链的系统之间一定存在某种联系\",{\"1\":{\"1580\":1}}],[\"注册的初始化函数\",{\"1\":{\"1557\":1}}],[\"注册的过程\",{\"1\":{\"704\":1,\"1399\":1}}],[\"注册和注销时\",{\"1\":{\"1534\":1}}],[\"注册\",{\"0\":{\"1404\":1},\"1\":{\"1601\":2,\"1605\":2,\"1607\":1}}],[\"注册死亡通知\",{\"1\":{\"1310\":1}}],[\"注解导入\",{\"1\":{\"879\":1}}],[\"注解修饰\",{\"1\":{\"705\":1,\"1400\":1}}],[\"注释里面给出了一些思考的点\",{\"1\":{\"36\":1}}],[\"注意最后调用\",{\"1\":{\"1605\":1}}],[\"注意主体\",{\"1\":{\"1386\":1}}],[\"注意要下载服务端对应的keptun\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"注意有中文版\",{\"1\":{\"1239\":1}}],[\"注意使用\",{\"1\":{\"1226\":1}}],[\"注意两点\",{\"1\":{\"944\":1}}],[\"注意其后面可以用+增加字符串\",{\"1\":{\"937\":1}}],[\"注意和主键不同\",{\"1\":{\"811\":1}}],[\"注意子进程结束时\",{\"1\":{\"738\":1}}],[\"注意传入的\",{\"1\":{\"664\":1}}],[\"注意在使用\",{\"1\":{\"926\":1}}],[\"注意在\",{\"1\":{\"558\":1}}],[\"注意只放入读取到的值的最低\",{\"1\":{\"528\":1}}],[\"注意加以区别\",{\"1\":{\"454\":1}}],[\"注意修改后退出不会保存修改的结果\",{\"1\":{\"367\":1}}],[\"注意经过测试\",{\"1\":{\"331\":1}}],[\"注意页表是在主存中\",{\"1\":{\"255\":1}}],[\"注意这个\",{\"1\":{\"1626\":1}}],[\"注意这个文件的名称\",{\"1\":{\"1414\":1}}],[\"注意这个是把新增的未保存到缓冲区的文件给删除掉\",{\"1\":{\"1242\":1}}],[\"注意这个和寄存器的读取是可以同时完成的\",{\"1\":{\"245\":1}}],[\"注意这里用加密文\",{\"1\":{\"1111\":1}}],[\"注意这里要注意原子性\",{\"1\":{\"833\":1}}],[\"注意这是加载而不是被使用\",{\"1\":{\"658\":1}}],[\"注意这边也使用了定语\",{\"1\":{\"551\":1}}],[\"注意这边下面两个条件是二选一的\",{\"1\":{\"20\":1,\"21\":1}}],[\"注意一下\",{\"1\":{\"212\":1}}],[\"注意一个\",{\"1\":{\"204\":1}}],[\"注意我们无论使用什么映射方式\",{\"1\":{\"196\":1}}],[\"注意理解这边\",{\"1\":{\"150\":1}}],[\"注意是\",{\"1\":{\"92\":1}}],[\"注意遍历顺序\",{\"1\":{\"61\":1}}],[\"注意到注册的时候要保证通知链存在\",{\"1\":{\"1570\":1}}],[\"注意到在\",{\"1\":{\"1534\":1,\"1567\":1}}],[\"注意到在我们的\",{\"1\":{\"1523\":1}}],[\"注意到在merge的时候会有提示\",{\"1\":{\"1252\":1}}],[\"注意到以上表格中的文件格式都可统一称为目标文件\",{\"1\":{\"1459\":1}}],[\"注意到以上的步骤仅仅是一个示意和参考\",{\"1\":{\"274\":1}}],[\"注意到因为\",{\"1\":{\"1440\":1}}],[\"注意到行数太长的时候我们可以进行换行\",{\"1\":{\"1440\":1}}],[\"注意到可以是任意命令\",{\"1\":{\"1439\":1}}],[\"注意到此时辉产生循环依赖\",{\"1\":{\"881\":1}}],[\"注意到有一行日志\",{\"1\":{\"707\":1,\"1405\":1}}],[\"注意到有些方法元数据中会出现\",{\"1\":{\"664\":1}}],[\"注意到如果要产生二进制码形式的\",{\"1\":{\"692\":1}}],[\"注意到如果直接从左右两边搜索还是会超时\",{\"1\":{\"150\":1}}],[\"注意到其中的\",{\"1\":{\"623\":1}}],[\"注意到其并行性\",{\"1\":{\"583\":1}}],[\"注意到我们简化了一长串的\",{\"1\":{\"499\":1}}],[\"注意到我们不改变\",{\"1\":{\"466\":1}}],[\"注意到我们的初始化\",{\"1\":{\"79\":1}}],[\"注意到上述是不考虑流水线的情况下的实现\",{\"1\":{\"245\":1}}],[\"注意到上述代码\",{\"1\":{\"77\":1}}],[\"注意到内存中是块存储的\",{\"1\":{\"200\":1}}],[\"注意到一个细节\",{\"1\":{\"165\":1}}],[\"注意到每个节点的入度我们都计算一下\",{\"1\":{\"86\":1}}],[\"注意到这只是用来启动\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"注意到这个接口是从\",{\"1\":{\"1474\":1}}],[\"注意到这个配置只需要配置一次就全局生效了\",{\"1\":{\"323\":1}}],[\"注意到这个回溯之前我们先进行了排序\",{\"1\":{\"10\":1}}],[\"注意到这里用到了\",{\"1\":{\"30\":1}}],[\"注意到\",{\"1\":{\"10\":1,\"27\":1,\"88\":1,\"390\":1,\"623\":1,\"738\":1,\"926\":1,\"933\":1,\"1597\":1}}],[\"注意\",{\"1\":{\"8\":1,\"274\":1,\"289\":1,\"430\":3,\"468\":1,\"478\":1,\"502\":1,\"543\":1,\"653\":2,\"1145\":1,\"1240\":1,\"1277\":1,\"1345\":1,\"1516\":1}}],[\"~binder\",{\"1\":{\"1316\":1}}],[\"~5\",{\"1\":{\"1228\":1}}],[\"~0\",{\"1\":{\"1228\":1}}],[\"~kriz\",{\"1\":{\"1216\":1}}],[\"~\",{\"1\":{\"36\":1,\"251\":4,\"337\":1,\"400\":1,\"450\":1,\"549\":3,\"732\":1,\"750\":1,\"759\":1,\"820\":1,\"854\":1,\"1073\":5,\"1074\":1,\"1237\":1,\"1239\":1,\"1248\":1,\"1259\":3,\"1479\":1,\"1483\":1,\"1635\":1}}],[\"已初始化的全局变量和局部静态变量\",{\"1\":{\"1460\":1}}],[\"已完成binder的死亡通知\",{\"1\":{\"1310\":1}}],[\"已完成\",{\"1\":{\"1068\":2}}],[\"已完成连接队列中的对头项将返回给进程\",{\"1\":{\"951\":1}}],[\"已完成连接的队列\",{\"1\":{\"951\":1}}],[\"已连接套接字由内核为每个服务器进程接受的客户端创建\",{\"1\":{\"952\":1}}],[\"已连接套接字\",{\"1\":{\"952\":1}}],[\"已经有很多年了\",{\"1\":{\"1352\":1}}],[\"已经考虑到了这个限制\",{\"1\":{\"981\":1}}],[\"已经是升序了\",{\"1\":{\"496\":1}}],[\"已经被修改了\",{\"1\":{\"220\":1}}],[\"已经被使用了\",{\"1\":{\"208\":1}}],[\"已经满了\",{\"1\":{\"216\":1}}],[\"已经取出了\",{\"1\":{\"47\":1}}],[\"已经大于\",{\"1\":{\"10\":1}}],[\"已知\",{\"1\":{\"36\":1}}],[\"求\",{\"0\":{\"475\":1}}],[\"求前缀和\",{\"1\":{\"155\":1,\"160\":1}}],[\"求出前缀和数组\",{\"1\":{\"152\":1}}],[\"求该青蛙跳上一个n级的台阶总共有多少种跳法\",{\"1\":{\"103\":2}}],[\"求解思路\",{\"1\":{\"168\":1}}],[\"求解前缀和数组出现相等地方的最大距离\",{\"1\":{\"159\":1}}],[\"求解代码如下所示\",{\"1\":{\"120\":1}}],[\"求解的是最大最小值问题\",{\"1\":{\"118\":1}}],[\"求解的一般套路是什么\",{\"1\":{\"73\":1}}],[\"求解将哪些物品装入背包可使价值总和最大\",{\"1\":{\"116\":1}}],[\"求解出来的答案是最小变化\",{\"1\":{\"92\":1}}],[\"求解问题可以总结为\",{\"1\":{\"73\":1}}],[\"求解\",{\"1\":{\"56\":1,\"73\":1,\"127\":1}}],[\"求解速度为\",{\"1\":{\"34\":1}}],[\"求根号\",{\"0\":{\"35\":1}}],[\"吃完所有香蕉所需要的时间\",{\"1\":{\"34\":1}}],[\"分类器的设计不能过于复杂\",{\"1\":{\"1153\":1}}],[\"分布\",{\"1\":{\"1025\":1}}],[\"分布式消息传输的异步任务队列\",{\"0\":{\"840\":1}}],[\"分布式集群\",{\"0\":{\"832\":1}}],[\"分布式的流行使得原单机部署情况下的并发控制策略失效\",{\"1\":{\"831\":1}}],[\"分布式锁的实现条件\",{\"1\":{\"831\":1}}],[\"分布式锁大致分为三种\",{\"1\":{\"831\":1}}],[\"分布式锁\",{\"0\":{\"830\":1,\"831\":1,\"833\":1}}],[\"分布式文件系统和网络文件系统\",{\"1\":{\"643\":1}}],[\"分布式数据库中间件\",{\"1\":{\"640\":1}}],[\"分布式缓存服务\",{\"1\":{\"640\":1}}],[\"分配一个指定大小的内存块\",{\"1\":{\"1345\":1}}],[\"分配\",{\"1\":{\"988\":2}}],[\"分片将会重新组装\",{\"1\":{\"981\":1}}],[\"分片和组装的过程对传输层是透明的\",{\"1\":{\"981\":1}}],[\"分片发生在\",{\"1\":{\"981\":1}}],[\"分片是受到了\",{\"1\":{\"981\":1}}],[\"分片\",{\"0\":{\"981\":1},\"1\":{\"981\":1}}],[\"分组传说\",{\"1\":{\"977\":1}}],[\"分节已由某个客户端发出并到达服务器\",{\"1\":{\"951\":1}}],[\"分割字符串\",{\"1\":{\"905\":1}}],[\"分割等和子集\",{\"0\":{\"121\":1,\"122\":1},\"1\":{\"114\":1}}],[\"分层架构使得开发者可以自由选择要使用的组件\",{\"1\":{\"869\":1}}],[\"分层编译\",{\"0\":{\"662\":1}}],[\"分离\",{\"1\":{\"815\":1}}],[\"分离的设计\",{\"1\":{\"198\":1}}],[\"分代年龄\",{\"1\":{\"676\":1}}],[\"分子建模等\",{\"1\":{\"643\":1}}],[\"分成了两类\",{\"1\":{\"545\":1}}],[\"分成了多个\",{\"1\":{\"202\":1}}],[\"分\",{\"1\":{\"402\":1}}],[\"分钟\",{\"1\":{\"291\":1,\"983\":2}}],[\"分支上进行了一些工作\",{\"1\":{\"1253\":1}}],[\"分支管理\",{\"0\":{\"1253\":1}}],[\"分支与合并\",{\"1\":{\"1252\":1}}],[\"分支机制是git的\",{\"1\":{\"1252\":1}}],[\"分支意味着偏离开发主线并继续你自己的工作而不影响主线开发\",{\"1\":{\"1252\":1}}],[\"分支控制流的方法会带有\",{\"1\":{\"664\":1}}],[\"分支的行为往往与导致分支行为的路径历史有关\",{\"1\":{\"586\":1}}],[\"分支\",{\"1\":{\"245\":1,\"1252\":1,\"1253\":1}}],[\"分支预测准确的概览也较大\",{\"1\":{\"1518\":1}}],[\"分支预测错误之后\",{\"1\":{\"243\":1}}],[\"分支预测的意义还需要再继续研究\",{\"1\":{\"241\":1}}],[\"分支预测\",{\"1\":{\"192\":1}}],[\"分段的原因和优点如下列举\",{\"1\":{\"1460\":1}}],[\"分段组合\",{\"1\":{\"977\":1}}],[\"分段\",{\"1\":{\"198\":1,\"981\":1}}],[\"分页\",{\"1\":{\"198\":1}}],[\"分左右\",{\"1\":{\"124\":1}}],[\"分析两种算法可以发现\",{\"1\":{\"1170\":1}}],[\"分析出的结果\",{\"1\":{\"664\":1}}],[\"分析这个反汇编文件中的指令\",{\"1\":{\"657\":1}}],[\"分析这个也是求解二分问题的关键\",{\"1\":{\"34\":1}}],[\"分析并进行安全检测\",{\"1\":{\"646\":1}}],[\"分析\",{\"1\":{\"125\":1,\"688\":1,\"1557\":1,\"1626\":1}}],[\"分析题目可知\",{\"1\":{\"122\":1,\"124\":1}}],[\"分别对应\",{\"1\":{\"1169\":1}}],[\"分别使用nms\",{\"1\":{\"1157\":1}}],[\"分别测试了四个环境的排列组合下系统的定位性能\",{\"1\":{\"1012\":1}}],[\"分别包含这三个\",{\"1\":{\"960\":1}}],[\"分别复制粘贴以下代码行到黑窗口运行即可\",{\"1\":{\"918\":1}}],[\"分别为\",{\"1\":{\"812\":1}}],[\"分别代表的含义是\",{\"1\":{\"559\":1}}],[\"分别阐述这几个预测器的优缺点\",{\"1\":{\"552\":1}}],[\"分别进行说明\",{\"1\":{\"388\":1}}],[\"分别表示振幅\",{\"1\":{\"1020\":1}}],[\"分别表示全局标识符和局部标识符\",{\"1\":{\"692\":1}}],[\"分别表示数据是否被修改和数据是否有效\",{\"1\":{\"224\":1}}],[\"分别表示背包\",{\"1\":{\"120\":1}}],[\"分别是基于\",{\"1\":{\"1012\":1}}],[\"分别是open\",{\"1\":{\"986\":1}}],[\"分别是计算\",{\"1\":{\"643\":1}}],[\"分别是\",{\"1\":{\"112\":1,\"825\":1,\"1012\":2,\"1551\":1}}],[\"分为几张图标进行说明\",{\"1\":{\"1393\":1}}],[\"分为了三类\",{\"1\":{\"602\":1}}],[\"分为\",{\"1\":{\"22\":1,\"971\":1,\"1586\":1}}],[\"左子树上的所有节点的值小于根节点\",{\"1\":{\"1169\":1}}],[\"左标项误差是没法计算的\",{\"1\":{\"1156\":1}}],[\"左图表示\",{\"1\":{\"1025\":1}}],[\"左边的属于宿主机\",{\"1\":{\"610\":1}}],[\"左根右\",{\"1\":{\"494\":1}}],[\"左括号\",{\"1\":{\"465\":1}}],[\"左括号必须以正确的顺序闭合\",{\"1\":{\"9\":1}}],[\"左移指令分两种\",{\"1\":{\"538\":1}}],[\"左移\",{\"1\":{\"400\":1}}],[\"左节点用空括号\",{\"1\":{\"49\":1}}],[\"左节点没有\",{\"1\":{\"49\":1}}],[\"左节点包裹后继续递归\",{\"1\":{\"49\":1}}],[\"左节点有\",{\"1\":{\"49\":1}}],[\"左右的和为\",{\"1\":{\"124\":1}}],[\"左右节点都有\",{\"1\":{\"49\":1}}],[\"左右节点都没有了\",{\"1\":{\"49\":1}}],[\"左右区间的取值\",{\"1\":{\"34\":1}}],[\"左\",{\"1\":{\"46\":1,\"74\":1,\"486\":1}}],[\"耗时太多\",{\"1\":{\"34\":1}}],[\"下文继续分析\",{\"1\":{\"1607\":1}}],[\"下文会结合定义的代码对其进行分析\",{\"1\":{\"1589\":1}}],[\"下文我们先对传入的两个\",{\"1\":{\"1544\":1}}],[\"下文是对代码中细节和原理的研究\",{\"1\":{\"1520\":1}}],[\"下文将对每一个都进行分析\",{\"1\":{\"1476\":1}}],[\"下混频\",{\"1\":{\"1125\":1}}],[\"下添加自定义的更新命令\",{\"1\":{\"1101\":1}}],[\"下可以配置\",{\"1\":{\"998\":1}}],[\"下次的重试间隔时间是前一次的双倍\",{\"1\":{\"985\":1}}],[\"下次执行的时候直接跳过解释器\",{\"1\":{\"653\":1}}],[\"下默认会进行\",{\"1\":{\"985\":1}}],[\"下部署可能会存在一些问题\",{\"1\":{\"916\":1}}],[\"下的静态链接库\",{\"1\":{\"1459\":1}}],[\"下的可执行文件\",{\"1\":{\"1459\":1}}],[\"下的动态链接库\",{\"1\":{\"1459\":1}}],[\"下的\",{\"1\":{\"759\":1,\"766\":1,\"960\":1}}],[\"下的路径如果继续想在\",{\"1\":{\"352\":1}}],[\"下查看僵尸进程使用\",{\"1\":{\"738\":1}}],[\"下重新思考了\",{\"1\":{\"542\":1}}],[\"下创建\",{\"1\":{\"337\":1}}],[\"下一页\",{\"1\":{\"1012\":1}}],[\"下一次直接从这个文件中假造\",{\"1\":{\"298\":1}}],[\"下一个\",{\"1\":{\"63\":2}}],[\"下载软件\",{\"1\":{\"1236\":1}}],[\"下载地址\",{\"1\":{\"1178\":1}}],[\"下载好提前训练好的参数\",{\"1\":{\"1161\":1}}],[\"下载官方源码安装包\",{\"1\":{\"770\":1}}],[\"下载内核和patch包\",{\"1\":{\"712\":1}}],[\"下载\",{\"1\":{\"274\":1,\"1176\":2}}],[\"下图表示csi误差消除后的相位和振幅\",{\"1\":{\"1012\":1}}],[\"下图可以比较清晰的说明\",{\"1\":{\"674\":1}}],[\"下图可以简单说明\",{\"1\":{\"653\":1}}],[\"下图简单给出了\",{\"1\":{\"236\":1}}],[\"下图是一个关于\",{\"1\":{\"193\":1}}],[\"下标\",{\"1\":{\"144\":1}}],[\"下来大礼包反而贵了\",{\"1\":{\"102\":1}}],[\"下\",{\"1\":{\"74\":1,\"336\":1,\"713\":1,\"984\":1}}],[\"下面分别研究\",{\"1\":{\"1312\":1}}],[\"下面的处理逻辑\",{\"1\":{\"1545\":1}}],[\"下面的流程见\",{\"1\":{\"1515\":1}}],[\"下面的东西\",{\"1\":{\"1421\":1}}],[\"下面的命令会查询\",{\"1\":{\"1253\":1}}],[\"下面的代码为placeholder实现前向传播算法\",{\"1\":{\"1212\":1}}],[\"下面所示的为student模型\",{\"1\":{\"1135\":1}}],[\"下面我将本论文的主要内容向各位老师作一汇报\",{\"1\":{\"1012\":1}}],[\"下面我们的研究将分别通过对象头\",{\"1\":{\"674\":1}}],[\"下面对每一个字段进行具体的说明\",{\"1\":{\"514\":1}}],[\"下面对其进行具体说明\",{\"1\":{\"502\":1}}],[\"下面这一步可以省略\",{\"1\":{\"618\":1}}],[\"下面这段话比较难以理解\",{\"1\":{\"543\":1}}],[\"下面这个是嵌入\",{\"1\":{\"511\":1}}],[\"下面这个是读取\",{\"1\":{\"510\":1}}],[\"下面这是一个例子\",{\"1\":{\"349\":1}}],[\"下面例子是实战中写的汇编示例\",{\"1\":{\"507\":1}}],[\"下面使用\",{\"1\":{\"352\":1}}],[\"下面使用文件输出\",{\"1\":{\"326\":1}}],[\"下面\",{\"1\":{\"351\":1,\"1635\":1}}],[\"下面会列举出来源码\",{\"1\":{\"311\":1}}],[\"下面章节解释一下\",{\"1\":{\"195\":1}}],[\"下面是训练过程开始的代码\",{\"1\":{\"1212\":1}}],[\"下面是一些常用的命令和工具\",{\"1\":{\"1454\":1}}],[\"下面是一些举例和计算\",{\"1\":{\"557\":1}}],[\"下面是一个例子\",{\"1\":{\"1212\":1}}],[\"下面是运行该命令后的输出\",{\"1\":{\"655\":1}}],[\"下面是对于两种机制的对比\",{\"1\":{\"549\":1}}],[\"下面是两个自动计时固件\",{\"1\":{\"380\":1}}],[\"下面是上述问题的\",{\"1\":{\"84\":1}}],[\"下面是这个题目的\",{\"1\":{\"56\":1}}],[\"下面两种解法展示了不同边界条件下该如何处理\",{\"1\":{\"34\":1}}],[\"下取整\",{\"0\":{\"28\":1}}],[\"为处理器寄存器\",{\"1\":{\"1622\":1}}],[\"为空且要注册的\",{\"1\":{\"1607\":1}}],[\"为何要再次判断呢\",{\"1\":{\"1545\":1}}],[\"为何排序\",{\"1\":{\"10\":1}}],[\"为从\",{\"1\":{\"1477\":1}}],[\"为主\",{\"1\":{\"1477\":1}}],[\"为此我们尝试一下\",{\"1\":{\"1445\":1}}],[\"为方便理解\",{\"1\":{\"1326\":1}}],[\"为方法2\",{\"1\":{\"104\":1}}],[\"为方法1\",{\"1\":{\"104\":1}}],[\"为shadowsocks的端口\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"为解决这个问题\",{\"1\":{\"1142\":1}}],[\"为解决这些室内定位存在的问题\",{\"1\":{\"1017\":1}}],[\"为无线感知系统布置一个网络摄像机\",{\"1\":{\"1132\":1}}],[\"为周期变化\",{\"1\":{\"1025\":1}}],[\"为噪音的功率\",{\"1\":{\"1020\":1}}],[\"为实现最终的视觉室内定位\",{\"1\":{\"1012\":1}}],[\"为节省时间\",{\"1\":{\"1012\":1}}],[\"为1个报文段\",{\"1\":{\"987\":1}}],[\"为16个报文段\",{\"1\":{\"987\":1}}],[\"为32个报文段时发生拥塞\",{\"1\":{\"987\":1}}],[\"为平均\",{\"1\":{\"978\":1}}],[\"为一个\",{\"1\":{\"879\":1}}],[\"为每个线程保存线程私有的数据\",{\"1\":{\"876\":1}}],[\"为每个进程都维护一个\",{\"1\":{\"252\":1}}],[\"为python语言定义web服务器和服务端程序的通用接口规范\",{\"1\":{\"860\":1}}],[\"为这个\",{\"1\":{\"761\":1}}],[\"为关键词\",{\"1\":{\"761\":1}}],[\"为读和写\",{\"1\":{\"741\":1}}],[\"为宏定义的文件名\",{\"1\":{\"741\":1}}],[\"为基石\",{\"1\":{\"641\":1}}],[\"为单位\",{\"1\":{\"594\":1}}],[\"为连续指令分配物理寄存器\",{\"1\":{\"557\":1}}],[\"为右移指令\",{\"1\":{\"539\":1}}],[\"为逻辑左移指令\",{\"1\":{\"538\":1}}],[\"为按位与操作\",{\"1\":{\"537\":1}}],[\"为最近最少使用算法\",{\"1\":{\"460\":1}}],[\"为只读属性\",{\"1\":{\"408\":1}}],[\"为可读写的\",{\"1\":{\"408\":1}}],[\"为你使用的\",{\"1\":{\"273\":1}}],[\"为了排版\",{\"1\":{\"1569\":1}}],[\"为了满足这个需求\",{\"1\":{\"1560\":1}}],[\"为了方便\",{\"1\":{\"1553\":1}}],[\"为了方便我们理解记忆\",{\"1\":{\"1520\":1}}],[\"为了方便理解\",{\"1\":{\"245\":1,\"696\":1,\"1311\":1,\"1381\":1,\"1396\":1,\"1576\":1}}],[\"为了方便理解这里也说得\",{\"1\":{\"200\":1}}],[\"为了支持虚拟化\",{\"1\":{\"1479\":1}}],[\"为了建模需要\",{\"1\":{\"1133\":1}}],[\"为了增强网络的深度的同时不损失过多的密度信息\",{\"1\":{\"1012\":1}}],[\"为了训练更稳定的模型\",{\"1\":{\"1012\":1}}],[\"为了避免信道维度缺失问题\",{\"1\":{\"1022\":1}}],[\"为了避免\",{\"1\":{\"982\":1}}],[\"为了确认服务端的\",{\"1\":{\"982\":1}}],[\"为了确认客户端的\",{\"1\":{\"982\":1}}],[\"为了确保进程都关闭掉了\",{\"1\":{\"285\":1}}],[\"为了提高下载速度\",{\"1\":{\"1145\":1}}],[\"为了提高编程效率\",{\"1\":{\"294\":1}}],[\"为了提供这种可靠的服务\",{\"1\":{\"977\":1}}],[\"为了使二叉搜索树保持平衡\",{\"1\":{\"1170\":1}}],[\"为了使\",{\"1\":{\"760\":1}}],[\"为了更方便分析\",{\"1\":{\"1590\":1}}],[\"为了更加直观\",{\"1\":{\"1459\":1}}],[\"为了更加清晰直观的说明本章开头提出的那个问题\",{\"1\":{\"682\":1}}],[\"为了更好理解\",{\"1\":{\"196\":1}}],[\"为了字节对齐\",{\"1\":{\"674\":1}}],[\"为了加深理解\",{\"1\":{\"600\":1,\"1434\":1}}],[\"为了不浪费内存\",{\"1\":{\"436\":1}}],[\"为了解决这种矛盾\",{\"1\":{\"1584\":1}}],[\"为了解决这个问题\",{\"1\":{\"289\":1,\"542\":1,\"1383\":1}}],[\"为了解决获取隔离权限时候的查表操作\",{\"1\":{\"1357\":1}}],[\"为了解决以上问题\",{\"1\":{\"1137\":1}}],[\"为了解决上述的问题\",{\"1\":{\"196\":1}}],[\"为了处理对同一个寄存器的读和写\",{\"1\":{\"236\":1}}],[\"为了知道某个\",{\"1\":{\"217\":1}}],[\"为了达到这个目的\",{\"1\":{\"214\":1,\"1297\":1}}],[\"为了达到这个效果\",{\"1\":{\"60\":1}}],[\"为例\",{\"1\":{\"192\":1,\"198\":1,\"962\":1,\"1170\":1,\"1440\":1}}],[\"为两种不同的情况\",{\"1\":{\"151\":1}}],[\"为该数列的第n项\",{\"1\":{\"94\":1}}],[\"为什么是组合接口\",{\"1\":{\"1632\":1}}],[\"为什么一个\",{\"1\":{\"1590\":1}}],[\"为什么会有\",{\"1\":{\"981\":1,\"1468\":1}}],[\"为什么会有不同的状态\",{\"1\":{\"676\":1}}],[\"为什么会是软件去做这件事呢\",{\"1\":{\"226\":1}}],[\"为什么值局部性可以被我们所利用\",{\"1\":{\"600\":1}}],[\"为什么我们一般在创建类的时候没有重载\",{\"1\":{\"431\":1}}],[\"为什么要这么做呢\",{\"1\":{\"1510\":1}}],[\"为什么要做这个限制\",{\"1\":{\"600\":1}}],[\"为什么要用受保护的方式\",{\"1\":{\"253\":1}}],[\"为什么要内存对齐\",{\"1\":{\"229\":1}}],[\"为什么要倒着循环\",{\"1\":{\"120\":1}}],[\"为什么要使用队列\",{\"1\":{\"59\":1}}],[\"为什么\",{\"1\":{\"92\":1,\"430\":1,\"950\":1}}],[\"为\",{\"1\":{\"87\":1,\"124\":1,\"147\":3,\"303\":1,\"453\":1,\"467\":1,\"522\":1,\"559\":2,\"639\":1,\"742\":1,\"967\":1,\"979\":3,\"983\":1,\"987\":1,\"1169\":1,\"1329\":1,\"1333\":1,\"1353\":1,\"1464\":1}}],[\"为整数\",{\"1\":{\"34\":1}}],[\"但并不是完全没有\",{\"1\":{\"1541\":1}}],[\"但如果目标状态的flags字段中不包含cpuidle\",{\"1\":{\"1526\":1}}],[\"但会自动将分配的内存清零\",{\"1\":{\"1345\":1}}],[\"但从暂存区移除该文件\",{\"1\":{\"1249\":1}}],[\"但该方法的缺点在于\",{\"1\":{\"1153\":1}}],[\"但还未被应用程序接受\",{\"1\":{\"984\":1}}],[\"但不提供任何可靠性的保证\",{\"1\":{\"977\":1}}],[\"但其他三个缺点依然存在\",{\"1\":{\"954\":1}}],[\"但至少有一个线程\",{\"1\":{\"736\":1}}],[\"但在屏幕上输出\",{\"1\":{\"717\":1}}],[\"但在某些情况下\",{\"1\":{\"431\":1}}],[\"但有时\",{\"1\":{\"427\":1}}],[\"但这是不推荐的\",{\"1\":{\"422\":1}}],[\"但它只会从服务器上拉取数据\",{\"1\":{\"1253\":1}}],[\"但它是其中最重要的一个\",{\"1\":{\"967\":1}}],[\"但它们会被动态地使用\",{\"1\":{\"418\":1}}],[\"但它并不是真正的并发\",{\"1\":{\"277\":1}}],[\"但实际运行测试却成功通过\",{\"1\":{\"374\":1}}],[\"但又不想直接跳过\",{\"1\":{\"374\":1}}],[\"但开销却极大\",{\"1\":{\"277\":1}}],[\"但可能顺序\",{\"1\":{\"186\":1}}],[\"但仍然想在警卫回来前吃掉所有的香蕉\",{\"1\":{\"34\":1}}],[\"但是目前还不支持\",{\"1\":{\"1633\":1}}],[\"但是最新的代码更改成了前者\",{\"1\":{\"1605\":1}}],[\"但是最后的结果中不能有重复的组合\",{\"1\":{\"13\":1}}],[\"但是一个\",{\"1\":{\"1590\":1}}],[\"但是需要有物理\",{\"1\":{\"1590\":1}}],[\"但是需要注意的是\",{\"1\":{\"1517\":1}}],[\"但是需要注意\",{\"1\":{\"236\":1}}],[\"但是比较重要\",{\"1\":{\"1573\":1}}],[\"但是某个子系统可能会对其他子系统产生的事件感兴趣\",{\"1\":{\"1560\":1}}],[\"但是有一个\",{\"1\":{\"1510\":1}}],[\"但是有一个问题是\",{\"1\":{\"688\":1}}],[\"但是总线可以传输的总的数据是固定的\",{\"1\":{\"1510\":1}}],[\"但是总体而言\",{\"1\":{\"15\":1}}],[\"但是注意到我们的命令是要服务于\",{\"1\":{\"1439\":1}}],[\"但是仔细观察发现\",{\"1\":{\"1424\":1}}],[\"但是相比于\",{\"1\":{\"1358\":1}}],[\"但是难就难在\",{\"1\":{\"1357\":1}}],[\"但是为什么\",{\"1\":{\"1353\":1}}],[\"但是为了保证速度\",{\"1\":{\"1153\":1}}],[\"但是为了方便起见\",{\"1\":{\"356\":1}}],[\"但是就是因为这次拷贝\",{\"1\":{\"1353\":1}}],[\"但是随着对\",{\"1\":{\"1353\":1}}],[\"但是随机梯度下降法有的时候甚至无法达到局部最优\",{\"1\":{\"1212\":1}}],[\"但是作为软件从业人员\",{\"1\":{\"1350\":1}}],[\"但是作者说明的\",{\"1\":{\"558\":1}}],[\"但是并没有找到其调用的地方\",{\"1\":{\"1320\":1}}],[\"但是并没有跳过第一个元素哦\",{\"1\":{\"360\":1}}],[\"但是值得细细品味\",{\"1\":{\"1308\":1}}],[\"但是通常而言\",{\"1\":{\"1275\":1}}],[\"但是通常情况下\",{\"1\":{\"719\":1}}],[\"但是要主要到\",{\"1\":{\"1241\":1}}],[\"但是要注意并不是所有的\",{\"1\":{\"655\":1}}],[\"但是查看分支可以使用\",{\"1\":{\"1239\":1}}],[\"但是确定的维度的给出可以降低出错的概论\",{\"1\":{\"1212\":1}}],[\"但是省略了平衡二叉树的avl算法步骤\",{\"1\":{\"1170\":1}}],[\"但是空间复杂度过于庞大\",{\"1\":{\"1170\":1}}],[\"但是avl算法设计的初衷仅仅考虑到了二叉搜索树的平衡\",{\"1\":{\"1169\":1}}],[\"但是位置对应关系还是保存的\",{\"1\":{\"1153\":1}}],[\"但是yolo后来也继续进行改进\",{\"1\":{\"1151\":1}}],[\"但是准确性较低\",{\"1\":{\"1151\":1}}],[\"但是速度慢\",{\"1\":{\"1151\":1}}],[\"但是无法穿墙\",{\"1\":{\"1133\":1}}],[\"但是缺陷在于这些系统只能追踪人体的一个关键节点\",{\"1\":{\"1131\":1}}],[\"但是由于调整步骤的存在\",{\"1\":{\"1170\":1}}],[\"但是由于人类的身体不是固定的\",{\"1\":{\"1131\":1}}],[\"但是由于硬件不完善\",{\"1\":{\"1024\":1}}],[\"但是做了一年\",{\"1\":{\"1048\":1}}],[\"但是只是针对一个固定大小与步长的窗口\",{\"1\":{\"1153\":1}}],[\"但是只生成一个高分辨率的单一高级特征图\",{\"1\":{\"1022\":1}}],[\"但是只有\",{\"1\":{\"739\":1}}],[\"但是依赖设备的定制\",{\"1\":{\"1012\":1}}],[\"但是现有的室内定位技术都存在缺陷\",{\"1\":{\"1012\":1}}],[\"但是实际的应用中\",{\"1\":{\"1157\":1}}],[\"但是实际上\",{\"1\":{\"688\":1}}],[\"但是实际上是想太多了\",{\"1\":{\"479\":1}}],[\"但是实践下来最好的方法是使用\",{\"1\":{\"916\":1}}],[\"但是允许有空值\",{\"1\":{\"811\":1}}],[\"但是系统不给其提供任何路由服务\",{\"1\":{\"729\":1}}],[\"但是根据其用法\",{\"1\":{\"706\":1,\"1403\":1}}],[\"但是具体为什么要这么做\",{\"1\":{\"673\":1}}],[\"但是安卓的平台是较为固定的\",{\"1\":{\"652\":1}}],[\"但是还是缺少一个验证的机制\",{\"1\":{\"602\":1}}],[\"但是我们的\",{\"1\":{\"1510\":1}}],[\"但是我们的实验中需要使用自定义数据集来训练yolo网络的话\",{\"1\":{\"1159\":1}}],[\"但是我们可以将其分割成三个部分\",{\"1\":{\"1157\":1}}],[\"但是我们可以自己编写代码\",{\"1\":{\"693\":1}}],[\"但是我们还必须确保\",{\"1\":{\"236\":1}}],[\"但是我理解不了\",{\"1\":{\"600\":1}}],[\"但是会增加复杂性\",{\"1\":{\"558\":1}}],[\"但是事实上\",{\"1\":{\"557\":1}}],[\"但是对于\",{\"1\":{\"552\":1}}],[\"但是直到该指令不投机的时候\",{\"1\":{\"550\":1}}],[\"但是正因为如此\",{\"1\":{\"545\":1}}],[\"但是利用了\",{\"1\":{\"543\":1}}],[\"但是可以供参考\",{\"1\":{\"511\":1}}],[\"但是用\",{\"1\":{\"481\":1}}],[\"但是面试的时候限定了这个题目不能使用任何的自带库\",{\"1\":{\"480\":1}}],[\"但是如果我们不指定\",{\"1\":{\"1445\":1}}],[\"但是如果你要在这边写什么\",{\"1\":{\"1439\":1}}],[\"但是如果没有怼这个地址发生过\",{\"1\":{\"602\":1}}],[\"但是如果这种情况下实例化子类的对象\",{\"1\":{\"424\":1}}],[\"但是如果直接解析\",{\"1\":{\"89\":1}}],[\"但是又不会改变类和实例状态的方法\",{\"1\":{\"422\":1}}],[\"但是任务越多\",{\"1\":{\"280\":1}}],[\"但是主存和辅存之间的性能差异意味着\",{\"1\":{\"253\":1}}],[\"但是使用的虚拟地址是不同的\",{\"1\":{\"251\":1}}],[\"但是数据是这个\",{\"1\":{\"224\":1}}],[\"但是在实际的实现中\",{\"1\":{\"1520\":1}}],[\"但是在实践中使用该方法\",{\"1\":{\"508\":1}}],[\"但是在日常的生产活动中\",{\"1\":{\"1448\":1}}],[\"但是在这里我们没有指定\",{\"1\":{\"1445\":1}}],[\"但是在这种情况下也需要注意\",{\"1\":{\"425\":1}}],[\"但是在高层建筑\",{\"1\":{\"1014\":1}}],[\"但是在最近的目标检测模型中由于其复杂性较高\",{\"1\":{\"1012\":1}}],[\"但是在函数中不会对其使用\",{\"1\":{\"288\":1}}],[\"但是在\",{\"1\":{\"226\":1}}],[\"但是在多核处理器中\",{\"1\":{\"224\":1}}],[\"但是在某些特定的情况下会存在很大的缺陷\",{\"1\":{\"202\":1}}],[\"但是\",{\"1\":{\"220\":1,\"235\":1,\"256\":1,\"408\":1,\"552\":1,\"828\":1,\"1137\":1,\"1178\":1,\"1388\":1}}],[\"但是不要使用和论文一样的模型\",{\"1\":{\"1149\":1}}],[\"但是不同于反射\",{\"1\":{\"1134\":1}}],[\"但是不同的是需要返回这个字符\",{\"1\":{\"480\":1}}],[\"但是不支持很多额外的参数\",{\"1\":{\"844\":1}}],[\"但是不一定是准确的\",{\"1\":{\"580\":1}}],[\"但是不增加复杂性和时延的方法\",{\"1\":{\"558\":1}}],[\"但是不建议\",{\"1\":{\"430\":1}}],[\"但是不放入\",{\"1\":{\"218\":1}}],[\"但是不幸的是\",{\"1\":{\"74\":1}}],[\"但是这样明显加大了tensorflow的计算量\",{\"1\":{\"1212\":1}}],[\"但是这样的话\",{\"1\":{\"543\":1}}],[\"但是这两个字段是分开的\",{\"1\":{\"602\":1}}],[\"但是这个\",{\"1\":{\"1440\":1}}],[\"但是这个准确率还是不够\",{\"1\":{\"558\":1}}],[\"但是这个地址对应的\",{\"1\":{\"208\":1}}],[\"但是这种思路比较烂\",{\"1\":{\"478\":1}}],[\"但是这种方法需要已知明文预计分布\",{\"1\":{\"1168\":1}}],[\"但是这种方法对软件的编写难度造成了很大的挑战\",{\"1\":{\"226\":1}}],[\"但是这种方式有个优点就是内存中的每个\",{\"1\":{\"200\":1}}],[\"但是这种方式要注意\",{\"1\":{\"147\":1}}],[\"但是这没关系\",{\"1\":{\"243\":1}}],[\"但是其并非平衡的二叉搜索树\",{\"1\":{\"1170\":1}}],[\"但是其实预测只希望最后仅仅输出其中一个较好的预测框\",{\"1\":{\"1157\":1}}],[\"但是其实现机制较为简单\",{\"1\":{\"549\":1}}],[\"但是其对应类别只有一个\",{\"1\":{\"1156\":1}}],[\"但是其可能会在扫描信道的时候产生延迟\",{\"1\":{\"1024\":1}}],[\"但是其依赖于程序计数器\",{\"1\":{\"553\":1}}],[\"但是其优点在于不需要重新设计复杂的\",{\"1\":{\"549\":1}}],[\"但是其必不可少\",{\"1\":{\"236\":1}}],[\"但是其他的\",{\"1\":{\"235\":1}}],[\"但是其存在一个阈值\",{\"1\":{\"210\":1}}],[\"但是其查找过于复杂\",{\"1\":{\"200\":1}}],[\"但是其中的元素出现个数相等\",{\"1\":{\"81\":1}}],[\"但是更小的\",{\"1\":{\"196\":1}}],[\"但是硬件设计通过一些优化的手段\",{\"1\":{\"196\":1}}],[\"但是也存在其他巧妙的方法\",{\"1\":{\"167\":1}}],[\"但是他并不满足于此\",{\"1\":{\"165\":1}}],[\"但是暴力解法会超时\",{\"1\":{\"150\":1}}],[\"但是却存在些许不同\",{\"1\":{\"134\":1}}],[\"但是上述的循环方式性能较好\",{\"1\":{\"130\":1}}],[\"但是该方法超时\",{\"1\":{\"152\":1}}],[\"但是该背包问题存在\",{\"1\":{\"120\":1}}],[\"但是该算法还存在很大的优化点\",{\"1\":{\"10\":1}}],[\"但是没有倒满\",{\"1\":{\"91\":1}}],[\"但是题目中要求了你必须设计一个时间复杂度为\",{\"1\":{\"77\":1}}],[\"但是代码更加简洁\",{\"1\":{\"56\":1}}],[\"但是给每个子节点都用括号包裹起来\",{\"1\":{\"49\":1}}],[\"但是容易超时\",{\"1\":{\"13\":1}}],[\"但是性能较差\",{\"1\":{\"13\":1}}],[\"她将吃掉这堆的所有香蕉\",{\"1\":{\"34\":1}}],[\"她将会选择一堆香蕉\",{\"1\":{\"34\":1}}],[\"根本区别\",{\"1\":{\"736\":1}}],[\"根绝题目含义\",{\"1\":{\"79\":1}}],[\"根据传入的\",{\"1\":{\"1607\":1}}],[\"根据策略的不同走不同的分支\",{\"1\":{\"1518\":1}}],[\"根据你的需求和压缩文件的类型\",{\"1\":{\"1454\":1}}],[\"根据响应码分类操作\",{\"1\":{\"1333\":1}}],[\"根据这个去找到\",{\"1\":{\"1610\":1}}],[\"根据这个线索\",{\"1\":{\"1586\":1}}],[\"根据这个命令调用到\",{\"1\":{\"1307\":1}}],[\"根据这个输出这棵树的前序遍历结果\",{\"1\":{\"486\":1}}],[\"根据是否有空闲的\",{\"1\":{\"1293\":1}}],[\"根据二叉搜索树的性质\",{\"1\":{\"1169\":1}}],[\"根据二叉树创建字符串\",{\"0\":{\"49\":1}}],[\"根据前面的分析\",{\"1\":{\"1157\":1}}],[\"根据弱大数定理的原则\",{\"1\":{\"1024\":1}}],[\"根据配置文件读取\",{\"1\":{\"871\":1}}],[\"根据以上三类\",{\"1\":{\"601\":1}}],[\"根据存储位置的地址进行推测\",{\"1\":{\"572\":1}}],[\"根据存储位置的特定属性进行推测\",{\"1\":{\"572\":1}}],[\"根据指令变体的不同\",{\"1\":{\"529\":1}}],[\"根据总结的规律判断\",{\"1\":{\"459\":1}}],[\"根据链表是否有环判断\",{\"1\":{\"459\":1}}],[\"根据书籍\",{\"1\":{\"445\":1}}],[\"根据具体的指令决定要执行的类型\",{\"1\":{\"245\":1}}],[\"根据\",{\"1\":{\"245\":1,\"980\":1,\"1329\":1}}],[\"根据题目要求\",{\"1\":{\"102\":2}}],[\"根据题意\",{\"1\":{\"88\":1}}],[\"根据它们写出\",{\"1\":{\"100\":1}}],[\"根据一个右边界\",{\"1\":{\"36\":1}}],[\"根\",{\"1\":{\"34\":3,\"46\":1}}],[\"根香蕉\",{\"1\":{\"34\":1}}],[\"珂珂喜欢慢慢吃\",{\"1\":{\"34\":1}}],[\"珂珂喜欢吃香蕉\",{\"1\":{\"34\":1}}],[\"珂珂可以决定她吃香蕉的速度\",{\"1\":{\"34\":1}}],[\"小端格式2\",{\"1\":{\"1464\":1}}],[\"小写变大写\",{\"1\":{\"751\":1}}],[\"小的\",{\"1\":{\"605\":1}}],[\"小的数对距离\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"小技巧\",{\"1\":{\"360\":1}}],[\"小明很喜欢数学\",{\"1\":{\"165\":1}}],[\"小优化\",{\"1\":{\"152\":1}}],[\"小镇的法官不相信任何人\",{\"1\":{\"87\":1}}],[\"小时内吃掉所有香蕉的最小速度\",{\"1\":{\"34\":1}}],[\"小时\",{\"1\":{\"34\":1,\"291\":1,\"997\":1}}],[\"小时后回来\",{\"1\":{\"34\":1}}],[\"小于等于数据线宽度\",{\"1\":{\"1470\":1}}],[\"小于完整寄存器也是可以的\",{\"1\":{\"235\":1}}],[\"小于\",{\"1\":{\"25\":1,\"517\":1,\"1021\":1,\"1170\":1}}],[\"警卫已经离开了\",{\"1\":{\"34\":1}}],[\"堆栈在处理递归问题时非常有用\",{\"1\":{\"465\":1}}],[\"堆栈段\",{\"1\":{\"282\":1}}],[\"堆中有\",{\"1\":{\"34\":1}}],[\"堆香蕉\",{\"1\":{\"34\":1}}],[\"后完全断开\",{\"1\":{\"983\":1}}],[\"后开始执行\",{\"1\":{\"844\":1}}],[\"后再打印日志\",{\"1\":{\"707\":1,\"1405\":1}}],[\"后增加分析结果\",{\"1\":{\"706\":1,\"1403\":1}}],[\"后者是在\",{\"1\":{\"1620\":1}}],[\"后者是用全部映射到栈帧上的方式实现基于虚拟寄存器的指令集\",{\"1\":{\"689\":1}}],[\"后者表示某个\",{\"1\":{\"691\":1}}],[\"后对应的栈帧都会被自动撤销\",{\"1\":{\"667\":1}}],[\"后\",{\"1\":{\"612\":1}}],[\"后台运行容器\",{\"1\":{\"610\":1}}],[\"后使用哪个\",{\"1\":{\"583\":1}}],[\"后进行拥塞避免\",{\"1\":{\"987\":1}}],[\"后进行\",{\"1\":{\"549\":1}}],[\"后面加\",{\"1\":{\"1471\":1}}],[\"后面跟随了我们\",{\"1\":{\"1448\":1}}],[\"后面跟着的是\",{\"1\":{\"1277\":1}}],[\"后面如果我们要新增依赖项\",{\"1\":{\"1441\":1}}],[\"后面例子我们将分析复杂的形式\",{\"1\":{\"1440\":1}}],[\"后面为想要修改成为的sn编号\",{\"1\":{\"1285\":1}}],[\"后面是\",{\"1\":{\"1277\":1}}],[\"后面\",{\"1\":{\"998\":1,\"1388\":1}}],[\"后面会在需要的时候进行依赖注入\",{\"1\":{\"871\":1}}],[\"后面的命令会等到设备重启完成之后再执行\",{\"1\":{\"1284\":1}}],[\"后面的很多过程也很重要\",{\"1\":{\"707\":1,\"1405\":1}}],[\"后面的\",{\"1\":{\"674\":1}}],[\"后面的立即数是负数\",{\"1\":{\"525\":1}}],[\"后面用\",{\"1\":{\"91\":1}}],[\"后续会对全局变量\",{\"1\":{\"1607\":1}}],[\"后续会使用到的两个设备变量分别为\",{\"1\":{\"1544\":1}}],[\"后续遇到的变量也应当注意\",{\"1\":{\"1545\":1}}],[\"后续研究\",{\"1\":{\"1516\":2}}],[\"后续分析关联见\",{\"1\":{\"1418\":1}}],[\"后续如果要研究技术细节等\",{\"1\":{\"1379\":1}}],[\"后续随着理解的深入\",{\"1\":{\"653\":1}}],[\"后续的很多研究也基本上忽略了与\",{\"1\":{\"547\":1}}],[\"后续根据这个寄存器中的基地址进行偏移运算\",{\"1\":{\"530\":1}}],[\"后续我们再对此进行说明\",{\"1\":{\"502\":1}}],[\"后续需要重点研究这两个算法\",{\"1\":{\"211\":1}}],[\"后缀表达式\",{\"0\":{\"471\":1}}],[\"后文还要继续阐述\",{\"1\":{\"1490\":1}}],[\"后文会详细研究每一个命令\",{\"1\":{\"1239\":1}}],[\"后文测试部分将通过烧融实验对使用sfpn对网络产生的精度提升加以说明\",{\"1\":{\"1012\":1}}],[\"后文\",{\"1\":{\"581\":1}}],[\"后文确定了\",{\"1\":{\"288\":1}}],[\"后文简称\",{\"1\":{\"248\":1}}],[\"后半部分执行读取\",{\"1\":{\"236\":1}}],[\"后跟所有奇数元素\",{\"1\":{\"169\":1}}],[\"后继者\",{\"0\":{\"63\":1},\"1\":{\"46\":1,\"63\":1}}],[\"后右\",{\"1\":{\"30\":1}}],[\"后大\",{\"1\":{\"30\":1}}],[\"提升了效率但是实现难度过大\",{\"1\":{\"1168\":1}}],[\"提升的性能十分有限\",{\"1\":{\"289\":1}}],[\"提出一个融合rgb特征的三维bbox预测结构\",{\"1\":{\"1012\":1}}],[\"提出了动态时钟的概念\",{\"1\":{\"1541\":1}}],[\"提出了共轭music算法\",{\"1\":{\"1012\":1}}],[\"提出了\",{\"1\":{\"1012\":1}}],[\"提出了可伸缩的特征金字塔结构\",{\"1\":{\"1012\":1}}],[\"提出了一种http\",{\"1\":{\"967\":1}}],[\"提出二分查找\",{\"1\":{\"23\":1}}],[\"提供程序之间的交互\",{\"1\":{\"1621\":1}}],[\"提供将\",{\"1\":{\"1601\":1}}],[\"提供通知链对象的系统有哪些事件\",{\"1\":{\"1580\":1}}],[\"提供全局的\",{\"1\":{\"1532\":1}}],[\"提供\",{\"1\":{\"1487\":1,\"1532\":2,\"1601\":1}}],[\"提供的\",{\"1\":{\"1537\":1}}],[\"提供的方法\",{\"1\":{\"1328\":1}}],[\"提供的是一种不可靠的服务\",{\"1\":{\"977\":1}}],[\"提供end\",{\"1\":{\"1151\":1}}],[\"提供交叉模型的监督方案\",{\"1\":{\"1135\":1}}],[\"提供两个类\",{\"1\":{\"824\":1}}],[\"提供了核心函数\",{\"1\":{\"1601\":1}}],[\"提供了通知链的机制\",{\"1\":{\"1560\":1}}],[\"提供了简单的接口供开发者使用\",{\"1\":{\"1305\":1}}],[\"提供了一些方法来处理跨进程通信的底层细节\",{\"1\":{\"1304\":1}}],[\"提供了一个可靠的运输层\",{\"1\":{\"977\":1}}],[\"提供了rf信号的活动感知方案\",{\"1\":{\"1135\":1}}],[\"提供了更完整的功能\",{\"1\":{\"873\":1}}],[\"提供了\",{\"1\":{\"421\":1,\"1537\":1}}],[\"提供了与标准库\",{\"1\":{\"411\":1}}],[\"提供了编写测试前准备\",{\"1\":{\"377\":1}}],[\"提供了几种写策略\",{\"1\":{\"214\":1}}],[\"提前生成好\",{\"1\":{\"664\":1}}],[\"提炼出\",{\"1\":{\"651\":1}}],[\"提高了训练的损失精度\",{\"1\":{\"1012\":1}}],[\"提高\",{\"1\":{\"956\":1}}],[\"提高预测的准确率\",{\"1\":{\"543\":1}}],[\"提高处理器的并行度\",{\"1\":{\"542\":1}}],[\"提高指令的并行度\",{\"1\":{\"542\":1}}],[\"提高可读性\",{\"1\":{\"152\":1}}],[\"提取了2x2的特征图\",{\"1\":{\"1153\":1}}],[\"提取\",{\"1\":{\"536\":1,\"1021\":1}}],[\"提示\",{\"1\":{\"30\":1,\"155\":1,\"372\":1,\"397\":1,\"399\":1,\"564\":1,\"635\":1,\"724\":1,\"725\":1,\"882\":1,\"896\":1,\"923\":1,\"938\":1,\"1078\":1,\"1240\":1,\"1275\":1,\"1379\":1,\"1381\":1,\"1560\":1,\"1631\":1}}],[\"请确保只有\",{\"1\":{\"1634\":1}}],[\"请求码\",{\"1\":{\"1309\":1,\"1310\":1}}],[\"请求会发送到服务端的线程池中等待处理\",{\"1\":{\"1298\":1}}],[\"请求有语法错误或请求无法实现\",{\"1\":{\"999\":1}}],[\"请求体\",{\"1\":{\"998\":1}}],[\"请求体的举例\",{\"1\":{\"998\":1}}],[\"请求头\",{\"1\":{\"998\":1}}],[\"请求头部\",{\"1\":{\"998\":1}}],[\"请求行\",{\"1\":{\"998\":1}}],[\"请求可以分为\",{\"1\":{\"998\":1}}],[\"请求能够被\",{\"1\":{\"998\":1}}],[\"请求后等待\",{\"1\":{\"983\":1}}],[\"请求失败次数达到\",{\"1\":{\"763\":1}}],[\"请实现一个函数\",{\"1\":{\"481\":1}}],[\"请返回\",{\"1\":{\"479\":1}}],[\"请返回该法官的编号\",{\"1\":{\"87\":1}}],[\"请注意\",{\"1\":{\"136\":1,\"418\":1}}],[\"请问用\",{\"1\":{\"104\":1}}],[\"请你将它对\",{\"1\":{\"167\":1}}],[\"请你从\",{\"1\":{\"136\":1}}],[\"请你判断是否可以将这个数组分割成两个子集\",{\"1\":{\"122\":1}}],[\"请你找出并返回\",{\"1\":{\"120\":1}}],[\"请你找出并返回能够使\",{\"1\":{\"92\":1}}],[\"请你返回该图的\",{\"1\":{\"89\":1}}],[\"请你计算网格中岛屿的数量\",{\"1\":{\"76\":1}}],[\"请你设计一个函数\",{\"1\":{\"9\":1}}],[\"请完成一个函数\",{\"1\":{\"30\":1}}],[\"​\",{\"1\":{\"28\":1,\"178\":7,\"180\":20,\"245\":1,\"255\":1,\"321\":1,\"576\":3,\"602\":1,\"1166\":3,\"1168\":1,\"1388\":1,\"1553\":1}}],[\"或是运行在用户态都标志着它进入了\",{\"1\":{\"1584\":1}}],[\"或关键肢干\",{\"1\":{\"1131\":1}}],[\"或特殊方法\",{\"1\":{\"428\":1}}],[\"或之后\",{\"1\":{\"377\":1}}],[\"或竖直方向上相邻的陆地连接形成\",{\"1\":{\"76\":1}}],[\"或者遍历通知块\",{\"1\":{\"1576\":1}}],[\"或者前文的\",{\"1\":{\"1570\":1}}],[\"或者这样\",{\"1\":{\"1424\":1}}],[\"或者是有\",{\"1\":{\"1534\":1}}],[\"或者是其他链接到这个\",{\"1\":{\"1421\":1}}],[\"或者是规定了人需要移动的轨迹\",{\"1\":{\"1133\":1}}],[\"或者虚拟机管理\",{\"1\":{\"1383\":1}}],[\"或者存储在数据结构中\",{\"1\":{\"1383\":1}}],[\"或者分配\",{\"1\":{\"1383\":1}}],[\"或者分配一个内存\",{\"1\":{\"1380\":1}}],[\"或者分支预测\",{\"1\":{\"243\":1}}],[\"或者相似的基于\",{\"1\":{\"1380\":1}}],[\"或者称之为内存映射技术\",{\"1\":{\"1318\":1}}],[\"或者git\",{\"1\":{\"1253\":1}}],[\"或者写错了提交信息\",{\"1\":{\"1241\":1}}],[\"或者cnn网络\",{\"1\":{\"1151\":1}}],[\"或者边界框是目标检测的重要概念\",{\"1\":{\"1012\":1}}],[\"或者定时器超时\",{\"1\":{\"987\":1}}],[\"或者和\",{\"1\":{\"984\":1}}],[\"或者如果该队列为空\",{\"1\":{\"951\":1}}],[\"或者在该虚环境中运行python程序\",{\"1\":{\"854\":1}}],[\"或者可以安装\",{\"1\":{\"841\":1}}],[\"或者状态等等\",{\"1\":{\"812\":1}}],[\"或者注释掉\",{\"1\":{\"761\":1}}],[\"或者更新的时候污染两个\",{\"1\":{\"679\":1}}],[\"或者更多位的\",{\"1\":{\"576\":1}}],[\"或者类似的技术\",{\"1\":{\"641\":1}}],[\"或者拷贝\",{\"1\":{\"613\":1}}],[\"或者去阅读一下原文\",{\"1\":{\"584\":1}}],[\"或者一部分或完整的\",{\"1\":{\"576\":1}}],[\"或者右子树中找到最小的节点来替换自己\",{\"1\":{\"499\":1}}],[\"或者自己创建一个\",{\"1\":{\"480\":1}}],[\"或者不重写父类的构造方法\",{\"1\":{\"424\":1}}],[\"或者整个工程开始运行的入口\",{\"1\":{\"403\":1}}],[\"或者说是一个缩写\",{\"1\":{\"1471\":1}}],[\"或者说文件\",{\"1\":{\"1424\":1}}],[\"或者说目录\",{\"1\":{\"1424\":1}}],[\"或者说自动生成\",{\"1\":{\"1355\":1}}],[\"或者说有没有什么新的思路借鉴\",{\"1\":{\"1350\":1}}],[\"或者说新的列\",{\"1\":{\"806\":1}}],[\"或者说延迟尽可能小\",{\"1\":{\"552\":1}}],[\"或者说\",{\"1\":{\"261\":1,\"552\":1}}],[\"或者说前后顺序\",{\"1\":{\"182\":1}}],[\"或者内核修改了\",{\"1\":{\"217\":1}}],[\"或者还存在一种情况是\",{\"1\":{\"208\":1}}],[\"或者其他访存类指令发出以后\",{\"1\":{\"205\":1}}],[\"或者将上一层的数据帧拆装为位流形式转发到物理层\",{\"1\":{\"977\":1}}],[\"或者将预取的功效发挥到最大的\",{\"1\":{\"508\":1}}],[\"或者将\",{\"1\":{\"147\":1}}],[\"或者\",{\"1\":{\"88\":1,\"164\":1,\"169\":1,\"195\":1,\"198\":1,\"207\":1,\"235\":1,\"341\":1,\"424\":1,\"442\":1,\"478\":1,\"534\":1,\"549\":1,\"558\":1,\"571\":1,\"577\":1,\"599\":1,\"603\":1,\"648\":1,\"669\":1,\"753\":1,\"856\":1,\"926\":1,\"927\":1,\"984\":1,\"1354\":1,\"1388\":1,\"1418\":1,\"1424\":1,\"1439\":1,\"1487\":1}}],[\"或者返回索引\",{\"1\":{\"33\":1}}],[\"或者使用对象直接初始化\",{\"1\":{\"1563\":1}}],[\"或者使用核独占的数据结构\",{\"1\":{\"1517\":1}}],[\"或者使用创建的目录\",{\"1\":{\"383\":1}}],[\"或者使用\",{\"1\":{\"27\":1,\"494\":1}}],[\"或\",{\"1\":{\"33\":1,\"124\":1,\"418\":1,\"724\":1,\"1454\":2,\"1521\":2}}],[\"或一部分\",{\"1\":{\"5\":1}}],[\"−\",{\"1\":{\"25\":1,\"139\":2}}],[\"再绑定\",{\"1\":{\"1609\":1}}],[\"再进行新副本的更新\",{\"1\":{\"1524\":1}}],[\"再进入\",{\"1\":{\"1293\":1}}],[\"再回到禁止中断这个事情本身\",{\"1\":{\"1517\":1}}],[\"再多说一些\",{\"1\":{\"1517\":1}}],[\"再多说一句\",{\"1\":{\"688\":1}}],[\"再传递一下可信\",{\"1\":{\"1487\":1}}],[\"再怎么还是要研究一下的\",{\"1\":{\"1413\":1}}],[\"再\",{\"1\":{\"1385\":1,\"1419\":1}}],[\"再另起新的文章进行重点研究\",{\"1\":{\"1379\":1}}],[\"再触发缺页异常\",{\"1\":{\"1345\":1}}],[\"再处理进程工作队列\",{\"1\":{\"1316\":1}}],[\"再经过\",{\"1\":{\"1179\":1}}],[\"再结合任意确定加密算法加密数据\",{\"1\":{\"1169\":1}}],[\"再设计卷积神经网络作为系统的基准\",{\"1\":{\"1131\":1}}],[\"再图上增加了一个\",{\"1\":{\"696\":1,\"1396\":1}}],[\"再提一下\",{\"1\":{\"655\":1}}],[\"再可视化显示\",{\"1\":{\"646\":1}}],[\"再将句柄数据复制到用户态\",{\"1\":{\"954\":1}}],[\"再将寄存器\",{\"1\":{\"524\":1}}],[\"再将他们的孩子中按照\",{\"1\":{\"52\":1}}],[\"再遍历\",{\"1\":{\"486\":1}}],[\"再使用lambda表达式创建匿名函数\",{\"1\":{\"402\":1}}],[\"再说明了\",{\"1\":{\"236\":1}}],[\"再参考以下的引文\",{\"1\":{\"194\":1}}],[\"再加上\",{\"1\":{\"169\":1}}],[\"再加上放第\",{\"1\":{\"117\":1}}],[\"再找到最右边的\",{\"1\":{\"150\":1}}],[\"再添加右节点\",{\"1\":{\"61\":1}}],[\"再从右往左进行下一层遍历\",{\"1\":{\"61\":1}}],[\"再继续找\",{\"1\":{\"46\":1}}],[\"再查找在后面出现的位置\",{\"1\":{\"32\":1}}],[\"再写\",{\"1\":{\"25\":1}}],[\"再通过其它的可能的分步解答再次尝试寻找问题的答案\",{\"1\":{\"5\":1}}],[\"总线\",{\"1\":{\"1510\":1}}],[\"总线可以挂多个\",{\"1\":{\"1510\":2}}],[\"总的而言就是\",{\"1\":{\"1507\":1}}],[\"总的来看\",{\"1\":{\"1352\":1}}],[\"总的来说还是确保硬件资源如\",{\"1\":{\"236\":1}}],[\"总的来说\",{\"1\":{\"100\":1,\"882\":1,\"1531\":1}}],[\"总训练样本数除以每一个batch的训练样本数\",{\"1\":{\"1212\":1}}],[\"总损失等于交叉熵损失和正则化损失的和\",{\"1\":{\"1185\":1}}],[\"总长度\",{\"1\":{\"972\":1}}],[\"总是把表达式栈的栈顶值放在一个实际寄存器\",{\"1\":{\"689\":1}}],[\"总是通过栈来隐式操作临时值\",{\"1\":{\"687\":1}}],[\"总是在比较的左边\",{\"1\":{\"25\":1}}],[\"总共做了以下的事情\",{\"1\":{\"1545\":1}}],[\"总共需要\",{\"1\":{\"985\":1}}],[\"总共\",{\"1\":{\"985\":1}}],[\"总共可以分为三类\",{\"1\":{\"601\":1}}],[\"总共有多少种方法\",{\"1\":{\"104\":1}}],[\"总共有\",{\"1\":{\"86\":2}}],[\"总体来看这篇文章\",{\"1\":{\"599\":1}}],[\"总体而言可以分为以下几类\",{\"1\":{\"233\":1}}],[\"总体而言\",{\"1\":{\"192\":1}}],[\"总之\",{\"1\":{\"419\":1,\"529\":1,\"1522\":1}}],[\"总大小为\",{\"1\":{\"204\":1}}],[\"总结以下\",{\"1\":{\"1545\":1}}],[\"总结二分搜索的规律\",{\"1\":{\"1065\":1}}],[\"总结二分查找的规律\",{\"1\":{\"1065\":1}}],[\"总结从递归到动态规划\",{\"1\":{\"1064\":1}}],[\"总结dfs\",{\"1\":{\"1064\":1}}],[\"总结其使用方法是\",{\"1\":{\"961\":1}}],[\"总结出来了寄存器的\",{\"1\":{\"573\":1}}],[\"总结一下\",{\"1\":{\"369\":1,\"552\":1,\"1012\":1,\"1212\":1,\"1297\":1,\"1334\":1,\"1488\":1,\"1608\":1}}],[\"总结2\",{\"1\":{\"134\":1}}],[\"总结\",{\"0\":{\"126\":1,\"139\":1,\"921\":1,\"970\":1,\"1359\":1},\"1\":{\"477\":1,\"576\":1}}],[\"总结来说会产生\",{\"1\":{\"1012\":1}}],[\"总结来说\",{\"1\":{\"36\":1,\"120\":1,\"172\":1,\"425\":1}}],[\"总结回溯的模板如下\",{\"1\":{\"6\":1}}],[\"先解绑\",{\"1\":{\"1609\":1}}],[\"先是两个判断\",{\"1\":{\"1518\":1}}],[\"先给出一个简单的头文件\",{\"1\":{\"1446\":1}}],[\"先通过\",{\"1\":{\"1316\":1}}],[\"先在imagenet上进行了预训练\",{\"1\":{\"1156\":1}}],[\"先到达的信号和后到达的信号之间存在着距离差\",{\"1\":{\"1025\":1}}],[\"先从缓存中获取\",{\"1\":{\"881\":1}}],[\"先说相同点\",{\"1\":{\"593\":1}}],[\"先说明了流水线寄存器虽然在很多的图里面没有被画出来\",{\"1\":{\"236\":1}}],[\"先阐述这些预测器都使用了\",{\"1\":{\"562\":1}}],[\"先来看论文中对于\",{\"1\":{\"550\":1}}],[\"先看一段简单的例子\",{\"1\":{\"1439\":1}}],[\"先看论文中对于\",{\"1\":{\"551\":1}}],[\"先看如下的函数\",{\"1\":{\"499\":1}}],[\"先看例子\",{\"1\":{\"432\":1}}],[\"先遍历一个链表找到其尾部\",{\"1\":{\"459\":1}}],[\"先构建\",{\"1\":{\"297\":1}}],[\"先举一个在项目中遇到的实例\",{\"1\":{\"288\":1}}],[\"先研究一个没有流水线版本的\",{\"1\":{\"244\":1}}],[\"先进先出\",{\"1\":{\"213\":1}}],[\"先计算每个位置为止蜡烛的数量前缀和数组\",{\"1\":{\"150\":1}}],[\"先找到最左边的\",{\"1\":{\"150\":1}}],[\"先后次序不同算不同的结果\",{\"1\":{\"103\":1}}],[\"先附上官方题解\",{\"1\":{\"102\":1}}],[\"先选修\",{\"1\":{\"86\":1}}],[\"先左\",{\"1\":{\"30\":1}}],[\"先左后右\",{\"1\":{\"25\":1}}],[\"先小\",{\"1\":{\"30\":1}}],[\"先小后大\",{\"1\":{\"25\":1}}],[\"先写基础的\",{\"1\":{\"88\":1}}],[\"先写\",{\"1\":{\"25\":1}}],[\"伪代码\",{\"0\":{\"25\":1}}],[\"该步骤相当于创建了处理器接口\",{\"1\":{\"1626\":1}}],[\"该热区可消散的持续功率\",{\"1\":{\"1591\":1}}],[\"该实现允许\",{\"1\":{\"1584\":1}}],[\"该实验主要测试\",{\"1\":{\"1012\":1}}],[\"该状态会关闭\",{\"1\":{\"1537\":1}}],[\"该cpu不会执行任何其他任务\",{\"1\":{\"1524\":1}}],[\"该结构体描述了\",{\"1\":{\"1521\":1,\"1523\":1}}],[\"该值为\",{\"1\":{\"1464\":1}}],[\"该怎么编写呢\",{\"1\":{\"1446\":1}}],[\"该怎么办\",{\"1\":{\"980\":1}}],[\"该技术允许\",{\"1\":{\"1381\":1}}],[\"该技术相比\",{\"1\":{\"1358\":1}}],[\"该过程完成后返回\",{\"1\":{\"1380\":1}}],[\"该传输过程中涉及到的函数列表\",{\"1\":{\"1311\":1}}],[\"该命令将暂存的变更与上一次提交的内容相比较\",{\"1\":{\"1249\":1}}],[\"该命令执行后\",{\"1\":{\"854\":1}}],[\"该二叉平衡树是根据上文普通二叉树调整而成\",{\"1\":{\"1170\":1}}],[\"该树为bst\",{\"1\":{\"1169\":1}}],[\"该简单方法的缺陷在于\",{\"1\":{\"1169\":1}}],[\"该系统的设计步骤为\",{\"1\":{\"1162\":1}}],[\"该系统能提供精确的人的姿态的2d追踪图像\",{\"1\":{\"1132\":1}}],[\"该章主要介绍如何利用yolo算法实现人脸检测的功能\",{\"1\":{\"1158\":1}}],[\"该模型可以将视觉信息通过同步技术和无线信号对应起来\",{\"1\":{\"1136\":1}}],[\"该模型还是用了空洞卷积\",{\"1\":{\"1012\":1}}],[\"该论文使用的损失函数正好适用于定位这边的模型\",{\"1\":{\"1149\":1}}],[\"该论文的系统使用了自底向上的方法\",{\"1\":{\"1133\":1}}],[\"该论文提出了可行的解决方案\",{\"1\":{\"1132\":1}}],[\"该信号能反射出人的身体\",{\"1\":{\"1131\":1}}],[\"该文档主要阐明后续的博客重点更新方向\",{\"1\":{\"1064\":1}}],[\"该时移在\",{\"1\":{\"1024\":1}}],[\"该响应可以由右边的公式得到\",{\"1\":{\"1020\":1}}],[\"该部分首先分别对wifi定位模块和视觉定位模块进行了测试\",{\"1\":{\"1012\":1}}],[\"该网络基于人群密度的特点\",{\"1\":{\"1012\":1}}],[\"该网络将三个损失函数有效加以结合\",{\"1\":{\"1012\":1}}],[\"该网络使用经典的编码器\",{\"1\":{\"1012\":1}}],[\"该网络的创新点在于\",{\"1\":{\"1012\":1}}],[\"该算法使用常见的商用\",{\"1\":{\"1017\":1}}],[\"该算法共包含五个子模块\",{\"1\":{\"1012\":1}}],[\"该算法基于共轭矩阵优化噪音信号\",{\"1\":{\"1012\":1}}],[\"该算法包含四个重点部分\",{\"1\":{\"1012\":1}}],[\"该队列为客户端的每个\",{\"1\":{\"984\":1}}],[\"该报文段对应于一份\",{\"1\":{\"981\":1}}],[\"该字段用于表示优先级数据\",{\"1\":{\"978\":1}}],[\"该层的作用是保证报文的正确传输\",{\"1\":{\"977\":1}}],[\"该函数首先初始化基础设施\",{\"1\":{\"1556\":1}}],[\"该函数分为两个大的部分\",{\"1\":{\"1542\":1}}],[\"该函数代码的作用是打开或者关闭本地定时器\",{\"1\":{\"1542\":1}}],[\"该函数通常在内核调试\",{\"1\":{\"1527\":1}}],[\"该函数会挂起当前cpu的所有进程并使其休眠\",{\"1\":{\"1585\":1}}],[\"该函数会将内核当前的性能计数器\",{\"1\":{\"1527\":1}}],[\"该函数会将当前cpu所在的调度器状态设置为正常运行状态\",{\"1\":{\"1526\":1}}],[\"该函数会将当前cpu所在的调度器的状态设置为rcu空闲状态\",{\"1\":{\"1524\":1}}],[\"该函数会将当前cpu所在调度器状态设置为正常运行状态\",{\"1\":{\"1524\":1}}],[\"该函数会启动一个rcu处理线程\",{\"1\":{\"1524\":1}}],[\"该函数会在执行时检查当前是否处于内核锁定状态\",{\"1\":{\"1524\":1}}],[\"该函数会返回\",{\"1\":{\"956\":1}}],[\"该函数的执行流程如下\",{\"1\":{\"1556\":1}}],[\"该函数的实现如下\",{\"1\":{\"1542\":1}}],[\"该函数的作用是在该\",{\"1\":{\"1522\":1}}],[\"该函数的逻辑比较简单\",{\"1\":{\"1519\":1}}],[\"该函数时\",{\"1\":{\"1298\":1}}],[\"该函数用于函数运行的入口\",{\"1\":{\"415\":1}}],[\"该缓存对内使用\",{\"1\":{\"884\":1}}],[\"该\",{\"1\":{\"884\":1,\"1296\":1,\"1314\":1,\"1388\":1,\"1483\":1,\"1534\":1,\"1545\":1}}],[\"该目录复制了一份完整的当前系统的python环境\",{\"1\":{\"854\":1}}],[\"该消息的\",{\"1\":{\"742\":1}}],[\"该进程会先创建出一个新的副本\",{\"1\":{\"1524\":1}}],[\"该进程的用户空间及相关信息\",{\"1\":{\"1340\":1}}],[\"该进程调用\",{\"1\":{\"739\":1}}],[\"该进程以\",{\"1\":{\"703\":1}}],[\"该正数为新创建的子进程的\",{\"1\":{\"738\":1}}],[\"该栈与其他线程不共享\",{\"1\":{\"667\":1}}],[\"该篇主要记录了华为云的一些基础知识\",{\"1\":{\"635\":1}}],[\"该指令是否可预测\",{\"1\":{\"576\":1}}],[\"该指令用于在多核创建共享内存并发访问的场景中\",{\"1\":{\"534\":1}}],[\"该预测器仅仅使用指令地址访问\",{\"1\":{\"559\":1}}],[\"该方法等待对象移动完毕然后更新其引用到新的位置\",{\"1\":{\"1381\":1}}],[\"该方法循环执行\",{\"1\":{\"1333\":1}}],[\"该方法的实现如下\",{\"1\":{\"1333\":1}}],[\"该方法如果想知道\",{\"1\":{\"1275\":1}}],[\"该方法是在慢启动算法后发现拥塞窗口大小大于等于慢启动阈值后\",{\"1\":{\"987\":1}}],[\"该方法比较巧妙\",{\"1\":{\"459\":1}}],[\"该方法会覆盖父类的同名方法\",{\"1\":{\"427\":1}}],[\"该方法返回子字符串在字符串中出现的次数\",{\"1\":{\"392\":1}}],[\"该段代码使用了\",{\"1\":{\"401\":1}}],[\"该接口是必须有这个的\",{\"1\":{\"288\":1}}],[\"该立即值偏移\",{\"1\":{\"245\":1}}],[\"该寄存器用作下一个\",{\"1\":{\"236\":1}}],[\"该子集中最多有\",{\"1\":{\"120\":1}}],[\"该数组由信任对\",{\"1\":{\"87\":1}}],[\"该问题使用\",{\"1\":{\"56\":1}}],[\"该问题可以变为\",{\"1\":{\"23\":1}}],[\"该题目中使用了\",{\"1\":{\"299\":1}}],[\"该题目中有两个变量去重\",{\"1\":{\"13\":1}}],[\"该题目的解法如下\",{\"1\":{\"184\":1}}],[\"该题目的要求可以理解为\",{\"1\":{\"122\":1}}],[\"该题目是组合问题\",{\"1\":{\"134\":1}}],[\"该题目给出了目标和\",{\"1\":{\"124\":1}}],[\"该题目还存在\",{\"1\":{\"57\":1}}],[\"该题目使用回溯可以很方便的求解\",{\"1\":{\"12\":1}}],[\"有以下方式\",{\"1\":{\"1597\":1}}],[\"有以下的好处\",{\"1\":{\"695\":1,\"1395\":1}}],[\"有时也称为分页内存管理单元\",{\"1\":{\"1484\":1}}],[\"有时候会遇到\",{\"1\":{\"1460\":1}}],[\"有利于代码段的共享\",{\"1\":{\"1460\":1}}],[\"有利于容量较大的数据的传输\",{\"1\":{\"978\":1}}],[\"有助于利用到现在计算机的\",{\"1\":{\"1460\":1}}],[\"有助于实现\",{\"1\":{\"695\":1,\"1395\":1}}],[\"有什么缺陷和改进点\",{\"1\":{\"1350\":1}}],[\"有什么优缺点\",{\"1\":{\"825\":1}}],[\"有宏包的概念\",{\"1\":{\"1179\":1}}],[\"有害的结果\",{\"1\":{\"1126\":1}}],[\"有新连接时\",{\"1\":{\"955\":1}}],[\"有三点很重要的不同于视觉系统的优点\",{\"1\":{\"1134\":1}}],[\"有三大缓存\",{\"1\":{\"882\":1}}],[\"有三种方式\",{\"1\":{\"844\":1}}],[\"有三种形式\",{\"1\":{\"690\":1}}],[\"有三种情况会导致\",{\"1\":{\"208\":1}}],[\"有数据\",{\"1\":{\"876\":1}}],[\"有状态对象保存有实例变量\",{\"1\":{\"876\":1}}],[\"有现成的静态编译器后端\",{\"1\":{\"690\":1}}],[\"有点像爬虫\",{\"1\":{\"646\":1}}],[\"有限的\",{\"1\":{\"605\":1}}],[\"有何不同\",{\"1\":{\"593\":1}}],[\"有关的\",{\"1\":{\"530\":1,\"1371\":1}}],[\"有几个对比\",{\"1\":{\"687\":1}}],[\"有几个细节需要注意\",{\"1\":{\"503\":1}}],[\"有几点需要注意\",{\"1\":{\"431\":1}}],[\"有几点需要注意的\",{\"1\":{\"387\":1}}],[\"有几点我没有理解透彻\",{\"1\":{\"64\":1}}],[\"有的时候我们需要打印出一些变量来用于调试\",{\"1\":{\"1429\":1}}],[\"有的时候我们可能需要查看一下\",{\"1\":{\"447\":1}}],[\"有的时候需要自定义损失函数\",{\"1\":{\"1212\":1}}],[\"有的时候需要将重要的消息或者意外的事件优先显示在其他内容前面\",{\"1\":{\"293\":1}}],[\"有的时候需要写辅助函数来进行递归\",{\"1\":{\"73\":1}}],[\"有了协程的支持\",{\"1\":{\"414\":1}}],[\"有了以上的伪代码\",{\"1\":{\"23\":1}}],[\"有两组分组丢失的指示\",{\"1\":{\"987\":1}}],[\"有两个函数和\",{\"1\":{\"1342\":1}}],[\"有两个选择\",{\"1\":{\"603\":1}}],[\"有两个因素可能使得预测器复杂化\",{\"1\":{\"546\":1}}],[\"有两个参数\",{\"1\":{\"393\":1}}],[\"有两种模式\",{\"1\":{\"1541\":1}}],[\"有两种典型用法\",{\"1\":{\"739\":1}}],[\"有两种策略\",{\"1\":{\"218\":1}}],[\"有两种做法\",{\"1\":{\"88\":1}}],[\"有很大的性能差距\",{\"1\":{\"207\":1}}],[\"有多个\",{\"1\":{\"198\":1,\"1534\":1}}],[\"有多少个\",{\"1\":{\"153\":1}}],[\"有多少对数字之间的距离小于等于\",{\"1\":{\"36\":1}}],[\"有些代码流程上会依赖这种先后关系\",{\"1\":{\"1605\":1}}],[\"有些属于\",{\"1\":{\"1510\":2}}],[\"有些操作系统甚至需要\",{\"1\":{\"988\":1}}],[\"有些时候可以理解和依赖注入一个关系\",{\"1\":{\"871\":1}}],[\"有些时候也会用\",{\"1\":{\"195\":1}}],[\"有些专家提出了\",{\"1\":{\"558\":1}}],[\"有些计算机是允许按页更改写入分配策略的\",{\"1\":{\"218\":1}}],[\"有些英文文档中称作\",{\"1\":{\"198\":1}}],[\"有些优化较难\",{\"1\":{\"100\":1}}],[\"有一件事情需要特别注意\",{\"1\":{\"1386\":1}}],[\"有一个疑惑或者理解错误\",{\"1\":{\"1490\":1}}],[\"有一个\",{\"1\":{\"1483\":1,\"1510\":1}}],[\"有一个重要的理念\",{\"1\":{\"1318\":1}}],[\"有一个给\",{\"1\":{\"704\":1,\"1399\":1}}],[\"有一种全卷积的方法\",{\"1\":{\"1153\":1}}],[\"有一些\",{\"1\":{\"557\":1}}],[\"有一些新的理解\",{\"1\":{\"251\":1}}],[\"有一些密码的组合是不能转到的\",{\"1\":{\"88\":1}}],[\"有一点需要注意的是\",{\"1\":{\"204\":1,\"436\":1}}],[\"有一点需要特别注意\",{\"1\":{\"118\":1}}],[\"有一天他在做数学作业时\",{\"1\":{\"165\":1}}],[\"有一堆石头\",{\"1\":{\"125\":1}}],[\"有段时间没有刷\",{\"1\":{\"92\":1}}],[\"有\",{\"1\":{\"75\":1,\"559\":1,\"725\":1,\"994\":1,\"1374\":2}}],[\"有下面的例子\",{\"1\":{\"23\":1}}],[\"有效辨别主径信号的aoa\",{\"1\":{\"1012\":1}}],[\"有效克服多径效应的影响可以极大提高系统的定位精度\",{\"1\":{\"1012\":1}}],[\"有效解决了动态网页存在的\",{\"1\":{\"764\":1}}],[\"有效位或者完整或者部分标记\",{\"1\":{\"577\":1}}],[\"有效括号组合需满足\",{\"1\":{\"9\":1}}],[\"有效的\",{\"1\":{\"9\":1}}],[\"初看这道题较难理解\",{\"1\":{\"120\":1}}],[\"初看这个题目\",{\"1\":{\"89\":1}}],[\"初始态\",{\"1\":{\"736\":1}}],[\"初始状态\",{\"1\":{\"91\":1}}],[\"初始化类似于上文\",{\"1\":{\"1564\":1}}],[\"初始化栈\",{\"1\":{\"465\":1}}],[\"初始化方法\",{\"1\":{\"425\":1,\"881\":1}}],[\"初始化\",{\"0\":{\"843\":1},\"1\":{\"301\":1,\"701\":1,\"836\":1,\"881\":1,\"987\":1,\"1557\":1}}],[\"初始化为\",{\"1\":{\"147\":1,\"987\":1}}],[\"初始化问题\",{\"1\":{\"130\":1}}],[\"初始化队列\",{\"1\":{\"88\":1}}],[\"初始化时存储完全二叉树\",{\"1\":{\"1170\":1}}],[\"初始化时指定消息代理和存储\",{\"1\":{\"843\":1}}],[\"初始化时\",{\"1\":{\"22\":2}}],[\"初始的时候是可以进入\",{\"1\":{\"84\":1}}],[\"初始值的赋值需要好好体会\",{\"1\":{\"64\":1}}],[\"初值为\",{\"1\":{\"22\":1}}],[\"基础的知识\",{\"1\":{\"1505\":1}}],[\"基础的用法可以参考代码\",{\"1\":{\"415\":1}}],[\"基础概念\",{\"0\":{\"1438\":1}}],[\"基础知识\",{\"1\":{\"1392\":1}}],[\"基础介绍\",{\"1\":{\"1322\":1}}],[\"基础总结\",{\"0\":{\"757\":1,\"769\":1,\"801\":1}}],[\"基础设施服务\",{\"1\":{\"641\":1}}],[\"基础组件是\",{\"1\":{\"562\":1}}],[\"基线的预测器\",{\"1\":{\"562\":1}}],[\"基地址寄存器\",{\"1\":{\"529\":1}}],[\"基于信号量的机制\",{\"1\":{\"1564\":1}}],[\"基于信号的室内定位和基于视觉的室内定位\",{\"1\":{\"1016\":1}}],[\"基于第\",{\"1\":{\"1383\":1}}],[\"基于所学知识\",{\"1\":{\"1170\":1}}],[\"基于labelimg\",{\"1\":{\"1162\":1}}],[\"基于上面的分析\",{\"1\":{\"1153\":1}}],[\"基于上述的\",{\"1\":{\"580\":1}}],[\"基于上述我们分析的\",{\"1\":{\"552\":1}}],[\"基于设备的系统通过一些可穿戴设备来追踪目标\",{\"1\":{\"1133\":1}}],[\"基于设备的和非基于设备的\",{\"1\":{\"1133\":1}}],[\"基于这个思想\",{\"1\":{\"1025\":1}}],[\"基于这个原理\",{\"1\":{\"1024\":1}}],[\"基于视觉的室内定位算法模块\",{\"1\":{\"1012\":1}}],[\"基于1000组benchmark的观察得出结论\",{\"1\":{\"1012\":1}}],[\"基于动态代理实现\",{\"1\":{\"878\":1}}],[\"基于端口\",{\"1\":{\"760\":1}}],[\"基于域名\",{\"1\":{\"760\":1}}],[\"基于硬件全虚拟化方案\",{\"1\":{\"724\":1}}],[\"基于以上的说明\",{\"1\":{\"687\":1}}],[\"基于以上两段话\",{\"1\":{\"543\":1}}],[\"基于寄存器的设计还是一个较为新的潮流\",{\"1\":{\"688\":1}}],[\"基于寄存器\",{\"1\":{\"687\":5}}],[\"基于栈的虚拟机并没有减少\",{\"1\":{\"688\":1}}],[\"基于栈\",{\"1\":{\"687\":5}}],[\"基于表达式栈\",{\"1\":{\"687\":1,\"689\":1}}],[\"基于虚拟寄存器\",{\"1\":{\"687\":1}}],[\"基于\",{\"0\":{\"1023\":1},\"1\":{\"556\":1,\"583\":1,\"664\":1,\"760\":1,\"831\":2,\"872\":1,\"1012\":1}}],[\"基于程序行为的动态分支预测\",{\"1\":{\"241\":1}}],[\"基于此\",{\"1\":{\"22\":1,\"1012\":1,\"1168\":1,\"1170\":1}}],[\"基本上没有刷新\",{\"1\":{\"1522\":1}}],[\"基本上实现如下\",{\"1\":{\"833\":1}}],[\"基本的调用关系可以如此理解\",{\"1\":{\"1515\":1}}],[\"基本的二分搜索算法\",{\"0\":{\"19\":1}}],[\"基本原理\",{\"1\":{\"1322\":1}}],[\"基本代码块的含义是一段没有控制流逻辑的基本流程\",{\"1\":{\"691\":1}}],[\"基本构成研究\",{\"0\":{\"681\":1}}],[\"基本结构\",{\"0\":{\"667\":1}}],[\"基本思路一致\",{\"1\":{\"465\":1}}],[\"基本例子\",{\"0\":{\"385\":1}}],[\"基本使用\",{\"0\":{\"285\":1}}],[\"基本实现\",{\"1\":{\"180\":1}}],[\"基因变化\",{\"0\":{\"92\":1}}],[\"应该按照功耗大小降序排列\",{\"1\":{\"1534\":1}}],[\"应该想着如何做好自己的生意\",{\"1\":{\"1030\":1}}],[\"应该会全部成功\",{\"1\":{\"980\":1}}],[\"应该是可以看到已经加载的库\",{\"1\":{\"658\":1}}],[\"应该翻一番\",{\"1\":{\"557\":1}}],[\"应该传入父类的初始化参数\",{\"1\":{\"424\":1}}],[\"应该在\",{\"1\":{\"47\":1}}],[\"应用安装\",{\"1\":{\"1374\":1}}],[\"应用安全和数据安全等各种路径上可能的漏洞路径来构建安全服务\",{\"1\":{\"647\":1}}],[\"应用该结论\",{\"1\":{\"1170\":1}}],[\"应用层\",{\"1\":{\"977\":2}}],[\"应用程序向\",{\"1\":{\"1309\":1,\"1310\":1}}],[\"应用程序如果没有完成对一个已经就绪的文件描述符进行\",{\"1\":{\"954\":1}}],[\"应用程序使用\",{\"1\":{\"724\":1}}],[\"应用支持调用api的对象\",{\"1\":{\"844\":1}}],[\"应用的安全\",{\"1\":{\"646\":1}}],[\"应用防火墙\",{\"1\":{\"646\":1}}],[\"应用场景主要为数据仓库\",{\"1\":{\"643\":1}}],[\"应用场景主要为内存数据库\",{\"1\":{\"643\":1}}],[\"应用场景主要为电商\",{\"1\":{\"643\":1}}],[\"应用开发组件等\",{\"1\":{\"639\":1}}],[\"应用局部性原理\",{\"1\":{\"255\":1}}],[\"应用前缀和求解这个问题的时候\",{\"1\":{\"152\":1}}],[\"应当加以学习\",{\"1\":{\"499\":1}}],[\"应当加以总结\",{\"1\":{\"146\":1}}],[\"应当是指实现队列的\",{\"1\":{\"468\":1}}],[\"应当熟练掌握\",{\"1\":{\"468\":1}}],[\"应当要想到双指针\",{\"1\":{\"165\":1}}],[\"应当牢记\",{\"1\":{\"47\":1}}],[\"应当注意边界条件\",{\"1\":{\"22\":1}}],[\"应当考虑更加高效的方法\",{\"1\":{\"10\":1}}],[\"应注意\",{\"1\":{\"22\":1}}],[\"而接口的作用就是操作系统为用户提供服务的方式\",{\"1\":{\"1621\":1}}],[\"而接收方只是没有收到需要序号的报文才会重复发送ack\",{\"1\":{\"987\":1}}],[\"而与\",{\"1\":{\"1551\":1}}],[\"而代码段\",{\"1\":{\"1460\":1}}],[\"而他先推送\",{\"1\":{\"1250\":1}}],[\"而两种算法由于调整策略的不同\",{\"1\":{\"1171\":1}}],[\"而调整的策略取决于例子中类似于\",{\"1\":{\"1170\":1}}],[\"而取消采用平衡的搜索树\",{\"1\":{\"1170\":1}}],[\"而边界框部分为\",{\"1\":{\"1157\":1}}],[\"而边界框的w和h预测值是相对于整个图片的宽与高的比例\",{\"1\":{\"1155\":1}}],[\"而其它边界框认为不存在目标\",{\"1\":{\"1156\":1}}],[\"而real\",{\"1\":{\"1151\":1}}],[\"而最后一个值是置信度\",{\"1\":{\"1155\":1}}],[\"而最后一层则单独使用1x1\",{\"1\":{\"1138\":1}}],[\"而最终结果\",{\"1\":{\"47\":1}}],[\"而论文中的系统则是可以实时地动态检测出人类活动的变化\",{\"1\":{\"1131\":1}}],[\"而论文中提出的rf\",{\"1\":{\"1131\":1}}],[\"而职业生涯却是属于自己的\",{\"1\":{\"1029\":1}}],[\"而多径峰值会产生剧烈的变化\",{\"1\":{\"1025\":1}}],[\"而多例的循环依赖每次\",{\"1\":{\"881\":1}}],[\"而大于等于\",{\"1\":{\"1170\":1}}],[\"而大于\",{\"1\":{\"1021\":1}}],[\"而未转到慢启动\",{\"1\":{\"987\":1}}],[\"而分片数据的重组只会发生在目的端的\",{\"1\":{\"981\":1}}],[\"而实际上如果这段数据较长\",{\"1\":{\"980\":1}}],[\"而服务器正在等待完成相应的\",{\"1\":{\"951\":1}}],[\"而为了观察到值的变化\",{\"1\":{\"925\":1}}],[\"而为了达到不访问这些组合的效果\",{\"1\":{\"88\":1}}],[\"而线程是任务调度和执行的基本单位\",{\"1\":{\"736\":1}}],[\"而initnativemethods\",{\"1\":{\"707\":1,\"1406\":1}}],[\"而我们的\",{\"1\":{\"1333\":1}}],[\"而我们不想执行慢启动来突然减少数据流\",{\"1\":{\"987\":1}}],[\"而我们选择的例子为\",{\"1\":{\"704\":1,\"1399\":1}}],[\"而我们图中有\",{\"1\":{\"196\":1}}],[\"而安卓平台的\",{\"1\":{\"670\":1}}],[\"而一个进程奔溃并不会对另一个进程造成影响\",{\"1\":{\"738\":1}}],[\"而一个进程可以有多个线程\",{\"1\":{\"736\":1}}],[\"而一个\",{\"1\":{\"670\":1}}],[\"而只有当一个单元格内确实存在目标时\",{\"1\":{\"1156\":1}}],[\"而只依赖于先前的控制流\",{\"1\":{\"559\":1}}],[\"而只关注于准确率或者覆盖率\",{\"1\":{\"547\":1}}],[\"而这\",{\"1\":{\"559\":1}}],[\"而删除链表的尾节点\",{\"1\":{\"460\":1}}],[\"而没被命中的向链表后面移动\",{\"1\":{\"460\":1}}],[\"而干函数的两个参数是下一项和前一次应用该函数的结果\",{\"1\":{\"398\":1}}],[\"而不能够在内核与用户空间之间进行事件的通知\",{\"1\":{\"1560\":1}}],[\"而不会出现数据竞争或者锁竞争等问题\",{\"1\":{\"1529\":1}}],[\"而不会出现资源竞争的情况\",{\"1\":{\"534\":1}}],[\"而不会被阻塞在rcu空闲状态中\",{\"1\":{\"1526\":1}}],[\"而不像\",{\"1\":{\"1249\":1}}],[\"而不忽略\",{\"1\":{\"1248\":1}}],[\"而不需要人为的标注标签\",{\"1\":{\"1132\":1}}],[\"而不缓存数据文件\",{\"1\":{\"815\":1}}],[\"而不是整型数值\",{\"1\":{\"1521\":1}}],[\"而不是我们期望的\",{\"1\":{\"1469\":1}}],[\"而不是像其他方法一样已知图像中目标的数量\",{\"1\":{\"1149\":1}}],[\"而不是由worker执行\",{\"1\":{\"844\":1}}],[\"而不是父进程的进程\",{\"1\":{\"738\":1}}],[\"而不是空间效率\",{\"1\":{\"562\":1}}],[\"而不是字符的下标\",{\"1\":{\"480\":1}}],[\"而不是通过实例\",{\"1\":{\"421\":1}}],[\"而不是\",{\"1\":{\"354\":1,\"397\":1,\"430\":1,\"503\":1,\"545\":1,\"652\":1,\"1265\":1,\"1647\":1}}],[\"而不是文件名本身\",{\"1\":{\"348\":1}}],[\"而不影响本层新进来的元素\",{\"1\":{\"59\":1}}],[\"而上一个函数返回了所有的这些\",{\"1\":{\"289\":1}}],[\"而函数\",{\"1\":{\"285\":1}}],[\"而页表是实现虚拟内存管理的核心数据结构之一\",{\"1\":{\"258\":1}}],[\"而存在\",{\"1\":{\"255\":1}}],[\"而对线程而言\",{\"1\":{\"736\":1}}],[\"而对于步骤二\",{\"1\":{\"1171\":1}}],[\"而对于带有\",{\"1\":{\"687\":1}}],[\"而对于递归\",{\"1\":{\"73\":1}}],[\"而对齐的内存只需要一次访存操作\",{\"1\":{\"229\":1}}],[\"而且\",{\"1\":{\"1501\":1}}],[\"而且yolo的训练过程也是end\",{\"1\":{\"1155\":1}}],[\"而且使得训练一个端到端系统时产生过大的内存消耗\",{\"1\":{\"1022\":1}}],[\"而且无法获得各个子进程的进程\",{\"1\":{\"738\":1}}],[\"而且无效标志位\",{\"1\":{\"221\":1}}],[\"而且子进程总是可以通过\",{\"1\":{\"738\":1}}],[\"而且每个结点只能访问一次\",{\"1\":{\"70\":1}}],[\"而是会生成一个可执行的\",{\"1\":{\"1445\":1}}],[\"而是将其置信度值归为0\",{\"1\":{\"1157\":1}}],[\"而是将他们一起存储于一张散列表里面\",{\"1\":{\"829\":1}}],[\"而是所有的检测算法中都会用到\",{\"1\":{\"1157\":1}}],[\"而是两个因子的乘积\",{\"1\":{\"1155\":1}}],[\"而是直接调用\",{\"1\":{\"1293\":1}}],[\"而是直接将原始图片分割成互不重合的小方块\",{\"1\":{\"1153\":1}}],[\"而是直接结束本轮\",{\"1\":{\"10\":1}}],[\"而是随着运动产生变化\",{\"1\":{\"1131\":1}}],[\"而是在需要使用某对象的时候\",{\"1\":{\"871\":1}}],[\"而是使用一个\",{\"1\":{\"466\":1}}],[\"而是希望显式地提示\",{\"1\":{\"374\":1}}],[\"而是等到这个\",{\"1\":{\"217\":1}}],[\"而每个\",{\"1\":{\"198\":1}}],[\"而\",{\"1\":{\"132\":1,\"225\":1,\"226\":1,\"252\":1,\"329\":1,\"361\":1,\"408\":1,\"418\":1,\"549\":1,\"550\":1,\"593\":1,\"687\":1,\"695\":1,\"976\":1,\"981\":1,\"987\":1,\"1277\":1,\"1298\":1,\"1395\":1,\"1470\":1,\"1537\":1,\"1586\":1}}],[\"而重量为\",{\"1\":{\"125\":1}}],[\"而后进行\",{\"1\":{\"1519\":1}}],[\"而后是调用\",{\"1\":{\"1328\":1}}],[\"而后我们定义loss函数来刻画预测值和真实值之间的差距\",{\"1\":{\"1212\":1}}],[\"而后还需要根据改进的avl算法使得其编码的相对位置不发生改变\",{\"1\":{\"1170\":1}}],[\"而后得到节点的ope编码值\",{\"1\":{\"1169\":1}}],[\"而后对平台进行初始化\",{\"1\":{\"1488\":1}}],[\"而后对该完全二叉树进行ope编码\",{\"1\":{\"1170\":1}}],[\"而后对目录结构进行调整\",{\"1\":{\"1159\":1}}],[\"而后对其他问题进行研究\",{\"1\":{\"112\":1}}],[\"而后估计参数\",{\"1\":{\"1024\":1}}],[\"而后利用\",{\"1\":{\"1021\":1}}],[\"而后描述了其中包含了两个字\",{\"1\":{\"675\":1}}],[\"而后创建一个\",{\"1\":{\"449\":1}}],[\"而后创建文件夹并执行\",{\"1\":{\"274\":1}}],[\"而后\",{\"1\":{\"387\":1,\"833\":1}}],[\"而后通过\",{\"1\":{\"299\":1}}],[\"而后使用\",{\"1\":{\"173\":1}}],[\"而后向后搜索\",{\"1\":{\"91\":1}}],[\"而经过转化后的中间状态为\",{\"1\":{\"91\":1}}],[\"而在每个子区段中的函数指针的顺序是和链接的顺序相关的\",{\"1\":{\"1551\":1}}],[\"而在空闲轮询机制下\",{\"1\":{\"1528\":1}}],[\"而在第\",{\"1\":{\"1463\":1}}],[\"而在接收方\",{\"1\":{\"979\":1}}],[\"而在安卓平台上\",{\"1\":{\"670\":1}}],[\"而在arm上\",{\"1\":{\"523\":1}}],[\"而在\",{\"1\":{\"326\":1}}],[\"而在写入主存完成后\",{\"1\":{\"216\":1}}],[\"而在添加的时候\",{\"1\":{\"88\":1}}],[\"而在字典中我们将\",{\"1\":{\"86\":1}}],[\"而栈空间取决于递归的深度\",{\"1\":{\"56\":1}}],[\"而二叉树左右子树的深度也都可以通过相同的方法递归获得\",{\"1\":{\"56\":1}}],[\"而当\",{\"1\":{\"22\":1}}],[\"而言有什么区别\",{\"1\":{\"1510\":1}}],[\"而言\",{\"1\":{\"22\":1,\"262\":1,\"559\":1,\"571\":2,\"576\":1,\"978\":1,\"1024\":1}}],[\"形式为\",{\"1\":{\"22\":2}}],[\"要访问的存储位置\",{\"1\":{\"1620\":1}}],[\"要理解这个我们需要了解内核初始化过程中的调用顺序\",{\"1\":{\"1605\":1}}],[\"要与\",{\"1\":{\"1597\":1}}],[\"要调用的通知函数的数量\",{\"1\":{\"1573\":1}}],[\"要初始化这个\",{\"1\":{\"1563\":1}}],[\"要和加载区分进行区分\",{\"1\":{\"1557\":1}}],[\"要进入\",{\"1\":{\"1545\":1}}],[\"要进入需要关闭\",{\"1\":{\"1542\":1}}],[\"要进行命名管道的通信\",{\"1\":{\"741\":1}}],[\"要等主\",{\"1\":{\"1475\":1}}],[\"要实现这个模型\",{\"1\":{\"1185\":1}}],[\"要很好地理解batch存在的意义\",{\"1\":{\"1185\":1}}],[\"要注意的一点时\",{\"1\":{\"1156\":1}}],[\"要注意到\",{\"1\":{\"614\":1}}],[\"要检测的目标大小规模是未知的\",{\"1\":{\"1153\":1}}],[\"要监听的文件描述符\",{\"1\":{\"955\":1}}],[\"要以指针的方式传递\",{\"1\":{\"950\":1}}],[\"要善于加以利用\",{\"1\":{\"933\":1}}],[\"要么全部不执行\",{\"1\":{\"828\":1}}],[\"要生成stackmaptable太闹心\",{\"1\":{\"688\":1}}],[\"要在后文研究\",{\"1\":{\"558\":1}}],[\"要寻找某个节点右子树中最左边的那个节点\",{\"1\":{\"499\":1}}],[\"要继承父类的构造方法\",{\"1\":{\"424\":1}}],[\"要是\",{\"1\":{\"1635\":1}}],[\"要是想对类使用作用域\",{\"1\":{\"379\":1}}],[\"要是不使用自带的排序方法\",{\"1\":{\"182\":1}}],[\"要执行命令前面的数字定义了作业的执行时间\",{\"1\":{\"291\":1}}],[\"要安排一个\",{\"1\":{\"291\":1}}],[\"要传入一个很大的对象\",{\"1\":{\"289\":1}}],[\"要最高效地利用\",{\"1\":{\"280\":1}}],[\"要小\",{\"1\":{\"262\":1,\"981\":1}}],[\"要解答这个问题\",{\"1\":{\"205\":1}}],[\"要解释这个原因\",{\"1\":{\"128\":1}}],[\"要确定要访问的内存是不是在\",{\"1\":{\"196\":1}}],[\"要使用数据的时候\",{\"1\":{\"226\":1}}],[\"要使用\",{\"1\":{\"147\":1}}],[\"要使用队列这个数据结构\",{\"1\":{\"59\":1}}],[\"要的\",{\"1\":{\"124\":1}}],[\"要学习课程\",{\"1\":{\"86\":2}}],[\"要十分慎重\",{\"1\":{\"22\":1}}],[\"要特别注意边界的问题\",{\"1\":{\"22\":1}}],[\"要求较高的存储速率\",{\"1\":{\"643\":1}}],[\"要求根\",{\"1\":{\"486\":1}}],[\"要求找出一个数组中第一个单独出现的数字\",{\"1\":{\"453\":1}}],[\"要求计算出\",{\"1\":{\"165\":1}}],[\"要求是子集\",{\"1\":{\"120\":1}}],[\"要求子串在原字符串中是连续的\",{\"1\":{\"106\":1}}],[\"要求解的\",{\"1\":{\"154\":1}}],[\"要求解nums\",{\"1\":{\"147\":1}}],[\"要求解\",{\"1\":{\"92\":1}}],[\"要求解一个速度\",{\"1\":{\"34\":1}}],[\"要求结果是取整的\",{\"1\":{\"35\":1}}],[\"要求\",{\"1\":{\"11\":1}}],[\"xv6\",{\"0\":{\"1616\":1,\"1619\":1},\"1\":{\"1616\":1,\"1619\":2}}],[\"xvf\",{\"1\":{\"752\":1,\"1145\":1}}],[\"xf\",{\"1\":{\"1454\":2}}],[\"xfail\",{\"0\":{\"374\":1},\"1\":{\"374\":6}}],[\"xargs\",{\"1\":{\"1424\":1}}],[\"xampp\",{\"1\":{\"802\":1}}],[\"xs\",{\"1\":{\"1185\":2}}],[\"xizi\",{\"1\":{\"1623\":2}}],[\"xie\",{\"1\":{\"1201\":1}}],[\"xiong\",{\"1\":{\"1127\":1}}],[\"xian\",{\"1\":{\"491\":1}}],[\"xen\",{\"1\":{\"725\":1}}],[\"x和补丁patch都复制到\",{\"1\":{\"712\":1}}],[\"x9\",{\"1\":{\"537\":1}}],[\"xdff\",{\"1\":{\"1242\":1}}],[\"xd\",{\"1\":{\"536\":1}}],[\"x3\",{\"1\":{\"536\":2}}],[\"x30\",{\"1\":{\"517\":1}}],[\"xn\",{\"1\":{\"529\":2,\"536\":1}}],[\"xt\",{\"1\":{\"529\":2}}],[\"x2=\",{\"1\":{\"1228\":1}}],[\"x23\",{\"1\":{\"530\":1}}],[\"x20\",{\"1\":{\"526\":2}}],[\"x2\",{\"1\":{\"524\":2,\"527\":2,\"528\":2,\"1212\":1,\"1228\":1}}],[\"x21\",{\"1\":{\"354\":1}}],[\"x0\",{\"1\":{\"524\":10,\"1483\":1}}],[\"x86\",{\"1\":{\"523\":1,\"564\":1,\"692\":2,\"724\":2,\"776\":1,\"1463\":2,\"1464\":2}}],[\"x7\",{\"1\":{\"511\":3,\"522\":3}}],[\"x6\",{\"1\":{\"511\":6}}],[\"x4\",{\"1\":{\"511\":9}}],[\"x5\",{\"1\":{\"511\":9,\"525\":1,\"527\":2,\"528\":2}}],[\"x^y\",{\"1\":{\"400\":1}}],[\"xml配置\",{\"1\":{\"872\":1}}],[\"xml\",{\"1\":{\"387\":1,\"872\":1,\"1240\":3}}],[\"xpass\",{\"1\":{\"374\":1}}],[\"x+\",{\"1\":{\"317\":1}}],[\"x+y\",{\"1\":{\"185\":1,\"398\":1}}],[\"xy\",{\"1\":{\"317\":1,\"396\":1}}],[\"xzvf\",{\"1\":{\"752\":1,\"770\":1}}],[\"xzf\",{\"1\":{\"712\":1,\"1454\":1}}],[\"xz\",{\"1\":{\"274\":1,\"752\":3,\"1454\":3}}],[\"xxx$\",{\"1\":{\"854\":1}}],[\"xxx\",{\"1\":{\"207\":1,\"274\":2,\"298\":1,\"351\":1,\"511\":2,\"854\":1,\"872\":1,\"1275\":1,\"1298\":2,\"1418\":3,\"1426\":1,\"1440\":1,\"1441\":1,\"1459\":2,\"1462\":3,\"1515\":1,\"1607\":1}}],[\"xxxxxx\",{\"1\":{\"1159\":1}}],[\"xxxx\",{\"1\":{\"88\":1,\"854\":1}}],[\"xx\",{\"0\":{\"357\":1},\"1\":{\"207\":1,\"273\":1,\"357\":2,\"387\":1,\"658\":5,\"660\":3,\"664\":1,\"751\":2,\"794\":3}}],[\"x1=\",{\"1\":{\"1228\":1}}],[\"x1+x2+rdm\",{\"1\":{\"1212\":1}}],[\"x10\",{\"1\":{\"536\":2}}],[\"x19\",{\"1\":{\"526\":2}}],[\"x16\",{\"1\":{\"354\":1}}],[\"x1\",{\"1\":{\"205\":1,\"521\":2,\"524\":16,\"673\":1,\"1159\":1,\"1212\":1,\"1228\":2}}],[\"x=0\",{\"1\":{\"436\":2}}],[\"x=\",{\"1\":{\"180\":1}}],[\"x−a\",{\"1\":{\"91\":3}}],[\"x\",{\"0\":{\"35\":1},\"1\":{\"21\":6,\"34\":1,\"35\":8,\"36\":6,\"74\":9,\"79\":10,\"80\":6,\"84\":2,\"85\":5,\"91\":18,\"108\":3,\"120\":2,\"125\":6,\"150\":4,\"156\":3,\"172\":9,\"173\":3,\"180\":42,\"184\":3,\"185\":6,\"190\":1,\"194\":4,\"207\":1,\"220\":6,\"293\":4,\"304\":2,\"313\":2,\"314\":1,\"317\":1,\"340\":2,\"374\":3,\"398\":3,\"399\":3,\"401\":4,\"419\":2,\"435\":4,\"436\":7,\"466\":2,\"712\":7,\"713\":6,\"724\":1,\"766\":1,\"820\":4,\"843\":2,\"910\":2,\"933\":3,\"1004\":1,\"1142\":5,\"1155\":4,\"1156\":1,\"1159\":1,\"1161\":20,\"1185\":4,\"1212\":25,\"1228\":1,\"1293\":1,\"1295\":1,\"1446\":2,\"1449\":3,\"1462\":2,\"1463\":1}}],[\"寻找右子树中最靠左的节点\",{\"1\":{\"499\":2}}],[\"寻找右侧边界的二分搜索\",{\"0\":{\"21\":1}}],[\"寻找数组的中心索引\",{\"1\":{\"144\":1}}],[\"寻找左子树中最靠右的节点\",{\"1\":{\"499\":1}}],[\"寻找左边界\",{\"1\":{\"36\":1}}],[\"寻找左侧边界的二分搜索\",{\"0\":{\"20\":1}}],[\"寻找峰值\",{\"0\":{\"33\":1}}],[\"e和\",{\"1\":{\"1532\":1}}],[\"ebusy\",{\"1\":{\"1519\":1,\"1534\":1,\"1542\":1,\"1545\":5,\"1607\":1}}],[\"ebadf\",{\"1\":{\"1299\":2}}],[\"eexist\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"eeprom\",{\"1\":{\"1501\":6}}],[\"ee\",{\"1\":{\"1485\":1}}],[\"e5\",{\"1\":{\"1463\":2}}],[\"e8\",{\"1\":{\"1463\":2}}],[\"e8000000\",{\"1\":{\"1463\":1}}],[\"e8dc4081b13434b45189a720b77b6818\",{\"1\":{\"375\":2}}],[\"ehsize\",{\"1\":{\"1464\":1}}],[\"ehdr\",{\"1\":{\"1464\":3}}],[\"eh\",{\"1\":{\"1463\":2}}],[\"euid\",{\"1\":{\"1333\":1}}],[\"ezhannel\",{\"1\":{\"1209\":1}}],[\"efault\",{\"1\":{\"1312\":1,\"1314\":1,\"1315\":1,\"1316\":2}}],[\"ef01\",{\"1\":{\"972\":2}}],[\"efd\",{\"1\":{\"955\":1}}],[\"effect\",{\"1\":{\"1022\":1}}],[\"effectively\",{\"1\":{\"243\":1,\"600\":1,\"1592\":1}}],[\"effective\",{\"0\":{\"292\":1},\"1\":{\"236\":1,\"245\":3,\"271\":1,\"565\":1,\"580\":1,\"604\":1,\"1085\":1,\"1221\":1,\"1592\":1}}],[\"efficiency\",{\"1\":{\"559\":1,\"562\":1}}],[\"efficient\",{\"1\":{\"543\":1,\"558\":1,\"580\":1,\"606\":1}}],[\"efficiently\",{\"1\":{\"194\":1}}],[\"ejb而言\",{\"1\":{\"869\":1}}],[\"ega\",{\"1\":{\"776\":1}}],[\"err=talkwithdriver\",{\"1\":{\"1333\":1}}],[\"errcode\",{\"1\":{\"1328\":6}}],[\"err\",{\"1\":{\"693\":3,\"1301\":3,\"1313\":1,\"1320\":1,\"1333\":24,\"1365\":2,\"1606\":1,\"1607\":5,\"1611\":2}}],[\"errs\",{\"1\":{\"691\":2,\"693\":1}}],[\"erroneous\",{\"1\":{\"576\":1}}],[\"errorcheck\",{\"1\":{\"1333\":3}}],[\"errors\",{\"0\":{\"1206\":1},\"1\":{\"1060\":1,\"1203\":1,\"1204\":3,\"1206\":2}}],[\"errorlevel\",{\"1\":{\"746\":1}}],[\"error\",{\"0\":{\"1205\":1,\"1207\":1,\"1208\":1},\"1\":{\"288\":1,\"321\":5,\"347\":1,\"600\":1,\"703\":1,\"707\":9,\"759\":1,\"760\":3,\"923\":1,\"1052\":1,\"1056\":1,\"1057\":1,\"1203\":1,\"1204\":3,\"1206\":1,\"1278\":1,\"1299\":1,\"1301\":2,\"1320\":2,\"1328\":3,\"1333\":9,\"1365\":1,\"1405\":9,\"1426\":1,\"1448\":2,\"1449\":2,\"1483\":4,\"1487\":1,\"1498\":1,\"1509\":1,\"1570\":1,\"1591\":1,\"1609\":1,\"1611\":1,\"1613\":1}}],[\"eye\",{\"1\":{\"640\":1}}],[\"economy\",{\"1\":{\"1623\":1}}],[\"econnrefused\",{\"1\":{\"1299\":2}}],[\"ec\",{\"1\":{\"1463\":2}}],[\"ecn\",{\"1\":{\"978\":1}}],[\"echarts\",{\"1\":{\"888\":1}}],[\"echo\",{\"1\":{\"746\":2,\"747\":2,\"749\":2,\"760\":3,\"761\":3,\"978\":1,\"1004\":1,\"1073\":3,\"1145\":3,\"1228\":1,\"1231\":2,\"1269\":2,\"1278\":4,\"1287\":1}}],[\"ecs\",{\"0\":{\"644\":1},\"1\":{\"640\":1,\"643\":1,\"644\":2}}],[\"ecmascript\",{\"1\":{\"354\":1}}],[\"ethernet\",{\"1\":{\"977\":1}}],[\"eta=now\",{\"1\":{\"844\":1}}],[\"et\",{\"1\":{\"543\":2,\"545\":1,\"557\":1,\"558\":2,\"956\":1}}],[\"etc\",{\"1\":{\"233\":1,\"270\":2,\"609\":1,\"744\":3,\"747\":1,\"750\":2,\"759\":2,\"819\":2,\"859\":1,\"957\":1,\"1056\":1,\"1145\":4,\"1244\":1,\"1263\":3,\"1424\":3,\"1623\":1,\"1645\":3}}],[\"eqs\",{\"1\":{\"1524\":2,\"1584\":2}}],[\"equ\",{\"1\":{\"1228\":1}}],[\"equation\",{\"1\":{\"1206\":1}}],[\"equally\",{\"1\":{\"203\":1}}],[\"equals\",{\"1\":{\"151\":1,\"204\":1}}],[\"equal\",{\"1\":{\"20\":1,\"21\":1,\"212\":1,\"236\":1,\"245\":2,\"342\":1,\"559\":1,\"938\":2}}],[\"equipment\",{\"1\":{\"1125\":1}}],[\"equiv=\",{\"1\":{\"1004\":1}}],[\"eq\",{\"1\":{\"517\":2,\"706\":1,\"707\":1,\"1403\":1,\"1405\":1}}],[\"emul\",{\"1\":{\"1590\":1,\"1593\":1}}],[\"emulator\",{\"1\":{\"776\":1}}],[\"embedded\",{\"1\":{\"1501\":3,\"1508\":2}}],[\"em\",{\"1\":{\"1464\":1}}],[\"emacs\",{\"1\":{\"1243\":1}}],[\"ema\",{\"1\":{\"1217\":6}}],[\"email\",{\"1\":{\"1075\":1,\"1243\":1}}],[\"email=mail\",{\"1\":{\"609\":1}}],[\"emc\",{\"1\":{\"725\":1}}],[\"emit\",{\"1\":{\"692\":2}}],[\"empirically\",{\"1\":{\"1202\":1}}],[\"emptylist\",{\"1\":{\"1627\":1}}],[\"empty\",{\"1\":{\"401\":1,\"504\":1,\"508\":1,\"750\":1,\"1056\":1,\"1072\":1,\"1316\":3,\"1388\":1}}],[\"employ\",{\"1\":{\"256\":1}}],[\"emeditor\",{\"1\":{\"345\":1}}],[\"eperm\",{\"1\":{\"1595\":1,\"1596\":2}}],[\"epel\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"eprom\",{\"1\":{\"1501\":5}}],[\"epfd\",{\"1\":{\"955\":3}}],[\"epollet\",{\"1\":{\"956\":1}}],[\"epollerr\",{\"1\":{\"955\":1}}],[\"epollout\",{\"1\":{\"955\":1}}],[\"epollin\",{\"1\":{\"955\":2,\"956\":1}}],[\"epoll\",{\"0\":{\"947\":1,\"953\":1,\"955\":1,\"956\":1},\"1\":{\"761\":1,\"955\":18,\"956\":9}}],[\"epochs\",{\"1\":{\"1219\":2}}],[\"epoch\",{\"1\":{\"593\":1,\"594\":1,\"676\":3}}],[\"eps\",{\"1\":{\"643\":1}}],[\"ep\",{\"1\":{\"293\":1,\"294\":1}}],[\"esi\",{\"1\":{\"1463\":1}}],[\"establishment\",{\"1\":{\"1623\":1}}],[\"established\",{\"1\":{\"951\":1,\"982\":5,\"983\":1,\"984\":3}}],[\"establish\",{\"0\":{\"864\":1}}],[\"estimate\",{\"1\":{\"558\":1}}],[\"estimations\",{\"1\":{\"557\":1}}],[\"estimation\",{\"1\":{\"542\":1,\"543\":1,\"557\":1,\"558\":1,\"1130\":2,\"1209\":1}}],[\"esac\",{\"1\":{\"748\":1}}],[\"essentially\",{\"1\":{\"549\":1,\"557\":2,\"559\":1}}],[\"essential\",{\"1\":{\"273\":1,\"712\":1,\"770\":1,\"1073\":1,\"1475\":1}}],[\"especially\",{\"1\":{\"250\":1,\"1078\":1,\"1204\":1}}],[\"evtdev\",{\"1\":{\"1542\":1,\"1544\":1}}],[\"evt\",{\"1\":{\"1542\":2,\"1543\":3,\"1545\":2}}],[\"evision\",{\"1\":{\"1511\":1}}],[\"evicted\",{\"1\":{\"256\":1}}],[\"evolution\",{\"1\":{\"1508\":1}}],[\"ev\",{\"1\":{\"955\":1,\"956\":1,\"961\":4}}],[\"eval\",{\"0\":{\"904\":1},\"1\":{\"904\":1}}],[\"evaluation\",{\"0\":{\"560\":1}}],[\"evaluated\",{\"1\":{\"580\":1}}],[\"evaluate\",{\"1\":{\"236\":2,\"1623\":1}}],[\"evs\",{\"1\":{\"643\":1}}],[\"evconnlistener\",{\"1\":{\"961\":3}}],[\"evc\",{\"1\":{\"640\":1}}],[\"eversion\",{\"1\":{\"1365\":1}}],[\"everybody\",{\"1\":{\"1553\":1}}],[\"everything\",{\"1\":{\"271\":1,\"784\":1,\"785\":1,\"1099\":1,\"1365\":1,\"1376\":1,\"1623\":1}}],[\"every\",{\"1\":{\"236\":4,\"243\":1,\"245\":2,\"250\":1,\"542\":1,\"557\":1,\"562\":1,\"675\":2,\"676\":1,\"677\":1,\"988\":1,\"1076\":1,\"1143\":1,\"1189\":1,\"1602\":2}}],[\"event\",{\"1\":{\"321\":1,\"955\":5,\"959\":1,\"961\":10,\"962\":4,\"1316\":2,\"1543\":3,\"1544\":3,\"1545\":9,\"1573\":1,\"1590\":2,\"1596\":1}}],[\"events\",{\"1\":{\"321\":3,\"759\":1,\"955\":6,\"956\":1,\"961\":1}}],[\"even\",{\"1\":{\"236\":1,\"543\":2,\"549\":1,\"1602\":2,\"1623\":2}}],[\"evenly\",{\"1\":{\"177\":1}}],[\"edx\",{\"1\":{\"1463\":4}}],[\"edi\",{\"1\":{\"1463\":2}}],[\"editorkey\",{\"1\":{\"1056\":1}}],[\"editor\",{\"0\":{\"1084\":1},\"1\":{\"671\":1,\"1056\":5,\"1057\":1,\"1084\":1,\"1243\":1}}],[\"edit\",{\"1\":{\"289\":1,\"940\":1,\"1004\":1,\"1075\":1,\"1440\":5,\"1441\":2}}],[\"edition\",{\"1\":{\"230\":1,\"445\":1}}],[\"edge\",{\"1\":{\"777\":1,\"806\":2,\"989\":2}}],[\"edges\",{\"1\":{\"86\":3,\"90\":6}}],[\"ed25519\",{\"1\":{\"744\":1}}],[\"ed\",{\"1\":{\"285\":2,\"289\":3,\"1209\":1}}],[\"edu\",{\"1\":{\"270\":3,\"449\":1,\"619\":1,\"1177\":1,\"1216\":1}}],[\"e\",{\"1\":{\"224\":3,\"235\":1,\"303\":4,\"321\":1,\"371\":2,\"393\":1,\"396\":3,\"398\":1,\"548\":1,\"552\":1,\"557\":1,\"558\":2,\"559\":1,\"609\":3,\"610\":2,\"682\":3,\"692\":3,\"702\":1,\"717\":1,\"718\":1,\"751\":1,\"771\":1,\"973\":1,\"978\":1,\"1075\":1,\"1143\":2,\"1202\":1,\"1250\":1,\"1328\":2,\"1463\":6,\"1464\":21,\"1496\":1,\"1623\":4}}],[\"einval\",{\"1\":{\"1543\":1,\"1595\":1,\"1596\":3,\"1607\":1}}],[\"eintr\",{\"1\":{\"1301\":1}}],[\"eight\",{\"1\":{\"204\":3,\"559\":1}}],[\"either\",{\"1\":{\"203\":1,\"245\":1,\"550\":1,\"552\":1,\"556\":1,\"559\":1,\"576\":1,\"1118\":1,\"1388\":1,\"1620\":2}}],[\"ea\",{\"1\":{\"1485\":1}}],[\"eax\",{\"1\":{\"1463\":11}}],[\"easiest\",{\"1\":{\"774\":1}}],[\"easier\",{\"1\":{\"549\":1,\"573\":1,\"600\":1}}],[\"easily\",{\"1\":{\"492\":1,\"746\":1,\"774\":1,\"1072\":1,\"1202\":2,\"1219\":1}}],[\"easy\",{\"1\":{\"492\":2,\"1054\":1,\"1060\":1,\"1189\":1,\"1201\":1,\"1202\":1}}],[\"earlier\",{\"1\":{\"237\":1,\"1545\":1}}],[\"earlysingletonobjects\",{\"0\":{\"884\":1},\"1\":{\"882\":1}}],[\"early\",{\"1\":{\"211\":1,\"547\":1,\"599\":1,\"1557\":1}}],[\"each\",{\"1\":{\"194\":9,\"196\":1,\"203\":1,\"204\":2,\"234\":2,\"341\":1,\"465\":1,\"552\":1,\"556\":1,\"557\":3,\"558\":3,\"559\":2,\"562\":1,\"573\":1,\"580\":1,\"600\":1,\"751\":1,\"850\":1,\"1118\":2,\"1123\":1,\"1125\":1,\"1143\":2,\"1204\":1,\"1208\":1,\"1355\":1,\"1476\":1,\"1481\":1,\"1483\":1,\"1498\":1,\"1534\":2,\"1592\":1,\"1606\":2,\"1607\":1,\"1608\":1}}],[\"eat\",{\"1\":{\"155\":5}}],[\"eating\",{\"1\":{\"34\":1}}],[\"ex3\",{\"1\":{\"1425\":2}}],[\"exe\",{\"1\":{\"618\":3,\"794\":1,\"824\":1,\"1459\":1}}],[\"execve\",{\"1\":{\"739\":2}}],[\"exec\",{\"0\":{\"739\":1},\"1\":{\"371\":2,\"549\":1,\"609\":1,\"612\":1,\"739\":2,\"828\":1,\"1074\":2}}],[\"executable\",{\"1\":{\"1423\":1,\"1429\":2}}],[\"executecommand\",{\"1\":{\"1310\":3,\"1333\":3}}],[\"execute\",{\"1\":{\"687\":2,\"797\":2}}],[\"executed\",{\"1\":{\"548\":1,\"1475\":2,\"1620\":1}}],[\"executes\",{\"1\":{\"256\":1,\"584\":1,\"1481\":1,\"1493\":1,\"1495\":1,\"1497\":1}}],[\"executing\",{\"1\":{\"237\":1}}],[\"execution\",{\"0\":{\"549\":1,\"571\":1,\"1487\":1},\"1\":{\"212\":1,\"234\":2,\"236\":1,\"237\":1,\"245\":2,\"543\":7,\"548\":1,\"549\":12,\"552\":4,\"558\":1,\"565\":2,\"1476\":1,\"1479\":1,\"1485\":1,\"1487\":2,\"1493\":1}}],[\"ex1\",{\"1\":{\"603\":1}}],[\"exact\",{\"1\":{\"1105\":1,\"1487\":1}}],[\"exactly\",{\"1\":{\"559\":1,\"1592\":1}}],[\"examined\",{\"1\":{\"604\":1}}],[\"examine\",{\"1\":{\"573\":1,\"600\":1}}],[\"examining\",{\"1\":{\"233\":1}}],[\"examples↩︎\",{\"1\":{\"1435\":1}}],[\"examples\",{\"1\":{\"227\":1,\"237\":1,\"1185\":2,\"1413\":1,\"1424\":11,\"1425\":1,\"1501\":1}}],[\"example\",{\"0\":{\"204\":1,\"220\":1,\"315\":1,\"330\":1,\"506\":1,\"925\":1,\"1463\":1,\"1577\":1},\"1\":{\"172\":1,\"176\":1,\"193\":1,\"194\":4,\"227\":1,\"236\":2,\"245\":1,\"256\":1,\"323\":1,\"339\":1,\"341\":2,\"344\":1,\"390\":1,\"396\":1,\"397\":1,\"401\":2,\"454\":1,\"455\":1,\"502\":1,\"515\":1,\"584\":1,\"748\":1,\"750\":1,\"776\":1,\"797\":1,\"853\":1,\"892\":2,\"925\":2,\"942\":1,\"975\":1,\"1072\":1,\"1073\":1,\"1142\":1,\"1153\":1,\"1203\":1,\"1216\":1,\"1239\":1,\"1244\":1,\"1248\":1,\"1274\":1,\"1275\":2,\"1278\":2,\"1474\":1,\"1485\":1,\"1498\":1,\"1619\":1,\"1623\":4}}],[\"exam\",{\"1\":{\"164\":1}}],[\"exhibit\",{\"1\":{\"542\":1,\"582\":1,\"604\":1}}],[\"excellent\",{\"1\":{\"1623\":1}}],[\"exceeding\",{\"1\":{\"568\":1,\"570\":1,\"606\":1}}],[\"exceptions\",{\"1\":{\"1483\":2,\"1485\":1}}],[\"exception\",{\"0\":{\"1483\":1},\"1\":{\"321\":3,\"1328\":1,\"1333\":1,\"1482\":1,\"1483\":22,\"1485\":2,\"1498\":6,\"1502\":1}}],[\"except\",{\"1\":{\"289\":2,\"298\":1,\"309\":1}}],[\"excluded\",{\"1\":{\"344\":2}}],[\"exclude\",{\"1\":{\"344\":8}}],[\"exclusive\",{\"1\":{\"224\":1,\"534\":1,\"1316\":1}}],[\"existing\",{\"1\":{\"552\":1,\"774\":1,\"776\":1,\"1508\":1}}],[\"exist\",{\"1\":{\"361\":3,\"557\":1,\"793\":1}}],[\"exists\",{\"0\":{\"347\":1},\"1\":{\"288\":2,\"347\":2,\"431\":3,\"1386\":2,\"1434\":1}}],[\"exitcall\",{\"1\":{\"1553\":2}}],[\"exitdata\",{\"1\":{\"1553\":1}}],[\"exit函数退出rcu空闲状态\",{\"1\":{\"1526\":1}}],[\"exit函数退出rcu空闲处理\",{\"1\":{\"1526\":1}}],[\"exiting\",{\"1\":{\"707\":1,\"1405\":1}}],[\"exit\",{\"0\":{\"1526\":1,\"1546\":1},\"1\":{\"234\":1,\"288\":1,\"347\":1,\"856\":1,\"1278\":1,\"1299\":1,\"1310\":1,\"1376\":1,\"1449\":1,\"1516\":1,\"1518\":2,\"1520\":1,\"1526\":1,\"1542\":3,\"1543\":1,\"1544\":1,\"1545\":1,\"1553\":6}}],[\"ext\",{\"1\":{\"858\":2,\"1307\":1,\"1365\":1}}],[\"extern\",{\"1\":{\"1365\":1,\"1576\":14}}],[\"external\",{\"1\":{\"681\":1,\"682\":2,\"703\":8,\"896\":1,\"897\":1,\"1485\":1}}],[\"extents\",{\"1\":{\"1492\":1}}],[\"extent\",{\"1\":{\"1487\":1}}],[\"extensively\",{\"1\":{\"562\":1}}],[\"extension\",{\"1\":{\"245\":1,\"529\":1}}],[\"extendmarkdown\",{\"1\":{\"1105\":1}}],[\"extends\",{\"1\":{\"599\":1,\"1052\":1,\"1626\":1}}],[\"extendleft\",{\"1\":{\"341\":2}}],[\"extend\",{\"0\":{\"1104\":1},\"1\":{\"341\":2,\"486\":1,\"1052\":1}}],[\"extended\",{\"1\":{\"245\":5,\"502\":1,\"1584\":1}}],[\"extral\",{\"1\":{\"1056\":1}}],[\"extraargs\",{\"1\":{\"703\":2}}],[\"extra\",{\"1\":{\"557\":2,\"1054\":1,\"1341\":1}}],[\"extractall\",{\"1\":{\"1216\":1}}],[\"extract\",{\"0\":{\"1216\":1},\"1\":{\"1202\":1}}],[\"extraction\",{\"1\":{\"942\":1}}],[\"extracted\",{\"1\":{\"358\":1,\"359\":1,\"360\":2,\"1130\":1,\"1216\":1}}],[\"extracts\",{\"1\":{\"261\":1}}],[\"ex\",{\"1\":{\"236\":4,\"245\":2,\"702\":2,\"703\":2}}],[\"expansion\",{\"1\":{\"1623\":1}}],[\"expandtab\",{\"1\":{\"1259\":1}}],[\"express\",{\"1\":{\"1206\":1,\"1483\":1}}],[\"expression\",{\"0\":{\"411\":1},\"1\":{\"411\":1,\"465\":3,\"941\":2}}],[\"expired\",{\"1\":{\"1518\":2}}],[\"expires=now\",{\"1\":{\"844\":1}}],[\"expires=120\",{\"1\":{\"844\":1}}],[\"expire\",{\"1\":{\"827\":3,\"833\":2}}],[\"exposure\",{\"1\":{\"1623\":1}}],[\"exposes\",{\"1\":{\"1431\":1}}],[\"exposeproxy\",{\"1\":{\"879\":1}}],[\"exposed\",{\"1\":{\"237\":1,\"1623\":1}}],[\"exponential\",{\"1\":{\"1185\":1,\"1212\":1,\"1623\":1}}],[\"exponentialmovingaverage\",{\"1\":{\"1185\":2,\"1217\":3}}],[\"exported\",{\"1\":{\"1571\":1}}],[\"exports\",{\"1\":{\"1105\":1}}],[\"export\",{\"1\":{\"618\":1,\"923\":2,\"1073\":2,\"1542\":1,\"1577\":2}}],[\"expensive\",{\"1\":{\"1623\":1}}],[\"experience\",{\"1\":{\"1118\":1,\"1623\":1}}],[\"experiment\",{\"1\":{\"750\":1}}],[\"experiments\",{\"1\":{\"543\":2,\"552\":1,\"562\":1,\"564\":1}}],[\"expects\",{\"1\":{\"1483\":1}}],[\"expect\",{\"1\":{\"559\":1,\"1084\":1,\"1483\":1}}],[\"expected\",{\"1\":{\"177\":1,\"314\":1,\"321\":2,\"759\":1,\"1143\":1}}],[\"explicit\",{\"1\":{\"986\":1,\"1060\":1,\"1296\":1,\"1376\":1}}],[\"explicitly\",{\"1\":{\"227\":1,\"1060\":1}}],[\"explain\",{\"0\":{\"810\":1},\"1\":{\"810\":2,\"1060\":2,\"1126\":1,\"1623\":2}}],[\"explaination\",{\"1\":{\"465\":1}}],[\"exploiting\",{\"0\":{\"574\":1},\"1\":{\"599\":1,\"604\":1}}],[\"exploring\",{\"1\":{\"557\":1}}],[\"enodev\",{\"1\":{\"1543\":2}}],[\"enough\",{\"1\":{\"236\":1,\"552\":1,\"559\":1,\"1060\":1,\"1475\":1,\"1487\":1,\"1492\":1,\"1494\":1}}],[\"enum\",{\"1\":{\"1309\":2,\"1515\":2,\"1542\":2,\"1543\":1,\"1544\":1,\"1590\":1,\"1593\":5,\"1596\":1}}],[\"enumerate\",{\"0\":{\"397\":1},\"1\":{\"36\":1,\"92\":1,\"102\":1,\"118\":1,\"156\":1,\"157\":1,\"159\":1,\"186\":1,\"355\":1,\"356\":1,\"359\":1,\"360\":3,\"397\":2,\"480\":1,\"1189\":1}}],[\"en\",{\"0\":{\"1517\":1},\"1\":{\"766\":1,\"820\":1,\"848\":1,\"999\":1,\"1004\":1}}],[\"energy\",{\"1\":{\"557\":3,\"1509\":1,\"1623\":1}}],[\"engineering\",{\"1\":{\"1620\":1}}],[\"engine\",{\"0\":{\"557\":1},\"1\":{\"542\":1,\"543\":3,\"549\":8,\"557\":2}}],[\"enhances\",{\"1\":{\"1508\":1}}],[\"enhanceapp\",{\"1\":{\"1055\":1}}],[\"enhance\",{\"1\":{\"542\":1}}],[\"envelope\",{\"1\":{\"1623\":1}}],[\"enviroment\",{\"0\":{\"1175\":1}}],[\"environment\",{\"0\":{\"852\":1},\"1\":{\"856\":1,\"1118\":1,\"1130\":1,\"1501\":1}}],[\"environments\",{\"1\":{\"275\":1}}],[\"envirment\",{\"1\":{\"856\":1}}],[\"env\",{\"0\":{\"1418\":1},\"1\":{\"445\":5,\"706\":10,\"707\":11,\"1320\":4,\"1333\":5,\"1365\":2,\"1402\":5,\"1403\":5,\"1405\":11}}],[\"envname\",{\"1\":{\"444\":2}}],[\"encryption\",{\"1\":{\"1166\":1}}],[\"encrosing\",{\"1\":{\"418\":1}}],[\"encourage\",{\"1\":{\"1623\":1}}],[\"encounter\",{\"1\":{\"465\":1}}],[\"encodings\",{\"1\":{\"1189\":6}}],[\"encoding\",{\"1\":{\"676\":1,\"1170\":4,\"1189\":2}}],[\"encoding=\",{\"1\":{\"323\":1,\"387\":1,\"388\":1}}],[\"encode\",{\"1\":{\"375\":1,\"1000\":2,\"1094\":1}}],[\"enables\",{\"1\":{\"1486\":2,\"1492\":1,\"1499\":3}}],[\"enableaspectjautoproxy\",{\"0\":{\"879\":1},\"1\":{\"879\":2}}],[\"enabled\",{\"1\":{\"673\":3,\"1485\":4}}],[\"enable\",{\"1\":{\"250\":1,\"274\":1,\"879\":2,\"891\":1,\"962\":1,\"1272\":1,\"1499\":3,\"1516\":1,\"1517\":2,\"1518\":1,\"1520\":1}}],[\"entails\",{\"1\":{\"558\":1}}],[\"entires\",{\"1\":{\"261\":1}}],[\"entire\",{\"1\":{\"235\":1,\"341\":1,\"592\":1,\"599\":1,\"751\":1,\"776\":1,\"785\":1}}],[\"enterprises\",{\"1\":{\"1623\":8}}],[\"enterprise\",{\"1\":{\"1623\":5}}],[\"enter函数用于启动rcu空闲处理\",{\"1\":{\"1524\":1}}],[\"entered\",{\"1\":{\"1518\":2,\"1520\":3,\"1525\":1}}],[\"enter=\",{\"1\":{\"938\":1,\"939\":2}}],[\"entering\",{\"1\":{\"707\":2,\"1405\":3}}],[\"enter\",{\"0\":{\"1520\":1,\"1524\":1,\"1525\":1,\"1545\":1,\"1585\":1},\"1\":{\"234\":1,\"427\":8,\"748\":1,\"1055\":1,\"1299\":3,\"1301\":1,\"1310\":1,\"1514\":1,\"1516\":5,\"1518\":1,\"1519\":7,\"1520\":4,\"1523\":2,\"1524\":6,\"1542\":3,\"1543\":1,\"1544\":2,\"1585\":2}}],[\"entropy=tf\",{\"1\":{\"1212\":1}}],[\"entropy定义了真实值和预测值之间的交叉熵\",{\"1\":{\"1212\":1}}],[\"entropy\",{\"1\":{\"1185\":6,\"1212\":7,\"1553\":2}}],[\"entry+0x20\",{\"1\":{\"1515\":1}}],[\"entrypoint\",{\"1\":{\"1481\":2,\"1495\":1,\"1496\":2,\"1499\":2}}],[\"entry\",{\"0\":{\"1515\":1},\"1\":{\"194\":3,\"195\":4,\"196\":1,\"198\":1,\"261\":1,\"558\":1,\"559\":15,\"562\":3,\"576\":2,\"584\":4,\"587\":1,\"601\":2,\"602\":2,\"1143\":1,\"1316\":4,\"1341\":5,\"1464\":4,\"1495\":1,\"1515\":6,\"1532\":1,\"1607\":1,\"1608\":1}}],[\"entries\",{\"1\":{\"194\":13,\"204\":1,\"261\":1,\"559\":1,\"562\":2,\"602\":2,\"664\":1,\"1341\":1,\"1591\":1}}],[\"ensure\",{\"1\":{\"193\":1,\"236\":3}}],[\"endorse\",{\"1\":{\"1623\":1}}],[\"endurance\",{\"1\":{\"1501\":1}}],[\"end的\",{\"1\":{\"1155\":1}}],[\"end的目标检测\",{\"1\":{\"1155\":1}}],[\"end的预测\",{\"1\":{\"1151\":1}}],[\"endraw\",{\"1\":{\"1078\":2}}],[\"endhighlight\",{\"1\":{\"1078\":1}}],[\"endfor\",{\"1\":{\"892\":2}}],[\"endianness\",{\"1\":{\"1485\":1}}],[\"endian\",{\"1\":{\"670\":4,\"676\":1,\"1464\":2,\"1485\":1}}],[\"endif\",{\"1\":{\"507\":1,\"510\":1,\"511\":1,\"706\":1,\"1402\":1,\"1424\":1,\"1426\":1,\"1427\":1,\"1434\":1,\"1449\":1,\"1528\":1,\"1566\":1,\"1573\":1,\"1607\":1}}],[\"endl\",{\"1\":{\"455\":1,\"1004\":1}}],[\"end=len\",{\"1\":{\"392\":1}}],[\"end+1\",{\"1\":{\"149\":1}}],[\"end\",{\"0\":{\"302\":1},\"1\":{\"32\":5,\"92\":8,\"149\":3,\"179\":1,\"234\":2,\"236\":1,\"245\":1,\"301\":1,\"302\":3,\"341\":2,\"344\":1,\"361\":6,\"387\":5,\"388\":3,\"392\":1,\"406\":1,\"460\":1,\"465\":1,\"541\":1,\"542\":3,\"543\":4,\"549\":2,\"564\":2,\"566\":1,\"693\":1,\"705\":1,\"706\":2,\"751\":1,\"1212\":6,\"1228\":3,\"1259\":1,\"1400\":1,\"1402\":2,\"1623\":2}}],[\"elaborate\",{\"1\":{\"1498\":2,\"1623\":1}}],[\"elastic\",{\"1\":{\"640\":3,\"644\":1}}],[\"elasticsearch\",{\"1\":{\"382\":3}}],[\"elx\",{\"1\":{\"1483\":4}}],[\"el2=0x2\",{\"1\":{\"1483\":1}}],[\"el2\",{\"1\":{\"1479\":1,\"1485\":3,\"1494\":1}}],[\"el1=0x1\",{\"1\":{\"1483\":1}}],[\"el1\",{\"0\":{\"1495\":1},\"1\":{\"1476\":1,\"1479\":1,\"1485\":3,\"1487\":1,\"1490\":2,\"1491\":2,\"1495\":1}}],[\"el3=0x3\",{\"1\":{\"1483\":1}}],[\"el3\",{\"0\":{\"1479\":1,\"1494\":1},\"1\":{\"1476\":1,\"1479\":6,\"1483\":2,\"1484\":2,\"1485\":14,\"1490\":1,\"1497\":1}}],[\"elf文件解析\",{\"1\":{\"1465\":1}}],[\"elf32\",{\"1\":{\"1464\":15}}],[\"elf64\",{\"1\":{\"1463\":2,\"1464\":3}}],[\"elf\",{\"1\":{\"1456\":1,\"1459\":3,\"1462\":1,\"1464\":13,\"1465\":2}}],[\"el\",{\"1\":{\"904\":1,\"939\":1,\"941\":5,\"944\":2,\"1004\":1,\"1102\":1,\"1483\":17}}],[\"elb\",{\"1\":{\"640\":1}}],[\"el0=0x0\",{\"1\":{\"1483\":1}}],[\"el0\",{\"0\":{\"1479\":1},\"1\":{\"510\":3,\"1479\":2,\"1483\":5,\"1491\":1,\"1498\":1}}],[\"elcycib\",{\"1\":{\"339\":1}}],[\"eliminating\",{\"1\":{\"1204\":1}}],[\"eliminated\",{\"1\":{\"1204\":1}}],[\"eliminates\",{\"1\":{\"236\":1}}],[\"eligible\",{\"1\":{\"552\":1}}],[\"elif\",{\"1\":{\"19\":1,\"20\":2,\"21\":2,\"30\":1,\"31\":1,\"35\":1,\"108\":1,\"156\":1,\"165\":1,\"166\":1,\"186\":1,\"496\":1,\"499\":7,\"1219\":2,\"1607\":3}}],[\"elemtype\",{\"1\":{\"183\":2}}],[\"elementtype\",{\"1\":{\"879\":1}}],[\"elements\",{\"1\":{\"177\":1,\"344\":1,\"454\":1,\"465\":1,\"492\":1,\"941\":1,\"1123\":1}}],[\"element\",{\"0\":{\"33\":1,\"467\":1},\"1\":{\"177\":1,\"465\":2,\"467\":2,\"896\":1,\"897\":1,\"935\":1,\"940\":1,\"941\":3,\"1055\":3,\"1123\":1}}],[\"elseif\",{\"1\":{\"1427\":1}}],[\"else\",{\"0\":{\"1535\":1},\"1\":{\"6\":1,\"8\":1,\"9\":2,\"19\":1,\"23\":1,\"25\":2,\"26\":1,\"30\":1,\"31\":1,\"32\":2,\"33\":2,\"34\":3,\"35\":3,\"36\":1,\"74\":1,\"77\":1,\"88\":2,\"91\":2,\"97\":1,\"108\":1,\"118\":1,\"130\":2,\"132\":1,\"150\":2,\"154\":1,\"156\":1,\"157\":1,\"159\":2,\"160\":1,\"165\":1,\"166\":1,\"177\":1,\"184\":1,\"185\":1,\"186\":2,\"289\":2,\"314\":1,\"326\":1,\"397\":1,\"403\":4,\"431\":1,\"459\":2,\"465\":3,\"481\":2,\"496\":1,\"499\":6,\"511\":4,\"517\":1,\"673\":1,\"703\":3,\"1219\":1,\"1269\":1,\"1301\":1,\"1316\":3,\"1320\":1,\"1333\":2,\"1426\":1,\"1427\":1,\"1518\":3,\"1519\":1,\"1520\":1,\"1544\":1,\"1545\":1,\"1551\":1,\"1566\":1}}],[\"就把当前的\",{\"1\":{\"1607\":1}}],[\"就用到了\",{\"1\":{\"1591\":1}}],[\"就清除掉当前\",{\"1\":{\"1545\":1}}],[\"就切换到\",{\"1\":{\"1531\":1}}],[\"就说明\",{\"1\":{\"1487\":1}}],[\"就生效了\",{\"1\":{\"1380\":1}}],[\"就配置隔离策略\",{\"1\":{\"1355\":1}}],[\"就像是访问内存一样\",{\"1\":{\"1318\":1}}],[\"就像缓存中的一个条目\",{\"1\":{\"255\":1}}],[\"就继续使用\",{\"1\":{\"1242\":1}}],[\"就能自己去\",{\"1\":{\"1448\":1}}],[\"就能够使用\",{\"1\":{\"1025\":1}}],[\"就能确定具体的数据要取多少个\",{\"1\":{\"205\":1}}],[\"就进入拥塞避免算法\",{\"1\":{\"987\":1}}],[\"就定为默认的\",{\"1\":{\"980\":1}}],[\"就绪态\",{\"1\":{\"736\":1}}],[\"就有了\",{\"1\":{\"701\":1}}],[\"就产生了错误的编译\",{\"1\":{\"654\":1}}],[\"就增加\",{\"1\":{\"595\":1}}],[\"就被分配了\",{\"1\":{\"559\":1}}],[\"就被反转过来\",{\"1\":{\"243\":1}}],[\"就达到了\",{\"1\":{\"558\":1}}],[\"就要求关键路径尽可能的短\",{\"1\":{\"552\":1}}],[\"就要用到\",{\"1\":{\"418\":1}}],[\"就得到了目标页地址\",{\"1\":{\"530\":1}}],[\"就我个人的理解而言\",{\"1\":{\"530\":1}}],[\"就转移\",{\"1\":{\"520\":1}}],[\"就会出现各种丢包的情况\",{\"1\":{\"984\":1}}],[\"就会被创建\",{\"1\":{\"1381\":1}}],[\"就会被通知\",{\"1\":{\"962\":1}}],[\"就会被向链表头方向移动\",{\"1\":{\"460\":1}}],[\"就会使得读操作次数变多\",{\"1\":{\"956\":1}}],[\"就会导致循环依赖问题的产生\",{\"1\":{\"881\":1}}],[\"就会得到这样的结果\",{\"1\":{\"88\":1}}],[\"就如下所示\",{\"1\":{\"387\":1}}],[\"就表示预见的失败\",{\"1\":{\"374\":1}}],[\"就表示测试被跳过\",{\"1\":{\"373\":1}}],[\"就新建一个\",{\"1\":{\"336\":1}}],[\"就不一一列举了\",{\"1\":{\"1553\":1}}],[\"就不能使能更深层次的\",{\"1\":{\"1545\":1}}],[\"就不过多赘述了\",{\"1\":{\"1527\":1}}],[\"就不会自动推导\",{\"1\":{\"1445\":1}}],[\"就不会调用父类已经定义的\",{\"1\":{\"424\":1}}],[\"就不允许进入cpu执行\",{\"1\":{\"277\":1}}],[\"就不用括号\",{\"1\":{\"49\":1}}],[\"就需要使用\",{\"1\":{\"1521\":1}}],[\"就需要进行rcu空闲处理\",{\"1\":{\"1524\":1}}],[\"就需要进行\",{\"1\":{\"1169\":1}}],[\"就需要在voc数据集基础上进行改造\",{\"1\":{\"1159\":1}}],[\"就需要对页表进行查找\",{\"1\":{\"258\":1}}],[\"就需要花费较多的时间进行地址转换\",{\"1\":{\"255\":1}}],[\"就需要一个推导的过程\",{\"1\":{\"128\":1}}],[\"就更新到最新值\",{\"1\":{\"222\":1}}],[\"就置为无效\",{\"1\":{\"221\":1}}],[\"就一定是最好的\",{\"1\":{\"213\":1}}],[\"就\",{\"1\":{\"208\":1,\"1419\":1}}],[\"就看下标的不同\",{\"1\":{\"160\":1}}],[\"就返回\",{\"1\":{\"125\":1,\"956\":1}}],[\"就可以避免数据的冲突和不一致性\",{\"1\":{\"1524\":1}}],[\"就可以得到函数的起始汇编代码\",{\"1\":{\"1463\":1}}],[\"就可以得到若干个\",{\"1\":{\"671\":1}}],[\"就可以读取对象的\",{\"1\":{\"1380\":1}}],[\"就可以使用\",{\"1\":{\"1293\":1}}],[\"就可以使用斐波那契数列的三种解法解决这个问题\",{\"1\":{\"103\":1}}],[\"就可以维护一个高性能的消息队列\",{\"1\":{\"825\":1}}],[\"就可以互相通信\",{\"1\":{\"730\":1}}],[\"就可以直接使用了\",{\"1\":{\"695\":1,\"1395\":1}}],[\"就可以观察文件的结构信息\",{\"1\":{\"671\":1}}],[\"就可以进入\",{\"1\":{\"616\":1}}],[\"就可以对实例进行调用\",{\"1\":{\"435\":1}}],[\"就可以基于事件驱动编写高效的多任务程序\",{\"1\":{\"414\":1}}],[\"就可以实现按照字典的顺序排序了\",{\"1\":{\"304\":1}}],[\"就可以了\",{\"1\":{\"86\":1,\"212\":1,\"1242\":1}}],[\"就是后者的体现\",{\"1\":{\"1600\":1}}],[\"就是一些特殊情况的判断\",{\"1\":{\"1519\":1}}],[\"就是一个\",{\"1\":{\"1507\":1}}],[\"就是其新的一个行业标准\",{\"1\":{\"1508\":1}}],[\"就是编译后但是还未链接的那些中间文件\",{\"1\":{\"1459\":1}}],[\"就是找到的话\",{\"1\":{\"1426\":1}}],[\"就是链接的\",{\"1\":{\"1423\":1}}],[\"就是在原子调用链中增加一个\",{\"1\":{\"1570\":1}}],[\"就是在\",{\"1\":{\"1388\":1}}],[\"就是在每一轮的迭代中\",{\"1\":{\"1212\":1}}],[\"就是这块内存\",{\"1\":{\"1383\":1}}],[\"就是发生了对象的移动\",{\"1\":{\"1380\":1}}],[\"就是将该\",{\"1\":{\"1341\":1}}],[\"就是将置信度小于该阈值的box过滤掉\",{\"1\":{\"1157\":1}}],[\"就是到此为止\",{\"1\":{\"1333\":1}}],[\"就是到了饱和的状态\",{\"1\":{\"605\":1}}],[\"就是调用到\",{\"1\":{\"1301\":1}}],[\"就是使用的这个方法\",{\"1\":{\"739\":1}}],[\"就是使得物理硬件支持虚拟化特性\",{\"1\":{\"724\":1}}],[\"就是有名称\",{\"1\":{\"692\":1}}],[\"就是解释器的开销的前端\",{\"1\":{\"687\":1}}],[\"就是用来存放表达式临时值的地方\",{\"1\":{\"687\":1}}],[\"就是用作定位偏移得的\",{\"1\":{\"198\":1}}],[\"就是基于寄存器的虚拟机\",{\"1\":{\"687\":1}}],[\"就是按照顺序对预测器进行训练\",{\"1\":{\"590\":1}}],[\"就是最后一个\",{\"1\":{\"559\":1}}],[\"就是根据预测的历史来实现值的预测\",{\"1\":{\"545\":1}}],[\"就是我们需要内嵌的汇编代码\",{\"1\":{\"502\":1}}],[\"就是分割\",{\"1\":{\"329\":1}}],[\"就是迭代器\",{\"1\":{\"289\":1}}],[\"就是缓存了这一转换信息\",{\"1\":{\"255\":1}}],[\"就是进程切换的时候\",{\"1\":{\"253\":1}}],[\"就是通过寄存器指定我们需要的访问是\",{\"1\":{\"205\":1}}],[\"就是不需要保存完整的地址信息的\",{\"1\":{\"196\":1}}],[\"就是前缀和相等的地方\",{\"1\":{\"159\":1}}],[\"就是说在编译的时候会找\",{\"1\":{\"1421\":1}}],[\"就是说\",{\"1\":{\"550\":1,\"1428\":1}}],[\"就是说背包的大小要大于物品才可以进行装载\",{\"1\":{\"130\":1}}],[\"就是说我们先遍历左子树\",{\"1\":{\"46\":1}}],[\"就是从矩阵边界进行搜索\",{\"1\":{\"79\":1}}],[\"就是\",{\"1\":{\"20\":1,\"134\":1,\"479\":2,\"528\":1,\"552\":1,\"568\":1,\"1494\":1}}],[\"就没有必要走下去了\",{\"1\":{\"10\":1}}],[\"就没有必要进入下一层递归了\",{\"1\":{\"10\":1}}],[\"则从预先设置的里面返回\",{\"1\":{\"1608\":1}}],[\"则赋值给\",{\"1\":{\"1607\":1}}],[\"则缩短轮询的时间\",{\"1\":{\"1598\":1}}],[\"则适用于大型系统\",{\"1\":{\"1586\":1}}],[\"则向rcu调度器发送空闲通知\",{\"1\":{\"1585\":1}}],[\"则此标记的函数将被简单的丢弃\",{\"1\":{\"1553\":1}}],[\"则等价于\",{\"1\":{\"1551\":1}}],[\"则等待该模块使用完后再删除\",{\"1\":{\"719\":1}}],[\"则调度器会继续等待下一次轮询\",{\"1\":{\"1528\":1}}],[\"则调用相应的函数停止这些进程的运行\",{\"1\":{\"1585\":1}}],[\"则调用\",{\"1\":{\"1522\":1,\"1524\":1}}],[\"则立即唤醒该进程并将cpu分配给它\",{\"1\":{\"1528\":1}}],[\"则代表当前并不需要进行rcu空闲处理\",{\"1\":{\"1526\":1}}],[\"则单独新增新的博客\",{\"1\":{\"1505\":1}}],[\"则这个方法更新引用到新的位置\",{\"1\":{\"1381\":1}}],[\"则这里会有数据信息\",{\"1\":{\"678\":1}}],[\"则都会使用新的\",{\"1\":{\"1380\":1}}],[\"则退出循环\",{\"1\":{\"1333\":1}}],[\"则直接创建\",{\"1\":{\"1329\":1}}],[\"则默认为\",{\"1\":{\"1240\":1}}],[\"则默认位\",{\"1\":{\"514\":1}}],[\"则删除这个\",{\"1\":{\"1240\":1}}],[\"则在回收该对象的时候\",{\"1\":{\"1383\":1}}],[\"则在此处插入55的密文\",{\"1\":{\"1169\":1}}],[\"则在网络上发送一个广播\",{\"1\":{\"994\":1}}],[\"则请求其左孩子\",{\"1\":{\"1169\":1}}],[\"则发生改变\",{\"1\":{\"1025\":1}}],[\"则认为\",{\"1\":{\"1021\":1}}],[\"则得出目标的\",{\"1\":{\"994\":1}}],[\"则进行慢启动\",{\"1\":{\"987\":1}}],[\"则成倍增加滑动窗口大小\",{\"1\":{\"978\":1}}],[\"则创建该目录\",{\"1\":{\"959\":1}}],[\"则失败\",{\"1\":{\"742\":2}}],[\"则使用\",{\"1\":{\"1102\":1,\"1239\":1}}],[\"则使用一个\",{\"1\":{\"741\":1}}],[\"则使用以下解法\",{\"1\":{\"35\":1}}],[\"则说明发送端和接收端之间存在直接视距路径\",{\"1\":{\"1020\":1}}],[\"则说明创建命名管道成功\",{\"1\":{\"741\":1}}],[\"则说明命名管道存在\",{\"1\":{\"741\":1}}],[\"则说明预见的是失败\",{\"1\":{\"374\":1}}],[\"则执行过程是多个线程共同完成的\",{\"1\":{\"736\":1}}],[\"则更新内核模块\",{\"1\":{\"717\":1}}],[\"则其余部分分配在栈帧上\",{\"1\":{\"689\":1}}],[\"则增加置信值\",{\"1\":{\"587\":1}}],[\"则不赋予\",{\"1\":{\"687\":1}}],[\"则不需要\",{\"1\":{\"565\":1}}],[\"则不能\",{\"1\":{\"225\":1}}],[\"则会抛出一个警告信息\",{\"1\":{\"1524\":1}}],[\"则会对\",{\"1\":{\"1374\":1}}],[\"则会报错\",{\"1\":{\"1274\":1}}],[\"则会造成\",{\"1\":{\"988\":1}}],[\"则会重传\",{\"1\":{\"976\":1}}],[\"则会得出结论\",{\"1\":{\"557\":1}}],[\"则会返回其最右侧可以插入的位置\",{\"1\":{\"27\":1}}],[\"则可以重置\",{\"1\":{\"1243\":1}}],[\"则可以如下实现\",{\"1\":{\"1232\":1}}],[\"则可以如下所示\",{\"1\":{\"1231\":1}}],[\"则可以增加\",{\"1\":{\"662\":1}}],[\"则可以在\",{\"1\":{\"549\":1}}],[\"则可以使用一个\",{\"1\":{\"1534\":1}}],[\"则可以使用\",{\"1\":{\"28\":1,\"147\":1,\"917\":1,\"1101\":1,\"1421\":1}}],[\"则该指令的结果可以通过先前额指令进行预测\",{\"1\":{\"545\":1}}],[\"则跳转到上述地址\",{\"1\":{\"521\":1}}],[\"则跳转到\",{\"1\":{\"521\":1}}],[\"则经过替换之后的字符串为we\",{\"1\":{\"481\":1}}],[\"则弹出栈顶元素进行比较\",{\"1\":{\"465\":1}}],[\"则出栈继续\",{\"1\":{\"465\":1}}],[\"则结果应该是\",{\"1\":{\"453\":1}}],[\"则对象的\",{\"1\":{\"430\":1}}],[\"则子类和父类的属性都会被初始化\",{\"1\":{\"424\":1}}],[\"则父类的属性不会被初始化\",{\"1\":{\"424\":1}}],[\"则只需要如下代码\",{\"1\":{\"402\":1}}],[\"则需要用当前\",{\"1\":{\"1545\":1}}],[\"则需要使用其他类型的\",{\"1\":{\"529\":1}}],[\"则需要进行日志的配置\",{\"1\":{\"323\":1}}],[\"则需要注意到以下问题\",{\"1\":{\"147\":1}}],[\"则移除\",{\"1\":{\"303\":2}}],[\"则\",{\"1\":{\"261\":1,\"420\":1,\"432\":1,\"478\":1,\"518\":1,\"980\":1,\"1021\":1,\"1239\":1,\"1299\":1,\"1388\":1,\"1602\":1}}],[\"则用寄存器\",{\"1\":{\"245\":1}}],[\"则将源寄存器\",{\"1\":{\"534\":1}}],[\"则将指针指向另一个链表\",{\"1\":{\"459\":1}}],[\"则将特定的元素移动到\",{\"1\":{\"302\":1}}],[\"则将\",{\"1\":{\"245\":1}}],[\"则将从\",{\"1\":{\"245\":1}}],[\"则地址字段需要分配\",{\"1\":{\"198\":1}}],[\"则称\",{\"1\":{\"156\":1}}],[\"则必须是偶数\",{\"1\":{\"124\":1}}],[\"则表示不能重复选\",{\"1\":{\"120\":1}}],[\"则剩余的跳法为\",{\"1\":{\"103\":2}}],[\"则算法中止\",{\"1\":{\"71\":1}}],[\"则一定存在\",{\"1\":{\"36\":1}}],[\"则返回指向分配内存块的指针\",{\"1\":{\"1345\":1}}],[\"则返回\",{\"1\":{\"479\":1,\"494\":1}}],[\"则返回null\",{\"1\":{\"63\":1}}],[\"则返回其需要插入的位置\",{\"1\":{\"26\":1}}],[\"则返回了\",{\"1\":{\"20\":1}}],[\"则有可能存在\",{\"1\":{\"22\":1}}],[\"则当前线程为空闲线程\",{\"1\":{\"1316\":1}}],[\"则当前线程将开始处理消息循环\",{\"1\":{\"1298\":1}}],[\"则当\",{\"1\":{\"22\":1}}],[\"则两种组合是唯一的\",{\"1\":{\"10\":1}}],[\"如注释所示\",{\"1\":{\"1611\":1}}],[\"如风扇\",{\"1\":{\"1600\":1}}],[\"如寻找对应的\",{\"1\":{\"1591\":1}}],[\"如tsc\",{\"1\":{\"1527\":1}}],[\"如等待rcu更新的进程队列等\",{\"1\":{\"1526\":1}}],[\"如关闭某些设备\",{\"1\":{\"1523\":1}}],[\"如停止定时器\",{\"1\":{\"1523\":1}}],[\"如有不到之处\",{\"1\":{\"1359\":1}}],[\"如有多个满足条件的子数组\",{\"1\":{\"168\":1}}],[\"如线程同步\",{\"1\":{\"1304\":1}}],[\"如人脸检测的案例中\",{\"1\":{\"1157\":1}}],[\"如引文所示\",{\"1\":{\"1153\":1}}],[\"如通过计算机视觉的方法实现精确的人类姿态的检测十分困难一样\",{\"1\":{\"1131\":1}}],[\"如身体的自然摆动\",{\"1\":{\"1025\":1}}],[\"如全球定位系统gps\",{\"1\":{\"1014\":1}}],[\"如表所示\",{\"1\":{\"1012\":1}}],[\"如iou\",{\"1\":{\"1012\":1}}],[\"如wifi室内定位系统精度较低易受干扰\",{\"1\":{\"1012\":1}}],[\"如逻辑编址\",{\"1\":{\"977\":1}}],[\"如0x80\",{\"1\":{\"950\":1}}],[\"如0000可以到达的\",{\"1\":{\"88\":1}}],[\"如缺页异常\",{\"1\":{\"950\":1}}],[\"如日志\",{\"1\":{\"878\":1}}],[\"如统一的资源文件访问方式\",{\"1\":{\"873\":1}}],[\"如加减乘除这种算数指令\",{\"1\":{\"691\":1}}],[\"如图2所示\",{\"1\":{\"1170\":1}}],[\"如图\",{\"1\":{\"1022\":1}}],[\"如图中所示\",{\"1\":{\"950\":1}}],[\"如图中的\",{\"1\":{\"201\":1}}],[\"如图所示\",{\"1\":{\"691\":1,\"1019\":1,\"1020\":2,\"1131\":1,\"1132\":3,\"1134\":1,\"1135\":1,\"1169\":1}}],[\"如一个后缀为\",{\"1\":{\"691\":1}}],[\"如前文提的\",{\"1\":{\"688\":1}}],[\"如网站\",{\"1\":{\"643\":1}}],[\"如汽车碰撞实验\",{\"1\":{\"643\":1}}],[\"如云主机等\",{\"1\":{\"641\":1}}],[\"如开发框架\",{\"1\":{\"639\":1}}],[\"如上阐述\",{\"1\":{\"1532\":3}}],[\"如上文我们研究的\",{\"1\":{\"664\":1}}],[\"如上配置\",{\"1\":{\"609\":1}}],[\"如上所设置\",{\"1\":{\"609\":1}}],[\"如上图所示\",{\"1\":{\"203\":1}}],[\"如以前\",{\"1\":{\"576\":1}}],[\"如根据重要指令个性化概率\",{\"1\":{\"558\":1}}],[\"如可以在测试时统计测试的耗时\",{\"1\":{\"380\":1}}],[\"如返回\",{\"1\":{\"375\":1}}],[\"如下例子\",{\"1\":{\"692\":1}}],[\"如下图所示\",{\"1\":{\"691\":1,\"1155\":1,\"1569\":1}}],[\"如下代码可以看出来\",{\"1\":{\"424\":1}}],[\"如下的循环可以完成这个任务\",{\"1\":{\"402\":1}}],[\"如下\",{\"1\":{\"325\":1,\"379\":1,\"436\":1,\"1419\":2}}],[\"如下表所示\",{\"1\":{\"1562\":1}}],[\"如下表示\",{\"1\":{\"692\":1}}],[\"如下表\",{\"1\":{\"224\":1}}],[\"如下所示\",{\"1\":{\"146\":1,\"326\":1,\"355\":1,\"499\":1,\"502\":1,\"504\":1,\"517\":1,\"664\":2,\"666\":1,\"681\":1,\"1416\":1,\"1426\":2,\"1427\":1,\"1463\":1,\"1610\":1}}],[\"如第一次访问程序或者数据时\",{\"1\":{\"208\":1}}],[\"如缓存\",{\"1\":{\"192\":1}}],[\"如此确保对象的地址是正确的\",{\"1\":{\"1380\":1}}],[\"如此一来就在不用拷贝数据到内核地址空间的情况下完成了进程间通信\",{\"1\":{\"1355\":1}}],[\"如此一来\",{\"1\":{\"1307\":1}}],[\"如此就成功转换了时区\",{\"1\":{\"1113\":1}}],[\"如此就能在\",{\"1\":{\"1025\":1}}],[\"如此就可以根据功率时延谱来判断室内多径对主径的影响\",{\"1\":{\"1020\":1}}],[\"如此可以把循环进行颠倒\",{\"1\":{\"153\":1}}],[\"如此\",{\"1\":{\"118\":1,\"1025\":1,\"1440\":1}}],[\"如何让业务代码有扩展性\",{\"0\":{\"1624\":1}}],[\"如何营销这个服务\",{\"1\":{\"1031\":1}}],[\"如何提升你的产品或者服务\",{\"1\":{\"1031\":1}}],[\"如何像企业一样思考\",{\"0\":{\"1031\":1}}],[\"如何转变\",{\"1\":{\"1030\":1}}],[\"如何摆脱\",{\"1\":{\"1028\":1}}],[\"如何成为一个比现在更棒的软件开发人员\",{\"1\":{\"1028\":1}}],[\"如何在实际工作中使用二分思想\",{\"1\":{\"1065\":1}}],[\"如何在身体上\",{\"1\":{\"1028\":1}}],[\"如何在软件行业构建自己声望\",{\"1\":{\"1028\":1}}],[\"如何在目标检测网络中生成精确的bbox\",{\"1\":{\"1012\":1}}],[\"如何在用户态能看到其他进程的页表\",{\"1\":{\"252\":1}}],[\"如何有效利用\",{\"1\":{\"1012\":1}}],[\"如何设置非阻塞\",{\"1\":{\"956\":1}}],[\"如何设计算法\",{\"1\":{\"89\":1}}],[\"如何全部读出来\",{\"1\":{\"956\":1}}],[\"如何避免\",{\"1\":{\"876\":1}}],[\"如何将\",{\"1\":{\"657\":1}}],[\"如何将一个\",{\"1\":{\"88\":1}}],[\"如何判断\",{\"1\":{\"655\":1,\"982\":1}}],[\"如何判断一个字符串是否另一个的子序列\",{\"1\":{\"479\":1}}],[\"如何吸引大型公司加入公有云\",{\"1\":{\"637\":1}}],[\"如何解决循环依赖\",{\"0\":{\"880\":1}}],[\"如何解决\",{\"1\":{\"544\":1}}],[\"如何利用\",{\"1\":{\"544\":1}}],[\"如何跨越几个\",{\"1\":{\"542\":1}}],[\"如何遍历\",{\"1\":{\"454\":1}}],[\"如何实现\",{\"1\":{\"441\":1}}],[\"如何处理缺页失效或者\",{\"1\":{\"256\":1}}],[\"如何理解呢\",{\"1\":{\"1600\":1}}],[\"如何理解\",{\"1\":{\"212\":1,\"430\":1,\"604\":1,\"1499\":1}}],[\"如何理解这个比较函数呢\",{\"1\":{\"185\":1}}],[\"如何与前缀和联系起来\",{\"1\":{\"149\":1}}],[\"如何获取数组中所有奇数长度的子数组\",{\"1\":{\"149\":1}}],[\"如何快速得到某个子数组的和\",{\"1\":{\"147\":1}}],[\"如何确定可以使用\",{\"1\":{\"73\":1}}],[\"如何构造最终的结果\",{\"1\":{\"58\":1}}],[\"如何用\",{\"1\":{\"56\":1}}],[\"如何包裹\",{\"1\":{\"49\":1}}],[\"如\",{\"1\":{\"20\":1,\"100\":1,\"130\":1,\"205\":1,\"274\":1,\"372\":1,\"418\":1,\"433\":1,\"478\":1,\"514\":2,\"517\":2,\"532\":1,\"533\":1,\"639\":1,\"690\":1,\"692\":2,\"701\":1,\"725\":1,\"825\":1,\"828\":1,\"972\":2,\"998\":2,\"1012\":1,\"1014\":1,\"1432\":1,\"1454\":1,\"1510\":1,\"1522\":1,\"1528\":2,\"1611\":2,\"1620\":1}}],[\"如果成功找到的话\",{\"1\":{\"1610\":1}}],[\"如果默认的全局变量\",{\"1\":{\"1607\":1}}],[\"如果返回\",{\"1\":{\"1602\":1}}],[\"如果超过了温度阈值\",{\"1\":{\"1598\":1}}],[\"如果内核编译的时候没有包含该模块\",{\"1\":{\"1553\":1}}],[\"如果内存中的所有页表都在使用的话\",{\"1\":{\"259\":1}}],[\"如果模块直接被编进内核就不会被调用\",{\"1\":{\"1553\":1}}],[\"如果目标状态的flags字段中包含cpuidle\",{\"1\":{\"1526\":1}}],[\"如果目录不存在\",{\"1\":{\"959\":1}}],[\"如果当前cpu已经成功进入空闲状态\",{\"1\":{\"1585\":1}}],[\"如果当前cpu还有进程在运行\",{\"1\":{\"1585\":1}}],[\"如果当前cpu正在进行rcu更新操作\",{\"1\":{\"1524\":1}}],[\"如果当前的\",{\"1\":{\"1545\":1}}],[\"如果当前的火柴加上当前的桶的和超过了\",{\"1\":{\"15\":1}}],[\"如果当前存在锁冲突\",{\"1\":{\"1524\":1}}],[\"如果检测到目标状态需要刷新\",{\"1\":{\"1522\":1}}],[\"如果系统当前不需要调度\",{\"1\":{\"1516\":1}}],[\"如果某个知识点需要更加深入的了解的话\",{\"1\":{\"1505\":1}}],[\"如果镜像加载成功\",{\"1\":{\"1487\":1}}],[\"如果压缩文件是经过\",{\"1\":{\"1454\":1}}],[\"如果已有的话\",{\"1\":{\"1366\":1}}],[\"如果仅仅满足于现有架构或者技术的优势\",{\"1\":{\"1350\":1}}],[\"如果仅有num\",{\"1\":{\"13\":1}}],[\"如果映射的是文件\",{\"1\":{\"1318\":1}}],[\"如果处理进程工作队列\",{\"1\":{\"1316\":1}}],[\"如果处理器生成写入的速率大于内存可以完成的写入速率\",{\"1\":{\"216\":1}}],[\"如果手机上已经有此app\",{\"1\":{\"1274\":1}}],[\"如果屏幕状态是开启的话\",{\"1\":{\"1269\":1}}],[\"如果从git服务器clone到本地\",{\"1\":{\"1253\":1}}],[\"如果别人和你都clone了这个仓库\",{\"1\":{\"1250\":1}}],[\"如果改动文件不生效的话\",{\"1\":{\"1248\":1}}],[\"如果未选择清单名称\",{\"1\":{\"1240\":1}}],[\"如果与softmax一起使用的话\",{\"1\":{\"1212\":1}}],[\"如果与顺序有关\",{\"1\":{\"139\":1}}],[\"如果运行的话\",{\"1\":{\"1212\":1}}],[\"如果batch\",{\"1\":{\"1185\":1}}],[\"如果用户请求新的数值\",{\"1\":{\"1169\":1}}],[\"如果其引用的对象还在被使用的话\",{\"1\":{\"1383\":1}}],[\"如果其值大于一定阈值\",{\"1\":{\"1157\":1}}],[\"如果其没有左节点或者右节点\",{\"1\":{\"52\":1}}],[\"如果输入图片大小是16x16\",{\"1\":{\"1153\":1}}],[\"如果输入量非常大的话\",{\"1\":{\"294\":1}}],[\"如果提示\",{\"1\":{\"1145\":1}}],[\"如果提示大写的\",{\"1\":{\"374\":1}}],[\"如果你想在一个命令中同时进行压缩和解压缩操作\",{\"1\":{\"1454\":1}}],[\"如果你在本地的\",{\"1\":{\"1253\":1}}],[\"如果你的密码是\",{\"1\":{\"1111\":1}}],[\"如果你每天吃\",{\"1\":{\"155\":1}}],[\"如果该条件发生的话\",{\"1\":{\"1545\":1}}],[\"如果该单元格内确实存在目标\",{\"1\":{\"1156\":1}}],[\"如果该差距大于\",{\"1\":{\"1025\":1}}],[\"如果该对象没有实现接口\",{\"1\":{\"878\":1}}],[\"如果两个信号的\",{\"1\":{\"1025\":1}}],[\"如果第一个峰值是最高的功率峰值\",{\"1\":{\"1020\":1}}],[\"如果恶意地向某个端口发送大量的\",{\"1\":{\"988\":1}}],[\"如果连接两端同时发送\",{\"1\":{\"985\":1}}],[\"如果传输路径上的某个网络的\",{\"1\":{\"981\":1}}],[\"如果比较短\",{\"1\":{\"980\":1}}],[\"如果发生了回绕\",{\"1\":{\"982\":1}}],[\"如果发送缓冲区滑动窗口够大\",{\"1\":{\"980\":1}}],[\"如果发现了一个\",{\"1\":{\"545\":1}}],[\"如果一方不接收来自另一方的\",{\"1\":{\"980\":1}}],[\"如果一方\",{\"1\":{\"980\":1}}],[\"如果一个\",{\"1\":{\"1383\":2}}],[\"如果一个线程读取到的对象的引用\",{\"1\":{\"1381\":1}}],[\"如果一个对象被移动了\",{\"1\":{\"1381\":1}}],[\"如果一个进程内有多个线程\",{\"1\":{\"736\":1}}],[\"如果一个或者多个预测发生了\",{\"1\":{\"590\":1}}],[\"如果一个存储器的位置被引用\",{\"1\":{\"192\":1}}],[\"如果数据读不完\",{\"1\":{\"956\":1}}],[\"如果存储的对象是一个\",{\"1\":{\"927\":1}}],[\"如果存在多个\",{\"1\":{\"1421\":1}}],[\"如果存在1和0的数量差值相等的地方\",{\"1\":{\"159\":1}}],[\"如果存在一个整数\",{\"1\":{\"156\":1}}],[\"如果存在\",{\"1\":{\"156\":1}}],[\"如果遇到了\",{\"1\":{\"1243\":1}}],[\"如果遇到了向后兼容的问题\",{\"1\":{\"836\":1}}],[\"如果遇到了报错\",{\"1\":{\"274\":1}}],[\"如果分配成功\",{\"1\":{\"1345\":1}}],[\"如果分片导致重组失败\",{\"1\":{\"979\":1}}],[\"如果分为热数据和冷数据的场景\",{\"1\":{\"827\":1}}],[\"如果分析上面解法1的时间复杂度\",{\"1\":{\"153\":1}}],[\"如果再请求更多的数据\",{\"1\":{\"827\":1}}],[\"如果父进程想跟踪所有子进程的进程\",{\"1\":{\"738\":1}}],[\"如果我做好了一个网卡驱动程序\",{\"1\":{\"717\":1}}],[\"如果我们有一个现成的\",{\"1\":{\"1575\":1}}],[\"如果我们不再往下研究的话\",{\"1\":{\"1333\":1}}],[\"如果我们要更改\",{\"1\":{\"1424\":1}}],[\"如果我们要重新\",{\"1\":{\"1240\":1}}],[\"如果我们要给特定的项目创建分支\",{\"1\":{\"1239\":1}}],[\"如果我们需要使用多个变量\",{\"1\":{\"1231\":1}}],[\"如果我们需要多个样例的传播结果\",{\"1\":{\"1212\":1}}],[\"如果我们希望固件可以在更大程度上服用\",{\"1\":{\"377\":1}}],[\"如果我们事先知道测试函数会执行失败\",{\"1\":{\"374\":1}}],[\"如果我们想实现一个简单的\",{\"1\":{\"1537\":1}}],[\"如果我们想防止脚本被意外的按键终结\",{\"1\":{\"1232\":1}}],[\"如果我们想在库中包含\",{\"1\":{\"662\":1}}],[\"如果我们想通过类来调用方法\",{\"1\":{\"421\":1}}],[\"如果我们想打印到控制台的话\",{\"1\":{\"324\":1}}],[\"如果我们想将日志打印到文件中\",{\"1\":{\"323\":1}}],[\"如果我们假定有\",{\"1\":{\"261\":1}}],[\"如果我们检测到某个系统的\",{\"1\":{\"256\":1}}],[\"如果我们可以设计方法降低较大的\",{\"1\":{\"210\":1}}],[\"如果引用了\",{\"1\":{\"695\":1,\"1395\":1}}],[\"如果表达式栈有多于一个值\",{\"1\":{\"689\":1}}],[\"如果预测错误的话\",{\"1\":{\"654\":1}}],[\"如果预测成功的话\",{\"1\":{\"562\":1}}],[\"如果顺利的话\",{\"1\":{\"624\":1,\"658\":1}}],[\"如果找到了的话\",{\"1\":{\"559\":1}}],[\"如果找不到这个文件夹\",{\"1\":{\"336\":1}}],[\"如果计数器\",{\"1\":{\"559\":1}}],[\"如果每一个\",{\"1\":{\"557\":1}}],[\"如果每个指令需要多个处理器时钟周期\",{\"1\":{\"234\":1}}],[\"如果选择\",{\"1\":{\"549\":1}}],[\"如果选择一个偏大的页面的话\",{\"1\":{\"258\":1}}],[\"如果结果为零\",{\"1\":{\"520\":1}}],[\"如果指令的预测错误但是其在执行之前没有\",{\"1\":{\"565\":1}}],[\"如果指令不是投机的话\",{\"1\":{\"550\":1}}],[\"如果指令后带了这个\",{\"1\":{\"514\":1}}],[\"如果指定节点没有对应的\",{\"1\":{\"63\":1}}],[\"如果将输入图片划分为s∗s网格\",{\"1\":{\"1155\":1}}],[\"如果将\",{\"1\":{\"502\":1}}],[\"如果左右节点都有\",{\"1\":{\"499\":1}}],[\"如果到链表结束\",{\"1\":{\"459\":1}}],[\"如果重定义某个方法\",{\"1\":{\"427\":1}}],[\"如果重写了\",{\"1\":{\"424\":2}}],[\"如果子类和父类都有\",{\"1\":{\"425\":1}}],[\"如果子类定义了自己的初始化函数\",{\"1\":{\"424\":2}}],[\"如果子类没有定义自己的初始化函数\",{\"1\":{\"424\":1}}],[\"如果子节点是空的话\",{\"1\":{\"49\":1}}],[\"如果在遇到不确定的情况下\",{\"1\":{\"1459\":1}}],[\"如果在子类中需要父类的构造方法就需要显式地调用父类的构造方法\",{\"1\":{\"424\":1}}],[\"如果在类中增加\",{\"1\":{\"421\":1}}],[\"如果在实际的应用中\",{\"1\":{\"147\":1}}],[\"如果类已定义了\",{\"1\":{\"420\":1}}],[\"如果想了解原理但是不想对代码进行走读的\",{\"1\":{\"1291\":1}}],[\"如果想等到设备重启完成以后再进行下一步操作\",{\"1\":{\"1284\":1}}],[\"如果想知道具体的变更内容\",{\"1\":{\"1249\":1}}],[\"如果想使用普通的\",{\"1\":{\"1231\":1}}],[\"如果想使用正则表达式\",{\"1\":{\"411\":1}}],[\"如果想按照日期来重命名文件夹的话\",{\"1\":{\"1226\":1}}],[\"如果想更新所有的\",{\"1\":{\"917\":1,\"1101\":1}}],[\"如果想要永久有效\",{\"1\":{\"829\":1}}],[\"如果想删除表中所有的数据但是不影响到表的结构\",{\"1\":{\"805\":1}}],[\"如果想对文件进行重命名的话\",{\"1\":{\"349\":1}}],[\"如果使用s=7\",{\"1\":{\"1155\":1}}],[\"如果使用\",{\"1\":{\"388\":1,\"402\":1,\"426\":1,\"432\":1,\"480\":1}}],[\"如果需要对数组的遍历\",{\"1\":{\"903\":1}}],[\"如果需要读取其它类型的数据\",{\"1\":{\"529\":1}}],[\"如果需要保证提前量\",{\"1\":{\"509\":1}}],[\"如果需要\",{\"1\":{\"387\":1,\"1353\":1,\"1524\":1}}],[\"如果有\",{\"1\":{\"1528\":1}}],[\"如果有变动\",{\"1\":{\"997\":1}}],[\"如果有现成的静态编译器后端的话\",{\"1\":{\"690\":1}}],[\"如果有个项目急需为某个语言实现一个优化的\",{\"1\":{\"690\":1}}],[\"如果有文件操作\",{\"1\":{\"288\":1}}],[\"如果有多对数字的和等于s\",{\"1\":{\"166\":1}}],[\"如果安装\",{\"1\":{\"274\":1}}],[\"如果以后这个栏目数量太多了\",{\"1\":{\"268\":1}}],[\"如果缺失的话\",{\"1\":{\"255\":1}}],[\"如果程序经常访问比它拥有的物理存储更多的虚拟存储\",{\"1\":{\"253\":1}}],[\"如果说需要按任意按键跳过的\",{\"1\":{\"1232\":1}}],[\"如果说直接访问其他进程的页表有安全隐患\",{\"1\":{\"252\":1}}],[\"如果说\",{\"1\":{\"252\":1}}],[\"如果说计算出来的时间不够吃完所有的香蕉\",{\"1\":{\"34\":1}}],[\"如果访问未对齐的内存\",{\"1\":{\"229\":1}}],[\"如果对象中有属性字段\",{\"1\":{\"678\":1}}],[\"如果对\",{\"1\":{\"185\":1}}],[\"如果区间和比较大的时候\",{\"1\":{\"165\":1}}],[\"如果要退出某种\",{\"1\":{\"1542\":1}}],[\"如果要退出当前的虚环境\",{\"1\":{\"445\":1}}],[\"如果要使我们的代码对中断的原始状态不做过多的影响\",{\"1\":{\"1517\":1}}],[\"如果要使用第三方库的话\",{\"1\":{\"1426\":1}}],[\"如果要使用终端标准输入\",{\"1\":{\"961\":1}}],[\"如果要进行验证\",{\"1\":{\"1431\":1}}],[\"如果要看到输出\",{\"1\":{\"1424\":1}}],[\"如果要发生对象的修改\",{\"1\":{\"1380\":1}}],[\"如果要推送\",{\"1\":{\"1287\":2}}],[\"如果要把文件保存在工作目录\",{\"1\":{\"1249\":1}}],[\"如果要查看修改\",{\"1\":{\"1239\":1}}],[\"如果要显示全部信息\",{\"1\":{\"998\":1}}],[\"如果要选择基于栈的虚拟机的时候\",{\"1\":{\"687\":1}}],[\"如果要更省事的话\",{\"1\":{\"658\":1}}],[\"如果要删除的节点只有左节点\",{\"1\":{\"499\":1}}],[\"如果要删除这个\",{\"1\":{\"445\":1}}],[\"如果要降序排列的话\",{\"1\":{\"185\":1}}],[\"如果要设计出来一个模板的话\",{\"1\":{\"157\":1}}],[\"如果要求解\",{\"1\":{\"147\":1}}],[\"如果把循环顺序调换回来\",{\"1\":{\"130\":1}}],[\"如果没有这个属性的字段或者是\",{\"1\":{\"1462\":1}}],[\"如果没有关系的域\",{\"1\":{\"1355\":1}}],[\"如果没有使用\",{\"1\":{\"658\":1}}],[\"如果没有预测发生\",{\"1\":{\"590\":1}}],[\"如果没有找到任何一个\",{\"1\":{\"559\":1}}],[\"如果没有指定\",{\"1\":{\"514\":1}}],[\"如果没有石头剩下\",{\"1\":{\"125\":1}}],[\"如果没找到\",{\"1\":{\"26\":1,\"1607\":1}}],[\"如果上述遍历完成\",{\"1\":{\"102\":1}}],[\"如果大礼包里面的所有物品加起来超过我们要买的物品总数了\",{\"1\":{\"102\":1}}],[\"如果设f\",{\"1\":{\"94\":1}}],[\"如果无法完成此基因变化\",{\"1\":{\"92\":1}}],[\"如果觉得一次可以添加多个\",{\"1\":{\"88\":1}}],[\"如果小镇存在秘密法官并且可以确定他的身份\",{\"1\":{\"87\":1}}],[\"如果小镇的法官真的存在\",{\"1\":{\"87\":1}}],[\"如果不支持广播模式的话\",{\"1\":{\"1545\":1}}],[\"如果不够的话\",{\"1\":{\"1345\":1}}],[\"如果不再平衡\",{\"1\":{\"1169\":1}}],[\"如果不进行对齐的话\",{\"1\":{\"679\":1}}],[\"如果不是\",{\"1\":{\"618\":1}}],[\"如果不为\",{\"1\":{\"521\":1}}],[\"如果不存在\",{\"1\":{\"479\":1}}],[\"如果不存在符合条件的子数组\",{\"1\":{\"160\":1}}],[\"如果不显式调用父类的\",{\"1\":{\"425\":1}}],[\"如果不考虑状态压缩的话\",{\"1\":{\"120\":1}}],[\"如果不可能完成所有课程\",{\"1\":{\"86\":1}}],[\"如果不使用该方法的话\",{\"1\":{\"9\":1}}],[\"如果这些\",{\"1\":{\"1534\":1}}],[\"如果这两个队列满了\",{\"1\":{\"984\":1}}],[\"如果这样取得msg变量\",{\"1\":{\"934\":1}}],[\"如果这样比较难记忆\",{\"1\":{\"118\":1}}],[\"如果这个位置的值与标识符相同\",{\"1\":{\"534\":1}}],[\"如果这个提示最终被证明是错误的\",{\"1\":{\"243\":1}}],[\"如果这个\",{\"1\":{\"216\":1}}],[\"如果这个不好理解\",{\"1\":{\"75\":1}}],[\"如果这道题目按照上述模板进行的话\",{\"1\":{\"158\":1}}],[\"如果这堆香蕉少于\",{\"1\":{\"34\":1}}],[\"如果能进入每个房间返回\",{\"1\":{\"75\":1}}],[\"如果所有结点均被访问\",{\"1\":{\"71\":1}}],[\"如果是主线程的话\",{\"1\":{\"1299\":1}}],[\"如果是改动过的\",{\"1\":{\"1242\":1}}],[\"如果是有状态\",{\"1\":{\"876\":1}}],[\"如果是一个无状态\",{\"1\":{\"876\":1}}],[\"如果是循环读所有的\",{\"1\":{\"827\":1}}],[\"如果是个\",{\"1\":{\"675\":1}}],[\"如果是使能了\",{\"1\":{\"673\":1}}],[\"如果是在后台运行的话\",{\"1\":{\"621\":1}}],[\"如果是在\",{\"1\":{\"445\":1,\"1102\":1}}],[\"如果是分支指令的话\",{\"1\":{\"245\":1}}],[\"如果是存储\",{\"1\":{\"245\":1}}],[\"如果是载入\",{\"1\":{\"245\":1}}],[\"如果是初始化为\",{\"1\":{\"160\":1}}],[\"如果是\",{\"1\":{\"149\":1,\"559\":1,\"1298\":1}}],[\"如果是要求结果是整数\",{\"1\":{\"35\":1}}],[\"如果是重复的元素\",{\"1\":{\"27\":1}}],[\"如果初始化为左闭右开区间\",{\"1\":{\"22\":1}}],[\"如果\",{\"1\":{\"13\":1,\"91\":3,\"120\":1,\"125\":2,\"169\":1,\"210\":1,\"258\":1,\"259\":1,\"432\":3,\"494\":1,\"521\":1,\"687\":1,\"837\":1,\"976\":1,\"980\":2,\"985\":1,\"987\":1,\"1381\":2,\"1453\":1,\"1487\":2,\"1521\":1,\"1545\":2,\"1608\":1}}],[\"如果题目要求\",{\"1\":{\"10\":1}}],[\"如果至少一个所选数字数量不同\",{\"1\":{\"10\":1}}],[\"离目标元素最近的元素\",{\"1\":{\"20\":1}}],[\"比传统的music算法能够更加有效地过滤噪音信号\",{\"1\":{\"1012\":1}}],[\"比特的计数器\",{\"1\":{\"982\":1}}],[\"比特位长度的数据\",{\"1\":{\"670\":1}}],[\"比源端网络的\",{\"1\":{\"981\":1}}],[\"比\",{\"1\":{\"499\":1,\"842\":1}}],[\"比较纯粹的调用链\",{\"1\":{\"1565\":1}}],[\"比较不好理解\",{\"1\":{\"1498\":1}}],[\"比较不错\",{\"1\":{\"497\":1}}],[\"比较重要\",{\"1\":{\"1484\":1}}],[\"比较难理解的是\",{\"1\":{\"1481\":1}}],[\"比较好理解\",{\"1\":{\"1423\":1}}],[\"比较流行的算法可以分为两类\",{\"1\":{\"1151\":1}}],[\"比较流行\",{\"1\":{\"652\":1}}],[\"比较结果是无符号大于\",{\"1\":{\"517\":1}}],[\"比较直观的解法\",{\"1\":{\"495\":1}}],[\"比较\",{\"1\":{\"356\":1,\"520\":1}}],[\"比较高的话\",{\"1\":{\"256\":1}}],[\"比较高级的技巧是使用\",{\"1\":{\"88\":1}}],[\"比较经典的协议就是\",{\"1\":{\"224\":1}}],[\"比较简单\",{\"1\":{\"221\":1}}],[\"比较的结果是使得其升序排列了\",{\"1\":{\"173\":1}}],[\"比较基础的处理方法\",{\"1\":{\"149\":1}}],[\"比较方便\",{\"1\":{\"20\":1}}],[\"比较慢\",{\"1\":{\"20\":1}}],[\"比如我们重点研究的\",{\"1\":{\"1380\":1}}],[\"比如我们经常会使用到的\",{\"1\":{\"1307\":1}}],[\"比如我们一共有\",{\"1\":{\"198\":1}}],[\"比如毫米波或者thz单位上\",{\"1\":{\"1133\":1}}],[\"比如低空间分辨率\",{\"1\":{\"1132\":1}}],[\"比如排序\",{\"1\":{\"933\":1}}],[\"比如搬瓦工的\",{\"1\":{\"643\":1}}],[\"比如下面的例子\",{\"1\":{\"435\":1}}],[\"比如最常见的\",{\"1\":{\"428\":1}}],[\"比如关于不同密码返回不同结果要如何测试\",{\"1\":{\"375\":1}}],[\"比如计算圆周率\",{\"1\":{\"280\":1}}],[\"比如说传感器\",{\"1\":{\"1507\":1}}],[\"比如说这个文件里面的段\",{\"1\":{\"1462\":1}}],[\"比如说这边举了一个例子\",{\"1\":{\"197\":1}}],[\"比如说可以进行通信和数据交互的域\",{\"1\":{\"1355\":1}}],[\"比如说有一个场景\",{\"1\":{\"829\":1}}],[\"比如说性别\",{\"1\":{\"812\":1}}],[\"比如说前后两个栈帧之间可以共享一部分数据用来传递参数\",{\"1\":{\"667\":1}}],[\"比如说对于一个\",{\"1\":{\"559\":1}}],[\"比如说我们不能要求单个\",{\"1\":{\"236\":1}}],[\"比如说\",{\"1\":{\"184\":1,\"298\":1,\"1441\":1,\"1469\":1,\"1498\":1}}],[\"比如15最大值为8\",{\"1\":{\"165\":1}}],[\"比如在第一个例子中\",{\"1\":{\"102\":1}}],[\"比如\",{\"1\":{\"9\":1,\"86\":1,\"132\":1,\"220\":1,\"390\":1,\"421\":1,\"427\":2,\"428\":1,\"467\":1,\"724\":1,\"951\":1}}],[\"库中的许多函数使用的参数或者返回值都是使用的字节表示的对象大小\",{\"1\":{\"1469\":1}}],[\"库中包含的类不会进行\",{\"1\":{\"662\":1}}],[\"库的时机\",{\"1\":{\"696\":1,\"1396\":1}}],[\"库的加载必须是在\",{\"1\":{\"696\":1,\"1396\":1}}],[\"库的加载\",{\"1\":{\"696\":1,\"1396\":1}}],[\"库的名字是\",{\"1\":{\"696\":1,\"1396\":1}}],[\"库的路径\",{\"1\":{\"658\":1}}],[\"库安装在\",{\"1\":{\"273\":1}}],[\"库\",{\"1\":{\"19\":1,\"696\":3,\"725\":1,\"1396\":3}}],[\"wfi\",{\"0\":{\"1537\":1},\"1\":{\"1537\":5}}],[\"wk\",{\"1\":{\"1481\":1}}],[\"wm\",{\"1\":{\"1228\":1}}],[\"wget\",{\"1\":{\"1161\":1,\"1265\":1,\"1647\":1}}],[\"wlan0\",{\"1\":{\"1145\":1}}],[\"wll\",{\"1\":{\"785\":1}}],[\"wtforms\",{\"1\":{\"1053\":1}}],[\"ws2\",{\"1\":{\"960\":1}}],[\"wsgi\",{\"0\":{\"860\":1},\"1\":{\"847\":1,\"864\":1,\"865\":1}}],[\"wsl2\",{\"1\":{\"618\":1,\"664\":1}}],[\"wsl\",{\"0\":{\"618\":1},\"1\":{\"614\":3,\"618\":7,\"1633\":1}}],[\"wchar\",{\"1\":{\"692\":1,\"1471\":1}}],[\"w0rp\",{\"1\":{\"1258\":1,\"1259\":1}}],[\"w0\",{\"1\":{\"673\":3}}],[\"w1\",{\"1\":{\"1212\":11}}],[\"w11\",{\"1\":{\"538\":1}}],[\"w16\",{\"1\":{\"521\":2,\"525\":1}}],[\"wn\",{\"1\":{\"536\":1}}],[\"wdrw\",{\"1\":{\"956\":1}}],[\"wd\",{\"1\":{\"536\":1,\"1543\":6}}],[\"w9\",{\"1\":{\"532\":2,\"538\":2}}],[\"w2\",{\"1\":{\"527\":2,\"528\":2,\"1212\":7}}],[\"w8\",{\"1\":{\"524\":2,\"533\":2}}],[\"w6\",{\"1\":{\"522\":3}}],[\"w4w\",{\"1\":{\"390\":1}}],[\"w+\",{\"1\":{\"289\":1,\"361\":2}}],[\"wb\",{\"1\":{\"236\":5,\"245\":1,\"298\":1,\"1221\":1}}],[\"woken\",{\"1\":{\"1545\":1}}],[\"won\",{\"1\":{\"777\":1}}],[\"wow\",{\"1\":{\"390\":1}}],[\"would\",{\"1\":{\"234\":1,\"236\":3,\"557\":6,\"558\":1,\"941\":1}}],[\"worlds\",{\"1\":{\"1623\":1}}],[\"world\",{\"0\":{\"771\":1,\"1396\":2,\"1440\":1,\"1445\":1},\"1\":{\"620\":1,\"621\":1,\"771\":1,\"774\":1,\"781\":1,\"785\":1,\"786\":1,\"943\":1,\"959\":3,\"965\":1,\"966\":1,\"1330\":1,\"1440\":1,\"1474\":6,\"1479\":2,\"1491\":1,\"1495\":1,\"1496\":1,\"1499\":2}}],[\"worthwhile\",{\"1\":{\"542\":1}}],[\"worry\",{\"1\":{\"237\":1}}],[\"workflow\",{\"0\":{\"1239\":1},\"1\":{\"1239\":1,\"1254\":1}}],[\"workon\",{\"1\":{\"445\":1}}],[\"works\",{\"0\":{\"1167\":1,\"1578\":1},\"1\":{\"341\":1,\"939\":1}}],[\"workspace\",{\"1\":{\"326\":1}}],[\"workers\",{\"1\":{\"625\":1}}],[\"workers=worker\",{\"1\":{\"289\":1}}],[\"workers=8\",{\"1\":{\"288\":1}}],[\"worker\",{\"1\":{\"326\":2,\"843\":1}}],[\"workcode\",{\"1\":{\"326\":1}}],[\"working\",{\"1\":{\"321\":2,\"1239\":1}}],[\"work\",{\"0\":{\"545\":1},\"1\":{\"194\":1,\"288\":1,\"557\":1,\"562\":1,\"580\":1,\"599\":1,\"747\":1,\"759\":1,\"774\":1,\"1080\":1,\"1124\":1,\"1143\":1,\"1308\":2,\"1316\":11,\"1536\":1,\"1590\":1}}],[\"worst\",{\"1\":{\"177\":1}}],[\"words\",{\"0\":{\"605\":1,\"865\":1,\"1139\":1},\"1\":{\"186\":7,\"204\":2,\"343\":3,\"344\":2,\"358\":1,\"359\":1,\"360\":1,\"455\":1,\"605\":2,\"675\":1,\"865\":1,\"1139\":1,\"1208\":1,\"1388\":1}}],[\"wordbreak\",{\"1\":{\"138\":1}}],[\"worddict\",{\"1\":{\"138\":5}}],[\"word\",{\"0\":{\"191\":1,\"676\":1,\"1126\":1},\"1\":{\"115\":1,\"138\":5,\"191\":1,\"196\":3,\"204\":6,\"210\":1,\"211\":2,\"245\":2,\"343\":3,\"344\":2,\"529\":1,\"675\":1,\"676\":2,\"677\":1,\"682\":1,\"1464\":2}}],[\"wakeup\",{\"0\":{\"1543\":1},\"1\":{\"1542\":3,\"1543\":2}}],[\"walls\",{\"1\":{\"1130\":2}}],[\"wall\",{\"1\":{\"1130\":1,\"1554\":1}}],[\"walkers\",{\"1\":{\"256\":2}}],[\"walk\",{\"1\":{\"256\":1}}],[\"warehouse\",{\"1\":{\"793\":2}}],[\"warm\",{\"0\":{\"660\":1},\"1\":{\"1481\":3}}],[\"war\",{\"1\":{\"613\":3}}],[\"warn\",{\"1\":{\"321\":1,\"1103\":1,\"1545\":1,\"1571\":1,\"1573\":1}}],[\"warnings\",{\"1\":{\"383\":1,\"960\":1}}],[\"warning\",{\"1\":{\"320\":2,\"321\":3,\"1106\":1,\"1365\":1}}],[\"wang\",{\"1\":{\"427\":2}}],[\"wangwang\",{\"1\":{\"425\":2,\"427\":2}}],[\"want\",{\"1\":{\"339\":1,\"747\":1,\"856\":1,\"923\":1,\"1071\":1,\"1075\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1105\":1,\"1216\":2,\"1217\":1,\"1221\":1}}],[\"waits\",{\"1\":{\"1381\":1}}],[\"waitpid\",{\"1\":{\"1374\":1}}],[\"waitforresponse\",{\"1\":{\"1333\":8}}],[\"waitkey\",{\"1\":{\"1189\":1}}],[\"wait\",{\"1\":{\"387\":1,\"955\":1,\"956\":7,\"975\":1,\"983\":5,\"1099\":1,\"1284\":1,\"1287\":2,\"1316\":7,\"1537\":1,\"1611\":2}}],[\"waiting\",{\"1\":{\"194\":1,\"216\":1,\"1316\":2,\"1528\":1}}],[\"watchdog\",{\"1\":{\"1499\":2}}],[\"watch\",{\"0\":{\"926\":1},\"1\":{\"320\":2,\"828\":1,\"922\":1,\"925\":2,\"926\":4}}],[\"water\",{\"1\":{\"78\":1}}],[\"wasd\",{\"1\":{\"1056\":1}}],[\"was\",{\"1\":{\"243\":1,\"542\":1,\"552\":1,\"565\":1,\"1189\":1,\"1216\":1,\"1219\":2,\"1376\":1,\"1501\":1,\"1508\":1,\"1623\":2}}],[\"ways\",{\"0\":{\"209\":1},\"1\":{\"194\":8,\"203\":4,\"204\":2,\"309\":1,\"747\":1,\"896\":1,\"1079\":1,\"1425\":1}}],[\"way\",{\"0\":{\"194\":1},\"1\":{\"194\":25,\"197\":1,\"202\":11,\"203\":3,\"204\":9,\"235\":1,\"237\":1,\"308\":1,\"340\":1,\"558\":2,\"774\":1,\"896\":1,\"940\":1,\"1060\":2,\"1091\":1,\"1202\":1,\"1208\":1,\"1219\":1,\"1333\":1,\"1491\":1,\"1498\":1}}],[\"wrap\",{\"1\":{\"820\":1}}],[\"wrote\",{\"1\":{\"746\":1}}],[\"wrong\",{\"1\":{\"193\":1,\"243\":1,\"340\":3,\"385\":1,\"432\":2,\"565\":1}}],[\"writable\",{\"1\":{\"703\":2}}],[\"writing\",{\"1\":{\"236\":1,\"361\":5,\"557\":1,\"1079\":1,\"1620\":1}}],[\"written\",{\"1\":{\"216\":1,\"245\":1,\"557\":1,\"573\":1,\"890\":1,\"1201\":1,\"1483\":1}}],[\"writeablility\",{\"1\":{\"1611\":1}}],[\"writetoparcel\",{\"1\":{\"1329\":1}}],[\"writetransactiondata\",{\"1\":{\"1333\":4}}],[\"writetransaction\",{\"1\":{\"1320\":2}}],[\"writeint\",{\"1\":{\"1329\":1}}],[\"writeinterfacetoken\",{\"1\":{\"1329\":1}}],[\"writeint32\",{\"1\":{\"1299\":3,\"1320\":2,\"1333\":1}}],[\"writeunpadbuffer\",{\"1\":{\"1320\":1}}],[\"writerawdata\",{\"1\":{\"1320\":2}}],[\"writers\",{\"1\":{\"237\":1}}],[\"writebuffer\",{\"1\":{\"1320\":1}}],[\"writelines\",{\"1\":{\"289\":1}}],[\"writestring\",{\"1\":{\"1329\":2}}],[\"writestring16\",{\"1\":{\"1320\":1}}],[\"writestrongbinder\",{\"1\":{\"1329\":1}}],[\"writes\",{\"1\":{\"217\":1,\"361\":2,\"557\":2,\"1481\":1}}],[\"write\",{\"0\":{\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"221\":1,\"222\":1,\"1312\":1,\"1314\":1},\"1\":{\"103\":2,\"190\":1,\"214\":3,\"216\":6,\"217\":4,\"218\":6,\"220\":1,\"224\":1,\"227\":1,\"236\":4,\"245\":2,\"271\":1,\"325\":1,\"361\":1,\"557\":6,\"573\":1,\"603\":1,\"743\":1,\"956\":1,\"962\":1,\"1052\":1,\"1055\":1,\"1196\":1,\"1216\":2,\"1301\":6,\"1307\":4,\"1309\":1,\"1311\":2,\"1312\":2,\"1313\":3,\"1314\":10,\"1316\":2,\"1333\":2,\"1483\":1,\"1507\":1}}],[\"went\",{\"1\":{\"1623\":1}}],[\"weakness\",{\"1\":{\"1623\":1}}],[\"welcome\",{\"0\":{\"1004\":1},\"1\":{\"761\":2,\"1004\":8,\"1075\":1}}],[\"wellknownclasses\",{\"1\":{\"707\":5,\"1405\":5}}],[\"well\",{\"1\":{\"543\":2,\"548\":1,\"599\":1,\"604\":1,\"707\":1,\"1084\":1,\"1124\":1,\"1405\":1}}],[\"webshop\",{\"1\":{\"1511\":1}}],[\"webpack\",{\"1\":{\"942\":1,\"1056\":1}}],[\"webhook\",{\"1\":{\"754\":1}}],[\"web\",{\"0\":{\"859\":1},\"1\":{\"616\":1,\"623\":1,\"624\":3,\"639\":1,\"644\":1,\"646\":2,\"860\":1,\"888\":1,\"892\":1,\"965\":2,\"966\":2,\"1052\":1,\"1054\":1},\"2\":{\"867\":1}}],[\"weibo\",{\"1\":{\"1623\":1}}],[\"weixin\",{\"1\":{\"412\":1,\"844\":1}}],[\"weigao1024\",{\"1\":{\"1075\":1}}],[\"weigaochen\",{\"0\":{\"1003\":1},\"1\":{\"622\":3}}],[\"weigao\",{\"1\":{\"308\":2,\"388\":2,\"408\":1,\"412\":2,\"609\":1,\"760\":1,\"998\":1,\"1060\":1,\"1626\":1,\"1627\":1,\"1629\":1}}],[\"weight=2\",{\"1\":{\"763\":1}}],[\"weight=1\",{\"1\":{\"763\":1}}],[\"weight\",{\"1\":{\"118\":3,\"125\":1,\"763\":2,\"1142\":2,\"1185\":3,\"1186\":3,\"1212\":1,\"1592\":3}}],[\"weights\",{\"1\":{\"118\":7,\"1142\":1,\"1161\":4,\"1162\":2,\"1185\":8,\"1186\":16,\"1592\":1}}],[\"wechat\",{\"1\":{\"326\":3,\"1057\":1}}],[\"week\",{\"1\":{\"291\":1}}],[\"wewill\",{\"1\":{\"237\":1}}],[\"were\",{\"1\":{\"235\":1,\"562\":1,\"1623\":1}}],[\"we\",{\"1\":{\"177\":1,\"194\":7,\"196\":2,\"197\":1,\"236\":15,\"237\":2,\"241\":2,\"243\":3,\"244\":2,\"245\":6,\"308\":1,\"309\":1,\"366\":1,\"410\":1,\"465\":4,\"492\":2,\"542\":3,\"543\":3,\"546\":1,\"547\":1,\"552\":2,\"556\":1,\"557\":2,\"558\":4,\"559\":2,\"562\":9,\"564\":3,\"565\":1,\"573\":3,\"580\":2,\"592\":3,\"599\":2,\"600\":5,\"602\":1,\"604\":2,\"750\":1,\"751\":1,\"777\":1,\"784\":1,\"851\":1,\"888\":1,\"890\":3,\"940\":1,\"941\":1,\"1072\":2,\"1076\":1,\"1080\":1,\"1124\":1,\"1126\":2,\"1201\":2,\"1203\":1,\"1204\":1,\"1206\":1,\"1207\":1,\"1209\":1,\"1219\":3,\"1301\":1,\"1365\":2,\"1376\":1,\"1543\":1,\"1545\":6,\"1623\":2}}],[\"w\",{\"1\":{\"118\":3,\"126\":3,\"139\":2,\"343\":7,\"361\":2,\"455\":3,\"557\":3,\"719\":1,\"1155\":3,\"1316\":5}}],[\"witnessed\",{\"1\":{\"1623\":1}}],[\"without\",{\"1\":{\"227\":2,\"321\":1,\"340\":1,\"542\":1,\"557\":2,\"558\":1,\"562\":1,\"774\":1,\"991\":1,\"1388\":1}}],[\"within\",{\"1\":{\"204\":2,\"573\":2,\"600\":1,\"748\":1,\"1124\":1,\"1495\":1,\"1507\":1}}],[\"with\",{\"0\":{\"238\":1,\"614\":1,\"857\":1,\"1229\":1},\"1\":{\"167\":1,\"194\":6,\"195\":1,\"203\":1,\"204\":1,\"227\":1,\"235\":1,\"236\":6,\"243\":1,\"245\":4,\"261\":1,\"271\":1,\"274\":1,\"285\":2,\"288\":2,\"289\":4,\"298\":2,\"355\":1,\"356\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"371\":1,\"372\":2,\"410\":1,\"465\":1,\"492\":1,\"548\":2,\"550\":1,\"551\":1,\"552\":2,\"556\":1,\"557\":2,\"558\":3,\"559\":6,\"562\":2,\"564\":1,\"576\":1,\"577\":1,\"580\":2,\"584\":2,\"586\":1,\"602\":2,\"676\":1,\"702\":1,\"707\":1,\"750\":1,\"776\":1,\"777\":1,\"780\":1,\"781\":1,\"784\":1,\"785\":2,\"851\":3,\"892\":1,\"992\":1,\"1052\":1,\"1053\":1,\"1054\":1,\"1055\":1,\"1056\":2,\"1071\":1,\"1079\":1,\"1084\":1,\"1098\":1,\"1120\":1,\"1142\":1,\"1143\":1,\"1185\":6,\"1186\":6,\"1201\":1,\"1202\":1,\"1204\":1,\"1207\":1,\"1208\":1,\"1212\":4,\"1217\":2,\"1219\":3,\"1221\":1,\"1405\":1,\"1483\":8,\"1485\":1,\"1495\":2,\"1496\":1,\"1498\":2,\"1507\":1,\"1508\":2,\"1509\":1,\"1571\":1,\"1592\":1,\"1607\":2,\"1611\":1,\"1613\":1,\"1623\":15}}],[\"wireless\",{\"1\":{\"1124\":1,\"1130\":2,\"1145\":2,\"1206\":1}}],[\"wirte\",{\"1\":{\"220\":1}}],[\"wifisettings\",{\"1\":{\"1272\":1}}],[\"wifi的无线频率信号\",{\"1\":{\"1131\":1}}],[\"wifi定位模块经过聚类后的结果如图所示\",{\"1\":{\"1012\":1}}],[\"wifi\",{\"0\":{\"1023\":1},\"1\":{\"1012\":5,\"1017\":1,\"1019\":1,\"1020\":1,\"1024\":2,\"1120\":1,\"1272\":3}}],[\"wise\",{\"1\":{\"892\":1,\"1607\":2}}],[\"wish\",{\"1\":{\"562\":1}}],[\"wilkerson\",{\"1\":{\"606\":2}}],[\"willing\",{\"1\":{\"1623\":1}}],[\"will\",{\"1\":{\"197\":1,\"204\":1,\"236\":2,\"237\":1,\"243\":1,\"245\":2,\"321\":1,\"361\":2,\"406\":1,\"542\":1,\"546\":1,\"552\":1,\"557\":2,\"558\":1,\"559\":3,\"584\":1,\"703\":1,\"707\":1,\"748\":2,\"775\":1,\"793\":1,\"897\":2,\"934\":1,\"936\":1,\"1054\":1,\"1074\":1,\"1075\":2,\"1076\":2,\"1118\":1,\"1191\":1,\"1219\":2,\"1366\":2,\"1406\":1,\"1421\":1,\"1553\":1,\"1591\":2,\"1592\":1,\"1623\":1}}],[\"widely\",{\"1\":{\"1202\":1}}],[\"wider\",{\"1\":{\"558\":2,\"1203\":1,\"1209\":1}}],[\"wide\",{\"1\":{\"552\":1,\"564\":1,\"965\":1,\"966\":1,\"1204\":1}}],[\"width=device\",{\"1\":{\"1004\":1}}],[\"width=\",{\"1\":{\"892\":1,\"1228\":1}}],[\"width\",{\"1\":{\"408\":7,\"536\":2,\"692\":1,\"1004\":1,\"1159\":4,\"1204\":1,\"1228\":2,\"1485\":1}}],[\"widget\",{\"1\":{\"385\":9}}],[\"widgettestcase\",{\"1\":{\"385\":1}}],[\"winedt\",{\"1\":{\"1178\":1}}],[\"winsock相关的问题\",{\"1\":{\"960\":1}}],[\"win\",{\"1\":{\"445\":1,\"1623\":2}}],[\"winodws\",{\"1\":{\"336\":1}}],[\"windows\",{\"0\":{\"336\":1,\"351\":1,\"449\":1,\"1177\":1,\"1643\":1},\"1\":{\"326\":3,\"336\":2,\"351\":1,\"445\":1,\"746\":1,\"824\":1,\"1099\":1,\"1176\":2,\"1244\":1,\"1463\":1}}],[\"window\",{\"0\":{\"161\":1,\"312\":1,\"960\":1,\"1153\":1},\"1\":{\"310\":1,\"313\":7,\"352\":1,\"960\":1,\"978\":5,\"989\":3,\"1056\":1,\"1153\":2,\"1193\":2,\"1275\":2,\"1483\":1}}],[\"wi\",{\"0\":{\"1272\":1},\"1\":{\"126\":1,\"139\":1,\"1201\":2,\"1202\":2,\"1203\":1,\"1204\":2,\"1207\":1,\"1208\":1,\"1209\":2}}],[\"wi​\",{\"1\":{\"117\":1}}],[\"wikipedia\",{\"1\":{\"1127\":1}}],[\"wiki↩︎\",{\"1\":{\"865\":1,\"1502\":1,\"1511\":1}}],[\"wiki\",{\"0\":{\"25\":1}}],[\"whole\",{\"1\":{\"935\":1}}],[\"whose\",{\"1\":{\"559\":1,\"1125\":1,\"1592\":1}}],[\"what\",{\"0\":{\"234\":1,\"255\":1},\"1\":{\"236\":1,\"339\":1,\"341\":1,\"400\":1,\"454\":1,\"600\":1,\"748\":1,\"962\":2,\"975\":2,\"1075\":1,\"1201\":3,\"1219\":1,\"1301\":1}}],[\"wheels\",{\"1\":{\"927\":1}}],[\"whereby\",{\"1\":{\"234\":1}}],[\"where\",{\"1\":{\"227\":2,\"236\":1,\"243\":1,\"408\":1,\"548\":1,\"559\":1,\"602\":1,\"751\":1,\"777\":1,\"793\":1,\"798\":2,\"810\":1,\"851\":1,\"941\":2,\"1075\":1,\"1186\":1,\"1201\":1,\"1206\":1,\"1212\":1,\"1219\":2,\"1418\":1,\"1474\":1}}],[\"whether\",{\"1\":{\"195\":3,\"196\":3,\"204\":1,\"243\":1,\"245\":2,\"620\":1,\"1219\":1,\"1381\":2,\"1492\":1,\"1536\":1,\"1611\":1}}],[\"whenever\",{\"1\":{\"1481\":1}}],[\"when\",{\"1\":{\"193\":1,\"194\":2,\"197\":1,\"217\":1,\"237\":3,\"243\":2,\"250\":1,\"255\":1,\"256\":4,\"261\":1,\"308\":1,\"321\":2,\"341\":1,\"344\":1,\"542\":1,\"543\":2,\"548\":1,\"552\":1,\"558\":3,\"559\":1,\"584\":3,\"592\":1,\"604\":1,\"748\":1,\"781\":1,\"820\":1,\"891\":1,\"892\":1,\"923\":1,\"941\":1,\"975\":1,\"986\":1,\"1075\":1,\"1080\":1,\"1099\":1,\"1122\":1,\"1124\":1,\"1130\":1,\"1381\":1,\"1421\":2,\"1474\":1,\"1475\":1,\"1485\":1,\"1509\":1,\"1591\":4,\"1592\":1,\"1602\":3,\"1607\":1,\"1611\":3}}],[\"white\",{\"1\":{\"1385\":3,\"1388\":11,\"1389\":3}}],[\"whitelisteddatainfomap\",{\"1\":{\"702\":1}}],[\"which\",{\"0\":{\"660\":1},\"1\":{\"194\":1,\"204\":1,\"235\":1,\"236\":2,\"245\":6,\"250\":1,\"255\":1,\"256\":2,\"321\":1,\"546\":1,\"552\":1,\"559\":1,\"575\":1,\"576\":1,\"586\":1,\"592\":1,\"600\":1,\"602\":1,\"658\":1,\"677\":1,\"707\":1,\"746\":1,\"748\":1,\"751\":1,\"774\":1,\"851\":1,\"1076\":1,\"1079\":1,\"1080\":1,\"1143\":1,\"1189\":2,\"1202\":2,\"1203\":2,\"1204\":1,\"1221\":1,\"1405\":1,\"1481\":1,\"1486\":1,\"1487\":1,\"1492\":2,\"1495\":1,\"1498\":1,\"1499\":2,\"1507\":2,\"1508\":1,\"1509\":1,\"1536\":1,\"1591\":1,\"1620\":5,\"1623\":1}}],[\"while\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"25\":1,\"26\":1,\"30\":1,\"31\":1,\"32\":2,\"33\":1,\"34\":2,\"35\":3,\"36\":1,\"43\":2,\"46\":2,\"47\":2,\"52\":1,\"54\":1,\"57\":1,\"59\":1,\"61\":1,\"64\":2,\"75\":1,\"77\":1,\"80\":1,\"84\":1,\"85\":1,\"86\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"149\":1,\"165\":1,\"166\":1,\"169\":4,\"184\":1,\"186\":1,\"216\":1,\"237\":1,\"309\":1,\"458\":1,\"459\":1,\"466\":1,\"467\":1,\"468\":1,\"486\":1,\"496\":2,\"499\":4,\"508\":1,\"517\":1,\"542\":1,\"543\":2,\"546\":1,\"558\":2,\"580\":1,\"956\":2,\"1118\":1,\"1189\":1,\"1299\":1,\"1301\":2,\"1316\":1,\"1333\":1,\"1344\":1,\"1481\":1,\"1508\":4,\"1515\":2,\"1516\":1,\"1537\":1,\"1543\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1571\":1,\"1573\":1,\"1575\":1}}],[\"why\",{\"0\":{\"208\":1,\"268\":1,\"279\":1,\"1470\":1},\"1\":{\"102\":1,\"235\":1,\"422\":1,\"1186\":3,\"1470\":1,\"1623\":1}}],[\"www\",{\"1\":{\"23\":1,\"682\":1,\"731\":1,\"759\":1,\"761\":2,\"998\":1,\"999\":1,\"1216\":1}}],[\"wxyz\",{\"1\":{\"8\":1}}],[\"行使用了互斥锁\",{\"1\":{\"1607\":1}}],[\"行进行了安全性检查\",{\"1\":{\"1607\":1}}],[\"行我们也可以使用\",{\"1\":{\"1445\":1}}],[\"行我们使用了\",{\"1\":{\"1445\":1}}],[\"行我们指定了\",{\"1\":{\"1445\":1}}],[\"行我们可以看到\",{\"1\":{\"1320\":1,\"1463\":1}}],[\"行判断了这个实例是否已经存在了\",{\"1\":{\"1366\":1}}],[\"行将数据写入了\",{\"1\":{\"1333\":1}}],[\"行调用到了\",{\"1\":{\"1320\":1}}],[\"行调用了\",{\"1\":{\"707\":1,\"1405\":1}}],[\"行代码\",{\"1\":{\"1553\":2}}],[\"行代码指向了\",{\"1\":{\"1307\":1}}],[\"行代码的时候已经必然是一个奇数了\",{\"1\":{\"169\":1}}],[\"行走\",{\"1\":{\"1132\":1}}],[\"行之厉也\",{\"1\":{\"1060\":1}}],[\"行锁设计\",{\"1\":{\"814\":1}}],[\"行开始就是\",{\"1\":{\"692\":1}}],[\"行严格来说属于方法元数据\",{\"1\":{\"664\":1}}],[\"行为型模式\",{\"1\":{\"629\":1}}],[\"行注意是单独的一行\",{\"1\":{\"357\":1}}],[\"行元素\",{\"1\":{\"354\":1}}],[\"行的命令\",{\"1\":{\"1440\":1}}],[\"行的\",{\"1\":{\"293\":1}}],[\"行和第\",{\"1\":{\"293\":1}}],[\"行文可能较为跳跃\",{\"1\":{\"248\":1}}],[\"行\",{\"1\":{\"15\":1,\"169\":1,\"289\":2,\"357\":1,\"961\":1,\"1333\":1,\"1366\":1,\"1440\":1,\"1448\":1,\"1570\":1,\"1591\":1,\"1607\":4}}],[\"第五部分主要是融合视觉的wifi室内定位系统的设计实现与测试\",{\"1\":{\"1012\":1}}],[\"第五部分重点阐述融合视觉的wifi室内定位算法的设计实现与测试\",{\"1\":{\"1012\":1}}],[\"第四部分重点讲述一下基于视觉的室内定位算法的设计与实现\",{\"1\":{\"1012\":1}}],[\"第四层\",{\"1\":{\"61\":1}}],[\"第三个参数使用\",{\"1\":{\"1470\":1}}],[\"第三个字符串中所有的字符\",{\"1\":{\"390\":1}}],[\"第三\",{\"1\":{\"1352\":1}}],[\"第三是一些杂谈\",{\"1\":{\"1350\":1}}],[\"第三部分重点讲述一下基于wifi的室内定位算法的设计与实现\",{\"1\":{\"1012\":1}}],[\"第三段讲述了预测器具体的实现细节\",{\"1\":{\"559\":1}}],[\"第三方模块\",{\"1\":{\"411\":1}}],[\"第三次\",{\"1\":{\"61\":1}}],[\"第二阶段主要对本文进行补充\",{\"1\":{\"1371\":1}}],[\"第二\",{\"1\":{\"1352\":1,\"1353\":1}}],[\"第二是研究一下业界最新的技术是如何优化\",{\"1\":{\"1350\":1}}],[\"第二是计算时间太长\",{\"1\":{\"1212\":1}}],[\"第二是触发调整\",{\"1\":{\"1171\":1}}],[\"第二是通过排序的操作筛选出了已经存在的组合\",{\"1\":{\"10\":1}}],[\"第二类算法速度快\",{\"1\":{\"1151\":1}}],[\"第二章介绍了\",{\"1\":{\"1017\":1}}],[\"第二章介绍了与室内定位相关的基础理论\",{\"1\":{\"1017\":1}}],[\"第二部分主要讲述室内定位的基本理论\",{\"1\":{\"1012\":1}}],[\"第二种是\",{\"1\":{\"674\":1}}],[\"第二种情况是到进去了\",{\"1\":{\"91\":1}}],[\"第二点是提出了\",{\"1\":{\"543\":1}}],[\"第二行代码实现了一个计算坐标的方法\",{\"1\":{\"392\":1}}],[\"第二行输入这\",{\"1\":{\"307\":1}}],[\"第二个为远程分支名\",{\"1\":{\"1253\":1}}],[\"第二个参数\",{\"1\":{\"1345\":1}}],[\"第二个参数规定了内核应该为相应套接字排队的最大连接个数\",{\"1\":{\"951\":1}}],[\"第二个参数表示转换的目标\",{\"1\":{\"390\":1}}],[\"第二个例子\",{\"1\":{\"584\":1}}],[\"第二个操作数\",{\"1\":{\"514\":1}}],[\"第二个后面跟汇编代码的输入\",{\"1\":{\"504\":1}}],[\"第二个元素升序\",{\"1\":{\"172\":2}}],[\"第二个条件表示大礼包是有优惠的\",{\"1\":{\"102\":1}}],[\"第二重遍历是和背包的总容量有关的\",{\"1\":{\"118\":1}}],[\"第二层结构是\",{\"1\":{\"545\":1}}],[\"第二层\",{\"1\":{\"61\":1}}],[\"第一步是先生成\",{\"1\":{\"1445\":1}}],[\"第一步随机产生一个参数的初始值\",{\"1\":{\"1212\":1}}],[\"第一阶段本文主要研究\",{\"1\":{\"1371\":1}}],[\"第一是从对比\",{\"1\":{\"1350\":1}}],[\"第一是可能得到局部最优的结果\",{\"1\":{\"1212\":1}}],[\"第一是计算ope编码并插入\",{\"1\":{\"1171\":1}}],[\"第一是室内较强的多径对主径产生较大的影响\",{\"1\":{\"1019\":1}}],[\"第一类方法准确度高\",{\"1\":{\"1151\":1}}],[\"第一类无线感知系统在很高的频率上工作\",{\"1\":{\"1133\":1}}],[\"第一章主要介绍了室内定位的背景和国内外研究现状\",{\"1\":{\"1017\":1}}],[\"第一\",{\"1\":{\"1012\":1,\"1352\":1,\"1353\":1}}],[\"第一种是普通的\",{\"1\":{\"674\":1}}],[\"第一种是把全部的\",{\"1\":{\"91\":1}}],[\"第一段首先列举出来了\",{\"1\":{\"559\":1}}],[\"第一点是提出了\",{\"1\":{\"543\":1}}],[\"第一个部分研究\",{\"1\":{\"1393\":1}}],[\"第一个为本地分支名\",{\"1\":{\"1253\":1}}],[\"第一个峰值对应的功率并不是最大值\",{\"1\":{\"1020\":1}}],[\"第一个例子\",{\"1\":{\"584\":1}}],[\"第一个操作数\",{\"1\":{\"514\":1}}],[\"第一个\",{\"1\":{\"503\":1,\"693\":1,\"708\":1}}],[\"第一个节点\",{\"1\":{\"460\":1}}],[\"第一个参数\",{\"1\":{\"393\":1,\"430\":1,\"1345\":1}}],[\"第一个参数表示需要转化的字符\",{\"1\":{\"390\":1}}],[\"第一个字符索引值为0\",{\"1\":{\"392\":1}}],[\"第一个元素升序\",{\"1\":{\"172\":1}}],[\"第一个元素降序\",{\"1\":{\"172\":1}}],[\"第一行代码实现了两个字符串中共同字符的计数\",{\"1\":{\"392\":1}}],[\"第一行\",{\"1\":{\"307\":1}}],[\"第一条和第二条似乎有点矛盾\",{\"1\":{\"235\":1}}],[\"第一重从\",{\"1\":{\"118\":1}}],[\"第一层结构是\",{\"1\":{\"545\":1}}],[\"第一层\",{\"1\":{\"61\":1}}],[\"第一次读时\",{\"1\":{\"1316\":1}}],[\"第一次安装\",{\"1\":{\"1274\":1}}],[\"第一次设置的时候\",{\"1\":{\"956\":1}}],[\"第一次跳台阶只有两种选择\",{\"1\":{\"103\":1}}],[\"第一次\",{\"1\":{\"47\":1,\"59\":1}}],[\"第\",{\"1\":{\"15\":1,\"34\":1,\"155\":3,\"293\":1,\"316\":1,\"707\":1,\"985\":1,\"1307\":1,\"1320\":1,\"1333\":1,\"1366\":2,\"1405\":1,\"1445\":3,\"1553\":2,\"1570\":1,\"1607\":6}}],[\"每当跟\",{\"1\":{\"1333\":1}}],[\"每张图片都需要一个对应的label文件\",{\"1\":{\"1159\":1}}],[\"每张表都是按照主键的形式进行存储的\",{\"1\":{\"814\":1}}],[\"每层卷积的步长为1x1\",{\"1\":{\"1138\":1}}],[\"每条线\",{\"1\":{\"1024\":1}}],[\"每条指令都要经历一轮\",{\"1\":{\"687\":1}}],[\"每收到一个确认就加\",{\"1\":{\"987\":1}}],[\"每隔\",{\"1\":{\"982\":1}}],[\"每秒大概处理10w次io操作\",{\"1\":{\"825\":1}}],[\"每次使用一个batch可以大大减少收敛所需要的迭代次数\",{\"1\":{\"1185\":1}}],[\"每次计算一小部分训练数据的损失函数\",{\"1\":{\"1185\":1}}],[\"每次方法被调用的时候都会在调用栈上面分配一个栈帧\",{\"1\":{\"667\":1}}],[\"每次\",{\"1\":{\"215\":1}}],[\"每次只能移动到高度相同或者高度更大的单元格\",{\"1\":{\"79\":1}}],[\"每组中块的数量\",{\"1\":{\"206\":1}}],[\"每天你最多吃\",{\"1\":{\"155\":1}}],[\"每块石头的重量都是正整数\",{\"1\":{\"125\":1}}],[\"每一块都表示四个\",{\"1\":{\"972\":1}}],[\"每一次触发了流水线的\",{\"1\":{\"595\":1}}],[\"每一次递归的状态都放入\",{\"1\":{\"91\":1}}],[\"每一位存在一个指定的概率值\",{\"1\":{\"558\":1}}],[\"每一个线程都有自己独立的\",{\"1\":{\"736\":1}}],[\"每一个进程都有自己的一个地址空间\",{\"1\":{\"736\":1}}],[\"每一个进程都有一个\",{\"1\":{\"701\":1}}],[\"每一个表都被全局分支历史的\",{\"1\":{\"559\":1}}],[\"每一个后面都有不同的含义\",{\"1\":{\"502\":1}}],[\"每一个\",{\"1\":{\"201\":1,\"504\":1,\"559\":1,\"666\":1,\"667\":1,\"670\":1,\"688\":2}}],[\"每一个桶中最终的数量都是等于正方形的边长\",{\"1\":{\"15\":1}}],[\"每一回合\",{\"1\":{\"125\":1}}],[\"每一列都按照从上到下递增的顺序排序\",{\"1\":{\"30\":1}}],[\"每一行都按照从左到右递增的顺序排序\",{\"1\":{\"30\":1}}],[\"每个触发点的回调\",{\"1\":{\"1602\":1}}],[\"每个段具体的内容等\",{\"1\":{\"1462\":1}}],[\"每个域之间确定隔离策略\",{\"1\":{\"1355\":1}}],[\"每个元素对应一个物理页\",{\"1\":{\"1340\":1}}],[\"每个单元格需要预测\",{\"1\":{\"1155\":1}}],[\"每个单元格会预测b个边界框\",{\"1\":{\"1155\":1}}],[\"每个边界框的预测值实际上包含5个元素\",{\"1\":{\"1155\":1}}],[\"每个边长可以计算出来\",{\"1\":{\"15\":1}}],[\"每个具体\",{\"1\":{\"983\":1}}],[\"每个分节都带有\",{\"1\":{\"980\":1}}],[\"每个已完成\",{\"1\":{\"951\":1}}],[\"每个请求按访问\",{\"1\":{\"764\":1}}],[\"每个请求按照时间顺序逐一分配到不同的后端服务器\",{\"1\":{\"763\":1}}],[\"每个预测器都有\",{\"1\":{\"562\":1}}],[\"每个层级之间用\",{\"1\":{\"486\":1}}],[\"每个模块执行一次\",{\"1\":{\"379\":1}}],[\"每个测试中均对比了近3年内的先进算法或模型\",{\"1\":{\"1012\":1}}],[\"每个测试类执行一次\",{\"1\":{\"379\":1}}],[\"每个测试函数都会执行一次固件\",{\"1\":{\"379\":1}}],[\"每个进程\",{\"1\":{\"252\":1}}],[\"每个进程都有独立的代码和数据空间\",{\"1\":{\"736\":1}}],[\"每个进程都有自己的地址空间\",{\"1\":{\"251\":1}}],[\"每个进程都拥有自己的页表\",{\"1\":{\"252\":1}}],[\"每个进程之间的内存空间都是相互隔离的\",{\"1\":{\"251\":1}}],[\"每个\",{\"1\":{\"195\":1,\"204\":2,\"667\":1,\"691\":1,\"1298\":1,\"1533\":1,\"1597\":2}}],[\"每个数不可拆分\",{\"1\":{\"182\":1}}],[\"每个数字在每一个答案里面只能用一次\",{\"1\":{\"11\":1}}],[\"每个物品\",{\"1\":{\"120\":1}}],[\"每个物品的价值\",{\"1\":{\"118\":1}}],[\"每个物品的重量\",{\"1\":{\"118\":1}}],[\"每个节点对应表中的一个记录\",{\"1\":{\"1169\":1}}],[\"每个节点有\",{\"1\":{\"88\":1}}],[\"每个节点在递归中只被遍历一次\",{\"1\":{\"56\":1}}],[\"每个位置都可以向下或者向上转动\",{\"1\":{\"88\":1}}],[\"每个人\",{\"1\":{\"87\":1}}],[\"每个钥匙\",{\"1\":{\"75\":1}}],[\"每个房间有不同的号码\",{\"1\":{\"75\":1}}],[\"每个小时\",{\"1\":{\"34\":1}}],[\"每个一维数组的长度相同\",{\"1\":{\"30\":1}}],[\"从处理器已经完成启动了\",{\"1\":{\"1557\":1}}],[\"从空闲状态中返回\",{\"1\":{\"1523\":1}}],[\"从实测的数据来看\",{\"1\":{\"1522\":1}}],[\"从复位中释放的时候\",{\"1\":{\"1481\":1}}],[\"从命名上来看\",{\"1\":{\"1471\":1}}],[\"从远程到本地\",{\"1\":{\"1453\":1}}],[\"从远程仓库获取和拉取数据\",{\"1\":{\"1250\":1}}],[\"从本地到远程\",{\"1\":{\"1453\":1}}],[\"从理论上来说\",{\"1\":{\"1357\":1}}],[\"从页表上动手\",{\"1\":{\"1355\":1}}],[\"从缓存区中划分出一小块\",{\"1\":{\"1344\":1}}],[\"从缓存池中获取一个\",{\"1\":{\"1329\":1}}],[\"从result\",{\"1\":{\"1328\":1}}],[\"从rf信号作为输入\",{\"1\":{\"1137\":1}}],[\"从函数名看起来是创建线程池\",{\"1\":{\"1296\":1}}],[\"从github下载该插件\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"从所有的训练数据中读取一小部分作为一个训练batch\",{\"1\":{\"1185\":1}}],[\"从网络摄像机\",{\"1\":{\"1132\":1}}],[\"从非同凡响开始\",{\"0\":{\"1030\":1}}],[\"从不同频段测量的振幅具有相同的分布\",{\"1\":{\"1024\":1}}],[\"从原理上来讲\",{\"1\":{\"1024\":1}}],[\"从广义上讲\",{\"1\":{\"1016\":1}}],[\"从测试中可以看出\",{\"1\":{\"1012\":1}}],[\"从而允许系统真正进入\",{\"1\":{\"1584\":1}}],[\"从而告诉\",{\"1\":{\"1542\":1}}],[\"从而降低动态功耗\",{\"1\":{\"1537\":1}}],[\"从而进行优化\",{\"1\":{\"1527\":1}}],[\"从而提升模型性能\",{\"1\":{\"1156\":1}}],[\"从而诞生了fast\",{\"1\":{\"1153\":1}}],[\"从而达到消除\",{\"1\":{\"1024\":1}}],[\"从而决定是否分配\",{\"1\":{\"988\":1}}],[\"从而产生错误的结果\",{\"1\":{\"184\":1}}],[\"从这句话中我们可以推理出一些关系\",{\"1\":{\"1498\":1}}],[\"从这就可以猜测出\",{\"1\":{\"1320\":1}}],[\"从这时起\",{\"1\":{\"987\":1}}],[\"从这个里面\",{\"1\":{\"1445\":1}}],[\"从这个原文中我们理解\",{\"1\":{\"253\":1}}],[\"从这个角度看\",{\"1\":{\"200\":1}}],[\"从这个题目中\",{\"1\":{\"89\":1}}],[\"从用户态复制句柄数据结构到内核态\",{\"1\":{\"954\":1}}],[\"从用户态切换到内核态\",{\"1\":{\"950\":1}}],[\"从内核到进程传递套接字地址结构的函数有\",{\"1\":{\"950\":1}}],[\"从进程到内核传递套接字地址结构的函数有\",{\"1\":{\"950\":1}}],[\"从字符串中\",{\"1\":{\"904\":1}}],[\"从字节码中寻找热点代码编译为机器码\",{\"1\":{\"653\":1}}],[\"从表格中可以看出\",{\"1\":{\"741\":1}}],[\"从表中我们可以看出\",{\"1\":{\"583\":1}}],[\"从第\",{\"1\":{\"692\":1}}],[\"从总体上对这篇文章有一个了解\",{\"1\":{\"581\":1}}],[\"从大到小进行查找\",{\"1\":{\"559\":1}}],[\"从大到小排序保证回溯的次数比较少\",{\"1\":{\"15\":1}}],[\"从以上对于文章的阅读\",{\"1\":{\"544\":1}}],[\"从左子树中找到最大的节点\",{\"1\":{\"499\":1}}],[\"从左往右\",{\"1\":{\"61\":3}}],[\"从下面例子中可以看出类属性被修改了\",{\"1\":{\"422\":1}}],[\"从下一层开始找\",{\"1\":{\"11\":1}}],[\"从最近的封闭作用域开始搜索的任何封闭函数的作用域包含非局部名称\",{\"1\":{\"418\":1}}],[\"从虚拟内存的角度看\",{\"1\":{\"251\":1}}],[\"从目前得到的信息而言\",{\"1\":{\"251\":1}}],[\"从预测的方向开始\",{\"1\":{\"243\":1}}],[\"从另一个方面来说\",{\"1\":{\"196\":1}}],[\"从图中可以看出\",{\"1\":{\"1020\":1,\"1169\":1}}],[\"从图\",{\"1\":{\"196\":1}}],[\"从上文看到\",{\"1\":{\"1557\":1}}],[\"从上文我们了解到\",{\"1\":{\"1332\":1,\"1333\":1}}],[\"从上我们可以看出\",{\"1\":{\"696\":1,\"1396\":1}}],[\"从上图中我们可以知道\",{\"1\":{\"691\":1}}],[\"从上图中有一个疑问\",{\"1\":{\"194\":1}}],[\"从上而下分别是\",{\"1\":{\"641\":1}}],[\"从上面上个场景的代码分析我们可以看出来\",{\"1\":{\"1330\":1}}],[\"从上面的图中\",{\"1\":{\"653\":1}}],[\"从上面的描述我们可以看出\",{\"1\":{\"552\":1}}],[\"从上面的描述中我们可以看出\",{\"1\":{\"530\":1}}],[\"从上面的分析中我们知道\",{\"1\":{\"1301\":1}}],[\"从上面的分析\",{\"1\":{\"550\":1}}],[\"从上面的例子中\",{\"1\":{\"387\":1}}],[\"从上面可知\",{\"1\":{\"261\":1}}],[\"从上述公式中我们可以得出结论\",{\"1\":{\"547\":1}}],[\"从上述文字也不是很好理解\",{\"1\":{\"194\":1}}],[\"从上述代码中可以看出来的规律如下\",{\"1\":{\"43\":1}}],[\"从题目中可以得到信息\",{\"1\":{\"132\":1}}],[\"从题目中可以得出信息\",{\"1\":{\"138\":1}}],[\"从题目中可以得出\",{\"1\":{\"130\":1}}],[\"从题目中我们可以知道\",{\"1\":{\"88\":1}}],[\"从中我们可以看出\",{\"1\":{\"1542\":1}}],[\"从中我们可以管中窥豹\",{\"1\":{\"690\":1}}],[\"从中我们不难判断\",{\"1\":{\"1501\":1}}],[\"从中选出任意两块石头\",{\"1\":{\"125\":1}}],[\"从中吃掉\",{\"1\":{\"34\":1}}],[\"从背包中找若干个物品\",{\"1\":{\"122\":1}}],[\"从\",{\"1\":{\"89\":1,\"152\":1,\"165\":1,\"603\":1,\"706\":1,\"956\":1,\"1179\":1,\"1314\":1,\"1315\":1,\"1326\":1,\"1328\":1,\"1353\":1,\"1385\":1,\"1402\":1,\"1456\":1,\"1572\":1}}],[\"从举例看一下这道题目\",{\"1\":{\"84\":1}}],[\"从矩阵的下边界和右边界开始\",{\"1\":{\"79\":1}}],[\"从矩阵的上边界和左边界开始搜索\",{\"1\":{\"79\":1}}],[\"从右往左\",{\"1\":{\"61\":3}}],[\"从代码中我们可以看出\",{\"1\":{\"51\":1}}],[\"从一个新的角度区理解这个问题\",{\"1\":{\"23\":1}}],[\"只根据\",{\"1\":{\"1597\":1}}],[\"只列举接口名称\",{\"1\":{\"1577\":1}}],[\"只在受信任的\",{\"1\":{\"1497\":1}}],[\"只存在一些平移的偏差\",{\"1\":{\"1024\":1}}],[\"只存储一个字节\",{\"1\":{\"533\":1}}],[\"只请求头部\",{\"1\":{\"998\":1}}],[\"只适用于字段值固定并且值的种类很少的情况\",{\"1\":{\"812\":1}}],[\"只保留第一个\",{\"1\":{\"751\":1}}],[\"只更新最长历史的那张表\",{\"1\":{\"559\":1}}],[\"只更新\",{\"1\":{\"559\":1}}],[\"只需对所有的频段进行平均即可达到消除振幅误差的目的\",{\"1\":{\"1024\":1}}],[\"只需通过配置和简单的对象注入\",{\"1\":{\"869\":1}}],[\"只需要声明\",{\"1\":{\"1551\":1}}],[\"只需要一次拷贝\",{\"1\":{\"1353\":1}}],[\"只需要一个客户端\",{\"1\":{\"1352\":1}}],[\"只需要进行一次内存拷贝\",{\"1\":{\"1352\":1}}],[\"只需要\",{\"1\":{\"1212\":1}}],[\"只需要使用无线信号作为输入即可\",{\"1\":{\"1132\":1}}],[\"只需要测量出两天线之间的相位差值即可\",{\"1\":{\"1025\":1}}],[\"只需要把一个任意的\",{\"1\":{\"671\":1}}],[\"只需要提供\",{\"1\":{\"646\":1}}],[\"只需要注意边界条件即可\",{\"1\":{\"103\":1}}],[\"只需做轻微修改\",{\"1\":{\"543\":1}}],[\"只不过是传入了不同的\",{\"1\":{\"1542\":1}}],[\"只不过\",{\"1\":{\"525\":1}}],[\"只进行插入数据\",{\"1\":{\"468\":1}}],[\"只允许使用\",{\"1\":{\"436\":1}}],[\"只给一个固定集合的属性分配空间\",{\"1\":{\"436\":1}}],[\"只要缓冲区有数据\",{\"1\":{\"962\":1}}],[\"只要\",{\"1\":{\"956\":1}}],[\"只要经过合理的编译\",{\"1\":{\"687\":1}}],[\"只要他们相对于预测器使用的最大历史长度足够短\",{\"1\":{\"559\":1}}],[\"只要预测的结果还没有被应用\",{\"1\":{\"548\":1}}],[\"只要我们在类中定义\",{\"1\":{\"435\":1}}],[\"只要调用父类的\",{\"1\":{\"430\":1}}],[\"只读\",{\"1\":{\"361\":1}}],[\"只是\",{\"1\":{\"665\":1}}],[\"只是运行的时间不同\",{\"1\":{\"653\":1}}],[\"只是存储了依赖于预测值的指令\",{\"1\":{\"550\":1}}],[\"只是为了得到更大的地址范围\",{\"1\":{\"530\":1}}],[\"只是做了逻辑上面的优化\",{\"1\":{\"499\":1}}],[\"只是把下标变成了从\",{\"1\":{\"360\":1}}],[\"只是下一层递归结束判断的时候\",{\"1\":{\"10\":1}}],[\"只对不在集合中的单词统计出现次数\",{\"1\":{\"344\":1}}],[\"只能关联一个\",{\"1\":{\"1590\":1}}],[\"只能由\",{\"1\":{\"998\":1}}],[\"只能跳到后面的指令\",{\"1\":{\"520\":1}}],[\"只能从前往后开始数\",{\"1\":{\"331\":1}}],[\"只能映射到\",{\"1\":{\"201\":1}}],[\"只画了一个\",{\"1\":{\"204\":1}}],[\"只有rcu子系统中的相关线程可以运行\",{\"1\":{\"1585\":1}}],[\"只有在完成了rcu更新操作之后\",{\"1\":{\"1526\":1}}],[\"只有在\",{\"1\":{\"1479\":1}}],[\"只有当不需要\",{\"1\":{\"1333\":1}}],[\"只有当它达到下一站时\",{\"1\":{\"981\":1}}],[\"只有当给定的单词在这种外星语中按字典序排列时\",{\"1\":{\"186\":1}}],[\"只有男和女\",{\"1\":{\"812\":1}}],[\"只有后\",{\"1\":{\"676\":1}}],[\"只有依赖于预测值的指令\",{\"1\":{\"550\":1}}],[\"只有右节点同理\",{\"1\":{\"499\":1}}],[\"只有第一的调用是生效了的\",{\"1\":{\"323\":1}}],[\"只有一个\",{\"1\":{\"276\":1,\"279\":1}}],[\"只有一个人同时满足条件\",{\"1\":{\"87\":1}}],[\"只包含正整数\",{\"1\":{\"122\":1}}],[\"只的话非法\",{\"1\":{\"15\":1}}],[\"火柴数量小于\",{\"1\":{\"15\":1}}],[\"火柴可以拼接成正方形的条件是\",{\"1\":{\"15\":1}}],[\"火柴拼正方形\",{\"0\":{\"15\":1},\"1\":{\"15\":1}}],[\"任务会在now之后的两天过期\",{\"1\":{\"844\":1}}],[\"任务会在一分钟之后执行\",{\"1\":{\"844\":1}}],[\"任务会在\",{\"1\":{\"844\":1}}],[\"任务会在10s\",{\"1\":{\"844\":1}}],[\"任务大部分时间都在等待\",{\"1\":{\"280\":1}}],[\"任何留下来的\",{\"1\":{\"1385\":1}}],[\"任何对文件作出的修改都会丢失\",{\"1\":{\"1241\":1}}],[\"任何迟到的数据包都被丢弃\",{\"1\":{\"983\":1}}],[\"任何时候只能有一个客户端持有锁\",{\"1\":{\"831\":1}}],[\"任何子进程只有一个父进程\",{\"1\":{\"738\":1}}],[\"任何顺序\",{\"1\":{\"14\":1}}],[\"任一端口都可以用于连接主机\",{\"1\":{\"730\":1}}],[\"任一数组\",{\"1\":{\"169\":1}}],[\"任意\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"任意一种\",{\"1\":{\"86\":1}}],[\"任意顺序\",{\"1\":{\"8\":1}}],[\"kstrtoint\",{\"1\":{\"1596\":2}}],[\"ksize=\",{\"1\":{\"1186\":2}}],[\"kthread\",{\"1\":{\"1556\":1}}],[\"ktime\",{\"1\":{\"1545\":1}}],[\"kdb或kgdb\",{\"1\":{\"1524\":1}}],[\"krunningonmemorytool\",{\"1\":{\"1376\":1}}],[\"kramdown\",{\"1\":{\"1054\":1}}],[\"kptr\",{\"1\":{\"1344\":3}}],[\"kprefetchduringdlmallocfreelist\",{\"1\":{\"509\":1}}],[\"kprefetchstride\",{\"1\":{\"509\":1}}],[\"kzmalloc\",{\"1\":{\"1344\":1}}],[\"kzalloc\",{\"1\":{\"1307\":1,\"1345\":5}}],[\"kunmap\",{\"1\":{\"1342\":1,\"1344\":1}}],[\"kuoruan\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"kmalloc\",{\"1\":{\"1345\":3}}],[\"kmap\",{\"1\":{\"1342\":1,\"1344\":1}}],[\"kms\",{\"1\":{\"648\":1}}],[\"kfree\",{\"1\":{\"1316\":1}}],[\"kfifosize\",{\"1\":{\"508\":1}}],[\"kcp服务器地址\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"kcptun\",{\"0\":{\"1265\":1,\"1647\":1},\"1\":{\"1265\":8,\"1647\":8}}],[\"kclass\",{\"1\":{\"682\":1}}],[\"katabi\",{\"1\":{\"1130\":1}}],[\"katex\",{\"1\":{\"1105\":7}}],[\"kali\",{\"1\":{\"270\":5}}],[\"kwarg\",{\"1\":{\"844\":1}}],[\"kwarg=value\",{\"1\":{\"844\":1}}],[\"kwargs\",{\"1\":{\"74\":1,\"388\":3,\"432\":1,\"433\":2,\"844\":2}}],[\"kxwllq5h479pxckus4zuea\",{\"1\":{\"844\":1}}],[\"kispgoinstrumentation\",{\"1\":{\"1376\":1}}],[\"kisdebugbuild\",{\"1\":{\"707\":1,\"1376\":1,\"1405\":1}}],[\"kilo\",{\"0\":{\"1084\":1},\"1\":{\"1057\":1,\"1084\":1}}],[\"kind\",{\"1\":{\"203\":1,\"204\":1,\"1501\":1}}],[\"konwledge\",{\"1\":{\"1056\":1}}],[\"ko\",{\"1\":{\"717\":2}}],[\"kopenjdklibrary\",{\"1\":{\"707\":3,\"1405\":3}}],[\"koko\",{\"1\":{\"34\":1}}],[\"klass\",{\"0\":{\"677\":1},\"1\":{\"675\":1,\"677\":1}}],[\"k8s\",{\"1\":{\"641\":1,\"724\":1}}],[\"kvm\",{\"0\":{\"722\":2,\"723\":1,\"725\":1},\"1\":{\"722\":2,\"724\":3,\"725\":4,\"1632\":1}}],[\"kv\",{\"1\":{\"455\":3}}],[\"kenableindexids>\",{\"1\":{\"708\":1}}],[\"kept\",{\"1\":{\"550\":2,\"602\":1,\"1475\":1}}],[\"keeps\",{\"1\":{\"1620\":1}}],[\"keep\",{\"1\":{\"344\":1,\"892\":1,\"988\":1,\"1536\":1}}],[\"kernel+0x1e8\",{\"1\":{\"1515\":1}}],[\"kernelmappedwrite\",{\"1\":{\"1320\":1}}],[\"kernel当中\",{\"1\":{\"717\":1}}],[\"kernel\",{\"0\":{\"711\":1,\"1556\":1},\"1\":{\"252\":3,\"712\":1,\"717\":1,\"724\":1,\"725\":1,\"747\":1,\"750\":1,\"1143\":1,\"1145\":1,\"1291\":2,\"1307\":1,\"1345\":1,\"1353\":1,\"1355\":1,\"1356\":1,\"1513\":1,\"1515\":3,\"1520\":1,\"1531\":1,\"1532\":1,\"1534\":1,\"1540\":1,\"1542\":4,\"1556\":2,\"1560\":1,\"1563\":1,\"1573\":1,\"1586\":2,\"1619\":1},\"2\":{\"1324\":1,\"1336\":1,\"1347\":1,\"1348\":1,\"1361\":1,\"1455\":1,\"1538\":1,\"1547\":1,\"1587\":1}}],[\"keyevent\",{\"1\":{\"1269\":7}}],[\"keyalias\",{\"1\":{\"938\":1}}],[\"keyup\",{\"1\":{\"922\":1,\"938\":1,\"939\":2,\"1055\":1}}],[\"keygen\",{\"1\":{\"744\":2,\"1237\":1}}],[\"keywords\",{\"1\":{\"625\":1}}],[\"keyboard\",{\"1\":{\"309\":1,\"1189\":1}}],[\"key=post\",{\"1\":{\"944\":1}}],[\"key=helper\",{\"1\":{\"293\":1}}],[\"key=cmp\",{\"1\":{\"173\":2,\"185\":1,\"186\":1}}],[\"key=count\",{\"1\":{\"36\":1}}],[\"key=lambda\",{\"1\":{\"172\":2,\"184\":1,\"304\":1}}],[\"key\",{\"0\":{\"173\":1,\"191\":1,\"939\":1,\"1086\":1,\"1122\":1},\"1\":{\"75\":12,\"86\":1,\"89\":1,\"156\":4,\"157\":3,\"159\":3,\"173\":5,\"185\":2,\"186\":2,\"191\":1,\"235\":1,\"236\":1,\"289\":6,\"293\":1,\"406\":3,\"431\":7,\"453\":3,\"455\":1,\"460\":8,\"499\":12,\"742\":1,\"743\":1,\"744\":2,\"825\":2,\"827\":2,\"833\":3,\"837\":2,\"865\":2,\"927\":2,\"933\":1,\"938\":1,\"944\":2,\"1052\":1,\"1056\":1,\"1145\":1,\"1237\":1,\"1365\":1,\"1623\":1}}],[\"keys\",{\"1\":{\"75\":1,\"89\":1,\"301\":1,\"465\":2,\"492\":1,\"495\":1,\"766\":1,\"1111\":1}}],[\"knife\",{\"1\":{\"1623\":2}}],[\"knative\",{\"1\":{\"707\":2,\"1405\":2}}],[\"knapsack\",{\"0\":{\"111\":1}}],[\"knowledge\",{\"1\":{\"847\":1}}],[\"known\",{\"1\":{\"557\":1,\"707\":1,\"1405\":1,\"1419\":1,\"1508\":1}}],[\"know\",{\"1\":{\"196\":2,\"243\":1,\"1009\":1}}],[\"kbd\",{\"1\":{\"1440\":6,\"1441\":3}}],[\"kb\",{\"1\":{\"194\":2}}],[\"k\",{\"0\":{\"36\":1,\"151\":1},\"1\":{\"14\":5,\"32\":7,\"34\":5,\"36\":4,\"120\":5,\"144\":1,\"151\":4,\"152\":4,\"153\":8,\"154\":5,\"156\":9,\"157\":2,\"164\":1,\"195\":1,\"372\":1,\"494\":1,\"495\":4,\"496\":3,\"1024\":1,\"1591\":8}}],[\"题意是从\",{\"1\":{\"155\":1}}],[\"题目时\",{\"1\":{\"1469\":1}}],[\"题目链接如下\",{\"1\":{\"486\":1}}],[\"题目链接见\",{\"1\":{\"15\":1}}],[\"题目中提到了\",{\"1\":{\"486\":1}}],[\"题目中给定的节点加入队列\",{\"1\":{\"89\":1}}],[\"题目意思大概如下\",{\"1\":{\"480\":1}}],[\"题目如果用\",{\"1\":{\"453\":1}}],[\"题目举例来说明用法\",{\"1\":{\"299\":1}}],[\"题目分析\",{\"1\":{\"158\":1}}],[\"题目数据保证答案符合\",{\"1\":{\"136\":1}}],[\"题目表述较为简单\",{\"1\":{\"130\":1}}],[\"题目是给出了邻接表\",{\"1\":{\"89\":1}}],[\"题目描述见\",{\"1\":{\"78\":1,\"85\":1}}],[\"题目要求是求最小变化\",{\"1\":{\"92\":1}}],[\"题目要求\",{\"1\":{\"49\":1,\"164\":1}}],[\"题目的含义为\",{\"1\":{\"559\":1}}],[\"题目的描述为\",{\"1\":{\"61\":1}}],[\"题目的大概意思是\",{\"1\":{\"49\":1}}],[\"题目的意思是\",{\"1\":{\"11\":1}}],[\"题解举例\",{\"1\":{\"1064\":1}}],[\"题解\",{\"1\":{\"13\":1,\"155\":1,\"1064\":1}}],[\"vundle\",{\"1\":{\"1258\":1,\"1259\":7}}],[\"vundlevim\",{\"1\":{\"1258\":2,\"1259\":2}}],[\"vueblog\",{\"0\":{\"1114\":1},\"1\":{\"1099\":1,\"1102\":1}}],[\"vuex\",{\"1\":{\"1055\":1}}],[\"vue\",{\"0\":{\"921\":1,\"943\":1,\"1004\":1},\"1\":{\"896\":1,\"904\":1,\"906\":1,\"923\":3,\"925\":1,\"928\":3,\"930\":2,\"931\":4,\"936\":1,\"939\":3,\"940\":1,\"941\":2,\"943\":2,\"1004\":1,\"1054\":3,\"1055\":7,\"1098\":1,\"1099\":1,\"1105\":1,\"1106\":1,\"1111\":1},\"2\":{\"946\":1,\"1116\":1}}],[\"vuepress\",{\"0\":{\"1098\":1,\"1100\":1,\"1101\":1,\"1107\":1},\"1\":{\"380\":1,\"388\":3,\"808\":1,\"1054\":1,\"1055\":2,\"1057\":1,\"1098\":3,\"1099\":6,\"1101\":7,\"1105\":1,\"1108\":1,\"1109\":2,\"1113\":2}}],[\"v1算法的原理\",{\"1\":{\"1151\":1}}],[\"v1版本算法\",{\"1\":{\"1151\":1}}],[\"v1\",{\"1\":{\"1053\":1,\"1246\":2}}],[\"v2\",{\"1\":{\"977\":1,\"1053\":1,\"1094\":1}}],[\"vga\",{\"1\":{\"776\":1}}],[\"vnnet1\",{\"1\":{\"729\":1}}],[\"vlog\",{\"1\":{\"707\":3,\"1405\":3}}],[\"vroom\",{\"1\":{\"927\":1}}],[\"vr\",{\"1\":{\"643\":1}}],[\"vt\",{\"1\":{\"724\":2}}],[\"vtable\",{\"1\":{\"677\":1}}],[\"vtag\",{\"1\":{\"542\":2,\"543\":1}}],[\"vtage\",{\"1\":{\"542\":3,\"543\":9,\"544\":1,\"545\":1,\"556\":5,\"559\":15,\"562\":4}}],[\"vtn\",{\"1\":{\"559\":1}}],[\"vt3\",{\"1\":{\"559\":2}}],[\"vt2\",{\"1\":{\"559\":6}}],[\"vt1\",{\"1\":{\"559\":4}}],[\"v=\",{\"1\":{\"558\":2}}],[\"vht\",{\"1\":{\"545\":3}}],[\"vps的密码和加密方式\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"vps的ip\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"vps\",{\"0\":{\"1262\":1,\"1644\":1},\"1\":{\"643\":1,\"1057\":1}}],[\"vpc\",{\"1\":{\"640\":1}}],[\"vpt\",{\"0\":{\"577\":1},\"1\":{\"545\":4,\"575\":3,\"576\":5,\"577\":2}}],[\"vp\",{\"0\":{\"541\":1,\"545\":1,\"567\":1},\"1\":{\"542\":5,\"543\":1,\"548\":3,\"549\":1,\"552\":4,\"557\":3,\"558\":1,\"562\":1,\"568\":2,\"570\":1,\"575\":1,\"580\":2,\"586\":1}}],[\"vpn\",{\"1\":{\"261\":10}}],[\"voc\",{\"1\":{\"1162\":11}}],[\"volume\",{\"1\":{\"616\":1,\"640\":1,\"1623\":1}}],[\"volatile\",{\"1\":{\"502\":3,\"507\":2,\"510\":1,\"511\":3,\"827\":3,\"1501\":2}}],[\"void\",{\"1\":{\"180\":4,\"183\":1,\"481\":1,\"502\":1,\"664\":2,\"681\":1,\"682\":1,\"696\":1,\"703\":1,\"705\":1,\"706\":4,\"707\":2,\"955\":4,\"962\":4,\"1004\":1,\"1294\":1,\"1295\":1,\"1299\":1,\"1312\":1,\"1314\":2,\"1320\":2,\"1340\":1,\"1341\":1,\"1344\":2,\"1345\":2,\"1365\":1,\"1396\":1,\"1400\":1,\"1402\":3,\"1403\":1,\"1405\":2,\"1463\":2,\"1469\":4,\"1515\":2,\"1516\":2,\"1518\":2,\"1523\":1,\"1524\":2,\"1542\":3,\"1567\":4,\"1573\":3,\"1576\":6,\"1577\":1,\"1590\":2,\"1600\":1,\"1602\":1,\"1606\":1,\"1608\":1,\"1611\":1,\"1626\":1,\"1627\":1}}],[\"v0\",{\"1\":{\"373\":1,\"374\":1}}],[\"vehicles\",{\"1\":{\"547\":1,\"558\":1}}],[\"vectors\",{\"0\":{\"1483\":1},\"1\":{\"1482\":1,\"1483\":1,\"1498\":5}}],[\"vector<string>\",{\"1\":{\"344\":1}}],[\"vector\",{\"1\":{\"344\":1,\"558\":1,\"692\":1,\"1056\":1,\"1479\":1}}],[\"venv3\",{\"1\":{\"445\":2}}],[\"venv\",{\"0\":{\"275\":1},\"1\":{\"275\":1,\"445\":2,\"854\":5}}],[\"versatile\",{\"1\":{\"1483\":1}}],[\"version=$\",{\"1\":{\"750\":1}}],[\"version=\",{\"1\":{\"703\":1}}],[\"versions\",{\"1\":{\"620\":1}}],[\"version\",{\"1\":{\"236\":1,\"244\":1,\"245\":1,\"373\":1,\"374\":1,\"618\":2,\"620\":1,\"655\":1,\"664\":2,\"692\":1,\"747\":1,\"748\":1,\"750\":6,\"770\":2,\"776\":1,\"785\":1,\"791\":2,\"863\":1,\"890\":2,\"986\":2,\"1052\":1,\"1054\":1,\"1056\":1,\"1057\":1,\"1143\":1,\"1145\":1,\"1177\":1,\"1246\":1,\"1263\":1,\"1307\":2,\"1365\":1,\"1429\":1,\"1464\":8,\"1645\":1}}],[\"verbose=1\",{\"1\":{\"1416\":1}}],[\"verbose\",{\"0\":{\"1416\":1},\"1\":{\"658\":1,\"664\":1}}],[\"verbosity=2\",{\"1\":{\"387\":1}}],[\"verification\",{\"1\":{\"599\":1,\"601\":1,\"602\":1}}],[\"verifying\",{\"0\":{\"578\":1},\"1\":{\"186\":1}}],[\"very\",{\"1\":{\"542\":2,\"543\":3,\"546\":1,\"548\":2,\"549\":1,\"557\":1,\"558\":1,\"565\":1,\"599\":1,\"748\":1,\"923\":1,\"1075\":1,\"1130\":1,\"1221\":1,\"1508\":1}}],[\"v8\",{\"1\":{\"259\":1,\"537\":1}}],[\"vma\",{\"1\":{\"1340\":2,\"1342\":1,\"1463\":1}}],[\"vmnet0\",{\"1\":{\"728\":1,\"730\":2}}],[\"vmnet1\",{\"1\":{\"728\":1,\"729\":1}}],[\"vmnet8\",{\"1\":{\"728\":4}}],[\"vmm\",{\"1\":{\"724\":1}}],[\"vmware\",{\"1\":{\"724\":1,\"725\":1}}],[\"vm\",{\"1\":{\"248\":1,\"652\":3,\"667\":1,\"675\":1,\"676\":1,\"689\":2,\"701\":1,\"702\":2,\"707\":3,\"728\":2,\"904\":1,\"923\":1,\"931\":1,\"939\":1,\"1004\":1,\"1340\":5,\"1342\":1,\"1365\":6,\"1405\":3}}],[\"vanilla\",{\"1\":{\"927\":2}}],[\"vaild\",{\"1\":{\"766\":1}}],[\"var2\",{\"1\":{\"1463\":2}}],[\"varchar\",{\"1\":{\"797\":1,\"806\":1}}],[\"var\",{\"0\":{\"912\":1},\"1\":{\"609\":1,\"612\":1,\"616\":2,\"759\":1,\"892\":3,\"904\":2,\"905\":1,\"906\":7,\"907\":2,\"923\":1,\"927\":3,\"931\":1,\"933\":1,\"1004\":1,\"1113\":2,\"1463\":4,\"1529\":10,\"1545\":1}}],[\"varying\",{\"1\":{\"562\":1}}],[\"varies\",{\"1\":{\"1208\":1}}],[\"variadic\",{\"1\":{\"1056\":1}}],[\"variable为初始化变量的操作\",{\"1\":{\"1212\":1}}],[\"variables↩︎\",{\"1\":{\"1435\":1}}],[\"variables\",{\"1\":{\"1142\":1,\"1185\":4,\"1212\":3,\"1217\":13,\"1425\":1,\"1551\":1,\"1620\":1}}],[\"variable\",{\"1\":{\"503\":1,\"751\":1,\"847\":1,\"850\":1,\"955\":1,\"1142\":2,\"1185\":11,\"1186\":16,\"1212\":8,\"1217\":7,\"1383\":1,\"1418\":3,\"1429\":1,\"1554\":1}}],[\"various\",{\"1\":{\"233\":1,\"245\":1,\"1501\":1,\"1536\":1}}],[\"vatge\",{\"1\":{\"544\":1}}],[\"va\",{\"1\":{\"248\":1}}],[\"val+1\",{\"1\":{\"1529\":1}}],[\"valloric\",{\"1\":{\"1259\":1}}],[\"valine\",{\"1\":{\"1055\":1,\"1099\":1}}],[\"validity\",{\"1\":{\"1498\":1}}],[\"validating\",{\"1\":{\"549\":1}}],[\"validation\",{\"0\":{\"549\":2,\"557\":1},\"1\":{\"542\":1,\"543\":7,\"549\":5,\"557\":3}}],[\"validated\",{\"1\":{\"549\":1}}],[\"validatestacksequences\",{\"1\":{\"466\":1}}],[\"validate\",{\"0\":{\"466\":1},\"1\":{\"549\":1}}],[\"valid\",{\"0\":{\"197\":1,\"465\":1},\"1\":{\"9\":2,\"195\":4,\"197\":3,\"198\":1,\"217\":1,\"221\":1,\"224\":1,\"576\":4,\"1142\":1,\"1162\":1,\"1609\":1}}],[\"valudation\",{\"1\":{\"543\":1}}],[\"valuename\",{\"1\":{\"941\":1}}],[\"value=\",{\"1\":{\"892\":2,\"937\":1}}],[\"valued\",{\"1\":{\"571\":2}}],[\"values=values\",{\"1\":{\"892\":1}}],[\"values\",{\"1\":{\"118\":5,\"236\":1,\"293\":2,\"299\":8,\"331\":2,\"401\":1,\"412\":1,\"545\":1,\"549\":1,\"557\":2,\"559\":1,\"562\":1,\"568\":1,\"573\":1,\"576\":2,\"580\":2,\"583\":1,\"599\":4,\"600\":1,\"797\":1,\"892\":2,\"1094\":1,\"1483\":1,\"1623\":1}}],[\"valueerror\",{\"1\":{\"21\":2,\"314\":2,\"1219\":3}}],[\"value\",{\"0\":{\"304\":1,\"548\":1,\"558\":1,\"559\":1,\"561\":1,\"567\":1,\"568\":1,\"573\":1,\"574\":1,\"575\":1,\"588\":1,\"600\":1,\"603\":1},\"1\":{\"20\":2,\"21\":1,\"86\":1,\"89\":1,\"212\":1,\"236\":1,\"245\":5,\"299\":1,\"304\":1,\"316\":1,\"331\":2,\"371\":1,\"406\":1,\"408\":8,\"453\":1,\"455\":1,\"460\":4,\"541\":2,\"542\":7,\"543\":10,\"545\":4,\"546\":1,\"548\":2,\"549\":5,\"550\":1,\"551\":3,\"552\":1,\"555\":1,\"556\":5,\"557\":3,\"558\":1,\"559\":3,\"562\":2,\"566\":1,\"568\":2,\"570\":1,\"572\":1,\"573\":5,\"575\":3,\"577\":1,\"580\":10,\"582\":2,\"583\":3,\"584\":4,\"586\":1,\"587\":1,\"599\":5,\"600\":3,\"601\":1,\"603\":1,\"604\":4,\"606\":9,\"671\":1,\"681\":2,\"682\":2,\"691\":7,\"692\":1,\"702\":1,\"793\":2,\"825\":3,\"833\":1,\"837\":1,\"844\":1,\"897\":1,\"898\":5,\"927\":2,\"931\":12,\"933\":1,\"940\":1,\"941\":2,\"950\":2,\"1185\":2,\"1212\":1,\"1365\":1,\"1495\":1,\"1573\":4,\"1592\":1,\"1611\":2,\"1623\":1}}],[\"val=none\",{\"1\":{\"486\":1}}],[\"val=0\",{\"1\":{\"42\":1,\"54\":1,\"499\":1}}],[\"vals\",{\"1\":{\"47\":2}}],[\"val\",{\"1\":{\"42\":5,\"43\":1,\"45\":1,\"46\":1,\"47\":2,\"49\":1,\"51\":2,\"52\":2,\"54\":2,\"59\":1,\"61\":1,\"89\":2,\"486\":4,\"493\":1,\"495\":2,\"496\":1,\"499\":12,\"559\":3,\"833\":1,\"1529\":1,\"1573\":4,\"1576\":8,\"1577\":1}}],[\"vscode\",{\"0\":{\"1638\":1},\"1\":{\"1636\":1}}],[\"vs\",{\"0\":{\"549\":1,\"670\":1,\"686\":1,\"699\":1,\"808\":1,\"1398\":1,\"1509\":1},\"1\":{\"198\":1,\"454\":1,\"517\":1,\"542\":1,\"571\":2,\"685\":1,\"820\":1,\"960\":2,\"1056\":1,\"1120\":1,\"1456\":1,\"1511\":1}}],[\"v−kci\",{\"1\":{\"128\":1}}],[\"v−ci​\",{\"1\":{\"117\":2}}],[\"v\",{\"0\":{\"235\":1,\"245\":1,\"933\":1,\"934\":1,\"935\":1,\"936\":1,\"937\":1,\"938\":1,\"940\":1,\"1618\":1},\"1\":{\"75\":2,\"86\":4,\"90\":9,\"117\":6,\"120\":2,\"126\":6,\"128\":1,\"139\":11,\"186\":2,\"235\":5,\"236\":1,\"244\":2,\"245\":10,\"454\":1,\"609\":1,\"616\":2,\"618\":1,\"664\":6,\"691\":1,\"706\":1,\"724\":1,\"751\":2,\"890\":2,\"906\":1,\"925\":1,\"931\":2,\"933\":4,\"934\":2,\"935\":1,\"936\":1,\"937\":1,\"938\":3,\"939\":1,\"940\":5,\"941\":3,\"944\":1,\"998\":1,\"1004\":1,\"1055\":2,\"1217\":11,\"1250\":1,\"1253\":1,\"1402\":1,\"1464\":2,\"1573\":4,\"1576\":6,\"1577\":1}}],[\"vip\",{\"1\":{\"1515\":1}}],[\"vicinity\",{\"1\":{\"1124\":1}}],[\"vi\",{\"1\":{\"957\":1,\"1145\":1,\"1263\":1,\"1645\":1}}],[\"viewer\",{\"1\":{\"1636\":1}}],[\"viewport\",{\"1\":{\"1004\":1}}],[\"views\",{\"1\":{\"796\":1,\"864\":1,\"892\":1}}],[\"view\",{\"1\":{\"781\":1,\"1623\":2}}],[\"viewcfg\",{\"1\":{\"691\":1}}],[\"viral\",{\"1\":{\"1623\":1}}],[\"virsh\",{\"1\":{\"725\":1}}],[\"virtualenvwrapper\",{\"1\":{\"445\":1}}],[\"virtualenv\",{\"0\":{\"443\":1},\"1\":{\"444\":2,\"445\":1,\"853\":1,\"854\":1}}],[\"virtual\",{\"0\":{\"247\":1,\"249\":1,\"260\":1,\"261\":1,\"852\":1},\"1\":{\"198\":1,\"250\":2,\"253\":1,\"255\":5,\"256\":1,\"259\":1,\"260\":2,\"261\":4,\"262\":1,\"275\":1,\"585\":1,\"587\":1,\"600\":1,\"640\":1,\"724\":1,\"856\":1,\"1296\":1,\"1476\":1,\"1486\":1}}],[\"vii\",{\"1\":{\"606\":1}}],[\"via\",{\"1\":{\"568\":1,\"570\":1,\"606\":1,\"1054\":1,\"1099\":2,\"1474\":1,\"1507\":1,\"1508\":1}}],[\"vimrc\",{\"1\":{\"1259\":2}}],[\"vimdiff\",{\"1\":{\"1252\":1}}],[\"vim\",{\"0\":{\"1257\":1},\"1\":{\"270\":1,\"785\":1,\"1054\":1,\"1258\":5,\"1259\":15,\"1642\":1},\"2\":{\"1261\":1}}],[\"video2\",{\"1\":{\"1189\":1}}],[\"videocapture\",{\"1\":{\"1189\":1}}],[\"video\",{\"0\":{\"857\":1},\"1\":{\"23\":1,\"227\":1,\"1052\":1,\"1127\":1,\"1189\":7}}],[\"visual\",{\"1\":{\"1052\":1}}],[\"visualization\",{\"1\":{\"888\":1}}],[\"vision\",{\"1\":{\"1153\":1,\"1189\":3}}],[\"visit\",{\"1\":{\"1052\":1,\"1099\":2,\"1244\":1}}],[\"visited\",{\"1\":{\"13\":12,\"75\":22,\"76\":1,\"79\":4,\"80\":4,\"83\":1,\"84\":4,\"88\":9,\"89\":9,\"90\":3,\"91\":4,\"315\":1}}],[\"visible\",{\"1\":{\"892\":1,\"934\":1}}],[\"visibility=\",{\"1\":{\"892\":2}}],[\"visdom\",{\"0\":{\"443\":1,\"446\":1},\"1\":{\"446\":2}}],[\"vistied\",{\"1\":{\"13\":1}}],[\"按页拷贝\",{\"1\":{\"1342\":1}}],[\"按\",{\"1\":{\"1340\":2}}],[\"按空格键选择\",{\"1\":{\"917\":1,\"1101\":1}}],[\"按顺序地执行\",{\"1\":{\"828\":1}}],[\"按访问\",{\"1\":{\"763\":1}}],[\"按位取反\",{\"1\":{\"400\":1}}],[\"按位异或\",{\"1\":{\"400\":1}}],[\"按位或\",{\"1\":{\"400\":1}}],[\"按位与\",{\"1\":{\"400\":1}}],[\"按奇偶排序数组\",{\"0\":{\"169\":1}}],[\"按从\",{\"1\":{\"87\":1}}],[\"按照传入的\",{\"1\":{\"1544\":1}}],[\"按照函数参数传递\",{\"1\":{\"1383\":1}}],[\"按照步骤进行\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"按照该序号构造一颗完全二叉树\",{\"1\":{\"1170\":1}}],[\"按照voc数据集的结构和格式来构建所需的数据集\",{\"1\":{\"1159\":1}}],[\"按照时间顺序排序\",{\"1\":{\"905\":1}}],[\"按照字节顺序\",{\"1\":{\"789\":1}}],[\"按照dot\",{\"1\":{\"691\":1}}],[\"按照上述的例子可以推断\",{\"1\":{\"521\":1}}],[\"按照上面的说法就是\",{\"1\":{\"256\":1}}],[\"按照教程\",{\"1\":{\"273\":1}}],[\"按照优先级进行排序可以使用\",{\"1\":{\"172\":1}}],[\"按照概述中的例子来举例\",{\"1\":{\"147\":1}}],[\"按照背包问题的套路\",{\"1\":{\"118\":1}}],[\"按照记忆化搜索的思路\",{\"1\":{\"102\":1}}],[\"按照\",{\"1\":{\"52\":1,\"86\":1,\"1365\":1}}],[\"按照特定搜索指定了\",{\"1\":{\"10\":1}}],[\"按任意顺序\",{\"1\":{\"12\":1,\"13\":1}}],[\"所支持的\",{\"1\":{\"1534\":1}}],[\"所属进程的\",{\"1\":{\"1341\":1}}],[\"所可破也\",{\"1\":{\"1060\":1}}],[\"所生成的\",{\"1\":{\"1021\":1}}],[\"所使用的http\",{\"1\":{\"965\":1,\"966\":1}}],[\"所在的\",{\"1\":{\"1523\":1}}],[\"所在的目录\",{\"1\":{\"1448\":1}}],[\"所在的地方\",{\"1\":{\"1314\":1}}],[\"所在的线程对象\",{\"1\":{\"706\":1,\"1402\":1}}],[\"所在的页的基地址计算得到并存储到寄存器中\",{\"1\":{\"530\":1}}],[\"所\",{\"1\":{\"559\":1}}],[\"所谓地址解析就是主机在发送帧\",{\"1\":{\"993\":1}}],[\"所谓两个栈实现一个队列\",{\"1\":{\"468\":1}}],[\"所谓\",{\"1\":{\"214\":1,\"687\":1}}],[\"所需的底层硬件支持和进入该状态所需的操作等信息\",{\"1\":{\"1522\":1,\"1523\":1}}],[\"所需的底层硬件支持\",{\"1\":{\"1521\":1}}],[\"所需的时间\",{\"1\":{\"234\":1}}],[\"所需的最少变化次数\",{\"1\":{\"92\":1}}],[\"所需要使用的位数大小是取决于微架构实际的设计的\",{\"1\":{\"196\":1}}],[\"所有锁和保护机制都由调用者维护\",{\"1\":{\"1562\":1}}],[\"所有关键代码段的执行时间就可以计算出来了\",{\"1\":{\"1527\":1}}],[\"所有图片对应的label文本文件\",{\"1\":{\"1159\":1}}],[\"所有\",{\"1\":{\"1024\":1}}],[\"所有key中有一部分经常被读写\",{\"1\":{\"827\":1}}],[\"所有更上层的组件都被访问\",{\"1\":{\"559\":1}}],[\"所有被找到的函数和方法都可用\",{\"1\":{\"379\":1}}],[\"所有方法都可以使用\",{\"1\":{\"379\":1}}],[\"所有指令通常都是一个尺寸\",{\"1\":{\"235\":1}}],[\"所有的对象都是\",{\"1\":{\"1388\":1}}],[\"所有的进程间通信都是\",{\"1\":{\"1353\":1}}],[\"所有的准备数据已经得到了\",{\"1\":{\"1157\":1}}],[\"所有的套接字函数都是内核中的系统调用\",{\"1\":{\"950\":1}}],[\"所有的预测器都用做最小化获得置信预测的最小时间\",{\"1\":{\"590\":1}}],[\"所有的子节点\",{\"1\":{\"486\":1}}],[\"所有的数字\",{\"1\":{\"391\":1}}],[\"所有的大小写字母\",{\"1\":{\"391\":1}}],[\"所有的标点符号\",{\"1\":{\"391\":1}}],[\"所有的\",{\"1\":{\"235\":1,\"1507\":1,\"1551\":1}}],[\"所有的跳法就是\",{\"1\":{\"103\":1}}],[\"所有奇数长度子数组的和\",{\"0\":{\"149\":1}}],[\"所有满足的数字对的个数就是\",{\"1\":{\"36\":1}}],[\"所有火柴的和必须是\",{\"1\":{\"15\":1}}],[\"所有可能的组合为\",{\"1\":{\"136\":1}}],[\"所有可能的组合都早已被这一层第一次出现的那个相同数穷尽了\",{\"1\":{\"13\":1}}],[\"所有可能的全排列\",{\"1\":{\"12\":1}}],[\"所以写入成功的话就返回\",{\"1\":{\"1596\":1}}],[\"所以会查询一次看是否设置成功\",{\"1\":{\"1545\":1}}],[\"所以比较复杂\",{\"1\":{\"1520\":1}}],[\"所以自己就找到了\",{\"1\":{\"1446\":1}}],[\"所以自然会有一个方法调用栈\",{\"1\":{\"667\":1}}],[\"所以还是要使用上面的方式\",{\"1\":{\"1424\":1}}],[\"所以此时应该是\",{\"1\":{\"1389\":1}}],[\"所以对这个模块进行简单的研究\",{\"1\":{\"1371\":1}}],[\"所以对于两根天线接收到的同一方位上目标的信号\",{\"1\":{\"1025\":1}}],[\"所以本文有几个重要的目的\",{\"1\":{\"1350\":1}}],[\"所以前面的判断逻辑根据这个来走读\",{\"1\":{\"1301\":1}}],[\"所以就不在这边列举源码了\",{\"1\":{\"1367\":1}}],[\"所以就可以使用随机梯度下降算法\",{\"1\":{\"1212\":1}}],[\"所以就饱和了\",{\"1\":{\"605\":1}}],[\"所以引入了placeholder\",{\"1\":{\"1212\":1}}],[\"所以引入现有的成熟的计算机视觉技术\",{\"1\":{\"1131\":1}}],[\"所以一般采用每次计算一小部分训练数据的损失函数的方法\",{\"1\":{\"1212\":1}}],[\"所以一般还是使用\",{\"1\":{\"1178\":1}}],[\"所以一般使用近似实现\",{\"1\":{\"213\":1}}],[\"所以经过这层处理\",{\"1\":{\"1157\":1}}],[\"所以将网络的输入从224x224增加到了448x448\",{\"1\":{\"1156\":1}}],[\"所以通过观察rf波形去为人类的活动制作标签是一件几乎不可能的事情\",{\"1\":{\"1136\":1}}],[\"所以采用在连接建立后再分配\",{\"1\":{\"988\":1}}],[\"所以也叫作快速恢复算法\",{\"1\":{\"987\":1}}],[\"所以叫做快速重传\",{\"1\":{\"987\":1}}],[\"所以其差值小于\",{\"1\":{\"982\":1}}],[\"所以序列号就很容易超过\",{\"1\":{\"982\":1}}],[\"所以为了避免分片\",{\"1\":{\"980\":1}}],[\"所以这种情况我们需要研究\",{\"1\":{\"1448\":1}}],[\"所以这一个\",{\"1\":{\"1330\":1}}],[\"所以这一节对此做出列举\",{\"1\":{\"1286\":1}}],[\"所以这样的解决方案很多情况下会发生错误\",{\"1\":{\"1131\":1}}],[\"所以这个大目标也不用非常明确\",{\"1\":{\"1033\":1}}],[\"所以这里的\",{\"1\":{\"979\":1}}],[\"所以这时候我们需要向后走去找到这个\",{\"1\":{\"212\":1}}],[\"所以线程也被成为轻量级进程\",{\"1\":{\"736\":1}}],[\"所以全部列举出来了\",{\"1\":{\"707\":1,\"1405\":1}}],[\"所以当丢包\",{\"1\":{\"976\":1}}],[\"所以当\",{\"1\":{\"602\":1}}],[\"所以导致的结果是\",{\"1\":{\"601\":1}}],[\"所以需要再说明一下\",{\"1\":{\"1424\":1}}],[\"所以需要选择合适的\",{\"1\":{\"1024\":1}}],[\"所以需要一种机制来验证预测的正确性\",{\"1\":{\"578\":1}}],[\"所以需要优化\",{\"1\":{\"150\":1}}],[\"所以如果可以在牺牲一些覆盖率的情况下提升精度\",{\"1\":{\"549\":1}}],[\"所以单个正确预测的收益十分有限\",{\"1\":{\"543\":1}}],[\"所以单词序列是按字典序排列的\",{\"1\":{\"186\":1}}],[\"所以是允许预测延迟的\",{\"1\":{\"552\":1}}],[\"所以是\",{\"1\":{\"542\":1}}],[\"所以符合我们上面讨论的只有右边节点这个递归条件\",{\"1\":{\"499\":1}}],[\"所以肯定不是\",{\"1\":{\"479\":1}}],[\"所以使用第三方的地址进行下载\",{\"1\":{\"1178\":1}}],[\"所以使用清华的软件源下载\",{\"1\":{\"1177\":1}}],[\"所以使用modprobe来处理加载模块的问题\",{\"1\":{\"719\":1}}],[\"所以使用\",{\"1\":{\"397\":1,\"997\":1}}],[\"所以可以穿过墙体或者障碍物追踪人\",{\"1\":{\"1133\":1}}],[\"所以可以看到\",{\"1\":{\"387\":1}}],[\"所以可以使用\",{\"1\":{\"372\":1}}],[\"所以可以从前往后遍历\",{\"1\":{\"33\":1}}],[\"所以不是很好用\",{\"1\":{\"358\":1}}],[\"所以定义了一个\",{\"1\":{\"288\":1}}],[\"所以在此加锁\",{\"1\":{\"1607\":1}}],[\"所以在这边列举出来\",{\"1\":{\"1606\":1}}],[\"所以在实验中需要设置不同大小的窗口去滑动\",{\"1\":{\"1153\":1}}],[\"所以在启动\",{\"1\":{\"614\":1}}],[\"所以在\",{\"1\":{\"283\":1,\"691\":1}}],[\"所以在本文中出现多次\",{\"1\":{\"196\":1}}],[\"所以上下文的切换非常快\",{\"1\":{\"282\":1}}],[\"所以希望自己不要只专注于语言\",{\"1\":{\"268\":1}}],[\"所以程序的每次访存请求至少需要两次访问\",{\"1\":{\"255\":1}}],[\"所以虽然用户空间的地址范围相同\",{\"1\":{\"251\":1}}],[\"所以处理器\",{\"1\":{\"234\":1}}],[\"所以有一种集中管理的目录协议\",{\"1\":{\"225\":1}}],[\"所以效率较低\",{\"1\":{\"215\":1}}],[\"所以现代的商用处理器都是用\",{\"1\":{\"202\":1}}],[\"所以说如果我们手机屏幕状态是打开的话\",{\"1\":{\"1269\":1}}],[\"所以说如果预测失败的话\",{\"1\":{\"550\":1}}],[\"所以说减少指令数量可以一定程度上提高性能\",{\"1\":{\"687\":1}}],[\"所以说在\",{\"1\":{\"602\":1}}],[\"所以说简化了验证的步骤\",{\"1\":{\"543\":1}}],[\"所以说利用这个时延在堆栈之前进行预取\",{\"1\":{\"508\":1}}],[\"所以说要使用这个接口来进行并行计算的话\",{\"1\":{\"289\":1}}],[\"所以说我们\",{\"1\":{\"1557\":1}}],[\"所以说我们提出了变量这个概念\",{\"1\":{\"1441\":1}}],[\"所以说我们可以把中序遍历的结果保存起来\",{\"1\":{\"496\":1}}],[\"所以说我们在执行的时候可以使用下面的逻辑来检查文件和\",{\"1\":{\"288\":1}}],[\"所以说我们需要转向更积极的方法来预测分支\",{\"1\":{\"241\":1}}],[\"所以说虚拟内存在主存和辅存之间\",{\"1\":{\"253\":1}}],[\"所以说\",{\"1\":{\"185\":1,\"289\":1,\"688\":1,\"1353\":1}}],[\"所以要在\",{\"1\":{\"1353\":1}}],[\"所以要\",{\"1\":{\"155\":1}}],[\"所以进行如下优化\",{\"1\":{\"153\":1}}],[\"所以初始化为了\",{\"1\":{\"130\":1}}],[\"所以代码的编写就和斐波那契数列相同\",{\"1\":{\"104\":1}}],[\"所以把记忆化搜索放在\",{\"1\":{\"100\":1}}],[\"所以最终的结果也是一样的\",{\"1\":{\"92\":1}}],[\"所以每个位置都有\",{\"1\":{\"88\":1}}],[\"所以我们把这个写到后面来\",{\"1\":{\"1440\":1}}],[\"所以我们要对这些依赖的逐一生成\",{\"1\":{\"1440\":1}}],[\"所以我们要配合缓存\",{\"1\":{\"74\":1}}],[\"所以我们\",{\"1\":{\"1434\":1,\"1463\":1}}],[\"所以我们单独开设一章来对这个过程进行学习\",{\"1\":{\"1363\":1}}],[\"所以我们需要找到\",{\"1\":{\"1320\":1}}],[\"所以我们需要把\",{\"1\":{\"185\":1}}],[\"所以我们没办法将其直接阅读\",{\"1\":{\"693\":1}}],[\"所以我们也称片内可寻址寄存器为\",{\"1\":{\"226\":1}}],[\"所以我们每个\",{\"1\":{\"204\":1}}],[\"所以我们可以直接调用\",{\"1\":{\"315\":1}}],[\"所以我们可以通过这个方式来进行验证\",{\"1\":{\"707\":1,\"1405\":1}}],[\"所以我们可以通过\",{\"1\":{\"153\":1}}],[\"所以我们可以使用深度有限搜索来计算二叉树的最大深度\",{\"1\":{\"56\":1}}],[\"所以我们尝试使用迭代的方法来解决这个问题\",{\"1\":{\"77\":1}}],[\"所以我们写出来的代码结构也应该是递归的\",{\"1\":{\"73\":1}}],[\"所以我们在队列中将这个元素初始化进去\",{\"1\":{\"88\":1}}],[\"所以我们在\",{\"1\":{\"10\":1}}],[\"所以\",{\"1\":{\"36\":1,\"158\":1,\"207\":1,\"280\":1,\"480\":1,\"552\":1,\"979\":1,\"981\":2,\"985\":1,\"1185\":1,\"1577\":1}}],[\"所以加上了\",{\"1\":{\"13\":1}}],[\"需要留意\",{\"1\":{\"1605\":1}}],[\"需要留意到\",{\"1\":{\"1545\":1}}],[\"需要定期调用\",{\"1\":{\"1584\":1}}],[\"需要等待所有正在使用共享数据的线程都退出\",{\"1\":{\"1584\":1}}],[\"需要等待大于\",{\"1\":{\"983\":1}}],[\"需要了解到我们的场景中\",{\"1\":{\"1575\":1}}],[\"需要一个表头\",{\"1\":{\"1570\":1}}],[\"需要的前置步骤是后文的\",{\"1\":{\"1570\":1}}],[\"需要的最小花费\",{\"1\":{\"102\":1}}],[\"需要广播层提供服务\",{\"1\":{\"1542\":1}}],[\"需要以下的流程即可\",{\"1\":{\"1537\":1}}],[\"需要保证系统支持rcu机制\",{\"1\":{\"1526\":1}}],[\"需要通过rcu\",{\"1\":{\"1526\":1}}],[\"需要结合参考文献进行解读\",{\"1\":{\"1498\":1}}],[\"需要区分冷启动和热启动\",{\"1\":{\"1481\":1}}],[\"需要硬件配合\",{\"1\":{\"1357\":1}}],[\"需要写数据\",{\"1\":{\"1314\":1}}],[\"需要确定基本的通讯协议\",{\"1\":{\"1309\":1}}],[\"需要加速的端口\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"需要加深理解\",{\"1\":{\"11\":1}}],[\"需要提供一个衰减率\",{\"1\":{\"1185\":1}}],[\"需要对其进行ope编码\",{\"1\":{\"1170\":1}}],[\"需要根据调整算法将其调整为完全二叉树\",{\"1\":{\"1170\":1}}],[\"需要很大的计算量\",{\"1\":{\"1153\":1}}],[\"需要先使用启发式方法\",{\"1\":{\"1151\":1}}],[\"需要将密码字符串设置为32位的\",{\"1\":{\"1111\":1}}],[\"需要将这个图替换掉\",{\"1\":{\"653\":1}}],[\"需要设置\",{\"1\":{\"956\":1}}],[\"需要复制大量的数组\",{\"1\":{\"954\":1}}],[\"需要手动选择升级的依赖包\",{\"1\":{\"917\":1,\"1101\":1}}],[\"需要手动开启\",{\"1\":{\"618\":1}}],[\"需要存储用户的账户\",{\"1\":{\"829\":1}}],[\"需要精通网络知识的人进行配置\",{\"1\":{\"729\":1}}],[\"需要弄清楚\",{\"1\":{\"702\":1}}],[\"需要更加深入的研究\",{\"1\":{\"673\":1}}],[\"需要经过\",{\"1\":{\"669\":1}}],[\"需要首先了解一下\",{\"1\":{\"667\":1}}],[\"需要进行更加详细的研究\",{\"1\":{\"1545\":1}}],[\"需要进行卸载\",{\"1\":{\"1424\":1}}],[\"需要进行平衡操作\",{\"1\":{\"1170\":1}}],[\"需要进行\",{\"1\":{\"696\":1,\"1396\":1}}],[\"需要进行优化\",{\"1\":{\"156\":1}}],[\"需要进入容器对\",{\"1\":{\"612\":1}}],[\"需要进入容器查看密码\",{\"1\":{\"612\":1}}],[\"需要研究一下原文的\",{\"1\":{\"580\":1}}],[\"需要理解文章中所说的控制流是什么意思\",{\"1\":{\"559\":1}}],[\"需要值的阶段较为靠后\",{\"1\":{\"552\":1}}],[\"需要再理解一下\",{\"1\":{\"548\":1}}],[\"需要继续研究\",{\"1\":{\"548\":1}}],[\"需要分析一下\",{\"1\":{\"499\":1}}],[\"需要遍历整个数组才能发现哪些句柄发生了事件\",{\"1\":{\"954\":1}}],[\"需要遍历的多叉树数据结构定义如下\",{\"1\":{\"486\":1}}],[\"需要遍历每一行得到最后的答案\",{\"1\":{\"30\":1}}],[\"需要找出\",{\"1\":{\"467\":1}}],[\"需要找出的\",{\"1\":{\"124\":1}}],[\"需要返回类的实例\",{\"1\":{\"431\":1}}],[\"需要使用哪个调用链\",{\"1\":{\"1575\":1}}],[\"需要使用\",{\"1\":{\"418\":1,\"925\":1,\"1554\":1}}],[\"需要好好理解\",{\"1\":{\"383\":1}}],[\"需要参考这个解决方案\",{\"1\":{\"274\":1}}],[\"需要选择一页进行替换\",{\"1\":{\"259\":1}}],[\"需要把控制权转接给操作系统处理缺页失效\",{\"1\":{\"256\":1}}],[\"需要解决以下问题\",{\"1\":{\"252\":1}}],[\"需要特别注意\",{\"1\":{\"248\":1}}],[\"需要重传\",{\"1\":{\"987\":1}}],[\"需要重新设计乱序引擎\",{\"1\":{\"549\":1}}],[\"需要重新搬移\",{\"1\":{\"208\":1}}],[\"需要重点理解一下\",{\"1\":{\"224\":1}}],[\"需要\",{\"1\":{\"217\":1,\"673\":1}}],[\"需要处理器控制单元和单独的控制器合作完成\",{\"1\":{\"212\":1}}],[\"需要比较的次数\",{\"1\":{\"206\":1}}],[\"需要比较\",{\"1\":{\"185\":2}}],[\"需要导入\",{\"1\":{\"173\":1}}],[\"需要求解\",{\"1\":{\"160\":1}}],[\"需要翻译一下\",{\"1\":{\"120\":1}}],[\"需要买的数量\",{\"1\":{\"102\":1}}],[\"需要买的总的数量\",{\"1\":{\"102\":1}}],[\"需要注意注释中所提到的\",{\"1\":{\"1534\":1}}],[\"需要注意内存分配和访问的开销\",{\"1\":{\"1529\":1}}],[\"需要注意由于\",{\"1\":{\"981\":1}}],[\"需要注意的一点是\",{\"1\":{\"1250\":1}}],[\"需要注意的一个小细节是\",{\"1\":{\"354\":1}}],[\"需要注意的是被注释的那行代码\",{\"1\":{\"1212\":1}}],[\"需要注意的是\",{\"1\":{\"61\":1,\"81\":1,\"354\":1,\"529\":1,\"548\":1,\"577\":1,\"612\":1,\"1240\":1,\"1526\":1,\"1529\":1,\"1567\":1,\"1585\":1,\"1590\":1}}],[\"需要注意到\",{\"1\":{\"245\":1,\"1265\":1,\"1487\":1,\"1647\":1}}],[\"需要注意到在这个步骤中\",{\"1\":{\"245\":1}}],[\"需要注意以下几点\",{\"1\":{\"169\":1}}],[\"需要注意\",{\"1\":{\"88\":1,\"156\":1,\"274\":1,\"288\":1,\"358\":1,\"374\":1,\"545\":1,\"576\":1,\"696\":1,\"761\":1,\"1340\":1,\"1355\":1,\"1396\":1,\"1424\":1,\"1460\":1}}],[\"需要多加理解才可以\",{\"1\":{\"43\":1}}],[\"需要收缩左边界\",{\"1\":{\"21\":1}}],[\"需要收缩右边界\",{\"1\":{\"20\":1}}],[\"需要有以下注意的点\",{\"1\":{\"15\":1}}],[\"需要拿\",{\"1\":{\"13\":1}}],[\"需要按照某种顺序搜索\",{\"1\":{\"10\":1}}],[\"数值\",{\"1\":{\"949\":1,\"982\":1}}],[\"数最长的\",{\"1\":{\"559\":1}}],[\"数量来衡量\",{\"1\":{\"1620\":1}}],[\"数量\",{\"1\":{\"559\":1}}],[\"数量索引\",{\"1\":{\"559\":1}}],[\"数量为\",{\"1\":{\"204\":1}}],[\"数据的大小\",{\"1\":{\"1341\":1}}],[\"数据的地址和\",{\"1\":{\"602\":1}}],[\"数据错误检查\",{\"1\":{\"1333\":1}}],[\"数据来创建\",{\"1\":{\"1329\":1}}],[\"数据封装等\",{\"1\":{\"1304\":1}}],[\"数据作为输入\",{\"1\":{\"1138\":1}}],[\"数据集中进行的烧融实验\",{\"1\":{\"1012\":1}}],[\"数据传输\",{\"1\":{\"992\":1}}],[\"数据重新进行组织\",{\"1\":{\"981\":1}}],[\"数据进行分片之后\",{\"1\":{\"981\":1}}],[\"数据报中的一片\",{\"1\":{\"981\":1}}],[\"数据报\",{\"1\":{\"981\":1}}],[\"数据报再次进行分片\",{\"1\":{\"981\":1}}],[\"数据报的大小超过了\",{\"1\":{\"981\":1}}],[\"数据长度参数不受限制\",{\"1\":{\"980\":1}}],[\"数据帧长度为\",{\"1\":{\"979\":1}}],[\"数据帧\",{\"1\":{\"979\":1}}],[\"数据部分中包括\",{\"1\":{\"974\":1}}],[\"数据部分\",{\"1\":{\"974\":2}}],[\"数据包中振幅的误差整体符合高斯分布\",{\"1\":{\"1024\":1}}],[\"数据包的分片\",{\"1\":{\"981\":1}}],[\"数据包分为\",{\"1\":{\"974\":1}}],[\"数据包\",{\"1\":{\"971\":1}}],[\"数据读完之后\",{\"1\":{\"956\":1}}],[\"数据淘汰策略\",{\"0\":{\"827\":1}}],[\"数据文件\",{\"1\":{\"815\":1}}],[\"数据加密服务\",{\"1\":{\"648\":1}}],[\"数据接入控制和应用安全\",{\"1\":{\"648\":1}}],[\"数据保护体系\",{\"0\":{\"648\":1}}],[\"数据泄露\",{\"1\":{\"646\":1}}],[\"数据库乐观锁\",{\"1\":{\"831\":1}}],[\"数据库可以分为三种类型\",{\"1\":{\"812\":1}}],[\"数据库审计场景\",{\"1\":{\"648\":1}}],[\"数据库安全服务\",{\"1\":{\"648\":1}}],[\"数据库安全\",{\"1\":{\"648\":1}}],[\"数据库生态\",{\"1\":{\"640\":1}}],[\"数据库\",{\"1\":{\"639\":1}}],[\"数据结构如下\",{\"1\":{\"1345\":1}}],[\"数据结构用于表示缓冲区\",{\"1\":{\"1341\":1}}],[\"数据结构用于描述用户空间的虚拟地址\",{\"1\":{\"1340\":1}}],[\"数据结构分析\",{\"0\":{\"1339\":1}}],[\"数据结构\",{\"1\":{\"508\":1,\"1344\":2,\"1385\":1}}],[\"数据驱动\",{\"0\":{\"387\":1}}],[\"数据段是可读写的\",{\"1\":{\"1460\":1}}],[\"数据段添加一个时间戳\",{\"1\":{\"978\":1}}],[\"数据段的完整性\",{\"1\":{\"978\":1}}],[\"数据段\",{\"1\":{\"282\":1}}],[\"数据和\",{\"1\":{\"925\":1}}],[\"数据和栈\",{\"1\":{\"251\":1}}],[\"数据和内存中一致\",{\"1\":{\"224\":2}}],[\"数据存在于很多\",{\"1\":{\"224\":1}}],[\"数据只存在于本\",{\"1\":{\"224\":1}}],[\"数据\",{\"1\":{\"217\":1,\"976\":1,\"1329\":1}}],[\"数组在\",{\"1\":{\"675\":1}}],[\"数组实例中会存储\",{\"1\":{\"674\":1}}],[\"数组实例\",{\"1\":{\"674\":1}}],[\"数组中是如何存储到数组的长度属性的\",{\"1\":{\"672\":1}}],[\"数组是常量的具体内容\",{\"1\":{\"666\":1}}],[\"数组越界\",{\"1\":{\"147\":1}}],[\"数组的大小\",{\"1\":{\"1341\":1}}],[\"数组的内存布局\",{\"0\":{\"682\":1}}],[\"数组的和\",{\"1\":{\"124\":1}}],[\"数组的定义\",{\"1\":{\"118\":2}}],[\"数组可以分割成\",{\"1\":{\"122\":1}}],[\"数组\",{\"1\":{\"118\":1,\"122\":1,\"682\":1,\"1340\":1}}],[\"数组来进行标记\",{\"1\":{\"89\":1}}],[\"数组放到一起\",{\"1\":{\"88\":1}}],[\"数组标记效果相同\",{\"1\":{\"11\":1}}],[\"数字越大\",{\"1\":{\"1567\":1}}],[\"数字在排序数组中出现的次数\",{\"0\":{\"32\":1}}],[\"数字\",{\"1\":{\"9\":1}}],[\"uefi\",{\"1\":{\"1496\":1}}],[\"uh\",{\"1\":{\"1463\":2}}],[\"u8\",{\"1\":{\"1345\":1}}],[\"ugc\",{\"1\":{\"1276\":2}}],[\"ugly\",{\"1\":{\"1060\":1}}],[\"u0\",{\"1\":{\"1275\":1}}],[\"u011037593\",{\"1\":{\"539\":1}}],[\"ulr\",{\"1\":{\"1245\":1}}],[\"ulimit\",{\"1\":{\"957\":2}}],[\"uchar\",{\"1\":{\"1198\":1}}],[\"ucode\",{\"1\":{\"1145\":4}}],[\"uwb\",{\"1\":{\"1012\":1}}],[\"uwtable\",{\"1\":{\"692\":2}}],[\"uart0\",{\"1\":{\"1486\":1,\"1492\":1,\"1499\":2}}],[\"ua\",{\"1\":{\"1004\":1}}],[\"udp\",{\"0\":{\"991\":1},\"1\":{\"977\":1,\"979\":6,\"981\":1,\"991\":1,\"997\":3}}],[\"u64\",{\"1\":{\"955\":1}}],[\"u32\",{\"1\":{\"955\":1,\"982\":2,\"1591\":4}}],[\"uuid\",{\"1\":{\"833\":2}}],[\"urgent\",{\"1\":{\"978\":3}}],[\"uroot\",{\"1\":{\"804\":1}}],[\"uri\",{\"1\":{\"796\":1}}],[\"url填写\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"urlretrieve\",{\"1\":{\"1216\":1}}],[\"urls\",{\"1\":{\"864\":1}}],[\"url=\",{\"1\":{\"412\":1}}],[\"url=http\",{\"1\":{\"336\":1,\"337\":1}}],[\"urlencode\",{\"1\":{\"412\":1}}],[\"urlopen\",{\"1\":{\"410\":1,\"1094\":1}}],[\"urllib\",{\"0\":{\"409\":1,\"1094\":1},\"1\":{\"410\":1,\"412\":2,\"1094\":3,\"1216\":2}}],[\"url\",{\"0\":{\"410\":1,\"1094\":1},\"1\":{\"336\":1,\"412\":1,\"449\":1,\"759\":1,\"764\":3,\"848\":1,\"889\":1,\"998\":2,\"1075\":1,\"1079\":3,\"1081\":2,\"1094\":2,\"1216\":4,\"1236\":1,\"1240\":1,\"1250\":3,\"1258\":1}}],[\"uom\",{\"1\":{\"793\":1}}],[\"utils\",{\"1\":{\"1440\":6,\"1441\":3}}],[\"utilize\",{\"1\":{\"1124\":1,\"1189\":1}}],[\"util\",{\"1\":{\"706\":1,\"1333\":1,\"1403\":1}}],[\"utf8\",{\"1\":{\"410\":1,\"664\":11,\"1094\":2}}],[\"utf\",{\"1\":{\"323\":1,\"388\":1,\"468\":1,\"1004\":1,\"1094\":1}}],[\"ui\",{\"1\":{\"1055\":3}}],[\"uid\",{\"1\":{\"702\":2,\"703\":1}}],[\"uintptr\",{\"1\":{\"1301\":2,\"1312\":1,\"1315\":3,\"1316\":1,\"1320\":1,\"1345\":3}}],[\"uint32\",{\"1\":{\"955\":2,\"1316\":4,\"1320\":3,\"1333\":6,\"1340\":1}}],[\"uint\",{\"1\":{\"949\":1}}],[\"uint64\",{\"1\":{\"510\":2,\"955\":1}}],[\"uint8\",{\"1\":{\"509\":1}}],[\"u16string\",{\"1\":{\"1320\":1}}],[\"u1\",{\"1\":{\"666\":2}}],[\"u1表示该域对应一个字节长度\",{\"1\":{\"666\":1}}],[\"u==0\",{\"1\":{\"559\":1}}],[\"ubuf\",{\"1\":{\"1314\":2}}],[\"ubuntu\",{\"0\":{\"780\":1},\"1\":{\"270\":1,\"620\":1,\"748\":3,\"780\":1,\"781\":1,\"783\":1,\"1073\":1,\"1143\":2,\"1144\":1,\"1463\":1}}],[\"ubiquitous\",{\"1\":{\"1120\":1}}],[\"ubfx\",{\"0\":{\"536\":1},\"1\":{\"536\":4}}],[\"u\",{\"1\":{\"90\":5,\"392\":1,\"559\":8,\"666\":1,\"691\":4,\"841\":1,\"978\":2,\"1217\":1,\"1240\":3,\"1463\":2}}],[\"upward\",{\"1\":{\"1508\":1}}],[\"upon\",{\"1\":{\"1481\":1,\"1483\":1}}],[\"upgrade\",{\"1\":{\"917\":1,\"1101\":3,\"1633\":1}}],[\"upgraded\",{\"1\":{\"774\":1}}],[\"upsert\",{\"1\":{\"793\":2}}],[\"upstream\",{\"1\":{\"761\":6,\"763\":2,\"764\":1,\"765\":1,\"1143\":1}}],[\"uploads\",{\"1\":{\"1239\":1}}],[\"upload\",{\"1\":{\"1239\":3}}],[\"upl\",{\"1\":{\"759\":1}}],[\"updating\",{\"1\":{\"584\":1,\"1501\":1,\"1536\":1}}],[\"updatemany\",{\"1\":{\"793\":2}}],[\"updateone\",{\"1\":{\"793\":3}}],[\"updates\",{\"1\":{\"775\":1,\"935\":1,\"1381\":2,\"1487\":1,\"1494\":1}}],[\"updated\",{\"1\":{\"245\":1,\"559\":2,\"1101\":1,\"1113\":1,\"1600\":1}}],[\"update\",{\"0\":{\"222\":1,\"793\":1,\"917\":1,\"1063\":1,\"1100\":1,\"1101\":1},\"1\":{\"88\":2,\"220\":1,\"270\":1,\"543\":1,\"559\":1,\"715\":1,\"750\":1,\"774\":1,\"790\":1,\"793\":4,\"798\":3,\"865\":1,\"890\":1,\"891\":1,\"941\":1,\"1054\":1,\"1056\":1,\"1057\":1,\"1076\":1,\"1101\":1,\"1244\":2,\"1248\":1,\"1524\":1,\"1562\":1,\"1583\":1,\"1584\":1,\"1590\":1,\"1596\":1,\"1600\":1,\"1601\":1}}],[\"upper\",{\"1\":{\"559\":2,\"576\":1,\"1287\":1,\"1592\":1}}],[\"up\",{\"0\":{\"660\":1},\"1\":{\"88\":2,\"197\":1,\"255\":1,\"361\":2,\"552\":1,\"559\":1,\"621\":1,\"707\":2,\"1203\":1,\"1365\":1,\"1405\":2,\"1424\":1,\"1474\":1,\"1483\":1,\"1484\":1,\"1491\":1,\"1509\":1,\"1576\":2,\"1623\":1}}],[\"usng\",{\"1\":{\"1102\":1}}],[\"usually\",{\"1\":{\"676\":1,\"1202\":1}}],[\"usapsocketaddress\",{\"1\":{\"703\":2}}],[\"usap\",{\"1\":{\"703\":1}}],[\"usa\",{\"1\":{\"606\":1}}],[\"usable\",{\"1\":{\"341\":1}}],[\"usage\",{\"0\":{\"344\":1,\"608\":1,\"854\":1,\"927\":1,\"1227\":1,\"1229\":1,\"1239\":1,\"1574\":1,\"1575\":1,\"1576\":1,\"1577\":1},\"1\":{\"308\":1,\"401\":1,\"454\":1,\"559\":1,\"751\":1,\"928\":1,\"931\":1,\"941\":1,\"1053\":1,\"1054\":1,\"1056\":1}}],[\"us\",{\"1\":{\"309\":1,\"602\":1,\"624\":1,\"1201\":1,\"1545\":1}}],[\"usr\",{\"1\":{\"273\":2,\"274\":3,\"275\":1,\"418\":2,\"712\":4,\"751\":1,\"759\":3,\"959\":3,\"1418\":1,\"1424\":11,\"1464\":1}}],[\"ustc\",{\"1\":{\"270\":5,\"619\":1}}],[\"usepackage\",{\"1\":{\"1179\":2}}],[\"useless\",{\"1\":{\"565\":1}}],[\"usefixtures\",{\"1\":{\"379\":1}}],[\"usefulness\",{\"1\":{\"559\":1}}],[\"useful\",{\"0\":{\"1087\":1,\"1126\":1},\"1\":{\"236\":1,\"243\":2,\"559\":6,\"562\":2,\"576\":2,\"748\":1,\"923\":1,\"941\":1,\"1219\":1,\"1259\":1,\"1435\":1,\"1508\":1}}],[\"userid这\",{\"1\":{\"1333\":1}}],[\"userid\",{\"1\":{\"1094\":1,\"1329\":2}}],[\"userinfo\",{\"1\":{\"1094\":1}}],[\"user=user\",{\"1\":{\"858\":1}}],[\"usermod\",{\"1\":{\"783\":1}}],[\"userspace\",{\"1\":{\"1344\":2,\"1345\":1}}],[\"users\",{\"1\":{\"664\":1,\"691\":1,\"794\":1,\"798\":1,\"1623\":2}}],[\"username\",{\"1\":{\"446\":1,\"622\":1,\"819\":1,\"1072\":1,\"1074\":2,\"1075\":1,\"1077\":1,\"1453\":4}}],[\"user<tom>\",{\"1\":{\"375\":1}}],[\"user<jack>\",{\"1\":{\"375\":1}}],[\"user\",{\"0\":{\"748\":1,\"1344\":1},\"1\":{\"336\":1,\"375\":3,\"449\":1,\"691\":7,\"712\":1,\"747\":1,\"748\":2,\"783\":2,\"819\":2,\"858\":1,\"872\":4,\"955\":1,\"1162\":2,\"1243\":3,\"1312\":2,\"1314\":3,\"1315\":2,\"1316\":4,\"1340\":1,\"1341\":3,\"1342\":2,\"1344\":6,\"1345\":3,\"1353\":1,\"1355\":1,\"1424\":1,\"1501\":2,\"1597\":1,\"1607\":2,\"1623\":1}}],[\"usecols=\",{\"1\":{\"331\":1}}],[\"use=none\",{\"1\":{\"288\":1}}],[\"use\",{\"0\":{\"1465\":1},\"1\":{\"195\":1,\"204\":1,\"236\":3,\"245\":2,\"250\":1,\"255\":1,\"270\":1,\"288\":3,\"289\":1,\"308\":3,\"341\":1,\"366\":1,\"408\":1,\"454\":1,\"550\":1,\"551\":1,\"557\":1,\"558\":2,\"559\":1,\"562\":3,\"564\":1,\"602\":1,\"691\":4,\"692\":1,\"703\":2,\"707\":1,\"750\":2,\"751\":2,\"774\":1,\"785\":1,\"794\":1,\"804\":1,\"820\":5,\"851\":1,\"889\":1,\"890\":1,\"923\":2,\"940\":1,\"941\":3,\"942\":2,\"991\":1,\"1052\":1,\"1054\":1,\"1055\":2,\"1072\":1,\"1080\":1,\"1094\":1,\"1105\":2,\"1145\":1,\"1189\":2,\"1216\":1,\"1217\":1,\"1219\":6,\"1221\":1,\"1405\":1,\"1424\":1,\"1427\":1,\"1474\":2,\"1485\":1,\"1487\":1,\"1492\":1,\"1494\":1,\"1501\":1,\"1536\":1,\"1623\":2}}],[\"uses\",{\"1\":{\"193\":1,\"194\":2,\"236\":1,\"250\":1,\"261\":1,\"553\":1,\"559\":1,\"584\":1,\"785\":1,\"992\":1,\"1189\":2,\"1476\":1}}],[\"used\",{\"1\":{\"11\":2,\"195\":1,\"196\":1,\"203\":2,\"204\":1,\"227\":4,\"236\":3,\"237\":1,\"245\":4,\"250\":1,\"255\":2,\"321\":2,\"543\":2,\"548\":3,\"555\":1,\"557\":1,\"558\":4,\"559\":3,\"562\":1,\"575\":1,\"580\":1,\"691\":1,\"703\":1,\"707\":1,\"748\":1,\"774\":1,\"850\":1,\"896\":1,\"897\":1,\"939\":1,\"1053\":1,\"1054\":1,\"1075\":1,\"1202\":3,\"1216\":2,\"1219\":1,\"1385\":1,\"1405\":1,\"1421\":1,\"1422\":1,\"1431\":4,\"1474\":1,\"1481\":1,\"1487\":2,\"1492\":2,\"1494\":1,\"1507\":1,\"1508\":1,\"1534\":1,\"1553\":2,\"1620\":2,\"1623\":2}}],[\"using\",{\"0\":{\"781\":1},\"1\":{\"31\":1,\"241\":1,\"256\":2,\"271\":1,\"455\":2,\"542\":1,\"548\":1,\"552\":1,\"555\":1,\"556\":3,\"557\":1,\"558\":6,\"559\":2,\"580\":1,\"606\":1,\"693\":1,\"708\":1,\"751\":1,\"781\":1,\"820\":1,\"848\":1,\"889\":1,\"890\":3,\"892\":1,\"923\":1,\"930\":1,\"938\":1,\"1004\":1,\"1055\":2,\"1056\":2,\"1072\":1,\"1081\":1,\"1130\":1,\"1196\":1,\"1203\":1,\"1209\":1,\"1237\":2,\"1365\":1,\"1418\":1,\"1425\":2,\"1481\":1,\"1483\":8,\"1492\":1,\"1493\":1,\"1509\":1}}],[\"unmodifiablelist\",{\"1\":{\"1627\":1}}],[\"unmodified\",{\"1\":{\"1573\":3}}],[\"unbound\",{\"1\":{\"1602\":1}}],[\"unbind\",{\"1\":{\"1593\":1,\"1602\":3,\"1609\":1}}],[\"unregister\",{\"0\":{\"1572\":1,\"1576\":1},\"1\":{\"1572\":2,\"1576\":5,\"1577\":4,\"1606\":1,\"1607\":1,\"1608\":1,\"1611\":1}}],[\"unrecognized\",{\"1\":{\"1365\":2,\"1366\":2}}],[\"unreasonably\",{\"1\":{\"1333\":1}}],[\"unrealistically\",{\"1\":{\"562\":1}}],[\"untrack\",{\"1\":{\"1247\":1}}],[\"until\",{\"1\":{\"194\":2,\"236\":2,\"373\":1,\"374\":1,\"543\":2,\"550\":2,\"553\":1,\"851\":1,\"934\":1,\"1075\":1,\"1381\":1,\"1475\":1,\"1620\":1}}],[\"unzip\",{\"1\":{\"1145\":1}}],[\"unknow\",{\"1\":{\"1125\":1}}],[\"unknown\",{\"1\":{\"1125\":1}}],[\"un\",{\"1\":{\"950\":1}}],[\"uncertainty\",{\"1\":{\"1206\":1}}],[\"unconfined\",{\"1\":{\"777\":1}}],[\"unchanged\",{\"1\":{\"406\":1,\"1192\":1}}],[\"unappreciated\",{\"1\":{\"1623\":1}}],[\"uname\",{\"1\":{\"713\":1,\"717\":3,\"1145\":4,\"1263\":1,\"1645\":1}}],[\"unable\",{\"1\":{\"321\":1}}],[\"unused\",{\"1\":{\"676\":8,\"1054\":2,\"1528\":2}}],[\"unset\",{\"1\":{\"1607\":1}}],[\"unstage\",{\"1\":{\"1251\":2}}],[\"unspecified\",{\"1\":{\"1219\":1,\"1596\":1}}],[\"unsupported\",{\"1\":{\"703\":1}}],[\"unsuccessful\",{\"1\":{\"25\":1}}],[\"unsafe\",{\"1\":{\"692\":1}}],[\"unsigned\",{\"1\":{\"666\":1,\"1307\":2,\"1313\":2,\"1314\":3,\"1341\":4,\"1344\":3,\"1464\":1,\"1469\":4,\"1470\":2,\"1471\":3,\"1534\":1,\"1567\":3,\"1570\":1,\"1573\":3,\"1576\":8,\"1577\":1,\"1590\":2,\"1591\":1,\"1592\":2,\"1600\":3}}],[\"unnecessary\",{\"1\":{\"565\":1}}],[\"unfortunately\",{\"1\":{\"552\":1,\"1623\":1}}],[\"unfinished\",{\"1\":{\"372\":1}}],[\"unlock\",{\"1\":{\"1544\":1,\"1570\":1,\"1607\":2}}],[\"unlocked\",{\"1\":{\"1307\":1,\"1563\":1,\"1575\":1}}],[\"unlike\",{\"1\":{\"543\":1,\"552\":1,\"1186\":1}}],[\"unlikely\",{\"1\":{\"508\":1,\"559\":1,\"1571\":1,\"1573\":1}}],[\"unless\",{\"1\":{\"321\":1,\"558\":1,\"1060\":2,\"1376\":1}}],[\"unordered\",{\"0\":{\"454\":1},\"1\":{\"454\":5,\"480\":3,\"1057\":1}}],[\"unplug\",{\"1\":{\"1092\":1}}],[\"unpredictable\",{\"1\":{\"601\":1}}],[\"unpack\",{\"1\":{\"387\":3}}],[\"unpipelined\",{\"1\":{\"236\":1,\"244\":1}}],[\"unexpected\",{\"1\":{\"321\":1,\"1498\":1}}],[\"undefined\",{\"1\":{\"1449\":1}}],[\"undesirable\",{\"1\":{\"1125\":1}}],[\"undershooting\",{\"1\":{\"1591\":1}}],[\"understand\",{\"1\":{\"408\":1,\"1201\":1}}],[\"understanding\",{\"0\":{\"253\":1},\"1\":{\"266\":1,\"566\":1,\"1619\":2}}],[\"under\",{\"1\":{\"543\":2,\"776\":1,\"1204\":1}}],[\"undo\",{\"1\":{\"6\":1}}],[\"unix\",{\"1\":{\"1464\":2,\"1616\":1}}],[\"unixfd\",{\"1\":{\"950\":1}}],[\"uninit\",{\"1\":{\"1463\":1}}],[\"uninstall\",{\"1\":{\"1274\":1}}],[\"university\",{\"1\":{\"1201\":1}}],[\"universal\",{\"1\":{\"774\":1}}],[\"unified指的是这是一个统一的框架\",{\"1\":{\"1151\":1}}],[\"unified\",{\"0\":{\"1155\":1},\"1\":{\"1150\":1,\"1151\":1}}],[\"union\",{\"1\":{\"955\":1,\"1155\":1,\"1345\":1}}],[\"unistd\",{\"1\":{\"741\":1}}],[\"uniprocessor\",{\"1\":{\"542\":1}}],[\"uniprocessors\",{\"1\":{\"542\":1}}],[\"unicode\",{\"1\":{\"411\":1,\"843\":1}}],[\"unit\",{\"0\":{\"575\":1,\"603\":1},\"1\":{\"551\":1,\"552\":1,\"601\":1,\"602\":1,\"1052\":1,\"1484\":1,\"1620\":1}}],[\"unitest\",{\"1\":{\"369\":1}}],[\"units\",{\"1\":{\"237\":1,\"1202\":1}}],[\"unittest\",{\"1\":{\"81\":1,\"90\":1,\"102\":1,\"149\":1,\"150\":2,\"385\":3,\"386\":4,\"387\":6,\"388\":3}}],[\"uniqueoccurrences\",{\"1\":{\"299\":4}}],[\"unique\",{\"1\":{\"194\":2,\"344\":1,\"374\":2,\"480\":1,\"693\":1,\"811\":1,\"850\":1,\"896\":1}}],[\"对共享数据进行修改时\",{\"1\":{\"1584\":1}}],[\"对某一事件感兴趣的一方\",{\"1\":{\"1578\":1}}],[\"对原来的\",{\"1\":{\"1567\":1}}],[\"对通知链元素的回调函数没有任何限制\",{\"1\":{\"1562\":1}}],[\"对称多处理器系统\",{\"1\":{\"1557\":1}}],[\"对称二叉树\",{\"0\":{\"50\":1},\"1\":{\"50\":1,\"52\":1}}],[\"对接\",{\"1\":{\"1531\":1}}],[\"对接收天线而言\",{\"1\":{\"1019\":1}}],[\"对空闲轮询机制进行控制\",{\"1\":{\"1528\":1}}],[\"对其进行修改\",{\"1\":{\"1524\":1}}],[\"对其进行操作\",{\"1\":{\"819\":1}}],[\"对其做一个大概的认知\",{\"1\":{\"1464\":1}}],[\"对新创建的\",{\"1\":{\"1366\":1}}],[\"对每个使用\",{\"1\":{\"1338\":1}}],[\"对每一组测试分别计算最大定位误差和最小定位误差\",{\"1\":{\"1012\":1}}],[\"对待加密数据按照二叉搜索树进行编码\",{\"1\":{\"1169\":1}}],[\"对容器外提供单例\",{\"1\":{\"883\":1}}],[\"对设置\",{\"1\":{\"827\":1}}],[\"对设置的\",{\"1\":{\"827\":1}}],[\"对外不可见\",{\"1\":{\"761\":1}}],[\"对外暴露\",{\"1\":{\"761\":1}}],[\"对虚拟机的管理通过对这个进程的管理加以完成\",{\"1\":{\"725\":1}}],[\"对齐填充的目的是为了将对象的大小对齐到\",{\"1\":{\"679\":1}}],[\"对齐填充展开\",{\"1\":{\"674\":1}}],[\"对齐填充\",{\"0\":{\"679\":1},\"1\":{\"674\":1}}],[\"对企业的盈利是否产生影响\",{\"1\":{\"637\":1}}],[\"对值进行查找\",{\"1\":{\"599\":1}}],[\"对这些预测器而言\",{\"1\":{\"552\":1}}],[\"对这个问题进行抽象\",{\"1\":{\"88\":1}}],[\"对这个\",{\"1\":{\"11\":1}}],[\"对身体和心灵都是巨大的伤害\",{\"1\":{\"478\":1}}],[\"对双向链表进行操作的同时对这个\",{\"1\":{\"460\":1}}],[\"对继承的子类不起效\",{\"1\":{\"436\":1}}],[\"对实例进行调用\",{\"1\":{\"435\":1}}],[\"对\",{\"1\":{\"418\":2,\"557\":1,\"760\":1,\"1301\":1,\"1333\":1,\"1449\":1,\"1470\":1,\"1483\":1,\"1510\":1,\"1552\":1,\"1589\":1,\"1605\":1}}],[\"对象没有再被\",{\"1\":{\"1388\":1}}],[\"对象是在\",{\"1\":{\"1388\":1}}],[\"对象是最后标记的\",{\"1\":{\"1388\":1}}],[\"对象状态转换为\",{\"1\":{\"1388\":1}}],[\"对象持有了\",{\"1\":{\"1388\":1}}],[\"对象持有\",{\"1\":{\"1388\":1}}],[\"对象之外\",{\"1\":{\"1386\":1}}],[\"对象之间失去了联系\",{\"1\":{\"871\":1}}],[\"对象都将被垃圾回收\",{\"1\":{\"1385\":1}}],[\"对象图\",{\"1\":{\"1380\":1}}],[\"对象拥有对客户端的读权限和服务端的写权限\",{\"1\":{\"1355\":1}}],[\"对象不为空\",{\"1\":{\"1333\":1}}],[\"对象中写入参数\",{\"1\":{\"1328\":1}}],[\"对象成为字符串\",{\"1\":{\"902\":1}}],[\"对象的分配也都是在\",{\"1\":{\"1388\":1}}],[\"对象的生命周期的颜色变化一般是\",{\"1\":{\"1388\":1}}],[\"对象的\",{\"1\":{\"1388\":1}}],[\"对象的引用\",{\"1\":{\"1388\":2}}],[\"对象的缓存池\",{\"1\":{\"1329\":1}}],[\"对象的创建和\",{\"1\":{\"1330\":1}}],[\"对象的创建\",{\"1\":{\"1329\":1}}],[\"对象的创建等操作\",{\"1\":{\"1321\":1}}],[\"对象的创建存在依赖\",{\"1\":{\"871\":1}}],[\"对象的数组\",{\"1\":{\"902\":1}}],[\"对象的时候就阻塞住了\",{\"1\":{\"881\":1}}],[\"对象的成员变量\",{\"1\":{\"881\":1}}],[\"对象以及其所在的\",{\"1\":{\"706\":1,\"1402\":1}}],[\"对象在内存中的布局情况\",{\"1\":{\"681\":1}}],[\"对象可以有对齐数据也可以没有\",{\"1\":{\"679\":1}}],[\"对象指向它的类元数据的指针\",{\"1\":{\"677\":1}}],[\"对象被转移到老年代\",{\"1\":{\"676\":1}}],[\"对象被创建了\",{\"1\":{\"432\":1}}],[\"对象实例\",{\"1\":{\"674\":1}}],[\"对象实例字段的偏移量或者任何调用的实际目标\",{\"1\":{\"654\":1}}],[\"对象字段属性信息\",{\"1\":{\"674\":1}}],[\"对象头固定大小为\",{\"1\":{\"674\":1}}],[\"对象头\",{\"0\":{\"675\":1},\"1\":{\"674\":1}}],[\"对象主要包含三个部分\",{\"1\":{\"674\":1}}],[\"对象分配后存在于堆中并给其分配一个内存地址\",{\"1\":{\"674\":1}}],[\"对象内存构成\",{\"0\":{\"674\":1}}],[\"对象海量存储\",{\"1\":{\"643\":1}}],[\"对象存储服务\",{\"1\":{\"640\":1}}],[\"对象也未创建\",{\"1\":{\"432\":1}}],[\"对象\",{\"1\":{\"285\":1,\"329\":1,\"415\":1,\"691\":1,\"706\":1,\"741\":1,\"902\":1,\"927\":1,\"1320\":1,\"1329\":4,\"1333\":2,\"1355\":1,\"1365\":1,\"1385\":1,\"1386\":1,\"1389\":2,\"1402\":1}}],[\"对视频进行高清解码等等\",{\"1\":{\"280\":1}}],[\"对上面的代码做一点改进\",{\"1\":{\"436\":1}}],[\"对上述描述的简单理解\",{\"1\":{\"255\":1}}],[\"对上个\",{\"1\":{\"245\":1}}],[\"对寄存器中的值进行带扩展的循环右移\",{\"1\":{\"514\":1}}],[\"对寄存器中的值进行算术右移\",{\"1\":{\"514\":1}}],[\"对寄存器\",{\"1\":{\"245\":1}}],[\"对数据包进行地址转换以后发送到实际网络中\",{\"1\":{\"728\":1}}],[\"对数据进行原子性操作\",{\"1\":{\"534\":1}}],[\"对数据的所有操作都适用于寄存器中的数据\",{\"1\":{\"235\":1}}],[\"对数组\",{\"1\":{\"36\":1}}],[\"对用户\",{\"1\":{\"226\":1}}],[\"对比容器的优劣\",{\"1\":{\"1632\":1}}],[\"对比前面在\",{\"1\":{\"1389\":1}}],[\"对比一下\",{\"1\":{\"727\":1}}],[\"对比\",{\"0\":{\"687\":1},\"1\":{\"977\":1}}],[\"对比于\",{\"1\":{\"652\":1}}],[\"对比如果使用\",{\"1\":{\"344\":1}}],[\"对比理解这个题目\",{\"1\":{\"154\":1}}],[\"对比理解\",{\"0\":{\"154\":1}}],[\"对比而言\",{\"1\":{\"126\":1,\"1583\":1}}],[\"对比求二叉树的最小深度\",{\"1\":{\"57\":1}}],[\"对图进行遍历\",{\"1\":{\"90\":1}}],[\"对应在\",{\"1\":{\"1025\":1}}],[\"对应于向量之间存在着一个微小的旋转偏差\",{\"1\":{\"1024\":1}}],[\"对应代码\",{\"1\":{\"676\":1}}],[\"对应路径\",{\"1\":{\"676\":1}}],[\"对应为其\",{\"1\":{\"390\":1}}],[\"对应\",{\"1\":{\"88\":1,\"435\":1,\"960\":2}}],[\"对应的标志位\",{\"1\":{\"1545\":1}}],[\"对应的那一位\",{\"1\":{\"1545\":1}}],[\"对应的位\",{\"1\":{\"1545\":1}}],[\"对应的实现如下\",{\"1\":{\"1332\":1}}],[\"对应的服务器地址\",{\"1\":{\"1253\":1}}],[\"对应的ope编码值\",{\"1\":{\"1169\":1}}],[\"对应的缓冲区有数据\",{\"1\":{\"956\":1}}],[\"对应的监听事件\",{\"1\":{\"955\":1}}],[\"对应的输出如下\",{\"1\":{\"682\":1}}],[\"对应的源代码如下\",{\"1\":{\"673\":1}}],[\"对应的可能的\",{\"1\":{\"601\":1}}],[\"对应的下一个比它大的元素\",{\"1\":{\"467\":1}}],[\"对应的下标\",{\"1\":{\"20\":1}}],[\"对应的内存的地址\",{\"1\":{\"195\":1}}],[\"对应的比较函数如下\",{\"1\":{\"185\":1}}],[\"对应的\",{\"1\":{\"147\":1,\"984\":1}}],[\"对应的最新的值\",{\"1\":{\"120\":1}}],[\"对应的测试用例和输出\",{\"1\":{\"354\":1}}],[\"对应的测试用例\",{\"1\":{\"102\":1}}],[\"对应的价格\",{\"1\":{\"102\":1}}],[\"对应的列表时\",{\"1\":{\"47\":1}}],[\"对应右边\",{\"1\":{\"25\":1}}],[\"对应左边\",{\"1\":{\"25\":1}}],[\"对边界条件专门进行判断\",{\"1\":{\"22\":1}}],[\"对于当前的\",{\"1\":{\"1573\":1}}],[\"对于各个区段\",{\"1\":{\"1553\":1}}],[\"对于嵌入式系统来说\",{\"1\":{\"1508\":1}}],[\"对于不太复杂的系统而言\",{\"1\":{\"1501\":1}}],[\"对于不存在对应目标的边界框\",{\"1\":{\"1156\":1}}],[\"对于该图的解释如下\",{\"1\":{\"1479\":1}}],[\"对于在\",{\"1\":{\"1380\":1}}],[\"对于一些情况\",{\"1\":{\"1286\":1}}],[\"对于一个链表的注册\",{\"1\":{\"1570\":1}}],[\"对于一个优化算法而言\",{\"1\":{\"1212\":1}}],[\"对于一个二叉树而言\",{\"1\":{\"1169\":1}}],[\"对于一个较低分辨率的特征图而言\",{\"1\":{\"1022\":1}}],[\"对于一个给定的连接\",{\"1\":{\"987\":1}}],[\"对于一个以太网\",{\"1\":{\"980\":1}}],[\"对于一个进程而言\",{\"1\":{\"252\":1}}],[\"对于一个字节我们还需要更加注意\",{\"1\":{\"195\":1}}],[\"对于所有剩余的\",{\"1\":{\"1240\":1}}],[\"对于learning\",{\"1\":{\"1212\":1}}],[\"对于滑动平均模型\",{\"1\":{\"1185\":1}}],[\"对于改进的mope算法\",{\"1\":{\"1171\":1}}],[\"对于步骤一\",{\"1\":{\"1171\":1}}],[\"对于第三个参数\",{\"1\":{\"1567\":1}}],[\"对于第hmin​+1条数据开始\",{\"1\":{\"1170\":1}}],[\"对于第一种策略来得到检测框的结果\",{\"1\":{\"1157\":1}}],[\"对于图4而言\",{\"1\":{\"1170\":1}}],[\"对于图1中的路径进行二进制编码\",{\"1\":{\"1169\":1}}],[\"对于n个ope编码\",{\"1\":{\"1170\":1}}],[\"对于数据量很大的编码集来说\",{\"1\":{\"1170\":1}}],[\"对于节点相对位置的改变并没有进行特殊的优化\",{\"1\":{\"1169\":1}}],[\"对于平衡二叉树而言\",{\"1\":{\"1169\":1}}],[\"对于已插入的不重复的n个条目\",{\"1\":{\"1170\":1}}],[\"对于已构造的二叉搜索树而言\",{\"1\":{\"1169\":1}}],[\"对于已经实现的接口\",{\"1\":{\"878\":1}}],[\"对于插入理想顺序的二叉搜索树\",{\"1\":{\"1169\":1}}],[\"对于yolo算法\",{\"1\":{\"1157\":1}}],[\"对于yolo的预测过程\",{\"1\":{\"1157\":1}}],[\"对于卷积层和全连接层\",{\"1\":{\"1156\":1}}],[\"对于卷积层\",{\"1\":{\"1156\":1}}],[\"对于pascalvoc数据\",{\"1\":{\"1155\":1}}],[\"对于cnn分类器而言\",{\"1\":{\"1153\":1}}],[\"对于特殊版本的内核\",{\"1\":{\"1145\":1}}],[\"对于rf信号而言\",{\"1\":{\"1134\":1}}],[\"对于rgb图片上的人类行为感知一般都基于两种常见的方法\",{\"1\":{\"1133\":1}}],[\"对于基于视觉信号的姿态预测系统来说\",{\"1\":{\"1132\":1}}],[\"对于遮挡等障碍的处理依旧是一个基本的挑战难题\",{\"1\":{\"1131\":1}}],[\"对于中心频偏\",{\"1\":{\"1024\":1}}],[\"对于包检测错误\",{\"1\":{\"1024\":1}}],[\"对于任意两个向量在频域中进行\",{\"1\":{\"1024\":1}}],[\"对于后者情况\",{\"1\":{\"987\":1}}],[\"对于服务器主动发起断开而言\",{\"1\":{\"983\":1}}],[\"对于丢包有两种判定方式\",{\"1\":{\"978\":1}}],[\"对于时间进行排序\",{\"1\":{\"910\":1}}],[\"对于单例\",{\"1\":{\"876\":1}}],[\"对于建立的索引\",{\"1\":{\"810\":1}}],[\"对于删除模块\",{\"1\":{\"719\":1}}],[\"对于宏\",{\"1\":{\"706\":2,\"1403\":2}}],[\"对于指令和操作数而言\",{\"1\":{\"691\":1}}],[\"对于解释器来说\",{\"1\":{\"687\":1}}],[\"对于解释器而言\",{\"1\":{\"655\":1}}],[\"对于对象头中包含的两个字\",{\"1\":{\"675\":1}}],[\"对于压缩使能这个问题\",{\"1\":{\"673\":1}}],[\"对于生成的\",{\"1\":{\"664\":1}}],[\"对于编译器而言\",{\"1\":{\"655\":1}}],[\"对于被\",{\"1\":{\"602\":1}}],[\"对于推测存储位置存在两种\",{\"1\":{\"572\":1}}],[\"对于大多数的预测器而言\",{\"1\":{\"552\":1}}],[\"对于同一个指令的\",{\"1\":{\"542\":1}}],[\"对于括号匹配\",{\"1\":{\"465\":1}}],[\"对于那个排序而言\",{\"1\":{\"453\":1}}],[\"对于你定义的每一个类\",{\"1\":{\"427\":1}}],[\"对于普通的函数调用\",{\"1\":{\"285\":1}}],[\"对于可以迭代的对象\",{\"1\":{\"285\":1}}],[\"对于计算密集型任务\",{\"1\":{\"280\":1}}],[\"对于上面所说的对象发生移动\",{\"1\":{\"1380\":1}}],[\"对于上面的解释\",{\"1\":{\"261\":1}}],[\"对于上图中的bst而言\",{\"1\":{\"1170\":1}}],[\"对于上述说法的正确理解是\",{\"1\":{\"196\":1}}],[\"对于上述解法的\",{\"1\":{\"15\":1}}],[\"对于为什么需要\",{\"1\":{\"261\":1}}],[\"对于虚拟内存而言\",{\"1\":{\"251\":1}}],[\"对于段虚拟寄存器\",{\"1\":{\"198\":1}}],[\"对于这种情况\",{\"1\":{\"1446\":1}}],[\"对于这句话的理解\",{\"1\":{\"1318\":1,\"1389\":1}}],[\"对于这六种数据淘汰策略的使用场景可以归纳为\",{\"1\":{\"827\":1}}],[\"对于这几个内存区域具体的大小\",{\"1\":{\"674\":1}}],[\"对于这个\",{\"1\":{\"1424\":1}}],[\"对于这个问题\",{\"1\":{\"1132\":1}}],[\"对于这个参数\",{\"1\":{\"951\":1}}],[\"对于这个题目的实现如下\",{\"1\":{\"297\":1}}],[\"对于这个题目\",{\"1\":{\"182\":1}}],[\"对于这个比较函数\",{\"1\":{\"173\":1}}],[\"对于这道题目\",{\"1\":{\"92\":1}}],[\"对于要排序的数组\",{\"1\":{\"172\":1}}],[\"对于递推公式\",{\"1\":{\"118\":1}}],[\"对于\",{\"1\":{\"118\":1,\"514\":1,\"545\":3,\"562\":1,\"571\":2,\"576\":1,\"586\":1,\"605\":1,\"706\":1,\"978\":1,\"981\":1,\"1024\":1,\"1179\":1,\"1352\":1,\"1402\":1,\"1463\":1,\"1464\":1,\"1553\":1,\"1586\":2,\"1602\":1,\"1607\":1}}],[\"对于前hmin​条数据\",{\"1\":{\"1170\":1}}],[\"对于前\",{\"1\":{\"118\":1}}],[\"对于广度优先搜索而言\",{\"1\":{\"92\":1}}],[\"对于每个\",{\"1\":{\"1534\":1}}],[\"对于每个boxes\",{\"1\":{\"1157\":1}}],[\"对于每个预测框根据类别置信度选取置信度较大的那个类别作为其预测标签\",{\"1\":{\"1157\":1}}],[\"对于每个序列而言\",{\"1\":{\"1137\":1}}],[\"对于每个房间\",{\"1\":{\"75\":1}}],[\"对于每个单元格\",{\"1\":{\"74\":1}}],[\"对于某个节点\",{\"1\":{\"52\":2}}],[\"对于某些计算问题而言\",{\"1\":{\"5\":1}}],[\"对于左闭右开区间\",{\"1\":{\"22\":1}}],[\"对于sum已经大于target的情况\",{\"1\":{\"10\":1}}],[\"对于刚开始的原始解法\",{\"1\":{\"10\":1}}],[\"可阻塞通知链的一种变体\",{\"1\":{\"1562\":1}}],[\"可阻塞通知链\",{\"1\":{\"1562\":1}}],[\"可信\",{\"1\":{\"1492\":1}}],[\"可重定位文件没有入口地址\",{\"1\":{\"1464\":1}}],[\"可重定位文件\",{\"1\":{\"1459\":1}}],[\"可重定位文件relocatable\",{\"1\":{\"1459\":1}}],[\"可执行文件executable\",{\"1\":{\"1459\":1}}],[\"可通过\",{\"1\":{\"1341\":1}}],[\"可通过使用\",{\"1\":{\"427\":1}}],[\"可把远程分支重命名\",{\"1\":{\"1253\":1}}],[\"可由上面两个文件生成\",{\"1\":{\"1179\":1}}],[\"可移植并且实时性很高\",{\"1\":{\"1151\":1}}],[\"可应用的场景包括活动识别\",{\"1\":{\"1131\":1}}],[\"可靠性\",{\"1\":{\"831\":1}}],[\"可视化软件\",{\"1\":{\"842\":1}}],[\"可视化工具\",{\"1\":{\"824\":1}}],[\"可视化安全感知\",{\"1\":{\"646\":1}}],[\"可用\",{\"1\":{\"760\":1}}],[\"可配\",{\"1\":{\"727\":4}}],[\"可分为公有云\",{\"1\":{\"638\":1}}],[\"可查看\",{\"1\":{\"621\":1}}],[\"可变的\",{\"1\":{\"514\":1}}],[\"可选的压缩工具有\",{\"1\":{\"1454\":1}}],[\"可选的扩展位\",{\"1\":{\"514\":1}}],[\"可选项有\",{\"1\":{\"379\":1}}],[\"可怜哦\",{\"1\":{\"478\":1}}],[\"可使用\",{\"1\":{\"427\":1}}],[\"可使这些物品的耗费的费用总\",{\"1\":{\"127\":1}}],[\"可读\",{\"1\":{\"361\":3}}],[\"可写\",{\"1\":{\"361\":4}}],[\"可能要分为几个维度\",{\"1\":{\"1389\":1}}],[\"可能也采用的是\",{\"1\":{\"670\":1}}],[\"可能和其他版本略有不同\",{\"1\":{\"664\":1}}],[\"可能需要\",{\"1\":{\"576\":1}}],[\"可能需要使用较为\",{\"1\":{\"9\":1}}],[\"可能由\",{\"1\":{\"559\":1}}],[\"可能是加班太多了没有脑子思考了\",{\"1\":{\"478\":1}}],[\"可能不是这个文件夹\",{\"1\":{\"336\":1}}],[\"可能就没有被存储在\",{\"1\":{\"256\":1}}],[\"可能还有空闲空间\",{\"1\":{\"208\":1}}],[\"可能会等待和下次数据一起发送\",{\"1\":{\"980\":1}}],[\"可能会出现跨\",{\"1\":{\"679\":1}}],[\"可能会不在\",{\"1\":{\"550\":1}}],[\"可能会被\",{\"1\":{\"550\":1}}],[\"可能会导致预测错误后代价较高\",{\"1\":{\"549\":1}}],[\"可能会缺少一些严谨性\",{\"1\":{\"198\":1}}],[\"可能会有些难理解\",{\"1\":{\"158\":1}}],[\"可能会有多个正确的顺序\",{\"1\":{\"86\":1}}],[\"可能会进入死循环\",{\"1\":{\"89\":1}}],[\"可参考下文\",{\"1\":{\"75\":1}}],[\"可以维护多个\",{\"1\":{\"1597\":1}}],[\"可以维护严格要求一致性的缓存\",{\"1\":{\"828\":1}}],[\"可以操作的类型\",{\"1\":{\"1593\":1}}],[\"可以安全地关闭计时器\",{\"1\":{\"1584\":1}}],[\"可以大幅度提升多\",{\"1\":{\"1584\":1}}],[\"可以大幅度降低基于栈的解释器的数据移动操作\",{\"1\":{\"687\":1}}],[\"可以见下面章节的描述\",{\"1\":{\"1518\":1}}],[\"可以确保某个中断处理程序不会抢占当前的代码\",{\"1\":{\"1517\":1}}],[\"可以确定对于一个编码集的调整策略\",{\"1\":{\"1170\":1}}],[\"可以发现\",{\"1\":{\"1469\":1}}],[\"可以来详细查看\",{\"1\":{\"1464\":1}}],[\"可以由\",{\"1\":{\"1459\":1}}],[\"可以简单理解为\",{\"1\":{\"1441\":1}}],[\"可以简单地在写完代码之后检测代码漏洞\",{\"1\":{\"646\":1}}],[\"可以简单地返回\",{\"1\":{\"420\":1}}],[\"可以赋值给变量\",{\"1\":{\"1383\":1}}],[\"可以作为服务端的基类\",{\"1\":{\"1304\":1}}],[\"可以跳过代码解析的部分\",{\"1\":{\"1291\":1}}],[\"可以切换语言查看\",{\"1\":{\"1239\":1}}],[\"可以自行命名\",{\"1\":{\"1236\":1}}],[\"可以观察到交叉熵的值是越来越小的\",{\"1\":{\"1212\":1}}],[\"可以观察逼真的\",{\"1\":{\"564\":1}}],[\"可以方便使用随机梯度下降\",{\"1\":{\"1185\":1}}],[\"可以类比于\",{\"1\":{\"1179\":1}}],[\"可以得到其新的编码值\",{\"1\":{\"1170\":1}}],[\"可以得到一个二进制串来表示根到某个节点的路径\",{\"1\":{\"1169\":1}}],[\"可以认为特征图的每个元素也是对应原始图片的一个小方块\",{\"1\":{\"1153\":1}}],[\"可以想到的解决思路之一是减少要分类的子区域\",{\"1\":{\"1153\":1}}],[\"可以进行下一步\",{\"1\":{\"1145\":1}}],[\"可以跨越该障碍\",{\"1\":{\"1131\":1}}],[\"可以实现在本地和远程服务器之间安全地传输文件\",{\"1\":{\"1453\":1}}],[\"可以实现厘米级的室内定位\",{\"1\":{\"1017\":1}}],[\"可以实例化对象\",{\"1\":{\"431\":1}}],[\"可以完成超级精确的视觉室内定位任务\",{\"1\":{\"1012\":1}}],[\"可以完美预测\",{\"1\":{\"559\":1}}],[\"可以完美预测指令\",{\"1\":{\"543\":1}}],[\"可以有多个\",{\"1\":{\"1439\":1,\"1601\":1}}],[\"可以有效快速地确定目标位置\",{\"1\":{\"1012\":1}}],[\"可以有更高效的组织方式\",{\"1\":{\"688\":1}}],[\"可以很轻松地获取到线程的\",{\"1\":{\"1279\":1}}],[\"可以很好地区分多径\",{\"1\":{\"1020\":1}}],[\"可以很好地抑制室内多径效应\",{\"1\":{\"1012\":1}}],[\"可以很方便的读取命令行参数和配置文件\",{\"1\":{\"383\":1}}],[\"可以很方便的求解一个数组的前缀和\",{\"1\":{\"146\":1}}],[\"可以很方便我们进行日志打印\",{\"1\":{\"320\":1}}],[\"可以优化bbox的检测效率\",{\"1\":{\"1012\":1}}],[\"可以到达厘米级\",{\"1\":{\"1012\":1}}],[\"可以利用这些信息对\",{\"1\":{\"981\":1}}],[\"可以重新打包它们\",{\"1\":{\"976\":1}}],[\"可以减少系统开销\",{\"1\":{\"956\":1}}],[\"可以减少数字的比特\",{\"1\":{\"589\":1}}],[\"可以定义\",{\"1\":{\"926\":1}}],[\"可以定义三维\",{\"1\":{\"120\":1}}],[\"可以动态代理去创建代理对象\",{\"1\":{\"878\":1}}],[\"可以更加快速\",{\"1\":{\"869\":1}}],[\"可以保存的最大数据限制是\",{\"1\":{\"825\":1}}],[\"可以保证公共父类仅被执行一次\",{\"1\":{\"424\":1}}],[\"可以同时连接两个表进行组合查询\",{\"1\":{\"807\":1}}],[\"可以同时读取和修改共享内存的数据\",{\"1\":{\"534\":1}}],[\"可以支持以下参数\",{\"1\":{\"763\":1}}],[\"可以配置多种类型的虚拟主机\",{\"1\":{\"760\":1}}],[\"可以配合\",{\"1\":{\"388\":1}}],[\"可以设置函数属性\",{\"1\":{\"1554\":1}}],[\"可以设置\",{\"1\":{\"729\":1}}],[\"可以做到以下几点\",{\"1\":{\"695\":1,\"1395\":1}}],[\"可以创建一个新的对象\",{\"1\":{\"674\":1}}],[\"可以对比full\",{\"1\":{\"1185\":1}}],[\"可以对图像中目标的数量进行估计\",{\"1\":{\"1149\":1}}],[\"可以对指令的操作数进行遍历\",{\"1\":{\"691\":1}}],[\"可以对这个\",{\"1\":{\"671\":1}}],[\"可以对固件进行集中管理\",{\"1\":{\"377\":1}}],[\"可以只编译一个类\",{\"1\":{\"661\":1}}],[\"可以指定\",{\"1\":{\"658\":1}}],[\"可以指示该预测器的预测不可靠\",{\"1\":{\"593\":1}}],[\"可以增加以下的\",{\"1\":{\"1232\":1}}],[\"可以增加\",{\"1\":{\"658\":1}}],[\"可以验证一下\",{\"1\":{\"658\":1}}],[\"可以将其理解为一个动作的名字\",{\"1\":{\"1440\":1}}],[\"可以将一个文件\",{\"1\":{\"1318\":1}}],[\"可以将学习到的一种数据形态转化到令一种\",{\"1\":{\"1133\":1}}],[\"可以将所有测量的\",{\"1\":{\"1024\":1}}],[\"可以将controlflowgraph\",{\"1\":{\"691\":1}}],[\"可以将\",{\"1\":{\"658\":1}}],[\"可以将上述代码套入求解\",{\"1\":{\"157\":1}}],[\"可以把越来越多的代码编译成本地代码\",{\"1\":{\"655\":1}}],[\"可以把它看成是一个普通的函数\",{\"1\":{\"422\":1}}],[\"可以学到以下几点\",{\"1\":{\"653\":1}}],[\"可以扫描丰富的应用\",{\"1\":{\"646\":1}}],[\"可以与裸金属服务器混合使用\",{\"1\":{\"643\":1}}],[\"可以预测\",{\"1\":{\"601\":1}}],[\"可以翻译为一种\",{\"1\":{\"592\":1}}],[\"可以翻译为虚拟页号和页内偏移量\",{\"1\":{\"260\":1}}],[\"可以提升很多的预测准确度\",{\"1\":{\"558\":1}}],[\"可以持续到\",{\"1\":{\"553\":1}}],[\"可以最小化\",{\"1\":{\"550\":1}}],[\"可以推迟到\",{\"1\":{\"543\":1}}],[\"可以接受适当降低覆盖率\",{\"1\":{\"543\":1}}],[\"可以缩短关键路径\",{\"1\":{\"543\":1}}],[\"可以无缝预测\",{\"1\":{\"542\":1}}],[\"可以打印出全部信息\",{\"1\":{\"691\":1}}],[\"可以打破真正的数据依赖来提高高端单处理器的性能\",{\"1\":{\"542\":1}}],[\"可以打开编号为\",{\"1\":{\"75\":1}}],[\"可以给定寄存器或者立即数进行移位\",{\"1\":{\"538\":1}}],[\"可以获取当前\",{\"1\":{\"530\":1}}],[\"可以广泛应用于各种需要使用\",{\"1\":{\"529\":1}}],[\"可以是多个硬件\",{\"1\":{\"1590\":1}}],[\"可以是\",{\"1\":{\"529\":1}}],[\"可以是一个寄存器或者立即数\",{\"1\":{\"514\":1}}],[\"可以是寄存器或者立即数\",{\"1\":{\"514\":1}}],[\"可以如下\",{\"1\":{\"692\":1}}],[\"可以如下例子\",{\"1\":{\"509\":1}}],[\"可以如下所示\",{\"1\":{\"149\":1}}],[\"可以\",{\"1\":{\"430\":1,\"728\":1}}],[\"可以结合排序\",{\"1\":{\"406\":1}}],[\"可以应用带有两个参数的函数来将一个可迭代的对象的项转化为单个的值\",{\"1\":{\"398\":1}}],[\"可以查看\",{\"1\":{\"391\":1}}],[\"可以存在第三个参数\",{\"1\":{\"390\":1}}],[\"可以解析出来\",{\"1\":{\"388\":1}}],[\"可以通过生成的变量\",{\"1\":{\"1426\":1}}],[\"可以通过一个人携带的手机来追踪他\",{\"1\":{\"1133\":1}}],[\"可以通过无线信号感知出人类活动的2d图形\",{\"1\":{\"1131\":1}}],[\"可以通过下述的例子来观察\",{\"1\":{\"425\":1}}],[\"可以通过\",{\"1\":{\"381\":1,\"876\":1,\"1298\":1,\"1383\":1,\"1474\":1}}],[\"可以用点分十进制表示\",{\"1\":{\"972\":1}}],[\"可以用的时候\",{\"1\":{\"761\":1}}],[\"可以用下图来加以概述\",{\"1\":{\"669\":1}}],[\"可以用弹性服务器的方式将\",{\"1\":{\"644\":1}}],[\"可以用如下的顺序正确使用虚环境\",{\"1\":{\"445\":1}}],[\"可以用来使能是否使用多个\",{\"1\":{\"1534\":1}}],[\"可以用来跳转目的地址等\",{\"1\":{\"691\":1}}],[\"可以用来索引\",{\"1\":{\"559\":1}}],[\"可以用来表示最近\",{\"1\":{\"559\":1}}],[\"可以用来获取这个文件的所有行\",{\"1\":{\"355\":1}}],[\"可以用来指定行号\",{\"1\":{\"354\":1}}],[\"可以用两个字来表示\",{\"1\":{\"198\":1}}],[\"可以避免不同的\",{\"1\":{\"1510\":1}}],[\"可以避免使用\",{\"1\":{\"1470\":1}}],[\"可以避免双下划线\",{\"1\":{\"351\":1}}],[\"可以避免错误\",{\"1\":{\"325\":1}}],[\"可以这样实现\",{\"1\":{\"348\":1}}],[\"可以这么操作\",{\"1\":{\"1424\":1}}],[\"可以这么实现\",{\"1\":{\"289\":1}}],[\"可以这么来写\",{\"1\":{\"285\":1}}],[\"可以产生\",{\"1\":{\"329\":1}}],[\"可以使请求分配到最少连接数的机器上\",{\"1\":{\"765\":1}}],[\"可以使得不产生制表的\",{\"1\":{\"329\":1}}],[\"可以使用管道\",{\"1\":{\"1454\":1}}],[\"可以使用tensorflow提供的\",{\"1\":{\"1185\":1}}],[\"可以使用sparse\",{\"1\":{\"1185\":1}}],[\"可以使用软件mathpix\",{\"1\":{\"1182\":1}}],[\"可以使用padding操作\",{\"1\":{\"1142\":1}}],[\"可以使用v\",{\"1\":{\"934\":1}}],[\"可以使用一个\",{\"1\":{\"933\":1}}],[\"可以使用的处理方法有\",{\"1\":{\"902\":1}}],[\"可以使用的命令如下\",{\"1\":{\"657\":1}}],[\"可以使用标记\",{\"1\":{\"373\":1}}],[\"可以使用两种方式\",{\"1\":{\"352\":1,\"547\":1}}],[\"可以使用如下的方式\",{\"1\":{\"1226\":1}}],[\"可以使用如下的方法\",{\"1\":{\"447\":1}}],[\"可以使用如下的逻辑来判断我们的函数是否存在\",{\"1\":{\"347\":1}}],[\"可以使用如下的配置\",{\"1\":{\"324\":1}}],[\"可以使用如下的措施\",{\"1\":{\"256\":1}}],[\"可以使用以下代码\",{\"1\":{\"293\":1}}],[\"可以使用冒泡排序的方法\",{\"1\":{\"182\":1}}],[\"可以使用前缀和来求解\",{\"1\":{\"160\":1}}],[\"可以使用\",{\"1\":{\"74\":1,\"285\":1,\"324\":1,\"341\":1,\"349\":1,\"378\":1,\"424\":1,\"427\":1,\"431\":1,\"436\":1,\"442\":1,\"664\":1,\"691\":1,\"741\":1,\"824\":1,\"961\":1,\"1240\":1,\"1241\":1,\"1249\":1,\"1453\":1}}],[\"可以使用二分法\",{\"1\":{\"35\":1}}],[\"可以加以区分便于使用\",{\"1\":{\"1517\":1}}],[\"可以加以注意\",{\"1\":{\"1231\":1}}],[\"可以加上try\",{\"1\":{\"285\":1}}],[\"可以加速或者并行这个比较的过程\",{\"1\":{\"196\":1}}],[\"可以不加锁地访问全局变量\",{\"1\":{\"282\":1}}],[\"可以考虑拆分出去\",{\"1\":{\"268\":1}}],[\"可以理解为sed的简化版本\",{\"1\":{\"751\":1}}],[\"可以理解为竞争对手\",{\"1\":{\"235\":1}}],[\"可以理解为同一层的当前选项和同一层的前一个选项\",{\"1\":{\"13\":1}}],[\"可以后续研究\",{\"1\":{\"225\":1}}],[\"可以映射到任意的\",{\"1\":{\"200\":1}}],[\"可以被避免的\",{\"1\":{\"548\":1}}],[\"可以被用来链接成可执行文件或者共享目标文件\",{\"1\":{\"1459\":1}}],[\"可以被用来处理内核的指令流水线中的性能优化\",{\"1\":{\"192\":1}}],[\"可以被用于分支预测失败的\",{\"1\":{\"548\":1}}],[\"可以被拆分成\",{\"1\":{\"138\":1}}],[\"可以归纳为访问局部性\",{\"1\":{\"192\":1}}],[\"可以根据\",{\"1\":{\"182\":1}}],[\"可以根据这个条件求解出背包的目标\",{\"1\":{\"124\":1}}],[\"可以直接使用\",{\"1\":{\"1446\":1}}],[\"可以直接使用源码\",{\"1\":{\"311\":1}}],[\"可以直接复制文件的路径使用\",{\"1\":{\"351\":1}}],[\"可以直接插入某个元素\",{\"1\":{\"175\":1}}],[\"可以直接套用迭代的中序遍历模板\",{\"1\":{\"64\":1}}],[\"可以慢慢理解\",{\"1\":{\"165\":1}}],[\"可以从几个\",{\"1\":{\"1326\":1}}],[\"可以从任意频带中选择一个相位作为参考相位并用于校准补偿其他频带上的相位平移误差\",{\"1\":{\"1024\":1}}],[\"可以从商用无线网卡中获得\",{\"1\":{\"1012\":1}}],[\"可以从其他\",{\"1\":{\"224\":1}}],[\"可以从\",{\"1\":{\"134\":1}}],[\"可以在命令行中使用\",{\"1\":{\"1459\":1}}],[\"可以在以下两种情况中应用\",{\"1\":{\"1459\":1}}],[\"可以在不同的目录层级定义\",{\"1\":{\"377\":1}}],[\"可以在\",{\"1\":{\"124\":1,\"1162\":1,\"1284\":1}}],[\"可以构造一个\",{\"1\":{\"124\":1}}],[\"可以表示选择的物品为前\",{\"1\":{\"120\":1}}],[\"可以装的最大价值是\",{\"1\":{\"118\":1}}],[\"可以写出如下代码\",{\"1\":{\"118\":1}}],[\"可以写出伪代码如下所示\",{\"1\":{\"23\":1}}],[\"可以包含两种情况\",{\"1\":{\"117\":1}}],[\"可以选择放或者不放\",{\"1\":{\"116\":1}}],[\"可以遍历每一个大礼包\",{\"1\":{\"102\":1}}],[\"可以分析到\",{\"1\":{\"1481\":1}}],[\"可以分别使用\",{\"1\":{\"664\":1}}],[\"可以分别如下\",{\"1\":{\"432\":1}}],[\"可以分情况讨论\",{\"1\":{\"479\":1}}],[\"可以分为\",{\"1\":{\"1544\":1}}],[\"可以分为有状态对象\",{\"1\":{\"876\":1}}],[\"可以分为函数定义和函数声明\",{\"1\":{\"691\":1}}],[\"可以分为两个场景\",{\"1\":{\"648\":1}}],[\"可以分为两个部分\",{\"1\":{\"260\":1}}],[\"可以分为两种\",{\"1\":{\"581\":1,\"592\":1}}],[\"可以分为两类\",{\"1\":{\"572\":1,\"1374\":1}}],[\"可以分为四种问题\",{\"1\":{\"23\":1}}],[\"可以分几种情况来判断哪些大礼包是我们不需要的\",{\"1\":{\"102\":1}}],[\"可以看成4个类别的预测概率值\",{\"1\":{\"1153\":1}}],[\"可以看做是一个32\",{\"1\":{\"982\":1}}],[\"可以看做分支预测的\",{\"1\":{\"551\":1}}],[\"可以看出\",{\"1\":{\"52\":1,\"59\":1,\"379\":1,\"432\":1,\"534\":1,\"1012\":3,\"1132\":1,\"1170\":1}}],[\"可以看到狗这个目标的中心落在左下角一个单元格内\",{\"1\":{\"1155\":1}}],[\"可以看到类直接是无法调用到\",{\"1\":{\"421\":1}}],[\"可以看到\",{\"1\":{\"11\":1,\"147\":1,\"173\":1,\"432\":1,\"502\":1,\"682\":2,\"1434\":1}}],[\"可以掌握一下\",{\"1\":{\"35\":1}}],[\"可以返回其左侧位置\",{\"1\":{\"27\":1}}],[\"可以基于以下原则\",{\"1\":{\"22\":1}}],[\"可以插入到\",{\"1\":{\"20\":1}}],[\"可以参考以下的方法\",{\"1\":{\"1580\":1}}],[\"可以参考官方文档\",{\"1\":{\"1145\":1}}],[\"可以参考这篇文章\",{\"1\":{\"986\":1}}],[\"可以参考这一篇博客\",{\"1\":{\"808\":1}}],[\"可以参考一下原题目的描述\",{\"1\":{\"92\":1}}],[\"可以参考如下\",{\"1\":{\"75\":1}}],[\"可以参考上文\",{\"1\":{\"57\":1}}],[\"可以参考比较\",{\"1\":{\"34\":1}}],[\"可以参考\",{\"1\":{\"13\":1,\"155\":1,\"329\":1,\"1605\":1}}],[\"因而减少指令条数可以导致\",{\"1\":{\"687\":1}}],[\"因为为了保证\",{\"1\":{\"1584\":1}}],[\"因为当某个\",{\"1\":{\"1584\":1}}],[\"因为涉及到中断\",{\"1\":{\"1520\":1}}],[\"因为该\",{\"1\":{\"1381\":1}}],[\"因为该标志位最大位数是\",{\"1\":{\"676\":1}}],[\"因为使用了\",{\"1\":{\"1353\":1}}],[\"因为git\",{\"1\":{\"1253\":1}}],[\"因为git会将master分支指针向前移动\",{\"1\":{\"1252\":1}}],[\"因为上述命令用之前版本的文件做了覆盖\",{\"1\":{\"1241\":1}}],[\"因为要计算所有训练数据的损失函数是非常耗时间的\",{\"1\":{\"1212\":1}}],[\"因为数据的维度信息可以根据提供的数据推导得出\",{\"1\":{\"1212\":1}}],[\"因为数据同步传送的数据量比一个请求应答的数据量要多得多\",{\"1\":{\"997\":1}}],[\"因为其对yolo的性能是影响很大的\",{\"1\":{\"1157\":1}}],[\"因为其长度为\",{\"1\":{\"479\":1}}],[\"因为大目标的时间比较长远\",{\"1\":{\"1033\":1}}],[\"因为大型公有云可以提供很多安全技术\",{\"1\":{\"637\":1}}],[\"因为不同的网络的\",{\"1\":{\"981\":1}}],[\"因为它带来了显而易见的性能提升\",{\"1\":{\"967\":1}}],[\"因为它含\",{\"1\":{\"120\":1}}],[\"因为多线程程序只要有一个线程奔溃\",{\"1\":{\"738\":1}}],[\"因为访存会改变这个地址对应数据的值\",{\"1\":{\"602\":1}}],[\"因为预测会被执行时的有效结果取代\",{\"1\":{\"565\":1}}],[\"因为预测是可以跨周期的\",{\"1\":{\"559\":1}}],[\"因为预测是被假定为一个正确的提示\",{\"1\":{\"243\":1}}],[\"因为指令是投机运行的\",{\"1\":{\"550\":1}}],[\"因为堆栈操作需要一定的时延\",{\"1\":{\"508\":1}}],[\"因为存储的时候按照从左到右的顺序存储\",{\"1\":{\"486\":1}}],[\"因为删除\",{\"1\":{\"479\":1}}],[\"因为调用链还涉及到很多非常复杂的过程\",{\"1\":{\"707\":1,\"1405\":1}}],[\"因为调用\",{\"1\":{\"430\":1}}],[\"因为这不利于代码的组织和命名空间的整洁\",{\"1\":{\"422\":1}}],[\"因为这些字段在\",{\"1\":{\"245\":1}}],[\"因为是在同一个路径下面的\",{\"1\":{\"1446\":1}}],[\"因为是\",{\"1\":{\"315\":1}}],[\"因为笔者现在还不确定这个使用方式是不是可以不指定给多进行迭代的参数\",{\"1\":{\"288\":1}}],[\"因为失效代价比较高\",{\"1\":{\"263\":1}}],[\"因为实现完整的\",{\"1\":{\"259\":1}}],[\"因为进程拥有自己的地址空间\",{\"1\":{\"738\":1}}],[\"因为进程启动的时候\",{\"1\":{\"258\":1}}],[\"因为进程的地址空间是隔离的\",{\"1\":{\"252\":1}}],[\"因为程序是可以知道\",{\"1\":{\"226\":1}}],[\"因为某种原因需要从\",{\"1\":{\"217\":1}}],[\"因为\",{\"1\":{\"138\":1,\"276\":1,\"279\":1,\"876\":1,\"950\":1,\"981\":1,\"1498\":1}}],[\"因为再往下就没有意义了\",{\"1\":{\"118\":1}}],[\"因为他们两个是同层\",{\"1\":{\"92\":1}}],[\"因为我们希望衡量预测生成方法\",{\"1\":{\"562\":1}}],[\"因为我们不需要递归\",{\"1\":{\"77\":1}}],[\"因为我们的\",{\"1\":{\"10\":1}}],[\"因发明\",{\"1\":{\"70\":1}}],[\"因此也就决定了它们的调用顺序\",{\"1\":{\"1551\":1}}],[\"因此cpu不能响应产生中断的事件\",{\"1\":{\"1516\":1}}],[\"因此置信度可以定义为pr\",{\"1\":{\"1155\":1}}],[\"因此人类活动就类似于目标一样的反射体\",{\"1\":{\"1134\":1}}],[\"因此本文着重于研究单阶段目标检测器\",{\"1\":{\"1021\":1}}],[\"因此本文提出了一种\",{\"1\":{\"580\":1}}],[\"因此出现了\",{\"1\":{\"982\":1}}],[\"因此没有了监视文件数量\",{\"1\":{\"954\":1}}],[\"因此在每一次修改代码的时候\",{\"1\":{\"658\":1}}],[\"因此它的访问可以跨越几个循环\",{\"1\":{\"556\":1}}],[\"因此属于位置无关码\",{\"1\":{\"530\":1}}],[\"因此需要把这些寄存器列举出来\",{\"1\":{\"505\":1}}],[\"因此这种遍历是可以达到前序遍历的效果的\",{\"1\":{\"486\":1}}],[\"因此该寄存器也被称为页目录基地址寄存器\",{\"1\":{\"252\":1}}],[\"因此可以使用\",{\"1\":{\"153\":1}}],[\"因此我们可以在方法里面调用类的属性\",{\"1\":{\"421\":1}}],[\"因此我们可以根据层级来确定遍历顺序\",{\"1\":{\"61\":1}}],[\"因此我们使用了时空卷积技术作为student模型的基础模块\",{\"1\":{\"1137\":1}}],[\"因此我们使用\",{\"1\":{\"153\":1}}],[\"因此答案是\",{\"1\":{\"120\":1}}],[\"因此\",{\"1\":{\"86\":2,\"236\":1,\"280\":1,\"436\":1,\"553\":2,\"562\":1,\"603\":1,\"738\":1,\"954\":1,\"981\":1,\"1134\":1,\"1170\":1,\"1521\":1,\"1526\":1}}],[\"因此空间复杂度等价于二叉树的高度\",{\"1\":{\"56\":1}}],[\"因此使用\",{\"1\":{\"20\":1}}],[\"因此如何达到这个限制是本题目的难点\",{\"1\":{\"11\":1}}],[\"循环来检验命令输出\",{\"1\":{\"1231\":1}}],[\"循环出来的元素必须绑定\",{\"1\":{\"944\":1}}],[\"循环依赖的三种情况\",{\"1\":{\"881\":1}}],[\"循环依赖与\",{\"0\":{\"881\":1}}],[\"循环赋值初始化\",{\"1\":{\"454\":1}}],[\"循环\",{\"1\":{\"153\":1,\"154\":1,\"517\":1,\"687\":2}}],[\"循环的位置变了\",{\"1\":{\"130\":1}}],[\"循环的遍历细节\",{\"1\":{\"118\":1}}],[\"循环的遍历\",{\"1\":{\"10\":1}}],[\"循环倒着来\",{\"1\":{\"122\":1,\"124\":1}}],[\"循环保证了同一层元素的遍历\",{\"1\":{\"59\":1}}],[\"循环逐一进行遍历的时候\",{\"1\":{\"59\":1}}],[\"循环逐一进行遍历\",{\"1\":{\"59\":1}}],[\"循环中的\",{\"1\":{\"1301\":1}}],[\"循环中遍历物品\",{\"1\":{\"118\":1}}],[\"循环中把\",{\"1\":{\"47\":1,\"59\":1}}],[\"循环中做了文章\",{\"1\":{\"10\":1}}],[\"循环内遍历\",{\"1\":{\"47\":1}}],[\"循环条件使用\",{\"1\":{\"22\":1}}],[\"其主题的配置文件在\",{\"1\":{\"1635\":1}}],[\"其主要的步骤可以分为\",{\"1\":{\"1477\":1}}],[\"其主要思想在于\",{\"1\":{\"1169\":1}}],[\"其主要思路在于使用区域建议\",{\"1\":{\"1021\":1}}],[\"其主要存在两个函数可以供我们使用\",{\"1\":{\"301\":1}}],[\"其主要不同在于\",{\"1\":{\"130\":1}}],[\"其调用的流程图如下\",{\"1\":{\"1606\":1}}],[\"其参数传入\",{\"1\":{\"1602\":1}}],[\"其包含的信息有\",{\"1\":{\"1597\":1}}],[\"其隶属的结构如下\",{\"1\":{\"1593\":1}}],[\"其源码定义如下\",{\"1\":{\"1576\":1}}],[\"其初始化过程如下\",{\"1\":{\"1565\":1}}],[\"其初始化就类似于这样\",{\"1\":{\"88\":1}}],[\"其步骤可以分解为以下的\",{\"1\":{\"1545\":1}}],[\"其步骤如下\",{\"1\":{\"1424\":1}}],[\"其驱动的对象是\",{\"1\":{\"1534\":1}}],[\"其负责的功能有\",{\"1\":{\"1532\":1}}],[\"其具体做法是\",{\"1\":{\"1528\":1}}],[\"其可擦除的次数一般在\",{\"1\":{\"1501\":1}}],[\"其可以支持一个写操作和多个读操作同时进行\",{\"1\":{\"1583\":1}}],[\"其可以拷贝任何类型\",{\"1\":{\"1470\":1}}],[\"其可以分别适用不同大小\",{\"1\":{\"1156\":1}}],[\"其可以分为两种情况\",{\"1\":{\"102\":1}}],[\"其可以反映丰富的室内空间信息\",{\"1\":{\"1012\":1}}],[\"其起始地址就是\",{\"1\":{\"1487\":1}}],[\"其启动的地址为\",{\"1\":{\"1481\":1}}],[\"其输出可以参考\",{\"1\":{\"1445\":1}}],[\"其输出如下所示\",{\"1\":{\"1429\":1}}],[\"其文件树结构如下\",{\"1\":{\"1445\":1}}],[\"其和编程语言中的变量概念类似\",{\"1\":{\"1441\":1}}],[\"其冒号后什么也没有\",{\"1\":{\"1440\":1}}],[\"其生成的命令就是第\",{\"1\":{\"1440\":1}}],[\"其更加稳妥的用法如下\",{\"1\":{\"1434\":1}}],[\"其内容是各个段在该文件中的偏移位置以及段的属性\",{\"1\":{\"1460\":1}}],[\"其内容如下\",{\"1\":{\"1424\":1}}],[\"其内嵌了一条\",{\"1\":{\"502\":1}}],[\"其把对象从\",{\"1\":{\"1380\":1}}],[\"其赋值的语句如下\",{\"1\":{\"1345\":1}}],[\"其集成了\",{\"1\":{\"1320\":1}}],[\"其重要性自然不言而喻\",{\"1\":{\"1307\":1}}],[\"其做了以下事情\",{\"1\":{\"1297\":1}}],[\"其只需要进行一次拷贝\",{\"1\":{\"1292\":1}}],[\"其只占\",{\"1\":{\"688\":1}}],[\"其流程大概可以总结为以下步骤\",{\"1\":{\"1239\":1}}],[\"其值为\",{\"1\":{\"1418\":1}}],[\"其值越大\",{\"1\":{\"1171\":1}}],[\"其值等于一个整数自乘的积\",{\"1\":{\"132\":1}}],[\"其值等于另一个整数的平方\",{\"1\":{\"132\":1}}],[\"其触发操作取决于当前插入路径大于完全二叉树的高度\",{\"1\":{\"1171\":1}}],[\"其复杂度为o\",{\"1\":{\"1171\":1}}],[\"其意义在于\",{\"1\":{\"1170\":1}}],[\"其意思就是说对应了内存中的地址信息\",{\"1\":{\"196\":1}}],[\"其ope编码值与自身相等\",{\"1\":{\"1170\":1}}],[\"其ope编码对应于其中序遍历的序号\",{\"1\":{\"1170\":1}}],[\"其ope编码与其序号相等\",{\"1\":{\"1170\":1}}],[\"其ope编码的值已表示在图4的完全二叉树上\",{\"1\":{\"1170\":1}}],[\"其编码结果不同\",{\"1\":{\"1171\":1}}],[\"其编码形式和图2差生了巨大的变化\",{\"1\":{\"1170\":1}}],[\"其编码算法是\",{\"1\":{\"1169\":1}}],[\"其时间复杂度可以接受\",{\"1\":{\"1170\":1}}],[\"其时间复杂度为o\",{\"1\":{\"1171\":1}}],[\"其时间复杂度为\",{\"1\":{\"56\":1,\"153\":1}}],[\"其path的值会改变\",{\"1\":{\"1169\":1}}],[\"其某个节点可能移动位置\",{\"1\":{\"1169\":1}}],[\"其操作的时间复杂度都是对数级别o\",{\"1\":{\"1171\":1}}],[\"其操作过程是对于平衡二叉搜索树插入新节点后\",{\"1\":{\"1169\":1}}],[\"其操作是解码指令并访问\",{\"1\":{\"245\":1}}],[\"其操作是发送出去\",{\"1\":{\"245\":1}}],[\"其导致的结果就是ope编码变长过快\",{\"1\":{\"1169\":1}}],[\"其高度一般都接近于期望高度\",{\"1\":{\"1169\":1}}],[\"其高度期望是树高度\",{\"1\":{\"1169\":1}}],[\"其构造的方法为\",{\"1\":{\"1169\":1}}],[\"其构造方法是\",{\"1\":{\"1169\":1}}],[\"其构成可以从注释中获得\",{\"1\":{\"676\":1}}],[\"其采用了另外一个不同的处理思路\",{\"1\":{\"1157\":1}}],[\"其采用了selective\",{\"1\":{\"1153\":1}}],[\"其大小都是\",{\"1\":{\"1157\":1}}],[\"其误差项就是只有置信度\",{\"1\":{\"1156\":1}}],[\"其预训练的分类模型采用图中前20个卷积层\",{\"1\":{\"1156\":1}}],[\"其预测延迟可能会更高\",{\"1\":{\"559\":1}}],[\"其预测精度会提高\",{\"1\":{\"558\":1}}],[\"其仅使用9个卷积层\",{\"1\":{\"1156\":1}}],[\"其仅仅使用一个cnn网络直接预测不同目标的类别与位置\",{\"1\":{\"1151\":1}}],[\"其共有20个类别\",{\"1\":{\"1155\":1}}],[\"其速度更快\",{\"1\":{\"1155\":1}}],[\"其思路是\",{\"1\":{\"1153\":1}}],[\"其思想可以被借鉴用于提高网络的检测速度等\",{\"1\":{\"1012\":1}}],[\"其思想在于把与业务无关的\",{\"1\":{\"878\":1}}],[\"其性能差于后来的ssd算法的\",{\"1\":{\"1151\":1}}],[\"其全称是you\",{\"1\":{\"1151\":1}}],[\"其全称为\",{\"1\":{\"670\":1}}],[\"其分辨率是几十厘米左右\",{\"1\":{\"1134\":1}}],[\"其特点是模型训练参数较少\",{\"1\":{\"1151\":1}}],[\"其特点是每种物品仅有一件\",{\"1\":{\"116\":1}}],[\"其特点在于既使用fmcw信号\",{\"1\":{\"1134\":1}}],[\"其工作原理是通过分析反射的无线信号来感知人体\",{\"1\":{\"1133\":1}}],[\"其工作方式如下\",{\"1\":{\"590\":1}}],[\"其艰不易\",{\"1\":{\"1060\":1}}],[\"其均值为\",{\"1\":{\"1024\":1}}],[\"其会产生一个相位的偏移\",{\"1\":{\"1024\":1}}],[\"其描述多路径的信道特征\",{\"1\":{\"1020\":1}}],[\"其描述的主题对象一直是\",{\"1\":{\"552\":1}}],[\"其定位精度已经从米级到达了本文的厘米级\",{\"1\":{\"1012\":1}}],[\"其定义如下\",{\"1\":{\"543\":1,\"706\":1,\"1403\":1,\"1565\":1,\"1566\":1,\"1572\":1}}],[\"其余分片只有\",{\"1\":{\"980\":1}}],[\"其余用户位\",{\"1\":{\"741\":1}}],[\"其关系应该是这样的\",{\"1\":{\"1510\":1}}],[\"其关系可以表示为\",{\"1\":{\"979\":1}}],[\"其关键点在于\",{\"1\":{\"91\":1}}],[\"其目的是提升加载\",{\"1\":{\"965\":1,\"966\":1}}],[\"其目的是为了限制错误预测的代价\",{\"1\":{\"549\":1}}],[\"其相比于mope方法的不同在于\",{\"1\":{\"1170\":1}}],[\"其相关的设计模式为代理模式\",{\"1\":{\"878\":1}}],[\"其相对于上述代码的不同在于\",{\"1\":{\"60\":1}}],[\"其设计理念在于分层架构思想\",{\"1\":{\"869\":1}}],[\"其提出是为了解决企业应用开发的复杂性而创建的\",{\"1\":{\"869\":1}}],[\"其返回值的含义是\",{\"1\":{\"738\":1}}],[\"其网络在一个网段\",{\"1\":{\"730\":1}}],[\"其与源代码的一些对应关系\",{\"1\":{\"692\":1}}],[\"其与上下文有关是如何体现的\",{\"1\":{\"544\":1}}],[\"其是一个统一的框架\",{\"1\":{\"1155\":1}}],[\"其是可读的\",{\"1\":{\"692\":1}}],[\"其是由\",{\"1\":{\"128\":1}}],[\"其经过\",{\"1\":{\"687\":1}}],[\"其经过的转化过程如下\",{\"1\":{\"657\":1}}],[\"其在内存中的布局大小如下图所示\",{\"1\":{\"674\":1}}],[\"其针对移动设备做了一些定制化处理\",{\"1\":{\"669\":1}}],[\"其路径如下\",{\"1\":{\"657\":1}}],[\"其优先级是没有变化的\",{\"1\":{\"1551\":1}}],[\"其优势在于\",{\"1\":{\"655\":1}}],[\"其优点是实现简单\",{\"1\":{\"687\":1}}],[\"其优点可以如下所示\",{\"1\":{\"258\":1}}],[\"其优点在于\",{\"1\":{\"100\":1,\"1166\":1}}],[\"其安全技术本身匮乏\",{\"1\":{\"637\":1}}],[\"其字段的一部分是与\",{\"1\":{\"602\":1}}],[\"其保证了当整个组合预测器产生了较高的总体误预测率时\",{\"1\":{\"592\":1}}],[\"其前置条件是什么\",{\"1\":{\"590\":1}}],[\"其灵感来源于分支预测\",{\"1\":{\"586\":1}}],[\"其被\",{\"1\":{\"559\":1}}],[\"其方案的核心思想是使用一些表\",{\"1\":{\"559\":1}}],[\"其结构体定义如下\",{\"1\":{\"1593\":1}}],[\"其结构如下\",{\"1\":{\"584\":1}}],[\"其结构是\",{\"1\":{\"555\":1}}],[\"其结果存储在了临时寄存器\",{\"1\":{\"245\":1}}],[\"其依赖于另一个预测器在预测阶段去预测全局的投机值\",{\"1\":{\"545\":1}}],[\"其通过应用一个\",{\"1\":{\"545\":1}}],[\"其利用了长期全局\",{\"1\":{\"543\":1}}],[\"其允许预测跨越几个周期\",{\"1\":{\"542\":1}}],[\"其次还在语义上支持了\",{\"1\":{\"1460\":1}}],[\"其次\",{\"1\":{\"542\":1,\"1470\":1}}],[\"其次就是利用\",{\"1\":{\"508\":1}}],[\"其含义为将\",{\"1\":{\"522\":1}}],[\"其含义是将节点\",{\"1\":{\"1572\":1}}],[\"其含义是可以把数据直接传给其他内核的\",{\"1\":{\"225\":1}}],[\"其含义是计算机科学领域的应用程序在访问内存的时候\",{\"1\":{\"192\":1}}],[\"其含义是\",{\"1\":{\"153\":1}}],[\"其语法如下所示\",{\"1\":{\"502\":1}}],[\"其必须为一个字符串\",{\"1\":{\"390\":1}}],[\"其解析如下所示\",{\"1\":{\"388\":1}}],[\"其解法如下\",{\"1\":{\"165\":1}}],[\"其之前的代码属于预处理\",{\"1\":{\"378\":1}}],[\"其作用是在程序中加入\",{\"1\":{\"1553\":1}}],[\"其作用是将\",{\"1\":{\"993\":1}}],[\"其作用类似于\",{\"1\":{\"1421\":1}}],[\"其作用域为其所在的目录和子目录\",{\"1\":{\"377\":1}}],[\"其作用相当于标记了\",{\"1\":{\"11\":1}}],[\"其原理简单并且定位精准\",{\"1\":{\"1012\":1}}],[\"其原理类似于路由器的工作方式\",{\"1\":{\"728\":1}}],[\"其原理是利用合理的服务器请求来占用过多的服务资源\",{\"1\":{\"988\":1}}],[\"其原理是基于\",{\"1\":{\"724\":1}}],[\"其原理是通过\",{\"1\":{\"702\":1}}],[\"其原理可以大概解释如下\",{\"1\":{\"360\":1}}],[\"其原因是\",{\"1\":{\"670\":1}}],[\"其原因有\",{\"1\":{\"253\":1}}],[\"其用法如下\",{\"1\":{\"331\":1,\"1428\":1,\"1434\":1}}],[\"其基本的架构可以简单概括为下图\",{\"1\":{\"1589\":1}}],[\"其基本的使用方法如下\",{\"1\":{\"320\":1}}],[\"其基本原理就是采用不同大小和窗口在整张图片上以一定的步长进行滑动\",{\"1\":{\"1153\":1}}],[\"其基本属性是值预测器\",{\"1\":{\"543\":1}}],[\"其基础的背包问题一般由两个模型演变而来\",{\"1\":{\"112\":1}}],[\"其核心的代码是调用\",{\"1\":{\"1365\":1}}],[\"其核心代码为第\",{\"1\":{\"289\":1}}],[\"其核心思想为\",{\"1\":{\"221\":1}}],[\"其强调计算机确实能够在同一时刻做许多不同的事情\",{\"1\":{\"281\":1}}],[\"其需要使用多进程进行运行\",{\"1\":{\"288\":1}}],[\"其需要\",{\"1\":{\"262\":1}}],[\"其需要在地址空间中表示\",{\"1\":{\"261\":1}}],[\"其比\",{\"1\":{\"262\":1}}],[\"其计算方法就是\",{\"1\":{\"261\":1}}],[\"其计算方式是根据\",{\"1\":{\"196\":1}}],[\"其最大的大小限制应该是辅存的大小\",{\"1\":{\"253\":1}}],[\"其潜在的惩罚增加\",{\"1\":{\"241\":1}}],[\"其代价是内存系统必须提供五倍的带宽\",{\"1\":{\"236\":1}}],[\"其代码如下\",{\"1\":{\"57\":1,\"91\":1,\"134\":1,\"1344\":1}}],[\"其缺点是会产生频繁的更新动作\",{\"1\":{\"222\":1}}],[\"其缺点在于\",{\"1\":{\"100\":1}}],[\"其示意图如下所示\",{\"1\":{\"201\":1}}],[\"其本质上就是调用\",{\"1\":{\"1297\":1}}],[\"其本质上就是把递归的结果收集\",{\"1\":{\"42\":1}}],[\"其本质原理是\",{\"1\":{\"729\":1}}],[\"其本质原理是虚拟机的网卡连接到宿主机的\",{\"1\":{\"728\":1}}],[\"其本质就是一个\",{\"1\":{\"1553\":1}}],[\"其本质就是安装\",{\"1\":{\"274\":1}}],[\"其本质就是试图在存储层次结构的更高层次找到想要的数据\",{\"1\":{\"193\":1}}],[\"其本质是程序在执行过程中中需要访问的某一页数据或者代码不在内存中\",{\"1\":{\"259\":1}}],[\"其本质还是可以理解为一个\",{\"1\":{\"253\":1}}],[\"其命中率也更高\",{\"1\":{\"192\":1}}],[\"其他进程无法在该cpu上运行\",{\"1\":{\"1585\":1}}],[\"其他进程仍然可以访问旧的副本\",{\"1\":{\"1524\":1}}],[\"其他所有的对象都不会存在于\",{\"1\":{\"1386\":1}}],[\"其他选择\",{\"0\":{\"1354\":1}}],[\"其他对象的空间大小\",{\"1\":{\"1341\":1}}],[\"其他线程\",{\"1\":{\"1293\":1}}],[\"其他线程都在等待状态\",{\"1\":{\"276\":1,\"279\":1}}],[\"其他都和服务端的配置一致\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"其他位全补充0\",{\"1\":{\"1169\":1}}],[\"其他研究例如复旦大学王正飞等提出的数值型保序加密方法\",{\"1\":{\"1168\":1}}],[\"其他时候使用\",{\"1\":{\"997\":1}}],[\"其他字段含义如下\",{\"1\":{\"978\":1}}],[\"其他虚拟化在后面讨论\",{\"1\":{\"728\":1}}],[\"其他主机要访问虚拟机\",{\"1\":{\"728\":1}}],[\"其他主机\",{\"1\":{\"727\":2}}],[\"其他更多的信心可以参考手册\",{\"1\":{\"692\":1}}],[\"其他一些\",{\"1\":{\"667\":1}}],[\"其他情况下是在\",{\"1\":{\"1333\":1}}],[\"其他情况算法\",{\"1\":{\"985\":1}}],[\"其他情况\",{\"1\":{\"587\":1}}],[\"其他的可以参考tensorflow随机数生成函数\",{\"1\":{\"1212\":1}}],[\"其他的都是过程参数\",{\"1\":{\"1162\":1}}],[\"其他的\",{\"1\":{\"224\":1}}],[\"其他的状态下数据都是\",{\"1\":{\"224\":1}}],[\"其他的地方如果有这份数据的赋值\",{\"1\":{\"222\":1}}],[\"其他的相关知识\",{\"1\":{\"190\":1}}],[\"其他\",{\"1\":{\"221\":1,\"739\":1}}],[\"其他满足题意但较小的子集包括\",{\"1\":{\"120\":1}}],[\"其出现顺序无关紧要\",{\"1\":{\"168\":1}}],[\"其递推公式\",{\"1\":{\"128\":1}}],[\"其价值和正好为背包容量的一半\",{\"1\":{\"122\":1}}],[\"其状态转移方程如下所示\",{\"1\":{\"117\":1}}],[\"其状态上限为\",{\"1\":{\"91\":1}}],[\"其对应的输出如下\",{\"1\":{\"1424\":1}}],[\"其对应的输出如下所示\",{\"1\":{\"431\":1}}],[\"其对应的输出是\",{\"1\":{\"427\":1}}],[\"其对应的命令如下\",{\"1\":{\"274\":1}}],[\"其对应的测试代码如下\",{\"1\":{\"90\":1}}],[\"其对应的测试用例如下\",{\"1\":{\"81\":1}}],[\"其对应的代码如下\",{\"1\":{\"52\":1}}],[\"其\",{\"1\":{\"75\":1,\"77\":1,\"125\":1,\"460\":1,\"550\":1,\"673\":1,\"1552\":1}}],[\"其过程简要来说是对每一个可能的分支路径深入到不能再深入为止\",{\"1\":{\"70\":1}}],[\"其空间复杂度为\",{\"1\":{\"56\":1}}],[\"其使用c和cuda\",{\"1\":{\"1160\":1}}],[\"其使用端口号\",{\"1\":{\"997\":1}}],[\"其使用的是宿主机自带的\",{\"1\":{\"730\":1}}],[\"其使用的方式类似于\",{\"1\":{\"387\":1}}],[\"其使用\",{\"1\":{\"54\":1}}],[\"其使用方式如下\",{\"1\":{\"20\":1}}],[\"其兄弟节点的左右节点值要与自己的左右节点值对应相等\",{\"1\":{\"52\":1}}],[\"其峰值元素为\",{\"1\":{\"33\":2}}],[\"其实还是需要弄清楚为什么会产生\",{\"1\":{\"1389\":1}}],[\"其实还是调用到了第一个函数\",{\"1\":{\"1366\":1}}],[\"其实简单太多了\",{\"1\":{\"1357\":1}}],[\"其实就只是创建一个线程\",{\"1\":{\"1296\":1}}],[\"其实就相当于\",{\"1\":{\"419\":1}}],[\"其实这时候yolo算法就只能选择其中一个来训练\",{\"1\":{\"1156\":1}}],[\"其实这是一个混合编程的问题\",{\"1\":{\"441\":1}}],[\"其实\",{\"1\":{\"869\":1}}],[\"其实不尽然\",{\"1\":{\"695\":1,\"1395\":1}}],[\"其实没有特别大的关联\",{\"1\":{\"688\":1}}],[\"其实和父类没有实质性的关联\",{\"1\":{\"427\":1}}],[\"其实我们只要了解到\",{\"1\":{\"212\":1}}],[\"其实我们初始化为\",{\"1\":{\"88\":1}}],[\"其实很简单\",{\"1\":{\"205\":1}}],[\"其实在实际的\",{\"1\":{\"198\":1}}],[\"其实是等价的\",{\"1\":{\"160\":1}}],[\"其实是依然进入了下一层递归\",{\"1\":{\"10\":1}}],[\"其实际的区间和为\",{\"1\":{\"147\":1}}],[\"其实本质来说\",{\"1\":{\"79\":1}}],[\"其实现相比于传统的染色算法更加复杂一些\",{\"1\":{\"1386\":1}}],[\"其实现的原理在于将不同时间点观测到的人类的活动汇聚于一个时间帧上面\",{\"1\":{\"1131\":1}}],[\"其实现代码如下\",{\"1\":{\"495\":1}}],[\"其实现方式为循环双向链表\",{\"1\":{\"460\":1}}],[\"其实现方式如下\",{\"1\":{\"49\":1}}],[\"其实现如下\",{\"1\":{\"43\":1,\"1287\":2,\"1523\":1}}],[\"其实如果已经知道下一层的sum会大于target\",{\"1\":{\"10\":1}}],[\"其中每个文件夹的名称都类似于\",{\"1\":{\"1611\":1}}],[\"其中涉及到一些寄存器地址\",{\"1\":{\"1481\":1}}],[\"其中需要注意的是\",{\"1\":{\"1462\":1}}],[\"其中主要保存的就是未初始化的全局变量和局部静态变量\",{\"1\":{\"1460\":1}}],[\"其中会使用一些技术\",{\"1\":{\"1389\":1}}],[\"其中包括虚拟地址相关的信息\",{\"1\":{\"1340\":1}}],[\"其中包含存放\",{\"1\":{\"1240\":1}}],[\"其中包含所有的\",{\"1\":{\"701\":1}}],[\"其中包含代码\",{\"1\":{\"251\":1}}],[\"其中又分为\",{\"1\":{\"1309\":1}}],[\"其中以\",{\"1\":{\"1275\":1}}],[\"其中几个\",{\"1\":{\"1239\":1}}],[\"其中几个需要着重理解注意\",{\"1\":{\"820\":1}}],[\"其中序遍历\",{\"1\":{\"1170\":1}}],[\"其中increment的值可以构成完全二叉树\",{\"1\":{\"1170\":1}}],[\"其中tiny\",{\"1\":{\"1162\":1}}],[\"其中类别名称为人名\",{\"1\":{\"1162\":1}}],[\"其中1\",{\"1\":{\"1159\":1}}],[\"其中x1​\",{\"1\":{\"1159\":1}}],[\"其中前4个表征边界框的大小与位置\",{\"1\":{\"1155\":1}}],[\"其中存放着各种对象\",{\"1\":{\"871\":1}}],[\"其中存储需要写入数据的内存地址\",{\"1\":{\"534\":1}}],[\"其中存储\",{\"1\":{\"534\":1}}],[\"其中局部标识符存在两种分配方式\",{\"1\":{\"692\":1}}],[\"其中有两个关键的数据结构\",{\"1\":{\"1338\":1}}],[\"其中有多条指令\",{\"1\":{\"691\":1}}],[\"其中有个题解非常形象\",{\"1\":{\"155\":1}}],[\"其中最重要的是子网\",{\"1\":{\"640\":1}}],[\"其中最容易理解的写法为\",{\"1\":{\"88\":1}}],[\"其中的shape属性可以不指定\",{\"1\":{\"1212\":1}}],[\"其中的内容为<\",{\"1\":{\"1159\":1}}],[\"其中的\",{\"1\":{\"502\":1,\"529\":1,\"545\":1,\"738\":1}}],[\"其中逻辑比较绕\",{\"1\":{\"289\":1}}],[\"其中块地址用于查找该块在\",{\"1\":{\"198\":1}}],[\"其中太平洋在矩阵的左边和上边环绕\",{\"1\":{\"78\":1}}],[\"其中吃一堆香蕉的时间可以分情况计算\",{\"1\":{\"34\":1}}],[\"其中\",{\"1\":{\"6\":1,\"22\":1,\"75\":1,\"86\":1,\"126\":1,\"173\":1,\"195\":1,\"205\":1,\"261\":1,\"304\":1,\"502\":1,\"529\":1,\"557\":1,\"559\":1,\"949\":1,\"978\":1,\"982\":1,\"1020\":2,\"1155\":1,\"1275\":1,\"1295\":1,\"1307\":2,\"1309\":1,\"1320\":1,\"1340\":1,\"1445\":1,\"1521\":1,\"1522\":1,\"1524\":2,\"1529\":1,\"1552\":1,\"1563\":1}}],[\"与其关联才可以发挥作用\",{\"1\":{\"1590\":1}}],[\"与其他人共享serverfix分支\",{\"1\":{\"1253\":1}}],[\"与之对立的就是\",{\"1\":{\"1545\":1}}],[\"与之对应的\",{\"1\":{\"655\":1}}],[\"与该缓冲区关联的\",{\"1\":{\"1341\":2}}],[\"与binder进行交互\",{\"1\":{\"1300\":1}}],[\"与服务器同步\",{\"1\":{\"1253\":1}}],[\"与上段所述方法其区别就是先使用nms\",{\"1\":{\"1157\":1}}],[\"与上述题目只有一点不同\",{\"1\":{\"11\":1}}],[\"与代码打交道\",{\"1\":{\"1041\":1}}],[\"与主存保持一致性\",{\"1\":{\"602\":1}}],[\"与主存保持一致性来实现\",{\"1\":{\"602\":1}}],[\"与预测器同时查找\",{\"1\":{\"593\":1}}],[\"与此同时\",{\"1\":{\"575\":1,\"1253\":1}}],[\"与错误预测的数量大致成正比\",{\"1\":{\"549\":1}}],[\"与两级预测器\",{\"1\":{\"543\":1}}],[\"与函数参数化使用\",{\"1\":{\"382\":1}}],[\"与并发的区别在于\",{\"1\":{\"281\":1}}],[\"与二叉树的高度有关\",{\"1\":{\"56\":1}}],[\"与\",{\"0\":{\"432\":1},\"1\":{\"10\":1,\"151\":1,\"432\":1,\"559\":1,\"576\":1,\"687\":1,\"690\":1,\"993\":1,\"1012\":1,\"1599\":1}}],[\"与电话按键相同\",{\"1\":{\"8\":1}}],[\"即当\",{\"1\":{\"1597\":1}}],[\"即当前进程是否已经创建有一个\",{\"1\":{\"1366\":1}}],[\"即没有正在运行或等待运行的进程\",{\"1\":{\"1585\":1}}],[\"即进入了\",{\"1\":{\"1584\":1}}],[\"即回调函数\",{\"1\":{\"1578\":1}}],[\"即初始化内核的各个子系统\",{\"1\":{\"1556\":1}}],[\"即先调用\",{\"1\":{\"1551\":1}}],[\"即先从左往右\",{\"1\":{\"61\":1}}],[\"即周期模式和单触发模式\",{\"1\":{\"1541\":1}}],[\"即需要等待所有正在访问旧副本的进程结束后再进行新副本的更新\",{\"1\":{\"1526\":1}}],[\"即需要停止定时器\",{\"1\":{\"1521\":1}}],[\"即等待所有正在使用旧副本的进程完成访问后\",{\"1\":{\"1524\":1}}],[\"即十进制的\",{\"1\":{\"1463\":1}}],[\"即对这个段的所有操作都当作非法处理\",{\"1\":{\"1460\":1}}],[\"即任意的\",{\"1\":{\"1439\":1}}],[\"即成功\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"即特定的\",{\"1\":{\"1240\":1}}],[\"即不包含目标\",{\"1\":{\"1155\":1}}],[\"即不允许环绕\",{\"1\":{\"74\":1}}],[\"即便是在最成熟的计算机视觉解决方案中\",{\"1\":{\"1131\":1}}],[\"即地址解析协议\",{\"1\":{\"993\":1}}],[\"即为\",{\"1\":{\"844\":1}}],[\"即平衡二叉树\",{\"1\":{\"812\":1}}],[\"即最少连接数策略\",{\"1\":{\"765\":1}}],[\"即访问不到\",{\"1\":{\"763\":1}}],[\"即高带宽\",{\"1\":{\"646\":1}}],[\"即指令先前的出现和当前预测之间的关系\",{\"1\":{\"552\":1}}],[\"即指令向下移动一步所需要的时间\",{\"1\":{\"234\":1}}],[\"即有符号类型\",{\"1\":{\"529\":1}}],[\"即一个类只有一个实例\",{\"1\":{\"431\":1}}],[\"即使是温度低于触发点温度\",{\"1\":{\"1602\":1}}],[\"即使是在人被障碍物遮挡甚至是完全被掩盖的时候\",{\"1\":{\"1132\":1}}],[\"即使用宏\",{\"1\":{\"1557\":1}}],[\"即使对象发生了移动\",{\"1\":{\"1380\":1}}],[\"即使上一行指令要忽略\",{\"1\":{\"1248\":1}}],[\"即使客户端继续向服务端发送\",{\"1\":{\"984\":1}}],[\"即使有这个\",{\"1\":{\"243\":1}}],[\"即使第\",{\"1\":{\"155\":1}}],[\"即过滤掉不需要计算的大礼包\",{\"1\":{\"102\":1}}],[\"即可达到消除\",{\"1\":{\"1024\":1}}],[\"即可使用\",{\"1\":{\"646\":1}}],[\"即可进入\",{\"1\":{\"612\":1}}],[\"即可让固件自动执行\",{\"1\":{\"380\":1}}],[\"即可\",{\"1\":{\"88\":1,\"147\":2,\"955\":1,\"1445\":1,\"1551\":1}}],[\"即队列中存储的元素永远是在同一层的元素\",{\"1\":{\"59\":1}}],[\"即类似于\",{\"1\":{\"58\":1}}],[\"即求出未知数k\",{\"1\":{\"23\":1}}],[\"即\",{\"1\":{\"10\":1,\"245\":1,\"261\":1,\"432\":1,\"536\":1,\"543\":1,\"972\":1,\"1556\":2}}],[\"使能中断\",{\"1\":{\"1516\":1}}],[\"使能的时间节点是哪个\",{\"1\":{\"593\":1}}],[\"使其指向\",{\"1\":{\"1252\":1}}],[\"使其自始至终都具有高级语义\",{\"1\":{\"1022\":1}}],[\"使其中的某个字段非法化\",{\"1\":{\"602\":1}}],[\"使每个\",{\"1\":{\"764\":1}}],[\"使减轻\",{\"1\":{\"605\":1}}],[\"使缓和\",{\"1\":{\"605\":1}}],[\"使\",{\"1\":{\"360\":1}}],[\"使之组成一个最大的整数\",{\"1\":{\"182\":1}}],[\"使得我们感知程序是在同一时间运行\",{\"1\":{\"1621\":1}}],[\"使得模型可以在训练前期更新地更快\",{\"1\":{\"1185\":1}}],[\"使得模型深度提升的同时\",{\"1\":{\"1012\":1}}],[\"使得二叉搜索树的构造起到了类似于一种\",{\"1\":{\"1170\":1}}],[\"使得数据的查询变得十分困难\",{\"1\":{\"1166\":1}}],[\"使得\",{\"1\":{\"1024\":2,\"1353\":1,\"1388\":1,\"1483\":1,\"1537\":1}}],[\"使得该结构生成的\",{\"1\":{\"1022\":1}}],[\"使得服务器打开大量的半开连接\",{\"1\":{\"988\":1}}],[\"使得文件描述符设置为非阻塞\",{\"1\":{\"956\":1}}],[\"使得在多核场景中\",{\"1\":{\"534\":1}}],[\"使得每个进程就像一台单独的虚拟机一样\",{\"1\":{\"724\":1}}],[\"使得每个\",{\"1\":{\"382\":1}}],[\"使得他们的和正好是s\",{\"1\":{\"166\":1}}],[\"使得它们的和等于\",{\"1\":{\"132\":1}}],[\"使得两个子集的元素和相等\",{\"1\":{\"122\":1}}],[\"使得背包内物品价值的总值最大\",{\"1\":{\"118\":1}}],[\"使得没有一个皇后能攻击到另外一个\",{\"1\":{\"5\":1}}],[\"使用该函数通知链表发送消息\",{\"1\":{\"1573\":1}}],[\"使用下面的逻辑\",{\"1\":{\"1545\":1}}],[\"使用下面的解法\",{\"1\":{\"154\":1}}],[\"使用锁来防止并发访问\",{\"1\":{\"1517\":1}}],[\"使用内存映射实现了系统级别的通用计数器\",{\"1\":{\"1499\":1}}],[\"使用以及编译\",{\"1\":{\"1392\":1}}],[\"使用回调函数的过程较为简单\",{\"1\":{\"1328\":1}}],[\"使用回调函数\",{\"1\":{\"1328\":1}}],[\"使用期约的情况下\",{\"1\":{\"1328\":1}}],[\"使用期约\",{\"1\":{\"1328\":1}}],[\"使用场景\",{\"1\":{\"1310\":1}}],[\"使用脚本一键安装\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"使用入门\",{\"0\":{\"1257\":1}}],[\"使用git\",{\"1\":{\"1253\":1}}],[\"使用滑动平均模型在很多应用中都可以在一定程度提高数据模型在测试数据上的表现\",{\"1\":{\"1185\":1}}],[\"使用滑动窗口来进行流量控制\",{\"1\":{\"989\":1}}],[\"使用完全二叉搜索树\",{\"1\":{\"1168\":1}}],[\"使用卷积操作后可能会导致两个问题\",{\"1\":{\"1142\":1}}],[\"使用无线信号也同样充满挑战\",{\"1\":{\"1131\":1}}],[\"使用若干个布置好的网络摄像机\",{\"1\":{\"1131\":1}}],[\"使用<\",{\"1\":{\"1110\":1}}],[\"使用最邻近上采样将空间分辨率提升了\",{\"1\":{\"1022\":1}}],[\"使用加权\",{\"1\":{\"1012\":1}}],[\"使用加载存储模型进行内存访问\",{\"1\":{\"523\":1}}],[\"使用横向连接设计解码器\",{\"1\":{\"1012\":1}}],[\"使用类别和聚类损失结合\",{\"1\":{\"1012\":1}}],[\"使用防火墙技术\",{\"1\":{\"988\":1}}],[\"使用指数退避法来决定是否放弃连接\",{\"1\":{\"985\":1}}],[\"使用低通过滤器来更新一个平滑的\",{\"1\":{\"978\":1}}],[\"使用链表保存文件描述符\",{\"1\":{\"954\":1}}],[\"使用v\",{\"1\":{\"937\":1}}],[\"使用如下方法解决\",{\"1\":{\"934\":1}}],[\"使用如下的方式按照\",{\"1\":{\"304\":1}}],[\"使用参数\",{\"1\":{\"926\":1}}],[\"使用散列表\",{\"1\":{\"829\":1}}],[\"使用expire命令\",{\"1\":{\"829\":1}}],[\"使用轮询策略\",{\"1\":{\"761\":1}}],[\"使用modinfo\",{\"1\":{\"718\":1}}],[\"使用命令安装\",{\"1\":{\"692\":1}}],[\"使用第三方工具可以很舒服地观察它\",{\"1\":{\"691\":1}}],[\"使用标量构建置信度\",{\"1\":{\"589\":1}}],[\"使用顺序\",{\"1\":{\"583\":1}}],[\"使用比\",{\"1\":{\"559\":1}}],[\"使用更多\",{\"1\":{\"558\":1}}],[\"使用饱和计数器\",{\"1\":{\"558\":1}}],[\"使用预测值的指令将被全部清除掉\",{\"1\":{\"551\":1}}],[\"使用其\",{\"1\":{\"460\":1}}],[\"使用这个\",{\"1\":{\"445\":1}}],[\"使用方法是\",{\"1\":{\"1275\":1}}],[\"使用方法\",{\"1\":{\"944\":1}}],[\"使用方法如下\",{\"1\":{\"435\":1}}],[\"使用方法很多\",{\"1\":{\"297\":1}}],[\"使用协程并发处理多任务使用\",{\"1\":{\"415\":1}}],[\"使用双下划线避免转码问题\",{\"1\":{\"351\":1}}],[\"使用的技术包括fmcw和天线阵列技术\",{\"1\":{\"1134\":1}}],[\"使用的\",{\"1\":{\"691\":1}}],[\"使用的理解十分重要\",{\"1\":{\"328\":1}}],[\"使用的地址都是上个步骤\",{\"1\":{\"245\":1}}],[\"使用前需要先导入\",{\"1\":{\"299\":1}}],[\"使用一种特殊的算法计算\",{\"1\":{\"988\":1}}],[\"使用一些弱鸡的方法已经不再那么高效了\",{\"1\":{\"241\":1}}],[\"使用一个\",{\"1\":{\"168\":1,\"589\":1}}],[\"使用一个哈希表来记录\",{\"1\":{\"89\":1}}],[\"使用单独的缓存消除了指令获取数据访问之间可能存在的单个内存冲突\",{\"1\":{\"236\":1}}],[\"使用单独的指令和数据缓存\",{\"1\":{\"236\":1}}],[\"使用较大的\",{\"0\":{\"210\":1},\"1\":{\"210\":1}}],[\"使用多少个\",{\"1\":{\"202\":1}}],[\"使用模板降序排列\",{\"1\":{\"179\":1}}],[\"使用到了\",{\"1\":{\"144\":1}}],[\"使用状态转移方程记忆化\",{\"1\":{\"100\":1}}],[\"使用bfs记忆化\",{\"1\":{\"100\":1}}],[\"使用公式\",{\"0\":{\"98\":1}}],[\"使用递归法\",{\"1\":{\"95\":1}}],[\"使用了三个\",{\"1\":{\"1434\":1}}],[\"使用了方差投票算法\",{\"1\":{\"1012\":1}}],[\"使用了分支的历史进行预测\",{\"1\":{\"559\":1}}],[\"使用了\",{\"1\":{\"507\":1,\"558\":1,\"828\":1,\"925\":1,\"1012\":1}}],[\"使用了栈\",{\"1\":{\"486\":1}}],[\"使用了数据\",{\"1\":{\"198\":1}}],[\"使用了这个写法\",{\"1\":{\"88\":1}}],[\"使用了一个自旋锁\",{\"1\":{\"1570\":1}}],[\"使用了一个\",{\"1\":{\"10\":1,\"259\":1}}],[\"使用队列能保证这些上一层元素都被\",{\"1\":{\"59\":1}}],[\"使用辅助函数来进行递归\",{\"1\":{\"56\":1}}],[\"使用二分查找\",{\"1\":{\"32\":1}}],[\"使用二分查找判断某个数是否完全平方数\",{\"1\":{\"31\":1}}],[\"使用左闭右开区间初始化\",{\"1\":{\"22\":1}}],[\"使用左右闭区间初始化\",{\"1\":{\"22\":1}}],[\"使用库\",{\"1\":{\"21\":1}}],[\"使用\",{\"0\":{\"658\":1},\"1\":{\"10\":1,\"11\":1,\"19\":1,\"20\":1,\"27\":1,\"28\":2,\"73\":1,\"75\":1,\"96\":2,\"153\":1,\"213\":1,\"245\":1,\"288\":1,\"290\":1,\"294\":1,\"302\":1,\"303\":2,\"304\":1,\"329\":1,\"344\":1,\"351\":1,\"371\":1,\"377\":1,\"378\":2,\"382\":1,\"383\":2,\"435\":1,\"436\":1,\"480\":2,\"543\":2,\"558\":1,\"559\":1,\"581\":1,\"590\":1,\"602\":1,\"610\":1,\"614\":1,\"671\":1,\"692\":1,\"693\":1,\"728\":1,\"741\":1,\"761\":2,\"810\":1,\"814\":1,\"827\":1,\"842\":1,\"933\":1,\"960\":1,\"961\":2,\"962\":1,\"983\":1,\"998\":2,\"1113\":2,\"1179\":2,\"1226\":1,\"1248\":1,\"1275\":1,\"1453\":1,\"1454\":8,\"1464\":1,\"1529\":1}}],[\"剪枝\",{\"1\":{\"10\":2}}],[\"中调用\",{\"1\":{\"1595\":1}}],[\"中调用一下这个\",{\"1\":{\"1446\":1}}],[\"中都有共同的\",{\"1\":{\"1562\":1}}],[\"中都有一个唯一的\",{\"1\":{\"691\":1}}],[\"中还保存了一份函数指针\",{\"1\":{\"1551\":1}}],[\"中还没有创建\",{\"1\":{\"47\":1}}],[\"中本\",{\"1\":{\"1545\":1}}],[\"中对应当前\",{\"1\":{\"1545\":1}}],[\"中当前\",{\"1\":{\"1545\":1}}],[\"中断处理函数和轮询函数\",{\"1\":{\"1601\":1}}],[\"中断事件\",{\"1\":{\"1541\":1}}],[\"中断产生\",{\"1\":{\"1516\":1}}],[\"中断\",{\"1\":{\"1516\":1}}],[\"中断控制器\",{\"1\":{\"1499\":1}}],[\"中执行\",{\"1\":{\"1497\":1}}],[\"中如高通\",{\"1\":{\"1479\":1}}],[\"中如\",{\"1\":{\"1479\":1}}],[\"中就是\",{\"1\":{\"1479\":1}}],[\"中就可以查看一个函数被调用的指令列表\",{\"1\":{\"691\":1}}],[\"中分配的\",{\"1\":{\"1388\":1}}],[\"中可能❓会发生一些操作\",{\"1\":{\"1388\":1}}],[\"中可以看到\",{\"1\":{\"705\":1,\"1400\":1}}],[\"中可以调用\",{\"1\":{\"695\":1,\"1395\":1}}],[\"中可以找到\",{\"1\":{\"675\":1,\"1553\":1}}],[\"中可以使用\",{\"1\":{\"408\":1}}],[\"中可以保存的总的数据量为\",{\"1\":{\"198\":1}}],[\"中也存在\",{\"1\":{\"1386\":1}}],[\"中两者的区别在于\",{\"1\":{\"1386\":1}}],[\"中为需要拷贝的对象分配一个新的\",{\"1\":{\"1380\":1}}],[\"中直接调用的\",{\"1\":{\"1374\":1}}],[\"中令人诟病的一次拷贝没有了\",{\"1\":{\"1356\":1}}],[\"中称作\",{\"1\":{\"1328\":1}}],[\"中完成的\",{\"1\":{\"1317\":1}}],[\"中去\",{\"1\":{\"1307\":1,\"1596\":1,\"1607\":1}}],[\"中负责讲\",{\"1\":{\"1298\":1}}],[\"中输入\",{\"1\":{\"1177\":1}}],[\"中心坐标的预测值\",{\"1\":{\"1155\":1}}],[\"中心频偏\",{\"1\":{\"1024\":1}}],[\"中提取出人行为的视觉信号\",{\"1\":{\"1132\":1}}],[\"中间的路由器也有可能分片\",{\"1\":{\"981\":1}}],[\"中保存的是\",{\"1\":{\"1333\":1}}],[\"中保存着在流中的\",{\"1\":{\"976\":1}}],[\"中保存了\",{\"1\":{\"706\":1,\"1402\":1}}],[\"中保存了准备写入内存的数据\",{\"1\":{\"216\":1}}],[\"中涉及到的工具软件\",{\"1\":{\"801\":1}}],[\"中返回一次\",{\"1\":{\"738\":1}}],[\"中返回的时候\",{\"1\":{\"603\":1}}],[\"中被视为垃圾\",{\"1\":{\"1383\":1}}],[\"中被\",{\"1\":{\"1380\":1}}],[\"中被调用\",{\"1\":{\"707\":1,\"1345\":1,\"1406\":1}}],[\"中被需要的相当晚\",{\"1\":{\"552\":1}}],[\"中获取\",{\"1\":{\"706\":1,\"1402\":1}}],[\"中申明的组件\",{\"1\":{\"701\":1}}],[\"中定义的基本操作\",{\"1\":{\"691\":1}}],[\"中会使用到这个概念\",{\"1\":{\"689\":1}}],[\"中长度是\",{\"1\":{\"676\":2}}],[\"中存在两种符号\",{\"1\":{\"692\":1}}],[\"中存在两个元素且它们的和等于给定的目标结果\",{\"1\":{\"494\":1}}],[\"中存储数组的长度信息\",{\"1\":{\"675\":1}}],[\"中通过\",{\"1\":{\"674\":1}}],[\"中取值\",{\"1\":{\"602\":1}}],[\"中拥有最小代价的\",{\"1\":{\"590\":1}}],[\"中预测器进行组合\",{\"1\":{\"590\":1}}],[\"中进行注册\",{\"1\":{\"706\":1,\"1402\":1}}],[\"中进行详细的研究\",{\"1\":{\"581\":1}}],[\"中进行重点研究\",{\"1\":{\"563\":1}}],[\"中表示自旋锁\",{\"1\":{\"1563\":1}}],[\"中表示\",{\"1\":{\"571\":1}}],[\"中表现为一个装饰器\",{\"1\":{\"377\":1}}],[\"中条件标志位的值\",{\"1\":{\"518\":1}}],[\"中斜体加粗的字符可以得到\",{\"1\":{\"479\":1}}],[\"中删除任意数量的字符后可以获得的字符串\",{\"1\":{\"479\":1}}],[\"中添加数据\",{\"1\":{\"468\":1}}],[\"中添加元素\",{\"1\":{\"466\":1}}],[\"中判断参数\",{\"1\":{\"432\":2}}],[\"中判断类型的方法\",{\"1\":{\"395\":1}}],[\"中传参\",{\"1\":{\"432\":1}}],[\"中绝对没有特殊含义\",{\"1\":{\"419\":1}}],[\"中解析出来的结果也不同\",{\"1\":{\"388\":1}}],[\"中使用的是\",{\"1\":{\"1517\":1}}],[\"中使用\",{\"0\":{\"1230\":1},\"1\":{\"1113\":1,\"1380\":1}}],[\"中使用邻居发现协议进行解析\",{\"1\":{\"993\":1}}],[\"中使用函数\",{\"1\":{\"383\":1}}],[\"中使用多线程很容易\",{\"1\":{\"277\":1}}],[\"中不同时存在的元素\",{\"1\":{\"343\":1}}],[\"中常用的数据结构\",{\"1\":{\"328\":1}}],[\"中最左的元素\",{\"1\":{\"303\":1}}],[\"中最后的元素\",{\"1\":{\"303\":1}}],[\"中字典和\",{\"1\":{\"295\":1}}],[\"中以供下次使用\",{\"1\":{\"258\":1}}],[\"中没有实现\",{\"1\":{\"1515\":1,\"1516\":1}}],[\"中没有缓存映射关系的话\",{\"1\":{\"258\":1}}],[\"中没有创建\",{\"1\":{\"256\":1}}],[\"中没有找到地址转换\",{\"1\":{\"256\":1}}],[\"中没有表项能与虚拟地址匹配\",{\"1\":{\"256\":1}}],[\"中写入的命令\",{\"1\":{\"1301\":1}}],[\"中写入\",{\"1\":{\"236\":1}}],[\"中读取\",{\"1\":{\"236\":1}}],[\"中其他有效的数据也不能被使用了\",{\"1\":{\"221\":1}}],[\"中有一些基础概念\",{\"1\":{\"1589\":1}}],[\"中有一个\",{\"1\":{\"1345\":1}}],[\"中有\",{\"1\":{\"1479\":1}}],[\"中有值\",{\"1\":{\"1299\":1}}],[\"中有个选项\",{\"1\":{\"658\":1}}],[\"中有很多实用的内置固件\",{\"1\":{\"383\":1}}],[\"中有很多写法\",{\"1\":{\"88\":1}}],[\"中有两个字段是\",{\"1\":{\"224\":1}}],[\"中有对应的字段\",{\"1\":{\"221\":1}}],[\"中数据不同\",{\"1\":{\"220\":1}}],[\"中移除的时候\",{\"1\":{\"217\":1}}],[\"中出现新的空位\",{\"1\":{\"216\":1}}],[\"中块的数量\",{\"1\":{\"206\":3}}],[\"中具体的偏移\",{\"1\":{\"205\":1}}],[\"中索引\",{\"1\":{\"204\":1}}],[\"中是\",{\"1\":{\"204\":1}}],[\"中我们可以看出\",{\"1\":{\"196\":1}}],[\"中我们一般这么初始化队列\",{\"1\":{\"88\":1}}],[\"中缓存的数据\",{\"1\":{\"195\":1}}],[\"中自定义比较函数\",{\"1\":{\"173\":1}}],[\"中自始至终只加入了\",{\"1\":{\"43\":1}}],[\"中找出并返回总和为\",{\"1\":{\"136\":1}}],[\"中找到从起点\",{\"1\":{\"83\":1}}],[\"中呢\",{\"1\":{\"88\":1}}],[\"中\",{\"1\":{\"88\":1,\"118\":1,\"146\":1,\"153\":1,\"172\":1,\"196\":1,\"198\":1,\"200\":1,\"201\":1,\"208\":1,\"217\":1,\"218\":2,\"224\":2,\"227\":1,\"245\":6,\"256\":1,\"377\":2,\"411\":1,\"414\":1,\"428\":1,\"431\":1,\"435\":1,\"436\":1,\"445\":1,\"467\":1,\"504\":1,\"524\":6,\"526\":1,\"527\":1,\"528\":1,\"548\":2,\"550\":2,\"602\":2,\"669\":1,\"691\":1,\"702\":1,\"703\":1,\"704\":1,\"706\":1,\"725\":1,\"759\":1,\"761\":1,\"807\":1,\"956\":2,\"1102\":1,\"1170\":1,\"1293\":1,\"1307\":3,\"1309\":1,\"1355\":1,\"1365\":1,\"1366\":1,\"1380\":3,\"1381\":3,\"1383\":3,\"1385\":1,\"1386\":4,\"1388\":1,\"1389\":3,\"1399\":1,\"1402\":1,\"1424\":1,\"1454\":1,\"1460\":1,\"1498\":1,\"1501\":1,\"1553\":1,\"1560\":1,\"1562\":1,\"1584\":1}}],[\"中新建一个列表用来保存该\",{\"1\":{\"47\":1}}],[\"中序遍历的解法可以看上文总结\",{\"1\":{\"496\":1}}],[\"中序遍历部分\",{\"1\":{\"64\":1}}],[\"中序遍历\",{\"0\":{\"64\":1,\"493\":1,\"496\":1},\"1\":{\"46\":1,\"496\":1}}],[\"中所有可能的\",{\"1\":{\"14\":1}}],[\"中所有可以使数字和为目标数\",{\"1\":{\"10\":1}}],[\"中的进行对比\",{\"1\":{\"1608\":1}}],[\"中的函数指针\",{\"1\":{\"1551\":2}}],[\"中的函数还需要使用\",{\"1\":{\"696\":1,\"1396\":1}}],[\"中的宏\",{\"1\":{\"1534\":1}}],[\"中的对象\",{\"1\":{\"1389\":1}}],[\"中的染色用来表征到堆中对象的状态\",{\"1\":{\"1385\":1}}],[\"中的内存布局又是如何的呢\",{\"1\":{\"1383\":1}}],[\"中的内容的时候\",{\"1\":{\"217\":1}}],[\"中的内容\",{\"1\":{\"215\":1}}],[\"中的存活对象\",{\"1\":{\"1380\":2}}],[\"中的实现都是不同的\",{\"1\":{\"1380\":1}}],[\"中的地位不可撼动\",{\"1\":{\"1352\":1}}],[\"中的应用\",{\"1\":{\"1312\":1}}],[\"中的常见类型总结如下\",{\"1\":{\"1179\":1}}],[\"中的依赖到最新版本\",{\"1\":{\"917\":1,\"1101\":1}}],[\"中的时间操作\",{\"1\":{\"905\":1}}],[\"中的递增和递减操作\",{\"1\":{\"828\":1}}],[\"中的字段非法化\",{\"1\":{\"602\":1}}],[\"中的一个\",{\"1\":{\"1393\":1}}],[\"中的一个限制\",{\"1\":{\"1389\":1}}],[\"中的一个内容\",{\"1\":{\"1355\":1}}],[\"中的一个整数表示\",{\"1\":{\"75\":1}}],[\"中的一些比特位通过\",{\"1\":{\"584\":1}}],[\"中的指令用于\",{\"1\":{\"575\":1}}],[\"中的指令不会同时尝试使用硬件资源至关重要\",{\"1\":{\"236\":1}}],[\"中的低\",{\"1\":{\"533\":1}}],[\"中的值以\",{\"1\":{\"1596\":1}}],[\"中的值保存到栈内存\",{\"1\":{\"532\":1}}],[\"中的值执行指定功能代码\",{\"1\":{\"245\":1}}],[\"中的属性的\",{\"1\":{\"421\":1}}],[\"中的最后一个元素\",{\"1\":{\"303\":1}}],[\"中的最后相同的位置\",{\"1\":{\"108\":1}}],[\"中的分支目标地址代替\",{\"1\":{\"245\":1}}],[\"中的每一个\",{\"1\":{\"234\":1,\"693\":1}}],[\"中的每个数字在每个组合中只能使用一次\",{\"1\":{\"11\":1}}],[\"中的\",{\"1\":{\"201\":2,\"204\":1,\"220\":1,\"262\":1,\"297\":1,\"310\":1,\"316\":1,\"418\":1,\"422\":1,\"460\":2,\"545\":1,\"595\":1,\"602\":1,\"651\":1,\"664\":1,\"674\":1,\"687\":1,\"1101\":1,\"1179\":1,\"1371\":1,\"1379\":1,\"1383\":1,\"1388\":1,\"1469\":1,\"1513\":1,\"1531\":1,\"1532\":1,\"1570\":1,\"1626\":1}}],[\"中的位置\",{\"1\":{\"198\":1}}],[\"中的信息是否有效\",{\"1\":{\"197\":1}}],[\"中的数据结构\",{\"1\":{\"1531\":1}}],[\"中的数据写入该位置\",{\"1\":{\"534\":1}}],[\"中的数据\",{\"1\":{\"468\":1}}],[\"中的数据和内存中的数据不一致\",{\"1\":{\"225\":1}}],[\"中的数据就\",{\"1\":{\"216\":1}}],[\"中的数据的时候\",{\"1\":{\"214\":1}}],[\"中的数据是否有效\",{\"1\":{\"195\":1}}],[\"中的数字可以无限制重复被选取\",{\"1\":{\"10\":1}}],[\"中的的所有偶数元素移动到数组的前面\",{\"1\":{\"169\":1}}],[\"中的原则对这个问题进行分析\",{\"1\":{\"53\":1}}],[\"中的问题答案分别为\",{\"1\":{\"23\":1}}],[\"中设置了很多\",{\"1\":{\"1510\":1}}],[\"中设置\",{\"1\":{\"0\":1}}],[\"找不到了头文件了\",{\"1\":{\"1448\":1}}],[\"找个好工作\",{\"1\":{\"1008\":1}}],[\"找左边的\",{\"1\":{\"499\":1}}],[\"找寻一个数组的峰值\",{\"1\":{\"33\":1}}],[\"找到的话\",{\"1\":{\"1607\":1}}],[\"找到了一个解释\",{\"1\":{\"1586\":1}}],[\"找到了左边界以后\",{\"1\":{\"36\":1}}],[\"找到目标进程或线程\",{\"1\":{\"1308\":1}}],[\"找到需要预测的值\",{\"1\":{\"575\":1}}],[\"找到后返回\",{\"1\":{\"499\":1}}],[\"找到后继节点\",{\"1\":{\"499\":1}}],[\"找到列表中每一行的最大元素和每一列的最大元素\",{\"1\":{\"340\":1}}],[\"找到长数组中包含短数组所有的元素的最短子数组\",{\"1\":{\"168\":1}}],[\"找到含有相同数量的\",{\"1\":{\"158\":1}}],[\"找到左右两个蜡烛的位置\",{\"1\":{\"150\":1}}],[\"找到若干个完全平方数\",{\"1\":{\"132\":1}}],[\"找到小镇的法官\",{\"0\":{\"87\":1},\"1\":{\"87\":1}}],[\"找到小于目标元素\",{\"1\":{\"20\":1}}],[\"找到所有的左边界\",{\"1\":{\"36\":1}}],[\"找到\",{\"1\":{\"20\":2,\"1380\":1,\"1607\":1}}],[\"找到一个可能存在的正确的答案\",{\"1\":{\"5\":1}}],[\"找出交点的方法是\",{\"1\":{\"459\":1}}],[\"找出该数组中满足其和\",{\"1\":{\"160\":1}}],[\"找出最长递增路径的长度\",{\"1\":{\"74\":1}}],[\"找出二叉搜索树中指定节点的\",{\"1\":{\"63\":1}}],[\"找出第\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"找出图中的蓝红边界\",{\"1\":{\"23\":1}}],[\"找出\",{\"1\":{\"10\":1}}],[\"不再赘述\",{\"1\":{\"1607\":1}}],[\"不再需要了\",{\"1\":{\"543\":1}}],[\"不允许阻塞\",{\"1\":{\"1562\":1}}],[\"不支持广播模式的话\",{\"1\":{\"1545\":1}}],[\"不支持事务\",{\"1\":{\"815\":2}}],[\"不在此进行全部列举\",{\"1\":{\"1544\":1}}],[\"不在乎数据是否读完\",{\"1\":{\"956\":1}}],[\"不想产生周期性的中断\",{\"1\":{\"1541\":1}}],[\"不相等的话直接\",{\"1\":{\"1534\":1}}],[\"不都是\",{\"1\":{\"1490\":1}}],[\"不可达对象\",{\"1\":{\"1389\":1}}],[\"不可达对象在\",{\"1\":{\"1383\":1}}],[\"不可破也\",{\"1\":{\"1060\":1}}],[\"不发生对象的\",{\"1\":{\"1381\":1}}],[\"不影响正常使用\",{\"1\":{\"1179\":1}}],[\"不影响其他代码的使用\",{\"1\":{\"736\":1}}],[\"不要混淆\",{\"1\":{\"1557\":1}}],[\"不要\",{\"1\":{\"1440\":1}}],[\"不要气馁\",{\"1\":{\"1144\":1}}],[\"不要写成\",{\"1\":{\"92\":1}}],[\"不设置wifi密码\",{\"1\":{\"1144\":1}}],[\"不进行设置\",{\"1\":{\"1534\":1}}],[\"不进行缓存\",{\"1\":{\"998\":1}}],[\"不进位的减法\",{\"1\":{\"515\":1}}],[\"不用理会别人的看法\",{\"1\":{\"1041\":1}}],[\"不用经过三次握手\",{\"1\":{\"997\":1}}],[\"不用i+1\",{\"1\":{\"10\":1}}],[\"不一定要非常具体\",{\"1\":{\"1033\":1}}],[\"不一定能被服务器收到\",{\"1\":{\"983\":1}}],[\"不一定正确\",{\"1\":{\"11\":1}}],[\"不分片\",{\"1\":{\"981\":1}}],[\"不仅源端主机会进行分片\",{\"1\":{\"981\":1}}],[\"不存在的\",{\"1\":{\"1353\":1,\"1607\":1}}],[\"不存在包大小的限制\",{\"1\":{\"980\":1}}],[\"不存在则创建\",{\"1\":{\"837\":1}}],[\"不背锅\",{\"1\":{\"978\":1}}],[\"不带缓冲区\",{\"1\":{\"961\":1}}],[\"不满的时候再返回一次\",{\"1\":{\"956\":1}}],[\"不满足题意\",{\"1\":{\"120\":1}}],[\"不返回\",{\"1\":{\"956\":1}}],[\"不监听\",{\"1\":{\"955\":1}}],[\"不淘汰\",{\"1\":{\"827\":1}}],[\"不常用\",{\"1\":{\"751\":1}}],[\"不然有可能导致电脑无法正常开机\",{\"1\":{\"1145\":1}}],[\"不然子进程会变成僵尸进程\",{\"1\":{\"738\":1}}],[\"不然就算失败了\",{\"1\":{\"88\":1}}],[\"不通\",{\"1\":{\"728\":1}}],[\"不推荐使用insmod和rmmod命令\",{\"1\":{\"719\":1}}],[\"不写入modules\",{\"1\":{\"717\":1}}],[\"不难理解\",{\"1\":{\"1388\":1}}],[\"不难预测\",{\"1\":{\"1012\":1}}],[\"不难发现\",{\"1\":{\"706\":1,\"1403\":1}}],[\"不难看出\",{\"1\":{\"153\":1,\"1551\":1}}],[\"不管其在平台是\",{\"1\":{\"1471\":1}}],[\"不管作者如何实现\",{\"1\":{\"1355\":1}}],[\"不管是\",{\"1\":{\"1293\":1}}],[\"不管是寄存器写入还是写出\",{\"1\":{\"245\":1}}],[\"不管如何\",{\"1\":{\"688\":1}}],[\"不直接运行\",{\"1\":{\"652\":1}}],[\"不眠不休的漏洞检测医生\",{\"1\":{\"646\":1}}],[\"不属于\",{\"1\":{\"639\":1}}],[\"不必使用\",{\"1\":{\"614\":1}}],[\"不代表我本人观点\",{\"1\":{\"565\":1}}],[\"不幸的是\",{\"1\":{\"552\":1}}],[\"不为空时不要从\",{\"1\":{\"468\":1}}],[\"不停地往\",{\"1\":{\"466\":1}}],[\"不会受到影响\",{\"1\":{\"1524\":1}}],[\"不会再云服务器上暴露任何信息\",{\"1\":{\"1169\":1}}],[\"不会发送消息\",{\"1\":{\"844\":1}}],[\"不会被调用\",{\"1\":{\"432\":1}}],[\"不会\",{\"1\":{\"425\":1,\"637\":1}}],[\"不会改变\",{\"1\":{\"418\":1,\"517\":1}}],[\"不会立即更新内存内容\",{\"1\":{\"217\":1}}],[\"不太常用\",{\"1\":{\"372\":1}}],[\"不只是可以读\",{\"1\":{\"329\":1}}],[\"不多赘述\",{\"1\":{\"243\":1,\"731\":1}}],[\"不知道在哪个分类下放置的博客文章或者感悟\",{\"1\":{\"1631\":1}}],[\"不知道该学习什么了\",{\"1\":{\"1048\":1}}],[\"不知道\",{\"1\":{\"220\":1,\"226\":1}}],[\"不需要退出rcu空闲处理\",{\"1\":{\"1526\":1}}],[\"不需要做任何的修改\",{\"1\":{\"1446\":1}}],[\"不需要系统调用等\",{\"1\":{\"1356\":1}}],[\"不需要依赖先前的预测结果\",{\"1\":{\"553\":1}}],[\"不需要增加额外的复杂机制\",{\"1\":{\"549\":1}}],[\"不需要对计数器更新自动机进行实质性更改\",{\"1\":{\"543\":1}}],[\"不需要\",{\"1\":{\"217\":1}}],[\"不需要考虑顺序\",{\"1\":{\"130\":1,\"132\":1}}],[\"不需要再画蛇添足\",{\"1\":{\"13\":1}}],[\"不同高宽比的目标\",{\"1\":{\"1156\":1}}],[\"不同用户机器上的用户之间建立以及管理会话\",{\"1\":{\"977\":1}}],[\"不同之处如下\",{\"1\":{\"548\":1}}],[\"不同之处在于内部通信\",{\"1\":{\"731\":1}}],[\"不同之处在于\",{\"1\":{\"528\":1}}],[\"不同阶段的指令不会互相干扰\",{\"1\":{\"236\":1}}],[\"不同的\",{\"1\":{\"1510\":1,\"1551\":1}}],[\"不同的损失函数会对模型产生重要影响\",{\"1\":{\"1212\":1}}],[\"不同的网络层次会产生不同的特征图\",{\"1\":{\"1022\":1}}],[\"不同的点在于\",{\"1\":{\"559\":1}}],[\"不同的点仅在于\",{\"1\":{\"128\":1}}],[\"不同的长度形成一个几何级数\",{\"1\":{\"559\":1}}],[\"不同的页表无法对应到一个物理页\",{\"1\":{\"252\":1}}],[\"不同的体系结构中的\",{\"1\":{\"195\":1}}],[\"不同序列按照首个数字从小到大排列\",{\"1\":{\"165\":1}}],[\"不同\",{\"1\":{\"136\":1,\"186\":1,\"382\":1,\"1024\":1,\"1529\":1}}],[\"不同于可见光很容易被墙壁或其他障碍物遮挡\",{\"1\":{\"1131\":1}}],[\"不同于有序释放\",{\"1\":{\"983\":1}}],[\"不同于分支预测\",{\"1\":{\"552\":1}}],[\"不同于上面\",{\"1\":{\"158\":1}}],[\"不同于\",{\"1\":{\"11\":1,\"127\":1,\"595\":1,\"692\":1,\"825\":1,\"1501\":1}}],[\"不考虑物品顺序\",{\"1\":{\"118\":1}}],[\"不过土豪大厂们早已跨过这门槛\",{\"1\":{\"690\":1}}],[\"不过哪怕是寄存器\",{\"1\":{\"573\":1}}],[\"不过其他的核可以有这份数据的复制\",{\"1\":{\"225\":1}}],[\"不过我们需要注意一个细节\",{\"1\":{\"196\":1}}],[\"不过多解释\",{\"1\":{\"118\":1}}],[\"不过该解法比较适合用来理解回溯的思想\",{\"1\":{\"9\":1}}],[\"不如直接使用\",{\"1\":{\"118\":1}}],[\"不放第\",{\"1\":{\"117\":1}}],[\"不购买多于当前订单数量的物品\",{\"1\":{\"102\":1}}],[\"不购买大礼包\",{\"1\":{\"102\":1}}],[\"不划算指的是我单独买这些物品\",{\"1\":{\"102\":1}}],[\"不能立即释放内存\",{\"1\":{\"1584\":1}}],[\"不能很好地补充信号的振幅衰减\",{\"1\":{\"1024\":1}}],[\"不能产生a的加锁被b用户解锁的情况\",{\"1\":{\"831\":1}}],[\"不能做海量的数据场景\",{\"1\":{\"825\":1}}],[\"不能购买超出购物清单指定数量的物品\",{\"1\":{\"102\":1}}],[\"不能滚动数组\",{\"1\":{\"100\":1}}],[\"不重复加\",{\"1\":{\"79\":1}}],[\"不对称\",{\"1\":{\"51\":1}}],[\"不对应任何字母\",{\"1\":{\"8\":1}}],[\"不是空指针\",{\"1\":{\"1607\":1}}],[\"不是最新的代码实现\",{\"1\":{\"1599\":1}}],[\"不是一个\",{\"1\":{\"1440\":1}}],[\"不是第一个希望替代http\",{\"1\":{\"967\":1}}],[\"不是线程安全的\",{\"1\":{\"876\":1}}],[\"不是必须的\",{\"1\":{\"674\":1}}],[\"不是完全准确\",{\"1\":{\"653\":1}}],[\"不是很好理解\",{\"1\":{\"548\":1}}],[\"不是所有的硬件平台都可以访问任意地址上的任意数据\",{\"1\":{\"229\":1}}],[\"不是\",{\"1\":{\"46\":1,\"132\":1,\"361\":1,\"559\":1,\"665\":1,\"876\":1}}],[\"不讲究顺序\",{\"1\":{\"10\":1}}],[\"的混合\",{\"1\":{\"1590\":1}}],[\"的宽限期或者临界区\",{\"1\":{\"1586\":1}}],[\"的优先级比\",{\"1\":{\"1571\":1}}],[\"的优点包括以下几个\",{\"1\":{\"1352\":1}}],[\"的优点在于\",{\"1\":{\"10\":1}}],[\"的参数理解如下\",{\"1\":{\"1567\":1}}],[\"的地方\",{\"1\":{\"1553\":1}}],[\"的地址\",{\"1\":{\"1380\":1}}],[\"的地址对应的值放入寄存器\",{\"1\":{\"528\":1}}],[\"的区段无关\",{\"1\":{\"1551\":1}}],[\"的区别\",{\"1\":{\"1461\":1}}],[\"的区别是汇编文件是可读的\",{\"1\":{\"690\":1}}],[\"的区别是什么\",{\"1\":{\"194\":1,\"873\":1}}],[\"的本地定时事件设备\",{\"1\":{\"1542\":1}}],[\"的本地定时事件设备就要停止掉了\",{\"1\":{\"1542\":1}}],[\"的缩写\",{\"1\":{\"1537\":1}}],[\"的场景\",{\"1\":{\"1534\":1,\"1586\":1}}],[\"的功能可以简单地概括为以下几个方面\",{\"1\":{\"1585\":1}}],[\"的功能\",{\"1\":{\"1534\":1}}],[\"的级别选择\",{\"1\":{\"1532\":1}}],[\"的选择\",{\"1\":{\"1531\":1}}],[\"的中断或事件触发来驱动\",{\"1\":{\"1523\":1}}],[\"的中序遍历出来的结果是升序的\",{\"1\":{\"496\":1}}],[\"的布尔值\",{\"1\":{\"1521\":1}}],[\"的空闲状态\",{\"1\":{\"1521\":1,\"1523\":1}}],[\"的逻辑也是非常简单\",{\"1\":{\"1519\":1}}],[\"的主循环\",{\"1\":{\"1515\":1}}],[\"的主要任务就是定义所支持的\",{\"1\":{\"1534\":1}}],[\"的主要操作\",{\"1\":{\"1516\":1}}],[\"的主要过程\",{\"1\":{\"1333\":1}}],[\"的主要组成部分是一个\",{\"1\":{\"691\":1}}],[\"的演化\",{\"1\":{\"1508\":1}}],[\"的擦除是通过紫外线的方式\",{\"1\":{\"1501\":1}}],[\"的历史\",{\"1\":{\"1501\":1}}],[\"的意思是复杂的\",{\"1\":{\"1498\":1}}],[\"的意思是说\",{\"1\":{\"559\":1}}],[\"的体系结构类似\",{\"1\":{\"1498\":1}}],[\"的镜像并转接控制权\",{\"1\":{\"1488\":1}}],[\"的加载过程\",{\"1\":{\"1488\":1}}],[\"的二进制镜像\",{\"1\":{\"1487\":1}}],[\"的切换\",{\"1\":{\"1479\":1}}],[\"的介绍和理解可以参考下文\",{\"1\":{\"1474\":1}}],[\"的简单说明\",{\"1\":{\"1469\":1}}],[\"的简单调用方式\",{\"1\":{\"844\":1}}],[\"的底层实现原理是什么\",{\"1\":{\"1468\":1}}],[\"的打印的对应关系为\",{\"1\":{\"1464\":1}}],[\"的对照\",{\"1\":{\"1464\":1}}],[\"的对象指向\",{\"1\":{\"1388\":1}}],[\"的对象如果在此期间被移动到了一个新的内存位置\",{\"1\":{\"1380\":1}}],[\"的对象\",{\"1\":{\"430\":1,\"1380\":1}}],[\"的生成依赖于\",{\"1\":{\"1440\":1}}],[\"的生命周期\",{\"0\":{\"874\":1}}],[\"的依赖项\",{\"1\":{\"1439\":1}}],[\"的规则\",{\"0\":{\"1439\":1}}],[\"的也会来这找的\",{\"1\":{\"1421\":1}}],[\"的好处在于\",{\"1\":{\"1470\":1}}],[\"的好处就是\",{\"1\":{\"1419\":1}}],[\"的好处如下\",{\"1\":{\"543\":1}}],[\"的了\",{\"1\":{\"1388\":1}}],[\"的初始状态都被假定为完全的\",{\"1\":{\"1385\":1}}],[\"的初始化函数\",{\"1\":{\"1605\":1}}],[\"的初始化比较简单\",{\"1\":{\"454\":1}}],[\"的初始化\",{\"1\":{\"454\":1,\"1557\":2}}],[\"的释放等操作\",{\"1\":{\"1380\":1}}],[\"的技术细节\",{\"1\":{\"1379\":1}}],[\"的创建过程是一个很复杂的命题\",{\"1\":{\"1363\":1}}],[\"的性能还存在\",{\"1\":{\"1353\":1}}],[\"的性能取决于预测兴趣分支的频率和预测匹配时的准确性\",{\"1\":{\"243\":1}}],[\"的设计第一次让人看到时会有比较惊艳的感觉\",{\"1\":{\"1355\":1}}],[\"的设计本质上是一个\",{\"1\":{\"1353\":1}}],[\"的设置中\",{\"1\":{\"960\":1}}],[\"的设置界面\",{\"1\":{\"616\":1}}],[\"的使用非常简单\",{\"1\":{\"1352\":1}}],[\"的使用对于\",{\"1\":{\"696\":1,\"1396\":1}}],[\"的表示\",{\"1\":{\"1341\":1}}],[\"的起始的用户空间虚拟地址排序\",{\"1\":{\"1340\":1}}],[\"的起始地址\",{\"1\":{\"1340\":1}}],[\"的调用\",{\"1\":{\"1333\":1,\"1374\":2,\"1540\":1}}],[\"的示例\",{\"1\":{\"1327\":1}}],[\"的示例和\",{\"1\":{\"1327\":1}}],[\"的上层使用的\",{\"1\":{\"1320\":1}}],[\"的关键函数\",{\"1\":{\"1308\":1}}],[\"的关系不明确\",{\"1\":{\"584\":1}}],[\"的关系总结实例化本质\",{\"1\":{\"432\":1}}],[\"的关系\",{\"1\":{\"258\":1,\"679\":1,\"974\":1,\"1562\":1}}],[\"的关系是什么\",{\"1\":{\"235\":1}}],[\"的profile\",{\"1\":{\"1264\":2,\"1646\":2}}],[\"的配置\",{\"1\":{\"1243\":1,\"1482\":1,\"1598\":1}}],[\"的父目录或该父目录的子目录\",{\"1\":{\"1240\":1}}],[\"的节点序号\",{\"1\":{\"1170\":2}}],[\"的路径\",{\"1\":{\"1169\":1}}],[\"的路径可以有以下的写法\",{\"1\":{\"351\":1}}],[\"的提示\",{\"1\":{\"1145\":1}}],[\"的差事成为一个企业家\",{\"1\":{\"1028\":1}}],[\"的差集\",{\"1\":{\"343\":1}}],[\"的读书笔记\",{\"1\":{\"1028\":1,\"1457\":1}}],[\"的读写操作\",{\"1\":{\"224\":1}}],[\"的振幅产生偏移\",{\"1\":{\"1024\":1}}],[\"的目的\",{\"1\":{\"1024\":2,\"1325\":1}}],[\"的目标是\",{\"1\":{\"1437\":1}}],[\"的目标\",{\"1\":{\"571\":1}}],[\"的目标寄存器都必须被预测的话\",{\"1\":{\"557\":1}}],[\"的消除\",{\"1\":{\"1024\":1}}],[\"的消耗可以分为两个因素\",{\"1\":{\"547\":1}}],[\"的产生是由于非时钟同步\",{\"1\":{\"1024\":1}}],[\"的卷积层来生成最终的特征层\",{\"1\":{\"1022\":1}}],[\"的卷积层结合\",{\"1\":{\"1022\":1}}],[\"的bbox\",{\"1\":{\"1021\":1}}],[\"的精确程度\",{\"1\":{\"1021\":1}}],[\"的面积所得的值即代表\",{\"1\":{\"1021\":1}}],[\"的转换关系如式所示\",{\"1\":{\"1020\":1}}],[\"的发射端和接收端之间的多径传播及其信道响应\",{\"1\":{\"1020\":1}}],[\"的发生\",{\"1\":{\"542\":1}}],[\"的测量误差及消除\",{\"1\":{\"1012\":1}}],[\"的室内定位算法\",{\"0\":{\"1023\":1},\"1\":{\"1012\":1}}],[\"的室内定位模块和基于视觉的室内定位模块\",{\"1\":{\"1012\":1}}],[\"的热情\",{\"1\":{\"1008\":1}}],[\"的电脑中都有一个\",{\"1\":{\"994\":1}}],[\"的整数倍\",{\"1\":{\"985\":1}}],[\"的包名的时候\",{\"1\":{\"1278\":1}}],[\"的包名\",{\"1\":{\"1275\":1,\"1277\":1}}],[\"的包\",{\"1\":{\"984\":1}}],[\"的超时重传\",{\"1\":{\"978\":1}}],[\"的七层模型\",{\"1\":{\"977\":1}}],[\"的可能是这样的\",{\"1\":{\"1471\":1}}],[\"的可以认为是较好的预测\",{\"1\":{\"1021\":1}}],[\"的可靠性也保证了数据的准确性\",{\"1\":{\"997\":1}}],[\"的可靠基于超时和重传策略\",{\"1\":{\"976\":1}}],[\"的可迭代对象\",{\"1\":{\"401\":1}}],[\"的协议\",{\"1\":{\"976\":1}}],[\"的替代方案\",{\"1\":{\"967\":1}}],[\"的替换策略受到\",{\"1\":{\"576\":1,\"577\":1}}],[\"的工具\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"的工作流可以参考这个文档\",{\"1\":{\"1239\":1}}],[\"的工作相比于\",{\"1\":{\"212\":1}}],[\"的工程师mike\",{\"1\":{\"967\":1}}],[\"的回调函数中\",{\"1\":{\"962\":1}}],[\"的开发者命令行\",{\"1\":{\"960\":1}}],[\"的开销减少\",{\"1\":{\"687\":1}}],[\"的效率\",{\"1\":{\"956\":1}}],[\"的效果\",{\"1\":{\"426\":1,\"558\":1}}],[\"的时长是远大于\",{\"1\":{\"983\":1}}],[\"的时间\",{\"1\":{\"983\":1}}],[\"的时间值\",{\"1\":{\"955\":1}}],[\"的时候返回预设的\",{\"1\":{\"1608\":1}}],[\"的时候提到了嵌入式系统\",{\"1\":{\"1501\":1}}],[\"的时候出现有符号的情况\",{\"1\":{\"1470\":1}}],[\"的时候可以使用其提供的两个函数参数\",{\"1\":{\"926\":1}}],[\"的时候调用了\",{\"1\":{\"702\":1}}],[\"的时候一个很大的问题\",{\"1\":{\"696\":1,\"1396\":1}}],[\"的时候为\",{\"1\":{\"676\":1}}],[\"的时候使用\",{\"1\":{\"614\":1}}],[\"的时候实现\",{\"1\":{\"549\":1}}],[\"的时候就实现了\",{\"1\":{\"549\":1}}],[\"的时候跳转\",{\"1\":{\"520\":1}}],[\"的时候减少\",{\"1\":{\"217\":1}}],[\"的时候能够取用\",{\"1\":{\"120\":1}}],[\"的时候\",{\"1\":{\"34\":1,\"160\":3,\"211\":1,\"224\":3,\"430\":1,\"550\":1,\"590\":1,\"603\":2,\"609\":2,\"692\":1,\"814\":1,\"979\":1,\"982\":1,\"987\":1,\"1142\":1,\"1307\":1,\"1383\":1,\"1428\":1,\"1469\":1,\"1534\":1,\"1557\":1,\"1586\":1}}],[\"的限制\",{\"1\":{\"954\":1,\"981\":2,\"998\":1}}],[\"的触发方式是水平触发\",{\"1\":{\"954\":1}}],[\"的取值取决于特定的客户与服务器\",{\"1\":{\"951\":1}}],[\"的取值在\",{\"1\":{\"562\":1}}],[\"的处理是将\",{\"1\":{\"1388\":1}}],[\"的处理\",{\"1\":{\"933\":1}}],[\"的处理器相比\",{\"1\":{\"557\":1}}],[\"的进阶用法\",{\"1\":{\"926\":1}}],[\"的进程\",{\"1\":{\"738\":1}}],[\"的模块\",{\"1\":{\"916\":1}}],[\"的版本\",{\"1\":{\"916\":1,\"1418\":1,\"1427\":1}}],[\"的版本号\",{\"1\":{\"273\":1,\"274\":1}}],[\"的存储功能\",{\"1\":{\"883\":1}}],[\"的存在使得设计一门新的编程语言只需要完成能够生成\",{\"1\":{\"690\":1}}],[\"的存在是因为我们还需要标识\",{\"1\":{\"197\":1}}],[\"的引用放入一级缓存\",{\"1\":{\"881\":1}}],[\"的实例\",{\"1\":{\"876\":1}}],[\"的实现一样的\",{\"1\":{\"1498\":1}}],[\"的实现主要是以下步骤\",{\"1\":{\"1480\":1}}],[\"的实现来看\",{\"1\":{\"1353\":1}}],[\"的实现大概如下\",{\"1\":{\"1333\":1}}],[\"的实现大致如下\",{\"1\":{\"1333\":1}}],[\"的实现\",{\"1\":{\"704\":1,\"1303\":1,\"1320\":1,\"1399\":1,\"1515\":1}}],[\"的实现如下所示\",{\"1\":{\"1366\":1,\"1367\":1}}],[\"的实现如下\",{\"1\":{\"703\":1,\"1571\":1}}],[\"的实现原理是什么\",{\"1\":{\"544\":1}}],[\"的实现方式如下\",{\"1\":{\"42\":1}}],[\"的注册接口\",{\"1\":{\"1532\":1}}],[\"的注册\",{\"0\":{\"872\":1},\"1\":{\"1532\":1,\"1534\":1}}],[\"的注册过程如下\",{\"1\":{\"706\":1,\"1402\":1}}],[\"的载体\",{\"1\":{\"871\":1}}],[\"的两个函数\",{\"0\":{\"1342\":1}}],[\"的两个核心特性\",{\"1\":{\"869\":1}}],[\"的两个数\",{\"0\":{\"166\":1}}],[\"的核心代码\",{\"1\":{\"1571\":1}}],[\"的核心模块\",{\"1\":{\"1532\":1}}],[\"的核心优势在于其可以无缝集成主流开发框架\",{\"1\":{\"869\":1}}],[\"的核心数\",{\"1\":{\"280\":1}}],[\"的核心数据结构是队列\",{\"1\":{\"83\":1}}],[\"的分析\",{\"1\":{\"1514\":1}}],[\"的分布式锁\",{\"1\":{\"831\":2}}],[\"的分别构成\",{\"1\":{\"245\":1}}],[\"的key随机删除\",{\"1\":{\"827\":1}}],[\"的key使用\",{\"1\":{\"827\":2}}],[\"的单个\",{\"1\":{\"825\":1}}],[\"的命令\",{\"1\":{\"824\":1}}],[\"的命令而不是\",{\"1\":{\"614\":1}}],[\"的启动\",{\"1\":{\"824\":1,\"1474\":1}}],[\"的索引主要实现结构\",{\"1\":{\"812\":1}}],[\"的索引被放在\",{\"1\":{\"602\":1}}],[\"的查找\",{\"1\":{\"801\":1}}],[\"的负载均衡策略有三种\",{\"1\":{\"763\":1}}],[\"的别名\",{\"1\":{\"761\":1}}],[\"的库函数\",{\"1\":{\"739\":1}}],[\"的返回值\",{\"1\":{\"738\":1}}],[\"的原创文章\",{\"1\":{\"1179\":1}}],[\"的原因在于\",{\"1\":{\"738\":1}}],[\"的原理类似\",{\"1\":{\"1240\":1}}],[\"的原理\",{\"1\":{\"165\":1}}],[\"的管理都是使用\",{\"1\":{\"725\":1}}],[\"的支持\",{\"1\":{\"724\":1,\"1498\":1}}],[\"的通信是不需要进过\",{\"1\":{\"1356\":1}}],[\"的通信\",{\"1\":{\"703\":1}}],[\"的平台无关性呢\",{\"1\":{\"695\":1,\"1395\":1}}],[\"的源文件\",{\"1\":{\"691\":1}}],[\"的各种编译优化\",{\"1\":{\"690\":1}}],[\"的基础上有两个变种\",{\"1\":{\"689\":1}}],[\"的基本机制以后\",{\"1\":{\"1575\":1}}],[\"的基本用法\",{\"1\":{\"1443\":1,\"1453\":1}}],[\"的基本结构\",{\"1\":{\"667\":1}}],[\"的基本概念\",{\"1\":{\"190\":1,\"1017\":1}}],[\"的名称去寻找对应的\",{\"1\":{\"1610\":1}}],[\"的名称传入\",{\"1\":{\"1608\":1}}],[\"的名称和默认的\",{\"1\":{\"1607\":1}}],[\"的名\",{\"1\":{\"687\":1}}],[\"的名字\",{\"1\":{\"687\":1}}],[\"的做法是给每个临时值都赋予一个\",{\"1\":{\"687\":1}}],[\"的虚拟化平台实现了一个电源控制\",{\"1\":{\"1481\":1}}],[\"的虚拟机\",{\"1\":{\"687\":1}}],[\"的虚拟地址空间\",{\"1\":{\"251\":2}}],[\"的字节码更大\",{\"1\":{\"688\":1}}],[\"的字节码其实比\",{\"1\":{\"688\":1}}],[\"的字段位于\",{\"1\":{\"682\":1}}],[\"的字符串\",{\"1\":{\"8\":1}}],[\"的类型\",{\"1\":{\"1470\":1}}],[\"的类型描述字段\",{\"1\":{\"682\":1}}],[\"的类表示它会使用一个或者多个\",{\"1\":{\"691\":1}}],[\"的类提供特殊功能\",{\"1\":{\"428\":1}}],[\"的次数\",{\"1\":{\"676\":1}}],[\"的相关工作\",{\"1\":{\"1481\":1}}],[\"的相关定义\",{\"1\":{\"675\":1}}],[\"的相互关系\",{\"1\":{\"576\":1}}],[\"的内部元素保存起来了\",{\"1\":{\"682\":1}}],[\"的内存对象布局分为两种\",{\"1\":{\"674\":1}}],[\"的内存构成\",{\"1\":{\"674\":1}}],[\"的内存布局情况\",{\"1\":{\"672\":1}}],[\"的内容为\",{\"1\":{\"1445\":1}}],[\"的内容\",{\"1\":{\"383\":1}}],[\"的内容有没有被修改\",{\"1\":{\"217\":1}}],[\"的复位报文\",{\"1\":{\"983\":1}}],[\"的复用\",{\"1\":{\"667\":1}}],[\"的复杂性\",{\"1\":{\"547\":1}}],[\"的研究\",{\"1\":{\"1461\":1}}],[\"的研究和简单的例子\",{\"1\":{\"664\":1}}],[\"的研究工作\",{\"1\":{\"310\":1}}],[\"的代码实现\",{\"1\":{\"1606\":1}}],[\"的代码如下\",{\"1\":{\"705\":1,\"1400\":1}}],[\"的代码\",{\"1\":{\"662\":1}}],[\"的代码的时候\",{\"1\":{\"658\":1}}],[\"的代价太高\",{\"1\":{\"213\":1}}],[\"的执行\",{\"1\":{\"701\":1}}],[\"的执行过程\",{\"1\":{\"653\":1}}],[\"的执行可以使\",{\"1\":{\"602\":1}}],[\"的栈指令集结构\",{\"1\":{\"652\":1}}],[\"的计算由\",{\"1\":{\"1597\":1}}],[\"的计算原理\",{\"1\":{\"1025\":1}}],[\"的计算方式为\",{\"1\":{\"982\":1}}],[\"的计算\",{\"1\":{\"643\":1}}],[\"的重要性\",{\"1\":{\"1470\":1}}],[\"的重要技术之一\",{\"1\":{\"1318\":1}}],[\"的重要意义\",{\"1\":{\"604\":1}}],[\"的重大意义\",{\"1\":{\"580\":1}}],[\"的访问同时进行\",{\"1\":{\"603\":1}}],[\"的访问和\",{\"1\":{\"603\":1}}],[\"的组成时说到了\",{\"1\":{\"602\":1}}],[\"的组件中使用一个\",{\"1\":{\"562\":1}}],[\"的组件并且与\",{\"1\":{\"559\":1}}],[\"的常量\",{\"1\":{\"600\":1}}],[\"的机制来保证正确性\",{\"1\":{\"599\":1}}],[\"的增加策略是\",{\"1\":{\"595\":1}}],[\"的这两个字段的含义说明如下\",{\"1\":{\"577\":1}}],[\"的高斯分布规律\",{\"1\":{\"1024\":1}}],[\"的高比特位匹配\",{\"1\":{\"576\":1}}],[\"的高位\",{\"1\":{\"212\":1}}],[\"的指针\",{\"1\":{\"706\":1,\"1402\":1}}],[\"的指定操作寄存器的\",{\"1\":{\"573\":1}}],[\"的指令\",{\"1\":{\"552\":1}}],[\"的指令的地址\",{\"1\":{\"212\":1}}],[\"的顶尖著作之一\",{\"1\":{\"570\":1}}],[\"的论文\",{\"1\":{\"568\":1}}],[\"的具体实现\",{\"1\":{\"1449\":1}}],[\"的具体含义\",{\"1\":{\"564\":1}}],[\"的具体细节\",{\"1\":{\"236\":1}}],[\"的细节\",{\"1\":{\"562\":1}}],[\"的范围在通用寄存器或者浮点寄存器的值局部性\",{\"1\":{\"573\":1}}],[\"的范围在\",{\"1\":{\"562\":1}}],[\"的置信度\",{\"1\":{\"562\":1}}],[\"的饱和计数器作为置信度的衡量标准\",{\"1\":{\"562\":1}}],[\"的后续处理与平台有关\",{\"1\":{\"1493\":1}}],[\"的后段才使用\",{\"1\":{\"599\":1}}],[\"的后\",{\"1\":{\"559\":1}}],[\"的准确率\",{\"1\":{\"558\":1}}],[\"的写入端口数\",{\"1\":{\"557\":1}}],[\"的影响是有限的\",{\"1\":{\"557\":1}}],[\"的影响\",{\"1\":{\"556\":1}}],[\"的缺点在于\",{\"1\":{\"1419\":1}}],[\"的缺点\",{\"0\":{\"954\":1},\"1\":{\"556\":1,\"1353\":1}}],[\"的缺陷在于\",{\"1\":{\"545\":1}}],[\"的预测目标大小越接近实际图像中的目标大小\",{\"1\":{\"1021\":1}}],[\"的预测错误率\",{\"1\":{\"595\":1}}],[\"的预测精度需要硬件帮助\",{\"1\":{\"580\":1}}],[\"的预测结构\",{\"1\":{\"545\":1}}],[\"的预测器也会受到关键操作\",{\"1\":{\"556\":1}}],[\"的预测器而言\",{\"1\":{\"545\":1}}],[\"的预测器不同的是\",{\"1\":{\"543\":1}}],[\"的预测器\",{\"1\":{\"541\":1,\"545\":1,\"581\":1}}],[\"的文章中\",{\"1\":{\"558\":1}}],[\"的文章也是使用了\",{\"1\":{\"545\":1}}],[\"的文件头\",{\"1\":{\"1464\":1}}],[\"的文件夹\",{\"1\":{\"1418\":1}}],[\"的文件设备\",{\"1\":{\"1307\":1}}],[\"的文件描述符创建一个事件\",{\"1\":{\"961\":1}}],[\"的文件内容为\",{\"1\":{\"388\":1}}],[\"的文件定义不同\",{\"1\":{\"388\":1}}],[\"的文件处理中\",{\"1\":{\"360\":1}}],[\"的文件中去\",{\"1\":{\"670\":1}}],[\"的文件中\",{\"1\":{\"291\":1}}],[\"的问题\",{\"1\":{\"544\":1,\"1243\":1}}],[\"的错误预测率远低于\",{\"1\":{\"543\":1}}],[\"的出现\",{\"1\":{\"542\":1,\"543\":1}}],[\"的偏移地址计算目标页地址\",{\"1\":{\"530\":1}}],[\"的全称是\",{\"1\":{\"529\":1,\"695\":1,\"1395\":1}}],[\"的第二个缺点\",{\"1\":{\"1353\":1}}],[\"的第一个参数\",{\"1\":{\"952\":1}}],[\"的第一个参数是\",{\"1\":{\"430\":1}}],[\"的第一个字节表明该常量项的类型\",{\"1\":{\"666\":1}}],[\"的第\",{\"1\":{\"521\":1}}],[\"的解释器\",{\"1\":{\"689\":1}}],[\"的解释和研究举例\",{\"1\":{\"514\":1}}],[\"的解法如下\",{\"1\":{\"54\":1,\"75\":1,\"186\":1,\"480\":1}}],[\"的解法\",{\"1\":{\"9\":1,\"499\":1}}],[\"的右子树\",{\"1\":{\"499\":2}}],[\"的算法\",{\"1\":{\"477\":1}}],[\"的信息\",{\"1\":{\"446\":1,\"1492\":1}}],[\"的绑定关系\",{\"1\":{\"1597\":1}}],[\"的绑定\",{\"1\":{\"418\":3}}],[\"的编码可以表示为\",{\"1\":{\"1169\":2}}],[\"的编译器前端即可\",{\"1\":{\"690\":1}}],[\"的编译指定一些选项\",{\"1\":{\"659\":1}}],[\"的编程模型被称为协程\",{\"1\":{\"414\":1}}],[\"的编号从\",{\"1\":{\"360\":1}}],[\"的函数指针\",{\"1\":{\"955\":1}}],[\"的函数的呢\",{\"1\":{\"696\":1,\"1396\":1}}],[\"的函数\",{\"0\":{\"696\":1},\"1\":{\"414\":1,\"673\":1,\"1601\":1}}],[\"的特征之外\",{\"1\":{\"1386\":1}}],[\"的特点\",{\"1\":{\"644\":1}}],[\"的特点进行求解\",{\"1\":{\"65\":1}}],[\"的特性\",{\"1\":{\"401\":1}}],[\"的例子\",{\"1\":{\"397\":1,\"508\":1,\"511\":1,\"1241\":1,\"1440\":1}}],[\"的例子是\",{\"1\":{\"173\":1}}],[\"的格式如下所示\",{\"1\":{\"388\":1}}],[\"的话就重置\",{\"1\":{\"562\":1}}],[\"的话可以避免使用如\",{\"1\":{\"543\":1}}],[\"的话\",{\"1\":{\"387\":1,\"480\":1,\"549\":1,\"559\":1,\"673\":1,\"692\":1,\"976\":1,\"1419\":1,\"1445\":1,\"1537\":1,\"1545\":1,\"1608\":1}}],[\"的固件参数化连接两个不同数据库的示例如下所示\",{\"1\":{\"382\":1}}],[\"的官方文档\",{\"1\":{\"369\":1}}],[\"的交集\",{\"1\":{\"343\":1}}],[\"的并集\",{\"1\":{\"343\":1}}],[\"的资源管理器中输入\",{\"1\":{\"336\":1}}],[\"的迭代器对象\",{\"1\":{\"329\":1}}],[\"的日志可以分为几个级别\",{\"1\":{\"321\":1}}],[\"的用法\",{\"1\":{\"295\":1,\"955\":1,\"1453\":1}}],[\"的用法如下\",{\"1\":{\"217\":1}}],[\"的含义是\",{\"1\":{\"1383\":1,\"1586\":1}}],[\"的含义一样\",{\"1\":{\"527\":1}}],[\"的含义分别是符号名称\",{\"1\":{\"504\":1}}],[\"的含义\",{\"1\":{\"293\":1,\"1345\":1,\"1586\":1}}],[\"的含义为\",{\"1\":{\"147\":1,\"580\":1}}],[\"的含义为前\",{\"1\":{\"118\":1}}],[\"的集合运算十分有用\",{\"1\":{\"343\":1}}],[\"的集合是一个十分方便的对于元素可以操作的序列\",{\"1\":{\"343\":1}}],[\"的集合\",{\"1\":{\"289\":1}}],[\"的正确性和高效性\",{\"1\":{\"1584\":1}}],[\"的正确性\",{\"1\":{\"288\":1}}],[\"的阈值大于\",{\"1\":{\"285\":1}}],[\"的任务都是\",{\"1\":{\"280\":1}}],[\"的多线程不能利用多核cpu\",{\"1\":{\"279\":1}}],[\"的线程在跑\",{\"1\":{\"276\":1,\"279\":1}}],[\"的安装配置和一些使用方法\",{\"1\":{\"1174\":1}}],[\"的安装路径\",{\"1\":{\"447\":1}}],[\"的安装\",{\"1\":{\"274\":1,\"610\":1}}],[\"的安装包\",{\"1\":{\"274\":1}}],[\"的过程基本上一致\",{\"1\":{\"1329\":1}}],[\"的过程中需要编译\",{\"1\":{\"1374\":1}}],[\"的过程中\",{\"1\":{\"1328\":1}}],[\"的过程就是\",{\"1\":{\"1328\":1}}],[\"的过程\",{\"1\":{\"269\":1,\"1327\":1,\"1331\":1,\"1380\":1}}],[\"的位被设置了\",{\"1\":{\"1545\":1}}],[\"的位数也就确定了\",{\"1\":{\"261\":1}}],[\"的位置\",{\"1\":{\"36\":1,\"1417\":1,\"1591\":1}}],[\"的映射方式\",{\"0\":{\"264\":1},\"1\":{\"261\":1}}],[\"的标识进行比较\",{\"1\":{\"534\":1}}],[\"的标识\",{\"1\":{\"261\":1}}],[\"的有效位无效\",{\"1\":{\"259\":1}}],[\"的条目数量有限\",{\"1\":{\"258\":1}}],[\"的符号扩展立即值中\",{\"1\":{\"245\":1}}],[\"的输出\",{\"1\":{\"245\":1}}],[\"的输入\",{\"1\":{\"236\":1}}],[\"的低\",{\"1\":{\"245\":2,\"522\":1}}],[\"的结束时间是在所有的\",{\"1\":{\"1586\":1}}],[\"的结构体如下\",{\"1\":{\"1464\":1}}],[\"的结构\",{\"1\":{\"1022\":1}}],[\"的结构为\",{\"1\":{\"460\":1}}],[\"的结构和原理如下图\",{\"1\":{\"255\":1}}],[\"的结构示意图\",{\"1\":{\"203\":1}}],[\"的结果是与当前的\",{\"1\":{\"530\":1}}],[\"的结果\",{\"1\":{\"245\":1,\"553\":1,\"1012\":1}}],[\"的结果都存储到一个寄存器中\",{\"1\":{\"236\":1}}],[\"的情况下模拟\",{\"1\":{\"562\":1}}],[\"的情况下\",{\"1\":{\"236\":1,\"1333\":1}}],[\"的情况下用\",{\"1\":{\"11\":1}}],[\"的图片可以有效说明这个问题\",{\"1\":{\"236\":1}}],[\"的企业\",{\"1\":{\"235\":1}}],[\"的长度最大是多少\",{\"1\":{\"979\":1}}],[\"的长度最小的\",{\"1\":{\"160\":1}}],[\"的长度\",{\"1\":{\"682\":1}}],[\"的长度取决于最慢的\",{\"1\":{\"234\":1}}],[\"的等待时间\",{\"1\":{\"226\":1}}],[\"的状态\",{\"1\":{\"978\":1}}],[\"的状态为\",{\"1\":{\"225\":1}}],[\"的状态位\",{\"1\":{\"224\":1}}],[\"的层次结构中实现\",{\"1\":{\"213\":1}}],[\"的定时设备\",{\"1\":{\"1545\":1}}],[\"的定义是这样的\",{\"1\":{\"1553\":1}}],[\"的定义来理解这个可移植性问题\",{\"1\":{\"1470\":1}}],[\"的定义和使用\",{\"1\":{\"1468\":1}}],[\"的定义中\",{\"1\":{\"1307\":1}}],[\"的定义如下\",{\"1\":{\"708\":1,\"1469\":1,\"1570\":1}}],[\"的定义\",{\"1\":{\"550\":1,\"551\":1,\"691\":1,\"1553\":2}}],[\"的定义可以如下所示\",{\"1\":{\"196\":1}}],[\"的定位是依靠地址中的某几个字节分配的偏移量决定的\",{\"1\":{\"198\":1}}],[\"的方案\",{\"1\":{\"967\":1}}],[\"的方向\",{\"1\":{\"571\":1}}],[\"的方式就是\",{\"1\":{\"856\":1}}],[\"的方式包括\",{\"1\":{\"740\":1}}],[\"的方式进行分配\",{\"1\":{\"692\":1}}],[\"的方式存到文件里\",{\"1\":{\"691\":1}}],[\"的方式索引到\",{\"1\":{\"584\":1}}],[\"的方式\",{\"1\":{\"325\":1,\"814\":1,\"1333\":1}}],[\"的方式来进行滑动\",{\"1\":{\"314\":1}}],[\"的方式来实现的\",{\"1\":{\"196\":1}}],[\"的方式输出\",{\"1\":{\"289\":1}}],[\"的方式是处理器上比较常用的\",{\"1\":{\"202\":1}}],[\"的方法对这四种预测器进行有机的结合\",{\"1\":{\"581\":1}}],[\"的方法会显示出一个复杂的关键循环\",{\"1\":{\"542\":1}}],[\"的方法\",{\"1\":{\"190\":1,\"988\":1}}],[\"的方法求解\",{\"1\":{\"118\":1}}],[\"的总大小\",{\"1\":{\"196\":1}}],[\"的匹配\",{\"1\":{\"196\":1}}],[\"的作用类似\",{\"1\":{\"1541\":1}}],[\"的作用正好相反\",{\"1\":{\"1527\":1}}],[\"的作用是将\",{\"1\":{\"1470\":1}}],[\"的作用是\",{\"1\":{\"1381\":1,\"1573\":1}}],[\"的作用域\",{\"0\":{\"875\":1},\"1\":{\"1421\":1}}],[\"的作用在于降低\",{\"1\":{\"543\":1}}],[\"的作用\",{\"1\":{\"195\":1,\"983\":1,\"1170\":1}}],[\"的一种\",{\"1\":{\"1501\":2}}],[\"的一些操作\",{\"1\":{\"1227\":1}}],[\"的一些场景\",{\"1\":{\"584\":1}}],[\"的一些描述可以参考如下\",{\"1\":{\"255\":1}}],[\"的一些作用\",{\"1\":{\"193\":1}}],[\"的一个或多个扩展\",{\"1\":{\"841\":1}}],[\"的一个最常见用法可以说是在子类中调用父类的初始化方法了\",{\"1\":{\"427\":1}}],[\"的一个题目涉及到了这个问题\",{\"1\":{\"297\":1}}],[\"的一个子集\",{\"1\":{\"245\":1}}],[\"的一个\",{\"1\":{\"221\":1}}],[\"的一个倍数\",{\"1\":{\"156\":1}}],[\"的一致性协议\",{\"1\":{\"224\":1}}],[\"的一致性\",{\"1\":{\"220\":1}}],[\"的几种映射方式和置换策略\",{\"1\":{\"190\":1}}],[\"的前半部分得到包名的\",{\"1\":{\"1275\":1}}],[\"的前面拼接成最大值\",{\"1\":{\"185\":2}}],[\"的前驱\",{\"1\":{\"86\":1}}],[\"的应用范围\",{\"1\":{\"1508\":1}}],[\"的应用可能是通过以下步骤的\",{\"1\":{\"1380\":1}}],[\"的应用\",{\"1\":{\"173\":1}}],[\"的子区段中\",{\"1\":{\"1552\":1}}],[\"的子接口\",{\"1\":{\"873\":1}}],[\"的子类\",{\"1\":{\"824\":1}}],[\"的子类表示它的结果可以被其他地方使用\",{\"1\":{\"691\":1}}],[\"的子序列还包括\",{\"1\":{\"479\":1}}],[\"的子序列\",{\"1\":{\"479\":2}}],[\"的子序列是在从\",{\"1\":{\"479\":1}}],[\"的子字符串的数目\",{\"1\":{\"167\":1}}],[\"的子串数\",{\"0\":{\"167\":1}}],[\"的子数组\",{\"0\":{\"151\":1},\"1\":{\"144\":1,\"156\":1}}],[\"的序列化方式\",{\"1\":{\"842\":1}}],[\"的序列\",{\"1\":{\"165\":1}}],[\"的连续动态实例通常会产生相同的值\",{\"1\":{\"584\":1}}],[\"的连续正整数序列\",{\"1\":{\"165\":1}}],[\"的连续正数序列\",{\"0\":{\"165\":1}}],[\"的连续的子数组的个数\",{\"1\":{\"151\":1}}],[\"的是\",{\"1\":{\"158\":1}}],[\"的糖果\",{\"1\":{\"155\":3}}],[\"的个数\",{\"1\":{\"150\":1,\"153\":1,\"154\":2}}],[\"的和等于\",{\"1\":{\"160\":1}}],[\"的和\",{\"1\":{\"147\":2,\"165\":1}}],[\"的完全平方数的\",{\"1\":{\"132\":1}}],[\"的判断\",{\"1\":{\"130\":1,\"169\":1}}],[\"的石头新重量为\",{\"1\":{\"125\":1}}],[\"的石头将会完全粉碎\",{\"1\":{\"125\":1}}],[\"的数据或者是被\",{\"1\":{\"1620\":1}}],[\"的数据结构定义如下\",{\"1\":{\"1567\":1}}],[\"的数据结构更小\",{\"1\":{\"842\":1}}],[\"的数据范围比\",{\"1\":{\"1470\":1}}],[\"的数据存储受到物理内存的限制\",{\"1\":{\"825\":1}}],[\"的数据类型\",{\"1\":{\"670\":1}}],[\"的数组\",{\"1\":{\"666\":1}}],[\"的数量\",{\"1\":{\"261\":1,\"1494\":1}}],[\"的数量限制\",{\"1\":{\"120\":1}}],[\"的数目\",{\"1\":{\"124\":1}}],[\"的不同之处在于\",{\"1\":{\"550\":1}}],[\"的不同\",{\"1\":{\"124\":1}}],[\"的若干容量\",{\"1\":{\"120\":1}}],[\"的元素组合的个数\",{\"1\":{\"136\":1}}],[\"的元素\",{\"1\":{\"120\":1}}],[\"的所有位置都用双向链表链接起来\",{\"1\":{\"460\":1}}],[\"的所有参数\",{\"1\":{\"391\":1}}],[\"的所有元素也是\",{\"1\":{\"120\":1}}],[\"的所有节点\",{\"1\":{\"47\":1}}],[\"的求解\",{\"1\":{\"118\":1}}],[\"的背包中\",{\"1\":{\"117\":3}}],[\"的背包可以获得的最大价值\",{\"1\":{\"117\":1}}],[\"的大小决定是否作分片处理\",{\"1\":{\"981\":1}}],[\"的大小取决于\",{\"1\":{\"261\":1}}],[\"的大小取决于虚拟地址空间的和虚拟存储系统使用的\",{\"1\":{\"261\":1}}],[\"的大小就为\",{\"1\":{\"261\":1}}],[\"的大小为\",{\"1\":{\"261\":1}}],[\"的大小成为缓存很大的一部分\",{\"1\":{\"210\":1}}],[\"的大小是\",{\"1\":{\"204\":1}}],[\"的大小和\",{\"1\":{\"201\":1}}],[\"的大小\",{\"1\":{\"196\":1,\"1021\":1}}],[\"的大小来判断\",{\"1\":{\"182\":1}}],[\"的大小关系\",{\"1\":{\"182\":1}}],[\"的大矩形\",{\"1\":{\"104\":1}}],[\"的大礼包价格是\",{\"1\":{\"102\":1}}],[\"的小矩形无重叠地覆盖一个\",{\"1\":{\"104\":1}}],[\"的小矩形横着或者竖着去覆盖更大的矩形\",{\"1\":{\"104\":1}}],[\"的\",{\"0\":{\"918\":1},\"1\":{\"100\":1,\"118\":1,\"120\":1,\"122\":1,\"186\":1,\"190\":1,\"196\":1,\"204\":1,\"210\":1,\"220\":1,\"224\":5,\"261\":2,\"262\":1,\"285\":2,\"299\":1,\"375\":1,\"430\":1,\"453\":1,\"486\":1,\"499\":1,\"503\":1,\"547\":1,\"548\":1,\"551\":1,\"559\":3,\"562\":2,\"580\":1,\"583\":1,\"595\":1,\"602\":1,\"616\":1,\"621\":1,\"623\":1,\"639\":1,\"658\":1,\"691\":3,\"692\":1,\"696\":1,\"708\":1,\"725\":1,\"763\":1,\"764\":3,\"789\":1,\"905\":1,\"955\":1,\"956\":1,\"978\":1,\"981\":1,\"983\":2,\"987\":1,\"1012\":1,\"1155\":1,\"1240\":1,\"1275\":1,\"1277\":1,\"1278\":1,\"1296\":1,\"1298\":1,\"1299\":1,\"1320\":1,\"1328\":1,\"1332\":1,\"1341\":1,\"1350\":2,\"1356\":1,\"1371\":1,\"1374\":1,\"1376\":1,\"1380\":1,\"1381\":1,\"1383\":3,\"1388\":2,\"1396\":1,\"1424\":1,\"1425\":1,\"1439\":1,\"1440\":1,\"1460\":1,\"1515\":1,\"1520\":1,\"1521\":1,\"1529\":1,\"1534\":1,\"1540\":1,\"1542\":3,\"1545\":1,\"1584\":1,\"1599\":1,\"1607\":1}}],[\"的最前面\",{\"1\":{\"302\":1}}],[\"的最后面\",{\"1\":{\"302\":1}}],[\"的最后一次购买\",{\"1\":{\"102\":1}}],[\"的最长连续数组\",{\"1\":{\"158\":1}}],[\"的最长连续子数组\",{\"1\":{\"158\":1}}],[\"的最大子集是\",{\"1\":{\"120\":1}}],[\"的最大子集的大小\",{\"1\":{\"120\":1}}],[\"的最小变化\",{\"1\":{\"92\":1}}],[\"的最近距离\",{\"1\":{\"83\":1}}],[\"的容量小于\",{\"1\":{\"91\":1}}],[\"的队列中进行判断\",{\"1\":{\"91\":1}}],[\"的框架可以得出求解该题目的主题框架\",{\"1\":{\"88\":1}}],[\"的操作数进行操作\",{\"1\":{\"245\":1}}],[\"的操作\",{\"1\":{\"88\":1,\"1522\":1}}],[\"的人\",{\"1\":{\"87\":1}}],[\"的人信任编号为\",{\"1\":{\"87\":1}}],[\"的入度这时候需要\",{\"1\":{\"86\":1}}],[\"的概念介绍如下\",{\"1\":{\"592\":1}}],[\"的概念\",{\"1\":{\"79\":1,\"234\":1,\"248\":1,\"542\":1,\"1386\":1}}],[\"的递归解法如下\",{\"1\":{\"77\":1}}],[\"的房间\",{\"1\":{\"75\":1}}],[\"的步骤已经完成了\",{\"1\":{\"1609\":1}}],[\"的步骤放在了\",{\"1\":{\"1552\":1}}],[\"的步骤大概可以总结如下\",{\"1\":{\"212\":1}}],[\"的步骤\",{\"1\":{\"74\":1}}],[\"的形式保存在\",{\"1\":{\"1365\":1}}],[\"的形式\",{\"1\":{\"58\":1,\"1445\":1}}],[\"的思路\",{\"1\":{\"689\":1}}],[\"的思路很好\",{\"1\":{\"92\":1}}],[\"的思想\",{\"1\":{\"58\":1}}],[\"的思维来思考这个问题呢\",{\"1\":{\"56\":1}}],[\"的顺序不同\",{\"1\":{\"81\":1}}],[\"的顺序\",{\"1\":{\"52\":1}}],[\"的理解进行的行为\",{\"1\":{\"1291\":1}}],[\"的理解\",{\"1\":{\"46\":1}}],[\"的理解是\",{\"1\":{\"11\":1}}],[\"的但是较为通用\",{\"1\":{\"42\":1}}],[\"的口诀\",{\"1\":{\"30\":1}}],[\"的值也是6\",{\"1\":{\"1170\":1}}],[\"的值越接近于\",{\"1\":{\"1021\":1}}],[\"的值越大\",{\"1\":{\"1021\":1}}],[\"的值设置为当前拥塞窗口\",{\"1\":{\"987\":1}}],[\"的值相加作为地址\",{\"1\":{\"524\":1}}],[\"的值相加放入寄存器\",{\"1\":{\"504\":1}}],[\"的值作为内存地址\",{\"1\":{\"524\":1}}],[\"的值作为地址\",{\"1\":{\"524\":1}}],[\"的值加上\",{\"1\":{\"524\":3}}],[\"的值为\",{\"1\":{\"153\":1}}],[\"的值\",{\"0\":{\"35\":1},\"1\":{\"120\":2,\"153\":1,\"245\":1,\"418\":1,\"573\":1,\"577\":1,\"1170\":1}}],[\"的值大于要查找的值的时候\",{\"1\":{\"22\":1}}],[\"的值小于要查找的值的时候\",{\"1\":{\"22\":1}}],[\"的下标\",{\"1\":{\"20\":1}}],[\"的倍数\",{\"1\":{\"15\":1,\"156\":1}}],[\"的剪枝差异\",{\"1\":{\"13\":1}}],[\"的唯一组合\",{\"1\":{\"10\":1}}],[\"暴力求解\",{\"0\":{\"108\":1},\"1\":{\"33\":1}}],[\"暴力解法和二分法的代码如下\",{\"1\":{\"33\":1}}],[\"暴力\",{\"1\":{\"9\":1,\"176\":1}}],[\"<70>\",{\"1\":{\"1598\":1}}],[\"<2000>\",{\"1\":{\"1598\":1}}],[\"<1000>\",{\"1\":{\"1598\":1}}],[\"<目录>\",{\"1\":{\"1454\":1}}],[\"<目标路径>\",{\"1\":{\"1453\":1}}],[\"<目标目录路径>\",{\"1\":{\"1453\":1}}],[\"<文件名\",{\"1\":{\"1454\":1}}],[\"<文件名>\",{\"1\":{\"1454\":1}}],[\"<要压缩的文件\",{\"1\":{\"1454\":1}}],[\"<压缩文件名\",{\"1\":{\"1454\":5}}],[\"<源文件路径>\",{\"1\":{\"1453\":1}}],[\"<源目录路径>\",{\"1\":{\"1453\":1}}],[\"<端口号>\",{\"1\":{\"1453\":1}}],[\"<本地目标路径>\",{\"1\":{\"1453\":1}}],[\"<本地文件路径>\",{\"1\":{\"1453\":1}}],[\"<远程用户名\",{\"1\":{\"1453\":2}}],[\"<yourname>便可以修改远程仓库的默认名称为\",{\"1\":{\"1253\":1}}],[\"<youremail>\",{\"1\":{\"781\":1}}],[\"<rep\",{\"1\":{\"1250\":1}}],[\"<recodemo\",{\"1\":{\"1109\":2}}],[\"<verb>\",{\"1\":{\"1243\":1}}],[\"<useremail>\",{\"1\":{\"1243\":1}}],[\"<username>\",{\"1\":{\"1243\":1}}],[\"<0>\",{\"1\":{\"1598\":1}}],[\"<0\",{\"1\":{\"1192\":1}}],[\"<details><summary>inline\",{\"1\":{\"1110\":1}}],[\"<details>\",{\"1\":{\"1110\":1}}],[\"<div>\",{\"1\":{\"934\":1}}],[\"<div\",{\"1\":{\"931\":1,\"934\":1,\"936\":1,\"1004\":1}}],[\"<distro\",{\"1\":{\"618\":1}}],[\"<thermal\",{\"1\":{\"1592\":1}}],[\"<tf\",{\"1\":{\"1217\":1}}],[\"<template\",{\"1\":{\"1109\":2}}],[\"<title>hello\",{\"1\":{\"1004\":1}}],[\"<badge\",{\"1\":{\"1103\":2}}],[\"<body>\",{\"1\":{\"1004\":1}}],[\"<button\",{\"1\":{\"892\":1,\"938\":1}}],[\"<func1+0x21>\",{\"1\":{\"1463\":1}}],[\"<func1+0x17>\",{\"1\":{\"1463\":1}}],[\"<func1>\",{\"1\":{\"1463\":1}}],[\"<fcntl\",{\"1\":{\"956\":1}}],[\"<filename>\",{\"1\":{\"693\":1,\"1241\":1,\"1249\":1}}],[\"<el\",{\"1\":{\"944\":2,\"1102\":1}}],[\"<elements>\",{\"1\":{\"682\":1}}],[\"<lower\",{\"1\":{\"1592\":1}}],[\"<link\",{\"1\":{\"896\":1,\"897\":1,\"1081\":1,\"1105\":2}}],[\"<llvm\",{\"1\":{\"693\":6}}],[\"<p>\",{\"1\":{\"940\":1,\"1004\":1}}],[\"<p\",{\"1\":{\"892\":1,\"896\":1}}],[\"<path>\",{\"1\":{\"795\":1}}],[\"<canvas\",{\"1\":{\"892\":1}}],[\"<class\",{\"1\":{\"421\":1,\"433\":1}}],[\"<html\",{\"1\":{\"1004\":1}}],[\"<https\",{\"1\":{\"168\":1}}],[\"<h4\",{\"1\":{\"935\":1}}],[\"<h3>\",{\"1\":{\"898\":1}}],[\"<h3\",{\"1\":{\"898\":1}}],[\"<h1>haha<\",{\"1\":{\"939\":1}}],[\"<h1\",{\"1\":{\"896\":1}}],[\"<head>\",{\"1\":{\"896\":2,\"934\":1,\"1004\":1}}],[\"<hostname><\",{\"1\":{\"795\":1}}],[\"<jni\",{\"1\":{\"706\":1,\"1402\":1}}],[\"<xm>\",{\"1\":{\"538\":1}}],[\"<xn>\",{\"1\":{\"538\":2}}],[\"<xd>\",{\"1\":{\"538\":2}}],[\"<summary><\",{\"1\":{\"1110\":1}}],[\"<seq=101><ack=301><ctl=ack><data>\",{\"1\":{\"982\":1}}],[\"<seq=101><ack=301><ctl=ack>\",{\"1\":{\"982\":1}}],[\"<seq=100><ctl=syn>\",{\"1\":{\"982\":1}}],[\"<seq=300><ack=101><ctl=syn\",{\"1\":{\"982\":1}}],[\"<sys\",{\"1\":{\"950\":1,\"951\":1}}],[\"<script>hljs\",{\"1\":{\"1081\":1}}],[\"<script>\",{\"1\":{\"892\":1,\"923\":1,\"939\":1,\"1004\":1}}],[\"<script\",{\"1\":{\"889\":2,\"892\":1,\"939\":1,\"1081\":1}}],[\"<shift>\",{\"1\":{\"538\":2}}],[\"<string\",{\"1\":{\"1469\":1}}],[\"<string>\",{\"1\":{\"455\":1}}],[\"<style>\",{\"1\":{\"896\":1,\"897\":1,\"934\":1}}],[\"<stdio\",{\"1\":{\"502\":1,\"1004\":1,\"1445\":1,\"1446\":1}}],[\"<wm>\",{\"1\":{\"538\":1}}],[\"<wn>\",{\"1\":{\"538\":2}}],[\"<wd>\",{\"1\":{\"538\":2}}],[\"<main+0x2e>\",{\"1\":{\"1463\":1}}],[\"<main+0x1b>\",{\"1\":{\"1463\":1}}],[\"<main+0x15>\",{\"1\":{\"1463\":1}}],[\"<main>\",{\"1\":{\"1463\":1}}],[\"<map>\",{\"1\":{\"455\":1}}],[\"<map\",{\"1\":{\"394\":1}}],[\"<meta\",{\"1\":{\"1004\":3}}],[\"<module>\",{\"1\":{\"436\":1}}],[\"<i\",{\"1\":{\"1102\":1}}],[\"<iframe>\",{\"1\":{\"1055\":1}}],[\"<iostream>\",{\"1\":{\"1004\":1}}],[\"<init\",{\"1\":{\"1605\":1}}],[\"<init>\",{\"1\":{\"664\":4}}],[\"<input\",{\"1\":{\"892\":2,\"937\":1,\"938\":1,\"939\":2,\"940\":4,\"941\":2,\"1004\":1}}],[\"<input>\",{\"1\":{\"436\":1}}],[\"<itertools>\",{\"1\":{\"329\":1}}],[\"<itertools\",{\"1\":{\"146\":1}}],[\"<<<\",{\"1\":{\"380\":1,\"388\":3,\"808\":1,\"1109\":2}}],[\"<<\",{\"1\":{\"245\":1,\"400\":1,\"455\":4,\"510\":2,\"528\":1,\"691\":3,\"693\":7,\"706\":2,\"707\":11,\"820\":1,\"1004\":2,\"1309\":4,\"1365\":3,\"1403\":2,\"1405\":11}}],[\"<=\",{\"1\":{\"15\":4,\"19\":1,\"20\":1,\"21\":1,\"25\":1,\"26\":1,\"30\":1,\"31\":1,\"32\":3,\"34\":1,\"35\":2,\"36\":4,\"74\":2,\"77\":1,\"79\":2,\"80\":2,\"85\":2,\"103\":1,\"125\":1,\"132\":1,\"149\":3,\"155\":1,\"165\":2,\"289\":1,\"980\":1,\"1320\":1}}],[\"<\",{\"1\":{\"9\":3,\"15\":2,\"19\":1,\"20\":1,\"21\":2,\"25\":2,\"26\":1,\"30\":2,\"31\":1,\"32\":1,\"33\":3,\"34\":1,\"35\":3,\"74\":4,\"76\":2,\"79\":2,\"80\":2,\"85\":2,\"91\":3,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"103\":1,\"126\":4,\"149\":1,\"150\":2,\"165\":2,\"166\":1,\"169\":4,\"177\":1,\"178\":1,\"183\":2,\"184\":2,\"185\":1,\"186\":4,\"245\":16,\"373\":1,\"374\":1,\"386\":1,\"432\":2,\"466\":1,\"467\":1,\"480\":2,\"496\":1,\"508\":1,\"509\":3,\"524\":3,\"568\":1,\"687\":2,\"892\":2,\"896\":4,\"897\":3,\"931\":2,\"934\":3,\"938\":2,\"939\":3,\"940\":1,\"944\":3,\"982\":3,\"987\":1,\"1004\":8,\"1081\":1,\"1109\":4,\"1110\":2,\"1159\":3,\"1299\":1,\"1320\":1,\"1333\":2,\"1365\":1,\"1424\":1,\"1463\":1,\"1520\":1,\"1545\":1,\"1598\":1}}],[\"个相似的接口\",{\"1\":{\"1517\":1}}],[\"个相邻的节点\",{\"1\":{\"88\":1}}],[\"个取值\",{\"1\":{\"1483\":1}}],[\"个变量\",{\"1\":{\"1231\":1}}],[\"个值\",{\"1\":{\"1155\":1}}],[\"个小时的偏差\",{\"1\":{\"1113\":1}}],[\"个较大的影响最终定位误差\",{\"1\":{\"1012\":1}}],[\"个重复的\",{\"1\":{\"987\":1}}],[\"个以上的重复\",{\"1\":{\"987\":1}}],[\"个报文段\",{\"1\":{\"987\":1}}],[\"个字段组成\",{\"1\":{\"972\":1}}],[\"个字节拷贝到\",{\"1\":{\"1470\":1}}],[\"个字节开始\",{\"1\":{\"1464\":1}}],[\"个字节\",{\"1\":{\"674\":1,\"679\":1}}],[\"个都是调用\",{\"1\":{\"739\":1}}],[\"个特权模式\",{\"1\":{\"724\":1}}],[\"个指令\",{\"1\":{\"594\":1}}],[\"个先进的预测器\",{\"1\":{\"581\":1,\"583\":1}}],[\"个表\",{\"1\":{\"562\":1}}],[\"个分支的历史\",{\"1\":{\"559\":1}}],[\"个动态指令结果之间的\",{\"1\":{\"545\":1}}],[\"个预测器中拥有最小的置信阈值\",{\"1\":{\"587\":1}}],[\"个预测器进行简单的介绍\",{\"1\":{\"583\":1}}],[\"个预测器如下表所示\",{\"1\":{\"583\":1}}],[\"个预测器\",{\"1\":{\"545\":1}}],[\"个单位\",{\"1\":{\"459\":1}}],[\"个参数的方法就相当于调用再多一个参数的对应函数\",{\"1\":{\"419\":1}}],[\"个命名空间可被直接访问的嵌套作用域\",{\"1\":{\"418\":1}}],[\"个测试用例\",{\"1\":{\"387\":1}}],[\"个元素\",{\"1\":{\"316\":1}}],[\"个数\",{\"1\":{\"307\":1}}],[\"个数的组合\",{\"1\":{\"14\":1}}],[\"个子字符串仅由\",{\"1\":{\"167\":1}}],[\"个正整数的数组和一个正整数\",{\"1\":{\"160\":1}}],[\"个物品\",{\"1\":{\"118\":2}}],[\"个大礼包中包含的物品清单后剩余的物品清单\",{\"1\":{\"102\":1}}],[\"个大礼包的价格\",{\"1\":{\"102\":1}}],[\"个可能\",{\"1\":{\"88\":1}}],[\"个位置共有\",{\"1\":{\"88\":1}}],[\"个位置\",{\"1\":{\"88\":1}}],[\"个人认为最重要的\",{\"1\":{\"1352\":1}}],[\"个人认为这是学习的重点\",{\"1\":{\"724\":1}}],[\"个人猜测会不会也用\",{\"1\":{\"761\":1}}],[\"个人理解这样做的好处在于\",{\"1\":{\"1567\":1}}],[\"个人理解\",{\"1\":{\"261\":1}}],[\"个人进行编号\",{\"1\":{\"87\":1}}],[\"个人的理解是\",{\"1\":{\"11\":1}}],[\"个房间\",{\"1\":{\"75\":1}}],[\"个\",{\"1\":{\"9\":1,\"88\":2,\"104\":1,\"120\":8,\"192\":1,\"195\":1,\"198\":1,\"201\":1,\"204\":2,\"207\":2,\"245\":1,\"261\":1,\"502\":1,\"559\":1,\"562\":1,\"573\":1,\"624\":2,\"738\":1,\"739\":1,\"950\":2,\"972\":1,\"1598\":1}}],[\"时钟\",{\"1\":{\"1537\":1}}],[\"时钟等\",{\"1\":{\"1493\":1}}],[\"时钟时间为\",{\"1\":{\"985\":1}}],[\"时分配的\",{\"1\":{\"1340\":1}}],[\"时才会跳出循环\",{\"1\":{\"1333\":1}}],[\"时空的\",{\"1\":{\"1139\":1}}],[\"时常发生在波长远大于物体表面的粗糙度的时候\",{\"1\":{\"1134\":1}}],[\"时区问题\",{\"0\":{\"1113\":1}}],[\"时指数增长\",{\"1\":{\"987\":1}}],[\"时代\",{\"1\":{\"954\":1}}],[\"时可以去掉字符串中所有的标点\",{\"1\":{\"390\":1}}],[\"时序语法中的星号\",{\"1\":{\"291\":1}}],[\"时序语法有五个部分\",{\"1\":{\"291\":1}}],[\"时序语法\",{\"0\":{\"291\":1}}],[\"时间感兴趣\",{\"1\":{\"1605\":1}}],[\"时间内不能被使用\",{\"1\":{\"983\":1}}],[\"时间戳\",{\"1\":{\"789\":1}}],[\"时间\",{\"1\":{\"738\":1,\"1114\":1}}],[\"时间去\",{\"1\":{\"549\":1}}],[\"时间局部性\",{\"1\":{\"191\":1,\"192\":1}}],[\"时间复杂度和空间复杂度均为\",{\"1\":{\"96\":1}}],[\"时间复杂度\",{\"1\":{\"95\":1,\"98\":1}}],[\"时候的恢复有两种方式\",{\"1\":{\"565\":1}}],[\"时候\",{\"1\":{\"91\":1,\"1416\":1}}],[\"时\",{\"1\":{\"9\":1,\"424\":2,\"467\":1,\"763\":1,\"881\":1,\"981\":1,\"1316\":1,\"1523\":1}}],[\"gbinderproxyoffsets\",{\"1\":{\"1333\":2}}],[\"gbk\",{\"1\":{\"387\":1}}],[\"gfp\",{\"1\":{\"1307\":1,\"1345\":3}}],[\"gfwlist\",{\"1\":{\"1264\":3,\"1646\":3}}],[\"gmt+0800\",{\"1\":{\"905\":1}}],[\"gmethods\",{\"1\":{\"706\":4,\"1402\":1,\"1403\":3}}],[\"g++\",{\"1\":{\"776\":1,\"1439\":1,\"1445\":8,\"1446\":3,\"1448\":3,\"1449\":4}}],[\"gjninativeinterface\",{\"1\":{\"708\":1}}],[\"gunzip\",{\"1\":{\"1454\":1}}],[\"guaranteed\",{\"1\":{\"1385\":1}}],[\"guardedby\",{\"1\":{\"703\":2}}],[\"guess\",{\"1\":{\"986\":1,\"1060\":1}}],[\"guide\",{\"0\":{\"1098\":1},\"1\":{\"271\":1,\"757\":1,\"774\":1,\"1071\":1,\"1073\":1,\"1079\":1,\"1080\":1,\"1435\":1}}],[\"gnu\",{\"1\":{\"692\":1,\"785\":5,\"1463\":1,\"1554\":1,\"1558\":1}}],[\"gcc\",{\"1\":{\"959\":1,\"1145\":1,\"1439\":1,\"1459\":1,\"1463\":3}}],[\"gc\",{\"0\":{\"632\":1,\"1379\":1,\"1381\":1,\"1384\":1,\"1386\":1,\"1387\":1},\"1\":{\"674\":1,\"675\":2,\"676\":4,\"1379\":2,\"1380\":8,\"1381\":1,\"1383\":5,\"1385\":5,\"1386\":3,\"1388\":2},\"2\":{\"1391\":1}}],[\"gcd\",{\"0\":{\"398\":1,\"399\":1},\"1\":{\"399\":1}}],[\"gh\",{\"1\":{\"1236\":1}}],[\"ghz\",{\"1\":{\"1125\":1}}],[\"ghr\",{\"1\":{\"559\":4}}],[\"ghi\",{\"1\":{\"8\":1}}],[\"gl\",{\"1\":{\"1009\":1,\"1095\":3}}],[\"glossary\",{\"1\":{\"682\":1}}],[\"globally\",{\"1\":{\"930\":1,\"931\":1}}],[\"globalcontext\",{\"1\":{\"693\":2}}],[\"global\",{\"1\":{\"336\":2,\"337\":1,\"418\":16,\"449\":1,\"542\":1,\"543\":2,\"544\":1,\"545\":1,\"559\":5,\"875\":1,\"892\":2,\"930\":1,\"941\":1,\"943\":1,\"1142\":1,\"1185\":7,\"1212\":6,\"1217\":4,\"1243\":6,\"1244\":1,\"1251\":3,\"1463\":2}}],[\"glue\",{\"1\":{\"600\":1}}],[\"glance\",{\"1\":{\"552\":1,\"557\":1}}],[\"gdiff\",{\"1\":{\"545\":4}}],[\"gp\",{\"0\":{\"1586\":1},\"1\":{\"1586\":2}}],[\"gpl\",{\"1\":{\"1542\":1}}],[\"gplv2\",{\"1\":{\"273\":1}}],[\"gpu\",{\"1\":{\"446\":1,\"643\":2,\"1219\":2,\"1600\":2,\"1620\":1}}],[\"gary\",{\"1\":{\"1386\":1}}],[\"gaussian\",{\"1\":{\"1208\":1}}],[\"gauge\",{\"1\":{\"562\":1}}],[\"gateway\",{\"1\":{\"860\":1}}],[\"gather\",{\"1\":{\"415\":1}}],[\"games\",{\"1\":{\"776\":1}}],[\"gap\",{\"1\":{\"681\":1,\"682\":2}}],[\"gain\",{\"1\":{\"547\":1,\"562\":1,\"1143\":1}}],[\"gained\",{\"1\":{\"237\":1,\"1623\":1}}],[\"gabbay\",{\"1\":{\"543\":1}}],[\"gxx\",{\"1\":{\"314\":1}}],[\"gz>\",{\"1\":{\"1454\":5}}],[\"gzip\",{\"1\":{\"1454\":11}}],[\"gz\",{\"1\":{\"274\":1,\"712\":1,\"752\":1,\"770\":1,\"785\":1,\"1216\":3,\"1454\":4}}],[\"gone\",{\"1\":{\"1623\":1}}],[\"govenor\",{\"1\":{\"1607\":1}}],[\"governo\",{\"1\":{\"1607\":1}}],[\"governor三个实体\",{\"1\":{\"1532\":1}}],[\"governors\",{\"0\":{\"1606\":1},\"1\":{\"1531\":3,\"1532\":1,\"1605\":2,\"1606\":1,\"1609\":1}}],[\"governor\",{\"0\":{\"1602\":1,\"1607\":1,\"1608\":1,\"1609\":1},\"1\":{\"1516\":2,\"1531\":1,\"1532\":2,\"1534\":2,\"1590\":3,\"1591\":5,\"1597\":1,\"1599\":2,\"1601\":1,\"1602\":15,\"1606\":15,\"1607\":52,\"1608\":18,\"1609\":10,\"1610\":6}}],[\"governal\",{\"0\":{\"1599\":1},\"1\":{\"1599\":2}}],[\"govern\",{\"1\":{\"605\":1}}],[\"governed\",{\"1\":{\"576\":1}}],[\"gov\",{\"1\":{\"1606\":4,\"1607\":4,\"1609\":4,\"1610\":2}}],[\"got\",{\"1\":{\"1328\":1,\"1623\":2}}],[\"goto\",{\"1\":{\"1228\":2,\"1313\":1,\"1314\":1,\"1316\":1,\"1333\":5,\"1518\":1,\"1545\":2}}],[\"go\",{\"1\":{\"703\":1,\"1009\":1,\"1542\":1,\"1545\":3}}],[\"goeman\",{\"1\":{\"545\":1}}],[\"googlesource\",{\"1\":{\"1240\":1}}],[\"google\",{\"1\":{\"308\":4,\"676\":1,\"761\":7,\"967\":1,\"1352\":1,\"1353\":1}}],[\"good\",{\"1\":{\"165\":1,\"197\":1,\"297\":1,\"562\":1,\"1060\":1,\"1202\":1,\"1219\":1,\"1619\":1,\"1623\":1}}],[\"going\",{\"1\":{\"227\":2,\"1545\":1}}],[\"giant\",{\"1\":{\"1623\":1}}],[\"giants\",{\"1\":{\"1623\":2}}],[\"gic\",{\"1\":{\"1499\":4}}],[\"gicv2\",{\"1\":{\"1499\":1}}],[\"gi\",{\"1\":{\"1252\":1}}],[\"gif|jpg|png\",{\"1\":{\"759\":1}}],[\"git会保留数据一段时间知道下一次触发垃圾回收\",{\"1\":{\"1253\":1}}],[\"git会创建一个可移动的新指针供你使用\",{\"1\":{\"1252\":1}}],[\"git默认情况下会自动地创建跟踪这远程origin\",{\"1\":{\"1253\":1}}],[\"git的\",{\"1\":{\"1253\":1}}],[\"gitignore\",{\"0\":{\"1248\":1},\"1\":{\"1248\":2}}],[\"gitlab\",{\"1\":{\"892\":1}}],[\"git\",{\"0\":{\"1235\":1,\"1241\":1,\"1243\":1,\"1245\":1,\"1251\":1,\"1252\":1},\"1\":{\"747\":1,\"1056\":1,\"1072\":4,\"1077\":3,\"1099\":3,\"1145\":1,\"1161\":2,\"1237\":1,\"1239\":4,\"1240\":2,\"1241\":10,\"1242\":2,\"1243\":10,\"1245\":1,\"1246\":5,\"1247\":2,\"1248\":3,\"1249\":10,\"1250\":8,\"1251\":5,\"1252\":9,\"1253\":12,\"1259\":3,\"1642\":1},\"2\":{\"1256\":1}}],[\"github↩︎\",{\"1\":{\"1451\":1}}],[\"githubusercontent\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"github\",{\"0\":{\"1071\":1,\"1072\":1,\"1236\":1,\"1244\":1},\"1\":{\"47\":1,\"170\":1,\"297\":1,\"454\":2,\"460\":1,\"740\":1,\"848\":1,\"890\":1,\"892\":2,\"906\":1,\"925\":1,\"928\":1,\"944\":1,\"1000\":1,\"1071\":1,\"1072\":3,\"1074\":2,\"1075\":1,\"1077\":3,\"1091\":1,\"1098\":1,\"1099\":3,\"1105\":2,\"1161\":1,\"1236\":1,\"1244\":3,\"1258\":3,\"1259\":2,\"1263\":1,\"1265\":2,\"1413\":1,\"1435\":1,\"1472\":1,\"1534\":1,\"1633\":2,\"1635\":3,\"1645\":1,\"1647\":2}}],[\"gids\",{\"1\":{\"702\":2}}],[\"gid\",{\"1\":{\"702\":2,\"703\":1}}],[\"gil只有一个\",{\"1\":{\"277\":1}}],[\"gil\",{\"1\":{\"276\":3,\"277\":1,\"279\":3}}],[\"give\",{\"1\":{\"354\":1,\"1099\":1,\"1492\":1}}],[\"gives\",{\"1\":{\"204\":1,\"1202\":1,\"1592\":1}}],[\"given\",{\"1\":{\"182\":1,\"236\":1,\"255\":1,\"552\":1,\"778\":1,\"1186\":1,\"1491\":1}}],[\"g\",{\"1\":{\"90\":4,\"235\":1,\"270\":1,\"321\":1,\"393\":1,\"398\":1,\"552\":1,\"558\":1,\"682\":1,\"718\":1,\"750\":3,\"783\":1,\"804\":1,\"850\":2,\"890\":1,\"916\":2,\"918\":2,\"928\":1,\"955\":1,\"1075\":1,\"1143\":2,\"1185\":1,\"1202\":1,\"1203\":1,\"1212\":1,\"1250\":1,\"1259\":1,\"1432\":1,\"1496\":1}}],[\"growth\",{\"1\":{\"1623\":1}}],[\"ground\",{\"1\":{\"1021\":2,\"1155\":1}}],[\"group1\",{\"1\":{\"1499\":1}}],[\"group0\",{\"1\":{\"1499\":5}}],[\"groups\",{\"1\":{\"1143\":1}}],[\"grouping\",{\"1\":{\"1124\":1}}],[\"grouper\",{\"0\":{\"314\":1},\"1\":{\"314\":4,\"315\":1,\"329\":2}}],[\"grouped\",{\"1\":{\"194\":1}}],[\"group\",{\"1\":{\"194\":1,\"293\":2,\"557\":2,\"783\":1,\"1143\":1,\"1590\":2,\"1623\":2}}],[\"grace\",{\"1\":{\"1583\":1,\"1586\":1}}],[\"graceful\",{\"1\":{\"758\":1}}],[\"gray\",{\"1\":{\"1195\":1,\"1196\":3,\"1385\":4,\"1386\":8,\"1388\":3,\"1389\":2}}],[\"grayscale\",{\"1\":{\"1192\":1}}],[\"grab\",{\"1\":{\"1189\":1}}],[\"gradientdescentoptimizer\",{\"1\":{\"1185\":1}}],[\"grade\",{\"1\":{\"785\":1}}],[\"grained\",{\"1\":{\"1127\":1}}],[\"grammar\",{\"1\":{\"820\":1,\"1009\":1}}],[\"graphics\",{\"1\":{\"703\":1,\"776\":1}}],[\"grub\",{\"1\":{\"750\":3}}],[\"grub2\",{\"1\":{\"715\":1}}],[\"greatly\",{\"1\":{\"1623\":2}}],[\"great\",{\"1\":{\"1060\":1,\"1623\":1}}],[\"greater\",{\"0\":{\"467\":1},\"1\":{\"21\":2,\"179\":2,\"467\":2,\"492\":1,\"1212\":1}}],[\"green\",{\"1\":{\"898\":1}}],[\"greenm\",{\"1\":{\"898\":1}}],[\"greeting\",{\"1\":{\"785\":1}}],[\"greet\",{\"1\":{\"425\":3,\"427\":4}}],[\"grep\",{\"1\":{\"750\":1,\"753\":1,\"758\":1,\"1231\":2,\"1265\":2,\"1269\":1,\"1275\":2,\"1279\":1,\"1647\":2}}],[\"grid\",{\"1\":{\"76\":16,\"85\":6,\"1155\":1}}],[\"gem\",{\"0\":{\"1634\":1},\"1\":{\"1073\":4,\"1634\":3,\"1641\":1}}],[\"gems\",{\"1\":{\"1073\":5,\"1634\":3}}],[\"gem5\",{\"1\":{\"564\":2}}],[\"geometric\",{\"0\":{\"559\":1},\"1\":{\"342\":1,\"559\":1}}],[\"geeksquiz\",{\"1\":{\"108\":1}}],[\"geeksforgeeks\",{\"1\":{\"108\":1}}],[\"gen\",{\"1\":{\"92\":13,\"374\":3}}],[\"generic\",{\"1\":{\"562\":1,\"1145\":1,\"1499\":2,\"1528\":1}}],[\"generating\",{\"1\":{\"1419\":1}}],[\"generation\",{\"1\":{\"562\":1}}],[\"generator\",{\"0\":{\"294\":1},\"1\":{\"558\":1}}],[\"generated\",{\"1\":{\"1536\":1}}],[\"generates\",{\"1\":{\"212\":2}}],[\"generate\",{\"1\":{\"9\":4,\"553\":1,\"582\":1,\"855\":1,\"1071\":1,\"1126\":1,\"1219\":1}}],[\"generateparenthesis\",{\"1\":{\"9\":2}}],[\"generally\",{\"1\":{\"454\":1,\"548\":1,\"558\":1,\"1123\":1}}],[\"general\",{\"1\":{\"245\":1,\"342\":1,\"573\":2,\"600\":1,\"986\":1,\"1178\":1,\"1216\":1,\"1483\":1,\"1620\":1}}],[\"genetic\",{\"1\":{\"92\":1}}],[\"getobjectoffsets\",{\"1\":{\"1320\":1}}],[\"getoffsetssize\",{\"1\":{\"1320\":1}}],[\"getoutputstream\",{\"1\":{\"703\":1}}],[\"getdata\",{\"1\":{\"1320\":1}}],[\"getdatasize\",{\"1\":{\"1320\":2}}],[\"getdate\",{\"1\":{\"906\":1}}],[\"getabstracthandlerlist\",{\"1\":{\"1627\":1}}],[\"getabilist\",{\"1\":{\"703\":1}}],[\"getandexecutecommand\",{\"0\":{\"1300\":1},\"1\":{\"1299\":2,\"1300\":1}}],[\"getvar\",{\"1\":{\"1285\":1}}],[\"getversion\",{\"1\":{\"708\":1}}],[\"getfl\",{\"1\":{\"956\":1}}],[\"getfullyear\",{\"1\":{\"905\":1,\"906\":1}}],[\"getprop\",{\"1\":{\"1285\":1,\"1287\":1}}],[\"getpeername\",{\"1\":{\"950\":2}}],[\"getppid\",{\"1\":{\"738\":1}}],[\"getitem\",{\"1\":{\"927\":4}}],[\"getinfo\",{\"1\":{\"923\":2}}],[\"getinputstream\",{\"1\":{\"703\":1}}],[\"getintersectionnode\",{\"1\":{\"459\":1}}],[\"getminutes\",{\"1\":{\"906\":1}}],[\"getmonth\",{\"1\":{\"905\":1,\"906\":1,\"907\":1}}],[\"gethours\",{\"1\":{\"906\":1}}],[\"getcharnocheck\",{\"1\":{\"1371\":1}}],[\"getchars\",{\"1\":{\"706\":1,\"1402\":1}}],[\"getcharsnocheck\",{\"1\":{\"705\":1,\"706\":4,\"1400\":1,\"1402\":4}}],[\"getcontext\",{\"1\":{\"892\":1}}],[\"getelementbyid\",{\"1\":{\"892\":4}}],[\"getenv\",{\"1\":{\"858\":1}}],[\"getbean\",{\"1\":{\"872\":1,\"881\":1}}],[\"getreturntype\",{\"1\":{\"693\":1}}],[\"getting\",{\"1\":{\"551\":1}}],[\"getname\",{\"1\":{\"424\":12,\"693\":1}}],[\"getnumberofk\",{\"1\":{\"32\":1}}],[\"getsockname\",{\"1\":{\"950\":1}}],[\"getseconds\",{\"1\":{\"906\":1}}],[\"getsuperclass\",{\"1\":{\"708\":1}}],[\"getstartedlab\",{\"1\":{\"623\":3,\"624\":3}}],[\"gets\",{\"1\":{\"401\":2}}],[\"getline\",{\"0\":{\"354\":1,\"359\":1,\"360\":1},\"1\":{\"354\":3,\"356\":1,\"359\":2,\"360\":2}}],[\"getlines\",{\"0\":{\"355\":1},\"1\":{\"289\":2,\"354\":1,\"355\":2,\"356\":2}}],[\"get\",{\"0\":{\"998\":1,\"1594\":1,\"1595\":1},\"1\":{\"32\":4,\"88\":3,\"154\":1,\"241\":1,\"270\":1,\"273\":1,\"289\":12,\"297\":2,\"299\":1,\"315\":2,\"329\":1,\"341\":1,\"354\":2,\"392\":1,\"408\":1,\"445\":1,\"453\":2,\"467\":1,\"480\":2,\"492\":1,\"499\":4,\"510\":1,\"622\":3,\"691\":1,\"692\":1,\"706\":2,\"712\":1,\"744\":1,\"749\":2,\"770\":1,\"774\":1,\"775\":1,\"777\":1,\"785\":1,\"796\":1,\"850\":1,\"861\":1,\"892\":1,\"916\":2,\"923\":1,\"927\":1,\"998\":5,\"999\":1,\"1056\":1,\"1073\":2,\"1079\":1,\"1142\":2,\"1145\":2,\"1185\":7,\"1186\":11,\"1201\":1,\"1202\":1,\"1204\":1,\"1209\":1,\"1217\":2,\"1226\":1,\"1228\":1,\"1307\":1,\"1315\":1,\"1320\":1,\"1344\":1,\"1403\":2,\"1431\":1,\"1529\":2,\"1534\":3,\"1543\":2,\"1593\":7,\"1594\":1,\"1600\":2,\"1611\":1}}],[\"ge\",{\"1\":{\"21\":1,\"517\":2}}],[\"gt\",{\"1\":{\"21\":1,\"517\":2}}],[\"来打开该功能\",{\"1\":{\"1541\":1}}],[\"来打印出我们想要的信息\",{\"1\":{\"693\":1}}],[\"来禁止中断\",{\"1\":{\"1517\":1}}],[\"来更新\",{\"1\":{\"1501\":1}}],[\"来启动他们\",{\"1\":{\"1475\":1}}],[\"来将多个命令连接起来\",{\"1\":{\"1454\":1}}],[\"来触发一个\",{\"1\":{\"1374\":1}}],[\"来规避这个问题\",{\"1\":{\"1353\":1}}],[\"来自于函数传参\",{\"1\":{\"1544\":1}}],[\"来自于\",{\"1\":{\"1345\":1}}],[\"来自天线的信号通过下转频转换得到基带信号\",{\"1\":{\"1020\":1}}],[\"来看定义\",{\"1\":{\"1320\":1}}],[\"来看看有什么变化\",{\"1\":{\"682\":1}}],[\"来看看一年后的解法是怎么写的\",{\"1\":{\"499\":1}}],[\"来研究一下序列化\",{\"1\":{\"1320\":1}}],[\"来控制样式\",{\"1\":{\"1179\":1}}],[\"来表示\",{\"1\":{\"1383\":1}}],[\"来表示转盘密码\",{\"1\":{\"88\":1}}],[\"来表征\",{\"1\":{\"1155\":1}}],[\"来记录自己睡觉的时间\",{\"1\":{\"1042\":1}}],[\"来记录窗口中数字出现的次数\",{\"1\":{\"168\":1}}],[\"来估算\",{\"1\":{\"1020\":1}}],[\"来决定如何返回\",{\"1\":{\"984\":1}}],[\"来检测数据的变化\",{\"1\":{\"925\":1}}],[\"来解决线程安全的问题\",{\"1\":{\"876\":1}}],[\"来解决这个问题\",{\"1\":{\"202\":1}}],[\"来完成\",{\"1\":{\"725\":1}}],[\"来完成进程的创建\",{\"1\":{\"703\":1}}],[\"来观察一下这个类的内存分布\",{\"1\":{\"681\":1}}],[\"来展示\",{\"1\":{\"681\":1}}],[\"来帮助解答这个问题\",{\"1\":{\"655\":1}}],[\"来配置\",{\"1\":{\"623\":1}}],[\"来存储\",{\"1\":{\"601\":1}}],[\"来减少错误预测带来的损失\",{\"1\":{\"581\":1}}],[\"来说\",{\"1\":{\"549\":1,\"602\":1}}],[\"来进行判断\",{\"1\":{\"1426\":1}}],[\"来进行虚拟机创建\",{\"1\":{\"1365\":1}}],[\"来进行处理了\",{\"1\":{\"1301\":1}}],[\"来进行数据淘汰\",{\"1\":{\"827\":1}}],[\"来进行存储\",{\"1\":{\"460\":1}}],[\"来进行自定义比较\",{\"1\":{\"173\":1}}],[\"来告诉\",{\"1\":{\"436\":1}}],[\"来调用对象的方法\",{\"1\":{\"435\":1}}],[\"来创建虚拟机\",{\"1\":{\"1365\":1}}],[\"来创建一个\",{\"1\":{\"1365\":1}}],[\"来创建自定义的\",{\"1\":{\"1304\":1}}],[\"来创建子进程\",{\"1\":{\"738\":1}}],[\"来创建实例\",{\"1\":{\"431\":1}}],[\"来创建我们的虚环境了\",{\"1\":{\"275\":1}}],[\"来实例化对象实例吗\",{\"1\":{\"430\":1}}],[\"来实现的\",{\"1\":{\"1333\":1}}],[\"来实现我们的目的\",{\"1\":{\"662\":1}}],[\"来实现\",{\"1\":{\"427\":1,\"832\":1,\"1429\":1}}],[\"来实现这个\",{\"1\":{\"259\":1}}],[\"来装饰\",{\"1\":{\"422\":1}}],[\"来指定要跳过的测试\",{\"1\":{\"373\":1}}],[\"来捕获异常\",{\"1\":{\"371\":1}}],[\"来方便了我们的操作\",{\"1\":{\"360\":1}}],[\"来取值\",{\"1\":{\"356\":1}}],[\"来制定日志的打印级别\",{\"1\":{\"324\":1}}],[\"来判断是否与原有字典长度相等达到解决问题的目的\",{\"1\":{\"299\":1}}],[\"来判断如果下一层的\",{\"1\":{\"10\":1}}],[\"来标识在这个\",{\"1\":{\"262\":1}}],[\"来做的\",{\"1\":{\"252\":1}}],[\"来索引\",{\"1\":{\"204\":1}}],[\"来索引的\",{\"1\":{\"204\":1}}],[\"来在\",{\"1\":{\"204\":1}}],[\"来一个看不懂的解法\",{\"1\":{\"165\":1}}],[\"来求解这个问题\",{\"1\":{\"74\":1}}],[\"来加深印象\",{\"1\":{\"46\":1}}],[\"来计算\",{\"1\":{\"28\":1}}],[\"来筛选一下数据\",{\"1\":{\"9\":1}}],[\"来源是\",{\"1\":{\"1497\":1}}],[\"来源于\",{\"1\":{\"559\":1}}],[\"来源于分支预测的\",{\"1\":{\"559\":1}}],[\"来源\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"75\":1,\"76\":1,\"86\":1,\"87\":1,\"92\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1}}],[\"是降温策略的一个抽象\",{\"1\":{\"1599\":1}}],[\"是温控的执行者\",{\"1\":{\"1597\":1}}],[\"是linux内核中的一个函数\",{\"1\":{\"1585\":1}}],[\"是指一个\",{\"1\":{\"1584\":1}}],[\"是指令维度\",{\"1\":{\"593\":1}}],[\"是告诉编译器这个函数很可能不被执行到\",{\"1\":{\"1553\":1}}],[\"是多了一些同步的调用方法\",{\"1\":{\"1551\":1}}],[\"是多线程\",{\"1\":{\"277\":1}}],[\"是设置\",{\"1\":{\"1545\":1}}],[\"是周期性产生的\",{\"1\":{\"1541\":1}}],[\"是英文\",{\"1\":{\"1537\":1}}],[\"是变量名\",{\"1\":{\"1529\":1}}],[\"是会无条件激活中断的\",{\"1\":{\"1517\":1}}],[\"是挂在不同的处理器上面的\",{\"1\":{\"1510\":1}}],[\"是访问\",{\"1\":{\"1498\":1}}],[\"是与\",{\"1\":{\"1498\":1}}],[\"是与预测器关联的\",{\"1\":{\"593\":1}}],[\"是内存管理单元\",{\"1\":{\"1484\":1}}],[\"是内核中的系统调用\",{\"1\":{\"739\":1}}],[\"是什么\",{\"1\":{\"1479\":1}}],[\"是为了防止命名空间冲突\",{\"1\":{\"1471\":1}}],[\"是只读的\",{\"1\":{\"1460\":1}}],[\"是个伪目标文件\",{\"1\":{\"1445\":1}}],[\"是更加高效\",{\"1\":{\"1358\":1}}],[\"是通过电擦除的方式来更新的\",{\"1\":{\"1501\":1}}],[\"是通过\",{\"1\":{\"1333\":1}}],[\"是存在一些优化的空间在的\",{\"1\":{\"1330\":1}}],[\"是存储了所有的指令\",{\"1\":{\"550\":1}}],[\"是给\",{\"1\":{\"1320\":1}}],[\"是依靠这个对象来进行数据的传输的\",{\"1\":{\"1320\":1}}],[\"是实际对系统实施冷却措施的驱动\",{\"1\":{\"1597\":1}}],[\"是实现\",{\"1\":{\"1318\":1}}],[\"是实例方法\",{\"1\":{\"431\":1}}],[\"是读写场景中的哪个\",{\"1\":{\"1301\":1}}],[\"是怎么处理的\",{\"1\":{\"1580\":1}}],[\"是怎么处理这种\",{\"1\":{\"1299\":1}}],[\"是怎么实现的呢\",{\"1\":{\"252\":1}}],[\"是空闲的\",{\"1\":{\"1341\":1}}],[\"是空\",{\"1\":{\"1299\":1}}],[\"是能够从\",{\"1\":{\"1275\":1}}],[\"是分类问题中使用比较广的一种损失函数\",{\"1\":{\"1212\":1}}],[\"是最高的\",{\"1\":{\"1479\":1}}],[\"是最高效的方式\",{\"1\":{\"580\":1}}],[\"是最后的参数\",{\"1\":{\"1162\":1}}],[\"是相对于每个单元格左上角坐标点的偏移值\",{\"1\":{\"1155\":1}}],[\"是边界框的宽与高\",{\"1\":{\"1155\":1}}],[\"是边界框的中心坐标\",{\"1\":{\"1155\":1}}],[\"是接收信号强度的功率\",{\"1\":{\"1020\":1}}],[\"是目标检测问题的目的和重点\",{\"1\":{\"1012\":1}}],[\"是基于wifi的室内定位系统采用的主要技术\",{\"1\":{\"1012\":1}}],[\"是基于栈的\",{\"1\":{\"688\":1}}],[\"是将字符串转化为\",{\"1\":{\"1596\":1}}],[\"是将\",{\"1\":{\"993\":1}}],[\"是将数据从寄存器移动到内存\",{\"1\":{\"235\":1}}],[\"是将数据从内存移动到寄存器\",{\"1\":{\"235\":1}}],[\"是每个连接的\",{\"1\":{\"988\":1}}],[\"是随机产生的\",{\"1\":{\"982\":1}}],[\"是受到了\",{\"1\":{\"981\":1}}],[\"是数据流协议\",{\"1\":{\"980\":1}}],[\"是表示接收端可以接受的字节大小\",{\"1\":{\"978\":1}}],[\"是网络层\",{\"1\":{\"971\":1}}],[\"是万维网\",{\"1\":{\"965\":1,\"966\":1}}],[\"是创建带缓冲区的事件\",{\"1\":{\"962\":1}}],[\"是值\",{\"1\":{\"950\":1}}],[\"是面向切面编程的意思\",{\"1\":{\"878\":1}}],[\"是线程安全吗\",{\"0\":{\"876\":1}}],[\"是apply\",{\"1\":{\"844\":1}}],[\"是已知的性能最快的\",{\"1\":{\"825\":1}}],[\"是程序在执行过程中分配和管理资源的基本单位\",{\"1\":{\"736\":1}}],[\"是当前虚拟化引擎的主要解决方案\",{\"1\":{\"724\":1}}],[\"是谁调用了\",{\"1\":{\"706\":1,\"1403\":1}}],[\"是由\",{\"1\":{\"1483\":1}}],[\"是由多个\",{\"1\":{\"691\":1}}],[\"是由很多个\",{\"1\":{\"194\":1}}],[\"是后端的输入\",{\"1\":{\"690\":1}}],[\"是使用\",{\"1\":{\"688\":1}}],[\"是即时编译技术\",{\"1\":{\"653\":1}}],[\"是提前编译技术\",{\"1\":{\"653\":1}}],[\"是华为云推出的一种可随时获取\",{\"1\":{\"644\":1}}],[\"是主要收入来源\",{\"1\":{\"639\":1}}],[\"是我们给\",{\"1\":{\"623\":1}}],[\"是我们找到的两个数之间的距离的最大值\",{\"1\":{\"36\":1}}],[\"是直接映射的\",{\"1\":{\"601\":1}}],[\"是对比\",{\"1\":{\"584\":1}}],[\"是预测\",{\"1\":{\"576\":1}}],[\"是无用的\",{\"1\":{\"559\":2}}],[\"是无法使用的\",{\"1\":{\"480\":1}}],[\"是以固定的概率触发的\",{\"1\":{\"558\":1}}],[\"是用的解释器模式\",{\"1\":{\"655\":1}}],[\"是用了\",{\"1\":{\"614\":1}}],[\"是用来保存将要被\",{\"1\":{\"552\":1}}],[\"是用于标识要访问的\",{\"1\":{\"261\":1}}],[\"是如何体现出来的\",{\"1\":{\"1302\":1}}],[\"是如何体现的\",{\"1\":{\"542\":1}}],[\"是如何调用\",{\"1\":{\"696\":1,\"1396\":1}}],[\"是如何使用的呢\",{\"1\":{\"658\":1}}],[\"是如何知道的呢\",{\"1\":{\"205\":1}}],[\"是栈应用的经典案例\",{\"1\":{\"465\":1}}],[\"是类方法\",{\"1\":{\"431\":1}}],[\"是在求解一个\",{\"1\":{\"1469\":1}}],[\"是在容器启动时就一次性创建了所有的\",{\"1\":{\"873\":1}}],[\"是在最前面的\",{\"1\":{\"503\":1}}],[\"是在\",{\"1\":{\"431\":1,\"1389\":1}}],[\"是按照优先级排列的\",{\"1\":{\"1567\":1}}],[\"是按照\",{\"1\":{\"424\":1}}],[\"是包含内置名称的命名空间\",{\"1\":{\"418\":1}}],[\"是编写异步应用的推荐方式\",{\"1\":{\"414\":1}}],[\"是不存在的\",{\"1\":{\"1608\":1}}],[\"是不依赖于其他任何初始化函数的最先运行的\",{\"1\":{\"1552\":1}}],[\"是不确定的\",{\"1\":{\"1551\":2}}],[\"是不一样的\",{\"1\":{\"981\":1}}],[\"是不可靠的协议\",{\"1\":{\"979\":1}}],[\"是不可以读操作的\",{\"1\":{\"361\":1}}],[\"是不是就破坏了\",{\"1\":{\"695\":1,\"1395\":1}}],[\"是不是被正常加载了\",{\"1\":{\"658\":1}}],[\"是不是和斐波那契数列一模一样\",{\"1\":{\"103\":1}}],[\"是不是很优雅\",{\"1\":{\"42\":1}}],[\"是可以降温设备的抽象\",{\"1\":{\"1600\":1}}],[\"是可以使用大表的\",{\"1\":{\"553\":1}}],[\"是可以的\",{\"1\":{\"11\":1}}],[\"是可选的\",{\"1\":{\"502\":1}}],[\"是可访问可修改的吗\",{\"1\":{\"361\":1}}],[\"是滑动窗口的接口\",{\"1\":{\"329\":1}}],[\"是比较快速的迭代方法\",{\"1\":{\"329\":1}}],[\"是未排序的字典\",{\"1\":{\"304\":1}}],[\"是需要传入我们需要计算的迭代器对象的\",{\"1\":{\"289\":1}}],[\"是进程共享的\",{\"1\":{\"252\":1}}],[\"是两个独立的进程\",{\"1\":{\"251\":1}}],[\"是开源的\",{\"1\":{\"235\":1}}],[\"是专门负责数据搬移的模块\",{\"1\":{\"226\":1}}],[\"是等到\",{\"1\":{\"226\":1}}],[\"是透明的\",{\"1\":{\"226\":1}}],[\"是这么玩的\",{\"1\":{\"1575\":1}}],[\"是这么定义的\",{\"1\":{\"377\":1}}],[\"是这么做的\",{\"1\":{\"217\":1}}],[\"是这个节点\",{\"1\":{\"86\":1}}],[\"是因为这是一个静态初始化的全局变量\",{\"1\":{\"1607\":1}}],[\"是因为我觉得研究这两者是密不可分的\",{\"1\":{\"268\":1}}],[\"是因为失效代价很大\",{\"1\":{\"213\":1}}],[\"是因为有时候会遇到奇数的情况\",{\"1\":{\"184\":1}}],[\"是微不足道的\",{\"1\":{\"212\":1}}],[\"是知道这次访问需要的数据大小的\",{\"1\":{\"205\":1}}],[\"是该\",{\"1\":{\"195\":1}}],[\"是该条件下的长度最小的子数组\",{\"1\":{\"160\":1}}],[\"是具有相同数量0和1的最长连续子数组\",{\"1\":{\"158\":1}}],[\"是\",{\"1\":{\"156\":1,\"195\":1,\"301\":1,\"328\":1,\"353\":1,\"361\":3,\"467\":1,\"479\":1,\"559\":2,\"593\":1,\"602\":1,\"724\":1,\"824\":1,\"825\":1,\"873\":1,\"972\":1,\"1020\":1,\"1293\":1,\"1304\":2,\"1305\":1,\"1307\":1,\"1345\":1,\"1366\":1,\"1386\":1,\"1388\":1,\"1501\":1,\"1508\":1,\"1532\":1,\"1556\":1,\"1589\":1,\"1605\":1,\"1626\":1}}],[\"是集合\",{\"1\":{\"120\":1}}],[\"是前\",{\"1\":{\"117\":1}}],[\"是有很多相似之处的\",{\"1\":{\"100\":1}}],[\"是错误的\",{\"1\":{\"88\":1}}],[\"是和这个节点的前驱\",{\"1\":{\"86\":1}}],[\"是从根结点开始\",{\"1\":{\"71\":1}}],[\"是一直在运行这个\",{\"1\":{\"1515\":1}}],[\"是一件很困难的事情\",{\"1\":{\"1357\":1}}],[\"是一篇论文的实现\",{\"1\":{\"1354\":1}}],[\"是一般用法\",{\"1\":{\"820\":1}}],[\"是一种同步机制\",{\"1\":{\"1583\":1}}],[\"是一种读取数据不加锁的机制\",{\"1\":{\"1583\":1}}],[\"是一种整形的类型\",{\"1\":{\"1471\":1}}],[\"是一种设计思想\",{\"1\":{\"871\":1}}],[\"是一种开源的虚拟化技术\",{\"1\":{\"724\":1}}],[\"是一种机制\",{\"1\":{\"592\":1}}],[\"是一种置信度的衡量机制\",{\"1\":{\"543\":1}}],[\"是一种图形搜索算法\",{\"1\":{\"71\":1}}],[\"是一些小写字母的排列\",{\"1\":{\"186\":1}}],[\"是一个静态的\",{\"1\":{\"1607\":1}}],[\"是一个静态方法\",{\"1\":{\"430\":1}}],[\"是一个非常有用的内核机制\",{\"1\":{\"1584\":1}}],[\"是一个非常基础的基类\",{\"1\":{\"691\":1}}],[\"是一个宏\",{\"1\":{\"1529\":1}}],[\"是一个空闲轮询机制\",{\"1\":{\"1528\":1}}],[\"是一个内核函数\",{\"1\":{\"1523\":1}}],[\"是一个位掩码\",{\"1\":{\"1521\":1}}],[\"是一个指向\",{\"1\":{\"1521\":1,\"1522\":1,\"1523\":1}}],[\"是一个指向当前所在的本地分支的指针\",{\"1\":{\"1252\":1}}],[\"是一个联盟\",{\"1\":{\"1508\":1}}],[\"是一个理想的短距离\",{\"1\":{\"1507\":1}}],[\"是一个什么\",{\"1\":{\"1481\":1}}],[\"是一个冷启动的路径\",{\"1\":{\"1474\":1}}],[\"是一个与机器相关的\",{\"1\":{\"1469\":1}}],[\"是一个在计算机之间安全传输文件的命令行工具\",{\"1\":{\"1453\":1}}],[\"是一个很重要的概念\",{\"1\":{\"1380\":1}}],[\"是一个流协议\",{\"1\":{\"976\":1}}],[\"是一个面向连接\",{\"1\":{\"976\":1}}],[\"是一个二进制的类\",{\"1\":{\"842\":1}}],[\"是一个二叉树\",{\"1\":{\"812\":1}}],[\"是一个基于分布式消息传输的异步任务队列\",{\"1\":{\"841\":1}}],[\"是一个动态概念\",{\"1\":{\"736\":1}}],[\"是一个常驻的系统服务\",{\"1\":{\"703\":1}}],[\"是一个序列化的表示形式\",{\"1\":{\"692\":1}}],[\"是一个十分具有分量的奖项\",{\"1\":{\"568\":1}}],[\"是一个\",{\"1\":{\"559\":1,\"616\":1,\"789\":1,\"982\":1,\"1320\":1,\"1333\":1,\"1345\":1,\"1534\":1,\"1544\":1}}],[\"是一个饱和计数器\",{\"1\":{\"559\":1}}],[\"是一个硬件\",{\"1\":{\"543\":1}}],[\"是一个可以记录其插入次序的字典\",{\"1\":{\"406\":1}}],[\"是一个大小为\",{\"1\":{\"156\":1}}],[\"是一个整数\",{\"1\":{\"132\":1}}],[\"是一个较为典型的二维动态规划问题\",{\"1\":{\"120\":1}}],[\"是一个经典的递推\",{\"1\":{\"118\":1}}],[\"是一道简单题\",{\"1\":{\"49\":1}}],[\"是正确的\",{\"1\":{\"22\":1}}],[\"是否空闲并进行相应的操作\",{\"1\":{\"1584\":1}}],[\"是否需要设置一个\",{\"1\":{\"1534\":1}}],[\"是否有任务过来需要调度\",{\"1\":{\"1518\":1}}],[\"是否过期需要重新开始以免进入深度睡眠\",{\"1\":{\"1518\":1}}],[\"是否正在被移动或者这个对象的引用指向一个\",{\"1\":{\"1381\":1}}],[\"是否已经分配物理内存\",{\"1\":{\"1344\":1}}],[\"是否为\",{\"1\":{\"1145\":1}}],[\"是否成功\",{\"1\":{\"534\":1}}],[\"是否覆盖\",{\"1\":{\"361\":1}}],[\"是否可以被空格拆分为一个或多个在字典中出现的单词\",{\"1\":{\"138\":1}}],[\"是否\",{\"1\":{\"9\":1}}],[\"是暴力搜索法中的一种\",{\"1\":{\"5\":1}}],[\"rq\",{\"1\":{\"1523\":3}}],[\"rwsem\",{\"1\":{\"1564\":5}}],[\"rw\",{\"1\":{\"1485\":1,\"1564\":1}}],[\"r>>\",{\"1\":{\"1216\":1}}],[\"rush\",{\"1\":{\"1623\":1}}],[\"rule\",{\"1\":{\"1236\":1,\"1264\":4,\"1646\":4}}],[\"rules\",{\"1\":{\"1060\":1,\"1204\":1,\"1432\":1}}],[\"rubygems\",{\"1\":{\"1073\":1,\"1634\":1}}],[\"ruby\",{\"1\":{\"1073\":5,\"1634\":3}}],[\"runqueue\",{\"1\":{\"1523\":1}}],[\"runs\",{\"1\":{\"1474\":1}}],[\"runserver\",{\"1\":{\"864\":1}}],[\"runoob10\",{\"1\":{\"424\":1}}],[\"runoob\",{\"1\":{\"424\":10}}],[\"run\",{\"0\":{\"786\":1},\"1\":{\"415\":1,\"509\":1,\"558\":1,\"600\":1,\"609\":2,\"610\":1,\"611\":1,\"612\":1,\"613\":1,\"616\":3,\"620\":1,\"621\":5,\"622\":1,\"623\":1,\"774\":1,\"776\":1,\"785\":1,\"858\":1,\"890\":1,\"1091\":1,\"1099\":2,\"1101\":1,\"1142\":3,\"1185\":3,\"1212\":19,\"1217\":5,\"1219\":4,\"1419\":1,\"1501\":2,\"1607\":1}}],[\"runtimeargumentmap\",{\"1\":{\"1366\":2,\"1367\":1}}],[\"runtimeoptions\",{\"1\":{\"1365\":1,\"1366\":1}}],[\"runtimeexception\",{\"1\":{\"702\":1}}],[\"runtimeflags\",{\"1\":{\"702\":2,\"703\":1}}],[\"runtime\",{\"0\":{\"1366\":1,\"1367\":1,\"1406\":1,\"1494\":1},\"1\":{\"321\":1,\"692\":1,\"703\":3,\"706\":5,\"707\":13,\"708\":1,\"851\":1,\"879\":1,\"1365\":10,\"1366\":17,\"1367\":5,\"1376\":2,\"1383\":1,\"1402\":4,\"1403\":1,\"1405\":12,\"1406\":2,\"1424\":1,\"1474\":2,\"1476\":1,\"1498\":1}}],[\"running\",{\"1\":{\"177\":2,\"237\":1,\"321\":1,\"624\":1,\"786\":1,\"1278\":1,\"1376\":2,\"1474\":1,\"1501\":2}}],[\"rpn\",{\"1\":{\"1151\":1}}],[\"rpn锚箱\",{\"1\":{\"1012\":1}}],[\"rpa\",{\"1\":{\"1021\":1}}],[\"rpc\",{\"1\":{\"843\":1,\"1320\":4,\"1328\":8}}],[\"rgb\",{\"1\":{\"898\":2,\"1142\":1,\"1189\":4,\"1192\":1}}],[\"rgba\",{\"1\":{\"892\":5,\"898\":1}}],[\"rcw\",{\"1\":{\"1584\":1}}],[\"rcu更新操作就可以继续进行\",{\"1\":{\"1526\":1}}],[\"rcu保护区才会被清空\",{\"1\":{\"1524\":1}}],[\"rcu是一种无锁机制\",{\"1\":{\"1524\":1}}],[\"rcu\",{\"0\":{\"1524\":1,\"1526\":1,\"1582\":1,\"1583\":1,\"1585\":1},\"1\":{\"1520\":4,\"1524\":9,\"1526\":4,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1567\":1,\"1570\":1,\"1571\":1,\"1573\":2,\"1575\":1,\"1583\":4,\"1584\":16,\"1585\":2,\"1586\":7}}],[\"rcvd\",{\"1\":{\"951\":1,\"983\":1,\"984\":2}}],[\"rc\",{\"1\":{\"850\":1}}],[\"rr\",{\"1\":{\"763\":1}}],[\"rrx\",{\"1\":{\"514\":1}}],[\"rm\",{\"1\":{\"1248\":1,\"1249\":3,\"1250\":1,\"1287\":1,\"1424\":1,\"1440\":1,\"1445\":2,\"1448\":1,\"1449\":1}}],[\"rmmmod\",{\"1\":{\"719\":1}}],[\"rmvirtualenv\",{\"1\":{\"445\":1}}],[\"rf编码神经网络使用10层的9x5x5的时空间卷积\",{\"1\":{\"1138\":1}}],[\"rf信号反射是一种常见的物理现象\",{\"1\":{\"1134\":1}}],[\"rf信号的获得和性能\",{\"0\":{\"1134\":1}}],[\"rfid和\",{\"1\":{\"1012\":1}}],[\"rfc793\",{\"1\":{\"978\":1,\"983\":1}}],[\"rf\",{\"0\":{\"1130\":1,\"1132\":1},\"1\":{\"712\":1,\"1130\":1,\"1132\":6}}],[\"r2p0↩︎\",{\"1\":{\"566\":1}}],[\"r=2w\",{\"1\":{\"557\":1}}],[\"rtp+=~\",{\"1\":{\"1259\":1}}],[\"rto=a+4d\",{\"1\":{\"978\":1}}],[\"rto\",{\"1\":{\"978\":1,\"983\":2}}],[\"rtt\",{\"1\":{\"951\":2,\"978\":3,\"983\":1}}],[\"rt\",{\"1\":{\"534\":2}}],[\"rtype\",{\"1\":{\"343\":1,\"401\":2}}],[\"rn\",{\"1\":{\"520\":3,\"534\":2}}],[\"r1\",{\"1\":{\"514\":1}}],[\"rxsbroadcaster\",{\"1\":{\"750\":1}}],[\"rx\",{\"1\":{\"514\":3}}],[\"r0\",{\"1\":{\"504\":2}}],[\"r+2w\",{\"1\":{\"557\":1}}],[\"r+w\",{\"1\":{\"557\":1}}],[\"r+\",{\"1\":{\"361\":2}}],[\"rbp\",{\"1\":{\"1463\":10}}],[\"rb\",{\"1\":{\"298\":1,\"1221\":1,\"1340\":2,\"1341\":2,\"1386\":2,\"1389\":2}}],[\"rdi\",{\"1\":{\"1463\":1}}],[\"rdwr\",{\"1\":{\"1307\":1}}],[\"rdm\",{\"1\":{\"824\":1,\"842\":1,\"1212\":2}}],[\"rdb\",{\"1\":{\"789\":1}}],[\"rds\",{\"1\":{\"648\":1}}],[\"rd\",{\"1\":{\"235\":1,\"245\":3,\"514\":1,\"534\":2}}],[\"rsp\",{\"1\":{\"1463\":4}}],[\"rst\",{\"1\":{\"978\":1,\"983\":4,\"984\":1,\"1592\":1}}],[\"rstrip\",{\"1\":{\"358\":1,\"359\":1,\"360\":1}}],[\"rsvd\",{\"1\":{\"978\":1}}],[\"rsa\",{\"1\":{\"744\":3}}],[\"rs2\",{\"1\":{\"235\":1,\"245\":2}}],[\"rs1\",{\"1\":{\"235\":1,\"245\":2}}],[\"rise\",{\"1\":{\"1623\":1}}],[\"risk\",{\"0\":{\"1618\":1}}],[\"risc\",{\"0\":{\"235\":1,\"236\":1,\"245\":1,\"1618\":1},\"1\":{\"235\":9,\"236\":1,\"244\":2,\"245\":10,\"1618\":1}}],[\"rifərəls\",{\"1\":{\"1507\":1}}],[\"rip\",{\"1\":{\"1463\":3}}],[\"ring\",{\"1\":{\"724\":7}}],[\"riley\",{\"1\":{\"558\":1}}],[\"right+1\",{\"1\":{\"401\":1}}],[\"rights\",{\"0\":{\"361\":1}}],[\"right等分别递归即可求出结果\",{\"1\":{\"51\":1}}],[\"right=none\",{\"1\":{\"42\":1,\"54\":1,\"499\":1}}],[\"rightmost\",{\"1\":{\"20\":2}}],[\"right\",{\"1\":{\"9\":5,\"20\":1,\"21\":1,\"22\":9,\"36\":4,\"42\":5,\"43\":2,\"45\":1,\"46\":2,\"47\":6,\"49\":5,\"51\":12,\"52\":17,\"54\":5,\"56\":2,\"57\":2,\"59\":2,\"61\":2,\"62\":4,\"64\":1,\"124\":2,\"150\":4,\"165\":11,\"169\":11,\"340\":1,\"341\":2,\"401\":3,\"493\":2,\"495\":1,\"496\":1,\"499\":25,\"989\":1,\"1060\":1,\"1545\":1}}],[\"r−l+1\",{\"1\":{\"165\":1}}],[\"robust\",{\"1\":{\"1576\":2}}],[\"rom\",{\"1\":{\"1476\":2,\"1479\":2,\"1498\":2,\"1501\":8}}],[\"roman\",{\"1\":{\"454\":1}}],[\"rodata\",{\"1\":{\"1460\":1,\"1463\":2,\"1553\":2}}],[\"ro\",{\"1\":{\"1285\":1,\"1287\":1}}],[\"roi\",{\"1\":{\"1021\":2}}],[\"routines\",{\"1\":{\"1571\":2}}],[\"routine\",{\"1\":{\"1498\":1}}],[\"router\",{\"1\":{\"975\":1,\"1055\":2}}],[\"routes\",{\"1\":{\"851\":3}}],[\"route\",{\"1\":{\"796\":1,\"892\":1,\"1053\":1}}],[\"roughly\",{\"1\":{\"549\":1}}],[\"rounded\",{\"1\":{\"692\":1}}],[\"round\",{\"1\":{\"28\":1,\"978\":1,\"1623\":1}}],[\"rose\",{\"1\":{\"343\":1}}],[\"rotates\",{\"1\":{\"341\":1}}],[\"rotate\",{\"1\":{\"341\":2}}],[\"rolling\",{\"1\":{\"270\":2}}],[\"role=role\",{\"1\":{\"858\":1}}],[\"role\",{\"1\":{\"236\":1,\"858\":1}}],[\"rows\",{\"1\":{\"315\":2,\"329\":1,\"401\":1}}],[\"row\",{\"1\":{\"85\":4,\"315\":3,\"340\":6,\"1198\":1}}],[\"rooms\",{\"1\":{\"75\":17,\"84\":3}}],[\"rootfs\",{\"1\":{\"1551\":2}}],[\"root左子树\",{\"1\":{\"499\":1}}],[\"root\",{\"1\":{\"42\":14,\"43\":10,\"45\":5,\"46\":12,\"47\":17,\"49\":7,\"51\":7,\"52\":4,\"53\":1,\"54\":3,\"56\":7,\"57\":3,\"59\":4,\"61\":4,\"62\":2,\"64\":3,\"320\":1,\"486\":12,\"493\":9,\"494\":1,\"495\":6,\"496\":7,\"499\":84,\"609\":1,\"610\":3,\"747\":1,\"759\":5,\"760\":2,\"776\":1,\"1079\":1,\"1237\":2,\"1340\":2,\"1385\":1,\"1418\":3,\"1419\":2}}],[\"rapid\",{\"1\":{\"1623\":1}}],[\"racing\",{\"1\":{\"1366\":1}}],[\"racv\",{\"1\":{\"444\":1}}],[\"rainbow\",{\"1\":{\"1259\":2}}],[\"raising\",{\"1\":{\"321\":1}}],[\"raised\",{\"1\":{\"1483\":1,\"1498\":1}}],[\"raises\",{\"1\":{\"371\":3}}],[\"raise\",{\"1\":{\"21\":2,\"314\":1,\"321\":1,\"371\":1,\"420\":1,\"1219\":3}}],[\"radio\",{\"1\":{\"1125\":2,\"1130\":1,\"1131\":1}}],[\"radar\",{\"1\":{\"1054\":1,\"1055\":1}}],[\"rarp\",{\"1\":{\"993\":1}}],[\"ran\",{\"1\":{\"1418\":1}}],[\"rand\",{\"1\":{\"1212\":2}}],[\"randomstate\",{\"1\":{\"1212\":2}}],[\"random=1\",{\"1\":{\"1162\":1}}],[\"randomly\",{\"1\":{\"559\":1}}],[\"random\",{\"0\":{\"404\":1},\"1\":{\"404\":3,\"558\":1,\"827\":3,\"1094\":1,\"1212\":8,\"1221\":3}}],[\"rank\",{\"1\":{\"562\":2}}],[\"range\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":1,\"30\":1,\"33\":1,\"36\":1,\"47\":1,\"59\":1,\"61\":1,\"74\":5,\"76\":2,\"77\":3,\"79\":4,\"80\":4,\"85\":2,\"86\":1,\"87\":1,\"88\":2,\"90\":1,\"96\":3,\"98\":1,\"102\":3,\"103\":1,\"108\":4,\"118\":6,\"120\":3,\"122\":1,\"124\":1,\"125\":1,\"130\":2,\"132\":2,\"134\":1,\"136\":1,\"138\":1,\"147\":1,\"149\":2,\"150\":3,\"152\":4,\"153\":5,\"154\":2,\"160\":1,\"165\":3,\"178\":2,\"184\":2,\"285\":1,\"288\":1,\"289\":2,\"309\":1,\"317\":1,\"339\":1,\"340\":4,\"341\":1,\"356\":1,\"360\":1,\"398\":1,\"401\":4,\"420\":1,\"480\":1,\"492\":1,\"558\":1,\"1185\":1,\"1212\":3,\"1221\":1}}],[\"rawdata\",{\"1\":{\"1320\":6}}],[\"rawid\",{\"1\":{\"931\":1}}],[\"raw\",{\"0\":{\"1565\":1},\"1\":{\"308\":1,\"1056\":1,\"1078\":2,\"1264\":1,\"1265\":1,\"1320\":1,\"1366\":2,\"1487\":1,\"1544\":2,\"1562\":1,\"1565\":6,\"1573\":2,\"1576\":8,\"1635\":1,\"1646\":1,\"1647\":1}}],[\"ramalho\",{\"1\":{\"271\":1}}],[\"ratio\",{\"1\":{\"1118\":1}}],[\"rather\",{\"1\":{\"203\":1,\"340\":1,\"547\":1,\"552\":1,\"558\":1}}],[\"rate=0\",{\"1\":{\"1212\":2}}],[\"rates\",{\"1\":{\"193\":1,\"256\":1,\"543\":2,\"1508\":1}}],[\"rate\",{\"0\":{\"209\":1},\"1\":{\"192\":2,\"196\":1,\"210\":3,\"543\":1,\"592\":1,\"1185\":9,\"1212\":4,\"1509\":2,\"1638\":1}}],[\"r\",{\"1\":{\"19\":4,\"20\":5,\"21\":6,\"23\":5,\"25\":4,\"26\":4,\"30\":5,\"31\":4,\"32\":8,\"33\":5,\"34\":9,\"35\":11,\"56\":2,\"85\":3,\"150\":3,\"165\":1,\"166\":6,\"177\":2,\"289\":2,\"348\":1,\"349\":2,\"351\":1,\"355\":1,\"356\":1,\"361\":2,\"387\":1,\"388\":1,\"392\":1,\"411\":2,\"496\":6,\"502\":2,\"503\":1,\"504\":3,\"507\":3,\"511\":6,\"557\":2,\"606\":1,\"713\":1,\"717\":3,\"719\":1,\"741\":1,\"855\":1,\"978\":1,\"1021\":2,\"1127\":1,\"1145\":6,\"1151\":3,\"1153\":1,\"1216\":1,\"1248\":1,\"1263\":1,\"1453\":3,\"1645\":1}}],[\"req\",{\"1\":{\"1094\":3}}],[\"requiring\",{\"1\":{\"1509\":1}}],[\"requirement\",{\"0\":{\"855\":1},\"1\":{\"542\":1,\"847\":1,\"855\":3}}],[\"requirements\",{\"1\":{\"227\":1,\"604\":1,\"855\":1,\"1474\":1}}],[\"requires\",{\"1\":{\"237\":1,\"707\":1,\"783\":1,\"1405\":1,\"1501\":1}}],[\"require\",{\"1\":{\"204\":1,\"227\":1,\"543\":1,\"553\":1,\"556\":1,\"1105\":1,\"1113\":2,\"1509\":1}}],[\"required\",{\"1\":{\"196\":1,\"204\":1,\"234\":2,\"236\":1,\"432\":2,\"543\":2,\"546\":1,\"693\":1,\"851\":1,\"975\":1,\"1076\":1,\"1345\":1,\"1426\":1,\"1429\":1,\"1491\":1,\"1498\":1,\"1501\":1,\"1591\":1}}],[\"requestdeathnotification\",{\"1\":{\"1310\":1}}],[\"request\",{\"0\":{\"999\":1,\"1094\":1},\"1\":{\"382\":4,\"410\":2,\"850\":6,\"875\":1,\"984\":1,\"999\":1,\"1094\":3,\"1216\":1,\"1310\":1,\"1328\":3}}],[\"requested\",{\"1\":{\"194\":4,\"196\":3,\"211\":1,\"703\":1}}],[\"requests\",{\"0\":{\"412\":1},\"1\":{\"194\":2,\"255\":1,\"412\":2,\"1486\":1}}],[\"reboot\",{\"1\":{\"1270\":2,\"1285\":2,\"1287\":4}}],[\"rebase\",{\"1\":{\"1072\":1}}],[\"rebuild\",{\"1\":{\"1052\":1,\"1054\":3}}],[\"ren\",{\"1\":{\"1226\":1}}],[\"rendering\",{\"1\":{\"1052\":1,\"1125\":1}}],[\"render\",{\"1\":{\"891\":1,\"892\":1,\"1056\":1}}],[\"rename\",{\"0\":{\"349\":1},\"1\":{\"349\":2,\"381\":1,\"549\":2}}],[\"reused\",{\"1\":{\"850\":1}}],[\"reopening\",{\"1\":{\"758\":1}}],[\"reopen\",{\"1\":{\"758\":1}}],[\"reissue\",{\"0\":{\"550\":1},\"1\":{\"542\":2,\"543\":4,\"548\":3,\"549\":1,\"550\":8,\"558\":2,\"565\":2,\"599\":1,\"603\":1}}],[\"reinterpret\",{\"1\":{\"509\":2,\"1320\":1}}],[\"refconst\",{\"1\":{\"1553\":1}}],[\"refdata\",{\"1\":{\"1553\":1}}],[\"ref弱引用减1\",{\"1\":{\"1310\":1}}],[\"ref弱引用加1\",{\"1\":{\"1310\":1}}],[\"ref强引用减1\",{\"1\":{\"1310\":1}}],[\"ref强引用加1\",{\"1\":{\"1310\":1}}],[\"ref>\",{\"1\":{\"1217\":1}}],[\"reflect\",{\"1\":{\"1516\":1,\"1518\":1}}],[\"reflects\",{\"1\":{\"1483\":1}}],[\"reflection\",{\"1\":{\"1122\":1}}],[\"reflections\",{\"1\":{\"1121\":1}}],[\"reflectors\",{\"1\":{\"1118\":1}}],[\"refuse\",{\"1\":{\"1060\":1}}],[\"refenence\",{\"0\":{\"1502\":1}}],[\"refetch\",{\"0\":{\"551\":1},\"1\":{\"551\":2}}],[\"referring\",{\"1\":{\"1501\":1}}],[\"referred\",{\"1\":{\"1118\":1,\"1620\":1}}],[\"refer\",{\"1\":{\"558\":1,\"559\":1,\"1385\":1}}],[\"refers\",{\"1\":{\"194\":2,\"1386\":1,\"1536\":1}}],[\"references\",{\"0\":{\"1622\":1},\"1\":{\"1383\":1}}],[\"reference\",{\"0\":{\"230\":1,\"566\":1,\"606\":1,\"848\":1,\"1254\":1,\"1258\":1,\"1322\":1,\"1383\":1,\"1435\":1,\"1451\":1,\"1472\":1,\"1511\":1,\"1558\":1,\"1581\":1,\"1603\":1,\"1615\":1},\"1\":{\"191\":1,\"245\":2,\"309\":1,\"566\":1,\"905\":1,\"1098\":1,\"1381\":11,\"1383\":15,\"1385\":1,\"1388\":1,\"1449\":1,\"1474\":1}}],[\"refine\",{\"1\":{\"545\":1}}],[\"ref\",{\"1\":{\"507\":1,\"511\":6,\"1380\":3,\"1553\":4}}],[\"red\",{\"1\":{\"892\":1,\"897\":2,\"898\":2,\"1623\":2}}],[\"redirect\",{\"1\":{\"760\":1}}],[\"redis作为broker\",{\"1\":{\"828\":1}}],[\"redis的性能十分出色\",{\"1\":{\"825\":1}}],[\"redis本质上是一个\",{\"1\":{\"825\":1}}],[\"redis\",{\"0\":{\"823\":2,\"825\":1,\"826\":1,\"828\":1,\"829\":1,\"830\":1,\"832\":1,\"833\":1,\"834\":1,\"835\":1},\"1\":{\"382\":3,\"824\":12,\"825\":5,\"827\":1,\"828\":3,\"831\":1,\"833\":1,\"836\":6,\"837\":1,\"841\":1,\"842\":3,\"843\":1},\"2\":{\"846\":1}}],[\"redhat\",{\"1\":{\"725\":1,\"1263\":1,\"1645\":1}}],[\"rednaxelafx的回答\",{\"1\":{\"708\":1}}],[\"redundancy\",{\"1\":{\"600\":1,\"605\":1}}],[\"redundant\",{\"1\":{\"599\":1}}],[\"reducing\",{\"0\":{\"241\":1},\"1\":{\"1203\":1}}],[\"reduction\",{\"1\":{\"234\":1,\"1156\":1}}],[\"reduced\",{\"1\":{\"557\":1,\"558\":1,\"978\":1}}],[\"reduces\",{\"1\":{\"234\":1}}],[\"reduce\",{\"0\":{\"398\":1},\"1\":{\"194\":1,\"237\":1,\"243\":1,\"256\":3,\"398\":4,\"549\":1,\"557\":1,\"604\":1,\"1185\":1,\"1203\":1,\"1212\":3,\"1536\":1}}],[\"redesign\",{\"1\":{\"549\":2}}],[\"repurposing\",{\"1\":{\"1354\":1}}],[\"rep\",{\"1\":{\"1099\":1}}],[\"repositories\",{\"1\":{\"1239\":1}}],[\"repository\",{\"1\":{\"1072\":3}}],[\"repo\",{\"0\":{\"1238\":1,\"1240\":1},\"1\":{\"620\":1,\"1084\":1,\"1099\":4,\"1239\":17,\"1240\":8,\"1254\":1}}],[\"reports\",{\"1\":{\"1143\":1}}],[\"report\",{\"0\":{\"1011\":1},\"1\":{\"321\":2,\"1127\":2}}],[\"repair\",{\"1\":{\"543\":2}}],[\"replices\",{\"1\":{\"624\":1}}],[\"replacing\",{\"1\":{\"576\":1}}],[\"replaces\",{\"1\":{\"793\":1,\"1498\":1}}],[\"replacespace\",{\"1\":{\"481\":2}}],[\"replaceone\",{\"1\":{\"793\":1}}],[\"replace\",{\"1\":{\"750\":2,\"751\":1,\"793\":1,\"908\":1,\"909\":1,\"1099\":1}}],[\"replacement\",{\"1\":{\"559\":2,\"576\":1}}],[\"replaced\",{\"1\":{\"217\":1,\"245\":1,\"339\":1,\"559\":1,\"565\":1,\"1501\":1}}],[\"replayed\",{\"1\":{\"548\":1}}],[\"replyobj\",{\"1\":{\"1333\":2}}],[\"reply里读取结果\",{\"1\":{\"1328\":1}}],[\"replyparcel\",{\"1\":{\"1320\":3}}],[\"reply\",{\"0\":{\"1311\":1},\"1\":{\"344\":1,\"1309\":1,\"1310\":1,\"1312\":2,\"1313\":1,\"1326\":1,\"1328\":7,\"1329\":6,\"1333\":20}}],[\"repeated\",{\"1\":{\"751\":1}}],[\"repeatedly\",{\"1\":{\"454\":1,\"573\":1,\"600\":1}}],[\"repeat\",{\"1\":{\"317\":1}}],[\"repeat=3\",{\"1\":{\"317\":1}}],[\"repeat=1\",{\"1\":{\"317\":1}}],[\"reprogram\",{\"1\":{\"1545\":1}}],[\"reprogrammed\",{\"1\":{\"1501\":1}}],[\"represents\",{\"1\":{\"978\":1}}],[\"representation\",{\"1\":{\"690\":1,\"1125\":1}}],[\"representative\",{\"1\":{\"562\":1}}],[\"represented\",{\"1\":{\"559\":1}}],[\"repr\",{\"1\":{\"308\":1,\"434\":3}}],[\"retain\",{\"1\":{\"1518\":1}}],[\"retq\",{\"1\":{\"1463\":2}}],[\"retry\",{\"1\":{\"1316\":2}}],[\"retrieval\",{\"1\":{\"454\":1}}],[\"retrieves\",{\"1\":{\"1499\":1}}],[\"retrieved\",{\"1\":{\"558\":1}}],[\"retrieve\",{\"1\":{\"255\":1,\"865\":1}}],[\"retentionpolicy\",{\"1\":{\"879\":1}}],[\"retention\",{\"1\":{\"879\":1}}],[\"ret\",{\"1\":{\"517\":1,\"673\":1,\"691\":1,\"692\":1,\"1189\":1,\"1307\":1,\"1313\":2,\"1314\":3,\"1316\":2,\"1344\":4,\"1519\":3,\"1544\":1,\"1545\":6,\"1570\":3,\"1573\":5,\"1595\":4,\"1596\":10,\"1606\":5,\"1607\":4,\"1609\":1}}],[\"returen\",{\"1\":{\"466\":1}}],[\"returned\",{\"1\":{\"1449\":1,\"1573\":1}}],[\"returns\",{\"1\":{\"316\":1,\"340\":1,\"396\":1,\"408\":1,\"1198\":1,\"1570\":1,\"1573\":1,\"1602\":1}}],[\"return\",{\"1\":{\"6\":1,\"8\":2,\"9\":5,\"10\":7,\"11\":4,\"12\":2,\"13\":2,\"14\":2,\"15\":8,\"19\":5,\"20\":6,\"21\":4,\"23\":1,\"25\":2,\"26\":1,\"30\":2,\"31\":2,\"32\":3,\"33\":5,\"34\":3,\"35\":4,\"36\":3,\"42\":6,\"43\":1,\"45\":1,\"46\":1,\"47\":6,\"49\":3,\"51\":7,\"52\":4,\"54\":3,\"56\":6,\"57\":2,\"59\":1,\"60\":1,\"61\":2,\"62\":3,\"64\":2,\"74\":7,\"75\":4,\"76\":3,\"77\":3,\"79\":3,\"80\":2,\"84\":1,\"85\":2,\"86\":2,\"87\":2,\"88\":7,\"89\":2,\"90\":1,\"91\":3,\"92\":4,\"95\":2,\"96\":2,\"97\":3,\"98\":2,\"102\":2,\"103\":4,\"108\":1,\"118\":4,\"120\":2,\"122\":3,\"124\":3,\"125\":1,\"130\":4,\"132\":1,\"134\":2,\"136\":2,\"138\":2,\"149\":1,\"150\":2,\"152\":2,\"153\":1,\"154\":1,\"155\":1,\"156\":2,\"157\":1,\"159\":1,\"160\":2,\"165\":3,\"166\":2,\"169\":1,\"173\":2,\"177\":2,\"178\":1,\"179\":1,\"184\":3,\"185\":4,\"186\":4,\"245\":1,\"289\":1,\"293\":4,\"297\":1,\"299\":2,\"304\":1,\"314\":3,\"316\":1,\"341\":2,\"343\":1,\"354\":2,\"377\":1,\"381\":1,\"382\":1,\"387\":1,\"392\":2,\"394\":2,\"397\":3,\"400\":2,\"401\":5,\"408\":4,\"420\":2,\"424\":8,\"430\":1,\"431\":2,\"432\":9,\"433\":3,\"434\":2,\"435\":1,\"455\":1,\"458\":1,\"459\":2,\"465\":9,\"466\":1,\"467\":1,\"468\":2,\"479\":2,\"480\":8,\"481\":1,\"486\":4,\"493\":2,\"495\":3,\"496\":3,\"499\":7,\"502\":1,\"510\":1,\"664\":2,\"673\":2,\"692\":1,\"693\":1,\"702\":2,\"703\":4,\"836\":1,\"843\":1,\"858\":1,\"892\":1,\"906\":1,\"909\":1,\"910\":1,\"931\":4,\"933\":1,\"982\":1,\"1004\":2,\"1078\":1,\"1107\":1,\"1113\":2,\"1185\":2,\"1186\":2,\"1296\":1,\"1300\":1,\"1301\":2,\"1312\":1,\"1315\":1,\"1316\":3,\"1320\":11,\"1328\":2,\"1329\":3,\"1333\":8,\"1344\":4,\"1345\":1,\"1365\":4,\"1366\":4,\"1376\":1,\"1446\":2,\"1449\":1,\"1463\":1,\"1518\":1,\"1519\":3,\"1520\":3,\"1528\":2,\"1534\":4,\"1542\":6,\"1543\":4,\"1544\":1,\"1545\":6,\"1570\":1,\"1571\":2,\"1573\":1,\"1577\":2,\"1594\":1,\"1595\":4,\"1596\":7,\"1606\":1,\"1607\":2,\"1608\":3,\"1609\":1,\"1611\":3,\"1613\":1,\"1626\":1,\"1627\":2,\"1629\":1}}],[\"regulated\",{\"1\":{\"1203\":1}}],[\"regularization\",{\"1\":{\"1185\":2}}],[\"regularizer\",{\"1\":{\"1185\":9,\"1186\":8}}],[\"regular\",{\"0\":{\"411\":1},\"1\":{\"411\":1,\"707\":2,\"1405\":2}}],[\"regions\",{\"1\":{\"1021\":1,\"1389\":1,\"1476\":1}}],[\"region\",{\"1\":{\"1021\":1,\"1153\":1,\"1162\":1,\"1388\":1,\"1493\":1,\"1495\":1}}],[\"registe\",{\"1\":{\"1099\":1}}],[\"registered\",{\"1\":{\"851\":1,\"1571\":1,\"1573\":1,\"1606\":1,\"1611\":1}}],[\"registerruntimenativemethods\",{\"1\":{\"707\":3,\"1405\":3}}],[\"registernativemethodsinternal\",{\"1\":{\"706\":3,\"1403\":3}}],[\"register\",{\"0\":{\"505\":1,\"930\":1,\"1402\":1,\"1403\":1,\"1485\":1,\"1570\":1,\"1571\":1,\"1576\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1614\":1,\"1620\":1},\"1\":{\"227\":2,\"235\":6,\"236\":7,\"245\":28,\"252\":1,\"502\":1,\"520\":1,\"529\":1,\"532\":1,\"533\":1,\"534\":1,\"557\":8,\"558\":1,\"559\":2,\"573\":1,\"599\":2,\"600\":2,\"706\":8,\"707\":3,\"798\":1,\"930\":1,\"941\":1,\"1099\":1,\"1299\":2,\"1310\":1,\"1402\":4,\"1403\":4,\"1405\":3,\"1481\":1,\"1482\":1,\"1483\":3,\"1485\":3,\"1495\":1,\"1496\":1,\"1498\":2,\"1499\":1,\"1534\":1,\"1570\":2,\"1571\":2,\"1576\":5,\"1577\":4,\"1605\":3,\"1606\":4,\"1607\":2,\"1608\":2,\"1609\":1,\"1611\":3,\"1620\":10,\"1622\":2}}],[\"registers\",{\"1\":{\"227\":1,\"235\":1,\"236\":11,\"245\":4,\"557\":2,\"573\":2,\"600\":2,\"1485\":1,\"1491\":1,\"1620\":2}}],[\"registration\",{\"1\":{\"930\":1}}],[\"registry\",{\"1\":{\"619\":2,\"918\":2}}],[\"reg\",{\"1\":{\"619\":1}}],[\"regardless\",{\"1\":{\"1536\":1}}],[\"regard\",{\"1\":{\"559\":1}}],[\"regarding\",{\"1\":{\"321\":1,\"1492\":1}}],[\"regex\",{\"1\":{\"411\":1}}],[\"regs\",{\"1\":{\"245\":4}}],[\"review\",{\"1\":{\"244\":1,\"1239\":1}}],[\"reverselist\",{\"1\":{\"458\":1}}],[\"reversed\",{\"1\":{\"341\":1}}],[\"reverse=reverse\",{\"1\":{\"341\":1}}],[\"reverse=true\",{\"1\":{\"15\":2,\"184\":1,\"341\":1}}],[\"reverse\",{\"0\":{\"458\":1},\"1\":{\"61\":1,\"177\":1,\"339\":1,\"420\":2,\"458\":1}}],[\"reachable\",{\"1\":{\"1385\":3,\"1388\":2}}],[\"reach\",{\"1\":{\"236\":1}}],[\"reasonable\",{\"1\":{\"547\":1}}],[\"reasonably\",{\"1\":{\"543\":2,\"562\":1}}],[\"reason=\",{\"1\":{\"373\":2,\"374\":1}}],[\"reasons\",{\"1\":{\"256\":1}}],[\"reason\",{\"1\":{\"236\":1,\"759\":1,\"1623\":2}}],[\"readonly\",{\"1\":{\"1463\":5}}],[\"readfromparcel\",{\"1\":{\"1329\":1}}],[\"readelf\",{\"0\":{\"1464\":1,\"1465\":1},\"1\":{\"1456\":1,\"1464\":5}}],[\"readexception\",{\"1\":{\"1329\":1}}],[\"readers\",{\"1\":{\"1079\":1}}],[\"reader\",{\"1\":{\"559\":1,\"1217\":3}}],[\"readint32\",{\"1\":{\"1320\":1,\"1333\":1}}],[\"reading\",{\"0\":{\"410\":1},\"1\":{\"236\":1,\"245\":1,\"361\":4,\"1056\":1,\"1620\":1}}],[\"readability\",{\"1\":{\"1060\":1}}],[\"readable\",{\"1\":{\"271\":1}}],[\"readme\",{\"1\":{\"1054\":1,\"1249\":3,\"1434\":1}}],[\"readbuf\",{\"1\":{\"741\":1}}],[\"ready\",{\"1\":{\"707\":1,\"774\":1,\"1405\":1}}],[\"readthedocs\",{\"1\":{\"383\":1,\"848\":1}}],[\"readlines\",{\"1\":{\"387\":1}}],[\"readline\",{\"1\":{\"307\":1}}],[\"reads\",{\"1\":{\"236\":2,\"1381\":1}}],[\"read\",{\"0\":{\"329\":1,\"748\":1,\"792\":1,\"1314\":1,\"1381\":1},\"1\":{\"227\":1,\"236\":2,\"245\":3,\"315\":1,\"329\":3,\"331\":1,\"361\":1,\"387\":2,\"388\":1,\"410\":1,\"556\":1,\"557\":1,\"584\":1,\"743\":1,\"746\":1,\"748\":3,\"790\":1,\"897\":1,\"927\":1,\"961\":2,\"962\":2,\"984\":1,\"1055\":1,\"1094\":1,\"1145\":1,\"1185\":1,\"1189\":1,\"1217\":1,\"1301\":8,\"1307\":4,\"1311\":1,\"1312\":1,\"1313\":3,\"1314\":4,\"1316\":3,\"1317\":1,\"1333\":1,\"1381\":6,\"1383\":1,\"1501\":1,\"1502\":1,\"1507\":1,\"1524\":1,\"1545\":1,\"1562\":1,\"1583\":1,\"1584\":4}}],[\"realized\",{\"1\":{\"1623\":1}}],[\"realistic\",{\"1\":{\"564\":1}}],[\"real\",{\"0\":{\"204\":1,\"506\":1},\"1\":{\"1143\":1,\"1150\":1,\"1151\":1}}],[\"really\",{\"1\":{\"177\":1,\"236\":1,\"1080\":1,\"1219\":1}}],[\"rem\",{\"1\":{\"1228\":4}}],[\"remeber\",{\"1\":{\"923\":1,\"1221\":1}}],[\"remember\",{\"1\":{\"820\":1,\"1075\":1}}],[\"remark\",{\"1\":{\"515\":1,\"1620\":1}}],[\"remain\",{\"1\":{\"602\":1}}],[\"remains\",{\"1\":{\"406\":1,\"549\":1}}],[\"remaining\",{\"1\":{\"204\":1,\"1344\":1,\"1475\":1,\"1481\":1,\"1487\":1}}],[\"remount\",{\"1\":{\"1287\":3}}],[\"remoteexception\",{\"1\":{\"1329\":1,\"1333\":1}}],[\"remoteport\",{\"1\":{\"982\":1}}],[\"remotehost\",{\"1\":{\"982\":1}}],[\"remote\",{\"0\":{\"1250\":1},\"1\":{\"446\":1,\"761\":1,\"785\":1,\"824\":1,\"928\":1,\"1056\":1,\"1250\":6,\"1253\":1,\"1320\":1,\"1453\":8}}],[\"removing\",{\"1\":{\"341\":1,\"454\":1}}],[\"removeitem\",{\"1\":{\"927\":2}}],[\"removes\",{\"1\":{\"565\":1}}],[\"remove\",{\"1\":{\"92\":1,\"460\":2,\"786\":1,\"794\":1,\"1057\":1,\"1073\":1,\"1208\":1,\"1545\":1,\"1634\":1}}],[\"recipe\",{\"1\":{\"1448\":1,\"1449\":1}}],[\"recycle\",{\"1\":{\"1329\":2}}],[\"reclaim\",{\"1\":{\"1328\":4}}],[\"recap\",{\"1\":{\"1201\":1}}],[\"receiving\",{\"1\":{\"1483\":1}}],[\"receive\",{\"1\":{\"1143\":1,\"1483\":2,\"1507\":1}}],[\"received\",{\"1\":{\"982\":2,\"988\":1,\"1123\":1,\"1202\":1}}],[\"receiver\",{\"1\":{\"975\":3,\"1118\":4,\"1125\":1}}],[\"reception\",{\"1\":{\"1208\":1}}],[\"recent\",{\"1\":{\"436\":1,\"1623\":1}}],[\"recently\",{\"1\":{\"243\":1,\"255\":1,\"256\":1}}],[\"recv\",{\"1\":{\"956\":3}}],[\"recvfrom\",{\"1\":{\"950\":1}}],[\"recognition\",{\"0\":{\"1158\":1,\"1162\":1},\"1\":{\"1150\":1,\"1189\":5}}],[\"recognized\",{\"1\":{\"1219\":1}}],[\"recognize\",{\"1\":{\"197\":1}}],[\"recodemo>\",{\"1\":{\"1109\":2}}],[\"recommend\",{\"1\":{\"1080\":1}}],[\"recommended\",{\"1\":{\"774\":1}}],[\"records\",{\"1\":{\"988\":1,\"1573\":1}}],[\"recover\",{\"1\":{\"548\":3}}],[\"recovery\",{\"0\":{\"547\":1,\"565\":1},\"1\":{\"546\":2,\"547\":4,\"548\":3,\"558\":1,\"565\":3,\"986\":1,\"1509\":1}}],[\"reconsider\",{\"1\":{\"542\":1}}],[\"recwarn\",{\"1\":{\"383\":2}}],[\"recurring\",{\"1\":{\"573\":1,\"600\":1}}],[\"recur\",{\"1\":{\"95\":3,\"97\":4}}],[\"recursive\",{\"1\":{\"95\":1,\"458\":1,\"493\":1}}],[\"reliable\",{\"1\":{\"1623\":1}}],[\"relies\",{\"1\":{\"193\":1,\"1495\":1,\"1496\":1}}],[\"rel\",{\"1\":{\"1464\":2}}],[\"relocatable\",{\"1\":{\"1464\":2}}],[\"reloc\",{\"1\":{\"1463\":2}}],[\"reloading\",{\"1\":{\"758\":1}}],[\"reload\",{\"1\":{\"758\":1,\"759\":2}}],[\"relu2\",{\"1\":{\"1186\":2}}],[\"relu1\",{\"1\":{\"1186\":3}}],[\"relu\",{\"1\":{\"1185\":1,\"1186\":3}}],[\"relu激活函数\",{\"1\":{\"1156\":1}}],[\"relevant\",{\"0\":{\"1127\":1}}],[\"released\",{\"1\":{\"777\":1,\"1475\":1,\"1481\":1}}],[\"release\",{\"1\":{\"747\":1,\"780\":2,\"1101\":1,\"1189\":1,\"1198\":1,\"1263\":2,\"1307\":2,\"1310\":1,\"1645\":2}}],[\"rel=\",{\"1\":{\"896\":1,\"897\":1,\"1081\":1,\"1105\":2}}],[\"relatives\",{\"1\":{\"1623\":1}}],[\"relative\",{\"1\":{\"1592\":1}}],[\"relation\",{\"1\":{\"1592\":1}}],[\"relational\",{\"1\":{\"789\":1}}],[\"relationship\",{\"1\":{\"194\":1,\"1201\":1}}],[\"related\",{\"0\":{\"545\":1},\"1\":{\"549\":1,\"599\":1,\"676\":1}}],[\"relying\",{\"1\":{\"542\":1,\"1623\":1}}],[\"rely\",{\"1\":{\"241\":1}}],[\"re\",{\"0\":{\"411\":1},\"1\":{\"74\":1,\"406\":1,\"411\":7,\"550\":1,\"1060\":1,\"1376\":1,\"1619\":1}}],[\"resched\",{\"1\":{\"1516\":1,\"1518\":2}}],[\"rescore=1\",{\"1\":{\"1162\":1}}],[\"reshaped\",{\"1\":{\"1186\":2}}],[\"reshape\",{\"1\":{\"1142\":1,\"1186\":1}}],[\"resendon1202=true\",{\"1\":{\"1094\":1}}],[\"reserved3\",{\"1\":{\"708\":1}}],[\"reserved2\",{\"1\":{\"708\":1}}],[\"reserved1\",{\"1\":{\"708\":1}}],[\"reserved0\",{\"1\":{\"708\":1}}],[\"reset\",{\"0\":{\"1241\":1},\"1\":{\"558\":3,\"559\":1,\"562\":1,\"984\":1,\"1241\":2,\"1251\":2,\"1475\":1,\"1479\":1,\"1481\":1,\"1493\":1}}],[\"research\",{\"0\":{\"1290\":1,\"1657\":1},\"1\":{\"500\":1,\"540\":1,\"542\":1,\"543\":1,\"1352\":1},\"2\":{\"1128\":1,\"1140\":1,\"1146\":1,\"1163\":1,\"1172\":1,\"1183\":1,\"1187\":1,\"1199\":1,\"1210\":1,\"1213\":1,\"1222\":1}}],[\"resist\",{\"1\":{\"1623\":1}}],[\"resides\",{\"1\":{\"1487\":1,\"1498\":1}}],[\"reside\",{\"1\":{\"557\":2,\"559\":1,\"759\":1}}],[\"resize\",{\"1\":{\"385\":3,\"891\":1,\"892\":1,\"1189\":2}}],[\"resume\",{\"1\":{\"1099\":2}}],[\"resumed\",{\"1\":{\"548\":1}}],[\"resulting\",{\"1\":{\"1125\":1,\"1623\":2}}],[\"results生成最后的参数数据\",{\"1\":{\"1162\":1}}],[\"results\",{\"1\":{\"236\":2,\"237\":1,\"548\":1,\"549\":4,\"559\":1,\"599\":1,\"1094\":4,\"1130\":1,\"1162\":1,\"1620\":2,\"1623\":1}}],[\"result\",{\"0\":{\"298\":1},\"1\":{\"6\":2,\"47\":3,\"97\":4,\"108\":5,\"236\":1,\"237\":1,\"245\":4,\"317\":4,\"411\":2,\"502\":3,\"507\":2,\"543\":2,\"548\":1,\"565\":1,\"692\":1,\"706\":2,\"843\":1,\"904\":1,\"950\":2,\"1118\":3,\"1162\":1,\"1204\":1,\"1299\":10,\"1300\":3,\"1320\":4,\"1328\":9,\"1376\":3,\"1403\":2,\"1623\":1}}],[\"res=0\",{\"1\":{\"507\":1}}],[\"restore\",{\"0\":{\"795\":1},\"1\":{\"1054\":1,\"1217\":3,\"1517\":2}}],[\"resty\",{\"1\":{\"771\":1}}],[\"restricted\",{\"1\":{\"557\":1}}],[\"restrains\",{\"1\":{\"549\":1}}],[\"restart\",{\"1\":{\"549\":1,\"616\":1,\"744\":1,\"861\":1,\"1091\":1,\"1145\":1,\"1518\":1}}],[\"rest\",{\"1\":{\"458\":3,\"1241\":1,\"1515\":1,\"1556\":1,\"1592\":1}}],[\"respective\",{\"1\":{\"1613\":1}}],[\"respectively\",{\"1\":{\"235\":1,\"557\":2,\"558\":1,\"562\":1,\"1206\":1}}],[\"respository\",{\"1\":{\"622\":1}}],[\"responsiveness\",{\"1\":{\"891\":1}}],[\"responsive\",{\"0\":{\"891\":1},\"1\":{\"891\":1,\"892\":1,\"1054\":1}}],[\"responsible\",{\"1\":{\"551\":1,\"1495\":1}}],[\"response\",{\"0\":{\"999\":1},\"1\":{\"412\":1,\"923\":1,\"999\":1,\"1094\":7}}],[\"resp\",{\"1\":{\"556\":2}}],[\"resolvedtype\",{\"1\":{\"1329\":2,\"1333\":1}}],[\"resolved\",{\"1\":{\"550\":2}}],[\"resolution\",{\"0\":{\"1203\":1},\"1\":{\"408\":2,\"424\":1,\"427\":1,\"600\":1,\"1143\":1,\"1201\":2,\"1203\":7,\"1204\":1,\"1209\":1}}],[\"resources\",{\"0\":{\"1079\":1},\"1\":{\"236\":1,\"1079\":1}}],[\"resource\",{\"1\":{\"236\":2,\"237\":1,\"923\":1}}],[\"res\",{\"1\":{\"8\":3,\"9\":6,\"10\":7,\"11\":3,\"12\":3,\"13\":3,\"14\":3,\"15\":3,\"19\":4,\"20\":7,\"35\":3,\"36\":3,\"42\":11,\"43\":3,\"45\":4,\"46\":3,\"47\":14,\"49\":5,\"57\":4,\"59\":2,\"60\":3,\"61\":3,\"62\":4,\"74\":6,\"77\":6,\"81\":3,\"85\":3,\"86\":4,\"88\":4,\"90\":8,\"102\":2,\"149\":3,\"150\":8,\"155\":3,\"165\":6,\"172\":2,\"173\":3,\"184\":6,\"289\":4,\"297\":3,\"304\":4,\"325\":2,\"354\":2,\"453\":1,\"467\":4,\"481\":4,\"486\":10,\"493\":7,\"496\":9,\"502\":3,\"507\":1,\"510\":3,\"1113\":2,\"1329\":2,\"1446\":2}}],[\"和下一个\",{\"1\":{\"1573\":1}}],[\"和下文中的\",{\"1\":{\"527\":1}}],[\"和函数本身在\",{\"1\":{\"1551\":1}}],[\"和串行的\",{\"1\":{\"1507\":1}}],[\"和闪存\",{\"1\":{\"1501\":1}}],[\"和嵌入式软件的关系是什么\",{\"1\":{\"1501\":1}}],[\"和题目标题一样\",{\"1\":{\"1496\":1}}],[\"和相关的寄存器\",{\"1\":{\"1488\":1}}],[\"和相同的二元子数组\",{\"1\":{\"144\":1}}],[\"和从\",{\"1\":{\"1481\":1}}],[\"和目标代码都混在一起了\",{\"1\":{\"1419\":1}}],[\"和上述的两个数据结构息息相关\",{\"1\":{\"1342\":1}}],[\"和上面的分析同理\",{\"1\":{\"91\":1}}],[\"和驱动交互\",{\"1\":{\"1333\":1}}],[\"和我们的线程名称的时候\",{\"1\":{\"1279\":1}}],[\"和same\",{\"1\":{\"1142\":1}}],[\"和中心采样频偏\",{\"1\":{\"1024\":1}}],[\"和中断\",{\"1\":{\"950\":1}}],[\"和端口不能再被使用\",{\"1\":{\"983\":1}}],[\"和子网判断是不是本地\",{\"1\":{\"980\":1}}],[\"和roberto\",{\"1\":{\"967\":1}}],[\"和三级缓存\",{\"1\":{\"882\":1}}],[\"和无状态对象\",{\"1\":{\"876\":1}}],[\"和无限多的水\",{\"1\":{\"91\":1}}],[\"和访问比率成正比\",{\"1\":{\"763\":1}}],[\"和文件读写的操作很相似\",{\"1\":{\"741\":1}}],[\"和命令行管理工具\",{\"1\":{\"725\":1}}],[\"和执行字节码的命令如下\",{\"1\":{\"693\":1}}],[\"和虚拟机是基于寄存器的有关吗\",{\"1\":{\"688\":1}}],[\"和虚拟内存的页大小没有关系\",{\"1\":{\"530\":1}}],[\"和已知的\",{\"1\":{\"587\":1}}],[\"和没有\",{\"1\":{\"562\":1}}],[\"和第\",{\"1\":{\"556\":1}}],[\"和寄存器\",{\"1\":{\"524\":1}}],[\"和删除\",{\"1\":{\"460\":1}}],[\"和官方\",{\"1\":{\"310\":1}}],[\"和内存中的数据不一致\",{\"1\":{\"224\":1}}],[\"和地址信息非强相关\",{\"1\":{\"196\":1}}],[\"和类型\",{\"1\":{\"155\":1}}],[\"和为s的连续正数序列\",{\"1\":{\"165\":1}}],[\"和为\",{\"0\":{\"151\":1,\"165\":1,\"166\":1},\"1\":{\"144\":1}}],[\"和不超过背包容量\",{\"1\":{\"127\":1}}],[\"和一个距离值\",{\"1\":{\"1025\":1}}],[\"和一个慢启动门限\",{\"1\":{\"987\":1}}],[\"和一个目标结果\",{\"1\":{\"494\":1}}],[\"和一个目标整数\",{\"1\":{\"136\":1}}],[\"和一个包含非空单词的列表\",{\"1\":{\"138\":1}}],[\"和一个整数\",{\"1\":{\"124\":1,\"156\":1}}],[\"和一个正整数\",{\"1\":{\"10\":1}}],[\"和背包\",{\"1\":{\"120\":1}}],[\"和两个整数\",{\"1\":{\"120\":1}}],[\"和方程写出来\",{\"1\":{\"100\":1}}],[\"和节点\",{\"1\":{\"89\":1}}],[\"和条件\",{\"1\":{\"87\":1}}],[\"和课程\",{\"1\":{\"86\":2}}],[\"和给定的时间进行比较\",{\"1\":{\"34\":1}}],[\"和\",{\"0\":{\"264\":1,\"873\":1,\"996\":1},\"1\":{\"9\":1,\"13\":2,\"14\":1,\"20\":1,\"22\":1,\"28\":1,\"51\":1,\"56\":1,\"76\":1,\"79\":1,\"92\":1,\"120\":9,\"122\":1,\"125\":1,\"132\":2,\"153\":1,\"158\":1,\"167\":1,\"169\":1,\"182\":2,\"185\":3,\"194\":1,\"195\":1,\"198\":1,\"205\":1,\"207\":1,\"216\":1,\"220\":1,\"224\":2,\"225\":1,\"235\":2,\"245\":2,\"256\":1,\"260\":1,\"261\":2,\"266\":1,\"268\":1,\"343\":4,\"369\":1,\"383\":1,\"387\":1,\"388\":1,\"418\":1,\"422\":1,\"431\":1,\"432\":1,\"436\":1,\"441\":1,\"460\":2,\"466\":1,\"468\":2,\"478\":1,\"479\":2,\"504\":1,\"520\":1,\"523\":1,\"525\":1,\"528\":1,\"543\":1,\"544\":1,\"545\":2,\"550\":1,\"552\":1,\"556\":1,\"559\":2,\"562\":1,\"575\":1,\"576\":1,\"580\":1,\"581\":1,\"587\":1,\"593\":1,\"599\":1,\"639\":1,\"651\":1,\"653\":3,\"664\":2,\"675\":1,\"682\":1,\"689\":1,\"691\":2,\"692\":1,\"724\":2,\"725\":1,\"728\":1,\"736\":1,\"761\":1,\"814\":1,\"815\":1,\"820\":1,\"824\":1,\"869\":1,\"873\":1,\"926\":1,\"949\":1,\"950\":2,\"951\":1,\"952\":1,\"971\":1,\"974\":1,\"980\":1,\"982\":1,\"986\":1,\"997\":1,\"998\":1,\"1012\":2,\"1020\":3,\"1021\":1,\"1179\":1,\"1303\":1,\"1307\":1,\"1309\":1,\"1329\":1,\"1333\":1,\"1341\":1,\"1342\":1,\"1353\":1,\"1381\":1,\"1388\":1,\"1434\":2,\"1440\":2,\"1460\":2,\"1461\":1,\"1474\":1,\"1475\":1,\"1479\":1,\"1491\":1,\"1507\":1,\"1510\":1,\"1516\":1,\"1517\":1,\"1529\":1,\"1531\":1,\"1532\":1,\"1541\":1,\"1544\":1,\"1552\":1,\"1560\":1,\"1562\":1,\"1586\":1,\"1597\":1,\"1608\":1,\"1620\":1}}],[\"括号\",{\"1\":{\"465\":1}}],[\"括号匹配\",{\"0\":{\"465\":1,\"470\":1}}],[\"括号组合\",{\"1\":{\"9\":1}}],[\"括号生成\",{\"0\":{\"9\":1}}],[\"0>\",{\"1\":{\"1598\":1}}],[\"0之间\",{\"1\":{\"1212\":1}}],[\"0表示左孩子\",{\"1\":{\"1169\":1}}],[\"08000000\",{\"1\":{\"1463\":2}}],[\"08\",{\"1\":{\"1056\":1,\"1111\":2,\"1162\":1}}],[\"05emailjs\",{\"1\":{\"1057\":1}}],[\"05\",{\"1\":{\"1054\":1,\"1056\":1,\"1212\":1,\"1463\":1}}],[\"07\",{\"1\":{\"1004\":1,\"1056\":1}}],[\"09\",{\"1\":{\"1004\":5,\"1472\":1}}],[\"0~7\",{\"1\":{\"1557\":2}}],[\"0~255\",{\"1\":{\"973\":1}}],[\"0~239\",{\"1\":{\"973\":1}}],[\"0~172\",{\"1\":{\"973\":1}}],[\"0~127\",{\"1\":{\"973\":1}}],[\"0为版本号\",{\"1\":{\"715\":1}}],[\"0h\",{\"1\":{\"671\":2}}],[\"0|\",{\"1\":{\"529\":1}}],[\"00410e10\",{\"1\":{\"1463\":2}}],[\"00474343\",{\"1\":{\"1463\":1}}],[\"0040\",{\"1\":{\"1463\":2}}],[\"0050\",{\"1\":{\"1463\":2}}],[\"008b0500\",{\"1\":{\"1463\":1}}],[\"0030\",{\"1\":{\"1463\":2}}],[\"003c7e\",{\"1\":{\"354\":1}}],[\"0090c9c3\",{\"1\":{\"1463\":2}}],[\"0020\",{\"1\":{\"1463\":5}}],[\"00\",{\"1\":{\"552\":1,\"1169\":1,\"1463\":27,\"1464\":27,\"1515\":1}}],[\"0010\",{\"1\":{\"537\":1,\"1463\":3}}],[\"001\",{\"1\":{\"317\":1,\"1212\":3}}],[\"00057\",{\"1\":{\"606\":1}}],[\"000\",{\"1\":{\"317\":1}}],[\"0001\",{\"1\":{\"120\":3,\"982\":1,\"1185\":1}}],[\"00008b45\",{\"1\":{\"1463\":1}}],[\"0000008b\",{\"1\":{\"1463\":1}}],[\"000000b8\",{\"1\":{\"1463\":1}}],[\"000000d0\",{\"1\":{\"1463\":1}}],[\"00000058\",{\"1\":{\"1463\":1}}],[\"00000057\",{\"1\":{\"1463\":1}}],[\"000000ce\",{\"1\":{\"1463\":1}}],[\"000000a4\",{\"1\":{\"1463\":1}}],[\"000000a0\",{\"1\":{\"1463\":2}}],[\"0000002a\",{\"1\":{\"1463\":1}}],[\"00000098\",{\"1\":{\"1463\":1}}],[\"00000001\",{\"1\":{\"1463\":1}}],[\"0000000000000024\",{\"1\":{\"1463\":2}}],[\"0000000000000000\",{\"1\":{\"1463\":15}}],[\"00000000\",{\"1\":{\"1463\":5}}],[\"00000004\",{\"1\":{\"1463\":2}}],[\"00000008\",{\"1\":{\"1463\":1}}],[\"00000040\",{\"1\":{\"1463\":1}}],[\"0000541c\",{\"1\":{\"354\":1}}],[\"0000\",{\"1\":{\"88\":9,\"982\":1,\"1463\":6}}],[\"038+0000\",{\"1\":{\"793\":1}}],[\"03\",{\"1\":{\"250\":1,\"1053\":1,\"1057\":1}}],[\"035\",{\"1\":{\"26\":1}}],[\"0xe\",{\"1\":{\"1483\":1}}],[\"0xd\",{\"1\":{\"1483\":1}}],[\"0xc\",{\"1\":{\"1483\":1}}],[\"0xb\",{\"1\":{\"1483\":1}}],[\"0xa\",{\"1\":{\"1483\":1}}],[\"0x9\",{\"1\":{\"1483\":1}}],[\"0x7\",{\"1\":{\"1483\":1}}],[\"0x7fffffff\",{\"1\":{\"251\":2}}],[\"0x6\",{\"1\":{\"1483\":1}}],[\"0x5\",{\"1\":{\"1483\":1}}],[\"0x54\",{\"1\":{\"1463\":1,\"1515\":1}}],[\"0x3\",{\"1\":{\"1483\":1}}],[\"0x3ed000\",{\"1\":{\"530\":1}}],[\"0x208\",{\"1\":{\"1515\":1}}],[\"0x24\",{\"1\":{\"1515\":1}}],[\"0x2\",{\"1\":{\"1483\":1}}],[\"0x234000\",{\"1\":{\"530\":1}}],[\"0x4\",{\"1\":{\"1463\":3,\"1483\":1}}],[\"0x40\",{\"1\":{\"201\":1,\"203\":1}}],[\"0xf\",{\"1\":{\"1483\":1}}],[\"0xffffffe55f4d072c\",{\"1\":{\"1515\":1}}],[\"0xffffffff\",{\"1\":{\"251\":2}}],[\"0xff\",{\"1\":{\"1189\":1}}],[\"0xf800003f\",{\"1\":{\"682\":1}}],[\"0xf800c041\",{\"1\":{\"681\":1,\"682\":1}}],[\"0x1c\",{\"1\":{\"1515\":2}}],[\"0x1c100000\",{\"1\":{\"1481\":2}}],[\"0x108\",{\"1\":{\"1515\":1}}],[\"0x10\",{\"1\":{\"1481\":1}}],[\"0x1elf\",{\"1\":{\"1464\":1}}],[\"0x1\",{\"1\":{\"1464\":1,\"1483\":1}}],[\"0x150\",{\"1\":{\"526\":1}}],[\"0x1baecc\",{\"1\":{\"521\":1}}],[\"0x88000000\",{\"1\":{\"1496\":1}}],[\"0x8\",{\"1\":{\"524\":2,\"532\":2,\"1463\":3,\"1483\":1}}],[\"0x80000000\",{\"1\":{\"251\":2}}],[\"0x80\",{\"1\":{\"201\":1,\"203\":1}}],[\"0x04000000\",{\"1\":{\"1479\":1}}],[\"0x0入口地址\",{\"1\":{\"1464\":1}}],[\"0x0\",{\"1\":{\"1463\":3,\"1464\":2,\"1483\":1}}],[\"0x00600000\",{\"1\":{\"1481\":1}}],[\"0x001bad28\",{\"1\":{\"673\":1}}],[\"0x001bad24\",{\"1\":{\"673\":1}}],[\"0x001bad20\",{\"1\":{\"673\":1}}],[\"0x0001\",{\"1\":{\"664\":2}}],[\"0x0000000000000001\",{\"1\":{\"681\":1,\"682\":2}}],[\"0x00000000\",{\"1\":{\"251\":2,\"1479\":1}}],[\"0x0021\",{\"1\":{\"664\":1}}],[\"0x00\",{\"1\":{\"201\":1,\"203\":1}}],[\"0x037acea8>\",{\"1\":{\"146\":1}}],[\"021\",{\"1\":{\"326\":3}}],[\"02\",{\"1\":{\"150\":1,\"250\":1,\"1053\":1,\"1056\":1,\"1075\":2,\"1076\":2,\"1464\":3}}],[\"01781001\",{\"1\":{\"1463\":1}}],[\"017a5200\",{\"1\":{\"1463\":1}}],[\"01c28b45\",{\"1\":{\"1463\":1}}],[\"01charts\",{\"1\":{\"1054\":1}}],[\"011\",{\"1\":{\"317\":1}}],[\"0110111\",{\"1\":{\"167\":1}}],[\"0100\",{\"1\":{\"537\":1}}],[\"0100等\",{\"1\":{\"88\":1}}],[\"010\",{\"1\":{\"317\":1,\"377\":2,\"671\":1}}],[\"01\",{\"1\":{\"150\":1,\"1053\":1,\"1056\":1,\"1076\":2,\"1095\":1,\"1170\":1,\"1445\":2,\"1446\":3,\"1463\":4,\"1464\":6}}],[\"0b\",{\"1\":{\"102\":1}}],[\"066e0c07\",{\"1\":{\"1463\":1}}],[\"0666|ipc\",{\"1\":{\"742\":1,\"743\":1}}],[\"0666\",{\"1\":{\"741\":2}}],[\"065f0c07\",{\"1\":{\"1463\":1}}],[\"06\",{\"0\":{\"63\":1},\"1\":{\"46\":1,\"63\":1,\"552\":1,\"1054\":1,\"1056\":1}}],[\"04lts操作系统\",{\"1\":{\"1161\":1}}],[\"04lts\",{\"1\":{\"780\":2,\"1144\":1}}],[\"0406\",{\"1\":{\"750\":2}}],[\"04\",{\"0\":{\"63\":1},\"1\":{\"46\":1,\"63\":1,\"620\":1,\"748\":2,\"905\":1,\"1057\":1,\"1143\":2,\"1144\":1,\"1463\":1}}],[\"0\",{\"0\":{\"114\":1,\"116\":1,\"1493\":1},\"1\":{\"8\":1,\"9\":5,\"10\":2,\"11\":2,\"13\":5,\"14\":1,\"15\":9,\"19\":1,\"20\":1,\"21\":2,\"22\":2,\"25\":1,\"26\":1,\"30\":1,\"31\":1,\"32\":2,\"33\":3,\"34\":1,\"35\":4,\"36\":5,\"47\":1,\"54\":2,\"56\":3,\"57\":1,\"61\":2,\"62\":1,\"74\":27,\"75\":11,\"76\":17,\"77\":3,\"79\":17,\"80\":5,\"81\":3,\"84\":5,\"85\":6,\"86\":19,\"87\":3,\"88\":5,\"90\":6,\"91\":14,\"92\":2,\"96\":2,\"98\":1,\"102\":3,\"108\":7,\"112\":2,\"114\":4,\"116\":1,\"118\":8,\"120\":19,\"122\":1,\"124\":4,\"125\":5,\"126\":5,\"127\":1,\"128\":3,\"130\":4,\"132\":2,\"134\":4,\"136\":3,\"138\":2,\"139\":1,\"147\":6,\"149\":3,\"150\":12,\"152\":4,\"153\":11,\"154\":4,\"155\":10,\"156\":1,\"157\":2,\"158\":5,\"159\":4,\"160\":5,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":5,\"172\":8,\"177\":2,\"183\":2,\"184\":7,\"185\":5,\"186\":1,\"194\":8,\"198\":1,\"201\":3,\"202\":3,\"203\":1,\"206\":1,\"217\":1,\"220\":4,\"274\":6,\"285\":4,\"289\":4,\"293\":1,\"297\":3,\"299\":1,\"308\":3,\"339\":2,\"340\":7,\"341\":4,\"354\":1,\"360\":1,\"371\":1,\"373\":3,\"374\":3,\"392\":1,\"397\":2,\"401\":4,\"402\":3,\"420\":1,\"446\":2,\"460\":4,\"466\":1,\"480\":5,\"481\":4,\"496\":1,\"502\":2,\"508\":1,\"509\":3,\"510\":1,\"520\":2,\"521\":5,\"527\":1,\"528\":1,\"534\":2,\"536\":1,\"559\":4,\"571\":1,\"587\":1,\"605\":1,\"609\":6,\"613\":4,\"618\":2,\"652\":1,\"664\":8,\"681\":3,\"682\":7,\"692\":9,\"693\":1,\"715\":2,\"724\":2,\"738\":3,\"741\":2,\"742\":3,\"743\":2,\"776\":1,\"843\":1,\"848\":1,\"864\":4,\"892\":4,\"898\":3,\"905\":1,\"906\":5,\"931\":2,\"949\":2,\"955\":1,\"956\":3,\"972\":1,\"973\":8,\"978\":1,\"982\":2,\"984\":1,\"1004\":3,\"1021\":1,\"1024\":2,\"1025\":5,\"1053\":2,\"1068\":2,\"1078\":1,\"1094\":1,\"1103\":1,\"1105\":1,\"1107\":1,\"1142\":3,\"1145\":1,\"1155\":1,\"1156\":1,\"1161\":3,\"1169\":1,\"1179\":1,\"1181\":1,\"1185\":10,\"1186\":11,\"1189\":4,\"1192\":1,\"1212\":23,\"1216\":1,\"1217\":5,\"1221\":1,\"1246\":2,\"1263\":4,\"1264\":2,\"1265\":2,\"1301\":5,\"1309\":1,\"1314\":2,\"1316\":1,\"1320\":6,\"1328\":2,\"1329\":3,\"1333\":8,\"1344\":1,\"1345\":2,\"1365\":1,\"1446\":1,\"1462\":1,\"1463\":8,\"1464\":7,\"1483\":2,\"1493\":5,\"1515\":13,\"1520\":2,\"1521\":1,\"1528\":1,\"1534\":1,\"1542\":2,\"1543\":1,\"1545\":3,\"1551\":1,\"1556\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1570\":1,\"1571\":1,\"1575\":1,\"1596\":1,\"1602\":2,\"1606\":1,\"1607\":1,\"1608\":1,\"1609\":1,\"1611\":3,\"1613\":1,\"1645\":4,\"1646\":2,\"1647\":2}}],[\"+4\",{\"1\":{\"1463\":1}}],[\"+x\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"+x87\",{\"1\":{\"692\":1}}],[\"+qall\",{\"1\":{\"1259\":1}}],[\"+plugininstall\",{\"1\":{\"1259\":1}}],[\"+printtouchedmethodsatexit\",{\"1\":{\"660\":1}}],[\"+printaot\",{\"1\":{\"658\":2}}],[\"+sse2\",{\"1\":{\"692\":1}}],[\"+sse\",{\"1\":{\"692\":1}}],[\"+self\",{\"1\":{\"424\":3}}],[\"+mmx\",{\"1\":{\"692\":1}}],[\"+cx8\",{\"1\":{\"692\":1}}],[\"+cn\",{\"1\":{\"177\":1}}],[\"+logtouchedmethods\",{\"1\":{\"660\":1}}],[\"+unlockdiagnosticvmoptions\",{\"1\":{\"660\":1}}],[\"+0xc\",{\"1\":{\"521\":1}}],[\"+r\",{\"1\":{\"507\":1}}],[\"++i\",{\"1\":{\"1365\":1}}],[\"++cnt\",{\"1\":{\"751\":1}}],[\"++counts\",{\"1\":{\"455\":1}}],[\"++\",{\"1\":{\"480\":2,\"1573\":1}}],[\"+θ\",{\"1\":{\"177\":1}}],[\"+t\",{\"1\":{\"177\":1}}],[\"+kwi∣0≤kci≤v\",{\"1\":{\"128\":1}}],[\"+2\",{\"1\":{\"124\":1}}],[\"+wi​\",{\"1\":{\"117\":1}}],[\"+fxsr\",{\"1\":{\"692\":1}}],[\"+f\",{\"1\":{\"94\":1,\"104\":1}}],[\"+1\",{\"1\":{\"56\":1,\"86\":1,\"88\":1,\"120\":1,\"124\":4,\"155\":1,\"184\":1,\"562\":1}}],[\"+=1\",{\"1\":{\"169\":1}}],[\"+=\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"15\":1,\"34\":3,\"36\":1,\"49\":2,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"85\":1,\"86\":1,\"87\":2,\"90\":1,\"114\":1,\"115\":2,\"124\":3,\"134\":2,\"136\":2,\"149\":4,\"152\":2,\"153\":7,\"154\":4,\"157\":3,\"165\":5,\"166\":1,\"169\":2,\"184\":1,\"186\":1,\"289\":1,\"297\":1,\"466\":1,\"481\":3,\"495\":1,\"496\":1,\"509\":2,\"1312\":1,\"1315\":1,\"1316\":2,\"1344\":2}}],[\"+\",{\"0\":{\"388\":1,\"495\":1,\"496\":1,\"497\":1},\"1\":{\"8\":1,\"9\":2,\"10\":1,\"11\":3,\"14\":2,\"15\":14,\"19\":2,\"20\":2,\"21\":3,\"22\":4,\"23\":2,\"25\":3,\"26\":2,\"30\":3,\"31\":2,\"32\":4,\"33\":5,\"34\":5,\"35\":5,\"36\":2,\"42\":2,\"47\":2,\"49\":4,\"54\":2,\"56\":2,\"57\":2,\"61\":2,\"62\":3,\"74\":5,\"76\":2,\"77\":2,\"79\":4,\"80\":4,\"85\":2,\"87\":3,\"88\":3,\"90\":3,\"91\":6,\"92\":8,\"95\":1,\"96\":2,\"97\":1,\"98\":1,\"102\":1,\"103\":2,\"108\":5,\"114\":2,\"115\":2,\"118\":9,\"120\":3,\"122\":1,\"124\":25,\"125\":2,\"126\":1,\"130\":7,\"132\":6,\"134\":2,\"136\":2,\"138\":2,\"139\":2,\"144\":3,\"147\":6,\"149\":7,\"150\":2,\"152\":5,\"153\":1,\"155\":5,\"160\":6,\"165\":5,\"166\":1,\"167\":1,\"177\":2,\"180\":3,\"182\":2,\"183\":3,\"184\":7,\"185\":2,\"195\":12,\"245\":4,\"261\":1,\"263\":1,\"289\":2,\"297\":1,\"299\":1,\"341\":2,\"355\":1,\"356\":1,\"359\":1,\"360\":1,\"400\":1,\"401\":1,\"404\":1,\"414\":1,\"424\":6,\"434\":2,\"435\":2,\"438\":14,\"480\":1,\"496\":2,\"502\":1,\"509\":4,\"524\":3,\"527\":1,\"528\":1,\"532\":1,\"533\":1,\"557\":1,\"585\":2,\"586\":2,\"587\":3,\"595\":1,\"614\":1,\"681\":1,\"682\":2,\"692\":1,\"703\":5,\"741\":1,\"747\":2,\"761\":2,\"808\":1,\"843\":1,\"844\":2,\"904\":2,\"906\":1,\"926\":6,\"931\":2,\"933\":2,\"937\":1,\"982\":3,\"984\":1,\"985\":3,\"987\":1,\"996\":3,\"1000\":1,\"1142\":1,\"1185\":3,\"1186\":2,\"1212\":1,\"1228\":1,\"1312\":1,\"1328\":3,\"1344\":2,\"1446\":1,\"1449\":1,\"1463\":3}}],[\"jbyte\",{\"1\":{\"1320\":1}}],[\"jboolean\",{\"1\":{\"1320\":1,\"1333\":1}}],[\"jz\",{\"1\":{\"1113\":2}}],[\"jpg\",{\"1\":{\"1079\":2,\"1159\":3,\"1161\":2,\"1162\":1,\"1196\":1}}],[\"jeremybai\",{\"1\":{\"1472\":1}}],[\"jekyll\",{\"0\":{\"1071\":1},\"1\":{\"1054\":1,\"1071\":1,\"1072\":1,\"1073\":2,\"1074\":5,\"1076\":2,\"1078\":2,\"1079\":1}}],[\"jenkins\",{\"0\":{\"612\":1},\"1\":{\"612\":7}}],[\"jsdelivr\",{\"1\":{\"1105\":1,\"1236\":1}}],[\"js\",{\"0\":{\"888\":1,\"901\":1,\"915\":1,\"916\":1,\"921\":1,\"1081\":1,\"1113\":1},\"1\":{\"888\":1,\"889\":5,\"890\":7,\"891\":1,\"892\":2,\"906\":1,\"916\":3,\"939\":1,\"1009\":1,\"1054\":4,\"1055\":1,\"1056\":1,\"1081\":2,\"1099\":1,\"1101\":1,\"1105\":1,\"1111\":1,\"1113\":2,\"1329\":1},\"2\":{\"920\":1,\"946\":1,\"1116\":1}}],[\"json\",{\"0\":{\"410\":1,\"902\":1},\"1\":{\"388\":2,\"410\":6,\"412\":3,\"794\":2,\"842\":4,\"902\":5,\"917\":1,\"927\":5,\"1094\":4,\"1101\":2,\"1263\":2,\"1645\":2}}],[\"jn\",{\"1\":{\"714\":2}}],[\"jnicall\",{\"1\":{\"1320\":1}}],[\"jni<kenableindexids>\",{\"1\":{\"708\":1}}],[\"jniimpl\",{\"1\":{\"708\":10}}],[\"jninativemethod\",{\"1\":{\"706\":2,\"1402\":1,\"1403\":1}}],[\"jninativeinterfacefunctions\",{\"1\":{\"708\":1}}],[\"jninativeinterface\",{\"0\":{\"708\":1},\"1\":{\"701\":1,\"708\":2}}],[\"jnienv\",{\"1\":{\"706\":5,\"707\":2,\"1320\":1,\"1333\":1,\"1365\":1,\"1402\":4,\"1403\":1,\"1405\":2}}],[\"jni\",{\"0\":{\"694\":1,\"697\":1,\"698\":1,\"704\":1,\"706\":1,\"1365\":1,\"1392\":1,\"1394\":1,\"1397\":1,\"1399\":1,\"1401\":1,\"1404\":1},\"1\":{\"695\":6,\"696\":15,\"706\":9,\"707\":11,\"708\":2,\"1320\":8,\"1333\":1,\"1365\":10,\"1392\":2,\"1395\":6,\"1396\":15,\"1402\":1,\"1403\":8,\"1405\":11}}],[\"jchararray\",{\"1\":{\"706\":1,\"1402\":1}}],[\"jck\",{\"1\":{\"667\":1}}],[\"jdk\",{\"1\":{\"704\":1,\"878\":1,\"1399\":1}}],[\"jiaqi\",{\"1\":{\"1623\":1}}],[\"jianshu\",{\"1\":{\"731\":1}}],[\"jie\",{\"1\":{\"1127\":1}}],[\"jinja2\",{\"1\":{\"1054\":1}}],[\"jinja\",{\"1\":{\"1053\":1}}],[\"jint\",{\"1\":{\"706\":5,\"1320\":1,\"1333\":2,\"1365\":1,\"1402\":3,\"1403\":2}}],[\"jitter=\",{\"1\":{\"1162\":1}}],[\"jit\",{\"0\":{\"653\":1},\"1\":{\"651\":1,\"653\":3,\"662\":2,\"687\":3,\"690\":2}}],[\"jim\",{\"1\":{\"343\":1}}],[\"j2ee模式\",{\"1\":{\"629\":1}}],[\"job\",{\"1\":{\"1374\":1}}],[\"jobject\",{\"1\":{\"706\":2,\"1320\":2,\"1333\":3,\"1402\":2}}],[\"jol\",{\"1\":{\"681\":2,\"682\":1}}],[\"john\",{\"1\":{\"606\":2}}],[\"jointhreadpool\",{\"0\":{\"1298\":1},\"1\":{\"1293\":1,\"1296\":1,\"1297\":1,\"1298\":1,\"1299\":1,\"1310\":3}}],[\"joins\",{\"1\":{\"285\":1}}],[\"join\",{\"0\":{\"807\":1},\"1\":{\"8\":1,\"9\":2,\"88\":4,\"184\":2,\"185\":1,\"285\":3,\"286\":1,\"289\":1,\"298\":1,\"301\":1,\"348\":1,\"352\":1,\"383\":1,\"394\":1,\"404\":1,\"807\":2,\"1185\":1,\"1216\":1,\"1509\":1}}],[\"j=0\",{\"1\":{\"507\":1}}],[\"jacobson\",{\"1\":{\"978\":1}}],[\"jack\",{\"1\":{\"343\":1,\"375\":2,\"1095\":1}}],[\"january\",{\"1\":{\"892\":1,\"907\":1}}],[\"jar文件方面\",{\"1\":{\"688\":1}}],[\"jar\",{\"1\":{\"670\":1,\"707\":1,\"1405\":1}}],[\"jaotc\",{\"1\":{\"657\":1,\"659\":1,\"661\":1,\"662\":1,\"664\":1}}],[\"jaotcompilation\",{\"1\":{\"657\":6,\"658\":5,\"660\":1,\"662\":2}}],[\"javavmoption\",{\"1\":{\"1365\":2}}],[\"javavmext\",{\"1\":{\"1365\":1}}],[\"javavminitargs\",{\"1\":{\"1365\":2}}],[\"javavm\",{\"1\":{\"1365\":1}}],[\"javaohosrpcmessageparcelgetnative\",{\"1\":{\"1320\":1}}],[\"javascript\",{\"0\":{\"901\":1},\"1\":{\"888\":1,\"905\":1,\"939\":1,\"1053\":1},\"2\":{\"914\":1}}],[\"java核心库libcore中添加log接口任意调用\",{\"1\":{\"708\":1,\"1406\":1}}],[\"javadoc\",{\"1\":{\"705\":1,\"1400\":1}}],[\"javathread\",{\"1\":{\"676\":3}}],[\"javap\",{\"1\":{\"664\":2}}],[\"javabasestring\",{\"1\":{\"661\":1}}],[\"javabaselang\",{\"1\":{\"659\":1}}],[\"javac\",{\"1\":{\"657\":1,\"664\":1}}],[\"java\",{\"0\":{\"266\":1,\"632\":1,\"651\":1,\"657\":1,\"672\":1,\"674\":1,\"685\":1,\"696\":1,\"705\":1,\"1321\":1,\"1396\":1,\"1400\":1,\"1402\":1},\"1\":{\"266\":1,\"377\":1,\"651\":1,\"652\":4,\"655\":4,\"657\":4,\"658\":5,\"659\":2,\"660\":1,\"661\":1,\"664\":16,\"667\":5,\"669\":1,\"670\":4,\"672\":2,\"674\":7,\"675\":2,\"677\":1,\"681\":3,\"682\":2,\"685\":1,\"688\":4,\"695\":8,\"696\":6,\"697\":1,\"701\":3,\"702\":5,\"703\":2,\"705\":13,\"706\":13,\"707\":10,\"869\":2,\"1048\":1,\"1320\":2,\"1333\":1,\"1365\":1,\"1379\":1,\"1392\":1,\"1393\":1,\"1395\":8,\"1396\":6,\"1400\":13,\"1402\":11,\"1403\":2,\"1405\":10},\"2\":{\"631\":1,\"683\":1,\"684\":1,\"709\":1,\"710\":1,\"1368\":1,\"1369\":1,\"1377\":1,\"1378\":1,\"1390\":1,\"1407\":1,\"1408\":1}}],[\"jvm\",{\"0\":{\"266\":1,\"667\":1,\"688\":1},\"1\":{\"266\":2,\"651\":1,\"652\":1,\"655\":1,\"658\":1,\"660\":1,\"664\":1,\"667\":3,\"676\":2,\"688\":2,\"701\":2,\"707\":1,\"1406\":1},\"2\":{\"634\":1,\"684\":1,\"710\":1,\"1369\":1,\"1378\":1,\"1391\":1,\"1408\":1}}],[\"j++\",{\"1\":{\"183\":1,\"480\":1}}],[\"j+1\",{\"1\":{\"147\":2,\"152\":2,\"153\":1,\"160\":3,\"401\":1}}],[\"jul\",{\"1\":{\"1052\":10}}],[\"july\",{\"0\":{\"1052\":1},\"1\":{\"892\":1,\"907\":1}}],[\"june\",{\"1\":{\"892\":1,\"907\":1}}],[\"junit\",{\"1\":{\"377\":1}}],[\"juejin\",{\"1\":{\"539\":1,\"885\":1}}],[\"jupyter\",{\"1\":{\"365\":2}}],[\"jump\",{\"1\":{\"692\":1}}],[\"jumps\",{\"1\":{\"245\":1,\"1481\":1}}],[\"jumpfloorii\",{\"1\":{\"103\":1}}],[\"jumpfloor\",{\"1\":{\"103\":1}}],[\"justified\",{\"1\":{\"556\":1}}],[\"just\",{\"1\":{\"234\":1,\"357\":1,\"492\":1,\"580\":1,\"584\":1,\"599\":1,\"707\":2,\"820\":1,\"1216\":1,\"1405\":2,\"1623\":1}}],[\"judgement\",{\"1\":{\"1219\":1}}],[\"judge\",{\"1\":{\"87\":1}}],[\"j\",{\"1\":{\"36\":5,\"74\":18,\"75\":2,\"76\":12,\"108\":9,\"118\":10,\"120\":9,\"147\":4,\"152\":7,\"153\":11,\"154\":12,\"160\":6,\"178\":3,\"183\":9,\"184\":9,\"340\":4,\"356\":2,\"392\":1,\"401\":2,\"480\":4,\"502\":4,\"504\":4,\"507\":3,\"606\":1,\"664\":1,\"1454\":2}}],[\"jkl\",{\"1\":{\"8\":1}}],[\"8d\",{\"1\":{\"1463\":1}}],[\"8b\",{\"1\":{\"1463\":6}}],[\"8bits\",{\"1\":{\"991\":1}}],[\"83\",{\"1\":{\"1463\":2}}],[\"8388\",{\"1\":{\"1263\":1,\"1265\":2,\"1645\":1,\"1647\":2}}],[\"8602430d\",{\"1\":{\"1463\":2}}],[\"85\",{\"1\":{\"1463\":1}}],[\"880\",{\"1\":{\"1281\":6}}],[\"828\",{\"0\":{\"1616\":1}}],[\"82\",{\"1\":{\"1269\":3}}],[\"8是存在的编码\",{\"1\":{\"1170\":1}}],[\"8448623↩︎\",{\"1\":{\"1615\":1}}],[\"84\",{\"1\":{\"1145\":1,\"1463\":2}}],[\"8s+\",{\"1\":{\"985\":1}}],[\"8s\",{\"1\":{\"985\":1}}],[\"8n\",{\"1\":{\"679\":1}}],[\"8addb0h\",{\"1\":{\"671\":1}}],[\"81bits\",{\"1\":{\"586\":1}}],[\"81\",{\"1\":{\"584\":1}}],[\"8k\",{\"1\":{\"562\":3}}],[\"80211n\",{\"1\":{\"1145\":5}}],[\"802\",{\"1\":{\"977\":1,\"1120\":2,\"1143\":1,\"1145\":1,\"1203\":4,\"1206\":1}}],[\"800k\",{\"1\":{\"1333\":1}}],[\"8001\",{\"1\":{\"864\":1}}],[\"8000\",{\"1\":{\"368\":1,\"616\":2,\"745\":1,\"957\":2}}],[\"8091\",{\"1\":{\"763\":1,\"764\":1,\"765\":1}}],[\"8090\",{\"1\":{\"760\":2,\"761\":4,\"763\":1,\"764\":1,\"765\":1}}],[\"8097\",{\"1\":{\"446\":2}}],[\"8089\",{\"1\":{\"760\":2,\"761\":4}}],[\"8088\",{\"1\":{\"760\":2}}],[\"8080\",{\"1\":{\"612\":2,\"613\":1,\"759\":1,\"766\":1,\"1099\":1}}],[\"801\",{\"1\":{\"622\":1}}],[\"80\",{\"1\":{\"368\":2,\"609\":1,\"621\":3,\"741\":1,\"745\":2,\"753\":2,\"761\":1,\"766\":1}}],[\"897dfc8b\",{\"1\":{\"1463\":1}}],[\"89\",{\"1\":{\"94\":1,\"1463\":5}}],[\"8\",{\"0\":{\"436\":1},\"1\":{\"8\":1,\"11\":1,\"77\":1,\"88\":7,\"90\":1,\"94\":1,\"146\":1,\"147\":2,\"155\":1,\"168\":2,\"194\":2,\"198\":1,\"204\":5,\"285\":1,\"293\":1,\"323\":1,\"326\":1,\"339\":2,\"341\":5,\"354\":2,\"375\":1,\"387\":1,\"388\":2,\"468\":1,\"509\":1,\"511\":6,\"525\":1,\"527\":2,\"552\":1,\"556\":1,\"558\":4,\"559\":1,\"564\":1,\"613\":4,\"664\":3,\"673\":1,\"674\":1,\"681\":2,\"682\":4,\"692\":1,\"892\":2,\"949\":2,\"972\":3,\"979\":2,\"999\":1,\"1004\":1,\"1021\":2,\"1094\":1,\"1113\":1,\"1132\":1,\"1143\":1,\"1170\":3,\"1185\":1,\"1212\":2,\"1326\":1,\"1345\":1,\"1366\":1,\"1463\":2,\"1499\":1,\"1515\":1,\"1553\":1}}],[\"7s\",{\"1\":{\"1551\":1}}],[\"7f\",{\"1\":{\"1464\":3}}],[\"7fef8h\",{\"1\":{\"671\":1}}],[\"7e31382e\",{\"1\":{\"1463\":1}}],[\"700\",{\"1\":{\"1367\":1}}],[\"70h\",{\"1\":{\"671\":2}}],[\"73\",{\"1\":{\"1244\":1}}],[\"79\",{\"1\":{\"1221\":1}}],[\"7957\",{\"1\":{\"671\":1}}],[\"788\",{\"1\":{\"1623\":1}}],[\"784\",{\"1\":{\"1185\":1}}],[\"78\",{\"1\":{\"1054\":1,\"1237\":1}}],[\"72\",{\"1\":{\"898\":2}}],[\"728\",{\"1\":{\"401\":1}}],[\"76\",{\"1\":{\"898\":2}}],[\"766\",{\"1\":{\"401\":1}}],[\"74\",{\"1\":{\"776\":1}}],[\"75\",{\"1\":{\"892\":4,\"1237\":1}}],[\"75a2ch\",{\"1\":{\"671\":1}}],[\"7520372e\",{\"1\":{\"1463\":1}}],[\"752\",{\"1\":{\"88\":1}}],[\"77bits\",{\"1\":{\"585\":1}}],[\"7db\",{\"1\":{\"1207\":1}}],[\"7d\",{\"1\":{\"412\":1,\"1463\":1}}],[\"7b\",{\"1\":{\"412\":1}}],[\"7187\",{\"1\":{\"354\":1}}],[\"71\",{\"1\":{\"118\":1,\"1054\":1,\"1237\":1}}],[\"719\",{\"1\":{\"36\":1}}],[\"7\",{\"0\":{\"435\":1},\"1\":{\"8\":1,\"10\":3,\"11\":2,\"27\":1,\"28\":3,\"58\":1,\"77\":1,\"81\":1,\"90\":3,\"136\":1,\"146\":2,\"147\":5,\"150\":2,\"155\":1,\"156\":1,\"160\":1,\"167\":1,\"168\":4,\"194\":2,\"236\":1,\"293\":1,\"339\":2,\"341\":6,\"533\":2,\"549\":1,\"552\":1,\"558\":3,\"590\":1,\"664\":4,\"676\":1,\"692\":3,\"732\":1,\"892\":2,\"989\":1,\"1157\":10,\"1170\":1,\"1212\":4,\"1221\":2,\"1326\":1,\"1445\":2,\"1448\":2,\"1463\":2,\"1483\":3,\"1501\":1,\"1515\":1,\"1551\":1,\"1607\":1}}],[\"mbr\",{\"1\":{\"1620\":1}}],[\"mbps\",{\"1\":{\"1509\":1}}],[\"mw\",{\"1\":{\"1591\":1}}],[\"mlasterror\",{\"1\":{\"1333\":1}}],[\"mlock\",{\"1\":{\"703\":4,\"1294\":1}}],[\"mhandle\",{\"1\":{\"1333\":1}}],[\"mhz\",{\"1\":{\"1143\":2}}],[\"mgr\",{\"1\":{\"1307\":2}}],[\"mthreadpoolstarted\",{\"1\":{\"1294\":3,\"1295\":1}}],[\"mtu值\",{\"1\":{\"979\":1}}],[\"mtu\",{\"0\":{\"979\":1},\"1\":{\"979\":6,\"980\":5,\"981\":7}}],[\"mcpu\",{\"1\":{\"1510\":1}}],[\"mcus\",{\"1\":{\"1508\":1}}],[\"mcurrentfocus=window\",{\"1\":{\"1275\":1}}],[\"mcurrentfocus\",{\"1\":{\"1275\":2}}],[\"mcastprefix\",{\"1\":{\"609\":1}}],[\"mv\",{\"1\":{\"1145\":1,\"1249\":1}}],[\"m=$\",{\"1\":{\"1145\":2}}],[\"mdr\",{\"1\":{\"1620\":1}}],[\"mdata\",{\"1\":{\"1333\":1}}],[\"mdatasize\",{\"1\":{\"1333\":1}}],[\"md\",{\"1\":{\"1054\":1,\"1075\":2,\"1076\":1,\"1099\":1,\"1105\":2,\"1241\":1,\"1249\":1}}],[\"md5加密\",{\"1\":{\"1111\":1}}],[\"md5\",{\"1\":{\"375\":2,\"1111\":1,\"1145\":1}}],[\"msr\",{\"1\":{\"1517\":1}}],[\"mspawnthreadonstart\",{\"1\":{\"1294\":1}}],[\"mscreenon=true\",{\"1\":{\"1269\":1}}],[\"mscreenon\",{\"1\":{\"1269\":1}}],[\"mse\",{\"1\":{\"1212\":1}}],[\"msl\",{\"1\":{\"983\":2}}],[\"mss=1500\",{\"1\":{\"980\":1}}],[\"mss=1460\",{\"1\":{\"980\":2}}],[\"mss\",{\"0\":{\"980\":1},\"1\":{\"978\":1,\"980\":6,\"981\":1}}],[\"ms\",{\"1\":{\"789\":1,\"985\":1}}],[\"msg2\",{\"1\":{\"936\":1,\"939\":1}}],[\"msgpack\",{\"1\":{\"841\":1,\"842\":2}}],[\"msgsnd\",{\"1\":{\"742\":1}}],[\"msgrcv\",{\"1\":{\"742\":1}}],[\"msgget\",{\"1\":{\"742\":1}}],[\"msgid\",{\"1\":{\"742\":3}}],[\"msg\",{\"1\":{\"371\":2,\"707\":9,\"742\":1,\"934\":1,\"935\":1,\"939\":1,\"940\":4,\"1004\":3,\"1405\":9}}],[\"mzygotesecondarysocketaddress\",{\"1\":{\"703\":2}}],[\"mnist\",{\"0\":{\"1185\":1},\"1\":{\"1185\":16,\"1219\":6}}],[\"mnt\",{\"1\":{\"664\":1}}],[\"mnemonic\",{\"1\":{\"514\":2}}],[\"mno\",{\"1\":{\"8\":1}}],[\"mremote\",{\"1\":{\"1329\":1,\"1333\":2}}],[\"mrs\",{\"0\":{\"510\":1},\"1\":{\"510\":2}}],[\"mro顺序就是代码中的书写顺序\",{\"1\":{\"424\":1}}],[\"mro\",{\"1\":{\"424\":1,\"425\":1,\"427\":3}}],[\"mkfifo\",{\"1\":{\"741\":1}}],[\"mkinitramfs\",{\"1\":{\"715\":1}}],[\"mkvirtualenv\",{\"1\":{\"445\":1}}],[\"mkdir\",{\"1\":{\"274\":1,\"383\":1,\"445\":1,\"784\":1,\"1259\":1,\"1419\":1,\"1424\":1}}],[\"mprocess\",{\"1\":{\"1301\":1}}],[\"mp4\",{\"1\":{\"1127\":1}}],[\"mp\",{\"1\":{\"285\":4,\"844\":1}}],[\"myplugin\",{\"1\":{\"1092\":1}}],[\"myblog\",{\"1\":{\"1075\":1}}],[\"myevent\",{\"1\":{\"955\":2}}],[\"mytitle2\",{\"1\":{\"1107\":1}}],[\"mytitle\",{\"1\":{\"937\":1,\"939\":1,\"1107\":1}}],[\"mysite\",{\"1\":{\"999\":1}}],[\"mystyle\",{\"1\":{\"896\":1,\"897\":2}}],[\"mysqldatabase\",{\"1\":{\"819\":1}}],[\"mysql\",{\"0\":{\"610\":1,\"801\":1,\"802\":1,\"803\":1,\"808\":1},\"1\":{\"610\":6,\"789\":1,\"801\":2,\"804\":1,\"807\":1,\"808\":1,\"812\":2,\"819\":2}}],[\"mysqrt\",{\"1\":{\"35\":2}}],[\"mydoc\",{\"1\":{\"1079\":1}}],[\"mydata\",{\"1\":{\"815\":1}}],[\"mydatabase\",{\"1\":{\"796\":1}}],[\"myd\",{\"1\":{\"815\":1}}],[\"myindex\",{\"1\":{\"815\":1}}],[\"myi\",{\"1\":{\"815\":1}}],[\"myisam\",{\"0\":{\"815\":1}}],[\"myapplication\",{\"1\":{\"1275\":2,\"1278\":1}}],[\"myapp\",{\"1\":{\"775\":1,\"843\":1}}],[\"mychart\",{\"1\":{\"892\":3}}],[\"mycol\",{\"1\":{\"796\":2}}],[\"mycache\",{\"1\":{\"766\":1}}],[\"myclass\",{\"1\":{\"419\":1}}],[\"myfifo\",{\"1\":{\"741\":1}}],[\"my\",{\"0\":{\"1635\":1},\"1\":{\"403\":5,\"445\":3,\"455\":2,\"751\":1,\"819\":1,\"864\":6,\"911\":2,\"930\":1,\"1038\":1,\"1072\":2,\"1075\":2,\"1077\":1,\"1079\":2,\"1099\":2,\"1208\":1,\"1246\":1,\"1259\":1,\"1529\":4,\"1640\":1}}],[\"myvenv\",{\"1\":{\"275\":2}}],[\"mmap\",{\"0\":{\"1318\":1,\"1342\":1,\"1343\":1},\"1\":{\"1307\":2,\"1318\":4,\"1322\":2,\"1338\":1,\"1340\":1,\"1342\":2,\"1353\":1}}],[\"mmythreadid\",{\"1\":{\"1299\":1}}],[\"mm\",{\"1\":{\"252\":1,\"906\":2,\"1340\":2,\"1520\":1,\"1522\":2}}],[\"mmu\",{\"0\":{\"1484\":1},\"1\":{\"251\":1,\"252\":4,\"1482\":2,\"1484\":2,\"1488\":1,\"1498\":2}}],[\"moral\",{\"1\":{\"1623\":1}}],[\"moreover\",{\"1\":{\"543\":1,\"547\":1,\"549\":1,\"556\":1,\"557\":1}}],[\"more\",{\"0\":{\"311\":1},\"1\":{\"237\":2,\"241\":1,\"245\":1,\"250\":1,\"255\":1,\"256\":1,\"270\":1,\"271\":1,\"310\":1,\"311\":2,\"315\":1,\"317\":1,\"321\":1,\"329\":2,\"454\":1,\"542\":1,\"543\":1,\"558\":1,\"562\":1,\"582\":1,\"705\":1,\"708\":1,\"778\":1,\"1009\":1,\"1055\":1,\"1060\":1,\"1072\":1,\"1080\":1,\"1099\":1,\"1120\":1,\"1122\":1,\"1202\":2,\"1212\":2,\"1221\":1,\"1307\":1,\"1400\":1,\"1476\":1,\"1490\":1,\"1497\":1,\"1498\":1,\"1501\":1,\"1508\":2,\"1592\":1,\"1623\":3}}],[\"mobile\",{\"1\":{\"1508\":2,\"1509\":1}}],[\"mobjects\",{\"1\":{\"1333\":1}}],[\"mobjectssize\",{\"1\":{\"1333\":1}}],[\"mobject\",{\"1\":{\"1333\":2}}],[\"mock\",{\"1\":{\"1307\":1,\"1320\":1}}],[\"mout有数据\",{\"1\":{\"1301\":1}}],[\"mout\",{\"1\":{\"1299\":4,\"1301\":2,\"1333\":4}}],[\"mouse\",{\"1\":{\"1282\":1}}],[\"mounted\",{\"1\":{\"925\":2}}],[\"mountexternal\",{\"1\":{\"702\":2,\"703\":4}}],[\"mount\",{\"1\":{\"703\":8}}],[\"motion\",{\"1\":{\"1202\":1}}],[\"motivation\",{\"0\":{\"546\":1}}],[\"mo\",{\"1\":{\"1201\":1}}],[\"mope算法需要调用平衡二叉树构造函数avl\",{\"1\":{\"1171\":1}}],[\"mope算法与改进的mope算法其运算过程可分为两个步骤\",{\"1\":{\"1171\":1}}],[\"mope的方法需要加以改进\",{\"1\":{\"1170\":1}}],[\"mope加密方法的主要思想是对待加密数据按二叉搜索树节点位置编码\",{\"1\":{\"1169\":1}}],[\"mope\",{\"0\":{\"1165\":1,\"1169\":1}}],[\"momment\",{\"0\":{\"1113\":1}}],[\"moment\",{\"1\":{\"1052\":1,\"1056\":2,\"1113\":12}}],[\"money\",{\"1\":{\"1623\":2}}],[\"moniter\",{\"1\":{\"1479\":1}}],[\"monitoring\",{\"1\":{\"1501\":1}}],[\"monitors\",{\"1\":{\"592\":1}}],[\"monitor\",{\"0\":{\"591\":1},\"1\":{\"581\":1,\"1474\":2,\"1498\":1}}],[\"mono\",{\"1\":{\"796\":1}}],[\"mongodump\",{\"1\":{\"795\":1}}],[\"mongodb\",{\"0\":{\"611\":1,\"789\":1},\"1\":{\"789\":1,\"794\":1,\"796\":1,\"1052\":1,\"1053\":1,\"1055\":2}}],[\"mongorestore\",{\"1\":{\"795\":2}}],[\"mongoimport\",{\"1\":{\"794\":1}}],[\"mongo\",{\"1\":{\"611\":2,\"794\":1,\"796\":4,\"1054\":1}}],[\"monkeypath\",{\"1\":{\"383\":1}}],[\"monkeypatch\",{\"1\":{\"383\":1}}],[\"monthstring\",{\"1\":{\"907\":1}}],[\"monthly\",{\"1\":{\"892\":1}}],[\"month\",{\"0\":{\"907\":1},\"1\":{\"291\":2,\"892\":1,\"907\":2,\"1075\":1}}],[\"movl\",{\"1\":{\"1463\":1}}],[\"mov\",{\"1\":{\"354\":1,\"537\":1,\"1463\":12}}],[\"moved\",{\"1\":{\"1381\":3,\"1545\":1}}],[\"moves\",{\"1\":{\"392\":1,\"1122\":1,\"1216\":1}}],[\"move\",{\"0\":{\"302\":1,\"1226\":1},\"1\":{\"235\":1,\"301\":1,\"302\":3,\"406\":1,\"460\":1,\"1057\":1,\"1124\":1,\"1226\":2,\"1366\":2,\"1381\":2}}],[\"moving\",{\"1\":{\"234\":1,\"1185\":2}}],[\"moesi\",{\"1\":{\"225\":1}}],[\"modular\",{\"1\":{\"851\":1}}],[\"modules\",{\"1\":{\"714\":2,\"717\":4,\"1145\":4,\"1553\":1}}],[\"module是llvm\",{\"1\":{\"693\":1}}],[\"moduleid\",{\"1\":{\"692\":2}}],[\"module\",{\"0\":{\"1197\":1},\"1\":{\"379\":2,\"659\":1,\"691\":5,\"692\":2,\"693\":4,\"707\":1,\"718\":1,\"719\":2,\"766\":2,\"1105\":1,\"1145\":1,\"1307\":1,\"1405\":1,\"1534\":1,\"1605\":1}}],[\"modprobe\",{\"1\":{\"719\":1,\"1145\":5}}],[\"modprobe命令可解决依赖性并决定需要加载的模块\",{\"1\":{\"719\":1}}],[\"modinfo\",{\"1\":{\"718\":2}}],[\"modifiers\",{\"0\":{\"939\":1},\"1\":{\"940\":1}}],[\"modifier\",{\"1\":{\"938\":1}}],[\"modifies\",{\"1\":{\"793\":1}}],[\"modified\",{\"1\":{\"195\":1,\"224\":1,\"542\":1,\"543\":2,\"664\":1,\"1056\":1,\"1247\":2}}],[\"modification\",{\"1\":{\"557\":1,\"774\":1}}],[\"modifications\",{\"1\":{\"557\":1}}],[\"modify\",{\"0\":{\"1194\":1},\"1\":{\"194\":1,\"1052\":1,\"1076\":1,\"1099\":2,\"1105\":1,\"1189\":1}}],[\"mod\",{\"1\":{\"379\":1,\"955\":1,\"1145\":1,\"1566\":4}}],[\"modes\",{\"1\":{\"1509\":2}}],[\"modest\",{\"1\":{\"580\":1}}],[\"model=\",{\"1\":{\"940\":1,\"1004\":1}}],[\"models\",{\"1\":{\"858\":1,\"864\":1,\"1216\":1}}],[\"model\",{\"0\":{\"940\":1,\"990\":1},\"1\":{\"564\":1,\"819\":2,\"851\":1,\"925\":1,\"940\":4,\"970\":1,\"1055\":1,\"1101\":1,\"1153\":1,\"1185\":6,\"1217\":6,\"1219\":5,\"1485\":1,\"1623\":3,\"1629\":1}}],[\"mode\",{\"1\":{\"361\":1,\"798\":1,\"1056\":2,\"1509\":3,\"1541\":3,\"1543\":2,\"1545\":3,\"1593\":4}}],[\"modern\",{\"1\":{\"193\":1,\"237\":1,\"256\":1,\"892\":1,\"1153\":1,\"1501\":1}}],[\"mostly\",{\"1\":{\"543\":1,\"1545\":1}}],[\"most\",{\"1\":{\"193\":1,\"245\":1,\"271\":1,\"436\":1,\"552\":1,\"557\":1,\"562\":1,\"580\":1,\"676\":1,\"707\":1,\"942\":1,\"1153\":1,\"1405\":1}}],[\"music\",{\"1\":{\"1012\":1,\"1017\":1,\"1124\":1,\"1127\":1}}],[\"musappoolsecondarysocketaddress\",{\"1\":{\"703\":1}}],[\"mustaches\",{\"1\":{\"931\":1}}],[\"must\",{\"1\":{\"204\":1,\"217\":1,\"236\":7,\"237\":1,\"341\":1,\"371\":1,\"549\":3,\"552\":2,\"557\":1,\"658\":1,\"703\":1,\"707\":1,\"748\":1,\"1075\":1,\"1219\":2,\"1389\":1,\"1405\":1,\"1474\":1,\"1534\":1,\"1592\":1,\"1611\":2}}],[\"mutator\",{\"1\":{\"1389\":2}}],[\"mutators\",{\"1\":{\"1389\":1}}],[\"mutation\",{\"1\":{\"92\":1}}],[\"mutex\",{\"1\":{\"1340\":2,\"1366\":1,\"1566\":5,\"1590\":1,\"1600\":1,\"1607\":6}}],[\"mutils\",{\"1\":{\"360\":1}}],[\"mutil\",{\"0\":{\"356\":1},\"1\":{\"309\":1,\"571\":1}}],[\"much\",{\"1\":{\"237\":1,\"454\":1,\"549\":1,\"552\":1,\"558\":1,\"559\":1,\"573\":1,\"600\":1,\"1204\":2}}],[\"multidrop\",{\"1\":{\"1508\":1}}],[\"multicores\",{\"1\":{\"542\":1}}],[\"multicycle\",{\"1\":{\"236\":1}}],[\"multipath\",{\"1\":{\"1121\":1,\"1124\":2,\"1202\":4,\"1203\":1}}],[\"multiprocessing\",{\"0\":{\"284\":1},\"1\":{\"284\":1,\"285\":3,\"287\":1}}],[\"multiply\",{\"1\":{\"194\":1,\"340\":1}}],[\"multiplexing\",{\"1\":{\"559\":1}}],[\"multiplexor\",{\"1\":{\"198\":1}}],[\"multiple\",{\"0\":{\"897\":1},\"1\":{\"194\":1,\"227\":3,\"234\":2,\"559\":1,\"580\":1,\"606\":1,\"850\":1,\"896\":1,\"992\":1,\"1118\":2,\"1124\":1,\"1534\":1}}],[\"multiplication\",{\"1\":{\"176\":1}}],[\"multi\",{\"1\":{\"256\":2,\"571\":1,\"828\":1,\"1508\":1,\"1509\":1}}],[\"mercedes\",{\"1\":{\"1623\":1}}],[\"merge命令\",{\"1\":{\"1253\":1}}],[\"merged\",{\"1\":{\"1253\":2}}],[\"merge\",{\"0\":{\"176\":1},\"1\":{\"1252\":3}}],[\"mentioning\",{\"1\":{\"1623\":1}}],[\"menuconfig\",{\"1\":{\"713\":1}}],[\"medium\",{\"1\":{\"1508\":1}}],[\"media\",{\"1\":{\"696\":5,\"1161\":1,\"1396\":5}}],[\"mediascannerclient\",{\"1\":{\"696\":1,\"1396\":1}}],[\"mediascanner\",{\"1\":{\"696\":4,\"1396\":4}}],[\"measure\",{\"1\":{\"1592\":1}}],[\"measured\",{\"1\":{\"1202\":2,\"1204\":1,\"1206\":1,\"1208\":1}}],[\"measurement\",{\"0\":{\"1206\":1},\"1\":{\"1123\":1,\"1204\":1}}],[\"measuring\",{\"1\":{\"1123\":2,\"1203\":1}}],[\"meaning\",{\"1\":{\"553\":1,\"820\":1,\"1201\":1}}],[\"meaningless\",{\"1\":{\"197\":1}}],[\"mean\",{\"1\":{\"552\":1,\"1185\":3,\"1208\":1,\"1212\":3}}],[\"means\",{\"1\":{\"191\":1,\"194\":3,\"204\":1,\"241\":1,\"245\":1,\"271\":1,\"321\":1,\"748\":2,\"750\":2,\"865\":1,\"991\":1,\"1075\":1,\"1139\":1,\"1203\":1,\"1207\":1,\"1209\":1,\"1414\":1,\"1418\":1,\"1475\":1,\"1591\":1,\"1592\":2,\"1620\":1}}],[\"meeting\",{\"1\":{\"1052\":1}}],[\"meit\",{\"1\":{\"1004\":1}}],[\"mesage\",{\"1\":{\"1429\":1}}],[\"messageoption\",{\"1\":{\"1320\":1,\"1328\":2}}],[\"messageparcel\",{\"1\":{\"1320\":10,\"1328\":4}}],[\"message\",{\"0\":{\"1429\":1},\"1\":{\"931\":1,\"940\":1,\"1000\":2,\"1056\":1,\"1320\":2,\"1424\":1,\"1426\":2,\"1427\":1,\"1428\":1,\"1429\":1,\"1487\":1}}],[\"mesix\",{\"1\":{\"225\":1}}],[\"mesif\",{\"1\":{\"225\":1}}],[\"mesi\",{\"0\":{\"224\":1,\"225\":1},\"1\":{\"190\":1,\"224\":4}}],[\"mechanism\",{\"1\":{\"542\":1,\"543\":3,\"548\":1,\"573\":1,\"600\":1,\"1355\":1,\"1481\":1,\"1492\":1,\"1498\":1,\"1499\":1,\"1545\":1}}],[\"mechanisms\",{\"1\":{\"193\":1,\"549\":2,\"592\":1}}],[\"meta\",{\"1\":{\"819\":2}}],[\"metaobject\",{\"1\":{\"677\":1}}],[\"metaclass|\",{\"1\":{\"438\":1}}],[\"metaclass\",{\"0\":{\"437\":1}}],[\"metadata\",{\"1\":{\"261\":1}}],[\"methodinterceptorchain\",{\"1\":{\"1627\":1}}],[\"methodref\",{\"1\":{\"664\":1}}],[\"methodology\",{\"0\":{\"560\":1},\"1\":{\"552\":1,\"1623\":1}}],[\"methods=\",{\"1\":{\"796\":1}}],[\"methods\",{\"0\":{\"1403\":1},\"1\":{\"341\":1,\"664\":1,\"671\":1,\"706\":5,\"707\":6,\"794\":1,\"904\":1,\"923\":1,\"933\":1,\"939\":2,\"986\":1,\"1402\":1,\"1403\":4,\"1405\":5,\"1406\":1}}],[\"method\",{\"0\":{\"428\":1,\"1165\":1},\"1\":{\"340\":1,\"424\":1,\"427\":1,\"428\":2,\"435\":1,\"458\":2,\"543\":1,\"545\":1,\"555\":1,\"562\":1,\"664\":1,\"671\":4,\"673\":1,\"701\":1,\"706\":11,\"890\":1,\"933\":1,\"1263\":1,\"1320\":2,\"1381\":5,\"1402\":8,\"1403\":3,\"1629\":3,\"1645\":1}}],[\"member\",{\"1\":{\"1094\":1,\"1095\":2}}],[\"memcached\",{\"1\":{\"825\":2,\"828\":1}}],[\"memcpy\",{\"0\":{\"511\":1},\"1\":{\"511\":1,\"1469\":2,\"1470\":2}}],[\"memset\",{\"1\":{\"584\":1}}],[\"memecpy\",{\"1\":{\"511\":1}}],[\"memery\",{\"1\":{\"245\":1}}],[\"mem\",{\"1\":{\"236\":5,\"245\":4}}],[\"memories\",{\"1\":{\"236\":1,\"1476\":1,\"1484\":1}}],[\"memory\",{\"0\":{\"247\":1,\"249\":1},\"1\":{\"191\":1,\"193\":2,\"194\":5,\"195\":1,\"196\":2,\"198\":1,\"203\":1,\"216\":1,\"220\":1,\"227\":8,\"229\":2,\"235\":3,\"236\":5,\"243\":2,\"245\":12,\"250\":5,\"253\":4,\"255\":2,\"256\":5,\"261\":1,\"454\":1,\"539\":1,\"580\":1,\"582\":1,\"599\":1,\"600\":3,\"602\":3,\"604\":1,\"1198\":1,\"1345\":4,\"1366\":1,\"1376\":1,\"1479\":1,\"1484\":2,\"1486\":1,\"1487\":3,\"1491\":1,\"1492\":2,\"1493\":2,\"1494\":2,\"1495\":2,\"1496\":2,\"1499\":2,\"1501\":6,\"1502\":1,\"1620\":7}}],[\"memoization\",{\"1\":{\"97\":1}}],[\"memo\",{\"1\":{\"74\":9,\"96\":7}}],[\"me\",{\"1\":{\"87\":2,\"403\":3,\"940\":1,\"1076\":1,\"1099\":1}}],[\"mipi\",{\"1\":{\"1508\":2,\"1511\":1}}],[\"million\",{\"1\":{\"1623\":1}}],[\"millions\",{\"1\":{\"1221\":1}}],[\"milliseconds\",{\"1\":{\"1228\":1,\"1611\":2}}],[\"mikchy\",{\"1\":{\"1179\":2}}],[\"mikko\",{\"1\":{\"606\":2}}],[\"miter\",{\"1\":{\"892\":1}}],[\"mitigate\",{\"1\":{\"256\":1,\"605\":1}}],[\"migration\",{\"1\":{\"1054\":1}}],[\"migrations\",{\"1\":{\"864\":1}}],[\"migratecommand\",{\"1\":{\"858\":2}}],[\"migrate\",{\"1\":{\"858\":4,\"864\":1}}],[\"miguelgrinberg\",{\"1\":{\"848\":1}}],[\"might\",{\"1\":{\"194\":1,\"203\":1,\"237\":1,\"549\":1,\"850\":1,\"1545\":1}}],[\"mimo\",{\"1\":{\"1120\":1}}],[\"mime\",{\"1\":{\"760\":1}}],[\"mimicking\",{\"1\":{\"558\":1}}],[\"microcontrollers\",{\"1\":{\"1507\":1}}],[\"microarchitecture\",{\"1\":{\"606\":1}}],[\"microarchitectural\",{\"1\":{\"568\":1,\"604\":1}}],[\"micro\",{\"0\":{\"569\":1},\"1\":{\"557\":1,\"568\":1,\"606\":3,\"1464\":2,\"1623\":5}}],[\"mislead\",{\"1\":{\"1623\":1}}],[\"mismain\",{\"1\":{\"1296\":3}}],[\"mis\",{\"1\":{\"581\":1}}],[\"mispredicted\",{\"1\":{\"590\":1}}],[\"mispredict\",{\"1\":{\"551\":2}}],[\"misprediction\",{\"0\":{\"547\":1,\"548\":1,\"565\":1},\"1\":{\"543\":4,\"546\":2,\"547\":7,\"548\":5,\"549\":6,\"550\":2,\"551\":2,\"558\":5,\"559\":2,\"562\":2,\"564\":2,\"565\":1,\"592\":1}}],[\"mispredictions\",{\"1\":{\"542\":1,\"547\":1,\"548\":3,\"549\":1,\"558\":2}}],[\"misprediciton\",{\"1\":{\"548\":1}}],[\"missing\",{\"1\":{\"432\":2,\"1494\":1}}],[\"misses\",{\"0\":{\"212\":1},\"1\":{\"256\":5}}],[\"misss\",{\"1\":{\"208\":1}}],[\"miss\",{\"0\":{\"207\":1,\"208\":1,\"209\":1,\"218\":1,\"256\":1},\"1\":{\"190\":3,\"192\":2,\"196\":1,\"207\":2,\"208\":6,\"210\":3,\"212\":8,\"217\":4,\"218\":4,\"226\":1,\"256\":2,\"548\":2,\"603\":1}}],[\"mi\",{\"1\":{\"517\":1}}],[\"mirror\",{\"1\":{\"508\":1,\"509\":1,\"619\":2}}],[\"mirrors\",{\"1\":{\"270\":3,\"336\":1,\"337\":1,\"619\":2,\"1177\":1}}],[\"mian\",{\"1\":{\"288\":1,\"403\":1,\"1053\":1,\"1078\":1}}],[\"min还没有数据\",{\"1\":{\"1301\":1}}],[\"minor\",{\"1\":{\"664\":1}}],[\"minute=\",{\"1\":{\"1095\":1}}],[\"minute\",{\"1\":{\"291\":1}}],[\"minus\",{\"1\":{\"88\":5,\"212\":1}}],[\"minimal\",{\"1\":{\"550\":1,\"1084\":1,\"1482\":1,\"1491\":1}}],[\"minimizing\",{\"1\":{\"547\":2,\"558\":3}}],[\"minimized\",{\"1\":{\"547\":1,\"558\":1}}],[\"minimize\",{\"1\":{\"256\":1,\"558\":1,\"1185\":1,\"1212\":4}}],[\"minimum\",{\"1\":{\"92\":1,\"160\":1,\"178\":5,\"548\":2,\"549\":1,\"562\":1,\"1429\":1}}],[\"minsubarraylen\",{\"1\":{\"160\":1}}],[\"minmutation\",{\"1\":{\"92\":1}}],[\"mindepth\",{\"1\":{\"54\":1}}],[\"min\",{\"1\":{\"36\":1,\"91\":6,\"102\":5,\"115\":2,\"130\":2,\"132\":1,\"155\":2,\"160\":1,\"177\":1,\"341\":1,\"397\":1,\"453\":1,\"692\":1,\"889\":1,\"892\":1,\"939\":1,\"1105\":1,\"1212\":2,\"1299\":1,\"1301\":2,\"1320\":1,\"1333\":6,\"1344\":1}}],[\"mineatingspeed\",{\"1\":{\"34\":2}}],[\"middleware\",{\"1\":{\"640\":1}}],[\"mid=left+2right−left​\",{\"1\":{\"28\":1}}],[\"mid\",{\"1\":{\"19\":6,\"20\":7,\"21\":7,\"22\":9,\"25\":6,\"26\":4,\"28\":1,\"30\":6,\"31\":7,\"32\":8,\"33\":5,\"34\":13,\"35\":19,\"36\":12,\"542\":1}}],[\"m\",{\"0\":{\"594\":1},\"1\":{\"23\":4,\"25\":6,\"74\":5,\"79\":5,\"80\":5,\"108\":5,\"120\":8,\"195\":1,\"224\":4,\"225\":1,\"275\":1,\"307\":3,\"349\":2,\"368\":2,\"372\":3,\"445\":1,\"446\":1,\"581\":1,\"592\":1,\"593\":2,\"594\":1,\"595\":1,\"606\":1,\"691\":1,\"692\":1,\"693\":3,\"745\":2,\"747\":3,\"906\":2,\"982\":2,\"1077\":1,\"1142\":13,\"1240\":1,\"1241\":1,\"1246\":1,\"1247\":1,\"1248\":1}}],[\"mask\",{\"1\":{\"1499\":1,\"1545\":13,\"1573\":1,\"1592\":3,\"1611\":2}}],[\"master分支的本地master分支\",{\"1\":{\"1253\":1}}],[\"master\",{\"1\":{\"892\":1,\"1241\":1,\"1250\":1,\"1252\":1,\"1253\":4,\"1264\":1,\"1265\":1,\"1507\":9,\"1508\":2,\"1509\":1,\"1534\":1,\"1635\":1,\"1646\":1,\"1647\":1}}],[\"mailbox\",{\"1\":{\"1481\":2}}],[\"mainactivity\",{\"1\":{\"1275\":1,\"1276\":2}}],[\"mainly\",{\"1\":{\"1206\":1,\"1475\":1}}],[\"main>\",{\"1\":{\"944\":1}}],[\"mainfest\",{\"1\":{\"701\":1}}],[\"maintaining\",{\"1\":{\"1508\":2}}],[\"maintain\",{\"1\":{\"1217\":2}}],[\"maintained\",{\"1\":{\"577\":1,\"1481\":1,\"1623\":1}}],[\"maintains\",{\"1\":{\"406\":1}}],[\"main\",{\"0\":{\"1376\":1},\"1\":{\"150\":2,\"194\":1,\"227\":7,\"253\":1,\"270\":2,\"285\":1,\"288\":2,\"347\":1,\"385\":2,\"387\":4,\"388\":2,\"403\":3,\"421\":2,\"422\":2,\"424\":4,\"425\":1,\"426\":3,\"427\":2,\"431\":1,\"432\":6,\"433\":2,\"434\":1,\"502\":1,\"556\":1,\"559\":2,\"602\":2,\"681\":3,\"682\":4,\"693\":6,\"705\":4,\"759\":1,\"796\":1,\"843\":1,\"851\":3,\"858\":1,\"892\":1,\"944\":1,\"1004\":3,\"1185\":2,\"1204\":1,\"1219\":2,\"1272\":1,\"1376\":3,\"1400\":4,\"1423\":1,\"1429\":1,\"1434\":1,\"1440\":10,\"1441\":3,\"1445\":24,\"1446\":8,\"1448\":9,\"1449\":8,\"1463\":2,\"1492\":1,\"1516\":1,\"1623\":1}}],[\"malive\",{\"1\":{\"1333\":2}}],[\"malloc\",{\"1\":{\"481\":1,\"955\":1,\"1345\":2,\"1469\":3}}],[\"mac80211\",{\"1\":{\"1145\":2}}],[\"mac\",{\"1\":{\"993\":6,\"994\":2}}],[\"machinery\",{\"1\":{\"606\":1}}],[\"machine\",{\"1\":{\"551\":1,\"573\":1,\"724\":1,\"761\":2,\"986\":1,\"1189\":2,\"1464\":4,\"1613\":1}}],[\"madison\",{\"1\":{\"620\":1}}],[\"made\",{\"1\":{\"547\":1,\"552\":1,\"1123\":1,\"1623\":1}}],[\"magic\",{\"0\":{\"428\":1},\"1\":{\"428\":1,\"1464\":2}}],[\"mar\",{\"1\":{\"1620\":1}}],[\"martin\",{\"1\":{\"1209\":1}}],[\"marquee\",{\"1\":{\"1056\":1}}],[\"margin\",{\"1\":{\"896\":2,\"944\":1}}],[\"marginal\",{\"1\":{\"558\":1}}],[\"marginally\",{\"1\":{\"542\":1,\"543\":2}}],[\"maroon\",{\"1\":{\"896\":1}}],[\"march\",{\"1\":{\"892\":1,\"907\":1}}],[\"mary\",{\"1\":{\"343\":1}}],[\"markmap\",{\"1\":{\"1636\":1}}],[\"market\",{\"1\":{\"1623\":5}}],[\"marketing\",{\"1\":{\"1623\":31}}],[\"marked\",{\"1\":{\"1386\":2,\"1388\":2}}],[\"marking\",{\"0\":{\"1388\":1},\"1\":{\"1381\":2,\"1388\":7,\"1389\":2}}],[\"markdown\",{\"0\":{\"1104\":1},\"1\":{\"1056\":1,\"1076\":1,\"1105\":7}}],[\"marks\",{\"1\":{\"751\":5}}],[\"markoop\",{\"1\":{\"676\":1}}],[\"mark\",{\"0\":{\"372\":1,\"373\":1,\"374\":1,\"375\":1,\"676\":1},\"1\":{\"76\":1,\"372\":5,\"373\":3,\"374\":2,\"375\":2,\"379\":1,\"382\":1,\"508\":7,\"675\":1,\"676\":1,\"681\":1,\"682\":3,\"1380\":6,\"1385\":1,\"1386\":5,\"1388\":2,\"1389\":2,\"1499\":1,\"1545\":1}}],[\"makfile\",{\"1\":{\"1445\":1}}],[\"making\",{\"1\":{\"255\":1,\"340\":1,\"1623\":4}}],[\"makeup\",{\"1\":{\"1623\":1}}],[\"makefie\",{\"1\":{\"1448\":1}}],[\"makefiles\",{\"1\":{\"1419\":1}}],[\"makefile\",{\"0\":{\"1436\":1,\"1439\":1,\"1441\":1,\"1442\":1},\"1\":{\"959\":1,\"960\":1,\"1437\":3,\"1438\":2,\"1440\":2,\"1443\":2,\"1445\":6,\"1446\":7,\"1448\":3,\"1449\":3,\"1451\":1,\"1503\":1}}],[\"makebinderthreadname\",{\"1\":{\"1295\":1}}],[\"makes\",{\"1\":{\"1189\":1,\"1365\":1,\"1623\":1}}],[\"makesquare\",{\"1\":{\"15\":2}}],[\"makemigrations\",{\"1\":{\"864\":1}}],[\"maketrans\",{\"0\":{\"390\":1},\"1\":{\"390\":2}}],[\"make\",{\"1\":{\"6\":1,\"236\":2,\"237\":1,\"243\":1,\"271\":1,\"273\":2,\"274\":4,\"341\":2,\"621\":1,\"713\":1,\"714\":4,\"750\":1,\"770\":3,\"775\":1,\"776\":1,\"858\":2,\"940\":2,\"959\":3,\"1054\":2,\"1055\":3,\"1057\":2,\"1078\":1,\"1080\":1,\"1145\":4,\"1161\":1,\"1219\":1,\"1365\":1,\"1416\":3,\"1417\":1,\"1418\":1,\"1424\":9,\"1438\":3,\"1445\":5,\"1446\":1,\"1448\":3,\"1449\":3,\"1483\":1,\"1623\":1}}],[\"major\",{\"0\":{\"237\":1},\"1\":{\"237\":1,\"557\":1,\"664\":1,\"774\":1}}],[\"manipulation\",{\"1\":{\"1501\":1}}],[\"manifest\",{\"1\":{\"1240\":2,\"1424\":2}}],[\"manifests\",{\"1\":{\"1125\":1}}],[\"managing\",{\"1\":{\"1495\":1}}],[\"managedstatic<llvmcontext>\",{\"1\":{\"693\":1}}],[\"managed\",{\"1\":{\"675\":1}}],[\"manager\",{\"0\":{\"1259\":1},\"1\":{\"625\":1,\"824\":1,\"842\":1,\"858\":6,\"890\":1,\"1145\":1,\"1258\":1,\"1259\":1,\"1271\":2}}],[\"management\",{\"1\":{\"256\":1,\"640\":1,\"1474\":2,\"1484\":1,\"1536\":1}}],[\"manages\",{\"1\":{\"253\":1}}],[\"manage\",{\"1\":{\"195\":1,\"858\":1,\"864\":6}}],[\"mandated\",{\"1\":{\"1474\":1}}],[\"mandatory\",{\"1\":{\"558\":1}}],[\"manner\",{\"1\":{\"1201\":1}}],[\"manually\",{\"1\":{\"1198\":1}}],[\"manual\",{\"0\":{\"1028\":1},\"1\":{\"566\":1,\"1145\":1}}],[\"many\",{\"1\":{\"236\":1,\"546\":1,\"775\":1,\"793\":1,\"1075\":2,\"1345\":1,\"1508\":1,\"1619\":1,\"1623\":4}}],[\"maybe\",{\"1\":{\"1520\":1}}],[\"maybesethiddenapiaccesslogsamplerate\",{\"1\":{\"703\":1}}],[\"maybesetapidenylistexemptions\",{\"1\":{\"703\":1}}],[\"may\",{\"1\":{\"227\":3,\"236\":1,\"243\":1,\"256\":1,\"321\":1,\"361\":1,\"550\":1,\"676\":2,\"707\":1,\"747\":1,\"759\":1,\"892\":1,\"896\":1,\"907\":1,\"941\":1,\"1060\":2,\"1078\":1,\"1099\":1,\"1118\":1,\"1121\":1,\"1204\":1,\"1307\":1,\"1405\":1,\"1501\":3,\"1543\":1,\"1607\":1}}],[\"map<std\",{\"1\":{\"455\":1}}],[\"map<char\",{\"1\":{\"454\":1,\"480\":1}}],[\"mapped\",{\"0\":{\"201\":1},\"1\":{\"196\":1,\"199\":1,\"202\":2,\"575\":1,\"601\":1,\"1499\":1}}],[\"mappings\",{\"1\":{\"549\":1}}],[\"mapping\",{\"1\":{\"154\":7,\"156\":4,\"157\":6,\"159\":5,\"194\":2,\"454\":1,\"465\":3}}],[\"map\",{\"0\":{\"153\":1,\"289\":1,\"295\":1,\"296\":1,\"393\":1,\"454\":1,\"455\":1,\"495\":1},\"1\":{\"79\":1,\"80\":1,\"153\":1,\"159\":1,\"168\":1,\"184\":2,\"185\":1,\"194\":1,\"203\":1,\"261\":1,\"285\":2,\"288\":1,\"289\":2,\"295\":1,\"297\":8,\"299\":1,\"307\":1,\"392\":2,\"393\":5,\"394\":5,\"454\":8,\"455\":7,\"480\":4,\"494\":1,\"495\":1,\"549\":1,\"601\":1,\"671\":3,\"871\":1,\"1055\":1,\"1057\":2,\"1217\":1,\"1479\":1,\"1534\":1}}],[\"maxevents\",{\"1\":{\"955\":1}}],[\"maxmemory\",{\"1\":{\"827\":1}}],[\"maxsize=1g\",{\"1\":{\"766\":1}}],[\"maximun\",{\"1\":{\"980\":1}}],[\"maximum\",{\"1\":{\"559\":1,\"562\":1,\"978\":1,\"1157\":1}}],[\"maximizing\",{\"0\":{\"558\":1}}],[\"maximize\",{\"1\":{\"164\":1,\"558\":1}}],[\"maxlen=10\",{\"1\":{\"341\":5}}],[\"maxlen=n\",{\"1\":{\"313\":1}}],[\"maxdepth\",{\"1\":{\"56\":4,\"57\":1}}],[\"max\",{\"1\":{\"34\":3,\"36\":1,\"56\":2,\"57\":1,\"62\":2,\"74\":5,\"90\":1,\"108\":1,\"114\":2,\"118\":3,\"120\":2,\"125\":2,\"126\":1,\"130\":1,\"132\":1,\"139\":2,\"155\":2,\"159\":5,\"177\":1,\"184\":3,\"288\":1,\"289\":1,\"340\":7,\"341\":1,\"479\":1,\"763\":2,\"957\":1,\"984\":1,\"1156\":1,\"1186\":2,\"1307\":1,\"1320\":1,\"1534\":1,\"1545\":1,\"1600\":1}}],[\"mat\",{\"0\":{\"1198\":1},\"1\":{\"1191\":1,\"1196\":1,\"1198\":3}}],[\"matmul\",{\"1\":{\"1185\":2,\"1186\":3,\"1212\":6}}],[\"matrices\",{\"1\":{\"1143\":1}}],[\"matrix\",{\"1\":{\"74\":19,\"176\":1,\"401\":8,\"1143\":1,\"1198\":1}}],[\"match=1\",{\"1\":{\"1162\":1}}],[\"matching\",{\"1\":{\"559\":2,\"793\":2}}],[\"matched\",{\"1\":{\"411\":1,\"576\":1}}],[\"matches\",{\"1\":{\"243\":1,\"602\":1,\"703\":2}}],[\"match\",{\"0\":{\"357\":1},\"1\":{\"411\":3,\"559\":2,\"658\":1,\"703\":1,\"1189\":3,\"1592\":3,\"1607\":5}}],[\"matchsticks\",{\"1\":{\"15\":23}}],[\"mathematic\",{\"1\":{\"1203\":1,\"1206\":1}}],[\"mathrm\",{\"1\":{\"1181\":3}}],[\"mathbf\",{\"1\":{\"1181\":3}}],[\"math\",{\"1\":{\"28\":5,\"692\":6,\"1202\":1}}],[\"matters\",{\"0\":{\"1470\":1},\"1\":{\"1470\":1}}],[\"matter\",{\"1\":{\"0\":1,\"243\":1}}],[\"6s\",{\"1\":{\"1551\":1}}],[\"6e747531\",{\"1\":{\"1463\":1}}],[\"62756e74\",{\"1\":{\"1463\":1}}],[\"62718h\",{\"1\":{\"671\":1}}],[\"62\",{\"1\":{\"1162\":1,\"1237\":1}}],[\"66\",{\"1\":{\"1099\":1}}],[\"66454\",{\"1\":{\"671\":1}}],[\"65536\",{\"1\":{\"978\":1}}],[\"65503\",{\"1\":{\"671\":1}}],[\"6895753832815394824\",{\"1\":{\"885\":1}}],[\"600\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"600x400px\",{\"1\":{\"892\":1}}],[\"6000\",{\"1\":{\"336\":1}}],[\"60\",{\"1\":{\"793\":1,\"898\":1}}],[\"61\",{\"1\":{\"676\":1}}],[\"63s\",{\"1\":{\"985\":1}}],[\"63\",{\"1\":{\"664\":1,\"988\":1,\"1099\":1,\"1162\":1}}],[\"6379\",{\"1\":{\"371\":1,\"382\":3,\"843\":1}}],[\"638\",{\"1\":{\"102\":1}}],[\"64elf\",{\"1\":{\"1464\":1}}],[\"64bit\",{\"1\":{\"676\":1}}],[\"64\",{\"1\":{\"194\":6,\"195\":1,\"235\":1,\"529\":1,\"536\":1,\"538\":2,\"559\":1,\"562\":1,\"577\":1,\"584\":1,\"586\":1,\"599\":2,\"676\":3,\"692\":6,\"985\":2,\"1161\":2,\"1186\":3,\"1463\":2,\"1464\":5,\"1469\":1,\"1470\":1,\"1620\":1}}],[\"69>55\",{\"1\":{\"1169\":1}}],[\"6978137866152968222↩︎\",{\"1\":{\"539\":1}}],[\"69\",{\"1\":{\"118\":1,\"1169\":3}}],[\"6789\",{\"1\":{\"972\":2}}],[\"67bits\",{\"1\":{\"587\":1}}],[\"67\",{\"1\":{\"90\":1}}],[\"6\",{\"0\":{\"434\":1,\"1616\":1},\"1\":{\"8\":1,\"10\":1,\"11\":3,\"27\":1,\"28\":1,\"33\":2,\"46\":1,\"74\":1,\"77\":1,\"81\":1,\"90\":2,\"150\":1,\"156\":3,\"194\":1,\"198\":1,\"285\":3,\"339\":2,\"341\":6,\"398\":1,\"435\":2,\"486\":1,\"558\":3,\"562\":3,\"583\":1,\"584\":1,\"664\":3,\"682\":2,\"692\":2,\"739\":1,\"741\":1,\"798\":1,\"892\":1,\"985\":1,\"989\":1,\"1162\":2,\"1170\":1,\"1271\":1,\"1326\":1,\"1329\":1,\"1333\":1,\"1431\":3,\"1440\":1,\"1445\":1,\"1463\":1,\"1501\":1,\"1515\":14,\"1551\":2}}],[\"5s\",{\"1\":{\"1551\":1}}],[\"5etc\",{\"1\":{\"1142\":1}}],[\"5xx\",{\"1\":{\"999\":1}}],[\"5∗21\",{\"1\":{\"985\":1}}],[\"5∗20\",{\"1\":{\"985\":1}}],[\"595\",{\"1\":{\"1161\":2}}],[\"59\",{\"1\":{\"793\":1}}],[\"54000000\",{\"1\":{\"1463\":3}}],[\"540\",{\"1\":{\"980\":2}}],[\"548\",{\"1\":{\"979\":1}}],[\"54\",{\"1\":{\"676\":2}}],[\"5433\",{\"1\":{\"609\":1}}],[\"5432\",{\"1\":{\"609\":3}}],[\"5a29b77322e4ee4fc0b22ee7030de4231135616732d86e3e7a8dfc3d8246b879\",{\"1\":{\"664\":1}}],[\"56\",{\"1\":{\"1463\":1,\"1499\":1}}],[\"566464\",{\"1\":{\"606\":1}}],[\"560\",{\"0\":{\"157\":1}}],[\"539722367↩︎\",{\"1\":{\"1537\":1}}],[\"5300网卡\",{\"1\":{\"1144\":1}}],[\"53017c00\",{\"1\":{\"673\":1}}],[\"536\",{\"1\":{\"980\":1}}],[\"53\",{\"1\":{\"390\":1,\"997\":1}}],[\"52\",{\"1\":{\"390\":1,\"1161\":8,\"1162\":1,\"1463\":2}}],[\"512\",{\"1\":{\"997\":1,\"1186\":4}}],[\"51\",{\"1\":{\"390\":1}}],[\"518\",{\"0\":{\"133\":1,\"134\":1}}],[\"50ns\",{\"1\":{\"1203\":1}}],[\"504\",{\"1\":{\"760\":1}}],[\"50403\",{\"1\":{\"671\":1}}],[\"503\",{\"1\":{\"760\":1}}],[\"502\",{\"1\":{\"760\":1}}],[\"5000\",{\"1\":{\"1145\":4,\"1212\":2}}],[\"50000\",{\"1\":{\"612\":2}}],[\"500\",{\"1\":{\"760\":1,\"892\":1,\"985\":1,\"1185\":1,\"1282\":1}}],[\"50x\",{\"1\":{\"760\":3}}],[\"50\",{\"1\":{\"291\":1,\"385\":2,\"390\":1,\"549\":1,\"557\":3,\"793\":2}}],[\"576\",{\"1\":{\"979\":1}}],[\"578\",{\"1\":{\"979\":1}}],[\"57\",{\"0\":{\"165\":1},\"1\":{\"165\":1}}],[\"55000000\",{\"1\":{\"1463\":2}}],[\"554889e5\",{\"1\":{\"1463\":3}}],[\"55\",{\"1\":{\"94\":1,\"1169\":1,\"1463\":4}}],[\"5\",{\"0\":{\"429\":1,\"431\":1,\"432\":1,\"433\":1},\"1\":{\"8\":1,\"11\":2,\"20\":1,\"33\":3,\"35\":4,\"46\":1,\"74\":1,\"77\":1,\"81\":4,\"90\":4,\"94\":1,\"102\":5,\"120\":3,\"122\":4,\"124\":2,\"146\":1,\"147\":3,\"150\":5,\"155\":1,\"165\":1,\"167\":1,\"168\":4,\"169\":1,\"173\":2,\"194\":1,\"198\":2,\"204\":2,\"220\":1,\"236\":1,\"245\":3,\"253\":1,\"257\":1,\"285\":2,\"289\":2,\"339\":4,\"341\":7,\"366\":2,\"436\":4,\"454\":1,\"486\":1,\"549\":1,\"557\":2,\"562\":1,\"580\":1,\"599\":1,\"624\":3,\"643\":1,\"652\":1,\"664\":3,\"682\":2,\"692\":2,\"704\":1,\"715\":3,\"736\":1,\"739\":1,\"748\":2,\"751\":1,\"792\":1,\"825\":1,\"875\":1,\"892\":1,\"982\":1,\"985\":5,\"989\":1,\"1021\":1,\"1105\":1,\"1111\":1,\"1162\":1,\"1169\":2,\"1170\":1,\"1186\":9,\"1212\":1,\"1231\":1,\"1232\":1,\"1291\":1,\"1320\":1,\"1322\":2,\"1326\":1,\"1366\":1,\"1429\":1,\"1463\":3,\"1477\":1,\"1496\":1,\"1501\":2,\"1509\":2,\"1515\":2,\"1520\":1,\"1542\":2,\"1551\":2,\"1567\":1,\"1586\":1,\"1606\":2}}],[\"4gb\",{\"1\":{\"1484\":1,\"1491\":1,\"1498\":1}}],[\"4ghz\",{\"1\":{\"564\":1}}],[\"4c\",{\"1\":{\"1464\":3}}],[\"4d\",{\"1\":{\"1463\":1}}],[\"4b\",{\"1\":{\"1463\":1}}],[\"4的步长\",{\"1\":{\"1138\":1}}],[\"4x1\",{\"1\":{\"1138\":1}}],[\"4xx\",{\"1\":{\"999\":1}}],[\"488d3d00\",{\"1\":{\"1463\":1}}],[\"4883ec10\",{\"1\":{\"1463\":3}}],[\"48\",{\"1\":{\"985\":1,\"993\":1,\"1463\":5}}],[\"4s+\",{\"1\":{\"985\":1}}],[\"4s\",{\"1\":{\"985\":1,\"1551\":1}}],[\"4ms\",{\"1\":{\"982\":1}}],[\"41\",{\"1\":{\"906\":1,\"1162\":1,\"1463\":1,\"1607\":1}}],[\"416\",{\"0\":{\"121\":1,\"122\":1},\"1\":{\"1161\":6}}],[\"4字节的\",{\"1\":{\"1464\":1}}],[\"4字节\",{\"1\":{\"789\":1}}],[\"4ubuntu1\",{\"1\":{\"692\":1}}],[\"4aaf0h\",{\"1\":{\"671\":1}}],[\"46\",{\"1\":{\"1426\":1,\"1463\":1,\"1464\":3}}],[\"46行\",{\"1\":{\"664\":1}}],[\"465\",{\"1\":{\"606\":1}}],[\"40mhz\",{\"1\":{\"1203\":1}}],[\"40px\",{\"1\":{\"896\":1,\"944\":1}}],[\"400↩︎\",{\"1\":{\"1502\":1}}],[\"400\",{\"1\":{\"892\":1,\"1486\":3,\"1492\":1}}],[\"4000\",{\"1\":{\"621\":3,\"622\":1,\"1074\":1,\"1076\":3}}],[\"404\",{\"1\":{\"760\":2,\"1052\":1}}],[\"40ec8h\",{\"1\":{\"671\":1}}],[\"40e58h\",{\"1\":{\"671\":1}}],[\"40\",{\"1\":{\"549\":2,\"793\":1,\"961\":1,\"978\":1,\"1143\":1}}],[\"49\",{\"1\":{\"390\":1,\"585\":1,\"587\":1,\"1463\":1}}],[\"494\",{\"0\":{\"123\":1,\"124\":1}}],[\"4kb\",{\"1\":{\"261\":2,\"262\":2,\"530\":1}}],[\"443\",{\"1\":{\"1243\":1}}],[\"448\",{\"1\":{\"1021\":2}}],[\"44\",{\"1\":{\"961\":1,\"1463\":1}}],[\"445\",{\"1\":{\"185\":2}}],[\"442\",{\"1\":{\"185\":3}}],[\"45fc89c6\",{\"1\":{\"1463\":1}}],[\"454\",{\"1\":{\"185\":3,\"606\":1}}],[\"45\",{\"1\":{\"185\":2,\"1463\":5,\"1464\":3}}],[\"4>42\",{\"1\":{\"185\":1}}],[\"424\",{\"1\":{\"185\":2}}],[\"42\",{\"1\":{\"185\":3,\"664\":2,\"905\":1,\"1162\":2}}],[\"474\",{\"0\":{\"120\":1}}],[\"473\",{\"1\":{\"15\":1}}],[\"4\",{\"0\":{\"98\":1,\"428\":1,\"583\":1,\"715\":1,\"782\":1,\"1171\":1,\"1630\":1},\"1\":{\"8\":1,\"14\":4,\"15\":10,\"27\":4,\"28\":3,\"33\":1,\"46\":2,\"50\":2,\"52\":3,\"74\":1,\"77\":1,\"79\":2,\"81\":8,\"86\":2,\"88\":6,\"89\":6,\"90\":2,\"120\":3,\"132\":5,\"136\":1,\"146\":1,\"147\":4,\"150\":3,\"155\":9,\"156\":2,\"160\":2,\"165\":2,\"169\":5,\"172\":8,\"175\":2,\"185\":5,\"194\":8,\"196\":1,\"198\":1,\"203\":1,\"204\":8,\"212\":1,\"213\":1,\"245\":4,\"285\":1,\"313\":1,\"326\":1,\"339\":3,\"341\":7,\"357\":1,\"358\":1,\"359\":1,\"360\":2,\"366\":2,\"388\":1,\"404\":2,\"411\":1,\"418\":1,\"435\":1,\"436\":3,\"445\":1,\"453\":3,\"467\":7,\"479\":2,\"486\":1,\"524\":7,\"528\":2,\"530\":1,\"539\":1,\"545\":1,\"552\":1,\"559\":2,\"562\":1,\"576\":1,\"580\":2,\"581\":1,\"583\":3,\"587\":1,\"590\":1,\"664\":5,\"676\":8,\"681\":4,\"682\":7,\"692\":10,\"693\":1,\"712\":2,\"715\":3,\"724\":1,\"741\":2,\"747\":1,\"751\":2,\"892\":2,\"908\":1,\"927\":1,\"939\":1,\"950\":1,\"972\":2,\"980\":1,\"982\":1,\"983\":1,\"989\":1,\"1012\":1,\"1125\":1,\"1132\":1,\"1143\":3,\"1157\":1,\"1162\":2,\"1169\":1,\"1170\":5,\"1179\":1,\"1186\":1,\"1189\":2,\"1212\":1,\"1228\":4,\"1231\":1,\"1285\":1,\"1307\":1,\"1316\":1,\"1321\":1,\"1326\":1,\"1449\":1,\"1463\":2,\"1498\":1,\"1515\":1,\"1517\":1,\"1551\":4,\"1553\":1,\"1556\":1,\"1562\":2,\"1567\":1,\"1606\":2}}],[\"3d\",{\"1\":{\"1463\":1}}],[\"3c000000\",{\"1\":{\"1463\":1}}],[\"372e352e\",{\"1\":{\"1463\":1}}],[\"377\",{\"0\":{\"135\":1,\"136\":1}}],[\"3ubuntu1~18\",{\"1\":{\"1463\":1}}],[\"3个\",{\"1\":{\"1212\":1}}],[\"3的矩阵\",{\"1\":{\"1212\":1}}],[\"380\",{\"1\":{\"1281\":2}}],[\"38\",{\"1\":{\"1162\":1}}],[\"3秒\",{\"1\":{\"1138\":1}}],[\"3t\",{\"1\":{\"1055\":1}}],[\"3xx\",{\"1\":{\"999\":1}}],[\"36\",{\"1\":{\"909\":1,\"951\":1}}],[\"39\",{\"1\":{\"906\":1,\"1463\":2}}],[\"3字节\",{\"1\":{\"789\":2}}],[\"352e302d\",{\"1\":{\"1463\":1}}],[\"353\",{\"1\":{\"1161\":1}}],[\"35\",{\"1\":{\"676\":1}}],[\"35w2\",{\"1\":{\"557\":1}}],[\"3e2a0h\",{\"1\":{\"671\":1}}],[\"3+4+6\",{\"1\":{\"435\":1}}],[\"3s\",{\"1\":{\"390\":2,\"1551\":1}}],[\"33756275\",{\"1\":{\"1463\":1}}],[\"33000000\",{\"1\":{\"1463\":1}}],[\"330\",{\"1\":{\"1281\":2}}],[\"3306\",{\"1\":{\"610\":6}}],[\"33\",{\"1\":{\"341\":2,\"530\":2,\"1463\":1}}],[\"3f\",{\"1\":{\"308\":1,\"1463\":2}}],[\"31s\",{\"1\":{\"985\":1}}],[\"31\",{\"1\":{\"194\":1,\"198\":1,\"204\":2,\"606\":1,\"664\":2,\"676\":2,\"973\":1,\"978\":1,\"1053\":1}}],[\"3000\",{\"1\":{\"1463\":1}}],[\"30000\",{\"1\":{\"1185\":1}}],[\"300\",{\"1\":{\"898\":2,\"1228\":2}}],[\"30px\",{\"1\":{\"896\":1}}],[\"305f7384cfe9\",{\"1\":{\"731\":1}}],[\"30行\",{\"1\":{\"664\":1}}],[\"30342920\",{\"1\":{\"1463\":1}}],[\"303\",{\"1\":{\"664\":1}}],[\"30\",{\"1\":{\"173\":2,\"194\":1,\"339\":3,\"341\":3,\"1012\":1,\"1052\":1,\"1053\":1,\"1143\":1}}],[\"323896\",{\"1\":{\"1161\":1}}],[\"32s\",{\"1\":{\"985\":2}}],[\"32位\",{\"1\":{\"972\":1}}],[\"32−12=20\",{\"1\":{\"261\":1}}],[\"32=256\",{\"1\":{\"204\":1}}],[\"32bit\",{\"1\":{\"676\":1}}],[\"32bits\",{\"1\":{\"204\":1}}],[\"32byte\",{\"1\":{\"196\":1}}],[\"32kb\",{\"1\":{\"196\":1,\"204\":4}}],[\"32\",{\"1\":{\"136\":1,\"195\":1,\"198\":4,\"204\":4,\"235\":2,\"261\":1,\"511\":1,\"522\":1,\"523\":1,\"524\":2,\"529\":4,\"536\":1,\"538\":2,\"558\":2,\"573\":1,\"577\":1,\"599\":2,\"670\":1,\"674\":1,\"676\":4,\"682\":1,\"692\":5,\"949\":1,\"960\":1,\"972\":1,\"993\":1,\"1161\":3,\"1169\":2,\"1186\":5,\"1464\":1,\"1470\":1,\"1620\":1}}],[\"322\",{\"0\":{\"129\":1,\"130\":1}}],[\"3a202855\",{\"1\":{\"1463\":1}}],[\"3a+20\",{\"1\":{\"412\":1}}],[\"3a+\",{\"1\":{\"412\":1}}],[\"3a\",{\"1\":{\"102\":1}}],[\"34\",{\"1\":{\"94\":1,\"173\":2}}],[\"3\",{\"0\":{\"21\":1,\"22\":1,\"97\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":2,\"360\":1,\"423\":1,\"433\":1,\"714\":1,\"779\":1,\"1032\":1,\"1157\":1,\"1158\":1,\"1159\":1,\"1160\":1,\"1161\":1,\"1162\":1,\"1170\":1,\"1265\":1,\"1496\":1,\"1629\":1,\"1647\":1},\"1\":{\"8\":1,\"9\":2,\"10\":4,\"12\":7,\"14\":3,\"20\":2,\"27\":1,\"28\":1,\"33\":1,\"46\":1,\"50\":2,\"52\":2,\"58\":1,\"74\":2,\"77\":1,\"79\":2,\"81\":7,\"84\":2,\"86\":6,\"87\":4,\"88\":2,\"89\":4,\"90\":2,\"94\":1,\"102\":4,\"120\":4,\"124\":7,\"132\":2,\"136\":3,\"146\":1,\"147\":6,\"150\":2,\"155\":1,\"160\":3,\"164\":1,\"165\":1,\"167\":1,\"168\":1,\"169\":5,\"172\":24,\"173\":2,\"175\":2,\"194\":5,\"202\":2,\"220\":2,\"229\":1,\"236\":1,\"275\":1,\"297\":2,\"299\":2,\"314\":3,\"339\":6,\"340\":4,\"341\":9,\"353\":1,\"360\":1,\"361\":2,\"366\":2,\"386\":2,\"387\":2,\"388\":1,\"394\":1,\"395\":1,\"398\":1,\"418\":1,\"421\":1,\"422\":2,\"427\":2,\"435\":1,\"436\":3,\"453\":4,\"467\":7,\"479\":1,\"486\":1,\"502\":1,\"521\":2,\"527\":1,\"536\":2,\"552\":2,\"557\":2,\"558\":6,\"559\":1,\"562\":4,\"564\":1,\"568\":1,\"576\":2,\"580\":1,\"584\":1,\"586\":1,\"605\":1,\"609\":2,\"664\":4,\"675\":1,\"676\":3,\"692\":4,\"724\":3,\"725\":1,\"748\":3,\"791\":2,\"950\":1,\"981\":1,\"982\":1,\"985\":1,\"987\":4,\"989\":2,\"997\":1,\"1020\":1,\"1022\":2,\"1124\":1,\"1142\":3,\"1143\":1,\"1145\":1,\"1159\":1,\"1161\":7,\"1162\":1,\"1169\":1,\"1170\":4,\"1186\":1,\"1212\":7,\"1228\":1,\"1231\":1,\"1275\":2,\"1285\":1,\"1310\":1,\"1326\":1,\"1388\":1,\"1418\":1,\"1429\":1,\"1431\":3,\"1440\":1,\"1448\":1,\"1463\":3,\"1476\":5,\"1483\":3,\"1486\":1,\"1492\":2,\"1496\":3,\"1499\":1,\"1508\":1,\"1515\":1,\"1551\":1,\"1553\":1,\"1554\":1}}],[\"nh\",{\"1\":{\"1570\":5,\"1576\":14}}],[\"nb\",{\"1\":{\"1567\":2,\"1573\":20,\"1576\":8,\"1577\":6,\"1605\":1}}],[\"nw\",{\"1\":{\"1479\":3}}],[\"ninja\",{\"0\":{\"1432\":1},\"1\":{\"1432\":4}}],[\"nics\",{\"1\":{\"1206\":1}}],[\"nic\",{\"1\":{\"1202\":1,\"1206\":1}}],[\"nicename\",{\"1\":{\"702\":2}}],[\"nve\",{\"1\":{\"1285\":1}}],[\"nvidia\",{\"1\":{\"446\":1}}],[\"nn\",{\"1\":{\"1142\":3,\"1185\":2,\"1186\":10,\"1212\":1}}],[\"n+2p\",{\"1\":{\"1142\":1}}],[\"n+1\",{\"1\":{\"96\":1,\"132\":1}}],[\"nms算法主要解决的是一个目标被多次检测的问题\",{\"1\":{\"1157\":1}}],[\"nms即非极大值抑制算法\",{\"1\":{\"1157\":1}}],[\"nms\",{\"0\":{\"1157\":1},\"1\":{\"1157\":1}}],[\"nmake\",{\"1\":{\"960\":2}}],[\"nmisp​\",{\"1\":{\"547\":1}}],[\"ntop\",{\"1\":{\"949\":2}}],[\"nth\",{\"0\":{\"316\":1},\"1\":{\"316\":2,\"545\":1}}],[\"ng应该区分每个类别分别使用nms\",{\"1\":{\"1157\":1}}],[\"ngx\",{\"1\":{\"766\":2}}],[\"nginxig\",{\"1\":{\"796\":1,\"1101\":1,\"1105\":1}}],[\"nginx\",{\"0\":{\"757\":1,\"861\":1},\"1\":{\"758\":3,\"759\":7,\"760\":2,\"763\":1,\"764\":1,\"765\":1,\"766\":2,\"847\":1,\"861\":2},\"2\":{\"768\":1,\"773\":1}}],[\"n1\",{\"1\":{\"748\":2,\"904\":1,\"1571\":2}}],[\"n表示cpu核数\",{\"1\":{\"714\":1}}],[\"nschloe\",{\"1\":{\"1633\":1}}],[\"ns\",{\"1\":{\"1518\":1}}],[\"nsw\",{\"1\":{\"692\":1}}],[\"nsucceed\",{\"1\":{\"382\":2}}],[\"n8\",{\"1\":{\"692\":1}}],[\"nayang\",{\"1\":{\"1201\":1}}],[\"nat\",{\"0\":{\"728\":1},\"1\":{\"727\":1,\"728\":2}}],[\"nativeparcel\",{\"1\":{\"1320\":3}}],[\"nativewriterawdata\",{\"1\":{\"1320\":5}}],[\"native\",{\"0\":{\"696\":1,\"705\":1,\"1303\":1,\"1396\":1,\"1400\":1,\"1403\":1},\"1\":{\"695\":5,\"696\":12,\"697\":1,\"704\":1,\"705\":4,\"706\":21,\"707\":5,\"1291\":1,\"1303\":1,\"1307\":3,\"1313\":1,\"1320\":6,\"1330\":1,\"1331\":1,\"1333\":4,\"1334\":1,\"1365\":1,\"1371\":1,\"1392\":4,\"1393\":2,\"1395\":5,\"1396\":12,\"1399\":1,\"1400\":4,\"1402\":15,\"1403\":6,\"1405\":5,\"1508\":1}}],[\"nans\",{\"1\":{\"692\":1}}],[\"naas\",{\"1\":{\"639\":1}}],[\"narrowing\",{\"1\":{\"1469\":1}}],[\"narrowoop\",{\"1\":{\"676\":1}}],[\"narrow\",{\"1\":{\"573\":1,\"595\":1,\"600\":1,\"605\":1}}],[\"naive\",{\"1\":{\"557\":1}}],[\"naming\",{\"1\":{\"236\":1,\"1075\":1}}],[\"names`\",{\"1\":{\"1162\":1}}],[\"names\",{\"1\":{\"1159\":1,\"1162\":2,\"1189\":2}}],[\"names文件中指明该boundingbox中目标的类别\",{\"1\":{\"1159\":1}}],[\"namespaces\",{\"1\":{\"1060\":1}}],[\"namespace\",{\"1\":{\"693\":1,\"706\":3,\"707\":1,\"724\":1,\"1004\":1,\"1402\":2,\"1403\":1,\"1405\":1}}],[\"name2\",{\"1\":{\"807\":2}}],[\"name|filename\",{\"1\":{\"718\":1}}],[\"nameandtype\",{\"1\":{\"664\":1}}],[\"name>\",{\"1\":{\"618\":1,\"1250\":1}}],[\"namely\",{\"1\":{\"562\":1}}],[\"name1\",{\"1\":{\"387\":1,\"807\":2}}],[\"name=heaptaskdaemon\",{\"1\":{\"1279\":1}}],[\"name=com\",{\"1\":{\"1278\":1}}],[\"name=table\",{\"1\":{\"807\":1}}],[\"name=jerry\",{\"1\":{\"751\":1}}],[\"name=name\",{\"1\":{\"424\":3}}],[\"name=\",{\"1\":{\"381\":1,\"1004\":1,\"1185\":3,\"1212\":1,\"1217\":1,\"1295\":1}}],[\"namedwindow\",{\"0\":{\"1193\":1}}],[\"named\",{\"1\":{\"321\":1,\"759\":1,\"785\":1,\"1072\":1,\"1076\":1,\"1201\":1,\"1209\":1}}],[\"name\",{\"0\":{\"403\":1,\"907\":1},\"1\":{\"150\":1,\"236\":1,\"253\":1,\"285\":4,\"288\":1,\"289\":4,\"298\":3,\"308\":2,\"336\":1,\"349\":2,\"352\":2,\"356\":1,\"359\":1,\"360\":1,\"381\":1,\"385\":1,\"387\":4,\"388\":3,\"403\":9,\"408\":9,\"412\":2,\"421\":1,\"422\":2,\"424\":40,\"425\":9,\"426\":3,\"427\":8,\"431\":1,\"432\":13,\"433\":1,\"434\":11,\"553\":1,\"609\":2,\"610\":1,\"611\":1,\"612\":1,\"613\":1,\"616\":1,\"618\":1,\"623\":1,\"661\":1,\"671\":1,\"705\":1,\"706\":6,\"719\":2,\"747\":1,\"751\":2,\"760\":1,\"761\":2,\"776\":1,\"781\":1,\"785\":1,\"791\":1,\"794\":4,\"796\":1,\"804\":2,\"805\":5,\"806\":2,\"807\":2,\"819\":2,\"843\":1,\"848\":1,\"851\":3,\"856\":1,\"858\":1,\"864\":2,\"925\":3,\"926\":3,\"930\":1,\"1072\":1,\"1185\":3,\"1189\":1,\"1201\":1,\"1212\":6,\"1217\":6,\"1219\":11,\"1239\":3,\"1243\":2,\"1246\":1,\"1250\":1,\"1253\":1,\"1258\":1,\"1276\":3,\"1278\":4,\"1279\":1,\"1295\":4,\"1307\":2,\"1400\":1,\"1403\":6,\"1418\":2,\"1429\":5,\"1463\":1,\"1515\":1,\"1534\":1,\"1563\":8,\"1564\":8,\"1565\":6,\"1566\":12,\"1575\":8,\"1590\":1,\"1591\":5,\"1595\":1,\"1596\":3,\"1599\":2,\"1600\":1,\"1602\":5,\"1607\":7,\"1608\":7,\"1620\":1,\"1638\":1}}],[\"n=1\",{\"1\":{\"341\":2}}],[\"nl\",{\"1\":{\"1265\":2,\"1571\":8,\"1572\":2,\"1573\":4,\"1647\":2}}],[\"nlp\",{\"1\":{\"1052\":1}}],[\"nlogn\",{\"1\":{\"1170\":1}}],[\"nlog2​n\",{\"1\":{\"176\":1}}],[\"nlos\",{\"1\":{\"1020\":1}}],[\"nlgn\",{\"1\":{\"177\":2}}],[\"n3\",{\"1\":{\"176\":1}}],[\"n2​\",{\"1\":{\"177\":1}}],[\"n2\",{\"1\":{\"153\":1,\"177\":1,\"904\":1,\"1170\":1}}],[\"npm\",{\"0\":{\"890\":1,\"916\":1},\"1\":{\"888\":1,\"890\":6,\"916\":5,\"918\":2,\"928\":1,\"942\":1,\"1054\":1}}],[\"npc\",{\"1\":{\"245\":8}}],[\"np\",{\"1\":{\"118\":1,\"1142\":3,\"1600\":1}}],[\"n−2\",{\"1\":{\"104\":3}}],[\"n−1\",{\"1\":{\"104\":3,\"177\":1}}],[\"n^2\",{\"1\":{\"95\":1}}],[\"n∈n\",{\"1\":{\"94\":1}}],[\"nerche\",{\"1\":{\"1075\":1}}],[\"nested\",{\"1\":{\"1060\":1}}],[\"necessitates\",{\"1\":{\"549\":1}}],[\"necessarily\",{\"1\":{\"542\":1,\"582\":1}}],[\"necessary\",{\"1\":{\"237\":1,\"549\":1,\"707\":1,\"1406\":1,\"1501\":1}}],[\"netevent\",{\"1\":{\"1577\":4}}],[\"netlink\",{\"1\":{\"1145\":2,\"1577\":8,\"1605\":2}}],[\"netlify\",{\"1\":{\"1080\":1,\"1099\":2}}],[\"net1\",{\"1\":{\"776\":1}}],[\"netstat\",{\"1\":{\"753\":1,\"1265\":1,\"1647\":1}}],[\"net\",{\"1\":{\"539\":1,\"717\":1,\"984\":2,\"1105\":1,\"1145\":2,\"1179\":1,\"1236\":1,\"1244\":1,\"1577\":1,\"1615\":1}}],[\"network\",{\"1\":{\"975\":1,\"986\":1,\"1145\":2,\"1202\":1}}],[\"networks\",{\"0\":{\"413\":1,\"1654\":1},\"1\":{\"1009\":1},\"2\":{\"963\":1,\"968\":1,\"1001\":1}}],[\"networkbecomesidle\",{\"1\":{\"90\":3}}],[\"ne\",{\"1\":{\"517\":1}}],[\"near\",{\"1\":{\"321\":1,\"1623\":1}}],[\"neglected\",{\"1\":{\"271\":1}}],[\"negative\",{\"1\":{\"182\":1}}],[\"never\",{\"1\":{\"237\":1,\"1060\":3}}],[\"nextgreaterelement\",{\"1\":{\"467\":1}}],[\"next\",{\"0\":{\"467\":1},\"1\":{\"234\":1,\"236\":3,\"237\":1,\"245\":5,\"316\":1,\"356\":3,\"357\":1,\"420\":3,\"458\":4,\"459\":3,\"460\":3,\"467\":2,\"1101\":3,\"1185\":2,\"1485\":1,\"1518\":3,\"1519\":2,\"1567\":4,\"1573\":5,\"1602\":1,\"1620\":1}}],[\"needread\",{\"1\":{\"1301\":1}}],[\"needed\",{\"1\":{\"236\":1,\"245\":4,\"543\":4,\"552\":2,\"557\":1,\"785\":2,\"843\":1,\"1484\":1,\"1501\":1,\"1611\":1}}],[\"need\",{\"1\":{\"102\":2,\"197\":1,\"236\":4,\"241\":1,\"244\":1,\"309\":1,\"410\":1,\"549\":1,\"748\":1,\"888\":1,\"890\":1,\"941\":1,\"942\":1,\"1076\":1,\"1077\":1,\"1198\":2,\"1316\":1,\"1516\":1,\"1518\":2,\"1590\":1,\"1600\":1}}],[\"needs−needsi​\",{\"1\":{\"102\":1}}],[\"needsi​\",{\"1\":{\"102\":1}}],[\"needs\",{\"1\":{\"102\":16,\"245\":1,\"707\":1,\"1406\":1,\"1481\":1,\"1545\":3}}],[\"news\",{\"1\":{\"1623\":1}}],[\"newsite\",{\"1\":{\"108\":1}}],[\"newer\",{\"1\":{\"1509\":1}}],[\"newcheckpointreader\",{\"1\":{\"1217\":1}}],[\"newcoder\",{\"1\":{\"309\":1}}],[\"newval\",{\"1\":{\"926\":5}}],[\"newhandle\",{\"1\":{\"706\":1,\"1402\":1}}],[\"newly\",{\"1\":{\"1388\":1,\"1389\":1}}],[\"newlines\",{\"1\":{\"1075\":1}}],[\"newlist\",{\"1\":{\"393\":2,\"402\":4}}],[\"newlen\",{\"1\":{\"481\":4}}],[\"new\",{\"0\":{\"307\":1,\"429\":1,\"431\":1,\"432\":1,\"433\":1,\"865\":1,\"1139\":1},\"1\":{\"92\":6,\"236\":1,\"237\":1,\"340\":1,\"349\":2,\"430\":8,\"431\":15,\"432\":31,\"433\":6,\"509\":1,\"542\":1,\"559\":2,\"580\":1,\"606\":1,\"623\":1,\"674\":1,\"681\":1,\"682\":1,\"702\":2,\"703\":10,\"750\":1,\"785\":1,\"791\":2,\"850\":1,\"872\":1,\"881\":1,\"892\":1,\"904\":1,\"905\":1,\"906\":1,\"907\":2,\"923\":1,\"931\":2,\"939\":1,\"941\":1,\"961\":4,\"962\":1,\"1004\":1,\"1052\":3,\"1053\":1,\"1054\":2,\"1055\":4,\"1056\":4,\"1057\":2,\"1072\":1,\"1074\":2,\"1075\":2,\"1076\":1,\"1099\":1,\"1120\":1,\"1170\":2,\"1196\":1,\"1221\":1,\"1239\":2,\"1247\":1,\"1295\":2,\"1328\":2,\"1329\":1,\"1333\":1,\"1366\":1,\"1381\":2,\"1389\":1,\"1501\":1,\"1508\":1,\"1609\":6,\"1611\":2,\"1623\":1,\"1627\":1}}],[\"neighbors\",{\"1\":{\"89\":2,\"1623\":1}}],[\"neighbor\",{\"1\":{\"89\":6}}],[\"nc\",{\"1\":{\"85\":5,\"959\":1}}],[\"nrshift\",{\"1\":{\"1309\":1}}],[\"nr\",{\"1\":{\"85\":5,\"1309\":4,\"1573\":8}}],[\"ny\",{\"1\":{\"79\":4,\"80\":6,\"606\":1}}],[\"nxt\",{\"1\":{\"102\":4}}],[\"nx\",{\"1\":{\"79\":4,\"80\":6}}],[\"nu\",{\"1\":{\"1259\":1}}],[\"nul\",{\"1\":{\"1232\":1}}],[\"nullable\",{\"1\":{\"703\":1}}],[\"nullptr\",{\"1\":{\"508\":1,\"509\":1,\"706\":1,\"707\":3,\"708\":4,\"1320\":5,\"1366\":2,\"1403\":1,\"1405\":3}}],[\"null\",{\"1\":{\"46\":2,\"53\":1,\"486\":3,\"703\":5,\"820\":1,\"927\":1,\"955\":1,\"961\":1,\"962\":1,\"1316\":1,\"1329\":4,\"1333\":3,\"1520\":1,\"1523\":1,\"1563\":2,\"1564\":2,\"1565\":2,\"1566\":1,\"1571\":1,\"1573\":1,\"1575\":2,\"1592\":1,\"1607\":1,\"1608\":1}}],[\"nutshell\",{\"0\":{\"568\":1}}],[\"num=5\",{\"1\":{\"1162\":1}}],[\"num=none\",{\"1\":{\"354\":1}}],[\"numeric\",{\"1\":{\"949\":1}}],[\"numericshaper\",{\"1\":{\"705\":1,\"1400\":1}}],[\"numidenticalpairs\",{\"1\":{\"297\":1}}],[\"numislands\",{\"1\":{\"76\":1,\"85\":1}}],[\"numpy\",{\"1\":{\"118\":1,\"1142\":1,\"1212\":1}}],[\"numcourses\",{\"1\":{\"86\":8}}],[\"num\",{\"1\":{\"13\":3,\"31\":4,\"36\":7,\"75\":4,\"77\":8,\"88\":6,\"114\":3,\"115\":2,\"118\":1,\"122\":4,\"124\":5,\"132\":3,\"134\":1,\"136\":4,\"138\":1,\"154\":2,\"159\":2,\"297\":4,\"354\":11,\"360\":2,\"400\":3,\"401\":8,\"418\":12,\"467\":9,\"509\":3,\"797\":1,\"957\":1,\"1185\":1,\"1591\":2}}],[\"numsr\",{\"1\":{\"160\":2}}],[\"numsl+1\",{\"1\":{\"160\":1}}],[\"numsl\",{\"1\":{\"160\":1}}],[\"numsquares\",{\"1\":{\"132\":1}}],[\"nums\",{\"1\":{\"12\":7,\"13\":12,\"14\":5,\"19\":9,\"20\":13,\"21\":6,\"26\":3,\"27\":3,\"33\":13,\"36\":9,\"74\":2,\"120\":1,\"122\":7,\"124\":10,\"132\":2,\"136\":6,\"147\":9,\"151\":1,\"152\":10,\"153\":7,\"154\":3,\"156\":4,\"157\":2,\"158\":2,\"159\":6,\"160\":8,\"169\":14,\"173\":7,\"175\":3,\"182\":1,\"184\":20,\"185\":5,\"297\":2,\"411\":1,\"453\":6,\"467\":8}}],[\"number=\",{\"1\":{\"940\":1}}],[\"numbers\",{\"1\":{\"77\":1,\"179\":2,\"203\":1,\"261\":2,\"341\":3,\"1221\":1}}],[\"number\",{\"0\":{\"260\":1,\"261\":1},\"1\":{\"8\":1,\"76\":1,\"167\":1,\"182\":2,\"194\":16,\"196\":1,\"203\":1,\"204\":3,\"235\":1,\"256\":1,\"260\":1,\"261\":3,\"262\":1,\"289\":3,\"297\":1,\"393\":2,\"401\":2,\"402\":5,\"547\":2,\"548\":1,\"549\":2,\"557\":6,\"558\":2,\"559\":1,\"576\":1,\"664\":1,\"748\":1,\"898\":1,\"940\":3,\"978\":5,\"982\":1,\"988\":2,\"1079\":1,\"1120\":1,\"1124\":1,\"1143\":1,\"1159\":1,\"1219\":2,\"1425\":1,\"1464\":2,\"1508\":1,\"1573\":2,\"1591\":1,\"1592\":1,\"1611\":3,\"1623\":1}}],[\"noargsconstructor\",{\"1\":{\"1629\":1}}],[\"nokprobe\",{\"1\":{\"1573\":1}}],[\"nocfi\",{\"1\":{\"1553\":2}}],[\"nocompatible\",{\"1\":{\"1259\":1}}],[\"nohlt\",{\"1\":{\"1528\":1}}],[\"nohz\",{\"0\":{\"1541\":1},\"1\":{\"1516\":1,\"1518\":5,\"1541\":2}}],[\"nohup\",{\"1\":{\"754\":1}}],[\"norlmal\",{\"1\":{\"1474\":1,\"1479\":1}}],[\"normal指定了一个2\",{\"1\":{\"1212\":1}}],[\"normal\",{\"1\":{\"321\":1,\"676\":3,\"1185\":1,\"1186\":4,\"1193\":1,\"1212\":6,\"1474\":5,\"1491\":1,\"1496\":1,\"1499\":2}}],[\"noop\",{\"1\":{\"1316\":2}}],[\"noobject\",{\"1\":{\"1162\":1}}],[\"no=<\",{\"1\":{\"1278\":1,\"1287\":1}}],[\"nobreak\",{\"1\":{\"1232\":1}}],[\"noinitretpoline\",{\"1\":{\"1553\":2}}],[\"noinline\",{\"1\":{\"692\":2,\"1553\":2}}],[\"noise\",{\"1\":{\"1118\":1}}],[\"nova\",{\"1\":{\"1632\":1}}],[\"nov\",{\"1\":{\"1056\":17}}],[\"november\",{\"0\":{\"1056\":1},\"1\":{\"907\":1}}],[\"nofile\",{\"1\":{\"957\":2}}],[\"noeviction\",{\"1\":{\"827\":1}}],[\"nounwind\",{\"1\":{\"692\":2}}],[\"nosql\",{\"1\":{\"643\":1}}],[\"nolocal\",{\"1\":{\"418\":1}}],[\"nopoll\",{\"1\":{\"1528\":2}}],[\"nop\",{\"1\":{\"289\":2,\"1463\":1}}],[\"now\",{\"1\":{\"203\":1,\"289\":1,\"784\":1,\"786\":2,\"844\":1,\"1004\":8,\"1060\":2,\"1077\":1,\"1126\":1,\"1216\":1,\"1366\":1,\"1623\":1}}],[\"no\",{\"0\":{\"358\":1,\"359\":1,\"360\":1,\"1149\":1},\"1\":{\"177\":1,\"218\":1,\"236\":1,\"237\":1,\"243\":1,\"245\":1,\"421\":1,\"436\":1,\"543\":2,\"548\":1,\"550\":1,\"559\":1,\"565\":1,\"601\":1,\"692\":5,\"748\":1,\"960\":1,\"1084\":1,\"1142\":1,\"1185\":1,\"1198\":1,\"1208\":1,\"1231\":2,\"1253\":1,\"1265\":1,\"1269\":4,\"1278\":4,\"1279\":1,\"1287\":9,\"1299\":1,\"1301\":2,\"1316\":1,\"1333\":8,\"1388\":3,\"1427\":1,\"1448\":1,\"1520\":1,\"1523\":1,\"1541\":2,\"1542\":1,\"1551\":1,\"1553\":1,\"1591\":5,\"1592\":2,\"1611\":1,\"1623\":1,\"1647\":1,\"1648\":1}}],[\"nonbluck\",{\"1\":{\"956\":1}}],[\"nonnull\",{\"1\":{\"703\":1}}],[\"non\",{\"0\":{\"314\":1,\"1496\":1},\"1\":{\"182\":1,\"270\":2,\"314\":1,\"681\":1,\"682\":2,\"1054\":1,\"1153\":1,\"1157\":1,\"1316\":1,\"1476\":1,\"1483\":1,\"1496\":1,\"1499\":1,\"1501\":2}}],[\"nonlocal关键字声明\",{\"1\":{\"418\":1}}],[\"nonlocal\",{\"1\":{\"75\":1,\"293\":1,\"418\":12}}],[\"nonetheless\",{\"1\":{\"559\":1}}],[\"none\",{\"1\":{\"15\":1,\"42\":1,\"64\":3,\"74\":2,\"81\":1,\"102\":2,\"150\":1,\"303\":19,\"316\":1,\"387\":4,\"388\":2,\"390\":1,\"458\":2,\"459\":5,\"460\":1,\"486\":3,\"499\":3,\"559\":1,\"820\":2,\"934\":1,\"1094\":1,\"1095\":1,\"1142\":2,\"1185\":3,\"1186\":3,\"1212\":2,\"1219\":2,\"1320\":1}}],[\"node弱引用减1完成\",{\"1\":{\"1310\":1}}],[\"node强引用减1完成\",{\"1\":{\"1310\":1}}],[\"nodes\",{\"1\":{\"1186\":3,\"1613\":1}}],[\"nodejs\",{\"1\":{\"916\":1}}],[\"node\",{\"0\":{\"915\":1,\"916\":1,\"918\":1},\"1\":{\"42\":6,\"47\":20,\"54\":10,\"56\":4,\"57\":5,\"59\":6,\"61\":6,\"62\":4,\"86\":3,\"89\":11,\"458\":1,\"460\":7,\"468\":2,\"486\":9,\"499\":1,\"890\":6,\"916\":3,\"918\":1,\"942\":1,\"1185\":11,\"1341\":5,\"1590\":1,\"1600\":2,\"1602\":1,\"1607\":1},\"2\":{\"920\":1}}],[\"nothing\",{\"1\":{\"1591\":1}}],[\"notrace\",{\"1\":{\"1553\":3}}],[\"notify\",{\"1\":{\"1560\":1,\"1573\":2,\"1590\":2,\"1593\":1,\"1596\":1}}],[\"notifiers\",{\"1\":{\"1573\":2,\"1577\":1}}],[\"notifier\",{\"0\":{\"1559\":1,\"1561\":1,\"1562\":2,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1567\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1578\":1,\"1614\":1},\"1\":{\"1560\":2,\"1562\":9,\"1563\":7,\"1564\":8,\"1565\":7,\"1566\":9,\"1567\":23,\"1570\":16,\"1571\":7,\"1572\":4,\"1573\":22,\"1575\":15,\"1576\":37,\"1577\":13,\"1605\":2}}],[\"notifications\",{\"1\":{\"1573\":1}}],[\"notification\",{\"1\":{\"1310\":2}}],[\"noticeable\",{\"1\":{\"1153\":1}}],[\"notice\",{\"1\":{\"236\":1}}],[\"notes\",{\"1\":{\"1248\":1}}],[\"notebook\",{\"1\":{\"365\":1}}],[\"note\",{\"0\":{\"1586\":1},\"1\":{\"308\":1,\"341\":1,\"675\":1,\"746\":1,\"936\":1,\"1000\":1,\"1075\":1,\"1201\":1,\"1376\":1,\"1463\":1,\"1523\":2}}],[\"not\",{\"1\":{\"8\":1,\"10\":1,\"19\":1,\"42\":2,\"45\":1,\"47\":3,\"49\":3,\"51\":8,\"52\":5,\"54\":3,\"56\":3,\"57\":1,\"59\":1,\"61\":1,\"62\":1,\"74\":1,\"75\":4,\"76\":1,\"80\":1,\"84\":1,\"85\":1,\"88\":2,\"89\":2,\"92\":1,\"118\":2,\"120\":1,\"122\":1,\"130\":2,\"134\":1,\"136\":1,\"138\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"165\":1,\"177\":1,\"194\":2,\"195\":1,\"196\":1,\"197\":2,\"203\":1,\"217\":1,\"236\":6,\"237\":2,\"243\":1,\"245\":1,\"255\":1,\"256\":1,\"261\":1,\"288\":6,\"289\":2,\"307\":1,\"321\":1,\"344\":1,\"347\":2,\"354\":2,\"361\":3,\"373\":1,\"374\":1,\"392\":1,\"397\":1,\"400\":2,\"401\":2,\"432\":2,\"458\":1,\"459\":1,\"486\":2,\"493\":1,\"495\":1,\"496\":1,\"499\":12,\"543\":3,\"548\":1,\"549\":3,\"552\":1,\"553\":1,\"556\":3,\"557\":1,\"558\":2,\"559\":5,\"562\":1,\"571\":1,\"582\":1,\"601\":1,\"606\":1,\"703\":2,\"759\":1,\"793\":1,\"820\":3,\"892\":1,\"898\":1,\"934\":1,\"936\":1,\"1054\":1,\"1060\":1,\"1078\":1,\"1094\":1,\"1095\":1,\"1099\":1,\"1121\":1,\"1124\":1,\"1189\":1,\"1198\":1,\"1208\":1,\"1219\":4,\"1278\":1,\"1320\":1,\"1376\":1,\"1385\":2,\"1483\":1,\"1485\":4,\"1487\":2,\"1494\":1,\"1495\":1,\"1518\":2,\"1542\":1,\"1545\":4,\"1553\":1,\"1600\":1,\"1623\":9}}],[\"n\",{\"0\":{\"1551\":1},\"1\":{\"9\":7,\"14\":5,\"22\":4,\"23\":1,\"25\":2,\"33\":3,\"34\":1,\"56\":1,\"74\":4,\"75\":6,\"77\":9,\"79\":5,\"80\":5,\"84\":2,\"87\":9,\"90\":2,\"94\":4,\"95\":6,\"96\":7,\"97\":10,\"98\":5,\"102\":5,\"103\":12,\"104\":2,\"108\":5,\"118\":7,\"120\":9,\"126\":1,\"132\":9,\"139\":1,\"147\":3,\"149\":2,\"150\":7,\"156\":2,\"160\":1,\"165\":6,\"176\":1,\"177\":4,\"195\":2,\"198\":1,\"201\":1,\"202\":1,\"289\":1,\"299\":3,\"307\":5,\"309\":2,\"313\":3,\"314\":2,\"316\":3,\"341\":4,\"354\":1,\"355\":1,\"356\":1,\"387\":1,\"400\":4,\"419\":1,\"460\":3,\"486\":1,\"502\":1,\"507\":1,\"511\":10,\"514\":2,\"545\":1,\"549\":1,\"556\":1,\"682\":1,\"691\":2,\"693\":1,\"717\":1,\"718\":2,\"748\":1,\"751\":2,\"916\":6,\"933\":2,\"949\":1,\"957\":1,\"1004\":1,\"1020\":4,\"1024\":1,\"1078\":1,\"1142\":2,\"1170\":1,\"1171\":1,\"1185\":1,\"1212\":1,\"1272\":1,\"1276\":3,\"1295\":1,\"1445\":1,\"1446\":2,\"1463\":2,\"1469\":3,\"1470\":2,\"1570\":3,\"1571\":7,\"1572\":2,\"1595\":1,\"1607\":1}}],[\">unbind\",{\"1\":{\"1609\":1}}],[\">users\",{\"1\":{\"691\":1}}],[\">device\",{\"1\":{\"1607\":1}}],[\">data\",{\"1\":{\"1345\":3}}],[\">datasize\",{\"1\":{\"1333\":1}}],[\">attr\",{\"1\":{\"1595\":1,\"1596\":3}}],[\">alloc\",{\"1\":{\"1315\":1,\"1345\":1}}],[\">override\",{\"1\":{\"1594\":3}}],[\">ops\",{\"1\":{\"1595\":2,\"1596\":5}}],[\">optionstring\",{\"1\":{\"1365\":1}}],[\">options\",{\"1\":{\"1365\":1}}],[\">operands\",{\"1\":{\"691\":1}}],[\">govenor\",{\"1\":{\"1607\":1}}],[\">governor\",{\"1\":{\"1591\":2,\"1607\":4,\"1609\":1}}],[\">get\",{\"1\":{\"1594\":2,\"1595\":2,\"1596\":3}}],[\">getjavavm\",{\"1\":{\"1365\":2}}],[\">getjnienv\",{\"1\":{\"707\":1,\"1365\":2,\"1405\":1}}],[\">getlongfield\",{\"1\":{\"1333\":1}}],[\">getprimitivearraycritical\",{\"1\":{\"1320\":1}}],[\">getstate\",{\"1\":{\"707\":1,\"1405\":1}}],[\">getchars\",{\"1\":{\"706\":1,\"1402\":1}}],[\">gettype\",{\"1\":{\"693\":1}}],[\">priority\",{\"1\":{\"1571\":2}}],[\">private\",{\"1\":{\"1314\":1}}],[\">head\",{\"1\":{\"1563\":1,\"1564\":1,\"1565\":1,\"1570\":1,\"1575\":1}}],[\">hsl\",{\"1\":{\"898\":1}}],[\">bind\",{\"1\":{\"1609\":1}}],[\">bound\",{\"1\":{\"1545\":1}}],[\">buffer\",{\"1\":{\"1345\":2}}],[\">name\",{\"1\":{\"1606\":2,\"1607\":5,\"1608\":1}}],[\">notifier\",{\"1\":{\"1571\":1,\"1573\":4}}],[\">noptions\",{\"1\":{\"1365\":1}}],[\">next\",{\"1\":{\"1543\":1,\"1545\":4,\"1571\":2,\"1573\":1}}],[\">cpumask\",{\"1\":{\"1534\":2}}],[\">cpu\",{\"1\":{\"1520\":1,\"1522\":2}}],[\">id\",{\"1\":{\"1596\":1}}],[\">init\",{\"1\":{\"1366\":1}}],[\">ignoreunrecognized\",{\"1\":{\"1365\":1}}],[\">evtdev\",{\"1\":{\"1542\":1,\"1543\":1,\"1544\":2}}],[\">enter\",{\"1\":{\"1520\":2,\"1525\":1}}],[\">entry\",{\"1\":{\"1316\":1}}],[\">extrainfo\",{\"1\":{\"1365\":1}}],[\">version\",{\"1\":{\"1365\":2}}],[\">writerawdata\",{\"1\":{\"1320\":1}}],[\">wait\",{\"1\":{\"1316\":2}}],[\">start\",{\"1\":{\"1365\":1}}],[\">set\",{\"1\":{\"1596\":2}}],[\">seterror\",{\"1\":{\"1333\":2}}],[\">sendrequest\",{\"1\":{\"1320\":1}}],[\">sock\",{\"1\":{\"955\":1}}],[\">lock\",{\"1\":{\"1563\":1,\"1570\":2,\"1575\":1}}],[\">looper\",{\"1\":{\"1316\":3}}],[\">loadnativelibrary\",{\"1\":{\"707\":3,\"1405\":3}}],[\">tzp\",{\"1\":{\"1591\":1,\"1607\":2}}],[\">transact\",{\"1\":{\"1333\":3}}],[\">transaction\",{\"1\":{\"1316\":1}}],[\">type\",{\"1\":{\"1316\":1,\"1607\":1}}],[\">todo\",{\"1\":{\"1316\":5}}],[\">this\",{\"1\":{\"892\":1,\"896\":1}}],[\">mode\",{\"1\":{\"1543\":1}}],[\">miscdev\",{\"1\":{\"1307\":1}}],[\">mdriverfd\",{\"1\":{\"1301\":1}}],[\">jointhreadpool\",{\"1\":{\"1296\":1}}],[\">rwsem\",{\"1\":{\"1564\":1}}],[\">releaseprimitivearraycritical\",{\"1\":{\"1320\":1}}],[\">ready\",{\"1\":{\"1316\":2}}],[\">registernatives\",{\"1\":{\"706\":1,\"1403\":1}}],[\">run\",{\"1\":{\"1295\":1,\"1296\":1}}],[\">0\",{\"1\":{\"1192\":1}}],[\">features\",{\"1\":{\"1542\":1,\"1545\":2}}],[\">flags\",{\"1\":{\"1520\":4,\"1521\":2,\"1522\":1,\"1524\":1,\"1526\":1}}],[\">forced\",{\"1\":{\"1518\":1}}],[\">fd\",{\"1\":{\"955\":1}}],[\">findclass\",{\"1\":{\"706\":1,\"1403\":1}}],[\"><\",{\"1\":{\"889\":2,\"892\":2,\"931\":1,\"935\":1,\"936\":1,\"938\":1,\"939\":1,\"1081\":1,\"1102\":1}}],[\">|\",{\"1\":{\"676\":12}}],[\">+\",{\"1\":{\"438\":2}}],[\">>\",{\"1\":{\"291\":1,\"396\":1,\"400\":2,\"455\":1,\"747\":1,\"820\":1,\"1073\":3}}],[\">>>\",{\"1\":{\"146\":4,\"308\":3,\"320\":2,\"339\":10,\"340\":7,\"341\":3,\"354\":2,\"367\":1,\"394\":3,\"395\":2,\"398\":2,\"421\":2,\"422\":4,\"425\":2,\"427\":4,\"432\":9,\"433\":1,\"434\":2,\"435\":3,\"436\":6,\"447\":2,\"673\":1,\"863\":2}}],[\">=\",{\"1\":{\"15\":1,\"20\":1,\"34\":1,\"36\":1,\"74\":2,\"76\":2,\"79\":1,\"80\":1,\"130\":2,\"134\":1,\"136\":1,\"138\":1,\"150\":1,\"155\":1,\"156\":1,\"160\":3,\"166\":1,\"177\":1,\"375\":1,\"481\":1,\"1144\":1,\"1301\":1,\"1520\":1}}],[\">\",{\"1\":{\"8\":1,\"9\":2,\"10\":6,\"11\":5,\"12\":1,\"13\":2,\"14\":2,\"15\":3,\"19\":3,\"20\":4,\"21\":2,\"25\":1,\"30\":3,\"31\":1,\"33\":3,\"34\":4,\"35\":4,\"36\":4,\"42\":3,\"43\":1,\"46\":1,\"47\":2,\"49\":1,\"51\":1,\"52\":1,\"54\":1,\"56\":2,\"57\":1,\"59\":1,\"61\":1,\"62\":1,\"64\":1,\"74\":4,\"75\":4,\"77\":4,\"79\":1,\"80\":1,\"81\":1,\"84\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":4,\"92\":2,\"102\":5,\"118\":1,\"120\":1,\"122\":1,\"124\":2,\"125\":1,\"130\":2,\"132\":1,\"134\":1,\"136\":1,\"138\":1,\"149\":1,\"150\":1,\"152\":2,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"165\":3,\"166\":1,\"167\":3,\"169\":1,\"173\":1,\"179\":1,\"183\":1,\"184\":2,\"185\":2,\"186\":2,\"198\":1,\"252\":1,\"261\":1,\"297\":1,\"299\":2,\"303\":1,\"313\":1,\"314\":3,\"317\":2,\"386\":1,\"387\":4,\"388\":2,\"394\":3,\"396\":1,\"397\":1,\"402\":2,\"421\":1,\"433\":1,\"460\":2,\"465\":2,\"466\":1,\"467\":3,\"479\":1,\"480\":2,\"486\":3,\"495\":1,\"496\":2,\"499\":4,\"509\":2,\"664\":1,\"687\":2,\"727\":4,\"747\":1,\"794\":8,\"855\":1,\"892\":3,\"896\":2,\"897\":2,\"927\":2,\"931\":2,\"937\":1,\"938\":3,\"939\":4,\"940\":4,\"941\":1,\"944\":3,\"956\":2,\"982\":6,\"1004\":6,\"1075\":1,\"1081\":1,\"1102\":1,\"1103\":2,\"1105\":2,\"1109\":4,\"1159\":2,\"1161\":4,\"1178\":4,\"1232\":1,\"1314\":1,\"1318\":1,\"1320\":3,\"1328\":2,\"1365\":1,\"1388\":2,\"1454\":1,\"1499\":1,\"1507\":1,\"1510\":3,\"1551\":7,\"1571\":1,\"1607\":1}}],[\"sgis\",{\"1\":{\"1499\":1}}],[\"s6led0\",{\"1\":{\"1483\":1}}],[\"s∗s\",{\"1\":{\"1155\":1}}],[\"sf\",{\"1\":{\"1253\":1}}],[\"sfpn可以任意堆叠并连接到网络的任何层次\",{\"1\":{\"1012\":1}}],[\"sfo\",{\"1\":{\"1012\":4,\"1024\":9,\"1206\":1,\"1208\":1}}],[\"sftp\",{\"1\":{\"992\":1}}],[\"s32\",{\"1\":{\"982\":2,\"1591\":12}}],[\"sscanf\",{\"1\":{\"1595\":1,\"1596\":3}}],[\"ssize\",{\"1\":{\"1595\":1,\"1596\":1}}],[\"ssserver\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"ssd这类one\",{\"1\":{\"1151\":1}}],[\"ssl\",{\"1\":{\"992\":1,\"1244\":1}}],[\"ssthresh\",{\"1\":{\"987\":8}}],[\"ss\",{\"1\":{\"906\":2,\"1226\":1,\"1265\":1,\"1276\":2,\"1647\":1}}],[\"sshd\",{\"1\":{\"744\":1,\"1056\":1}}],[\"ssh\",{\"0\":{\"744\":1,\"1237\":1},\"1\":{\"446\":1,\"744\":10,\"746\":1,\"1056\":1,\"1237\":6,\"1453\":2}}],[\"svg\",{\"1\":{\"892\":1}}],[\"svga\",{\"1\":{\"776\":1}}],[\"svn\",{\"1\":{\"776\":1}}],[\"svc\",{\"1\":{\"517\":1,\"1272\":2}}],[\"sn\",{\"0\":{\"1285\":1},\"1\":{\"1285\":1}}],[\"snipping\",{\"1\":{\"1182\":1}}],[\"snr\",{\"1\":{\"1020\":1}}],[\"snmp\",{\"1\":{\"977\":1}}],[\"snapcraft\",{\"0\":{\"782\":1,\"786\":1},\"1\":{\"774\":2,\"775\":2,\"776\":1,\"778\":1,\"784\":4,\"785\":6,\"786\":3}}],[\"snaps\",{\"1\":{\"774\":4,\"775\":1,\"776\":1,\"781\":1}}],[\"snap\",{\"0\":{\"774\":1,\"776\":1,\"779\":1,\"780\":1,\"781\":1,\"785\":1},\"1\":{\"774\":1,\"775\":2,\"780\":2,\"781\":7,\"783\":1,\"785\":4,\"786\":7}}],[\"snoop\",{\"1\":{\"224\":1,\"225\":1,\"1486\":1}}],[\"sdr\",{\"1\":{\"1509\":3}}],[\"sda\",{\"1\":{\"1507\":1}}],[\"sdk\",{\"1\":{\"703\":1}}],[\"sdg\",{\"1\":{\"648\":1}}],[\"square\",{\"1\":{\"1212\":1}}],[\"squashed\",{\"1\":{\"551\":1}}],[\"squashes\",{\"1\":{\"548\":1,\"565\":1}}],[\"squash\",{\"1\":{\"548\":1,\"593\":1}}],[\"squashing\",{\"1\":{\"548\":8,\"549\":5,\"557\":2,\"558\":1,\"565\":2}}],[\"sqlyog\",{\"1\":{\"802\":1}}],[\"sqlalchemy\",{\"1\":{\"798\":3}}],[\"sqlite>\",{\"1\":{\"798\":4}}],[\"sqlite3\",{\"0\":{\"798\":1},\"1\":{\"797\":2}}],[\"sqlite\",{\"1\":{\"789\":1,\"1053\":1}}],[\"sql\",{\"0\":{\"797\":1},\"1\":{\"789\":1,\"802\":1,\"808\":2,\"819\":1}}],[\"sqrt\",{\"1\":{\"692\":1}}],[\"sz\",{\"1\":{\"681\":2,\"682\":2}}],[\"s层产品\",{\"1\":{\"641\":1}}],[\"sxtw\",{\"0\":{\"522\":1},\"1\":{\"522\":3}}],[\"symbol\",{\"1\":{\"1542\":1,\"1573\":1,\"1577\":2}}],[\"symposium\",{\"1\":{\"566\":1,\"606\":2}}],[\"synthesis\",{\"1\":{\"1124\":2}}],[\"syntax\",{\"1\":{\"502\":2,\"1084\":1,\"1259\":1}}],[\"syns\",{\"1\":{\"984\":1}}],[\"syn\",{\"1\":{\"951\":2,\"978\":1,\"982\":7,\"983\":2,\"984\":5,\"985\":3,\"988\":7}}],[\"synchronous\",{\"1\":{\"1483\":5}}],[\"synchronized\",{\"1\":{\"703\":1,\"1329\":1}}],[\"synchronization\",{\"1\":{\"675\":1,\"676\":2}}],[\"syncs\",{\"1\":{\"1239\":1}}],[\"sync\",{\"1\":{\"1239\":3,\"1483\":1,\"1551\":7}}],[\"synced\",{\"1\":{\"940\":1}}],[\"sysfs\",{\"1\":{\"1591\":2,\"1592\":1,\"1595\":1}}],[\"syscall\",{\"1\":{\"1333\":1}}],[\"sysv\",{\"1\":{\"614\":1}}],[\"sys\",{\"1\":{\"288\":3,\"307\":2,\"326\":2,\"347\":2,\"354\":1,\"367\":3,\"447\":2,\"741\":1,\"742\":2,\"743\":2,\"957\":1,\"984\":2,\"988\":2,\"1056\":1,\"1216\":2,\"1219\":1,\"1483\":6,\"1611\":2}}],[\"system32\",{\"1\":{\"1244\":1}}],[\"systemctl\",{\"1\":{\"614\":1}}],[\"systemd\",{\"1\":{\"614\":1}}],[\"systems\",{\"1\":{\"250\":1,\"256\":1,\"606\":1,\"703\":1,\"774\":1,\"1143\":1,\"1177\":1,\"1209\":1,\"1493\":1,\"1501\":3,\"1536\":2,\"1611\":1,\"1619\":1}}],[\"system\",{\"0\":{\"747\":1,\"1493\":1,\"1621\":1},\"1\":{\"227\":3,\"236\":1,\"245\":1,\"250\":1,\"256\":2,\"326\":1,\"573\":1,\"602\":1,\"681\":1,\"682\":1,\"696\":2,\"707\":3,\"746\":1,\"747\":1,\"748\":2,\"853\":1,\"1004\":1,\"1073\":1,\"1076\":1,\"1098\":1,\"1127\":1,\"1130\":1,\"1209\":1,\"1287\":6,\"1291\":1,\"1293\":1,\"1294\":1,\"1299\":1,\"1396\":2,\"1405\":3,\"1426\":1,\"1464\":2,\"1483\":6,\"1493\":2,\"1498\":2,\"1499\":1,\"1501\":1,\"1508\":2,\"1536\":2,\"1616\":1}}],[\"smp\",{\"1\":{\"1533\":1,\"1534\":1,\"1542\":1,\"1557\":5}}],[\"smpen\",{\"1\":{\"1485\":1}}],[\"smcs\",{\"1\":{\"1498\":2}}],[\"smc\",{\"1\":{\"1474\":5,\"1479\":1,\"1483\":7,\"1498\":7,\"1502\":1}}],[\"smoothing\",{\"1\":{\"1124\":1}}],[\"smtp\",{\"1\":{\"977\":1}}],[\"smdiagnostic\",{\"1\":{\"693\":1}}],[\"smartphones\",{\"1\":{\"1509\":1}}],[\"smart\",{\"0\":{\"590\":1},\"1\":{\"581\":2,\"590\":2}}],[\"small\",{\"1\":{\"168\":1,\"243\":2,\"547\":1,\"552\":1,\"556\":1,\"1057\":1,\"1189\":5,\"1386\":1,\"1623\":4}}],[\"smallestdistancepair\",{\"1\":{\"36\":1}}],[\"smi\",{\"1\":{\"446\":1}}],[\"skipunless\",{\"1\":{\"386\":1}}],[\"skipif\",{\"1\":{\"373\":1,\"386\":1}}],[\"skipped\",{\"1\":{\"373\":1}}],[\"skip\",{\"0\":{\"373\":1,\"386\":1},\"1\":{\"373\":4,\"386\":2}}],[\"skills\",{\"0\":{\"1028\":1,\"1087\":1}}],[\"skill\",{\"0\":{\"1283\":1},\"1\":{\"341\":1,\"1216\":1}}],[\"sɛkt\",{\"1\":{\"342\":1}}],[\"sram\",{\"1\":{\"1476\":1,\"1479\":1,\"1487\":10,\"1492\":2,\"1494\":3,\"1497\":2}}],[\"srv\",{\"1\":{\"326\":1}}],[\"srcu\",{\"0\":{\"1566\":1},\"1\":{\"1562\":2,\"1566\":17,\"1576\":6}}],[\"src=\",{\"1\":{\"889\":2,\"892\":1,\"939\":1,\"1081\":1}}],[\"srcs\",{\"1\":{\"705\":1,\"1400\":1}}],[\"src\",{\"1\":{\"270\":1,\"274\":2,\"404\":2,\"511\":8,\"676\":1,\"705\":4,\"712\":5,\"1307\":1,\"1320\":3,\"1344\":1,\"1400\":4,\"1422\":2,\"1423\":1,\"1434\":3}}],[\"scl\",{\"1\":{\"1507\":1}}],[\"sctlr\",{\"1\":{\"1485\":5}}],[\"scp\",{\"0\":{\"1453\":1},\"1\":{\"1453\":12,\"1493\":5}}],[\"schmidt\",{\"1\":{\"1127\":1}}],[\"scheduling\",{\"1\":{\"1536\":1}}],[\"schedule\",{\"1\":{\"86\":1}}],[\"sched\",{\"0\":{\"1523\":1},\"1\":{\"1299\":1,\"1515\":1,\"1520\":1,\"1523\":6,\"1531\":1,\"1532\":1}}],[\"scheme\",{\"0\":{\"562\":1},\"1\":{\"243\":3,\"543\":3,\"558\":1,\"559\":2,\"1125\":1}}],[\"schemes\",{\"1\":{\"241\":3,\"558\":1}}],[\"score\",{\"1\":{\"1155\":1}}],[\"scorll\",{\"1\":{\"1056\":1}}],[\"scopedtrace\",{\"1\":{\"707\":1,\"1365\":1,\"1406\":1}}],[\"scopedlocalref<jclass>\",{\"1\":{\"706\":1,\"1403\":1}}],[\"scopedfastnativeobjectaccess\",{\"1\":{\"706\":2,\"1402\":2}}],[\"scope\",{\"1\":{\"379\":7,\"418\":8,\"557\":1,\"573\":1,\"600\":1,\"659\":1,\"1185\":2,\"1186\":6}}],[\"scope=\",{\"1\":{\"379\":4}}],[\"scale=5\",{\"1\":{\"1162\":1}}],[\"scale=1\",{\"1\":{\"1004\":1,\"1162\":3}}],[\"scale\",{\"1\":{\"978\":1,\"1623\":1}}],[\"scause\",{\"1\":{\"256\":1}}],[\"scr\",{\"1\":{\"1485\":5}}],[\"scratch\",{\"1\":{\"1071\":1}}],[\"scripts\",{\"1\":{\"1101\":2,\"1162\":1,\"1265\":1,\"1647\":1}}],[\"script>\",{\"1\":{\"889\":2,\"892\":2,\"939\":2,\"1004\":1,\"1081\":2}}],[\"script\",{\"0\":{\"858\":1,\"1224\":1,\"1266\":1},\"1\":{\"751\":1,\"858\":1,\"1278\":2},\"2\":{\"1234\":1}}],[\"screenshot\",{\"1\":{\"1079\":4}}],[\"screen\",{\"1\":{\"408\":1,\"748\":1,\"1228\":4,\"1269\":4}}],[\"scenarios\",{\"0\":{\"548\":1},\"1\":{\"565\":2}}],[\"slaughtered\",{\"1\":{\"1623\":1}}],[\"slaves\",{\"1\":{\"1507\":1,\"1508\":2,\"1509\":1}}],[\"slave\",{\"1\":{\"1486\":1,\"1507\":9,\"1508\":1,\"1509\":1}}],[\"slope\",{\"1\":{\"1591\":3}}],[\"slot=\",{\"1\":{\"1109\":2}}],[\"slots\",{\"1\":{\"436\":7}}],[\"slot\",{\"0\":{\"436\":1},\"1\":{\"667\":1,\"689\":1}}],[\"slower\",{\"1\":{\"454\":1}}],[\"slowest\",{\"1\":{\"234\":1}}],[\"slow\",{\"1\":{\"250\":1,\"558\":1,\"564\":1,\"987\":1}}],[\"slightly\",{\"1\":{\"1122\":1}}],[\"slice\",{\"1\":{\"908\":1,\"931\":2}}],[\"slices\",{\"1\":{\"339\":1}}],[\"slicing\",{\"0\":{\"339\":1}}],[\"sliding\",{\"0\":{\"312\":1,\"313\":1,\"314\":1,\"1153\":1},\"1\":{\"310\":1,\"313\":2,\"1153\":2}}],[\"slide\",{\"0\":{\"161\":1,\"1280\":1,\"1281\":1},\"1\":{\"1127\":1,\"1228\":3}}],[\"sleep\",{\"1\":{\"285\":1,\"415\":1,\"1528\":1,\"1562\":1}}],[\"sleeping\",{\"1\":{\"285\":2}}],[\"sw\",{\"1\":{\"1479\":2}}],[\"sweap\",{\"1\":{\"1385\":1}}],[\"sweep\",{\"1\":{\"1380\":2}}],[\"swarms\",{\"0\":{\"625\":1}}],[\"swarm\",{\"1\":{\"623\":1,\"625\":2}}],[\"swapper\",{\"1\":{\"1515\":12}}],[\"swaps\",{\"1\":{\"256\":1}}],[\"swap\",{\"0\":{\"180\":1},\"1\":{\"180\":15,\"256\":1}}],[\"swipe\",{\"1\":{\"1228\":1,\"1281\":4}}],[\"swift\",{\"1\":{\"564\":1}}],[\"swig\",{\"1\":{\"442\":1}}],[\"switchyomega使用方法为\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"switchhosts\",{\"1\":{\"1236\":2}}],[\"switches\",{\"1\":{\"1053\":1}}],[\"switch\",{\"1\":{\"256\":1,\"1264\":1,\"1307\":1,\"1313\":1,\"1316\":1,\"1333\":1,\"1534\":1,\"1543\":3,\"1609\":2,\"1646\":1}}],[\"switching\",{\"1\":{\"227\":1}}],[\"sales\",{\"1\":{\"1623\":2}}],[\"sad\",{\"1\":{\"1052\":1}}],[\"sack\",{\"1\":{\"978\":2}}],[\"sa\",{\"1\":{\"949\":1,\"950\":2,\"1179\":1,\"1485\":1}}],[\"saved\",{\"1\":{\"1219\":1,\"1495\":1,\"1496\":1}}],[\"saver\",{\"1\":{\"1185\":3,\"1217\":6}}],[\"save\",{\"0\":{\"1194\":1},\"1\":{\"942\":1,\"1185\":3,\"1189\":1,\"1196\":1,\"1217\":1,\"1517\":2}}],[\"saving\",{\"1\":{\"557\":2,\"1509\":2}}],[\"sass\",{\"0\":{\"918\":1},\"1\":{\"918\":2,\"942\":4}}],[\"safely\",{\"1\":{\"1385\":1}}],[\"safe\",{\"1\":{\"774\":1,\"1475\":1,\"1481\":1,\"1534\":1}}],[\"saas\",{\"1\":{\"639\":2}}],[\"sap\",{\"1\":{\"583\":2,\"643\":1}}],[\"sag\",{\"1\":{\"558\":2}}],[\"saturation\",{\"1\":{\"898\":2}}],[\"saturating\",{\"1\":{\"558\":1,\"562\":1,\"576\":2,\"584\":1,\"585\":2,\"605\":2}}],[\"saturated\",{\"1\":{\"558\":2,\"559\":1,\"562\":1}}],[\"sazeides\",{\"1\":{\"545\":1}}],[\"said\",{\"1\":{\"543\":1}}],[\"sampling\",{\"1\":{\"1206\":2}}],[\"sample\",{\"0\":{\"892\":1},\"1\":{\"404\":2,\"664\":1,\"906\":1,\"959\":1,\"1056\":1}}],[\"same\",{\"1\":{\"194\":3,\"204\":1,\"234\":1,\"235\":1,\"236\":5,\"243\":1,\"271\":1,\"406\":1,\"465\":1,\"542\":1,\"546\":1,\"548\":1,\"556\":3,\"557\":1,\"558\":1,\"562\":1,\"584\":1,\"601\":1,\"793\":1,\"850\":1,\"897\":1,\"939\":1,\"991\":1,\"1124\":1,\"1142\":3,\"1186\":4,\"1207\":2,\"1216\":1,\"1498\":1,\"1611\":1}}],[\"says\",{\"1\":{\"243\":1}}],[\"say\",{\"1\":{\"194\":1}}],[\"s2idle\",{\"1\":{\"1518\":1}}],[\"s2\",{\"1\":{\"186\":4,\"468\":8,\"478\":2,\"1469\":1,\"1470\":2}}],[\"s128\",{\"1\":{\"692\":1}}],[\"s1\",{\"1\":{\"186\":5,\"468\":8,\"478\":2,\"1469\":1,\"1470\":3}}],[\"six\",{\"1\":{\"1216\":1}}],[\"sict\",{\"1\":{\"1212\":1}}],[\"silenced\",{\"1\":{\"1060\":1}}],[\"silently\",{\"1\":{\"1060\":1}}],[\"silicon\",{\"1\":{\"542\":1,\"557\":1}}],[\"site\",{\"0\":{\"1074\":1},\"1\":{\"918\":1,\"1052\":1,\"1054\":6,\"1055\":1,\"1056\":1,\"1071\":1,\"1072\":1,\"1074\":3,\"1075\":3,\"1079\":2,\"1080\":1,\"1081\":2,\"1098\":1,\"1099\":3}}],[\"situations\",{\"1\":{\"237\":1}}],[\"sigcomm2010\",{\"1\":{\"1145\":2}}],[\"sigplan\",{\"1\":{\"606\":1}}],[\"signaling\",{\"1\":{\"1499\":1}}],[\"signaled\",{\"1\":{\"1499\":1}}],[\"signalexceptionforerror\",{\"1\":{\"1333\":1}}],[\"signals\",{\"1\":{\"1124\":2,\"1130\":2,\"1131\":1,\"1202\":1,\"1493\":1}}],[\"signal\",{\"0\":{\"1119\":1},\"1\":{\"573\":1,\"758\":2,\"923\":1,\"1118\":5,\"1125\":2,\"1143\":1,\"1202\":1,\"1203\":2,\"1498\":1}}],[\"signature\",{\"1\":{\"408\":1,\"706\":1,\"1320\":1,\"1403\":1}}],[\"significant\",{\"1\":{\"556\":1,\"573\":1,\"600\":1,\"604\":1,\"676\":1,\"1536\":1}}],[\"signed\",{\"1\":{\"529\":2,\"692\":1,\"1143\":1,\"1469\":1,\"1591\":1,\"1623\":1}}],[\"sign\",{\"1\":{\"245\":5,\"529\":1}}],[\"simd\",{\"1\":{\"1485\":1,\"1491\":1}}],[\"simultaneous\",{\"1\":{\"985\":1}}],[\"simultaneously\",{\"1\":{\"237\":1,\"245\":1}}],[\"simulator\",{\"0\":{\"564\":1},\"1\":{\"564\":1}}],[\"simulated\",{\"1\":{\"562\":1}}],[\"similarities↩︎\",{\"1\":{\"1511\":1}}],[\"similarly\",{\"1\":{\"256\":1,\"557\":2}}],[\"similar\",{\"1\":{\"236\":1,\"241\":1,\"245\":1,\"289\":4,\"325\":1,\"361\":2,\"562\":1,\"851\":1,\"1491\":1,\"1498\":1,\"1508\":1,\"1623\":1}}],[\"simplicity\",{\"1\":{\"236\":1,\"271\":1}}],[\"simplifications\",{\"1\":{\"235\":1}}],[\"simplifying\",{\"1\":{\"235\":1}}],[\"simply\",{\"1\":{\"236\":1,\"558\":1,\"559\":1,\"1501\":1,\"1623\":3}}],[\"simplesection\",{\"1\":{\"1463\":8,\"1464\":1}}],[\"simplest\",{\"1\":{\"243\":2}}],[\"simple\",{\"0\":{\"245\":1},\"1\":{\"235\":1,\"244\":1,\"266\":1,\"334\":1,\"336\":2,\"337\":1,\"445\":1,\"449\":1,\"542\":1,\"543\":2,\"557\":1,\"558\":1,\"774\":1,\"892\":1,\"1042\":1,\"1057\":1,\"1060\":1,\"1153\":1,\"1481\":1,\"1483\":2,\"1616\":1}}],[\"sinking\",{\"1\":{\"1623\":1}}],[\"sinfo\",{\"1\":{\"955\":4}}],[\"sin\",{\"1\":{\"949\":7}}],[\"singletonfactories\",{\"0\":{\"885\":1},\"1\":{\"882\":1}}],[\"singletonobjects\",{\"0\":{\"883\":1},\"1\":{\"882\":1}}],[\"singleton\",{\"0\":{\"876\":1},\"1\":{\"875\":1}}],[\"single\",{\"0\":{\"562\":1,\"661\":1},\"1\":{\"236\":2,\"245\":1,\"542\":3,\"559\":1,\"562\":1,\"576\":1,\"624\":1,\"748\":1,\"776\":1,\"785\":1,\"896\":1,\"1084\":1,\"1143\":1,\"1189\":1,\"1483\":1}}],[\"since\",{\"1\":{\"212\":1,\"549\":3,\"559\":2,\"565\":1,\"1498\":2}}],[\"sidebar\",{\"1\":{\"1111\":1}}],[\"side\",{\"1\":{\"177\":1,\"925\":1,\"1584\":3}}],[\"sizeshift\",{\"1\":{\"1309\":1}}],[\"size=\",{\"1\":{\"1228\":1}}],[\"size=1\",{\"1\":{\"664\":2,\"1162\":1}}],[\"size非常重要\",{\"1\":{\"1185\":1}}],[\"sizeof\",{\"1\":{\"481\":1,\"509\":2,\"949\":1,\"950\":2,\"955\":1,\"956\":1,\"1307\":1,\"1312\":2,\"1314\":1,\"1315\":1,\"1316\":2,\"1320\":3,\"1333\":2,\"1345\":1,\"1471\":1}}],[\"sized\",{\"1\":{\"203\":1,\"562\":1}}],[\"size\",{\"0\":{\"1467\":1,\"1469\":1,\"1470\":1,\"1471\":1},\"1\":{\"47\":2,\"59\":2,\"61\":2,\"118\":14,\"160\":1,\"194\":13,\"235\":1,\"256\":2,\"385\":5,\"455\":1,\"508\":1,\"509\":6,\"587\":2,\"664\":1,\"671\":1,\"676\":3,\"681\":2,\"682\":2,\"692\":2,\"703\":1,\"749\":1,\"793\":1,\"891\":2,\"955\":1,\"978\":3,\"980\":1,\"989\":1,\"1056\":1,\"1138\":1,\"1142\":2,\"1161\":1,\"1185\":5,\"1189\":1,\"1212\":14,\"1216\":6,\"1219\":1,\"1221\":2,\"1228\":3,\"1301\":5,\"1309\":4,\"1312\":3,\"1314\":4,\"1316\":3,\"1320\":16,\"1329\":2,\"1333\":3,\"1340\":4,\"1341\":7,\"1344\":11,\"1345\":6,\"1386\":1,\"1463\":1,\"1464\":3,\"1468\":6,\"1469\":9,\"1470\":8,\"1471\":5,\"1472\":1,\"1596\":1,\"1620\":1}}],[\"shstrndx\",{\"1\":{\"1464\":1}}],[\"shnum\",{\"1\":{\"1464\":1}}],[\"sh\",{\"1\":{\"1052\":1,\"1265\":4,\"1635\":3,\"1647\":4}}],[\"shmat\",{\"1\":{\"743\":1}}],[\"shmptr\",{\"1\":{\"743\":4}}],[\"shmget\",{\"1\":{\"743\":2}}],[\"shmid\",{\"1\":{\"743\":2}}],[\"shm\",{\"1\":{\"743\":1}}],[\"sheets\",{\"0\":{\"897\":1},\"1\":{\"897\":1}}],[\"sheet\",{\"1\":{\"896\":2,\"897\":1}}],[\"shell复制代码tar\",{\"1\":{\"1454\":1}}],[\"shell复制代码gzip\",{\"1\":{\"1454\":1}}],[\"shellcmd\",{\"1\":{\"1374\":1}}],[\"shell\",{\"0\":{\"749\":1},\"1\":{\"739\":1,\"746\":4,\"856\":1,\"858\":5,\"1228\":2,\"1231\":2,\"1265\":1,\"1269\":6,\"1270\":2,\"1271\":2,\"1272\":3,\"1275\":1,\"1276\":3,\"1277\":1,\"1278\":2,\"1279\":1,\"1281\":4,\"1282\":1,\"1285\":1,\"1287\":2,\"1439\":1,\"1647\":1}}],[\"sheikh\",{\"1\":{\"606\":1}}],[\"shentsize\",{\"1\":{\"1464\":1}}],[\"shen\",{\"1\":{\"606\":3,\"1209\":1}}],[\"shut\",{\"1\":{\"1545\":1}}],[\"shutdown\",{\"1\":{\"288\":1,\"758\":2,\"1545\":2}}],[\"shu\",{\"1\":{\"491\":1}}],[\"shift\",{\"1\":{\"558\":1,\"1118\":1,\"1208\":2}}],[\"shifted\",{\"1\":{\"245\":1,\"341\":1}}],[\"shi\",{\"1\":{\"491\":1}}],[\"shall\",{\"1\":{\"1592\":1}}],[\"shadowsocks\",{\"0\":{\"1262\":1,\"1644\":1},\"1\":{\"1263\":4,\"1645\":4}}],[\"shadow=\",{\"1\":{\"944\":1}}],[\"shapes\",{\"1\":{\"1207\":1}}],[\"shape\",{\"1\":{\"1185\":2,\"1186\":8,\"1212\":5,\"1217\":1}}],[\"shape=\",{\"1\":{\"118\":1,\"1186\":4,\"1212\":2,\"1217\":1}}],[\"shanghai\",{\"1\":{\"1113\":2}}],[\"sha\",{\"1\":{\"664\":1}}],[\"sharing\",{\"1\":{\"655\":2,\"1142\":1,\"1623\":1}}],[\"shared\",{\"1\":{\"224\":1,\"225\":1,\"274\":1,\"1422\":2}}],[\"share\",{\"0\":{\"622\":1},\"1\":{\"194\":1,\"676\":1,\"1607\":2,\"1623\":1}}],[\"shopping\",{\"1\":{\"1623\":1}}],[\"shoppingoffers\",{\"1\":{\"102\":2}}],[\"shot\",{\"1\":{\"1545\":2}}],[\"shoff\",{\"1\":{\"1464\":2}}],[\"should\",{\"1\":{\"542\":1,\"557\":1,\"621\":1,\"623\":1,\"784\":1,\"975\":1,\"986\":1,\"1060\":2,\"1072\":1,\"1142\":1,\"1204\":1,\"1376\":1,\"1518\":1}}],[\"shortname\",{\"1\":{\"1250\":1}}],[\"shorthand\",{\"1\":{\"939\":1}}],[\"short\",{\"1\":{\"552\":1,\"559\":2,\"962\":1,\"988\":1,\"1259\":1,\"1507\":2,\"1623\":1}}],[\"shorten\",{\"1\":{\"543\":1}}],[\"shorter\",{\"1\":{\"271\":1}}],[\"shortest\",{\"1\":{\"168\":1}}],[\"shortly\",{\"1\":{\"236\":1}}],[\"shown\",{\"1\":{\"543\":1,\"557\":1,\"580\":1,\"1125\":1}}],[\"shows\",{\"1\":{\"236\":1,\"271\":1,\"556\":1,\"776\":1,\"1239\":1}}],[\"show\",{\"1\":{\"236\":1,\"245\":1,\"378\":2,\"542\":2,\"543\":2,\"794\":3,\"804\":2,\"892\":1,\"937\":1,\"939\":1,\"1052\":1,\"1216\":1,\"1246\":1,\"1250\":1,\"1515\":1,\"1595\":1}}],[\"sustainable\",{\"1\":{\"1591\":3}}],[\"suspension\",{\"1\":{\"1381\":1}}],[\"suitable\",{\"1\":{\"1508\":1}}],[\"suites\",{\"1\":{\"552\":1}}],[\"surpassed\",{\"1\":{\"1623\":2}}],[\"surrent\",{\"1\":{\"1212\":1}}],[\"surrounding\",{\"1\":{\"1118\":1}}],[\"sure\",{\"1\":{\"236\":1,\"261\":1,\"621\":1,\"1365\":1}}],[\"sufficient\",{\"1\":{\"558\":1}}],[\"suggested\",{\"1\":{\"558\":1}}],[\"suggest\",{\"1\":{\"552\":1}}],[\"sudo\",{\"1\":{\"270\":3,\"273\":1,\"274\":2,\"445\":1,\"620\":3,\"621\":4,\"622\":5,\"623\":3,\"624\":1,\"692\":1,\"744\":5,\"747\":1,\"750\":1,\"770\":1,\"775\":1,\"780\":1,\"781\":1,\"783\":2,\"786\":1,\"861\":2,\"916\":7,\"959\":1,\"1073\":2,\"1145\":16,\"1424\":3,\"1431\":1,\"1635\":1}}],[\"successful\",{\"1\":{\"1487\":2,\"1623\":3}}],[\"successfully\",{\"1\":{\"1216\":2,\"1494\":1,\"1623\":1}}],[\"successes\",{\"1\":{\"1153\":1}}],[\"success\",{\"1\":{\"1099\":1,\"1570\":1,\"1609\":1,\"1613\":1,\"1623\":4}}],[\"successimport\",{\"1\":{\"1052\":1}}],[\"successive\",{\"1\":{\"236\":1,\"341\":1,\"553\":1}}],[\"successor\",{\"1\":{\"499\":9}}],[\"succeeds\",{\"1\":{\"1623\":1}}],[\"succeeded\",{\"1\":{\"499\":3}}],[\"succeed\",{\"1\":{\"382\":4}}],[\"such\",{\"1\":{\"182\":1,\"195\":1,\"227\":2,\"236\":2,\"237\":1,\"241\":1,\"243\":1,\"256\":2,\"261\":1,\"543\":3,\"552\":1,\"556\":1,\"558\":1,\"584\":1,\"898\":1,\"1075\":1,\"1077\":1,\"1216\":1,\"1448\":1,\"1501\":3,\"1507\":1,\"1536\":1,\"1623\":2}}],[\"suprescalar\",{\"1\":{\"564\":1}}],[\"supply\",{\"1\":{\"1219\":2}}],[\"supplyment\",{\"1\":{\"1145\":1}}],[\"supplementary\",{\"1\":{\"1145\":3}}],[\"suppression\",{\"1\":{\"321\":1,\"1124\":2,\"1157\":1}}],[\"supports\",{\"1\":{\"492\":1,\"774\":1,\"1419\":1,\"1425\":1,\"1427\":2,\"1509\":1}}],[\"supported\",{\"1\":{\"373\":1,\"374\":1,\"1509\":1}}],[\"support\",{\"1\":{\"237\":1,\"606\":1,\"693\":2,\"776\":1,\"1427\":1,\"1498\":1,\"1508\":1,\"1509\":1,\"1611\":1}}],[\"supposed\",{\"1\":{\"1613\":1}}],[\"suppose\",{\"1\":{\"194\":1}}],[\"superposition\",{\"1\":{\"1118\":1}}],[\"superset\",{\"1\":{\"1509\":1}}],[\"supersequence\",{\"1\":{\"168\":1}}],[\"superscalar\",{\"1\":{\"564\":1}}],[\"super\",{\"0\":{\"427\":1},\"1\":{\"150\":1,\"424\":5,\"425\":1,\"426\":4,\"427\":9,\"430\":1,\"432\":7,\"664\":2}}],[\"sublib2\",{\"1\":{\"1434\":2}}],[\"sublib1\",{\"1\":{\"1434\":3}}],[\"sublibrary2\",{\"1\":{\"1434\":2}}],[\"sublibrary1\",{\"1\":{\"1434\":2}}],[\"subbinary2\",{\"1\":{\"1434\":1}}],[\"subbinary1\",{\"1\":{\"1434\":1}}],[\"subbinary\",{\"1\":{\"1434\":3}}],[\"subdirectory\",{\"0\":{\"1434\":1},\"1\":{\"1434\":5}}],[\"subcarriers\",{\"1\":{\"1143\":1}}],[\"subcarrier\",{\"1\":{\"1143\":1}}],[\"subpath\",{\"1\":{\"1075\":1}}],[\"submit\",{\"1\":{\"939\":3}}],[\"subgraph\",{\"1\":{\"600\":1}}],[\"sub\",{\"0\":{\"516\":1,\"1433\":1},\"1\":{\"392\":2,\"515\":1,\"1418\":1,\"1463\":2}}],[\"subtract\",{\"1\":{\"236\":1}}],[\"subsidy\",{\"1\":{\"1623\":1}}],[\"subsys\",{\"1\":{\"1551\":3}}],[\"subsystem\",{\"1\":{\"1056\":1}}],[\"substantially\",{\"1\":{\"558\":1}}],[\"substantial\",{\"1\":{\"543\":1,\"549\":1}}],[\"substrings\",{\"1\":{\"167\":1}}],[\"substring\",{\"1\":{\"108\":1}}],[\"subsequent\",{\"1\":{\"245\":1,\"361\":2,\"548\":1,\"552\":1,\"602\":1,\"1491\":1,\"1493\":1}}],[\"subsection\",{\"1\":{\"245\":1}}],[\"subset\",{\"1\":{\"204\":1,\"245\":2,\"552\":1,\"1474\":1}}],[\"subarraysum\",{\"1\":{\"152\":2,\"153\":1,\"154\":1,\"157\":1}}],[\"subarray\",{\"1\":{\"151\":1,\"156\":1,\"160\":1}}],[\"sum=\",{\"1\":{\"165\":1}}],[\"sum1\",{\"1\":{\"165\":1,\"166\":3}}],[\"sums\",{\"1\":{\"165\":6}}],[\"sumoddlengthsubarrays\",{\"1\":{\"149\":1}}],[\"summary>\",{\"1\":{\"1110\":2}}],[\"summary\",{\"0\":{\"17\":1,\"106\":1,\"206\":1,\"556\":1,\"581\":1,\"1297\":1,\"1330\":1,\"1334\":1,\"1477\":1,\"1488\":1,\"1579\":1},\"1\":{\"776\":1,\"785\":1}}],[\"sum\",{\"1\":{\"10\":14,\"11\":9,\"15\":4,\"102\":3,\"122\":2,\"124\":5,\"125\":2,\"147\":16,\"149\":1,\"151\":1,\"152\":10,\"153\":21,\"154\":2,\"155\":3,\"156\":1,\"160\":12,\"392\":2,\"1446\":3,\"1449\":2}}],[\"spread\",{\"1\":{\"1623\":2}}],[\"sprintf\",{\"1\":{\"1595\":1}}],[\"springframework\",{\"1\":{\"1626\":1}}],[\"spring\",{\"0\":{\"614\":1,\"868\":1,\"869\":1,\"875\":1,\"876\":1,\"882\":1},\"1\":{\"614\":1,\"869\":5,\"875\":1,\"878\":1,\"881\":2,\"882\":2,\"884\":1,\"1626\":1},\"2\":{\"887\":1}}],[\"spinlock\",{\"1\":{\"1563\":2,\"1570\":1,\"1575\":1}}],[\"spin\",{\"1\":{\"1544\":2,\"1563\":2,\"1570\":2,\"1575\":2}}],[\"spi\",{\"1\":{\"1508\":2,\"1509\":1}}],[\"spill\",{\"1\":{\"600\":1}}],[\"spsr\",{\"1\":{\"1495\":1,\"1496\":2}}],[\"sp<thread>\",{\"1\":{\"1295\":1}}],[\"splashactivity\",{\"1\":{\"1276\":1}}],[\"splash\",{\"1\":{\"1276\":1}}],[\"spliced\",{\"1\":{\"1204\":2}}],[\"splicer\",{\"0\":{\"1201\":1,\"1204\":1},\"1\":{\"1201\":1,\"1203\":1,\"1209\":1}}],[\"splicing\",{\"1\":{\"1201\":1,\"1204\":1}}],[\"split\",{\"0\":{\"908\":1},\"1\":{\"245\":1,\"288\":2,\"289\":7,\"307\":2,\"326\":2,\"347\":2,\"356\":1,\"387\":1,\"908\":1,\"1216\":1}}],[\"splits\",{\"1\":{\"177\":1}}],[\"spdy4\",{\"1\":{\"967\":1}}],[\"spdy\",{\"0\":{\"967\":1},\"1\":{\"967\":2}}],[\"spawning\",{\"1\":{\"1295\":1}}],[\"spawnpooledthread\",{\"0\":{\"1295\":1},\"1\":{\"1293\":4,\"1294\":2,\"1295\":1}}],[\"sparsity\",{\"1\":{\"1142\":1}}],[\"sparse\",{\"1\":{\"1060\":1,\"1185\":1}}],[\"spatio\",{\"1\":{\"1139\":1}}],[\"spatial\",{\"0\":{\"192\":1},\"1\":{\"191\":1,\"1120\":1,\"1124\":1}}],[\"spangaps\",{\"1\":{\"892\":1}}],[\"span\",{\"1\":{\"542\":2,\"556\":1,\"559\":1}}],[\"spam\",{\"1\":{\"418\":23}}],[\"space\",{\"1\":{\"252\":2,\"256\":1,\"321\":1,\"559\":1,\"562\":1,\"681\":1,\"682\":2,\"1125\":1,\"1340\":1,\"1353\":2,\"1380\":7,\"1388\":4,\"1389\":4,\"1484\":1,\"1491\":1,\"1492\":1,\"1498\":1,\"1509\":1,\"1607\":2}}],[\"speaking\",{\"1\":{\"1623\":1}}],[\"spectra\",{\"1\":{\"1124\":2,\"1126\":1}}],[\"speculate\",{\"1\":{\"572\":4}}],[\"speculative\",{\"0\":{\"571\":1},\"1\":{\"550\":1,\"556\":1,\"582\":1,\"603\":1,\"605\":1}}],[\"speculatively\",{\"1\":{\"543\":1,\"568\":1}}],[\"speculation\",{\"0\":{\"572\":1},\"1\":{\"541\":1,\"566\":1,\"571\":1,\"605\":1}}],[\"spec\",{\"1\":{\"552\":1}}],[\"specify\",{\"1\":{\"1492\":1}}],[\"specifies\",{\"1\":{\"308\":1,\"1143\":1,\"1192\":1}}],[\"specifiers\",{\"1\":{\"235\":1,\"245\":1}}],[\"specified\",{\"1\":{\"194\":2,\"245\":2,\"777\":1,\"1198\":1,\"1496\":1,\"1498\":1,\"1607\":1}}],[\"specifically\",{\"1\":{\"986\":1,\"1202\":1}}],[\"specific\",{\"1\":{\"227\":1,\"572\":1,\"1355\":1,\"1475\":2,\"1481\":2,\"1485\":1,\"1487\":2,\"1490\":1,\"1492\":1,\"1493\":3,\"1494\":2,\"1495\":2,\"1496\":1,\"1497\":1,\"1501\":2,\"1623\":1}}],[\"special\",{\"1\":{\"102\":14,\"227\":3,\"237\":1,\"428\":1,\"850\":1,\"1056\":1,\"1060\":2,\"1501\":1,\"1623\":1}}],[\"spending\",{\"1\":{\"237\":1,\"1623\":1}}],[\"spent\",{\"1\":{\"194\":1}}],[\"speedup\",{\"1\":{\"237\":1}}],[\"speed\",{\"1\":{\"227\":1,\"255\":1,\"1507\":1,\"1508\":2,\"1623\":1}}],[\"sp\",{\"1\":{\"102\":5,\"524\":2,\"526\":1,\"532\":2,\"533\":2,\"1299\":1,\"1483\":8}}],[\"s\",{\"0\":{\"165\":1,\"166\":1,\"1028\":1},\"1\":{\"81\":2,\"90\":3,\"102\":2,\"120\":3,\"138\":7,\"150\":13,\"167\":2,\"173\":1,\"194\":4,\"224\":2,\"225\":2,\"270\":1,\"271\":2,\"285\":2,\"288\":4,\"289\":6,\"307\":2,\"321\":1,\"326\":2,\"331\":1,\"339\":5,\"347\":2,\"349\":1,\"354\":1,\"373\":2,\"378\":2,\"382\":4,\"392\":1,\"403\":2,\"408\":1,\"424\":4,\"425\":2,\"455\":2,\"465\":6,\"479\":2,\"480\":15,\"481\":3,\"514\":2,\"529\":1,\"542\":1,\"584\":1,\"675\":1,\"692\":1,\"702\":1,\"707\":1,\"747\":1,\"748\":1,\"750\":4,\"751\":5,\"757\":1,\"758\":2,\"759\":1,\"776\":1,\"797\":1,\"807\":1,\"844\":1,\"935\":1,\"949\":2,\"955\":2,\"957\":1,\"977\":1,\"978\":2,\"1020\":5,\"1024\":1,\"1054\":1,\"1055\":1,\"1060\":2,\"1076\":2,\"1084\":2,\"1099\":2,\"1124\":1,\"1145\":1,\"1185\":1,\"1202\":1,\"1203\":1,\"1208\":1,\"1216\":1,\"1219\":1,\"1231\":2,\"1247\":1,\"1269\":4,\"1278\":1,\"1279\":1,\"1287\":6,\"1295\":3,\"1320\":2,\"1352\":2,\"1405\":1,\"1459\":2,\"1462\":3,\"1463\":2,\"1464\":2,\"1479\":1,\"1501\":4,\"1606\":2,\"1607\":2,\"1609\":1,\"1623\":7}}],[\"stub\",{\"1\":{\"1483\":4}}],[\"studio\",{\"1\":{\"1052\":1,\"1055\":1}}],[\"studio3t\",{\"1\":{\"611\":1}}],[\"studied\",{\"1\":{\"592\":1}}],[\"studies\",{\"1\":{\"547\":1}}],[\"study\",{\"1\":{\"558\":1,\"562\":1,\"573\":1,\"600\":1,\"1623\":1}}],[\"student的交叉监督模型\",{\"1\":{\"1136\":1}}],[\"student模型\",{\"1\":{\"1135\":1}}],[\"student网络\",{\"1\":{\"1133\":1}}],[\"student\",{\"1\":{\"343\":2,\"1201\":1}}],[\"stw\",{\"1\":{\"1388\":1}}],[\"sty\",{\"1\":{\"1179\":2}}],[\"stylus\",{\"1\":{\"942\":1}}],[\"styles\",{\"1\":{\"897\":1}}],[\"stylesheet\",{\"1\":{\"896\":1,\"897\":1,\"1081\":1,\"1105\":2}}],[\"style=\",{\"1\":{\"896\":1,\"898\":1,\"944\":1}}],[\"style>\",{\"1\":{\"896\":1,\"897\":1,\"934\":1}}],[\"style\",{\"0\":{\"897\":1},\"1\":{\"677\":1,\"892\":3,\"896\":5,\"897\":4,\"941\":2,\"1179\":2}}],[\"stickiness\",{\"1\":{\"1623\":1}}],[\"sticky\",{\"1\":{\"1111\":1}}],[\"stimation\",{\"1\":{\"558\":1}}],[\"still\",{\"1\":{\"321\":1,\"465\":1,\"558\":1,\"559\":1,\"941\":1,\"1509\":1,\"1623\":1}}],[\"stlxr\",{\"0\":{\"534\":1},\"1\":{\"534\":5}}],[\"stp\",{\"0\":{\"531\":1},\"1\":{\"511\":4}}],[\"st\",{\"1\":{\"326\":3,\"1216\":1}}],[\"stm\",{\"1\":{\"227\":2}}],[\"stopped\",{\"1\":{\"1518\":1,\"1543\":1}}],[\"stop=\",{\"1\":{\"938\":1}}],[\"stop\",{\"0\":{\"1541\":1},\"1\":{\"621\":2,\"758\":1,\"861\":1,\"938\":1,\"1277\":2,\"1518\":4,\"1520\":1,\"1521\":3,\"1527\":2,\"1541\":2,\"1542\":1,\"1573\":1}}],[\"stopiteration\",{\"1\":{\"420\":1}}],[\"storage\",{\"0\":{\"1217\":1},\"1\":{\"558\":1,\"572\":3,\"573\":2,\"600\":1,\"640\":1,\"925\":1,\"1487\":1,\"1492\":1,\"1493\":1,\"1494\":1,\"1495\":1,\"1496\":1,\"1620\":1}}],[\"storing\",{\"1\":{\"552\":1,\"559\":1}}],[\"stores\",{\"1\":{\"245\":1,\"255\":1,\"751\":1,\"1198\":1}}],[\"store\",{\"1\":{\"227\":3,\"235\":6,\"236\":2,\"245\":5,\"531\":1,\"532\":1,\"533\":1,\"534\":1,\"539\":1,\"548\":1,\"602\":3,\"692\":3,\"781\":1,\"850\":1,\"1191\":1,\"1243\":2,\"1596\":1,\"1618\":1,\"1620\":2}}],[\"stored\",{\"1\":{\"195\":1,\"236\":3,\"243\":1,\"245\":2,\"850\":1,\"1075\":1,\"1219\":1}}],[\"stones\",{\"1\":{\"125\":4}}],[\"stone\",{\"1\":{\"114\":2,\"125\":5}}],[\"std=c++0x\",{\"1\":{\"1427\":1}}],[\"std=c++11\",{\"1\":{\"1427\":1}}],[\"stddev\",{\"1\":{\"1212\":2}}],[\"stddev=1\",{\"1\":{\"1186\":3,\"1212\":4}}],[\"stddev=0\",{\"1\":{\"1185\":1,\"1186\":1}}],[\"stderr\",{\"1\":{\"383\":1}}],[\"stdin\",{\"1\":{\"307\":1,\"961\":2}}],[\"stdout\",{\"1\":{\"288\":1,\"324\":1,\"326\":1,\"383\":1,\"956\":1,\"1216\":2}}],[\"std\",{\"1\":{\"179\":1,\"344\":1,\"455\":4,\"693\":1,\"707\":3,\"1004\":1,\"1320\":1,\"1365\":2,\"1366\":2,\"1405\":3}}],[\"step=global\",{\"1\":{\"1185\":2}}],[\"steps会被转化成整数\",{\"1\":{\"1212\":1}}],[\"steps代表了完整的使用一遍训练数据所需要的迭代轮数\",{\"1\":{\"1212\":1}}],[\"steps和dacay\",{\"1\":{\"1185\":1}}],[\"steps\",{\"1\":{\"234\":2,\"774\":1,\"1185\":2,\"1212\":6,\"1476\":1}}],[\"step\",{\"1\":{\"88\":5,\"92\":4,\"234\":4,\"352\":1,\"1125\":1,\"1185\":11,\"1212\":10,\"1365\":1,\"1607\":2}}],[\"staging\",{\"1\":{\"1308\":1}}],[\"staged\",{\"1\":{\"1249\":1}}],[\"stage算法\",{\"1\":{\"1151\":1}}],[\"stage的\",{\"1\":{\"1151\":1}}],[\"stages\",{\"1\":{\"234\":3,\"236\":5,\"549\":1,\"1491\":1}}],[\"stage\",{\"0\":{\"236\":1},\"1\":{\"234\":5,\"236\":9,\"549\":1,\"1417\":1,\"1424\":1,\"1474\":1,\"1476\":6,\"1479\":1,\"1483\":1,\"1487\":4,\"1497\":1}}],[\"staircase的值为true时\",{\"1\":{\"1212\":1}}],[\"staircase=true\",{\"1\":{\"1185\":1,\"1212\":1}}],[\"star\",{\"1\":{\"1099\":1}}],[\"startthreadpool\",{\"0\":{\"1294\":1},\"1\":{\"1293\":1,\"1294\":1,\"1297\":1}}],[\"start+batch\",{\"1\":{\"1212\":1}}],[\"start++\",{\"1\":{\"149\":1}}],[\"startapp\",{\"1\":{\"864\":2}}],[\"startproject\",{\"1\":{\"864\":2}}],[\"startup\",{\"0\":{\"1515\":1},\"1\":{\"707\":4,\"1405\":4,\"1515\":7}}],[\"startchildzygote=\",{\"1\":{\"702\":1}}],[\"startviazygote\",{\"1\":{\"702\":1,\"703\":2}}],[\"started\",{\"1\":{\"622\":3,\"707\":1,\"777\":1,\"1365\":2,\"1406\":1}}],[\"start=0\",{\"1\":{\"392\":1}}],[\"starting\",{\"1\":{\"234\":1,\"702\":2,\"780\":1,\"1487\":1}}],[\"startservice\",{\"1\":{\"1327\":1,\"1329\":1,\"1333\":1}}],[\"startswith\",{\"1\":{\"910\":1,\"933\":1}}],[\"starts\",{\"1\":{\"79\":2,\"80\":3,\"197\":1,\"285\":1,\"1239\":1,\"1474\":1,\"1475\":1,\"1479\":1}}],[\"start\",{\"0\":{\"1406\":1,\"1556\":1},\"1\":{\"32\":5,\"83\":1,\"92\":6,\"149\":9,\"211\":1,\"236\":2,\"285\":3,\"289\":3,\"298\":1,\"387\":5,\"388\":3,\"392\":1,\"562\":1,\"614\":1,\"671\":1,\"702\":7,\"703\":1,\"705\":1,\"706\":2,\"707\":2,\"744\":3,\"785\":1,\"843\":1,\"861\":1,\"987\":1,\"1054\":2,\"1056\":1,\"1072\":1,\"1201\":1,\"1212\":7,\"1228\":1,\"1239\":4,\"1263\":1,\"1272\":1,\"1276\":3,\"1277\":1,\"1329\":1,\"1333\":2,\"1365\":1,\"1400\":1,\"1402\":2,\"1406\":2,\"1464\":4,\"1479\":1,\"1507\":1,\"1515\":2,\"1527\":2,\"1556\":1,\"1619\":1,\"1645\":1}}],[\"stable\",{\"1\":{\"545\":1,\"785\":1,\"916\":1,\"1099\":1,\"1122\":1,\"1207\":1}}],[\"standpoint\",{\"1\":{\"548\":1}}],[\"standardized\",{\"1\":{\"1509\":1}}],[\"standard\",{\"1\":{\"309\":2,\"321\":1,\"905\":1,\"1418\":1,\"1427\":1,\"1508\":1,\"1509\":3,\"1611\":1,\"1618\":1}}],[\"stands\",{\"1\":{\"255\":1}}],[\"stalls\",{\"0\":{\"238\":1},\"1\":{\"237\":1}}],[\"stalled\",{\"1\":{\"237\":4}}],[\"stall\",{\"1\":{\"212\":1,\"237\":2}}],[\"stats\",{\"1\":{\"1316\":1}}],[\"stat\",{\"1\":{\"741\":2,\"1216\":1,\"1249\":1,\"1316\":1}}],[\"statinfo\",{\"1\":{\"1216\":2}}],[\"statistics\",{\"1\":{\"492\":1}}],[\"statically\",{\"1\":{\"1551\":1}}],[\"staticmethod\",{\"0\":{\"422\":1},\"1\":{\"422\":3}}],[\"static\",{\"0\":{\"242\":1},\"1\":{\"241\":1,\"422\":5,\"510\":1,\"573\":1,\"584\":2,\"599\":1,\"600\":1,\"681\":1,\"682\":1,\"693\":2,\"696\":2,\"702\":2,\"703\":1,\"706\":2,\"708\":1,\"760\":1,\"889\":1,\"892\":1,\"982\":1,\"1004\":1,\"1307\":3,\"1312\":1,\"1313\":1,\"1314\":1,\"1316\":1,\"1320\":3,\"1329\":1,\"1333\":1,\"1345\":1,\"1365\":1,\"1366\":1,\"1376\":1,\"1396\":2,\"1402\":2,\"1422\":1,\"1463\":6,\"1509\":1,\"1516\":1,\"1518\":1,\"1519\":1,\"1528\":2,\"1534\":2,\"1542\":2,\"1543\":1,\"1544\":1,\"1545\":1,\"1566\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1575\":1,\"1577\":1,\"1595\":1,\"1596\":1,\"1606\":1,\"1607\":2,\"1608\":2,\"1609\":1}}],[\"state>\",{\"1\":{\"1592\":1}}],[\"state=\",{\"1\":{\"1269\":1}}],[\"stateless\",{\"1\":{\"876\":1}}],[\"stateful\",{\"1\":{\"876\":1}}],[\"states\",{\"1\":{\"91\":8,\"1534\":4}}],[\"state\",{\"0\":{\"922\":1,\"1520\":1,\"1523\":1},\"1\":{\"88\":5,\"91\":4,\"120\":1,\"580\":1,\"675\":2,\"676\":2,\"702\":1,\"707\":1,\"851\":1,\"986\":1,\"1143\":1,\"1202\":1,\"1269\":3,\"1316\":3,\"1385\":1,\"1386\":2,\"1389\":2,\"1405\":1,\"1474\":2,\"1475\":1,\"1481\":1,\"1483\":1,\"1496\":1,\"1514\":1,\"1515\":5,\"1516\":2,\"1518\":5,\"1519\":6,\"1520\":12,\"1521\":5,\"1522\":3,\"1523\":17,\"1524\":1,\"1525\":3,\"1526\":1,\"1534\":7,\"1542\":8,\"1543\":9,\"1544\":6,\"1545\":1,\"1583\":1,\"1584\":1,\"1592\":4,\"1597\":5,\"1600\":3,\"1623\":1}}],[\"statusbuffer\",{\"1\":{\"1333\":1}}],[\"status\",{\"0\":{\"746\":1,\"1247\":1},\"1\":{\"88\":26,\"766\":1,\"793\":1,\"861\":1,\"955\":1,\"986\":1,\"1056\":1,\"1216\":1,\"1239\":3,\"1247\":2,\"1249\":1,\"1299\":1,\"1300\":2,\"1301\":1,\"1320\":5,\"1333\":13,\"1424\":1,\"1427\":1,\"1449\":1,\"1483\":1,\"1495\":1,\"1496\":1}}],[\"stack+0x14\",{\"1\":{\"1515\":2}}],[\"stackhandlescope<1>\",{\"1\":{\"706\":1,\"1402\":1}}],[\"stack=1\",{\"1\":{\"664\":2}}],[\"stack==\",{\"1\":{\"465\":1}}],[\"stackmaptable\",{\"1\":{\"664\":4}}],[\"stack\",{\"0\":{\"462\":1,\"464\":1,\"466\":1,\"1320\":1},\"1\":{\"43\":5,\"46\":4,\"64\":6,\"75\":5,\"341\":2,\"454\":1,\"461\":1,\"465\":18,\"466\":9,\"467\":7,\"486\":4,\"508\":7,\"623\":1,\"687\":1,\"689\":1,\"692\":1,\"975\":1,\"1316\":1,\"1386\":4,\"1388\":1,\"1389\":2,\"1463\":1,\"1485\":1,\"1515\":1}}],[\"strncasecmp\",{\"1\":{\"1607\":1,\"1608\":1}}],[\"strncmp\",{\"1\":{\"1607\":1}}],[\"strcut\",{\"1\":{\"1533\":1}}],[\"strcpy\",{\"1\":{\"743\":3}}],[\"strlen\",{\"1\":{\"1469\":5}}],[\"strongest\",{\"1\":{\"1121\":1}}],[\"strong\",{\"1\":{\"1118\":1,\"1121\":1,\"1620\":1,\"1623\":1}}],[\"street\",{\"1\":{\"1094\":1}}],[\"strerror\",{\"1\":{\"960\":1}}],[\"streams\",{\"1\":{\"1120\":1}}],[\"streaming\",{\"0\":{\"857\":1}}],[\"stream=sys\",{\"1\":{\"288\":1,\"324\":1,\"326\":1}}],[\"stream\",{\"1\":{\"237\":1,\"361\":6,\"760\":1,\"1052\":1}}],[\"strategy\",{\"1\":{\"1623\":6}}],[\"strategies\",{\"0\":{\"589\":1},\"1\":{\"241\":1,\"256\":1,\"1623\":7}}],[\"straightforward\",{\"1\":{\"548\":1,\"783\":1}}],[\"strb\",{\"0\":{\"533\":1},\"1\":{\"527\":1,\"533\":1}}],[\"str3ng\",{\"1\":{\"390\":1}}],[\"strftime\",{\"1\":{\"349\":1}}],[\"strive\",{\"1\":{\"1623\":1}}],[\"strim\",{\"1\":{\"1608\":1,\"1610\":1}}],[\"strictredis\",{\"0\":{\"836\":1},\"1\":{\"824\":3,\"836\":2}}],[\"strict=true\",{\"1\":{\"314\":1}}],[\"strict\",{\"1\":{\"314\":3,\"785\":1}}],[\"strides=\",{\"1\":{\"1186\":4}}],[\"stride=1\",{\"1\":{\"1162\":1}}],[\"strided\",{\"1\":{\"559\":1,\"1142\":1}}],[\"stride\",{\"0\":{\"313\":1,\"554\":1},\"1\":{\"543\":1,\"545\":2,\"552\":1,\"556\":3,\"559\":1,\"562\":4,\"583\":1,\"1142\":1}}],[\"strip\",{\"1\":{\"307\":1,\"356\":1,\"387\":1}}],[\"string8\",{\"1\":{\"1295\":1}}],[\"stringify\",{\"1\":{\"902\":1,\"927\":2}}],[\"stringfactory\",{\"1\":{\"707\":1,\"1405\":1}}],[\"string>\",{\"1\":{\"693\":1,\"706\":1,\"1402\":1}}],[\"strings\",{\"1\":{\"671\":1}}],[\"string\",{\"0\":{\"391\":1,\"472\":1,\"473\":1,\"474\":1,\"475\":1,\"476\":1,\"902\":1,\"1402\":1},\"1\":{\"49\":1,\"308\":2,\"339\":1,\"361\":1,\"390\":2,\"391\":6,\"392\":1,\"404\":3,\"408\":1,\"411\":2,\"455\":2,\"461\":1,\"477\":1,\"480\":3,\"661\":1,\"671\":3,\"673\":3,\"681\":1,\"682\":1,\"696\":1,\"703\":1,\"705\":3,\"706\":25,\"707\":5,\"750\":1,\"825\":1,\"907\":1,\"908\":1,\"909\":1,\"937\":1,\"1004\":1,\"1056\":2,\"1219\":3,\"1295\":2,\"1329\":2,\"1365\":1,\"1396\":1,\"1400\":3,\"1402\":23,\"1403\":2,\"1405\":5,\"1424\":1,\"1464\":1,\"1487\":1,\"1611\":1},\"2\":{\"483\":1}}],[\"structs\",{\"1\":{\"1345\":1}}],[\"structural\",{\"1\":{\"237\":2}}],[\"structure\",{\"0\":{\"850\":1,\"1075\":1},\"1\":{\"204\":1,\"256\":1,\"675\":1,\"988\":1,\"1591\":2,\"1592\":1,\"1602\":1}}],[\"struct\",{\"0\":{\"338\":1,\"461\":1,\"949\":1,\"1530\":1,\"1561\":1,\"1602\":1},\"1\":{\"179\":1,\"252\":3,\"671\":8,\"708\":1,\"949\":4,\"950\":3,\"952\":1,\"955\":7,\"961\":4,\"962\":5,\"1052\":1,\"1053\":1,\"1054\":1,\"1307\":3,\"1309\":2,\"1312\":3,\"1313\":1,\"1314\":4,\"1315\":1,\"1316\":4,\"1340\":13,\"1341\":5,\"1342\":3,\"1344\":3,\"1345\":2,\"1464\":1,\"1519\":4,\"1520\":2,\"1523\":2,\"1534\":8,\"1542\":2,\"1543\":2,\"1544\":2,\"1545\":1,\"1563\":3,\"1564\":4,\"1565\":3,\"1566\":9,\"1567\":6,\"1570\":5,\"1571\":2,\"1572\":2,\"1573\":3,\"1575\":4,\"1576\":22,\"1577\":4,\"1590\":14,\"1591\":4,\"1592\":6,\"1593\":18,\"1594\":1,\"1595\":3,\"1596\":3,\"1599\":3,\"1600\":11,\"1602\":8,\"1606\":2,\"1607\":3,\"1608\":6,\"1609\":3,\"1610\":2,\"1611\":4}}],[\"strs\",{\"1\":{\"120\":6,\"397\":7}}],[\"str2\",{\"1\":{\"108\":2}}],[\"str1\",{\"1\":{\"108\":4}}],[\"str\",{\"0\":{\"390\":1,\"434\":1,\"532\":1},\"1\":{\"8\":2,\"9\":2,\"49\":2,\"88\":7,\"92\":3,\"120\":1,\"138\":2,\"150\":1,\"184\":8,\"185\":4,\"186\":2,\"227\":2,\"301\":1,\"307\":2,\"308\":1,\"309\":2,\"343\":2,\"390\":4,\"392\":1,\"393\":2,\"394\":5,\"396\":2,\"400\":1,\"401\":3,\"424\":1,\"434\":5,\"465\":2,\"479\":2,\"480\":2,\"481\":10,\"511\":1,\"523\":1,\"532\":1,\"797\":1,\"949\":3,\"1000\":2,\"1094\":2,\"1307\":1,\"1469\":1}}],[\"seized\",{\"1\":{\"1623\":1}}],[\"seinfo\",{\"1\":{\"702\":2}}],[\"semaphore\",{\"1\":{\"1564\":1}}],[\"semiconductor\",{\"1\":{\"1209\":1}}],[\"segement\",{\"0\":{\"1460\":1}}],[\"segmeant\",{\"1\":{\"980\":1}}],[\"segmentfault\",{\"1\":{\"1465\":1}}],[\"segments\",{\"1\":{\"976\":1}}],[\"segment\",{\"1\":{\"234\":1,\"978\":2,\"1456\":1,\"1460\":1,\"1461\":1}}],[\"seq2\",{\"1\":{\"982\":8}}],[\"seq1\",{\"1\":{\"982\":8}}],[\"seq\",{\"1\":{\"982\":1,\"988\":1}}],[\"sequencing\",{\"1\":{\"584\":1}}],[\"sequence\",{\"0\":{\"466\":1},\"1\":{\"420\":1,\"751\":1,\"897\":1,\"978\":4,\"982\":1,\"988\":2,\"1474\":1}}],[\"sequences\",{\"1\":{\"361\":2,\"988\":1}}],[\"sequential\",{\"1\":{\"245\":2,\"1056\":2}}],[\"sesion\",{\"1\":{\"764\":1}}],[\"sess\",{\"1\":{\"379\":1,\"1142\":3,\"1185\":3,\"1212\":24,\"1217\":9}}],[\"session\",{\"1\":{\"379\":2,\"380\":1,\"828\":1,\"850\":1,\"875\":2,\"1142\":1,\"1185\":1,\"1212\":4,\"1217\":2}}],[\"seventh\",{\"1\":{\"606\":1}}],[\"sever\",{\"1\":{\"1204\":1}}],[\"severe\",{\"1\":{\"1118\":1}}],[\"severity\",{\"1\":{\"321\":2}}],[\"several\",{\"1\":{\"227\":2,\"237\":1,\"256\":1,\"542\":2,\"556\":1,\"557\":2,\"558\":1,\"559\":2,\"562\":1,\"1623\":1}}],[\"seznec\",{\"1\":{\"566\":1}}],[\"seamlessly\",{\"1\":{\"542\":1,\"543\":1,\"556\":1,\"559\":1,\"562\":1,\"605\":1}}],[\"searches\",{\"1\":{\"1507\":1}}],[\"searched\",{\"1\":{\"559\":1}}],[\"search方法来找到最有可能包含目标的子区域\",{\"1\":{\"1153\":1}}],[\"search3\",{\"1\":{\"20\":1}}],[\"search2\",{\"1\":{\"20\":1}}],[\"search\",{\"0\":{\"16\":1},\"1\":{\"19\":2,\"20\":1,\"21\":1,\"25\":1,\"30\":1,\"31\":1,\"70\":1,\"71\":1,\"79\":3,\"344\":2,\"445\":1,\"492\":2,\"890\":1,\"1057\":1,\"1084\":1,\"1124\":1,\"1151\":1,\"1440\":6,\"1441\":3},\"2\":{\"39\":1}}],[\"sensewire\",{\"1\":{\"1508\":1}}],[\"sensorhub\",{\"1\":{\"1510\":4}}],[\"sensor\",{\"1\":{\"1507\":1,\"1510\":5,\"1590\":6,\"1611\":2,\"1613\":1}}],[\"sensors\",{\"1\":{\"1507\":1,\"1508\":2,\"1598\":1}}],[\"sent\",{\"1\":{\"975\":3,\"982\":1,\"983\":1,\"988\":1,\"989\":2,\"1507\":1,\"1573\":1}}],[\"sentence\",{\"1\":{\"411\":2,\"1469\":1}}],[\"sendrequestcallback\",{\"1\":{\"1328\":2}}],[\"sendrequest\",{\"1\":{\"1320\":1,\"1328\":3,\"1332\":1}}],[\"sendreply\",{\"1\":{\"1310\":1}}],[\"sender\",{\"1\":{\"975\":1,\"986\":2,\"1333\":2}}],[\"sendto\",{\"1\":{\"950\":1,\"1094\":2,\"1095\":1}}],[\"sendmymessage\",{\"1\":{\"1095\":1}}],[\"sendmsg\",{\"1\":{\"412\":1}}],[\"sendmessage\",{\"1\":{\"326\":3}}],[\"send\",{\"1\":{\"245\":1,\"956\":1,\"980\":1,\"1000\":1,\"1320\":2,\"1326\":1,\"1328\":3,\"1507\":1}}],[\"serror\",{\"1\":{\"1485\":1}}],[\"serv\",{\"1\":{\"949\":1,\"950\":4,\"955\":1}}],[\"services\",{\"0\":{\"623\":1},\"1\":{\"702\":1,\"1474\":1,\"1498\":1,\"1501\":1}}],[\"service\",{\"1\":{\"614\":1,\"623\":1,\"624\":2,\"640\":3,\"744\":2,\"861\":1,\"1271\":2,\"1329\":3,\"1333\":2,\"1352\":1,\"1474\":1}}],[\"server向binder驱动发送请求数据\",{\"1\":{\"1310\":1}}],[\"server上获取数据\",{\"1\":{\"1253\":1}}],[\"serverfix\",{\"1\":{\"1253\":6}}],[\"servers\",{\"1\":{\"1054\":1}}],[\"server3\",{\"1\":{\"760\":1}}],[\"server2\",{\"1\":{\"760\":1}}],[\"server的密码是123456\",{\"1\":{\"610\":1}}],[\"server\",{\"0\":{\"368\":1,\"703\":1,\"745\":1,\"859\":1,\"1237\":1,\"1649\":1},\"1\":{\"368\":2,\"446\":3,\"609\":1,\"640\":1,\"644\":1,\"655\":1,\"702\":1,\"703\":1,\"744\":2,\"745\":2,\"759\":3,\"760\":5,\"761\":8,\"763\":7,\"764\":2,\"765\":2,\"766\":1,\"789\":1,\"802\":1,\"824\":3,\"860\":1,\"956\":2,\"961\":1,\"988\":1,\"1054\":3,\"1056\":1,\"1074\":2,\"1076\":1,\"1237\":1,\"1239\":1,\"1248\":1,\"1263\":2,\"1264\":1,\"1293\":1,\"1317\":3,\"1326\":3,\"1645\":2,\"1646\":1},\"2\":{\"626\":1,\"630\":1,\"720\":1,\"767\":1,\"768\":1,\"772\":1,\"773\":1}}],[\"serialno\",{\"1\":{\"1285\":1,\"1287\":1}}],[\"serial\",{\"1\":{\"1231\":2,\"1269\":4,\"1278\":5,\"1279\":1,\"1287\":10,\"1507\":2,\"1508\":2,\"1509\":1}}],[\"serializable\",{\"1\":{\"664\":5}}],[\"series\",{\"1\":{\"559\":1}}],[\"serious\",{\"1\":{\"321\":2}}],[\"sed\",{\"0\":{\"750\":1},\"1\":{\"270\":1,\"746\":1,\"750\":4}}],[\"sep\",{\"1\":{\"1054\":15}}],[\"september\",{\"0\":{\"1054\":1},\"1\":{\"907\":1}}],[\"sept\",{\"1\":{\"606\":1}}],[\"sep=\",{\"1\":{\"315\":1,\"329\":2,\"331\":1}}],[\"sepc\",{\"1\":{\"256\":1}}],[\"separation\",{\"1\":{\"236\":1}}],[\"separated\",{\"1\":{\"1054\":1}}],[\"separate\",{\"1\":{\"236\":3,\"245\":1,\"1493\":1,\"1509\":1}}],[\"secure=1\",{\"1\":{\"1483\":1}}],[\"secure=0\",{\"1\":{\"1483\":1}}],[\"secured\",{\"1\":{\"992\":1}}],[\"secure\",{\"0\":{\"1495\":1},\"1\":{\"960\":1,\"1453\":1,\"1474\":2,\"1476\":1,\"1479\":2,\"1487\":1,\"1490\":2,\"1491\":1,\"1493\":1,\"1495\":3,\"1496\":2,\"1498\":1,\"1499\":3}}],[\"security\",{\"1\":{\"957\":1,\"1483\":1,\"1492\":1}}],[\"secrets\",{\"1\":{\"612\":1}}],[\"sections\",{\"1\":{\"1463\":1,\"1481\":1}}],[\"section\",{\"0\":{\"1461\":1,\"1553\":1},\"1\":{\"237\":1,\"245\":1,\"552\":1,\"556\":1,\"557\":1,\"562\":1,\"1456\":1,\"1460\":4,\"1461\":2,\"1463\":7,\"1464\":5,\"1479\":1,\"1487\":1,\"1496\":1,\"1553\":20,\"1623\":1}}],[\"secondray\",{\"1\":{\"1475\":2}}],[\"seconds=10\",{\"1\":{\"844\":1}}],[\"seconds\",{\"1\":{\"285\":2,\"748\":1,\"1161\":1}}],[\"secondaryzygotestate\",{\"1\":{\"703\":7}}],[\"secondary\",{\"1\":{\"253\":1,\"703\":1,\"1474\":2,\"1475\":2,\"1481\":1,\"1515\":1}}],[\"second\",{\"1\":{\"236\":2,\"455\":1,\"542\":1,\"543\":1,\"546\":1,\"555\":1,\"558\":1,\"677\":1,\"689\":1,\"850\":1,\"1192\":1}}],[\"seed\",{\"1\":{\"1212\":1}}],[\"seed=1\",{\"1\":{\"1212\":2}}],[\"sees\",{\"1\":{\"1118\":1}}],[\"seen\",{\"1\":{\"573\":1,\"599\":1,\"600\":1,\"750\":1,\"1074\":1,\"1118\":1}}],[\"seem\",{\"1\":{\"552\":1}}],[\"see\",{\"1\":{\"237\":1,\"243\":1,\"255\":1,\"339\":1,\"408\":1,\"559\":1,\"562\":1,\"707\":1,\"747\":1,\"794\":1,\"892\":1,\"937\":1,\"941\":2,\"957\":1,\"988\":1,\"1072\":1,\"1074\":2,\"1075\":1,\"1076\":1,\"1077\":1,\"1079\":1,\"1080\":1,\"1091\":1,\"1099\":1,\"1202\":1,\"1203\":1,\"1207\":1,\"1208\":1,\"1345\":1,\"1405\":1,\"1495\":1,\"1592\":1}}],[\"seld\",{\"1\":{\"460\":1}}],[\"selects\",{\"1\":{\"1623\":1}}],[\"select+0x20\",{\"1\":{\"1515\":1}}],[\"selector\",{\"1\":{\"897\":1}}],[\"selective\",{\"1\":{\"542\":2,\"543\":4,\"548\":3,\"549\":2,\"550\":4,\"558\":2,\"565\":2,\"978\":1,\"1151\":1}}],[\"selection\",{\"0\":{\"178\":1},\"1\":{\"178\":1}}],[\"select\",{\"0\":{\"953\":1,\"954\":1},\"1\":{\"203\":1,\"204\":1,\"750\":1,\"798\":1,\"804\":1,\"807\":1,\"810\":1,\"940\":1,\"954\":8,\"1081\":1,\"1515\":1,\"1516\":1,\"1518\":1}}],[\"selfinfo\",{\"1\":{\"1094\":1}}],[\"selfdividingnumbers\",{\"1\":{\"401\":1}}],[\"self\",{\"0\":{\"419\":1},\"1\":{\"8\":1,\"9\":2,\"10\":2,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":5,\"19\":2,\"20\":3,\"21\":1,\"30\":1,\"31\":1,\"32\":5,\"33\":2,\"34\":5,\"35\":2,\"36\":1,\"42\":13,\"43\":1,\"46\":1,\"47\":2,\"49\":3,\"51\":1,\"52\":1,\"54\":5,\"56\":4,\"57\":1,\"59\":1,\"61\":1,\"62\":6,\"64\":1,\"74\":19,\"75\":4,\"76\":7,\"77\":2,\"79\":1,\"80\":1,\"81\":6,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":8,\"91\":1,\"92\":1,\"102\":6,\"103\":2,\"118\":2,\"120\":1,\"122\":1,\"124\":1,\"125\":1,\"130\":2,\"132\":1,\"134\":1,\"136\":1,\"138\":1,\"149\":1,\"150\":11,\"152\":2,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"165\":2,\"166\":1,\"169\":1,\"173\":4,\"184\":2,\"185\":1,\"186\":1,\"285\":5,\"288\":1,\"289\":12,\"297\":1,\"298\":5,\"299\":2,\"315\":2,\"329\":2,\"331\":1,\"343\":1,\"354\":6,\"355\":2,\"356\":1,\"379\":2,\"385\":11,\"386\":3,\"387\":7,\"388\":3,\"400\":1,\"401\":4,\"408\":11,\"419\":2,\"420\":12,\"421\":2,\"422\":1,\"424\":37,\"425\":8,\"426\":23,\"427\":18,\"430\":1,\"431\":2,\"432\":14,\"433\":2,\"434\":8,\"435\":6,\"436\":6,\"458\":1,\"459\":1,\"460\":18,\"465\":2,\"468\":12,\"479\":1,\"480\":2,\"481\":1,\"486\":8,\"493\":5,\"495\":7,\"496\":1,\"499\":16,\"706\":2,\"707\":3,\"1296\":1,\"1333\":1,\"1402\":2,\"1405\":3,\"1567\":1}}],[\"setclientcallback\",{\"1\":{\"1366\":1}}],[\"setcb\",{\"1\":{\"962\":1}}],[\"setfl\",{\"1\":{\"956\":1}}],[\"setitem\",{\"1\":{\"927\":4}}],[\"setnx加锁\",{\"1\":{\"833\":1}}],[\"setnx\",{\"1\":{\"833\":2}}],[\"set2\",{\"1\":{\"751\":1}}],[\"set1\",{\"1\":{\"751\":3}}],[\"settings\",{\"1\":{\"864\":1,\"1099\":1,\"1259\":1,\"1272\":1,\"1498\":1}}],[\"setting\",{\"1\":{\"707\":1,\"957\":1,\"1405\":1,\"1424\":1,\"1425\":1,\"1485\":7}}],[\"setter\",{\"1\":{\"408\":2,\"881\":3}}],[\"setgroups=\",{\"1\":{\"703\":1}}],[\"setgid=\",{\"1\":{\"703\":2}}],[\"setuid=\",{\"1\":{\"703\":2}}],[\"setup\",{\"0\":{\"783\":1,\"1484\":1,\"1485\":1},\"1\":{\"81\":1,\"90\":1,\"102\":1,\"150\":2,\"378\":2,\"385\":1,\"387\":3,\"388\":1,\"784\":1,\"1482\":2,\"1528\":7,\"1534\":1}}],[\"set<string>\",{\"1\":{\"344\":1}}],[\"setsize\",{\"1\":{\"954\":1}}],[\"sets\",{\"1\":{\"194\":11,\"235\":1,\"1185\":1,\"1483\":1,\"1484\":1,\"1491\":1}}],[\"set\",{\"0\":{\"194\":1,\"202\":1,\"203\":1,\"235\":1,\"343\":1,\"344\":1,\"1427\":1,\"1523\":1,\"1596\":1,\"1609\":1,\"1610\":1},\"1\":{\"75\":4,\"79\":1,\"80\":1,\"88\":4,\"91\":2,\"92\":1,\"184\":1,\"194\":22,\"196\":1,\"199\":1,\"202\":4,\"204\":4,\"205\":1,\"230\":1,\"233\":1,\"299\":3,\"343\":7,\"344\":1,\"397\":1,\"408\":1,\"618\":3,\"621\":1,\"676\":1,\"707\":2,\"784\":1,\"798\":2,\"825\":1,\"918\":2,\"927\":2,\"1080\":1,\"1226\":1,\"1228\":11,\"1231\":3,\"1259\":6,\"1269\":1,\"1278\":3,\"1279\":2,\"1287\":1,\"1299\":1,\"1307\":3,\"1345\":1,\"1365\":1,\"1385\":1,\"1405\":2,\"1424\":2,\"1427\":3,\"1429\":1,\"1483\":1,\"1485\":2,\"1509\":1,\"1516\":1,\"1518\":1,\"1520\":1,\"1523\":7,\"1534\":2,\"1545\":3,\"1593\":5,\"1600\":1,\"1607\":3,\"1608\":1,\"1609\":3,\"1610\":2,\"1618\":1,\"1620\":1}}],[\"sownedpool\",{\"1\":{\"1329\":2}}],[\"somaxconn\",{\"1\":{\"984\":1}}],[\"someone\",{\"1\":{\"403\":3}}],[\"something\",{\"0\":{\"1535\":1,\"1580\":1},\"1\":{\"321\":1,\"759\":1,\"896\":1,\"1079\":1}}],[\"somethings\",{\"1\":{\"309\":1}}],[\"sometimes\",{\"1\":{\"236\":1,\"747\":1,\"888\":1,\"1078\":1}}],[\"some\",{\"0\":{\"211\":1,\"1639\":1},\"1\":{\"203\":1,\"227\":2,\"237\":1,\"245\":1,\"308\":1,\"309\":1,\"321\":2,\"344\":2,\"411\":1,\"511\":1,\"540\":1,\"549\":1,\"692\":1,\"775\":1,\"847\":1,\"888\":1,\"897\":1,\"941\":1,\"1055\":2,\"1057\":1,\"1079\":1,\"1216\":1,\"1277\":1,\"1355\":1,\"1409\":1,\"1422\":1,\"1493\":1,\"1509\":1}}],[\"social\",{\"1\":{\"1623\":2}}],[\"soc\",{\"1\":{\"804\":1,\"1510\":1,\"1611\":1}}],[\"socks5\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"sockinfo\",{\"1\":{\"955\":5}}],[\"socklen\",{\"1\":{\"950\":2,\"952\":1}}],[\"sockfd\",{\"1\":{\"950\":2,\"951\":1,\"952\":1}}],[\"sockaddr\",{\"1\":{\"949\":2,\"950\":3,\"952\":1,\"955\":1,\"962\":1}}],[\"socketio\",{\"0\":{\"849\":1},\"1\":{\"847\":2,\"848\":4,\"849\":1,\"1054\":1}}],[\"socket\",{\"0\":{\"947\":1,\"948\":1,\"1000\":1},\"1\":{\"702\":1,\"703\":2,\"950\":1,\"951\":3,\"952\":3,\"958\":1,\"962\":2,\"976\":1,\"977\":1,\"1054\":1}}],[\"sock\",{\"1\":{\"616\":2,\"984\":1}}],[\"solely\",{\"1\":{\"1497\":1}}],[\"solved\",{\"1\":{\"1053\":1,\"1054\":1,\"1056\":1}}],[\"solve\",{\"1\":{\"746\":1}}],[\"solution4\",{\"1\":{\"154\":1}}],[\"solutiondfs\",{\"1\":{\"51\":1}}],[\"solutionbinarysearch\",{\"1\":{\"33\":1}}],[\"solution2\",{\"1\":{\"10\":1,\"118\":1,\"299\":2}}],[\"solution\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":2,\"19\":1,\"32\":1,\"33\":1,\"34\":2,\"35\":2,\"36\":1,\"42\":3,\"43\":1,\"46\":1,\"47\":2,\"49\":1,\"52\":1,\"54\":1,\"56\":2,\"57\":1,\"59\":1,\"61\":1,\"62\":1,\"64\":1,\"74\":3,\"75\":4,\"76\":1,\"77\":2,\"79\":1,\"81\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"102\":2,\"103\":2,\"118\":2,\"120\":1,\"122\":1,\"124\":1,\"125\":1,\"130\":2,\"132\":1,\"134\":1,\"136\":1,\"138\":1,\"149\":1,\"150\":2,\"155\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"165\":2,\"166\":1,\"169\":1,\"184\":1,\"185\":1,\"186\":1,\"297\":1,\"299\":2,\"343\":1,\"400\":1,\"401\":2,\"465\":1,\"468\":1,\"479\":1,\"480\":4,\"481\":2,\"486\":2,\"491\":1,\"493\":1,\"495\":1,\"496\":1,\"499\":2,\"557\":1,\"1079\":1,\"1208\":1}}],[\"soa\",{\"1\":{\"706\":5,\"1402\":5}}],[\"softwar\",{\"1\":{\"1499\":1}}],[\"software\",{\"0\":{\"1028\":1},\"1\":{\"230\":1,\"321\":2,\"774\":1,\"1189\":1,\"1474\":4,\"1491\":1,\"1496\":2,\"1499\":1,\"1501\":5}}],[\"softmax\",{\"1\":{\"1185\":2,\"1212\":1}}],[\"softmax=1\",{\"1\":{\"1162\":1}}],[\"soft\",{\"0\":{\"1028\":1},\"1\":{\"692\":1,\"957\":1,\"1623\":1}}],[\"soon\",{\"1\":{\"549\":1,\"1075\":1,\"1198\":1,\"1507\":1}}],[\"sonmez\",{\"1\":{\"1028\":1}}],[\"son=son\",{\"1\":{\"424\":3}}],[\"son\",{\"1\":{\"424\":20}}],[\"sound1\",{\"1\":{\"776\":1}}],[\"sound\",{\"1\":{\"237\":1,\"776\":1,\"927\":1}}],[\"source上面说的\",{\"1\":{\"1145\":1}}],[\"sourcemgr\",{\"1\":{\"693\":1}}],[\"sourcefile\",{\"1\":{\"664\":2}}],[\"sources\",{\"0\":{\"1206\":1},\"1\":{\"270\":1,\"785\":1,\"1073\":1,\"1179\":1,\"1204\":1,\"1634\":3}}],[\"source\",{\"0\":{\"270\":1,\"1299\":1,\"1598\":1,\"1634\":1,\"1641\":1},\"1\":{\"236\":1,\"270\":3,\"275\":1,\"444\":1,\"445\":1,\"692\":2,\"774\":1,\"776\":3,\"785\":2,\"797\":1,\"854\":1,\"978\":1,\"1073\":2,\"1110\":1,\"1118\":1,\"1145\":1,\"1189\":2,\"1254\":1,\"1307\":1,\"1320\":3,\"1344\":2,\"1345\":1,\"1418\":4,\"1419\":2,\"1421\":2,\"1422\":1,\"1424\":1,\"1618\":1,\"1634\":1}}],[\"so\",{\"0\":{\"657\":1},\"1\":{\"236\":3,\"274\":3,\"308\":1,\"559\":1,\"601\":1,\"653\":1,\"657\":3,\"658\":5,\"659\":1,\"661\":1,\"662\":2,\"664\":1,\"696\":2,\"707\":7,\"820\":1,\"851\":1,\"890\":1,\"941\":2,\"1076\":1,\"1287\":8,\"1365\":1,\"1396\":2,\"1405\":6,\"1406\":1,\"1422\":1,\"1424\":3,\"1459\":2,\"1485\":1,\"1545\":1,\"1592\":1,\"1623\":5}}],[\"sorts\",{\"1\":{\"340\":1}}],[\"sortarraybyparity\",{\"1\":{\"169\":1}}],[\"sort\",{\"0\":{\"170\":1,\"172\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"304\":1,\"341\":1,\"910\":1},\"1\":{\"10\":2,\"11\":2,\"13\":1,\"15\":2,\"36\":1,\"169\":1,\"170\":1,\"172\":4,\"178\":1,\"179\":1,\"184\":1,\"243\":1,\"293\":3,\"331\":2,\"340\":2,\"341\":3,\"910\":1,\"933\":1,\"1627\":1}}],[\"sorted\",{\"0\":{\"341\":1},\"1\":{\"10\":3,\"173\":2,\"177\":2,\"185\":1,\"186\":3,\"304\":4,\"340\":2,\"341\":3,\"344\":1,\"492\":1}}],[\"解绑回调函数\",{\"1\":{\"1602\":1}}],[\"解锁\",{\"0\":{\"1269\":1}}],[\"解密得到69\",{\"1\":{\"1169\":1}}],[\"解之即成\",{\"1\":{\"1060\":1}}],[\"解码器的精度\",{\"1\":{\"1012\":1}}],[\"解码器结构\",{\"1\":{\"1012\":1}}],[\"解码与读取寄存器并行完成\",{\"1\":{\"245\":1}}],[\"解压缩一个经过\",{\"1\":{\"1454\":1}}],[\"解压缩文件\",{\"1\":{\"1454\":1}}],[\"解压缩\",{\"0\":{\"1454\":1},\"1\":{\"1454\":1}}],[\"解压缩内核\",{\"1\":{\"712\":1}}],[\"解压以后\",{\"1\":{\"1145\":1}}],[\"解压并且编译\",{\"1\":{\"770\":1}}],[\"解压\",{\"1\":{\"752\":1,\"1145\":1}}],[\"解压一般的\",{\"1\":{\"752\":1}}],[\"解决了哪些问题\",{\"1\":{\"1632\":1}}],[\"解决了可移植问题\",{\"1\":{\"1470\":1}}],[\"解决了单一室内定位系统存在的缺陷\",{\"1\":{\"1012\":1}}],[\"解决了这种场景下循环依赖的问题\",{\"1\":{\"881\":1}}],[\"解决同意网络内节点之间的通信\",{\"1\":{\"977\":1}}],[\"解决循环依赖主要是通过两个缓存\",{\"1\":{\"882\":1}}],[\"解决方案是\",{\"1\":{\"1449\":1}}],[\"解决方案是使用比较高级的剪枝\",{\"1\":{\"11\":1}}],[\"解决方案\",{\"1\":{\"1114\":1}}],[\"解决方法\",{\"1\":{\"988\":1,\"1113\":1}}],[\"解决方法是两端都发送一个\",{\"1\":{\"985\":1}}],[\"解决方法的比较优秀的解法是使用hash\",{\"1\":{\"480\":1}}],[\"解决\",{\"0\":{\"918\":1},\"1\":{\"275\":1}}],[\"解释图一\",{\"1\":{\"1132\":1}}],[\"解释器会报告一个错误\",{\"1\":{\"1212\":1}}],[\"解释器开销主要来自解释器循环\",{\"1\":{\"687\":1}}],[\"解释器可以先发挥作用\",{\"1\":{\"655\":1}}],[\"解释器与编译器\",{\"0\":{\"655\":1}}],[\"解释器被一个全局解释器锁保护着\",{\"1\":{\"277\":1}}],[\"解释\",{\"1\":{\"33\":1,\"84\":1,\"86\":2,\"120\":1,\"122\":1,\"124\":1,\"132\":1,\"136\":1,\"138\":1,\"156\":1,\"160\":1,\"164\":1,\"167\":1,\"169\":1,\"186\":1,\"641\":1,\"669\":1}}],[\"解析和误差消除算法是wifi室内定位的一个挑战点\",{\"1\":{\"1012\":1}}],[\"解析为\",{\"1\":{\"993\":1}}],[\"解析的输出如下所示\",{\"1\":{\"664\":1}}],[\"解析\",{\"0\":{\"997\":1},\"1\":{\"25\":1,\"160\":1,\"394\":1,\"1605\":1}}],[\"解法参考代码\",{\"1\":{\"493\":1}}],[\"解法3\",{\"0\":{\"154\":1,\"157\":1,\"497\":1}}],[\"解法2\",{\"0\":{\"153\":1,\"496\":1}}],[\"解法1\",{\"0\":{\"152\":1,\"495\":1}}],[\"解法给出了一个讨论情况然后分别处理的方法\",{\"1\":{\"49\":1}}],[\"解法一\",{\"0\":{\"159\":1}}],[\"解法一比解法二好很多\",{\"1\":{\"35\":1}}],[\"解法一如下\",{\"1\":{\"35\":1}}],[\"解法二如下\",{\"1\":{\"35\":1}}],[\"解法如下所示\",{\"1\":{\"75\":1}}],[\"解法如下\",{\"1\":{\"13\":1,\"76\":1,\"85\":1,\"155\":1}}],[\"解法\",{\"0\":{\"51\":1,\"52\":1,\"54\":1,\"56\":1,\"57\":1,\"59\":1,\"183\":1},\"1\":{\"8\":1,\"9\":1,\"15\":1,\"51\":1,\"56\":4,\"57\":1,\"75\":2,\"79\":1,\"80\":1,\"84\":1,\"144\":1}}],[\"解的一般性算法\",{\"1\":{\"5\":1}}],[\"商业转载请联系官方授权\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"75\":1,\"76\":1,\"86\":1,\"87\":1,\"92\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1}}],[\"著作权归领扣网络所有\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"75\":1,\"76\":1,\"86\":1,\"87\":1,\"92\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1}}],[\"ohmyzsh\",{\"1\":{\"1635\":4}}],[\"ohos\",{\"0\":{\"1328\":1,\"1332\":1},\"1\":{\"1320\":4,\"1327\":1,\"1328\":2}}],[\"ota\",{\"1\":{\"1374\":1}}],[\"otadexoptservice\",{\"1\":{\"1374\":1}}],[\"otherwise\",{\"1\":{\"237\":1,\"321\":1,\"361\":1,\"559\":1,\"1388\":1,\"1602\":1,\"1613\":1}}],[\"others\",{\"0\":{\"228\":1,\"1655\":1,\"1661\":1},\"1\":{\"237\":1,\"285\":2,\"1091\":1,\"1099\":1,\"1619\":1},\"2\":{\"1005\":1,\"1010\":1,\"1026\":1,\"1035\":1,\"1036\":1,\"1049\":1,\"1058\":1,\"1061\":1}}],[\"other\",{\"0\":{\"225\":1,\"1283\":1,\"1636\":1},\"1\":{\"87\":2,\"234\":1,\"237\":3,\"245\":1,\"261\":1,\"360\":1,\"543\":1,\"557\":1,\"559\":1,\"562\":1,\"580\":1,\"777\":1,\"941\":1,\"1079\":2,\"1130\":1,\"1189\":1,\"1208\":1,\"1259\":1,\"1388\":1,\"1424\":1,\"1475\":1,\"1483\":2,\"1496\":1,\"1499\":1,\"1623\":1}}],[\"oj\",{\"1\":{\"707\":1,\"1405\":1}}],[\"ojluni\",{\"1\":{\"705\":4,\"1400\":4}}],[\"occlusions\",{\"1\":{\"1130\":1}}],[\"occurring\",{\"1\":{\"600\":1}}],[\"occurrence\",{\"1\":{\"552\":1,\"556\":1}}],[\"occurrences\",{\"1\":{\"542\":2,\"543\":1,\"546\":1,\"552\":2,\"556\":4,\"562\":1}}],[\"occurs\",{\"1\":{\"256\":1,\"584\":1}}],[\"occur\",{\"1\":{\"217\":1,\"236\":1,\"237\":1,\"256\":1,\"321\":1,\"584\":1,\"599\":1,\"601\":1,\"1124\":1,\"1620\":1}}],[\"ocaml\",{\"1\":{\"692\":1}}],[\"october\",{\"0\":{\"1055\":1},\"1\":{\"907\":2}}],[\"octet\",{\"1\":{\"760\":1}}],[\"oct\",{\"1\":{\"664\":1,\"905\":2,\"908\":1,\"1055\":13}}],[\"o4\",{\"1\":{\"562\":5}}],[\"owns\",{\"1\":{\"1545\":1}}],[\"owner\",{\"1\":{\"1307\":1,\"1534\":1}}],[\"own\",{\"1\":{\"492\":1,\"988\":1,\"1071\":1,\"1099\":1,\"1487\":1,\"1498\":1,\"1623\":2}}],[\"oom\",{\"1\":{\"881\":1}}],[\"oops\",{\"1\":{\"676\":1}}],[\"oop\",{\"1\":{\"675\":1}}],[\"oo\",{\"0\":{\"416\":1},\"1\":{\"691\":1}}],[\"oa\",{\"1\":{\"412\":1,\"1248\":1}}],[\"oat\",{\"0\":{\"1372\":1,\"1373\":1},\"1\":{\"326\":1,\"707\":1,\"1371\":2,\"1373\":1,\"1406\":1}}],[\"oldval\",{\"1\":{\"926\":2}}],[\"older\",{\"1\":{\"780\":1,\"1509\":2}}],[\"oldlist\",{\"1\":{\"393\":2,\"402\":3}}],[\"old\",{\"1\":{\"308\":1,\"776\":1,\"1170\":1,\"1534\":4}}],[\"oldsite\",{\"1\":{\"108\":1}}],[\"oss\",{\"1\":{\"1355\":1}}],[\"oscillator\",{\"1\":{\"1125\":1}}],[\"osi的下三层的主要任务是数据传输\",{\"1\":{\"977\":1}}],[\"osi\",{\"1\":{\"977\":2}}],[\"os\",{\"1\":{\"288\":1,\"298\":2,\"347\":1,\"348\":3,\"349\":3,\"351\":1,\"352\":4,\"702\":1,\"703\":1,\"858\":2,\"1185\":2,\"1216\":2,\"1219\":1,\"1333\":2,\"1464\":2}}],[\"omit\",{\"1\":{\"236\":1}}],[\"obstacles\",{\"1\":{\"1130\":1}}],[\"obs\",{\"1\":{\"640\":1,\"648\":1}}],[\"observe\",{\"1\":{\"1389\":1}}],[\"observed\",{\"1\":{\"557\":1,\"586\":1}}],[\"observation\",{\"0\":{\"1122\":1},\"1\":{\"547\":1,\"1208\":1}}],[\"obtained\",{\"1\":{\"1202\":1}}],[\"obtain\",{\"1\":{\"564\":1,\"1329\":4,\"1623\":1}}],[\"objdump\",{\"0\":{\"1462\":1},\"1\":{\"1456\":1,\"1462\":3,\"1463\":3,\"1464\":1}}],[\"objct\",{\"1\":{\"1383\":1}}],[\"obj\",{\"1\":{\"435\":1,\"508\":5,\"903\":1,\"1333\":3,\"1459\":1}}],[\"objections\",{\"1\":{\"1124\":1}}],[\"objectives\",{\"0\":{\"1009\":1}}],[\"objectid\",{\"1\":{\"789\":1}}],[\"objects\",{\"1\":{\"675\":2,\"677\":1,\"1385\":4,\"1388\":4,\"1389\":1,\"1441\":1,\"1445\":8,\"1448\":4,\"1449\":4}}],[\"object>\",{\"1\":{\"394\":1}}],[\"object\",{\"0\":{\"675\":1,\"1321\":1,\"1383\":1},\"1\":{\"88\":1,\"146\":1,\"408\":3,\"421\":3,\"422\":1,\"424\":4,\"425\":1,\"427\":3,\"430\":3,\"431\":4,\"432\":1,\"433\":5,\"434\":1,\"435\":1,\"436\":3,\"508\":1,\"509\":1,\"640\":1,\"664\":5,\"674\":1,\"675\":6,\"676\":14,\"677\":3,\"681\":7,\"682\":8,\"703\":2,\"707\":4,\"850\":1,\"927\":1,\"1150\":1,\"1151\":1,\"1153\":4,\"1155\":4,\"1162\":1,\"1191\":1,\"1308\":1,\"1320\":2,\"1333\":3,\"1345\":1,\"1381\":5,\"1383\":10,\"1388\":6,\"1389\":1,\"1405\":4,\"1459\":1,\"1629\":3}}],[\"obvious\",{\"1\":{\"236\":1,\"1060\":2}}],[\"ourself\",{\"1\":{\"1545\":1}}],[\"ourselves\",{\"1\":{\"562\":1}}],[\"our\",{\"1\":{\"236\":1,\"492\":1,\"543\":2,\"562\":1,\"564\":1,\"565\":1,\"573\":2,\"599\":1,\"600\":2,\"1072\":1,\"1202\":1}}],[\"outlines\",{\"0\":{\"1503\":1}}],[\"outavail\",{\"1\":{\"1301\":1}}],[\"outs\",{\"1\":{\"693\":5}}],[\"outcome\",{\"1\":{\"558\":1}}],[\"outcomes\",{\"1\":{\"552\":1,\"558\":1}}],[\"outperforms\",{\"1\":{\"556\":1}}],[\"outperform\",{\"1\":{\"543\":1}}],[\"outputstreamwriter\",{\"1\":{\"703\":1}}],[\"outputs\",{\"1\":{\"245\":1}}],[\"output\",{\"0\":{\"308\":1,\"503\":1},\"1\":{\"182\":1,\"245\":13,\"298\":1,\"308\":2,\"309\":1,\"403\":2,\"502\":1,\"504\":1,\"657\":1,\"659\":1,\"661\":1,\"662\":1,\"750\":1,\"986\":1,\"1142\":1,\"1161\":1,\"1185\":4,\"1216\":1,\"1217\":1,\"1219\":1,\"1221\":2,\"1320\":2,\"1464\":1}}],[\"outof\",{\"1\":{\"542\":1}}],[\"outer\",{\"1\":{\"418\":3}}],[\"out\",{\"0\":{\"557\":1},\"1\":{\"87\":3,\"243\":1,\"245\":1,\"256\":1,\"320\":2,\"341\":1,\"373\":1,\"390\":2,\"542\":1,\"543\":4,\"547\":1,\"549\":9,\"557\":5,\"558\":1,\"564\":1,\"568\":1,\"573\":1,\"600\":1,\"681\":1,\"682\":1,\"759\":1,\"786\":1,\"956\":2,\"1004\":1,\"1099\":1,\"1299\":2,\"1314\":1,\"1419\":2,\"1445\":3,\"1446\":2,\"1544\":1,\"1545\":2}}],[\"overseas\",{\"1\":{\"1623\":1}}],[\"overlay\",{\"1\":{\"1287\":1}}],[\"overlapping\",{\"0\":{\"314\":1},\"1\":{\"237\":1,\"314\":1}}],[\"overlapped\",{\"1\":{\"234\":1,\"237\":1}}],[\"overlap\",{\"1\":{\"236\":1,\"314\":1}}],[\"overfeat算法的思路是\",{\"1\":{\"1153\":1}}],[\"overflow\",{\"1\":{\"454\":1,\"984\":1}}],[\"overview\",{\"0\":{\"1091\":1,\"1291\":1,\"1326\":1,\"1379\":1,\"1385\":1,\"1588\":1},\"1\":{\"1075\":1,\"1325\":1}}],[\"override\",{\"1\":{\"897\":1,\"1219\":1,\"1498\":1}}],[\"overtime\",{\"1\":{\"748\":1}}],[\"overestimated\",{\"1\":{\"562\":1}}],[\"over\",{\"1\":{\"420\":1,\"492\":1,\"542\":2,\"556\":2,\"1155\":1,\"1208\":1,\"1507\":1,\"1509\":1,\"1623\":1}}],[\"overhead\",{\"1\":{\"227\":2,\"557\":8,\"558\":1,\"1353\":1}}],[\"overall\",{\"1\":{\"194\":1,\"227\":1,\"592\":1}}],[\"opler\",{\"1\":{\"1501\":2}}],[\"opt\",{\"1\":{\"904\":1,\"962\":1}}],[\"opt<std\",{\"1\":{\"693\":1}}],[\"optnone\",{\"1\":{\"692\":2}}],[\"option\",{\"0\":{\"1430\":1},\"1\":{\"748\":1,\"751\":2,\"980\":1,\"1320\":2,\"1328\":4,\"1365\":3}}],[\"options\",{\"1\":{\"748\":1,\"751\":1,\"794\":1,\"891\":2,\"930\":1,\"1178\":1,\"1240\":1,\"1259\":1,\"1365\":3,\"1366\":7,\"1367\":1,\"1431\":1}}],[\"optional\",{\"1\":{\"42\":2,\"43\":1,\"45\":1,\"46\":1,\"49\":1,\"495\":1,\"496\":2,\"499\":2,\"1476\":1,\"1493\":1,\"1495\":1}}],[\"optimal\",{\"1\":{\"559\":1}}],[\"optimization\",{\"1\":{\"557\":1}}],[\"optimizations\",{\"1\":{\"274\":1}}],[\"optimize\",{\"1\":{\"256\":1}}],[\"opposed\",{\"1\":{\"558\":1}}],[\"opportunity\",{\"1\":{\"557\":1,\"558\":1}}],[\"opportunities\",{\"1\":{\"557\":2}}],[\"ops\",{\"0\":{\"1593\":2},\"1\":{\"356\":2,\"1590\":2,\"1593\":1,\"1594\":3,\"1600\":3,\"1611\":3}}],[\"opsnssl\",{\"1\":{\"274\":1}}],[\"opeencoding=\",{\"1\":{\"1169\":1}}],[\"ope\",{\"1\":{\"1166\":1}}],[\"opendriver\",{\"1\":{\"1307\":2}}],[\"opencv\",{\"0\":{\"1189\":1},\"1\":{\"1189\":4,\"1198\":1}}],[\"openapi\",{\"1\":{\"1094\":2}}],[\"opened\",{\"1\":{\"988\":1}}],[\"openresty\",{\"0\":{\"769\":1},\"1\":{\"770\":2}}],[\"opennebula\",{\"1\":{\"725\":1}}],[\"openning\",{\"1\":{\"465\":1}}],[\"openzygotesocketifneeded\",{\"1\":{\"703\":3}}],[\"openjdk\",{\"1\":{\"676\":1,\"681\":2,\"682\":1,\"705\":2,\"1400\":2}}],[\"openssh\",{\"1\":{\"744\":1}}],[\"openssl=\",{\"1\":{\"274\":1}}],[\"openssl\",{\"0\":{\"274\":1},\"1\":{\"274\":10,\"275\":1}}],[\"openstack\",{\"1\":{\"641\":2,\"724\":1,\"725\":1}}],[\"opens\",{\"1\":{\"558\":1}}],[\"opening\",{\"1\":{\"465\":1}}],[\"open\",{\"1\":{\"270\":1,\"289\":3,\"298\":2,\"355\":1,\"356\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":5,\"387\":1,\"388\":1,\"956\":1,\"957\":1,\"985\":1,\"1009\":1,\"1074\":1,\"1076\":2,\"1189\":2,\"1216\":1,\"1221\":2,\"1307\":4,\"1618\":2}}],[\"operand2\",{\"1\":{\"514\":3}}],[\"operand1\",{\"1\":{\"514\":2}}],[\"operand\",{\"1\":{\"502\":2,\"504\":1,\"520\":1,\"548\":1}}],[\"operands\",{\"1\":{\"245\":2,\"548\":1,\"691\":1}}],[\"operating\",{\"1\":{\"250\":1,\"256\":2,\"606\":1,\"1143\":1,\"1501\":2,\"1536\":2,\"1616\":1}}],[\"operation\",{\"0\":{\"400\":1,\"1621\":1},\"1\":{\"236\":1,\"245\":12,\"321\":1,\"492\":1,\"552\":1,\"793\":1,\"911\":2,\"1509\":2}}],[\"operations\",{\"1\":{\"176\":1,\"227\":3,\"235\":4,\"236\":1,\"245\":2,\"492\":1,\"552\":1,\"556\":1,\"790\":1,\"1307\":1,\"1620\":1}}],[\"operates\",{\"1\":{\"245\":1}}],[\"operate\",{\"1\":{\"236\":1,\"237\":1}}],[\"operators\",{\"0\":{\"820\":1},\"1\":{\"820\":2}}],[\"operator\",{\"1\":{\"179\":1,\"793\":1}}],[\"opcode\",{\"1\":{\"245\":1,\"315\":3}}],[\"op\",{\"1\":{\"245\":2,\"955\":2,\"1185\":5,\"1212\":6,\"1217\":4}}],[\"onzygoteinit\",{\"1\":{\"1293\":1}}],[\"onchiprom\",{\"1\":{\"1501\":1}}],[\"once说的是只需要一次cnn运算\",{\"1\":{\"1151\":1}}],[\"once\",{\"1\":{\"1150\":1,\"1151\":1,\"1496\":1,\"1507\":1,\"1545\":1}}],[\"onclick=\",{\"1\":{\"892\":3}}],[\"onqqmessage\",{\"1\":{\"1094\":1}}],[\"onnblock\",{\"1\":{\"956\":1}}],[\"on用于绑定事件\",{\"1\":{\"938\":1}}],[\"online\",{\"1\":{\"1515\":1,\"1623\":1}}],[\"onload\",{\"1\":{\"707\":2,\"1405\":2}}],[\"onlyusealphabet\",{\"1\":{\"1094\":1}}],[\"only\",{\"0\":{\"729\":1},\"1\":{\"167\":1,\"235\":1,\"236\":1,\"243\":1,\"245\":2,\"321\":2,\"542\":1,\"543\":2,\"550\":1,\"553\":1,\"556\":1,\"557\":4,\"558\":5,\"559\":4,\"562\":1,\"573\":1,\"600\":1,\"727\":1,\"751\":1,\"777\":1,\"785\":1,\"1060\":1,\"1124\":1,\"1150\":1,\"1151\":2,\"1189\":1,\"1483\":1,\"1498\":1,\"1501\":1,\"1502\":1,\"1508\":1,\"1509\":1,\"1545\":1,\"1607\":1,\"1613\":1,\"1620\":1,\"1623\":1}}],[\"on\",{\"0\":{\"545\":1,\"557\":1,\"780\":1,\"938\":1,\"1290\":1,\"1635\":1},\"1\":{\"155\":1,\"193\":2,\"194\":1,\"204\":2,\"227\":1,\"235\":1,\"236\":3,\"237\":3,\"241\":2,\"243\":1,\"245\":9,\"271\":1,\"465\":1,\"542\":3,\"543\":2,\"548\":3,\"549\":1,\"550\":1,\"557\":8,\"558\":5,\"559\":6,\"562\":2,\"566\":1,\"572\":4,\"580\":1,\"599\":2,\"604\":1,\"606\":3,\"621\":1,\"748\":1,\"774\":1,\"775\":2,\"783\":1,\"793\":1,\"798\":1,\"807\":1,\"937\":1,\"938\":2,\"939\":1,\"940\":2,\"941\":4,\"962\":1,\"978\":1,\"984\":1,\"1055\":1,\"1076\":1,\"1120\":1,\"1126\":1,\"1142\":1,\"1143\":2,\"1150\":1,\"1185\":1,\"1189\":1,\"1196\":1,\"1201\":1,\"1208\":1,\"1209\":1,\"1219\":2,\"1259\":2,\"1269\":1,\"1352\":1,\"1366\":2,\"1376\":1,\"1453\":4,\"1474\":1,\"1475\":1,\"1492\":1,\"1495\":1,\"1496\":1,\"1507\":1,\"1508\":1,\"1509\":3,\"1545\":2,\"1551\":1,\"1570\":2,\"1571\":1,\"1592\":1,\"1609\":1,\"1611\":1,\"1613\":1,\"1623\":6,\"1640\":1}}],[\"oneway\",{\"1\":{\"1333\":3}}],[\"onenter\",{\"1\":{\"938\":1}}],[\"oneshot\",{\"0\":{\"1542\":1,\"1543\":1,\"1544\":1},\"1\":{\"1514\":1,\"1541\":1,\"1542\":12,\"1543\":7,\"1544\":1,\"1545\":5}}],[\"ones\",{\"1\":{\"120\":1,\"576\":1}}],[\"one\",{\"1\":{\"120\":3,\"126\":2,\"177\":1,\"217\":1,\"234\":3,\"235\":1,\"236\":7,\"245\":2,\"308\":1,\"361\":1,\"465\":1,\"547\":1,\"549\":1,\"556\":1,\"557\":6,\"559\":3,\"562\":1,\"781\":1,\"890\":1,\"1052\":1,\"1060\":3,\"1071\":1,\"1079\":1,\"1125\":1,\"1143\":2,\"1153\":2,\"1185\":1,\"1192\":1,\"1219\":1,\"1307\":1,\"1333\":1,\"1475\":1,\"1476\":1,\"1508\":2,\"1545\":2,\"1592\":1,\"1623\":3}}],[\"o\",{\"0\":{\"280\":1,\"306\":1,\"1215\":1},\"1\":{\"56\":2,\"77\":2,\"95\":2,\"96\":1,\"98\":2,\"153\":1,\"176\":1,\"177\":2,\"225\":1,\"396\":1,\"414\":1,\"492\":1,\"692\":2,\"693\":1,\"715\":1,\"956\":2,\"959\":1,\"1024\":3,\"1127\":1,\"1253\":1,\"1307\":1,\"1440\":38,\"1441\":26,\"1445\":14,\"1446\":3,\"1448\":5,\"1449\":8,\"1459\":5,\"1462\":3,\"1463\":4,\"1464\":1,\"1509\":1}}],[\"origin\",{\"1\":{\"1241\":1,\"1246\":3,\"1250\":2,\"1253\":9,\"1483\":1}}],[\"originally\",{\"1\":{\"1508\":1}}],[\"original\",{\"1\":{\"677\":1}}],[\"orig\",{\"1\":{\"1145\":1}}],[\"oriented\",{\"1\":{\"976\":1}}],[\"orange\",{\"1\":{\"897\":2}}],[\"orm\",{\"0\":{\"818\":1},\"1\":{\"820\":2}}],[\"orcal\",{\"1\":{\"789\":1}}],[\"ordinate\",{\"1\":{\"1202\":1}}],[\"ord\",{\"1\":{\"390\":1,\"1189\":1}}],[\"ordered\",{\"1\":{\"1534\":1,\"1626\":4}}],[\"ordereddict\",{\"0\":{\"300\":1,\"406\":1},\"1\":{\"301\":3,\"303\":4,\"304\":2,\"406\":4,\"460\":1}}],[\"order\",{\"0\":{\"488\":1,\"557\":1},\"1\":{\"47\":1,\"186\":6,\"243\":1,\"321\":1,\"341\":2,\"406\":1,\"424\":1,\"427\":1,\"492\":2,\"542\":3,\"543\":9,\"545\":1,\"549\":10,\"557\":3,\"562\":1,\"564\":1,\"568\":1,\"751\":1,\"1126\":1,\"1166\":1,\"1476\":1}}],[\"org↩︎\",{\"1\":{\"317\":1}}],[\"organization\",{\"1\":{\"194\":1,\"203\":1,\"230\":1,\"1153\":1}}],[\"organized\",{\"1\":{\"194\":1}}],[\"org\",{\"1\":{\"108\":1,\"606\":2,\"681\":1,\"682\":1,\"766\":1,\"785\":1,\"848\":1,\"918\":2,\"1073\":2,\"1435\":1,\"1626\":2,\"1634\":4}}],[\"or\",{\"1\":{\"15\":2,\"20\":2,\"21\":2,\"23\":1,\"28\":1,\"33\":1,\"43\":1,\"46\":1,\"51\":2,\"52\":1,\"64\":1,\"76\":4,\"77\":1,\"91\":2,\"108\":1,\"114\":1,\"115\":1,\"122\":2,\"138\":2,\"150\":2,\"177\":2,\"194\":2,\"195\":2,\"196\":1,\"203\":3,\"204\":2,\"211\":1,\"227\":9,\"234\":1,\"235\":4,\"237\":1,\"243\":2,\"245\":3,\"256\":2,\"270\":1,\"314\":2,\"316\":1,\"321\":5,\"341\":2,\"343\":2,\"361\":3,\"459\":1,\"478\":1,\"495\":1,\"499\":1,\"538\":1,\"546\":1,\"547\":1,\"548\":1,\"550\":1,\"552\":2,\"556\":1,\"558\":3,\"559\":1,\"573\":1,\"576\":3,\"599\":1,\"600\":1,\"601\":1,\"602\":2,\"605\":1,\"676\":1,\"692\":1,\"749\":1,\"751\":1,\"759\":2,\"780\":1,\"785\":1,\"793\":3,\"820\":2,\"851\":1,\"858\":1,\"907\":1,\"941\":1,\"991\":1,\"992\":1,\"1031\":1,\"1071\":1,\"1073\":1,\"1079\":3,\"1091\":2,\"1099\":5,\"1105\":1,\"1118\":2,\"1121\":1,\"1124\":1,\"1143\":1,\"1153\":1,\"1202\":1,\"1219\":1,\"1239\":1,\"1275\":1,\"1341\":1,\"1376\":2,\"1381\":2,\"1383\":1,\"1388\":3,\"1389\":1,\"1419\":1,\"1448\":1,\"1476\":1,\"1485\":3,\"1487\":1,\"1494\":1,\"1496\":2,\"1501\":3,\"1507\":1,\"1508\":2,\"1520\":1,\"1523\":1,\"1542\":1,\"1611\":1,\"1620\":2,\"1623\":1}}],[\"ofdm\",{\"1\":{\"1020\":1,\"1206\":1,\"1209\":1}}],[\"office\",{\"1\":{\"1636\":1}}],[\"official\",{\"1\":{\"848\":2,\"888\":1,\"1079\":1}}],[\"off\",{\"1\":{\"465\":1,\"562\":1,\"681\":2,\"682\":2,\"1228\":1,\"1231\":1,\"1259\":1,\"1269\":1,\"1278\":1,\"1353\":1,\"1463\":1,\"1464\":2,\"1474\":1,\"1509\":1}}],[\"offsets\",{\"1\":{\"1320\":4,\"1333\":2,\"1341\":2,\"1345\":2}}],[\"offset\",{\"0\":{\"260\":1,\"262\":1},\"1\":{\"198\":2,\"205\":3,\"245\":1,\"260\":1,\"262\":2,\"664\":1,\"1125\":1,\"1206\":4,\"1207\":1,\"1208\":1,\"1344\":6,\"1591\":3}}],[\"offers\",{\"1\":{\"1424\":1}}],[\"offer\",{\"1\":{\"165\":1,\"271\":1}}],[\"often\",{\"1\":{\"193\":1,\"235\":1,\"237\":1,\"243\":1,\"256\":1,\"271\":1,\"543\":1,\"584\":1,\"600\":1,\"992\":1,\"1060\":1,\"1536\":1}}],[\"of\",{\"0\":{\"237\":1,\"238\":1,\"241\":1,\"245\":1,\"459\":1,\"557\":1,\"571\":1,\"1060\":1,\"1177\":1,\"1206\":1,\"1310\":1,\"1383\":1,\"1481\":1,\"1613\":1},\"1\":{\"8\":1,\"58\":1,\"62\":1,\"76\":1,\"97\":1,\"108\":1,\"164\":1,\"167\":1,\"177\":1,\"182\":1,\"191\":2,\"193\":6,\"194\":32,\"196\":2,\"203\":5,\"204\":7,\"212\":3,\"227\":1,\"233\":2,\"234\":4,\"235\":1,\"236\":15,\"237\":9,\"241\":1,\"243\":6,\"244\":2,\"245\":15,\"253\":1,\"256\":5,\"266\":1,\"291\":2,\"297\":1,\"303\":2,\"308\":2,\"321\":7,\"340\":1,\"341\":4,\"342\":1,\"361\":11,\"366\":1,\"373\":1,\"396\":1,\"401\":2,\"406\":3,\"408\":4,\"411\":1,\"438\":2,\"458\":2,\"465\":5,\"492\":2,\"502\":1,\"509\":2,\"542\":5,\"543\":10,\"545\":2,\"546\":2,\"547\":2,\"548\":3,\"549\":13,\"550\":1,\"551\":1,\"552\":5,\"555\":1,\"556\":7,\"557\":20,\"558\":9,\"559\":15,\"562\":6,\"564\":2,\"565\":3,\"568\":2,\"572\":4,\"573\":3,\"575\":3,\"576\":3,\"580\":2,\"582\":1,\"584\":3,\"599\":1,\"600\":6,\"604\":1,\"606\":3,\"658\":1,\"664\":1,\"675\":2,\"676\":3,\"677\":2,\"682\":2,\"687\":1,\"746\":1,\"749\":2,\"750\":1,\"751\":4,\"775\":2,\"776\":1,\"778\":1,\"786\":1,\"793\":1,\"794\":1,\"796\":1,\"820\":5,\"850\":1,\"851\":1,\"890\":1,\"891\":1,\"930\":1,\"940\":1,\"970\":1,\"988\":2,\"1000\":1,\"1021\":1,\"1054\":1,\"1056\":1,\"1060\":3,\"1075\":3,\"1079\":2,\"1084\":1,\"1099\":1,\"1118\":4,\"1120\":1,\"1123\":3,\"1124\":2,\"1125\":1,\"1142\":1,\"1143\":1,\"1153\":2,\"1159\":1,\"1186\":1,\"1189\":5,\"1191\":1,\"1201\":2,\"1202\":3,\"1203\":3,\"1204\":2,\"1207\":1,\"1219\":5,\"1228\":3,\"1239\":1,\"1263\":1,\"1278\":1,\"1345\":2,\"1381\":2,\"1383\":2,\"1385\":1,\"1386\":1,\"1389\":1,\"1419\":2,\"1424\":1,\"1425\":1,\"1428\":2,\"1463\":7,\"1464\":9,\"1474\":1,\"1475\":1,\"1476\":3,\"1479\":1,\"1483\":3,\"1484\":1,\"1485\":3,\"1486\":2,\"1487\":8,\"1491\":2,\"1492\":3,\"1493\":2,\"1494\":1,\"1495\":4,\"1496\":4,\"1498\":3,\"1499\":4,\"1501\":6,\"1507\":1,\"1508\":3,\"1509\":5,\"1523\":2,\"1536\":5,\"1545\":1,\"1570\":1,\"1571\":1,\"1573\":5,\"1591\":7,\"1592\":7,\"1597\":1,\"1602\":1,\"1605\":1,\"1609\":1,\"1611\":5,\"1613\":2,\"1619\":1,\"1620\":2,\"1623\":42,\"1645\":1}}],[\"ok\",{\"1\":{\"6\":1,\"118\":1,\"252\":1,\"408\":1,\"432\":2,\"681\":1,\"706\":1,\"999\":1,\"1333\":1,\"1365\":1,\"1403\":1,\"1419\":1}}],[\"pə\",{\"1\":{\"1507\":1}}],[\"png\",{\"1\":{\"1161\":1}}],[\"pjreddie\",{\"1\":{\"1161\":2,\"1162\":1}}],[\"pwd\",{\"1\":{\"1145\":2}}],[\"p>\",{\"1\":{\"892\":1,\"896\":1,\"940\":1,\"1004\":1}}],[\"pk\",{\"1\":{\"865\":1}}],[\"pkgdatainfomap\",{\"1\":{\"702\":2}}],[\"pkl\",{\"1\":{\"298\":1}}],[\"pgoff\",{\"1\":{\"1344\":5}}],[\"pg123456\",{\"1\":{\"609\":1}}],[\"pg\",{\"1\":{\"609\":1}}],[\"pgadamin\",{\"1\":{\"609\":1}}],[\"pgadmin\",{\"1\":{\"609\":2}}],[\"pgadmin4\",{\"1\":{\"609\":3}}],[\"pgdata\",{\"1\":{\"609\":1}}],[\"pp\",{\"1\":{\"606\":2}}],[\"ppn\",{\"1\":{\"261\":1}}],[\"psutil\",{\"1\":{\"1633\":1}}],[\"psychological\",{\"1\":{\"1501\":1}}],[\"psys\",{\"1\":{\"1481\":3}}],[\"psci\",{\"1\":{\"1474\":4,\"1496\":2,\"1498\":3}}],[\"psh\",{\"1\":{\"978\":1}}],[\"ps\",{\"1\":{\"624\":1,\"758\":1,\"1144\":1,\"1231\":2,\"1279\":1,\"1571\":1}}],[\"pseudo\",{\"1\":{\"558\":1}}],[\"ps1\",{\"1\":{\"367\":2}}],[\"pvalue​\",{\"1\":{\"547\":1}}],[\"pmmu\",{\"1\":{\"1484\":1}}],[\"pms\",{\"1\":{\"1374\":1}}],[\"pm\",{\"0\":{\"1614\":1},\"1\":{\"1275\":1,\"1605\":3}}],[\"pmtu\",{\"1\":{\"979\":1}}],[\"pmccntr\",{\"1\":{\"510\":1}}],[\"pmu\",{\"0\":{\"510\":1},\"1\":{\"510\":1}}],[\"pton\",{\"1\":{\"949\":1}}],[\"ptrdiff\",{\"1\":{\"1471\":2}}],[\"ptr<module>\",{\"1\":{\"693\":1}}],[\"ptrs\",{\"1\":{\"509\":4}}],[\"ptr\",{\"0\":{\"1380\":1},\"1\":{\"507\":2,\"509\":2,\"955\":5,\"1198\":1,\"1307\":1,\"1312\":3,\"1315\":5,\"1316\":5,\"1320\":8,\"1333\":3,\"1345\":3,\"1380\":3,\"1542\":2,\"1573\":1,\"1611\":1}}],[\"ptest\",{\"1\":{\"372\":1}}],[\"pbd\",{\"1\":{\"1020\":2,\"1024\":1,\"1206\":1}}],[\"pb\",{\"1\":{\"459\":5,\"1250\":1}}],[\"p1\",{\"1\":{\"418\":1,\"892\":3}}],[\"pdd↩︎\",{\"1\":{\"1502\":1}}],[\"pdd\",{\"1\":{\"1474\":3,\"1496\":1,\"1498\":1}}],[\"pdf文件\",{\"1\":{\"1248\":1}}],[\"pdf\",{\"1\":{\"1079\":3,\"1127\":2,\"1179\":1,\"1248\":1}}],[\"pdp\",{\"1\":{\"1012\":1,\"1020\":1,\"1024\":1,\"1201\":2,\"1202\":2,\"1203\":1}}],[\"pd\",{\"1\":{\"329\":3,\"331\":1}}],[\"pdbr\",{\"1\":{\"252\":1}}],[\"pl011\",{\"1\":{\"1486\":1,\"1492\":1,\"1499\":1}}],[\"plug\",{\"1\":{\"1092\":1}}],[\"pluginlist\",{\"1\":{\"1259\":1}}],[\"pluginupdate\",{\"1\":{\"1259\":1}}],[\"pluginclean\",{\"1\":{\"1259\":1}}],[\"plugin\",{\"0\":{\"1092\":1,\"1101\":1,\"1107\":1,\"1259\":1},\"1\":{\"776\":1,\"778\":1,\"785\":1,\"1054\":1,\"1101\":3,\"1258\":1,\"1259\":7}}],[\"plugins\",{\"1\":{\"750\":2,\"1101\":1}}],[\"plenty\",{\"1\":{\"746\":1}}],[\"please\",{\"1\":{\"309\":1,\"347\":1,\"1075\":1,\"1427\":1}}],[\"pl\",{\"1\":{\"517\":1}}],[\"pldl2strm\",{\"1\":{\"507\":1}}],[\"plans\",{\"1\":{\"1620\":1}}],[\"planned\",{\"1\":{\"1523\":2}}],[\"plan\",{\"0\":{\"1063\":1}}],[\"plain\",{\"1\":{\"936\":1,\"941\":1,\"999\":1}}],[\"platforms\",{\"1\":{\"776\":1,\"1474\":1,\"1476\":1,\"1623\":3}}],[\"platform\",{\"0\":{\"1486\":1,\"1492\":1,\"1499\":1},\"1\":{\"326\":1,\"1240\":1,\"1474\":2,\"1475\":3,\"1479\":1,\"1481\":2,\"1487\":4,\"1490\":1,\"1492\":4,\"1493\":4,\"1494\":3,\"1495\":3,\"1496\":3,\"1497\":1,\"1498\":1,\"1499\":2,\"1592\":1,\"1611\":1,\"1623\":1}}],[\"platesbetweencandles\",{\"1\":{\"150\":3}}],[\"plarform\",{\"0\":{\"326\":1}}],[\"play\",{\"1\":{\"236\":1}}],[\"placeholder=\",{\"1\":{\"940\":1,\"1004\":1}}],[\"placeholder\",{\"1\":{\"308\":1,\"1142\":1,\"1185\":2,\"1212\":7}}],[\"placed\",{\"1\":{\"245\":3,\"759\":1,\"776\":1,\"1079\":1,\"1479\":1}}],[\"places\",{\"1\":{\"236\":1,\"245\":1,\"1421\":1,\"1481\":1}}],[\"place\",{\"1\":{\"235\":1,\"245\":1,\"340\":1,\"702\":1,\"1419\":1,\"1623\":1}}],[\"p272\",{\"1\":{\"692\":1}}],[\"p271\",{\"1\":{\"692\":1}}],[\"p270\",{\"1\":{\"692\":1}}],[\"p2\",{\"1\":{\"289\":3}}],[\"phnum\",{\"1\":{\"1464\":1}}],[\"phentsize\",{\"1\":{\"1464\":1}}],[\"phoff\",{\"1\":{\"1464\":2}}],[\"phony\",{\"1\":{\"1445\":3,\"1448\":1,\"1449\":1}}],[\"phone\",{\"1\":{\"8\":1}}],[\"photo\",{\"1\":{\"1153\":1}}],[\"phases\",{\"0\":{\"1325\":1,\"1326\":1,\"1387\":1}}],[\"phased\",{\"1\":{\"1126\":1}}],[\"phase\",{\"0\":{\"1208\":1,\"1327\":1,\"1330\":1,\"1331\":1,\"1334\":1,\"1388\":1,\"1389\":1},\"1\":{\"1056\":1,\"1118\":1,\"1123\":1,\"1124\":1,\"1125\":2,\"1143\":1,\"1204\":1,\"1206\":2,\"1208\":2,\"1326\":12,\"1328\":1,\"1330\":1,\"1333\":2,\"1380\":5,\"1381\":5,\"1385\":1,\"1388\":8,\"1389\":5}}],[\"pht\",{\"1\":{\"559\":1}}],[\"physical\",{\"1\":{\"250\":2,\"255\":4,\"256\":2,\"261\":2,\"557\":2,\"1484\":1,\"1491\":1,\"1498\":1,\"1499\":1}}],[\"physically\",{\"1\":{\"250\":1,\"1475\":1,\"1501\":1}}],[\"pu\",{\"1\":{\"1591\":2}}],[\"puidle\",{\"1\":{\"1532\":1}}],[\"purchase\",{\"1\":{\"1623\":2}}],[\"purely\",{\"1\":{\"1551\":1}}],[\"pure\",{\"1\":{\"1551\":2,\"1552\":2}}],[\"purity\",{\"1\":{\"1060\":1}}],[\"purpose\",{\"1\":{\"237\":1,\"245\":1,\"573\":1,\"600\":1,\"1125\":1,\"1483\":1,\"1501\":1,\"1620\":1,\"1623\":2}}],[\"publish\",{\"0\":{\"1077\":1},\"1\":{\"1075\":1,\"1077\":1,\"1099\":1,\"1111\":1}}],[\"publishing\",{\"1\":{\"774\":1}}],[\"published\",{\"1\":{\"623\":1,\"1130\":1}}],[\"public\",{\"1\":{\"480\":2,\"481\":1,\"664\":8,\"673\":1,\"681\":3,\"682\":3,\"696\":1,\"702\":3,\"879\":1,\"1004\":1,\"1108\":1,\"1296\":2,\"1320\":1,\"1329\":2,\"1333\":1,\"1396\":1,\"1421\":1,\"1428\":1,\"1626\":1,\"1627\":3,\"1629\":2}}],[\"pull的机制常常使人迷惑\",{\"1\":{\"1253\":1}}],[\"pull要更好\",{\"1\":{\"1253\":1}}],[\"pull命令在大多数情况下基本等同于执行git\",{\"1\":{\"1253\":1}}],[\"pull\",{\"1\":{\"622\":1}}],[\"pushed\",{\"1\":{\"466\":3}}],[\"push\",{\"0\":{\"1286\":1},\"1\":{\"406\":1,\"468\":1,\"508\":2,\"622\":2,\"978\":1,\"1077\":1,\"1099\":1,\"1246\":3,\"1250\":1,\"1253\":4,\"1286\":1,\"1287\":5,\"1365\":1,\"1463\":2}}],[\"punctuation\",{\"1\":{\"390\":1,\"391\":1}}],[\"put\",{\"1\":{\"243\":1,\"460\":2,\"1099\":1,\"1316\":2,\"1529\":2,\"1623\":2}}],[\"pcpu\",{\"1\":{\"1566\":2}}],[\"pcie接口\",{\"1\":{\"1144\":1}}],[\"pc地址的低\",{\"1\":{\"530\":1}}],[\"pcb\",{\"1\":{\"251\":1,\"252\":1}}],[\"pcsi​\",{\"1\":{\"1020\":1}}],[\"pcs\",{\"1\":{\"243\":1}}],[\"pc\",{\"0\":{\"595\":1},\"1\":{\"212\":2,\"236\":3,\"237\":1,\"245\":17,\"274\":1,\"530\":7,\"553\":1,\"558\":1,\"559\":3,\"575\":3,\"576\":2,\"581\":1,\"584\":5,\"592\":1,\"593\":2,\"595\":7,\"670\":2,\"692\":1,\"736\":1,\"1620\":1}}],[\"po\",{\"1\":{\"1591\":2}}],[\"poin\",{\"1\":{\"1120\":1}}],[\"pointing\",{\"1\":{\"1418\":2}}],[\"pointhitradius\",{\"1\":{\"892\":1}}],[\"pointhoverborderwidth\",{\"1\":{\"892\":1}}],[\"pointhoverbordercolor\",{\"1\":{\"892\":1}}],[\"pointhoverbackgroundcolor\",{\"1\":{\"892\":1}}],[\"pointhoverradius\",{\"1\":{\"892\":1}}],[\"pointradius\",{\"1\":{\"892\":1}}],[\"pointborderwidth\",{\"1\":{\"892\":1}}],[\"pointbordercolor\",{\"1\":{\"892\":1}}],[\"pointbackgroundcolor\",{\"1\":{\"892\":1}}],[\"pointed\",{\"1\":{\"547\":1,\"557\":1,\"558\":1}}],[\"pointer\",{\"0\":{\"677\":1,\"1410\":1},\"1\":{\"458\":1,\"675\":1,\"676\":1,\"682\":1,\"692\":1,\"978\":3,\"1198\":1,\"1344\":1,\"1345\":1,\"1570\":1,\"1571\":1,\"1573\":2,\"1592\":1,\"1609\":2,\"1611\":1}}],[\"point\",{\"0\":{\"1597\":1},\"1\":{\"234\":1,\"237\":1,\"245\":1,\"435\":2,\"436\":5,\"543\":1,\"573\":1,\"600\":1,\"851\":1,\"1381\":2,\"1464\":2,\"1485\":1,\"1491\":1,\"1592\":1,\"1595\":2,\"1596\":4,\"1597\":5,\"1602\":4,\"1623\":2}}],[\"points\",{\"1\":{\"203\":1,\"361\":1,\"675\":1,\"677\":1,\"1079\":1,\"1228\":1,\"1381\":5,\"1388\":1,\"1592\":1,\"1611\":3,\"1620\":1}}],[\"pole\",{\"1\":{\"1509\":1}}],[\"polls\",{\"1\":{\"1611\":2}}],[\"polling\",{\"0\":{\"1528\":1},\"1\":{\"1516\":1,\"1518\":2,\"1519\":1,\"1528\":2,\"1590\":1,\"1598\":2,\"1611\":2}}],[\"pollfree\",{\"1\":{\"1307\":1}}],[\"poll\",{\"0\":{\"953\":1},\"1\":{\"954\":3,\"1307\":2,\"1518\":3,\"1528\":8,\"1590\":1}}],[\"policy配置\",{\"1\":{\"827\":1}}],[\"policy\",{\"0\":{\"1610\":1},\"1\":{\"559\":2,\"576\":1,\"577\":1,\"1299\":1,\"1608\":6,\"1610\":5}}],[\"pocoo\",{\"1\":{\"848\":1}}],[\"powered\",{\"1\":{\"1474\":1}}],[\"powershell\",{\"1\":{\"1226\":1}}],[\"power\",{\"0\":{\"1202\":1},\"1\":{\"543\":2,\"557\":2,\"1118\":1,\"1201\":2,\"1202\":3,\"1203\":2,\"1204\":2,\"1207\":2,\"1208\":1,\"1209\":1,\"1474\":4,\"1481\":1,\"1493\":1,\"1508\":2,\"1534\":1,\"1536\":3,\"1591\":3,\"1607\":2}}],[\"port=6379\",{\"1\":{\"836\":1}}],[\"port>\",{\"1\":{\"795\":1}}],[\"portn\",{\"1\":{\"730\":1}}],[\"port2\",{\"1\":{\"730\":1}}],[\"port1\",{\"1\":{\"730\":1}}],[\"portainer\",{\"0\":{\"616\":1},\"1\":{\"616\":7}}],[\"ports\",{\"1\":{\"557\":7}}],[\"port\",{\"1\":{\"368\":2,\"371\":1,\"745\":2,\"949\":2,\"978\":2,\"991\":1,\"992\":2,\"1263\":2,\"1264\":1,\"1645\":2,\"1646\":1}}],[\"portion\",{\"1\":{\"243\":1,\"245\":1,\"1386\":1}}],[\"pose依旧有着很好的预测能力\",{\"1\":{\"1132\":1}}],[\"pose系统的平均精度为58\",{\"1\":{\"1132\":1}}],[\"pose系统的平均精度可达到62\",{\"1\":{\"1132\":1}}],[\"pose系统的设计还考虑到了rf无线信号固有的特征\",{\"1\":{\"1132\":1}}],[\"pose系统在房间里面充满人的时候也有很好的表现\",{\"1\":{\"1132\":1}}],[\"pose系统是本文提出的一个基于无线信号处理的神经网络系统\",{\"1\":{\"1132\":1}}],[\"pose系统能检测出人活动的2d图形\",{\"1\":{\"1131\":1}}],[\"pose\",{\"0\":{\"1130\":1,\"1132\":1},\"1\":{\"1130\":3}}],[\"pos\",{\"1\":{\"508\":2,\"1607\":7,\"1608\":4}}],[\"post是没有大小限制的\",{\"1\":{\"998\":1}}],[\"postcore\",{\"0\":{\"1552\":1},\"1\":{\"1551\":3,\"1552\":1,\"1605\":3}}],[\"postcode\",{\"1\":{\"377\":5}}],[\"postcss\",{\"1\":{\"942\":1}}],[\"postdir\",{\"1\":{\"933\":2}}],[\"posts\",{\"1\":{\"910\":1,\"933\":1,\"944\":1,\"1075\":1}}],[\"postgres\",{\"1\":{\"609\":2}}],[\"postgresql\",{\"0\":{\"609\":1},\"1\":{\"609\":4,\"789\":1}}],[\"post\",{\"0\":{\"998\":1,\"1076\":1},\"1\":{\"412\":1,\"539\":1,\"796\":1,\"885\":1,\"944\":1,\"998\":7,\"1072\":1,\"1076\":2,\"1079\":2,\"1094\":2,\"1099\":3}}],[\"positional\",{\"1\":{\"432\":2,\"693\":1}}],[\"positioned\",{\"1\":{\"361\":6}}],[\"position\",{\"1\":{\"341\":1,\"406\":1,\"1124\":1}}],[\"possibly\",{\"1\":{\"271\":1,\"552\":1,\"556\":1}}],[\"possible\",{\"1\":{\"237\":1,\"243\":1,\"245\":1,\"255\":1,\"308\":1,\"559\":1,\"565\":1,\"580\":1,\"582\":1}}],[\"poolthread\",{\"0\":{\"1296\":1},\"1\":{\"1295\":2,\"1296\":4}}],[\"pool2\",{\"1\":{\"1186\":4}}],[\"pool1\",{\"1\":{\"1186\":2}}],[\"pool层和全连接层\",{\"1\":{\"1156\":1}}],[\"pooled\",{\"1\":{\"1142\":3,\"1295\":1}}],[\"pools\",{\"1\":{\"317\":2}}],[\"pool\",{\"0\":{\"289\":1,\"666\":1},\"1\":{\"285\":2,\"288\":3,\"289\":3,\"317\":4,\"664\":2,\"703\":1,\"1142\":3,\"1186\":7,\"1329\":5}}],[\"potentially\",{\"1\":{\"542\":1,\"1385\":1}}],[\"potential\",{\"1\":{\"236\":1,\"241\":1,\"542\":1,\"562\":1,\"580\":1,\"1623\":1}}],[\"populate\",{\"1\":{\"1613\":1}}],[\"populated\",{\"1\":{\"1487\":1,\"1492\":1,\"1494\":1,\"1498\":1,\"1499\":1}}],[\"populates\",{\"1\":{\"1487\":1,\"1495\":1,\"1496\":1}}],[\"popular\",{\"1\":{\"888\":1,\"942\":1}}],[\"pop3\",{\"1\":{\"977\":1}}],[\"poped\",{\"1\":{\"466\":2}}],[\"popped\",{\"1\":{\"466\":3}}],[\"popitem\",{\"0\":{\"303\":1},\"1\":{\"301\":1,\"303\":6,\"406\":1,\"460\":1}}],[\"popleft\",{\"1\":{\"47\":1,\"52\":1,\"54\":1,\"57\":1,\"59\":1,\"61\":1,\"80\":1,\"84\":1,\"85\":1,\"86\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":3}}],[\"pop\",{\"1\":{\"8\":1,\"9\":4,\"10\":2,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"43\":1,\"46\":1,\"64\":2,\"75\":1,\"92\":1,\"341\":2,\"406\":1,\"465\":3,\"466\":1,\"467\":1,\"468\":4,\"486\":1,\"508\":1}}],[\"pinduo\",{\"1\":{\"1623\":2}}],[\"pinduoduo\",{\"1\":{\"1623\":7}}],[\"pins\",{\"1\":{\"1509\":1}}],[\"ping\",{\"1\":{\"728\":2,\"1320\":1}}],[\"picture\",{\"1\":{\"1159\":1,\"1203\":1}}],[\"picoscenes\",{\"1\":{\"750\":1}}],[\"pickle\",{\"0\":{\"298\":1},\"1\":{\"298\":4}}],[\"pid=\",{\"1\":{\"1278\":1}}],[\"pidof\",{\"1\":{\"1278\":2}}],[\"pid\",{\"0\":{\"1278\":1},\"1\":{\"738\":1,\"1231\":2,\"1278\":5,\"1279\":2,\"1293\":1,\"1295\":1,\"1333\":1,\"1340\":1,\"1341\":1,\"1515\":11,\"1591\":5}}],[\"pi\",{\"1\":{\"691\":2}}],[\"pip3\",{\"1\":{\"863\":1,\"1633\":1}}],[\"pipline\",{\"1\":{\"548\":5,\"557\":1,\"564\":1,\"599\":1}}],[\"pip\",{\"0\":{\"333\":1,\"448\":1},\"1\":{\"290\":1,\"311\":1,\"334\":1,\"336\":4,\"337\":2,\"365\":1,\"388\":1,\"445\":5,\"449\":2,\"450\":2,\"796\":1,\"824\":1,\"841\":2,\"849\":1,\"853\":1,\"854\":1,\"855\":2,\"856\":1,\"1091\":1,\"1263\":2,\"1641\":1,\"1645\":2}}],[\"pipenv\",{\"0\":{\"856\":1},\"1\":{\"856\":6}}],[\"pipestage\",{\"1\":{\"236\":1}}],[\"pipe\",{\"1\":{\"234\":5,\"1454\":1}}],[\"pipelining\",{\"0\":{\"237\":1,\"244\":1},\"1\":{\"233\":1,\"234\":3,\"235\":1,\"236\":1,\"237\":2,\"244\":1}}],[\"pipelined\",{\"1\":{\"236\":2}}],[\"pipelines\",{\"0\":{\"238\":1},\"1\":{\"233\":1,\"237\":2,\"241\":1,\"552\":2}}],[\"pipeline\",{\"0\":{\"232\":1,\"234\":1,\"236\":1,\"237\":1},\"1\":{\"234\":4,\"236\":15,\"237\":5,\"245\":1,\"542\":2,\"543\":4,\"548\":3,\"549\":8,\"552\":2,\"557\":1,\"558\":1,\"559\":1,\"564\":1,\"599\":1}}],[\"pieces\",{\"1\":{\"203\":1,\"245\":1}}],[\"pivot\",{\"1\":{\"177\":4}}],[\"pile\",{\"1\":{\"34\":4}}],[\"piles\",{\"1\":{\"34\":10}}],[\"py文件\",{\"1\":{\"1162\":1}}],[\"pymongo\",{\"0\":{\"796\":1},\"1\":{\"796\":4,\"1053\":1}}],[\"pyyaml\",{\"1\":{\"388\":1}}],[\"pyton\",{\"1\":{\"439\":1}}],[\"pytestconfig\",{\"1\":{\"383\":3}}],[\"pytest\",{\"0\":{\"369\":1,\"370\":1,\"372\":1,\"373\":1,\"374\":1,\"375\":1},\"1\":{\"369\":2,\"371\":2,\"372\":6,\"373\":3,\"374\":3,\"375\":5,\"377\":5,\"378\":3,\"379\":6,\"380\":1,\"381\":1,\"382\":6,\"383\":3}}],[\"python服务端程序在linux平台下使用最广泛的是nginx\",{\"1\":{\"859\":1}}],[\"python>>\",{\"1\":{\"367\":1}}],[\"pythonmodulename\",{\"1\":{\"334\":1}}],[\"python中不能使用多线程来使用多核\",{\"1\":{\"283\":1}}],[\"python中的多线程不适合计算密集型的程序\",{\"1\":{\"277\":1}}],[\"python中的多个线程由于gil锁的存在无法利用多核cpu\",{\"1\":{\"277\":1}}],[\"python中同一时刻有且只有一个线程会执行\",{\"1\":{\"277\":1}}],[\"python3\",{\"1\":{\"275\":1,\"301\":1,\"308\":1,\"394\":1,\"418\":2,\"427\":1,\"444\":3,\"445\":2,\"446\":1,\"754\":1,\"863\":1,\"864\":1}}],[\"pythonxx\",{\"1\":{\"273\":1}}],[\"python\",{\"0\":{\"271\":1,\"283\":1,\"292\":1,\"338\":1,\"345\":1,\"364\":1,\"391\":1,\"440\":1,\"442\":1,\"447\":1,\"453\":1,\"474\":1,\"745\":1,\"797\":1,\"818\":1,\"1060\":1,\"1229\":1,\"1230\":1},\"1\":{\"19\":1,\"27\":1,\"37\":1,\"42\":2,\"88\":2,\"146\":1,\"172\":1,\"173\":2,\"186\":1,\"271\":3,\"273\":4,\"274\":2,\"275\":1,\"276\":2,\"279\":2,\"280\":1,\"283\":1,\"284\":1,\"288\":1,\"290\":1,\"291\":1,\"295\":1,\"297\":1,\"299\":1,\"309\":1,\"310\":2,\"317\":1,\"320\":1,\"321\":1,\"343\":1,\"345\":1,\"351\":1,\"353\":1,\"360\":1,\"368\":2,\"369\":1,\"372\":1,\"388\":6,\"395\":1,\"408\":2,\"411\":1,\"414\":1,\"419\":1,\"421\":1,\"427\":1,\"428\":2,\"431\":1,\"435\":1,\"436\":2,\"439\":1,\"441\":1,\"442\":1,\"445\":2,\"447\":2,\"453\":1,\"454\":1,\"460\":1,\"480\":1,\"692\":1,\"745\":2,\"820\":1,\"841\":1,\"854\":1,\"864\":4,\"1053\":1,\"1057\":1,\"1060\":1,\"1109\":2,\"1219\":1,\"1263\":1,\"1645\":1},\"2\":{\"305\":1,\"318\":1,\"332\":1,\"362\":1,\"363\":1,\"822\":1,\"839\":1,\"1061\":1,\"1062\":1,\"1097\":1}}],[\"pypi\",{\"1\":{\"334\":1,\"336\":3,\"337\":1,\"445\":2,\"449\":1}}],[\"py\",{\"0\":{\"172\":1,\"823\":1,\"835\":1},\"1\":{\"291\":1,\"299\":1,\"371\":1,\"372\":2,\"373\":2,\"374\":3,\"375\":2,\"377\":3,\"378\":2,\"379\":1,\"380\":1,\"381\":1,\"382\":1,\"383\":1,\"403\":2,\"754\":1,\"796\":3,\"824\":2,\"843\":1,\"851\":1,\"854\":1,\"858\":1,\"864\":17,\"892\":1,\"1109\":2,\"1185\":2}}],[\"pay\",{\"1\":{\"1623\":1}}],[\"payload\",{\"0\":{\"1495\":1},\"1\":{\"1476\":1,\"1495\":1}}],[\"past\",{\"1\":{\"1623\":1}}],[\"passive\",{\"1\":{\"1590\":3,\"1597\":1,\"1598\":2,\"1611\":4}}],[\"passing\",{\"1\":{\"236\":1,\"1498\":1}}],[\"passes\",{\"1\":{\"1487\":2,\"1490\":1,\"1497\":1}}],[\"passed\",{\"1\":{\"236\":1,\"1365\":1,\"1495\":1,\"1496\":1,\"1573\":3}}],[\"passwords\",{\"1\":{\"748\":1}}],[\"password=none\",{\"1\":{\"836\":1}}],[\"password=123456\",{\"1\":{\"609\":1,\"610\":3}}],[\"password=pg123456\",{\"1\":{\"609\":1}}],[\"password\",{\"1\":{\"404\":2,\"747\":1,\"1056\":1,\"1263\":1,\"1645\":1}}],[\"passwd\",{\"1\":{\"375\":8,\"747\":1}}],[\"pass\",{\"1\":{\"288\":1,\"329\":1,\"373\":2,\"379\":6,\"426\":4,\"657\":1,\"703\":2,\"761\":2,\"766\":1,\"1060\":1,\"1483\":1,\"1495\":1,\"1496\":1}}],[\"pause\",{\"1\":{\"1287\":2,\"1388\":1}}],[\"paul\",{\"1\":{\"606\":2}}],[\"pae\",{\"1\":{\"1145\":1}}],[\"pad=1\",{\"1\":{\"1162\":1}}],[\"padstart\",{\"1\":{\"906\":5}}],[\"padding=\",{\"1\":{\"1142\":1,\"1186\":4}}],[\"padding取值为奇数\",{\"1\":{\"1142\":1}}],[\"padding分两类\",{\"1\":{\"1142\":1}}],[\"padding\",{\"0\":{\"679\":1},\"1\":{\"674\":2,\"682\":1,\"1142\":1}}],[\"paas\",{\"1\":{\"639\":1}}],[\"paperpaper\",{\"1\":{\"793\":1}}],[\"paper\",{\"0\":{\"1011\":1,\"1148\":1},\"1\":{\"542\":1,\"556\":1,\"557\":1,\"558\":1,\"580\":1,\"599\":1,\"600\":1,\"793\":2,\"1125\":1,\"1130\":3,\"1201\":1,\"1202\":1,\"1203\":1,\"1204\":1,\"1208\":2,\"1209\":1,\"1623\":1},\"2\":{\"1027\":1,\"1129\":1,\"1141\":1,\"1147\":1,\"1164\":1,\"1173\":1,\"1184\":1,\"1188\":1,\"1200\":1,\"1211\":1,\"1214\":1,\"1223\":1}}],[\"papers\",{\"0\":{\"540\":1},\"1\":{\"540\":1}}],[\"paired\",{\"1\":{\"1124\":1}}],[\"pair\",{\"1\":{\"531\":1,\"1143\":1,\"1365\":1}}],[\"pairs\",{\"1\":{\"297\":1}}],[\"pa\",{\"1\":{\"459\":6}}],[\"pandas\",{\"0\":{\"327\":1},\"1\":{\"315\":2,\"327\":1,\"328\":2,\"329\":2}}],[\"paged\",{\"1\":{\"1484\":1}}],[\"pagedown\",{\"1\":{\"1056\":1}}],[\"pageup\",{\"1\":{\"1056\":1}}],[\"pages\",{\"0\":{\"1071\":1,\"1072\":1},\"1\":{\"256\":5,\"760\":1,\"910\":1,\"933\":1,\"1071\":1,\"1075\":1,\"1077\":1,\"1340\":2}}],[\"page\",{\"0\":{\"257\":1,\"259\":1,\"260\":2,\"261\":1,\"262\":1},\"1\":{\"201\":3,\"252\":1,\"256\":8,\"259\":1,\"260\":2,\"261\":10,\"262\":4,\"760\":3,\"890\":1,\"1052\":1,\"1340\":1,\"1344\":7,\"1355\":2,\"1484\":1,\"1491\":1,\"1498\":1}}],[\"parcelforjavaobject\",{\"1\":{\"1333\":2}}],[\"parcel\",{\"1\":{\"1304\":1,\"1320\":9,\"1328\":1,\"1329\":15,\"1333\":14}}],[\"parentheses\",{\"0\":{\"465\":1},\"1\":{\"820\":1}}],[\"paradigm\",{\"1\":{\"1153\":1}}],[\"paragraphs\",{\"1\":{\"552\":1}}],[\"parameter\",{\"0\":{\"1218\":1},\"1\":{\"898\":1,\"1142\":1,\"1219\":3,\"1573\":1,\"1591\":4}}],[\"parameters\",{\"1\":{\"562\":1,\"892\":1,\"1202\":1,\"1219\":1,\"1221\":1,\"1428\":1,\"1591\":2,\"1592\":1,\"1611\":1}}],[\"parametrize\",{\"0\":{\"375\":1},\"1\":{\"375\":4,\"382\":2}}],[\"params=\",{\"1\":{\"382\":1}}],[\"params\",{\"0\":{\"1591\":1,\"1592\":1},\"1\":{\"382\":1,\"387\":3,\"1055\":1,\"1590\":1,\"1591\":3,\"1592\":3,\"1611\":1}}],[\"param\",{\"1\":{\"375\":3,\"382\":6,\"1591\":1,\"1592\":1}}],[\"parallelism\",{\"1\":{\"281\":1,\"568\":1,\"582\":1}}],[\"parallel\",{\"1\":{\"234\":1,\"245\":1,\"559\":1}}],[\"parses\",{\"1\":{\"1613\":1}}],[\"parseoptions\",{\"1\":{\"1366\":1}}],[\"parser\",{\"1\":{\"1219\":7}}],[\"parsed\",{\"1\":{\"1078\":1,\"1613\":1}}],[\"parseint\",{\"1\":{\"904\":2}}],[\"parseinstance\",{\"1\":{\"681\":1,\"682\":1}}],[\"parseirfile\",{\"1\":{\"693\":2}}],[\"parsecommandlineoptions\",{\"1\":{\"693\":1}}],[\"parse\",{\"0\":{\"1613\":1},\"1\":{\"298\":2,\"348\":2,\"412\":2,\"687\":1,\"902\":1,\"910\":2,\"927\":2,\"933\":2,\"1605\":1,\"1613\":3}}],[\"part2\",{\"1\":{\"622\":3}}],[\"parts\",{\"0\":{\"778\":1},\"1\":{\"234\":1,\"342\":1,\"458\":1,\"776\":1,\"778\":1,\"785\":1,\"786\":1,\"1143\":1}}],[\"part\",{\"1\":{\"234\":1,\"539\":1,\"565\":1,\"778\":1,\"851\":1,\"1389\":1}}],[\"partial\",{\"1\":{\"559\":1,\"576\":1}}],[\"particular\",{\"1\":{\"203\":1,\"321\":1,\"542\":1,\"543\":1,\"548\":1,\"558\":2,\"559\":1,\"1153\":1,\"1592\":1}}],[\"partition\",{\"1\":{\"177\":3}}],[\"parity\",{\"1\":{\"169\":1,\"1509\":1}}],[\"packet\",{\"1\":{\"1124\":1,\"1206\":2,\"1208\":1}}],[\"pack200\",{\"1\":{\"688\":1}}],[\"packages\",{\"1\":{\"774\":2,\"776\":1}}],[\"packages↩︎\",{\"1\":{\"275\":1}}],[\"packagename\",{\"1\":{\"702\":2}}],[\"package\",{\"0\":{\"1426\":1},\"1\":{\"321\":1,\"712\":1,\"774\":2,\"778\":1,\"851\":1,\"856\":1,\"890\":1,\"917\":1,\"1081\":1,\"1101\":2,\"1275\":1,\"1276\":3,\"1277\":1,\"1278\":5,\"1426\":1,\"1626\":1,\"1627\":1,\"1629\":1}}],[\"pack\",{\"1\":{\"126\":2,\"1081\":1}}],[\"pacificatlanticbfs\",{\"1\":{\"80\":1}}],[\"pacificatlantic\",{\"1\":{\"79\":1,\"81\":1}}],[\"pacific\",{\"1\":{\"78\":1,\"79\":3,\"80\":2}}],[\"patent\",{\"1\":{\"1052\":1}}],[\"patkennedy79\",{\"1\":{\"892\":1}}],[\"patches\",{\"1\":{\"1153\":1}}],[\"patch\",{\"1\":{\"712\":1}}],[\"patterns\",{\"1\":{\"559\":3}}],[\"patternallsimilar\",{\"1\":{\"288\":2}}],[\"pattern\",{\"1\":{\"285\":4,\"288\":2,\"289\":27,\"315\":3,\"325\":2,\"329\":2,\"411\":5,\"559\":2,\"584\":1,\"751\":1}}],[\"patience\",{\"1\":{\"90\":8}}],[\"path=$ld\",{\"1\":{\"1424\":1}}],[\"path=$home\",{\"1\":{\"1073\":1}}],[\"paths\",{\"1\":{\"543\":1,\"1118\":1}}],[\"path\",{\"0\":{\"350\":1,\"1286\":1,\"1476\":1,\"1481\":1},\"1\":{\"6\":4,\"12\":7,\"13\":6,\"14\":6,\"233\":1,\"236\":3,\"288\":4,\"298\":3,\"347\":4,\"348\":3,\"351\":1,\"352\":3,\"410\":1,\"447\":1,\"542\":1,\"543\":3,\"544\":1,\"545\":1,\"586\":1,\"696\":1,\"703\":1,\"705\":1,\"766\":1,\"910\":1,\"933\":1,\"1052\":1,\"1053\":1,\"1118\":1,\"1121\":1,\"1122\":2,\"1143\":1,\"1169\":2,\"1185\":3,\"1216\":4,\"1219\":1,\"1396\":1,\"1400\":1,\"1418\":1,\"1424\":4,\"1453\":8,\"1474\":1,\"1475\":2,\"1476\":1,\"1481\":1,\"1545\":1}}],[\"p\",{\"0\":{\"439\":1,\"748\":1},\"1\":{\"64\":2,\"108\":4,\"285\":14,\"432\":3,\"433\":4,\"435\":4,\"436\":6,\"444\":2,\"606\":1,\"609\":2,\"610\":2,\"611\":1,\"612\":2,\"613\":1,\"616\":2,\"621\":2,\"622\":1,\"641\":1,\"731\":1,\"746\":1,\"748\":2,\"793\":1,\"949\":1,\"978\":1,\"1231\":2,\"1249\":1,\"1270\":1,\"1278\":1,\"1279\":1,\"1287\":1,\"1329\":4,\"1365\":4,\"1453\":3,\"1537\":1}}],[\"peters\",{\"1\":{\"1060\":1}}],[\"peer\",{\"1\":{\"984\":1}}],[\"peewee\",{\"0\":{\"818\":1,\"819\":1},\"1\":{\"819\":1,\"820\":2}}],[\"peon\",{\"1\":{\"967\":1}}],[\"people\",{\"1\":{\"775\":1,\"1623\":1}}],[\"pending\",{\"1\":{\"552\":1,\"1545\":1}}],[\"penalties\",{\"1\":{\"548\":1}}],[\"penalty\",{\"1\":{\"192\":1,\"217\":1,\"241\":1,\"543\":1,\"546\":1,\"547\":2,\"548\":2,\"549\":9,\"558\":1,\"564\":1}}],[\"perish\",{\"1\":{\"1623\":1}}],[\"period\",{\"1\":{\"1583\":1,\"1586\":1}}],[\"periodic\",{\"1\":{\"1536\":1,\"1541\":1,\"1545\":2}}],[\"peripherals\",{\"1\":{\"1484\":1,\"1501\":1,\"1507\":2,\"1508\":1}}],[\"peripheral\",{\"1\":{\"227\":3,\"1508\":1}}],[\"perception\",{\"1\":{\"1094\":1,\"1189\":1}}],[\"perspective\",{\"1\":{\"1501\":1,\"1623\":1}}],[\"persistent\",{\"0\":{\"1217\":1}}],[\"persist\",{\"1\":{\"961\":1}}],[\"personal\",{\"1\":{\"1038\":1,\"1501\":2}}],[\"personalized\",{\"0\":{\"367\":1}}],[\"person\",{\"1\":{\"432\":13,\"433\":4,\"926\":3}}],[\"perl\",{\"1\":{\"770\":1}}],[\"perais\",{\"1\":{\"566\":1}}],[\"perfect\",{\"1\":{\"1623\":1}}],[\"perf\",{\"1\":{\"285\":2}}],[\"performed\",{\"1\":{\"250\":1,\"542\":2,\"543\":4,\"1475\":1}}],[\"performs\",{\"1\":{\"245\":2,\"1482\":1,\"1491\":1,\"1498\":1,\"1499\":1}}],[\"performing\",{\"1\":{\"245\":1,\"1501\":1,\"1611\":1}}],[\"perform\",{\"1\":{\"236\":4,\"245\":1,\"255\":1,\"256\":1,\"321\":1,\"552\":1,\"559\":1,\"1228\":1,\"1536\":1}}],[\"performance\",{\"0\":{\"238\":1,\"911\":1},\"1\":{\"227\":2,\"233\":1,\"236\":1,\"237\":2,\"243\":2,\"542\":4,\"547\":1,\"549\":1,\"556\":1,\"558\":1,\"562\":1,\"566\":1,\"580\":1,\"606\":1,\"1219\":1,\"1509\":1}}],[\"permissions\",{\"1\":{\"261\":1}}],[\"permuteunique\",{\"1\":{\"13\":1}}],[\"permute\",{\"1\":{\"12\":1}}],[\"per\",{\"0\":{\"1529\":1},\"1\":{\"194\":1,\"234\":2,\"235\":1,\"547\":1,\"558\":1,\"562\":2,\"599\":1,\"604\":2,\"1481\":2,\"1529\":9,\"1534\":2,\"1566\":1}}],[\"perhaps\",{\"1\":{\"193\":1}}],[\"peak\",{\"0\":{\"33\":1},\"1\":{\"1124\":1}}],[\"prj\",{\"1\":{\"1434\":1}}],[\"pr\",{\"1\":{\"1155\":3,\"1606\":2}}],[\"prss​\",{\"1\":{\"1020\":1}}],[\"pracel\",{\"0\":{\"1319\":1,\"1321\":1},\"1\":{\"1321\":1,\"1329\":1,\"1330\":2}}],[\"practice\",{\"1\":{\"557\":1,\"1623\":1}}],[\"practicality\",{\"1\":{\"1060\":1}}],[\"practical\",{\"1\":{\"541\":1,\"543\":1,\"557\":1,\"566\":1,\"1501\":1}}],[\"pragma\",{\"1\":{\"960\":1}}],[\"prfm\",{\"0\":{\"507\":1},\"1\":{\"507\":2}}],[\"primer\",{\"1\":{\"1057\":1,\"1126\":2}}],[\"prime\",{\"1\":{\"786\":1}}],[\"primary\",{\"1\":{\"703\":1,\"865\":1,\"1475\":4,\"1481\":1,\"1486\":1,\"1487\":1}}],[\"primaryzygotestate\",{\"1\":{\"703\":2}}],[\"primarily\",{\"1\":{\"237\":1}}],[\"private\",{\"1\":{\"640\":1,\"696\":1,\"703\":4,\"1145\":1,\"1396\":1,\"1421\":2,\"1423\":1,\"1425\":1,\"1611\":1,\"1627\":1,\"1629\":3}}],[\"priorities\",{\"1\":{\"1499\":1}}],[\"prioritize\",{\"1\":{\"557\":1}}],[\"priority\",{\"1\":{\"293\":1,\"897\":1,\"1499\":1,\"1567\":4}}],[\"prior\",{\"1\":{\"245\":3,\"580\":1}}],[\"principles\",{\"1\":{\"245\":1,\"1202\":1}}],[\"principle\",{\"1\":{\"191\":1,\"193\":1}}],[\"printed\",{\"1\":{\"1487\":1}}],[\"prints\",{\"1\":{\"785\":1,\"1487\":1}}],[\"println\",{\"1\":{\"681\":1,\"682\":1,\"1004\":1}}],[\"printf\",{\"1\":{\"502\":1,\"751\":1,\"1004\":1,\"1078\":1,\"1445\":1,\"1446\":2,\"1463\":2,\"1486\":1,\"1492\":1,\"1499\":1}}],[\"print\",{\"1\":{\"27\":2,\"74\":1,\"81\":1,\"90\":1,\"108\":1,\"173\":1,\"175\":1,\"285\":3,\"298\":1,\"299\":3,\"308\":6,\"309\":1,\"321\":1,\"331\":1,\"343\":5,\"354\":2,\"358\":1,\"359\":1,\"360\":2,\"382\":2,\"386\":3,\"387\":7,\"388\":4,\"396\":1,\"397\":1,\"403\":2,\"404\":1,\"418\":9,\"421\":5,\"422\":1,\"424\":11,\"425\":4,\"426\":16,\"427\":11,\"431\":4,\"432\":12,\"433\":1,\"434\":3,\"455\":1,\"693\":1,\"751\":10,\"771\":1,\"863\":1,\"1004\":1,\"1142\":2,\"1185\":1,\"1189\":3,\"1212\":10,\"1216\":3,\"1217\":7,\"1429\":1}}],[\"prices\",{\"1\":{\"1623\":1}}],[\"pricei​\",{\"1\":{\"102\":1}}],[\"price\",{\"1\":{\"102\":13,\"1623\":3}}],[\"prominent\",{\"1\":{\"1153\":1}}],[\"promoted\",{\"1\":{\"676\":4}}],[\"promotedobject\",{\"1\":{\"676\":2}}],[\"promo\",{\"1\":{\"676\":3}}],[\"province\",{\"1\":{\"1094\":1}}],[\"provided\",{\"1\":{\"562\":1,\"707\":1,\"1405\":1,\"1487\":1,\"1498\":1}}],[\"provide\",{\"1\":{\"559\":1,\"1189\":1,\"1476\":1,\"1501\":2,\"1509\":1}}],[\"provider\",{\"1\":{\"559\":6}}],[\"provides\",{\"1\":{\"193\":1,\"227\":1,\"309\":1,\"794\":1,\"891\":1,\"1143\":1,\"1219\":1,\"1501\":1,\"1508\":1}}],[\"profit\",{\"1\":{\"1623\":1}}],[\"profits\",{\"1\":{\"1623\":2}}],[\"profiles\",{\"1\":{\"1202\":1}}],[\"profile\",{\"0\":{\"1202\":1},\"1\":{\"1075\":1,\"1201\":1,\"1202\":2,\"1203\":2,\"1204\":2,\"1207\":1,\"1208\":1,\"1209\":1}}],[\"profiling\",{\"1\":{\"662\":1,\"1201\":1}}],[\"professional\",{\"1\":{\"1055\":1}}],[\"professionals\",{\"1\":{\"1054\":1}}],[\"proc\",{\"1\":{\"957\":1,\"984\":2,\"1263\":1,\"1307\":1,\"1312\":3,\"1314\":3,\"1315\":2,\"1316\":14,\"1344\":1,\"1345\":1,\"1645\":1}}],[\"procedure\",{\"1\":{\"1501\":1}}],[\"proceedings\",{\"1\":{\"606\":2}}],[\"proceed\",{\"1\":{\"234\":1,\"237\":1,\"244\":1}}],[\"processed\",{\"1\":{\"1385\":2}}],[\"processes\",{\"1\":{\"285\":5,\"1355\":1}}],[\"processpendingderefs\",{\"1\":{\"1299\":1}}],[\"processpoolexecutor\",{\"0\":{\"287\":1},\"1\":{\"287\":1,\"288\":1,\"289\":1}}],[\"processstate\",{\"1\":{\"1294\":2,\"1295\":1}}],[\"processstartresult\",{\"1\":{\"702\":2,\"703\":1}}],[\"processclass\",{\"1\":{\"702\":2,\"703\":1}}],[\"processcycle=1clockcycle\",{\"1\":{\"234\":1}}],[\"processdirectory\",{\"1\":{\"696\":1,\"1396\":1}}],[\"process\",{\"0\":{\"736\":1},\"1\":{\"250\":1,\"256\":1,\"285\":1,\"465\":1,\"576\":1,\"702\":9,\"703\":2,\"774\":1,\"785\":1,\"786\":1,\"794\":1,\"975\":3,\"1056\":1,\"1189\":5,\"1219\":1,\"1354\":1,\"1381\":2}}],[\"processing\",{\"1\":{\"227\":1,\"465\":1,\"1189\":1,\"1206\":1}}],[\"processors\",{\"0\":{\"942\":1},\"1\":{\"204\":1,\"237\":1,\"256\":1,\"541\":1,\"548\":1,\"566\":1,\"942\":1,\"1507\":1}}],[\"processor\",{\"0\":{\"236\":1,\"1493\":1},\"1\":{\"194\":2,\"197\":1,\"234\":4,\"236\":3,\"261\":1,\"546\":1,\"557\":2,\"564\":1,\"568\":1,\"942\":1,\"1485\":1,\"1493\":2,\"1495\":1,\"1508\":2,\"1542\":1,\"1620\":1,\"1622\":2}}],[\"projectn\",{\"1\":{\"1239\":1}}],[\"project1\",{\"1\":{\"1239\":1}}],[\"project0\",{\"1\":{\"1239\":1}}],[\"project\",{\"1\":{\"776\":2,\"786\":1,\"847\":1,\"848\":1,\"854\":1,\"855\":1,\"864\":6,\"923\":2,\"943\":2,\"1055\":2,\"1056\":1,\"1057\":1,\"1071\":1,\"1079\":1,\"1084\":2,\"1102\":1,\"1219\":1,\"1239\":2,\"1418\":5,\"1421\":2,\"1424\":2,\"1429\":6}}],[\"projects\",{\"0\":{\"1433\":1,\"1656\":1},\"1\":{\"775\":1,\"1009\":1,\"1111\":1,\"1418\":1},\"2\":{\"1069\":1,\"1082\":1,\"1088\":1,\"1096\":1,\"1115\":1}}],[\"proxytargetclass\",{\"1\":{\"879\":1}}],[\"proxy\",{\"1\":{\"761\":2,\"766\":6,\"832\":1,\"988\":1,\"1264\":1,\"1305\":1,\"1328\":4,\"1332\":1,\"1355\":2,\"1646\":1,\"1648\":2}}],[\"protect\",{\"1\":{\"1600\":1}}],[\"protected\",{\"1\":{\"1296\":1}}],[\"protector\",{\"1\":{\"692\":1}}],[\"protocol\",{\"0\":{\"1309\":1,\"1310\":1},\"1\":{\"986\":1,\"989\":1,\"1075\":1,\"1203\":1,\"1264\":1,\"1309\":6,\"1310\":1,\"1493\":1,\"1507\":2,\"1511\":1,\"1646\":1}}],[\"prototype\",{\"1\":{\"671\":1,\"875\":1}}],[\"prototypes\",{\"1\":{\"671\":1}}],[\"proto\",{\"1\":{\"671\":2}}],[\"probed\",{\"1\":{\"605\":1}}],[\"probabilities\",{\"1\":{\"558\":3}}],[\"probability\",{\"1\":{\"558\":2,\"1124\":1}}],[\"probabilistic\",{\"1\":{\"543\":2,\"558\":3,\"589\":1}}],[\"problem\",{\"0\":{\"464\":1,\"1510\":1},\"1\":{\"236\":1,\"321\":2,\"746\":1,\"1052\":1,\"1053\":1,\"1054\":3,\"1056\":1}}],[\"problems\",{\"0\":{\"29\":1,\"163\":1,\"181\":1,\"477\":1,\"1450\":1},\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"49\":1,\"62\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"86\":1,\"87\":1,\"92\":1,\"125\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"182\":1,\"186\":1,\"321\":1,\"467\":1,\"480\":1,\"491\":1}}],[\"props\",{\"1\":{\"1055\":1}}],[\"propogation\",{\"1\":{\"938\":1}}],[\"proportional\",{\"1\":{\"549\":1,\"557\":3,\"1591\":2}}],[\"propose\",{\"1\":{\"1125\":1}}],[\"proposed\",{\"1\":{\"542\":2,\"543\":2,\"558\":1}}],[\"proposal上做分类与回归\",{\"1\":{\"1151\":1}}],[\"proposal的r\",{\"1\":{\"1151\":1}}],[\"proposal\",{\"1\":{\"1021\":1,\"1151\":1,\"1153\":1}}],[\"propositions\",{\"1\":{\"543\":1}}],[\"propagated\",{\"1\":{\"549\":1}}],[\"property\",{\"0\":{\"408\":1},\"1\":{\"408\":7,\"940\":1,\"1053\":1}}],[\"properties\",{\"1\":{\"235\":2,\"897\":1,\"941\":1}}],[\"properly\",{\"1\":{\"236\":1}}],[\"proper\",{\"1\":{\"193\":1,\"1613\":1}}],[\"prog\",{\"1\":{\"411\":2}}],[\"progressive\",{\"1\":{\"1507\":1}}],[\"progress\",{\"1\":{\"234\":1,\"1216\":3}}],[\"programs\",{\"1\":{\"250\":1,\"552\":1,\"1431\":2,\"1498\":1,\"1501\":4}}],[\"programmer\",{\"1\":{\"1385\":1}}],[\"programmers\",{\"1\":{\"237\":1}}],[\"programming\",{\"1\":{\"309\":1,\"606\":1,\"1216\":1,\"1501\":1,\"1545\":1}}],[\"programmming\",{\"1\":{\"96\":1}}],[\"program\",{\"0\":{\"746\":1},\"1\":{\"212\":2,\"241\":1,\"250\":2,\"255\":1,\"256\":2,\"261\":1,\"285\":1,\"321\":2,\"553\":1,\"600\":1,\"1385\":1,\"1431\":3,\"1464\":4,\"1496\":1,\"1501\":1,\"1543\":1,\"1620\":2}}],[\"producing\",{\"1\":{\"592\":1}}],[\"produce\",{\"1\":{\"581\":1,\"584\":2,\"599\":1}}],[\"produced\",{\"1\":{\"549\":1,\"1620\":1}}],[\"products\",{\"1\":{\"1189\":1}}],[\"production\",{\"1\":{\"623\":1}}],[\"productive\",{\"1\":{\"271\":1}}],[\"product\",{\"0\":{\"317\":1},\"1\":{\"194\":1,\"317\":3,\"398\":1,\"1189\":1}}],[\"prod\",{\"1\":{\"317\":2}}],[\"prehandler\",{\"1\":{\"1626\":1}}],[\"pretty\",{\"1\":{\"794\":1}}],[\"pred\",{\"1\":{\"575\":1}}],[\"predictable\",{\"1\":{\"599\":2,\"601\":1,\"602\":2}}],[\"predicts\",{\"1\":{\"583\":2}}],[\"predictors\",{\"0\":{\"561\":1,\"562\":1,\"563\":1,\"583\":1},\"1\":{\"542\":2,\"543\":8,\"545\":2,\"546\":1,\"552\":2,\"556\":3,\"558\":2,\"559\":1,\"562\":7,\"580\":3,\"606\":1}}],[\"predictor\",{\"0\":{\"558\":1,\"559\":1,\"596\":1},\"1\":{\"542\":2,\"543\":7,\"545\":2,\"549\":1,\"552\":1,\"556\":7,\"557\":2,\"558\":1,\"559\":6,\"562\":6,\"580\":1,\"581\":1,\"592\":2}}],[\"predicted\",{\"1\":{\"243\":1,\"548\":1,\"549\":2,\"550\":1,\"551\":1,\"557\":3,\"559\":1,\"575\":2,\"1161\":1}}],[\"predict\",{\"1\":{\"241\":1,\"542\":1,\"543\":1,\"546\":1,\"553\":1,\"556\":2,\"559\":2,\"562\":1,\"573\":1,\"575\":1,\"580\":1,\"582\":1,\"599\":1,\"600\":1,\"1130\":1}}],[\"predicting\",{\"1\":{\"241\":1,\"542\":1,\"548\":1,\"580\":2,\"599\":1}}],[\"prediction>\",{\"1\":{\"568\":1}}],[\"prediction↩︎\",{\"1\":{\"566\":1}}],[\"predictions\",{\"0\":{\"578\":1},\"1\":{\"542\":1,\"546\":1,\"549\":1,\"557\":4,\"558\":1,\"559\":1,\"562\":1}}],[\"prediction\",{\"0\":{\"241\":1,\"242\":1,\"243\":2,\"552\":1,\"567\":1,\"568\":1,\"575\":1,\"588\":1,\"603\":1},\"1\":{\"193\":3,\"243\":9,\"542\":4,\"543\":6,\"545\":2,\"546\":1,\"547\":1,\"549\":5,\"550\":1,\"552\":6,\"553\":2,\"556\":1,\"557\":3,\"558\":5,\"559\":7,\"562\":4,\"565\":2,\"568\":2,\"570\":1,\"573\":1,\"575\":1,\"576\":2,\"580\":2,\"581\":1,\"583\":4,\"584\":1,\"586\":1,\"593\":1,\"599\":2,\"600\":1,\"601\":3,\"604\":2,\"606\":6,\"1130\":1}}],[\"precision\",{\"1\":{\"1221\":1}}],[\"precise\",{\"1\":{\"557\":1,\"692\":1,\"1201\":1,\"1209\":1}}],[\"precisely\",{\"1\":{\"543\":1}}],[\"precursor\",{\"1\":{\"499\":1}}],[\"prenode\",{\"1\":{\"458\":4}}],[\"preferred\",{\"1\":{\"1534\":1}}],[\"preferably\",{\"1\":{\"1060\":1}}],[\"preferable\",{\"1\":{\"558\":1}}],[\"prefetch\",{\"0\":{\"508\":1,\"509\":1},\"1\":{\"508\":7,\"509\":2,\"510\":1}}],[\"prefetching\",{\"1\":{\"256\":2}}],[\"prefix=\",{\"1\":{\"274\":1}}],[\"prefix\",{\"0\":{\"143\":1},\"1\":{\"156\":3,\"157\":4,\"159\":3,\"397\":1,\"491\":1,\"1417\":1,\"1418\":1,\"1424\":8}}],[\"prepare\",{\"1\":{\"1315\":1,\"1515\":2,\"1524\":1,\"1557\":1}}],[\"prepared\",{\"1\":{\"245\":1}}],[\"preparation\",{\"1\":{\"236\":1}}],[\"prev\",{\"1\":{\"460\":2,\"1590\":2,\"1602\":1}}],[\"prevents\",{\"1\":{\"558\":1}}],[\"prevent\",{\"1\":{\"237\":1,\"1056\":1}}],[\"previously\",{\"1\":{\"542\":1,\"543\":1,\"573\":1,\"580\":1,\"599\":1,\"600\":1}}],[\"previous\",{\"1\":{\"194\":1,\"237\":1,\"542\":2,\"552\":3,\"553\":1,\"557\":1,\"559\":2,\"562\":1,\"1498\":1}}],[\"press\",{\"1\":{\"1056\":1}}],[\"presist\",{\"1\":{\"829\":1}}],[\"preserving\",{\"1\":{\"1166\":1}}],[\"preserved\",{\"1\":{\"236\":1}}],[\"presence\",{\"1\":{\"543\":1,\"1118\":1}}],[\"presentation\",{\"1\":{\"949\":1}}],[\"present\",{\"1\":{\"236\":1,\"543\":1,\"1126\":1,\"1192\":1,\"1487\":1,\"1495\":1}}],[\"presums\",{\"1\":{\"160\":2}}],[\"presum\",{\"0\":{\"143\":1},\"1\":{\"149\":5,\"150\":8,\"154\":11}}],[\"prerequisites\",{\"1\":{\"86\":6,\"1439\":2}}],[\"pre\",{\"0\":{\"942\":1},\"1\":{\"64\":4,\"147\":16,\"152\":10,\"153\":14,\"154\":2,\"155\":3,\"160\":16,\"942\":3,\"1534\":1,\"1557\":1}}],[\"preorder\",{\"0\":{\"485\":1},\"1\":{\"42\":8,\"486\":2}}],[\"preordertraversal\",{\"1\":{\"42\":5,\"43\":1}}],[\"pqrs\",{\"1\":{\"8\":1}}],[\"hwmon\",{\"1\":{\"1591\":6}}],[\"hwbinder\",{\"1\":{\"1295\":1}}],[\"hrtimer\",{\"1\":{\"1545\":6}}],[\"href=\",{\"1\":{\"896\":1,\"897\":1,\"1081\":1,\"1105\":2}}],[\"hz\",{\"1\":{\"1541\":2}}],[\"hdr\",{\"1\":{\"1509\":2}}],[\"hce\",{\"1\":{\"1485\":1}}],[\"hvc\",{\"1\":{\"1485\":1}}],[\"hmin​=logn+1\",{\"1\":{\"1170\":1}}],[\"hlt\",{\"1\":{\"1528\":1}}],[\"hl\",{\"1\":{\"978\":2}}],[\"hlabcdefgijkmnopqrstuvwxyz\",{\"1\":{\"186\":1}}],[\"h4>\",{\"1\":{\"935\":1}}],[\"h2\",{\"1\":{\"896\":1}}],[\"h265\",{\"1\":{\"643\":1}}],[\"h1​ta−ta−1=0\",{\"1\":{\"1181\":1}}],[\"h1>\",{\"1\":{\"896\":1,\"939\":1}}],[\"h1\",{\"1\":{\"896\":1,\"897\":2}}],[\"hhmm\",{\"1\":{\"1226\":1}}],[\"hh\",{\"1\":{\"706\":1,\"906\":2,\"1402\":1}}],[\"hpp\",{\"1\":{\"676\":1}}],[\"hpca19\",{\"1\":{\"545\":1}}],[\"hpca\",{\"0\":{\"541\":1,\"579\":1},\"1\":{\"541\":1,\"558\":1,\"563\":1,\"566\":1,\"580\":1,\"606\":2}}],[\"hyst\",{\"1\":{\"1590\":1,\"1593\":2,\"1596\":5}}],[\"hystersis\",{\"1\":{\"576\":1}}],[\"hysteresis\",{\"1\":{\"559\":1,\"562\":1,\"576\":2,\"605\":1,\"1598\":1}}],[\"hyperv\",{\"1\":{\"725\":1}}],[\"hybrid\",{\"0\":{\"563\":1},\"1\":{\"556\":2}}],[\"hsla\",{\"1\":{\"898\":2}}],[\"hsl\",{\"1\":{\"898\":3}}],[\"hsm\",{\"1\":{\"648\":1}}],[\"hs\",{\"1\":{\"517\":2,\"706\":2,\"1402\":2}}],[\"h>\",{\"1\":{\"502\":1,\"693\":6,\"706\":1,\"950\":1,\"951\":1,\"956\":1,\"1004\":1,\"1402\":1,\"1445\":1,\"1446\":1,\"1469\":1,\"1605\":1}}],[\"htm\",{\"1\":{\"760\":1}}],[\"html↩︎\",{\"1\":{\"1435\":1}}],[\"html5\",{\"1\":{\"1110\":1}}],[\"html>\",{\"1\":{\"1004\":2}}],[\"html=\",{\"1\":{\"936\":1}}],[\"html\",{\"0\":{\"936\":1},\"1\":{\"331\":2,\"383\":1,\"760\":8,\"766\":1,\"820\":1,\"892\":3,\"923\":1,\"936\":1,\"941\":1,\"944\":1,\"1081\":1}}],[\"http协议规范没有对\",{\"1\":{\"998\":1}}],[\"http\",{\"0\":{\"965\":2,\"966\":1,\"995\":1,\"996\":1},\"1\":{\"368\":2,\"410\":1,\"412\":1,\"444\":1,\"445\":1,\"616\":1,\"619\":1,\"707\":1,\"745\":2,\"759\":3,\"760\":1,\"761\":4,\"766\":6,\"776\":1,\"785\":1,\"820\":1,\"848\":1,\"918\":1,\"965\":1,\"966\":3,\"967\":1,\"977\":2,\"996\":1,\"998\":1,\"999\":2,\"1004\":1,\"1074\":1,\"1094\":3,\"1244\":1,\"1405\":1},\"2\":{\"969\":1}}],[\"https\",{\"0\":{\"996\":1,\"1080\":1},\"1\":{\"8\":1,\"10\":1,\"11\":1,\"23\":1,\"34\":1,\"49\":1,\"62\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"86\":1,\"87\":1,\"92\":1,\"125\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"169\":1,\"182\":1,\"186\":1,\"270\":2,\"334\":1,\"336\":1,\"383\":1,\"449\":1,\"467\":1,\"480\":1,\"491\":1,\"539\":3,\"606\":2,\"611\":1,\"619\":4,\"682\":1,\"731\":1,\"844\":1,\"848\":2,\"885\":1,\"889\":1,\"892\":1,\"918\":1,\"939\":1,\"944\":1,\"996\":1,\"1073\":2,\"1076\":3,\"1080\":2,\"1099\":3,\"1105\":2,\"1161\":2,\"1179\":1,\"1216\":1,\"1236\":1,\"1240\":1,\"1258\":3,\"1259\":2,\"1264\":1,\"1265\":1,\"1435\":2,\"1465\":1,\"1472\":1,\"1511\":1,\"1534\":1,\"1537\":1,\"1615\":1,\"1633\":2,\"1634\":3,\"1635\":2,\"1646\":1,\"1647\":1,\"1648\":1}}],[\"huaxizi\",{\"1\":{\"1623\":7}}],[\"hua\",{\"1\":{\"1623\":1}}],[\"huawei\",{\"0\":{\"635\":1},\"1\":{\"336\":2,\"337\":2,\"1623\":5},\"2\":{\"650\":1}}],[\"human\",{\"1\":{\"1130\":3,\"1623\":2}}],[\"hue\",{\"1\":{\"898\":2}}],[\"hub\",{\"1\":{\"619\":1}}],[\"hungry\",{\"1\":{\"543\":2}}],[\"huge\",{\"1\":{\"256\":3,\"1623\":3}}],[\"hurdle\",{\"0\":{\"237\":1}}],[\"hot\",{\"1\":{\"1509\":1,\"1597\":1}}],[\"hotplug\",{\"1\":{\"1474\":2}}],[\"hot=true\",{\"1\":{\"1185\":1}}],[\"hotspot\",{\"1\":{\"652\":2,\"674\":1,\"675\":1,\"676\":1,\"682\":1,\"689\":1}}],[\"horses\",{\"1\":{\"1161\":1}}],[\"honking\",{\"1\":{\"1060\":1}}],[\"hover\",{\"1\":{\"944\":1}}],[\"hook\",{\"1\":{\"923\":1,\"941\":1,\"1553\":1}}],[\"hostname\",{\"1\":{\"1075\":1}}],[\"host=\",{\"1\":{\"836\":1}}],[\"host=tcp\",{\"1\":{\"618\":1}}],[\"host=mirrors\",{\"1\":{\"336\":1,\"337\":1}}],[\"hosts\",{\"1\":{\"609\":1,\"1236\":2,\"1244\":1}}],[\"host\",{\"0\":{\"729\":1,\"1236\":1},\"1\":{\"336\":1,\"445\":1,\"727\":1,\"744\":2,\"761\":1,\"991\":2,\"999\":1,\"1244\":1,\"1508\":1}}],[\"hour=\",{\"1\":{\"1095\":1}}],[\"hour\",{\"1\":{\"291\":1}}],[\"holding\",{\"1\":{\"520\":1}}],[\"hold\",{\"1\":{\"245\":2}}],[\"holds\",{\"1\":{\"216\":1,\"1383\":1,\"1388\":1,\"1591\":1,\"1592\":1,\"1602\":1,\"1620\":1}}],[\"hower\",{\"1\":{\"606\":1}}],[\"however\",{\"1\":{\"406\":1,\"548\":1,\"549\":1,\"552\":1,\"558\":2,\"559\":1,\"1202\":1,\"1203\":1,\"1623\":2}}],[\"howpipeline\",{\"1\":{\"237\":1}}],[\"how\",{\"0\":{\"244\":1,\"1578\":1},\"1\":{\"194\":3,\"196\":2,\"243\":2,\"245\":1,\"271\":2,\"623\":1,\"778\":1,\"847\":1,\"975\":1,\"1052\":1,\"1126\":1,\"1186\":1,\"1198\":1,\"1201\":1,\"1203\":1,\"1345\":1,\"1507\":1,\"1592\":1,\"1623\":1}}],[\"homework\",{\"1\":{\"1162\":2}}],[\"home=$home\",{\"1\":{\"1073\":1}}],[\"home\",{\"1\":{\"0\":1,\"612\":1,\"613\":1,\"658\":1,\"1055\":1,\"1072\":1,\"1162\":3,\"1501\":1}}],[\"hans\",{\"1\":{\"1099\":1}}],[\"hana\",{\"1\":{\"643\":1,\"1623\":1}}],[\"hands\",{\"1\":{\"271\":1,\"1474\":1}}],[\"handler\",{\"0\":{\"1343\":1,\"1626\":1},\"1\":{\"926\":1,\"1298\":2,\"1342\":1,\"1498\":1,\"1626\":1,\"1627\":2}}],[\"handles\",{\"1\":{\"774\":1,\"1124\":1,\"1198\":1,\"1534\":1}}],[\"handle<mirror\",{\"1\":{\"706\":1,\"1402\":1}}],[\"handle\",{\"1\":{\"236\":1,\"245\":1,\"1125\":1,\"1320\":3,\"1333\":7}}],[\"handling\",{\"0\":{\"212\":1},\"1\":{\"227\":1,\"1493\":1,\"1498\":1,\"1536\":1}}],[\"handing\",{\"0\":{\"1108\":1},\"1\":{\"212\":1}}],[\"hard\",{\"1\":{\"957\":1,\"1060\":1,\"1241\":1}}],[\"hardware\",{\"0\":{\"557\":1},\"1\":{\"230\":1,\"236\":1,\"237\":1,\"250\":1,\"255\":4,\"256\":4,\"542\":1,\"543\":1,\"546\":1,\"548\":1,\"549\":1,\"557\":1,\"580\":1,\"1501\":3,\"1515\":1,\"1613\":1}}],[\"harnessing\",{\"1\":{\"542\":1}}],[\"happy\",{\"1\":{\"481\":1}}],[\"happened\",{\"1\":{\"321\":1}}],[\"happen\",{\"1\":{\"256\":1}}],[\"happens\",{\"1\":{\"236\":1,\"256\":1}}],[\"hat\",{\"1\":{\"445\":1}}],[\"hamming\",{\"1\":{\"400\":1}}],[\"hazard\",{\"1\":{\"237\":2}}],[\"hazards\",{\"0\":{\"237\":1,\"239\":1,\"240\":1},\"1\":{\"233\":1,\"237\":9}}],[\"had\",{\"1\":{\"236\":1,\"1501\":1}}],[\"half\",{\"1\":{\"236\":2,\"557\":1,\"1464\":8}}],[\"halfword\",{\"1\":{\"204\":1}}],[\"halves\",{\"1\":{\"217\":1}}],[\"having\",{\"1\":{\"194\":1,\"465\":1,\"562\":1}}],[\"havefun\",{\"1\":{\"403\":3}}],[\"have\",{\"1\":{\"194\":5,\"197\":2,\"203\":1,\"204\":2,\"227\":2,\"236\":2,\"243\":1,\"256\":1,\"548\":1,\"557\":2,\"573\":1,\"600\":1,\"675\":1,\"707\":1,\"746\":1,\"780\":1,\"897\":1,\"1072\":1,\"1153\":1,\"1207\":1,\"1365\":1,\"1385\":3,\"1389\":1,\"1406\":1,\"1493\":1,\"1543\":1,\"1545\":2,\"1592\":1,\"1611\":1,\"1623\":5}}],[\"hasalternatingbits\",{\"1\":{\"400\":1}}],[\"has\",{\"1\":{\"177\":1,\"194\":4,\"195\":1,\"227\":1,\"236\":2,\"243\":2,\"245\":1,\"250\":1,\"255\":1,\"256\":2,\"271\":1,\"321\":1,\"421\":1,\"436\":1,\"546\":1,\"548\":2,\"556\":1,\"557\":1,\"559\":1,\"562\":1,\"565\":1,\"580\":2,\"586\":1,\"707\":1,\"751\":1,\"897\":1,\"941\":1,\"942\":1,\"986\":1,\"988\":2,\"1130\":1,\"1203\":1,\"1208\":1,\"1316\":2,\"1405\":1,\"1427\":1,\"1475\":1,\"1507\":3,\"1551\":1,\"1623\":10}}],[\"hashed\",{\"1\":{\"555\":1,\"559\":1}}],[\"hashing\",{\"1\":{\"492\":1,\"584\":1}}],[\"hashcrack\",{\"1\":{\"445\":1}}],[\"hashlib\",{\"1\":{\"375\":2}}],[\"hashmap\",{\"0\":{\"451\":1,\"452\":1,\"453\":1},\"1\":{\"153\":3,\"453\":2,\"461\":1}}],[\"hash\",{\"0\":{\"153\":1,\"295\":1,\"296\":1,\"495\":1,\"764\":1},\"1\":{\"153\":2,\"159\":1,\"168\":1,\"295\":1,\"297\":7,\"299\":1,\"480\":8,\"492\":2,\"494\":1,\"495\":1,\"545\":1,\"556\":2,\"559\":2,\"562\":1,\"584\":1,\"674\":1,\"675\":1,\"676\":4,\"763\":2,\"764\":5,\"812\":1,\"825\":1,\"982\":1,\"988\":1}}],[\"hidden\",{\"1\":{\"750\":2,\"777\":1,\"892\":3}}],[\"hide\",{\"0\":{\"211\":1},\"1\":{\"702\":1}}],[\"histstory\",{\"1\":{\"575\":1}}],[\"histories\",{\"1\":{\"543\":1}}],[\"history\",{\"1\":{\"243\":1,\"542\":3,\"543\":7,\"544\":2,\"545\":4,\"555\":2,\"558\":2,\"559\":14,\"562\":2,\"575\":1,\"576\":2,\"577\":1,\"586\":1,\"1623\":1}}],[\"hi\",{\"1\":{\"424\":6,\"517\":2,\"1095\":1}}],[\"hint\",{\"1\":{\"243\":2}}],[\"highest\",{\"1\":{\"897\":1,\"1124\":1}}],[\"higher\",{\"1\":{\"193\":1,\"203\":1,\"236\":1,\"542\":1,\"559\":1,\"1201\":1,\"1203\":1,\"1204\":1,\"1209\":1,\"1501\":1,\"1508\":1}}],[\"highly\",{\"1\":{\"602\":1,\"1080\":1,\"1508\":1}}],[\"highlighting\",{\"1\":{\"1084\":1}}],[\"highlight\",{\"0\":{\"1078\":1,\"1081\":1},\"1\":{\"552\":2,\"1054\":2,\"1078\":2,\"1081\":2,\"1085\":1}}],[\"high\",{\"0\":{\"389\":1},\"1\":{\"227\":1,\"541\":1,\"542\":2,\"543\":3,\"547\":1,\"549\":4,\"557\":1,\"558\":1,\"566\":2,\"592\":1,\"606\":1,\"1340\":1,\"1508\":2,\"1509\":1,\"1590\":1,\"1623\":1}}],[\"hierarchy\",{\"1\":{\"191\":1,\"193\":2,\"196\":2,\"253\":1}}],[\"hit\",{\"0\":{\"207\":1},\"1\":{\"190\":1,\"192\":2,\"193\":1,\"207\":2,\"212\":1,\"243\":1,\"256\":2,\"548\":2,\"1189\":1}}],[\"he\",{\"1\":{\"1623\":1}}],[\"hegemony\",{\"1\":{\"1623\":1}}],[\"hex\",{\"1\":{\"898\":1}}],[\"hexdigest\",{\"1\":{\"375\":1}}],[\"hercules\",{\"1\":{\"776\":1}}],[\"herein\",{\"1\":{\"245\":1}}],[\"here\",{\"1\":{\"103\":2,\"194\":2,\"204\":1,\"227\":1,\"241\":1,\"341\":1,\"775\":1,\"843\":1,\"892\":1,\"999\":1,\"1075\":1,\"1080\":1,\"1099\":1,\"1376\":1}}],[\"heat\",{\"1\":{\"1591\":1}}],[\"heatmap\",{\"1\":{\"892\":1}}],[\"heaptaskdaemon\",{\"1\":{\"1231\":2}}],[\"heap\",{\"1\":{\"675\":2,\"1385\":2,\"1386\":2}}],[\"headed\",{\"1\":{\"1623\":1}}],[\"header详解\",{\"1\":{\"1465\":1}}],[\"headers=\",{\"1\":{\"1094\":1}}],[\"headers\",{\"1\":{\"713\":1,\"1145\":1,\"1464\":8}}],[\"headersizes\",{\"1\":{\"509\":1}}],[\"header\",{\"0\":{\"675\":1,\"978\":1},\"1\":{\"329\":1,\"357\":1,\"671\":3,\"674\":1,\"675\":4,\"676\":2,\"677\":1,\"681\":3,\"682\":5,\"766\":1,\"798\":1,\"976\":1,\"978\":1,\"1056\":1,\"1081\":1,\"1216\":1,\"1460\":1,\"1464\":3,\"1487\":1}}],[\"header=none\",{\"1\":{\"315\":1,\"329\":2}}],[\"head>\",{\"1\":{\"896\":2,\"897\":1,\"934\":1,\"1004\":1}}],[\"headb\",{\"1\":{\"459\":4}}],[\"heada\",{\"1\":{\"459\":4}}],[\"heading<\",{\"1\":{\"896\":1}}],[\"heading\",{\"1\":{\"358\":1,\"359\":1,\"360\":1}}],[\"head\",{\"0\":{\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1},\"1\":{\"89\":3,\"458\":3,\"460\":4,\"509\":1,\"1076\":1,\"1241\":1,\"1251\":2,\"1252\":2,\"1340\":1,\"1341\":1,\"1562\":4,\"1563\":7,\"1564\":7,\"1565\":6,\"1566\":9,\"1570\":7,\"1571\":1,\"1573\":1,\"1575\":10,\"1576\":14,\"1577\":1,\"1590\":2,\"1599\":1,\"1600\":2,\"1602\":4,\"1607\":1,\"1608\":1,\"1623\":5}}],[\"heuristic\",{\"1\":{\"590\":1}}],[\"heterogeneous\",{\"0\":{\"596\":1},\"1\":{\"542\":1,\"581\":1,\"605\":1}}],[\"heo\",{\"1\":{\"396\":1}}],[\"held\",{\"1\":{\"1501\":1}}],[\"help=\",{\"1\":{\"1219\":5}}],[\"help|stop|restart|fresh\",{\"1\":{\"1091\":1}}],[\"helpful\",{\"1\":{\"1079\":2,\"1080\":1}}],[\"helps\",{\"1\":{\"746\":1,\"1080\":1}}],[\"help\",{\"1\":{\"576\":1,\"751\":1,\"778\":1,\"1071\":1,\"1080\":1,\"1091\":1,\"1099\":1,\"1243\":1,\"1435\":1}}],[\"helpers\",{\"1\":{\"1611\":1}}],[\"helper\",{\"1\":{\"293\":2,\"1243\":3}}],[\"helio\",{\"1\":{\"396\":1}}],[\"helloandwelcome\",{\"1\":{\"1004\":1}}],[\"hello\",{\"0\":{\"771\":1,\"1004\":1,\"1440\":1,\"1445\":1},\"1\":{\"186\":1,\"291\":1,\"396\":1,\"421\":3,\"422\":5,\"425\":1,\"620\":1,\"621\":1,\"760\":2,\"771\":1,\"781\":2,\"785\":9,\"786\":5,\"939\":1,\"943\":1,\"959\":3,\"999\":1,\"1004\":7,\"1078\":1,\"1418\":2,\"1421\":1,\"1422\":5,\"1423\":3,\"1424\":3,\"1428\":1,\"1429\":3,\"1432\":1,\"1440\":1,\"1445\":2,\"1446\":3}}],[\"hence\",{\"1\":{\"236\":1,\"237\":2,\"562\":1,\"707\":1,\"1405\":1,\"1495\":1,\"1496\":1}}],[\"height分别表示该boundingbox的宽度和高度\",{\"1\":{\"1159\":1}}],[\"height=\",{\"1\":{\"892\":1,\"1228\":1}}],[\"heights\",{\"1\":{\"79\":5,\"80\":5,\"81\":2,\"340\":4}}],[\"height\",{\"1\":{\"56\":1,\"1159\":3,\"1228\":3}}],[\"h\",{\"0\":{\"1548\":1},\"1\":{\"34\":6,\"186\":1,\"269\":2,\"349\":1,\"396\":3,\"606\":3,\"706\":5,\"741\":3,\"742\":2,\"743\":2,\"747\":1,\"795\":1,\"1056\":1,\"1155\":3,\"1181\":1,\"1309\":2,\"1402\":4,\"1403\":1,\"1424\":2,\"1434\":2,\"1440\":17,\"1446\":4,\"1448\":6,\"1449\":6,\"1462\":2,\"1463\":5,\"1464\":3,\"1534\":1,\"1549\":1,\"1553\":1,\"1560\":1,\"1567\":1,\"1575\":1,\"1590\":1,\"1591\":2,\"1592\":1,\"1607\":1}}],[\"l64\",{\"1\":{\"1591\":1}}],[\"lvl+0xb8\",{\"1\":{\"1515\":1}}],[\"lvpt\",{\"0\":{\"601\":1},\"1\":{\"580\":1,\"599\":1,\"601\":7,\"602\":5,\"603\":2}}],[\"lvp\",{\"0\":{\"553\":1,\"584\":1,\"598\":1},\"1\":{\"552\":1,\"553\":4,\"556\":2,\"559\":3,\"562\":6,\"583\":2,\"584\":5,\"599\":4}}],[\"lma\",{\"1\":{\"1463\":1}}],[\"lmd\",{\"1\":{\"245\":5}}],[\"l2\",{\"1\":{\"1185\":1}}],[\"ln\",{\"1\":{\"1145\":1}}],[\"luochen1990\",{\"1\":{\"1259\":1}}],[\"lua\",{\"1\":{\"1009\":1}}],[\"luciano\",{\"1\":{\"271\":1}}],[\"lucky\",{\"1\":{\"177\":1}}],[\"luck\",{\"1\":{\"165\":1}}],[\"lfd\",{\"1\":{\"955\":2}}],[\"lxd\",{\"0\":{\"783\":1},\"1\":{\"783\":5}}],[\"ljava\",{\"1\":{\"706\":6,\"1402\":6}}],[\"l1\",{\"1\":{\"548\":3,\"603\":1}}],[\"lsof\",{\"1\":{\"753\":1}}],[\"lsmod命令可查看已加载的模块\",{\"1\":{\"718\":1}}],[\"lsr\",{\"0\":{\"539\":1},\"1\":{\"539\":1,\"673\":1}}],[\"lsb\",{\"1\":{\"536\":2,\"747\":1}}],[\"lsl\",{\"0\":{\"538\":1},\"1\":{\"528\":1,\"538\":6,\"539\":1}}],[\"ls\",{\"1\":{\"517\":2,\"620\":1,\"621\":1,\"622\":1,\"623\":1,\"786\":1,\"1075\":1,\"1432\":1,\"1439\":1,\"1445\":2,\"1446\":2}}],[\"lst\",{\"1\":{\"341\":4}}],[\"lts\",{\"1\":{\"612\":1,\"643\":1,\"890\":1,\"916\":1}}],[\"lt\",{\"1\":{\"517\":2,\"956\":1}}],[\"lbb0\",{\"1\":{\"517\":1}}],[\"lrf\",{\"1\":{\"1170\":1}}],[\"lr\",{\"1\":{\"517\":1}}],[\"lrucache\",{\"1\":{\"460\":2}}],[\"lru\",{\"0\":{\"460\":1},\"1\":{\"15\":1,\"102\":1,\"213\":6,\"259\":2,\"460\":1,\"577\":2,\"827\":5,\"1340\":1}}],[\"llll\",{\"1\":{\"1113\":2}}],[\"lldb\",{\"1\":{\"692\":1}}],[\"lld\",{\"1\":{\"692\":1}}],[\"llvm上下文全局变量\",{\"1\":{\"693\":1}}],[\"llvmcontext\",{\"1\":{\"693\":1}}],[\"llvm\",{\"1\":{\"690\":5,\"691\":3,\"692\":8,\"693\":5,\"708\":3}}],[\"llb0\",{\"1\":{\"517\":1}}],[\"ll\",{\"1\":{\"271\":1,\"692\":1,\"1074\":1,\"1079\":1,\"1301\":1}}],[\"ld\",{\"1\":{\"1424\":1,\"1449\":1}}],[\"ldflags\",{\"1\":{\"693\":1}}],[\"ldur\",{\"0\":{\"525\":1},\"1\":{\"525\":2}}],[\"ldp\",{\"0\":{\"526\":1},\"1\":{\"511\":4,\"526\":1}}],[\"ldm\",{\"1\":{\"227\":2}}],[\"ldrsw\",{\"0\":{\"529\":1},\"1\":{\"529\":7}}],[\"ldrh\",{\"0\":{\"528\":1},\"1\":{\"528\":3}}],[\"ldrb\",{\"0\":{\"527\":1},\"1\":{\"527\":1,\"528\":1}}],[\"ldr\",{\"0\":{\"524\":1},\"1\":{\"205\":2,\"227\":2,\"511\":1,\"523\":1,\"524\":5,\"525\":1,\"673\":1}}],[\"li\",{\"1\":{\"1623\":1}}],[\"li`s\",{\"1\":{\"1201\":1}}],[\"licensed\",{\"1\":{\"1189\":1}}],[\"liuyan\",{\"1\":{\"1102\":1}}],[\"lightness\",{\"1\":{\"898\":2}}],[\"lighthttpd\",{\"1\":{\"859\":1}}],[\"literals\",{\"1\":{\"843\":1}}],[\"little\",{\"1\":{\"308\":1,\"670\":3,\"1464\":2,\"1485\":1,\"1623\":2}}],[\"limitations\",{\"1\":{\"580\":1}}],[\"limits>\",{\"1\":{\"1592\":1}}],[\"limits\",{\"1\":{\"558\":1,\"957\":1,\"1487\":1,\"1492\":1,\"1592\":5}}],[\"limiting\",{\"1\":{\"557\":1}}],[\"limit\",{\"1\":{\"548\":1,\"557\":4,\"562\":1,\"568\":1,\"570\":1,\"582\":1,\"606\":1,\"792\":1,\"804\":1,\"1518\":1,\"1592\":1}}],[\"limited\",{\"1\":{\"543\":1,\"557\":1,\"573\":1,\"600\":1,\"1203\":1,\"1204\":1}}],[\"lipasti\",{\"1\":{\"543\":1,\"606\":3}}],[\"lift\",{\"0\":{\"1028\":1}}],[\"lifo\",{\"1\":{\"341\":1}}],[\"life\",{\"0\":{\"204\":1}}],[\"libhello\",{\"1\":{\"1422\":1}}],[\"libhwbinder\",{\"1\":{\"1291\":1,\"1294\":1,\"1299\":1}}],[\"libart\",{\"1\":{\"1287\":8,\"1365\":1}}],[\"libasound2\",{\"1\":{\"776\":1}}],[\"lib64\",{\"1\":{\"1287\":4}}],[\"libevent\",{\"0\":{\"947\":1,\"958\":1,\"961\":1},\"1\":{\"958\":1}}],[\"libpng12\",{\"1\":{\"776\":1}}],[\"libpcre3\",{\"1\":{\"770\":1}}],[\"libvirtd\",{\"1\":{\"725\":1}}],[\"libvirt\",{\"1\":{\"725\":3}}],[\"libncurses5\",{\"1\":{\"712\":1}}],[\"libncursesw5\",{\"1\":{\"273\":1}}],[\"libicu\",{\"1\":{\"707\":5,\"1405\":5}}],[\"libopenjdkd\",{\"1\":{\"707\":1,\"1405\":1}}],[\"libopenjdk\",{\"1\":{\"707\":4,\"1405\":4}}],[\"libomp5\",{\"1\":{\"692\":1}}],[\"libomp\",{\"1\":{\"692\":1}}],[\"libjavacore\",{\"1\":{\"707\":3,\"1405\":3}}],[\"libmedia\",{\"1\":{\"696\":2,\"1396\":2}}],[\"libsdl\",{\"1\":{\"776\":2}}],[\"libsdl1\",{\"1\":{\"776\":1}}],[\"libssl\",{\"1\":{\"770\":1}}],[\"libs\",{\"1\":{\"693\":1,\"707\":1,\"1105\":1,\"1405\":1}}],[\"libsqlite3\",{\"1\":{\"273\":1}}],[\"libllvm\",{\"1\":{\"692\":1}}],[\"liblldb\",{\"1\":{\"692\":1}}],[\"libcmake\",{\"1\":{\"1424\":3}}],[\"libcore\",{\"1\":{\"704\":2,\"705\":2,\"707\":1,\"1393\":1,\"1399\":2,\"1400\":2,\"1405\":1}}],[\"libclang1\",{\"1\":{\"692\":1}}],[\"libclang\",{\"1\":{\"692\":1}}],[\"libc++abi1\",{\"1\":{\"692\":1}}],[\"libc++abi\",{\"1\":{\"692\":1}}],[\"libc++1\",{\"1\":{\"692\":1}}],[\"libc++\",{\"1\":{\"692\":1}}],[\"libc6\",{\"1\":{\"273\":1}}],[\"lib\",{\"1\":{\"273\":1,\"274\":2,\"609\":1,\"658\":1,\"717\":2,\"725\":1,\"959\":1,\"960\":4,\"1145\":5,\"1248\":2,\"1287\":4,\"1422\":1,\"1424\":5}}],[\"libbz2\",{\"1\":{\"273\":1}}],[\"libgdbm\",{\"1\":{\"273\":1}}],[\"librabbitmq\",{\"1\":{\"841\":1}}],[\"library\",{\"0\":{\"1422\":1},\"1\":{\"658\":2,\"707\":1,\"1189\":2,\"1405\":1,\"1418\":3,\"1421\":4,\"1422\":8,\"1423\":1,\"1424\":3}}],[\"libraries\",{\"0\":{\"1423\":1},\"1\":{\"271\":1,\"707\":2,\"889\":1,\"1405\":2,\"1423\":1,\"1424\":1}}],[\"libreadline\",{\"1\":{\"273\":1}}],[\"lin\",{\"1\":{\"1099\":2}}],[\"linonos\",{\"1\":{\"1078\":1}}],[\"lint\",{\"1\":{\"943\":2}}],[\"links\",{\"1\":{\"1102\":1,\"1421\":1}}],[\"linking\",{\"1\":{\"1079\":1}}],[\"linkers\",{\"0\":{\"1456\":1}}],[\"linker\",{\"1\":{\"707\":1,\"1405\":1,\"1431\":1}}],[\"linked\",{\"0\":{\"456\":1,\"457\":1,\"458\":1,\"459\":1},\"1\":{\"458\":2,\"461\":1,\"707\":1,\"1406\":1,\"1490\":1,\"1497\":1}}],[\"link\",{\"0\":{\"1423\":1},\"1\":{\"266\":1,\"269\":3,\"458\":1,\"1423\":1,\"1431\":2}}],[\"linux电源管理\",{\"1\":{\"1603\":1}}],[\"linux内核通知链↩︎\",{\"1\":{\"1581\":1}}],[\"linux使用\",{\"1\":{\"738\":1}}],[\"linux\",{\"0\":{\"267\":1,\"269\":1,\"273\":1,\"337\":1,\"352\":1,\"450\":1,\"711\":2,\"735\":1,\"774\":1,\"959\":1,\"1084\":1,\"1452\":1,\"1555\":1,\"1642\":1},\"1\":{\"252\":2,\"268\":1,\"269\":1,\"270\":1,\"326\":4,\"352\":1,\"692\":1,\"712\":2,\"713\":3,\"725\":2,\"738\":1,\"741\":1,\"746\":1,\"774\":2,\"775\":1,\"789\":1,\"853\":1,\"916\":1,\"985\":1,\"1143\":2,\"1145\":7,\"1291\":1,\"1309\":1,\"1452\":1,\"1454\":2,\"1459\":3,\"1463\":1,\"1464\":1,\"1479\":1,\"1515\":1,\"1520\":1,\"1529\":1,\"1534\":2,\"1542\":2,\"1549\":1,\"1553\":1,\"1558\":2,\"1560\":1,\"1570\":1,\"1584\":1,\"1586\":1,\"1589\":2,\"1606\":1,\"1619\":1},\"2\":{\"720\":1,\"721\":1,\"755\":1,\"756\":1,\"787\":1,\"788\":1,\"1089\":1,\"1455\":1,\"1466\":1}}],[\"linetension\",{\"1\":{\"892\":1}}],[\"linenumbertable\",{\"1\":{\"664\":3}}],[\"lineno\",{\"1\":{\"289\":3}}],[\"linear\",{\"1\":{\"558\":1,\"1591\":2}}],[\"linecache\",{\"0\":{\"353\":1,\"354\":1,\"355\":1,\"359\":1,\"360\":1},\"1\":{\"289\":2,\"353\":1,\"354\":6,\"355\":1,\"356\":3,\"359\":1,\"360\":1}}],[\"lines\",{\"0\":{\"356\":1},\"1\":{\"204\":1,\"289\":4,\"315\":2,\"329\":2,\"355\":1,\"357\":1,\"360\":1,\"751\":2,\"957\":1,\"1084\":1,\"1507\":1}}],[\"line\",{\"0\":{\"195\":1,\"357\":1,\"501\":1},\"1\":{\"190\":1,\"194\":1,\"195\":7,\"196\":1,\"198\":1,\"200\":3,\"201\":3,\"203\":4,\"204\":8,\"208\":1,\"217\":3,\"221\":3,\"224\":2,\"225\":1,\"234\":2,\"289\":9,\"309\":1,\"340\":1,\"354\":14,\"355\":1,\"356\":4,\"358\":3,\"359\":3,\"360\":5,\"387\":2,\"436\":1,\"664\":5,\"679\":5,\"751\":1,\"774\":1,\"892\":1,\"1056\":1,\"1159\":3,\"1507\":4,\"1623\":1}}],[\"likely\",{\"1\":{\"562\":1}}],[\"likelihood\",{\"1\":{\"256\":1,\"600\":1}}],[\"likewise\",{\"1\":{\"236\":1,\"245\":1}}],[\"like\",{\"1\":{\"234\":1,\"408\":1,\"543\":1,\"551\":1,\"559\":2,\"775\":1,\"785\":1,\"820\":3,\"892\":1,\"941\":1,\"1075\":1,\"1079\":1,\"1099\":1,\"1616\":1}}],[\"lis\",{\"1\":{\"172\":1,\"421\":3}}],[\"list<abstracthandler>\",{\"1\":{\"1627\":2}}],[\"listed\",{\"1\":{\"778\":1}}],[\"listenoverflows\",{\"1\":{\"984\":1}}],[\"listening\",{\"1\":{\"952\":1}}],[\"listen\",{\"0\":{\"951\":1},\"1\":{\"759\":1,\"760\":3,\"761\":3,\"766\":1,\"951\":2,\"952\":1,\"961\":3,\"962\":2,\"982\":1,\"983\":1}}],[\"list2int\",{\"0\":{\"394\":1},\"1\":{\"394\":2}}],[\"lists\",{\"1\":{\"309\":1}}],[\"listdir\",{\"0\":{\"348\":1},\"1\":{\"298\":1,\"348\":2}}],[\"list\",{\"0\":{\"340\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"505\":1},\"1\":{\"8\":4,\"9\":5,\"10\":7,\"11\":4,\"12\":3,\"13\":5,\"14\":3,\"15\":2,\"19\":2,\"20\":3,\"21\":1,\"33\":2,\"34\":2,\"36\":1,\"42\":4,\"43\":1,\"46\":1,\"47\":10,\"58\":2,\"59\":2,\"60\":1,\"61\":2,\"74\":6,\"75\":8,\"77\":2,\"79\":7,\"80\":7,\"81\":1,\"84\":2,\"86\":5,\"87\":2,\"88\":20,\"90\":4,\"92\":1,\"102\":4,\"120\":1,\"122\":1,\"124\":1,\"125\":1,\"130\":2,\"134\":1,\"136\":1,\"138\":1,\"146\":1,\"149\":2,\"150\":3,\"152\":4,\"153\":1,\"154\":1,\"155\":6,\"156\":1,\"157\":1,\"159\":1,\"160\":2,\"165\":5,\"169\":2,\"173\":2,\"182\":1,\"184\":3,\"185\":2,\"186\":1,\"270\":2,\"285\":1,\"288\":1,\"289\":5,\"297\":1,\"298\":1,\"299\":3,\"307\":1,\"315\":4,\"339\":1,\"340\":8,\"341\":5,\"343\":2,\"358\":1,\"360\":1,\"388\":4,\"394\":3,\"395\":1,\"396\":1,\"401\":5,\"402\":2,\"458\":3,\"461\":1,\"466\":2,\"467\":1,\"486\":4,\"502\":3,\"504\":1,\"620\":1,\"624\":1,\"671\":15,\"691\":1,\"781\":1,\"825\":2,\"1095\":1,\"1145\":1,\"1159\":1,\"1186\":1,\"1221\":1,\"1243\":1,\"1264\":3,\"1275\":1,\"1316\":6,\"1340\":1,\"1341\":1,\"1428\":2,\"1575\":2,\"1590\":2,\"1599\":2,\"1600\":3,\"1602\":8,\"1607\":15,\"1608\":4,\"1646\":3}}],[\"lambs\",{\"1\":{\"1623\":1}}],[\"lambda\",{\"1\":{\"184\":1,\"398\":2,\"401\":1,\"402\":1}}],[\"landmark\",{\"1\":{\"1623\":1}}],[\"lang=\",{\"1\":{\"1004\":1}}],[\"lang\",{\"0\":{\"1402\":1},\"1\":{\"659\":1,\"661\":1,\"664\":5,\"674\":1,\"705\":2,\"706\":16,\"707\":7,\"1057\":1,\"1099\":1,\"1113\":1,\"1400\":2,\"1402\":14,\"1403\":2,\"1405\":7}}],[\"languages\",{\"1\":{\"606\":1}}],[\"language\",{\"1\":{\"271\":1,\"999\":1,\"1009\":1,\"1178\":1}}],[\"latter\",{\"1\":{\"1483\":1}}],[\"latent\",{\"1\":{\"1553\":2}}],[\"latency\",{\"1\":{\"210\":1,\"227\":2,\"256\":1,\"552\":1,\"558\":1,\"559\":1,\"564\":2,\"604\":1,\"1518\":1}}],[\"latex模板常见文件类型\",{\"1\":{\"1179\":1}}],[\"latex\",{\"0\":{\"1174\":1,\"1179\":1,\"1180\":1},\"1\":{\"1174\":1,\"1176\":1,\"1179\":4,\"1182\":1},\"2\":{\"1184\":1}}],[\"lateinit\",{\"1\":{\"707\":1,\"1405\":1}}],[\"late\",{\"1\":{\"552\":1,\"1551\":3}}],[\"latest\",{\"0\":{\"916\":1},\"1\":{\"383\":1,\"610\":1,\"611\":1,\"820\":1,\"848\":1,\"888\":1,\"890\":2,\"916\":2,\"917\":1,\"1101\":1,\"1435\":1}}],[\"later\",{\"1\":{\"237\":1,\"245\":2,\"1487\":1,\"1490\":1,\"1495\":1,\"1497\":1}}],[\"layered\",{\"1\":{\"1571\":1}}],[\"layer6\",{\"1\":{\"1186\":1}}],[\"layer5\",{\"1\":{\"1186\":1}}],[\"layer4\",{\"1\":{\"1186\":1}}],[\"layer3\",{\"1\":{\"1186\":1}}],[\"layer2\",{\"1\":{\"1185\":3,\"1186\":1}}],[\"layer1\",{\"1\":{\"1185\":7,\"1186\":1}}],[\"layer\",{\"0\":{\"1302\":1},\"1\":{\"1161\":1,\"1492\":1}}],[\"layers\",{\"1\":{\"970\":1,\"1185\":1}}],[\"layout↩︎\",{\"1\":{\"708\":1}}],[\"layout\",{\"1\":{\"675\":1,\"676\":1,\"677\":1,\"1076\":2,\"1105\":1,\"1487\":1}}],[\"lazy=\",{\"1\":{\"940\":1}}],[\"lazy\",{\"1\":{\"940\":1}}],[\"large\",{\"1\":{\"552\":1,\"553\":1,\"556\":1,\"584\":1,\"1333\":1,\"1623\":2}}],[\"largestnumber\",{\"1\":{\"184\":2,\"185\":1}}],[\"largest\",{\"1\":{\"182\":2}}],[\"lable\",{\"1\":{\"1057\":1}}],[\"labs\",{\"1\":{\"539\":1}}],[\"labels=tf\",{\"1\":{\"1185\":1}}],[\"labels=labels\",{\"1\":{\"892\":1}}],[\"labels文件夹内\",{\"1\":{\"1159\":1}}],[\"labels\",{\"1\":{\"892\":3}}],[\"label\",{\"1\":{\"520\":3,\"521\":2,\"691\":1,\"892\":1,\"1057\":1,\"1106\":4,\"1162\":1,\"1320\":2}}],[\"lastupdated\",{\"1\":{\"910\":2,\"933\":2}}],[\"lastmodified\",{\"1\":{\"793\":4}}],[\"lastly\",{\"1\":{\"559\":1}}],[\"last=true\",{\"1\":{\"302\":1,\"406\":1}}],[\"last=false\",{\"1\":{\"302\":1,\"303\":2}}],[\"laststoneweightii\",{\"1\":{\"125\":1}}],[\"last\",{\"1\":{\"35\":2,\"125\":1,\"155\":2,\"302\":1,\"303\":1,\"339\":1,\"341\":1,\"436\":1,\"553\":1,\"556\":3,\"583\":1,\"664\":1,\"897\":1,\"955\":1,\"983\":1,\"1101\":1,\"1113\":1,\"1219\":1,\"1573\":1,\"1590\":1}}],[\"lot\",{\"1\":{\"1623\":2}}],[\"loved\",{\"1\":{\"1623\":1}}],[\"love\",{\"1\":{\"1623\":1}}],[\"los\",{\"1\":{\"1020\":1}}],[\"losses\",{\"1\":{\"681\":1,\"682\":2,\"1185\":2,\"1186\":3}}],[\"loss\",{\"1\":{\"558\":2,\"986\":1,\"1185\":6,\"1212\":10,\"1623\":1}}],[\"lockfile\",{\"1\":{\"1648\":2}}],[\"locking\",{\"1\":{\"1571\":1}}],[\"lockdep\",{\"1\":{\"1524\":2}}],[\"locks\",{\"1\":{\"1366\":1}}],[\"lock\",{\"1\":{\"676\":15,\"856\":2,\"1544\":3,\"1563\":5,\"1570\":3,\"1575\":5,\"1590\":1,\"1600\":1,\"1607\":9}}],[\"localization\",{\"1\":{\"1202\":1}}],[\"locality\",{\"0\":{\"192\":2,\"573\":1,\"574\":1,\"600\":1},\"1\":{\"191\":4,\"193\":1,\"573\":4,\"582\":1,\"599\":2,\"600\":2,\"604\":2,\"606\":3}}],[\"locale\",{\"1\":{\"1113\":1}}],[\"localport\",{\"1\":{\"982\":1}}],[\"localtion\",{\"1\":{\"759\":1}}],[\"localstorage\",{\"0\":{\"924\":1},\"1\":{\"925\":4,\"927\":6}}],[\"localsocket\",{\"1\":{\"703\":4}}],[\"localsocketaddress\",{\"1\":{\"703\":2}}],[\"locals\",{\"1\":{\"664\":1}}],[\"locals=3\",{\"1\":{\"664\":1}}],[\"locals=1\",{\"1\":{\"664\":1}}],[\"localnet\",{\"1\":{\"609\":1}}],[\"localhost\",{\"1\":{\"371\":1,\"609\":3,\"612\":1,\"616\":1,\"760\":1,\"761\":2,\"763\":2,\"764\":2,\"765\":2,\"766\":1,\"796\":1,\"836\":1,\"843\":1,\"959\":1,\"982\":1,\"1074\":1,\"1076\":3,\"1099\":1}}],[\"local\",{\"0\":{\"1517\":1},\"1\":{\"273\":2,\"274\":1,\"275\":1,\"418\":7,\"542\":2,\"543\":2,\"545\":1,\"556\":4,\"692\":1,\"759\":3,\"785\":1,\"930\":1,\"931\":1,\"959\":3,\"1057\":1,\"1074\":1,\"1263\":1,\"1418\":1,\"1424\":11,\"1453\":4,\"1516\":2,\"1517\":8,\"1518\":1,\"1520\":1,\"1521\":1,\"1542\":1,\"1545\":4,\"1645\":1}}],[\"locating\",{\"1\":{\"1204\":1}}],[\"locations\",{\"1\":{\"196\":1,\"1189\":3}}],[\"location\",{\"1\":{\"196\":1,\"203\":1,\"245\":1,\"250\":1,\"572\":3,\"573\":2,\"600\":1,\"707\":1,\"759\":4,\"760\":4,\"761\":3,\"766\":1,\"1094\":1,\"1127\":1,\"1381\":2,\"1405\":1,\"1487\":1,\"1620\":1}}],[\"located\",{\"1\":{\"245\":1,\"851\":1}}],[\"lopp\",{\"1\":{\"544\":1}}],[\"lo\",{\"1\":{\"517\":2}}],[\"log=0x1\",{\"1\":{\"1145\":1}}],[\"log=info\",{\"1\":{\"324\":1}}],[\"logged\",{\"1\":{\"781\":1}}],[\"logging\",{\"0\":{\"319\":1,\"322\":1,\"325\":1,\"326\":1},\"1\":{\"288\":3,\"289\":3,\"320\":3,\"321\":8,\"323\":2,\"324\":1,\"325\":2,\"326\":4,\"347\":2}}],[\"logs\",{\"1\":{\"759\":1}}],[\"logit\",{\"1\":{\"1186\":2}}],[\"logits函数来加速交叉熵的计算\",{\"1\":{\"1185\":1}}],[\"logits=y\",{\"1\":{\"1185\":1}}],[\"logits\",{\"1\":{\"1185\":1,\"1212\":1}}],[\"login\",{\"0\":{\"804\":1},\"1\":{\"622\":2,\"781\":2,\"1053\":2}}],[\"logical\",{\"1\":{\"820\":1}}],[\"logic\",{\"1\":{\"543\":2,\"1326\":3,\"1620\":1}}],[\"logn\",{\"1\":{\"492\":1,\"1169\":1,\"1171\":2}}],[\"log\",{\"0\":{\"321\":1},\"1\":{\"323\":1,\"326\":1,\"331\":1,\"510\":1,\"702\":2,\"706\":2,\"707\":3,\"747\":3,\"758\":1,\"759\":3,\"927\":1,\"941\":2,\"1004\":1,\"1052\":1,\"1145\":1,\"1212\":1,\"1221\":1,\"1249\":5,\"1365\":2,\"1403\":2,\"1405\":3},\"2\":{\"1059\":1}}],[\"longer\",{\"1\":{\"243\":1,\"550\":1,\"559\":1,\"1198\":1,\"1520\":1,\"1523\":1,\"1591\":1,\"1611\":1}}],[\"longestcommonprefix\",{\"1\":{\"397\":2}}],[\"longest\",{\"1\":{\"108\":1,\"314\":1,\"397\":1,\"559\":4}}],[\"longestincreasingpath\",{\"1\":{\"74\":3}}],[\"long\",{\"1\":{\"237\":1,\"543\":1,\"549\":1,\"552\":1,\"553\":1,\"556\":1,\"559\":1,\"562\":1,\"586\":1,\"955\":1,\"975\":1,\"1307\":2,\"1313\":2,\"1314\":1,\"1344\":3,\"1469\":5,\"1471\":1,\"1567\":3,\"1570\":1,\"1573\":3,\"1576\":8,\"1577\":1,\"1590\":1,\"1592\":2,\"1600\":3,\"1623\":1}}],[\"loading\",{\"1\":{\"1161\":1}}],[\"loadbalance\",{\"1\":{\"763\":1,\"764\":1,\"765\":1}}],[\"loadnativelibrary\",{\"1\":{\"707\":3,\"1405\":3}}],[\"loadlibrary\",{\"1\":{\"696\":2,\"707\":2,\"1396\":2,\"1405\":2}}],[\"loaders\",{\"0\":{\"1456\":1}}],[\"loader\",{\"1\":{\"942\":2,\"1365\":1,\"1476\":6,\"1483\":2,\"1487\":3}}],[\"loader=yaml\",{\"1\":{\"388\":1}}],[\"loaded\",{\"1\":{\"580\":2,\"599\":1,\"600\":1,\"707\":2,\"1191\":1,\"1405\":2,\"1483\":1,\"1490\":1,\"1497\":2,\"1499\":1}}],[\"loads\",{\"1\":{\"410\":1,\"584\":1,\"599\":1,\"600\":2,\"601\":4,\"602\":3,\"1094\":1,\"1192\":3,\"1487\":1,\"1490\":1,\"1493\":1,\"1494\":2,\"1495\":1,\"1496\":1}}],[\"load\",{\"0\":{\"603\":1,\"1191\":1,\"1487\":1,\"1493\":1,\"1494\":1,\"1495\":1,\"1496\":1},\"1\":{\"227\":3,\"235\":6,\"245\":8,\"298\":1,\"388\":1,\"529\":2,\"539\":1,\"541\":1,\"548\":3,\"580\":11,\"582\":2,\"583\":2,\"584\":6,\"586\":1,\"587\":2,\"599\":8,\"600\":2,\"601\":2,\"602\":3,\"603\":1,\"604\":4,\"606\":4,\"623\":1,\"640\":1,\"692\":3,\"1221\":1,\"1463\":4,\"1487\":5,\"1492\":3,\"1494\":1,\"1495\":1,\"1496\":1,\"1618\":1,\"1620\":2}}],[\"lowest\",{\"1\":{\"1623\":1}}],[\"lower\",{\"0\":{\"209\":1},\"1\":{\"193\":1,\"237\":1,\"243\":1,\"245\":1,\"343\":1,\"492\":1,\"558\":1,\"1483\":8,\"1485\":1,\"1507\":1,\"1623\":1}}],[\"low\",{\"1\":{\"227\":2,\"241\":1,\"243\":1,\"321\":1,\"543\":1,\"676\":1,\"941\":1,\"1501\":2,\"1507\":1,\"1508\":1,\"1590\":1,\"1623\":2}}],[\"look\",{\"1\":{\"509\":3,\"1150\":1,\"1151\":2}}],[\"lookups\",{\"1\":{\"552\":1,\"553\":1,\"599\":1}}],[\"lookup\",{\"1\":{\"454\":1,\"556\":1,\"558\":1}}],[\"lookaside\",{\"1\":{\"255\":1,\"256\":1,\"1522\":1}}],[\"looks\",{\"1\":{\"194\":2,\"785\":1}}],[\"looper\",{\"1\":{\"1299\":6,\"1301\":1,\"1310\":3,\"1316\":3}}],[\"loopback\",{\"1\":{\"609\":1}}],[\"loops\",{\"1\":{\"543\":2,\"546\":2,\"552\":2,\"559\":1}}],[\"looping\",{\"1\":{\"420\":1}}],[\"loop\",{\"0\":{\"509\":1,\"1231\":1},\"1\":{\"192\":1,\"542\":1,\"546\":3,\"552\":4,\"559\":1,\"1228\":2,\"1231\":1,\"1515\":2,\"1516\":1}}],[\"lombda\",{\"1\":{\"172\":1}}],[\"l+r\",{\"1\":{\"165\":1}}],[\"l\",{\"1\":{\"19\":5,\"20\":8,\"21\":7,\"23\":5,\"25\":5,\"26\":5,\"30\":7,\"31\":4,\"32\":10,\"33\":9,\"34\":13,\"35\":12,\"56\":2,\"150\":3,\"165\":1,\"166\":6,\"177\":2,\"186\":1,\"339\":5,\"360\":2,\"392\":1,\"396\":2,\"446\":1,\"496\":6,\"618\":1,\"718\":1,\"843\":1,\"959\":1,\"1020\":1,\"1231\":1,\"1246\":1,\"1294\":1,\"1634\":1}}],[\"lcfr\",{\"1\":{\"719\":1}}],[\"lct\",{\"0\":{\"602\":1},\"1\":{\"599\":1,\"601\":1,\"602\":2,\"603\":2}}],[\"lcm\",{\"0\":{\"399\":1},\"1\":{\"399\":1}}],[\"lcd\",{\"0\":{\"398\":1}}],[\"lcci>\",{\"1\":{\"168\":1}}],[\"lc953\",{\"0\":{\"186\":1}}],[\"lc905\",{\"0\":{\"169\":1}}],[\"lc930\",{\"1\":{\"144\":1}}],[\"lc977\",{\"0\":{\"87\":1}}],[\"lc589\",{\"1\":{\"486\":1}}],[\"lc521\",{\"0\":{\"479\":1},\"1\":{\"479\":1}}],[\"lc523\",{\"0\":{\"156\":1}}],[\"lc525\",{\"0\":{\"158\":1},\"1\":{\"144\":1}}],[\"lc560\",{\"0\":{\"151\":1},\"1\":{\"144\":2,\"157\":1,\"158\":1}}],[\"lc518\",{\"1\":{\"115\":1}}],[\"lc543\",{\"0\":{\"62\":1}}],[\"lcsuff\",{\"1\":{\"108\":6}}],[\"lcsubstr\",{\"1\":{\"108\":2}}],[\"lcs\",{\"0\":{\"105\":1},\"1\":{\"106\":1},\"2\":{\"110\":1}}],[\"lc653\",{\"0\":{\"494\":1}}],[\"lc693\",{\"1\":{\"400\":1}}],[\"lc638\",{\"0\":{\"102\":1}}],[\"lc606\",{\"0\":{\"49\":1}}],[\"lc279\",{\"1\":{\"115\":1}}],[\"lc2024\",{\"0\":{\"164\":1}}],[\"lc2055\",{\"0\":{\"150\":1},\"1\":{\"150\":1}}],[\"lc209\",{\"0\":{\"160\":1},\"1\":{\"144\":1}}],[\"lc2039\",{\"0\":{\"90\":1}}],[\"lc200\",{\"0\":{\"76\":1,\"85\":1}}],[\"lc210\",{\"0\":{\"86\":1}}],[\"lc22\",{\"0\":{\"9\":1}}],[\"lc841\",{\"0\":{\"75\":1,\"84\":1}}],[\"lc875\",{\"0\":{\"34\":1}}],[\"lc377\",{\"1\":{\"115\":1}}],[\"lc322\",{\"1\":{\"115\":1}}],[\"lc329\",{\"0\":{\"74\":1}}],[\"lc365\",{\"0\":{\"91\":1}}],[\"lc386\",{\"0\":{\"77\":1}}],[\"lc39\",{\"0\":{\"10\":1},\"1\":{\"11\":1}}],[\"lc160\",{\"1\":{\"459\":1}}],[\"lc1513\",{\"0\":{\"167\":1}}],[\"lc1588\",{\"0\":{\"149\":1},\"1\":{\"149\":1}}],[\"lc139\",{\"1\":{\"115\":1}}],[\"lc133\",{\"0\":{\"89\":1}}],[\"lc111\",{\"0\":{\"53\":1},\"1\":{\"88\":1}}],[\"lc103\",{\"0\":{\"61\":1}}],[\"lc107\",{\"0\":{\"60\":1}}],[\"lc1049\",{\"0\":{\"125\":1},\"1\":{\"114\":1}}],[\"lc104\",{\"0\":{\"55\":1}}],[\"lc101\",{\"0\":{\"50\":1}}],[\"lc102\",{\"0\":{\"58\":1},\"1\":{\"47\":1}}],[\"lc179\",{\"0\":{\"182\":1}}],[\"lc1744\",{\"0\":{\"155\":1},\"1\":{\"144\":1,\"155\":1}}],[\"lc17\",{\"0\":{\"8\":1}}],[\"lc724\",{\"1\":{\"144\":1}}],[\"lc752\",{\"0\":{\"88\":1}}],[\"lc719\",{\"0\":{\"36\":1}}],[\"lc77\",{\"0\":{\"14\":1}}],[\"lc\",{\"0\":{\"121\":1,\"123\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"157\":1},\"1\":{\"26\":1,\"299\":1}}],[\"lc450\",{\"0\":{\"499\":1}}],[\"lc494\",{\"1\":{\"114\":1}}],[\"lc416\",{\"1\":{\"114\":1}}],[\"lc417\",{\"0\":{\"78\":1}}],[\"lc433\",{\"0\":{\"92\":1}}],[\"lc474\",{\"0\":{\"119\":1},\"1\":{\"114\":1}}],[\"lc473\",{\"0\":{\"15\":1}}],[\"lc47\",{\"0\":{\"13\":1}}],[\"lc46\",{\"0\":{\"12\":1}}],[\"lc40\",{\"0\":{\"11\":1},\"1\":{\"11\":1}}],[\"leds\",{\"1\":{\"1483\":1}}],[\"led\",{\"1\":{\"1483\":12}}],[\"legacy\",{\"1\":{\"916\":1,\"1499\":1}}],[\"legal\",{\"1\":{\"692\":1}}],[\"legend=legend\",{\"1\":{\"892\":1}}],[\"legend\",{\"1\":{\"892\":2}}],[\"legb\",{\"1\":{\"418\":1}}],[\"leb128\",{\"1\":{\"670\":1}}],[\"le\",{\"1\":{\"517\":2}}],[\"leverages\",{\"1\":{\"1124\":1}}],[\"leverage\",{\"1\":{\"543\":1,\"1208\":1}}],[\"leveraging\",{\"1\":{\"271\":1,\"557\":1}}],[\"level=logging\",{\"1\":{\"288\":1,\"323\":1,\"324\":1,\"326\":2}}],[\"levels↩︎\",{\"1\":{\"1502\":1}}],[\"levels=1\",{\"1\":{\"766\":1}}],[\"levels\",{\"1\":{\"193\":2,\"321\":1,\"1207\":1,\"1508\":1,\"1509\":1}}],[\"levelorder\",{\"1\":{\"47\":3,\"59\":1}}],[\"level\",{\"0\":{\"321\":1,\"389\":1,\"488\":1},\"1\":{\"47\":9,\"227\":2,\"253\":1,\"256\":3,\"321\":5,\"543\":2,\"545\":1,\"555\":3,\"556\":1,\"558\":1,\"568\":1,\"582\":1,\"941\":1,\"1418\":1,\"1419\":1,\"1483\":1,\"1485\":1,\"1499\":1,\"1501\":3,\"1623\":1}}],[\"lea\",{\"1\":{\"1463\":1}}],[\"leak\",{\"1\":{\"1366\":1}}],[\"least\",{\"0\":{\"765\":1},\"1\":{\"765\":1}}],[\"leaveq\",{\"1\":{\"1463\":2}}],[\"leave\",{\"1\":{\"427\":8,\"1520\":1,\"1522\":2}}],[\"learning的思想\",{\"1\":{\"1185\":1}}],[\"learning\",{\"1\":{\"383\":1,\"1009\":1,\"1185\":6,\"1189\":1,\"1212\":5,\"1219\":1}}],[\"learn\",{\"1\":{\"271\":1,\"1056\":1}}],[\"leaders\",{\"1\":{\"1623\":1}}],[\"leading\",{\"1\":{\"586\":1}}],[\"leads\",{\"1\":{\"557\":1,\"558\":2,\"1203\":2,\"1483\":1,\"1494\":1}}],[\"lead\",{\"1\":{\"235\":1,\"556\":1}}],[\"letex\",{\"0\":{\"1105\":1}}],[\"lets\",{\"1\":{\"271\":1}}],[\"let\",{\"0\":{\"912\":1},\"1\":{\"194\":1,\"624\":1,\"1054\":1,\"1060\":1,\"1201\":1,\"1259\":1,\"1328\":6,\"1623\":3}}],[\"letters\",{\"1\":{\"391\":1,\"404\":1}}],[\"lettercombinations\",{\"1\":{\"8\":1}}],[\"letter\",{\"1\":{\"8\":1}}],[\"leet\",{\"1\":{\"138\":2}}],[\"leetcode\",{\"1\":{\"8\":2,\"10\":2,\"11\":2,\"34\":2,\"49\":1,\"62\":1,\"75\":2,\"76\":2,\"77\":1,\"78\":1,\"86\":2,\"87\":2,\"92\":3,\"125\":1,\"138\":2,\"151\":2,\"155\":2,\"156\":2,\"158\":2,\"160\":2,\"164\":2,\"165\":1,\"167\":2,\"168\":2,\"169\":2,\"173\":1,\"182\":1,\"184\":1,\"186\":3,\"297\":1,\"299\":1,\"390\":1,\"397\":1,\"401\":2,\"467\":1,\"468\":1,\"480\":1,\"491\":2,\"1469\":1},\"2\":{\"110\":1,\"483\":1}}],[\"lexicalorder\",{\"1\":{\"77\":2}}],[\"lexicographical\",{\"1\":{\"77\":1}}],[\"less\",{\"1\":{\"20\":2,\"235\":1,\"237\":1,\"245\":1,\"557\":1,\"558\":1,\"576\":1,\"692\":1,\"793\":1,\"942\":1,\"1203\":1,\"1212\":2,\"1501\":1}}],[\"left=none\",{\"1\":{\"42\":1,\"54\":1,\"499\":1}}],[\"leftmost\",{\"1\":{\"21\":2}}],[\"left\",{\"1\":{\"9\":6,\"19\":1,\"20\":1,\"21\":1,\"22\":10,\"27\":2,\"36\":8,\"42\":5,\"43\":2,\"45\":1,\"46\":1,\"47\":6,\"49\":4,\"51\":13,\"52\":17,\"54\":5,\"56\":2,\"57\":2,\"59\":2,\"61\":2,\"62\":4,\"64\":1,\"122\":4,\"124\":8,\"125\":4,\"150\":4,\"160\":1,\"165\":8,\"169\":13,\"245\":1,\"341\":3,\"401\":4,\"465\":1,\"493\":2,\"495\":1,\"496\":1,\"499\":24,\"896\":2,\"989\":1,\"1219\":1,\"1597\":1}}],[\"lenet实现mnist\",{\"0\":{\"1186\":1}}],[\"len2|\",{\"1\":{\"459\":1}}],[\"len6\",{\"1\":{\"285\":1}}],[\"lengths\",{\"1\":{\"559\":1,\"562\":1,\"1203\":1}}],[\"length\",{\"0\":{\"673\":1},\"1\":{\"75\":1,\"108\":1,\"149\":8,\"204\":2,\"234\":1,\"308\":1,\"314\":1,\"361\":1,\"375\":1,\"480\":2,\"481\":4,\"511\":2,\"559\":1,\"562\":1,\"673\":4,\"674\":1,\"675\":2,\"682\":2,\"978\":1,\"1590\":1,\"1591\":1,\"1599\":1,\"1600\":1,\"1602\":1,\"1607\":2,\"1608\":1}}],[\"len\",{\"1\":{\"8\":1,\"9\":2,\"10\":1,\"11\":1,\"12\":3,\"13\":3,\"14\":2,\"15\":4,\"19\":2,\"20\":2,\"21\":3,\"26\":1,\"30\":2,\"32\":2,\"33\":4,\"47\":2,\"59\":1,\"61\":1,\"74\":9,\"75\":7,\"76\":4,\"79\":2,\"80\":2,\"84\":2,\"85\":2,\"86\":1,\"90\":2,\"102\":2,\"108\":2,\"115\":1,\"118\":1,\"138\":5,\"147\":1,\"149\":4,\"150\":1,\"152\":4,\"153\":4,\"154\":1,\"159\":4,\"160\":4,\"166\":1,\"169\":1,\"178\":2,\"183\":3,\"184\":7,\"186\":3,\"285\":1,\"289\":4,\"299\":4,\"313\":1,\"315\":1,\"329\":1,\"340\":2,\"375\":1,\"397\":1,\"401\":4,\"420\":2,\"460\":1,\"466\":2,\"479\":2,\"480\":1,\"496\":1,\"511\":1,\"949\":1,\"950\":4,\"955\":1,\"956\":3,\"1469\":1}}],[\"力扣\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"75\":1,\"76\":1,\"86\":1,\"87\":1,\"92\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1}}],[\"c3stop\",{\"1\":{\"1542\":2}}],[\"c3\",{\"1\":{\"1463\":2,\"1542\":1}}],[\"c9\",{\"1\":{\"1463\":2}}],[\"c6\",{\"1\":{\"1463\":1}}],[\"c7\",{\"1\":{\"1463\":2}}],[\"c7e80000\",{\"1\":{\"1463\":1}}],[\"c745f801\",{\"1\":{\"1463\":2}}],[\"czf\",{\"1\":{\"1454\":1}}],[\"ckpt\",{\"1\":{\"1217\":3}}],[\"cwnd\",{\"1\":{\"987\":15}}],[\"cwr\",{\"1\":{\"986\":1}}],[\"cwg\",{\"1\":{\"367\":1}}],[\"cglib\",{\"1\":{\"878\":1}}],[\"cga\",{\"1\":{\"776\":1}}],[\"cgroups\",{\"1\":{\"724\":1}}],[\"c28b45f8\",{\"1\":{\"1463\":1}}],[\"c2=\",{\"1\":{\"810\":1}}],[\"c2\",{\"1\":{\"653\":2,\"655\":1,\"810\":1,\"1463\":2}}],[\"ccu\",{\"1\":{\"1486\":1}}],[\"cci\",{\"1\":{\"1486\":2,\"1502\":1}}],[\"cc\",{\"0\":{\"1386\":1},\"1\":{\"609\":1,\"706\":2,\"707\":1,\"708\":1,\"998\":1,\"1179\":1,\"1365\":1,\"1366\":1,\"1367\":1,\"1376\":1,\"1380\":2,\"1386\":3,\"1388\":2,\"1402\":2,\"1405\":1,\"1440\":9,\"1441\":1,\"1445\":5,\"1554\":1,\"1626\":1,\"1627\":1,\"1629\":1}}],[\"ctrl=0时\",{\"1\":{\"1528\":1}}],[\"ctrl=1时\",{\"1\":{\"1528\":1}}],[\"ctrl可以作为一个调度器选项\",{\"1\":{\"1528\":1}}],[\"ctrl++alt+t打开命令行\",{\"1\":{\"1145\":1}}],[\"ctrl+d\",{\"1\":{\"856\":1}}],[\"ctan\",{\"1\":{\"1177\":1}}],[\"ctex\",{\"1\":{\"1176\":1}}],[\"cteate\",{\"0\":{\"791\":1}}],[\"ctype\",{\"1\":{\"1094\":1}}],[\"ctl\",{\"1\":{\"955\":6}}],[\"ctx\",{\"1\":{\"892\":2,\"962\":2}}],[\"cts\",{\"1\":{\"643\":1}}],[\"ct\",{\"0\":{\"576\":1},\"1\":{\"575\":2,\"576\":4,\"577\":2}}],[\"cm2\",{\"1\":{\"1623\":1}}],[\"cmos\",{\"1\":{\"1509\":1}}],[\"cmd\",{\"1\":{\"1177\":1,\"1300\":1,\"1307\":4,\"1312\":1,\"1313\":3,\"1314\":3,\"1316\":2,\"1320\":2,\"1333\":7}}],[\"cmakefiles\",{\"1\":{\"1432\":1}}],[\"cmakecache\",{\"1\":{\"1432\":1}}],[\"cmakelists\",{\"1\":{\"1414\":2,\"1434\":4}}],[\"cmake\",{\"0\":{\"1412\":1},\"1\":{\"775\":1,\"1413\":3,\"1414\":1,\"1417\":1,\"1418\":12,\"1419\":13,\"1424\":22,\"1425\":4,\"1427\":6,\"1428\":3,\"1429\":4,\"1431\":5,\"1432\":4,\"1434\":1,\"1435\":3}}],[\"cms\",{\"1\":{\"676\":12}}],[\"cm\",{\"1\":{\"562\":1,\"793\":1}}],[\"cmp\",{\"0\":{\"173\":1},\"1\":{\"173\":3,\"185\":1,\"186\":3}}],[\"cvtcolor\",{\"0\":{\"1195\":1},\"1\":{\"1195\":1}}],[\"cv2\",{\"1\":{\"1189\":5}}],[\"cv\",{\"1\":{\"955\":1,\"1196\":1,\"1198\":1},\"2\":{\"1141\":1,\"1164\":1,\"1200\":1,\"1214\":1,\"1223\":1}}],[\"cvu\",{\"0\":{\"602\":1},\"1\":{\"601\":2,\"602\":9,\"603\":4}}],[\"cvpr\",{\"0\":{\"1148\":1}}],[\"cvpr2018\",{\"1\":{\"1130\":1}}],[\"cvp\",{\"0\":{\"585\":1,\"586\":1},\"1\":{\"541\":1,\"583\":2,\"586\":2,\"606\":1}}],[\"cval\",{\"1\":{\"510\":4}}],[\"cs\",{\"1\":{\"1216\":1}}],[\"css\",{\"0\":{\"895\":1,\"896\":1,\"944\":1},\"1\":{\"896\":3,\"897\":3,\"942\":2,\"944\":1,\"1053\":1,\"1054\":1,\"1055\":3,\"1056\":1,\"1081\":4,\"1102\":1,\"1105\":4,\"1179\":1}}],[\"csis\",{\"1\":{\"1206\":1}}],[\"csitool文件目录下\",{\"1\":{\"1145\":1}}],[\"csitool\",{\"1\":{\"1145\":7}}],[\"csi的收集和误差消除\",{\"1\":{\"1012\":1}}],[\"csi\",{\"0\":{\"1020\":1,\"1024\":1,\"1143\":1,\"1206\":1},\"1\":{\"750\":1,\"1012\":11,\"1017\":1,\"1020\":6,\"1024\":11,\"1025\":1,\"1052\":1,\"1144\":2,\"1145\":5,\"1202\":2,\"1203\":2,\"1204\":6,\"1207\":1,\"1208\":1},\"2\":{\"1129\":1,\"1141\":1,\"1147\":1,\"1211\":1}}],[\"csdn\",{\"1\":{\"539\":1,\"1179\":1,\"1615\":1}}],[\"csv\",{\"0\":{\"329\":1},\"1\":{\"315\":1,\"329\":4,\"331\":1}}],[\"cb\",{\"1\":{\"961\":1,\"962\":8}}],[\"cbz\",{\"0\":{\"520\":1},\"1\":{\"517\":1,\"520\":1}}],[\"cbnz\",{\"1\":{\"517\":1,\"520\":1}}],[\"cbegin\",{\"1\":{\"344\":1}}],[\"c1=\",{\"1\":{\"810\":1}}],[\"c1\",{\"1\":{\"426\":3,\"653\":2,\"655\":1}}],[\"cyushi\",{\"1\":{\"1209\":1}}],[\"cython\",{\"1\":{\"442\":1}}],[\"cy\",{\"1\":{\"317\":1}}],[\"cycles\",{\"1\":{\"234\":1,\"245\":5,\"542\":2,\"549\":1,\"556\":1,\"557\":1,\"559\":1,\"562\":1,\"564\":3}}],[\"cycle\",{\"1\":{\"207\":2,\"212\":1,\"217\":1,\"234\":6,\"236\":10,\"237\":1,\"245\":15,\"542\":2,\"549\":3,\"552\":1,\"557\":2,\"564\":1,\"573\":1}}],[\"cxx0x\",{\"1\":{\"1427\":1}}],[\"cxx11\",{\"1\":{\"1427\":1}}],[\"cxx\",{\"1\":{\"1418\":2,\"1425\":1,\"1427\":6,\"1428\":6,\"1431\":2}}],[\"cxxflags\",{\"1\":{\"693\":1}}],[\"cx\",{\"1\":{\"317\":1}}],[\"cutoff\",{\"1\":{\"1591\":2}}],[\"cut\",{\"1\":{\"1145\":1,\"1623\":2}}],[\"customers\",{\"1\":{\"1623\":1}}],[\"customized\",{\"1\":{\"492\":1}}],[\"custom\",{\"0\":{\"941\":1,\"1106\":1},\"1\":{\"309\":1,\"760\":1,\"941\":2,\"1054\":1,\"1055\":2,\"1056\":2,\"1099\":1}}],[\"curve\",{\"1\":{\"1591\":2}}],[\"cursor\",{\"1\":{\"797\":1}}],[\"curl\",{\"1\":{\"770\":1,\"998\":1,\"1635\":2}}],[\"curnode\",{\"1\":{\"458\":6}}],[\"currently\",{\"1\":{\"1143\":1,\"1366\":1,\"1418\":1,\"1498\":1}}],[\"current\",{\"1\":{\"47\":3,\"361\":2,\"542\":1,\"552\":1,\"553\":1,\"573\":1,\"600\":1,\"707\":1,\"747\":1,\"750\":1,\"793\":1,\"850\":2,\"855\":1,\"1000\":1,\"1189\":1,\"1212\":3,\"1239\":1,\"1355\":1,\"1365\":3,\"1385\":1,\"1405\":1,\"1418\":4,\"1464\":2,\"1483\":8,\"1516\":1,\"1518\":1,\"1519\":1,\"1545\":2,\"1634\":1}}],[\"cur\",{\"1\":{\"10\":9,\"11\":8,\"64\":15,\"77\":4,\"102\":8,\"797\":3,\"1600\":2}}],[\"crit\",{\"1\":{\"1593\":1}}],[\"criticality\",{\"1\":{\"557\":2,\"558\":1}}],[\"critical\",{\"0\":{\"1527\":1},\"1\":{\"211\":1,\"227\":2,\"236\":1,\"321\":2,\"542\":1,\"543\":1,\"552\":2,\"556\":1,\"557\":1,\"1527\":4,\"1597\":1}}],[\"crc\",{\"1\":{\"1509\":1}}],[\"credential\",{\"1\":{\"1243\":3}}],[\"creating\",{\"1\":{\"850\":1,\"931\":1,\"1484\":1,\"1491\":1}}],[\"creat\",{\"1\":{\"742\":1,\"743\":1}}],[\"createvm\",{\"1\":{\"1365\":1}}],[\"createjavavm\",{\"0\":{\"1365\":1},\"1\":{\"1365\":3}}],[\"createcollection\",{\"1\":{\"794\":1}}],[\"created\",{\"1\":{\"361\":3,\"432\":2,\"621\":1,\"793\":1,\"851\":1,\"923\":1,\"1591\":1,\"1611\":1}}],[\"creates\",{\"1\":{\"285\":1,\"340\":1,\"408\":1,\"1498\":1}}],[\"create\",{\"0\":{\"1093\":1,\"1362\":1,\"1364\":1,\"1366\":1},\"1\":{\"245\":1,\"361\":1,\"616\":1,\"751\":1,\"774\":1,\"775\":1,\"785\":1,\"790\":2,\"793\":1,\"794\":2,\"797\":1,\"798\":1,\"836\":1,\"851\":1,\"858\":2,\"865\":1,\"892\":1,\"923\":1,\"940\":1,\"943\":2,\"955\":1,\"1055\":1,\"1072\":1,\"1075\":1,\"1076\":1,\"1079\":1,\"1118\":1,\"1191\":1,\"1328\":4,\"1365\":3,\"1366\":4,\"1422\":1}}],[\"crossed\",{\"1\":{\"1611\":1}}],[\"cross\",{\"1\":{\"1185\":6,\"1212\":9}}],[\"cron\",{\"1\":{\"291\":1}}],[\"crontab\",{\"0\":{\"290\":1},\"1\":{\"290\":2}}],[\"crt\",{\"1\":{\"960\":1}}],[\"crud\",{\"0\":{\"790\":1},\"1\":{\"790\":1,\"865\":1,\"1055\":1}}],[\"cr3中含有页目录表的物理内存基地址\",{\"1\":{\"252\":1}}],[\"cr3\",{\"1\":{\"252\":1}}],[\"cpacr\",{\"1\":{\"1485\":1,\"1491\":1}}],[\"cptr\",{\"1\":{\"1485\":5}}],[\"cpp11\",{\"1\":{\"1428\":1}}],[\"cpp\",{\"1\":{\"690\":1,\"691\":2,\"692\":5,\"693\":3,\"1009\":3,\"1057\":1,\"1294\":1,\"1299\":1,\"1307\":2,\"1320\":3,\"1333\":4,\"1422\":2,\"1423\":1,\"1429\":1,\"1434\":2}}],[\"cpsr\",{\"1\":{\"514\":1,\"518\":1}}],[\"cpython\",{\"1\":{\"277\":1}}],[\"cp\",{\"1\":{\"274\":1,\"613\":2,\"666\":3,\"712\":2,\"713\":1,\"717\":1,\"1145\":1}}],[\"cpi\",{\"1\":{\"234\":2}}],[\"cpufreq\",{\"1\":{\"1599\":1}}],[\"cpumask\",{\"1\":{\"1534\":6,\"1545\":5}}],[\"cpudile\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"cpu会挂起或执行某些简单指令以等待其他事件的发生\",{\"1\":{\"1528\":1}}],[\"cpuhp\",{\"1\":{\"1515\":3}}],[\"cpu6\",{\"1\":{\"1515\":10}}],[\"cpuidle\",{\"0\":{\"1518\":1,\"1519\":1,\"1520\":1,\"1522\":1,\"1532\":1,\"1533\":1,\"1534\":1},\"1\":{\"1514\":1,\"1515\":3,\"1516\":9,\"1518\":11,\"1519\":13,\"1520\":10,\"1521\":4,\"1522\":3,\"1523\":3,\"1524\":1,\"1526\":1,\"1531\":10,\"1532\":10,\"1533\":3,\"1534\":25}}],[\"cpu0\",{\"1\":{\"1499\":1}}],[\"cpuectlr\",{\"1\":{\"1485\":3}}],[\"cpus\",{\"1\":{\"1475\":6,\"1481\":2,\"1534\":1,\"1557\":1}}],[\"cpu生成一个虚拟地址\",{\"1\":{\"252\":1}}],[\"cpu\",{\"0\":{\"1515\":1,\"1529\":1},\"1\":{\"205\":1,\"214\":1,\"215\":1,\"217\":1,\"226\":3,\"227\":7,\"258\":1,\"276\":1,\"279\":1,\"280\":6,\"283\":2,\"534\":2,\"643\":1,\"670\":1,\"692\":1,\"724\":1,\"736\":2,\"738\":1,\"985\":1,\"1219\":2,\"1464\":1,\"1474\":2,\"1475\":12,\"1477\":5,\"1481\":8,\"1486\":1,\"1487\":1,\"1499\":2,\"1510\":2,\"1515\":11,\"1516\":4,\"1518\":3,\"1520\":1,\"1521\":3,\"1522\":1,\"1523\":12,\"1528\":9,\"1529\":18,\"1533\":1,\"1534\":23,\"1537\":3,\"1541\":1,\"1542\":12,\"1543\":2,\"1544\":2,\"1545\":34,\"1566\":1,\"1584\":4,\"1586\":2,\"1598\":2,\"1600\":1,\"1620\":10}}],[\"c++11\",{\"1\":{\"1427\":1}}],[\"c++\",{\"0\":{\"440\":1,\"442\":1},\"1\":{\"149\":1,\"179\":1,\"441\":1,\"465\":1,\"481\":1,\"677\":1,\"695\":2,\"775\":1,\"1056\":1,\"1057\":1,\"1333\":1,\"1395\":2,\"1418\":1,\"1427\":2,\"1431\":1,\"1460\":1},\"2\":{\"1089\":1}}],[\"cites\",{\"1\":{\"1623\":1}}],[\"city\",{\"1\":{\"1094\":1}}],[\"cifar\",{\"1\":{\"1216\":1}}],[\"cifar10\",{\"1\":{\"1216\":1,\"1219\":3}}],[\"circuit\",{\"1\":{\"1507\":3,\"1508\":1}}],[\"circuits\",{\"1\":{\"1501\":1}}],[\"cir\",{\"1\":{\"1020\":2}}],[\"cis\",{\"0\":{\"642\":1,\"643\":1},\"1\":{\"643\":1}}],[\"cin\",{\"1\":{\"455\":1}}],[\"ci\",{\"1\":{\"126\":1,\"139\":2,\"706\":1,\"774\":1,\"1402\":1}}],[\"clr\",{\"1\":{\"1519\":1}}],[\"clcd\",{\"1\":{\"1483\":1}}],[\"cluster\",{\"0\":{\"834\":1},\"1\":{\"1485\":1,\"1486\":1}}],[\"clustered\",{\"1\":{\"814\":1}}],[\"clusters\",{\"1\":{\"625\":1}}],[\"clip\",{\"1\":{\"1212\":1}}],[\"cli3\",{\"1\":{\"1054\":1}}],[\"cliaddr\",{\"1\":{\"952\":1}}],[\"cli\",{\"0\":{\"943\":1},\"1\":{\"943\":1,\"950\":2}}],[\"click=\",{\"1\":{\"937\":1}}],[\"click\",{\"1\":{\"892\":1,\"938\":3,\"1099\":2}}],[\"client向binder驱动发送请求数据\",{\"1\":{\"1310\":1}}],[\"client\",{\"0\":{\"702\":1},\"1\":{\"696\":1,\"702\":1,\"836\":3,\"837\":1,\"925\":1,\"1000\":1,\"1122\":1,\"1239\":2,\"1316\":2,\"1317\":1,\"1396\":1}}],[\"clinet\",{\"1\":{\"655\":1,\"1327\":1}}],[\"cl\",{\"1\":{\"693\":5,\"1463\":1}}],[\"clang++\",{\"1\":{\"693\":1}}],[\"clangd\",{\"1\":{\"692\":1}}],[\"clang\",{\"0\":{\"1431\":1},\"1\":{\"692\":11,\"1431\":2,\"1469\":1}}],[\"cla\",{\"1\":{\"421\":1}}],[\"class=\",{\"1\":{\"896\":1,\"944\":1,\"1102\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"872\":1}}],[\"class文件方面\",{\"1\":{\"688\":1}}],[\"classlayout\",{\"1\":{\"681\":2,\"682\":2}}],[\"classfile\",{\"1\":{\"664\":1}}],[\"classified\",{\"1\":{\"1202\":1}}],[\"classifications\",{\"1\":{\"576\":1}}],[\"classification\",{\"1\":{\"575\":1,\"576\":1,\"1153\":1}}],[\"classify\",{\"1\":{\"1153\":1}}],[\"classical\",{\"1\":{\"543\":1}}],[\"classic\",{\"0\":{\"236\":1}}],[\"classmethod\",{\"0\":{\"421\":1},\"1\":{\"421\":4}}],[\"classname\",{\"1\":{\"408\":2}}],[\"classes=4\",{\"1\":{\"1162\":1}}],[\"classes=\",{\"1\":{\"1162\":1}}],[\"classes\",{\"1\":{\"237\":1,\"241\":1,\"670\":1,\"671\":1,\"707\":3,\"1179\":1,\"1405\":2,\"1406\":1,\"1509\":1}}],[\"class\",{\"0\":{\"416\":1,\"417\":1,\"660\":1,\"661\":1,\"663\":1,\"665\":1,\"670\":1,\"1612\":1},\"1\":{\"8\":1,\"9\":1,\"10\":2,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":2,\"19\":1,\"32\":1,\"33\":2,\"34\":2,\"35\":2,\"36\":1,\"42\":4,\"43\":1,\"46\":1,\"47\":2,\"49\":1,\"51\":1,\"52\":1,\"54\":2,\"56\":2,\"57\":1,\"59\":1,\"61\":1,\"62\":1,\"64\":1,\"74\":2,\"75\":4,\"76\":1,\"77\":2,\"79\":1,\"81\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"102\":2,\"103\":2,\"118\":1,\"120\":1,\"122\":1,\"124\":1,\"125\":1,\"130\":2,\"132\":1,\"134\":1,\"136\":1,\"138\":1,\"149\":1,\"150\":2,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"165\":2,\"166\":1,\"169\":1,\"184\":1,\"185\":1,\"186\":1,\"288\":1,\"297\":1,\"299\":2,\"343\":1,\"379\":5,\"385\":1,\"386\":1,\"387\":2,\"388\":1,\"400\":1,\"401\":2,\"408\":2,\"420\":1,\"421\":6,\"422\":1,\"424\":8,\"425\":2,\"426\":14,\"427\":8,\"430\":1,\"431\":1,\"432\":6,\"433\":2,\"434\":1,\"435\":1,\"436\":2,\"438\":1,\"460\":1,\"468\":1,\"479\":1,\"480\":4,\"481\":2,\"486\":3,\"493\":1,\"495\":1,\"496\":1,\"499\":3,\"652\":1,\"655\":1,\"657\":4,\"658\":3,\"661\":1,\"662\":1,\"664\":17,\"665\":4,\"667\":1,\"669\":3,\"670\":4,\"671\":3,\"681\":5,\"682\":6,\"688\":5,\"691\":1,\"696\":1,\"706\":7,\"707\":1,\"796\":1,\"819\":4,\"851\":1,\"879\":1,\"881\":4,\"896\":1,\"1004\":1,\"1162\":1,\"1296\":1,\"1320\":2,\"1333\":1,\"1376\":1,\"1396\":1,\"1403\":7,\"1405\":1,\"1464\":2,\"1483\":2,\"1501\":1,\"1605\":3,\"1611\":2,\"1627\":1,\"1629\":1}}],[\"cls\",{\"1\":{\"421\":8,\"422\":1,\"430\":4,\"431\":6,\"432\":17,\"433\":3,\"1179\":2}}],[\"cleared\",{\"1\":{\"1388\":1}}],[\"cleardeathnotification\",{\"1\":{\"1310\":1}}],[\"clearly\",{\"1\":{\"557\":1,\"1509\":1}}],[\"clearing\",{\"1\":{\"548\":1,\"1485\":4,\"1491\":1}}],[\"clears\",{\"1\":{\"542\":1}}],[\"clear\",{\"1\":{\"237\":1,\"1310\":1,\"1501\":1,\"1545\":1}}],[\"cleanbuild\",{\"1\":{\"784\":1}}],[\"clean\",{\"1\":{\"224\":3,\"1242\":1,\"1388\":8,\"1416\":1,\"1424\":1,\"1440\":3,\"1445\":7,\"1448\":2,\"1449\":2}}],[\"clod\",{\"0\":{\"1475\":1},\"1\":{\"1477\":1}}],[\"clones\",{\"1\":{\"1099\":1}}],[\"clone\",{\"0\":{\"1245\":1},\"1\":{\"1072\":2,\"1099\":4,\"1161\":1,\"1237\":2,\"1245\":1,\"1253\":2,\"1259\":1}}],[\"clonegraph\",{\"1\":{\"89\":1}}],[\"cloak>\",{\"1\":{\"934\":1}}],[\"cloak取得变量\",{\"1\":{\"934\":1}}],[\"cloak\",{\"0\":{\"934\":1},\"1\":{\"934\":1}}],[\"cloudflare\",{\"1\":{\"1080\":1,\"1105\":1}}],[\"cloudstack\",{\"1\":{\"725\":1}}],[\"cloud\",{\"0\":{\"635\":1,\"1476\":1,\"1649\":1},\"1\":{\"640\":3,\"644\":1},\"2\":{\"626\":1,\"633\":1,\"649\":1,\"650\":1,\"733\":1,\"734\":1}}],[\"clobbered\",{\"0\":{\"505\":1},\"1\":{\"502\":1}}],[\"closure\",{\"0\":{\"293\":1}}],[\"closed\",{\"1\":{\"982\":1,\"983\":1}}],[\"closest\",{\"1\":{\"492\":1}}],[\"close\",{\"1\":{\"285\":2,\"382\":3,\"552\":1,\"703\":1,\"962\":1,\"983\":1,\"1212\":1,\"1221\":2}}],[\"clockevent\",{\"1\":{\"1543\":1}}],[\"clockevents\",{\"1\":{\"1543\":3}}],[\"clock\",{\"1\":{\"212\":1,\"234\":2,\"236\":13,\"237\":1,\"245\":6,\"1493\":1,\"1498\":1,\"1507\":2,\"1536\":1,\"1542\":2,\"1543\":4,\"1544\":3,\"1545\":3}}],[\"cameras\",{\"1\":{\"1153\":1}}],[\"camera\",{\"1\":{\"1054\":1,\"1189\":1}}],[\"category\",{\"1\":{\"1111\":2,\"1153\":1}}],[\"categories\",{\"1\":{\"1057\":1,\"1620\":1}}],[\"categorizing\",{\"1\":{\"545\":1}}],[\"catch\",{\"1\":{\"702\":1,\"703\":3,\"923\":1,\"1328\":1}}],[\"cat\",{\"1\":{\"609\":1,\"747\":1,\"957\":1,\"1248\":1,\"1263\":2,\"1645\":2}}],[\"cacti\",{\"1\":{\"557\":2}}],[\"caching\",{\"1\":{\"193\":1,\"227\":2,\"253\":1,\"687\":1}}],[\"cached\",{\"1\":{\"1239\":1,\"1248\":1,\"1249\":2}}],[\"caches↩︎\",{\"1\":{\"230\":1}}],[\"caches\",{\"0\":{\"203\":1},\"1\":{\"236\":2}}],[\"cachem\",{\"1\":{\"199\":1}}],[\"cacheline\",{\"1\":{\"194\":1,\"195\":1,\"196\":1,\"204\":3,\"205\":2}}],[\"cache\",{\"0\":{\"188\":1,\"193\":1,\"195\":1,\"199\":1,\"208\":1,\"212\":1,\"214\":1,\"219\":1,\"223\":1,\"264\":1,\"298\":1},\"1\":{\"15\":1,\"97\":4,\"102\":1,\"190\":8,\"193\":3,\"194\":42,\"195\":10,\"196\":9,\"197\":3,\"198\":7,\"199\":5,\"200\":1,\"201\":2,\"202\":3,\"203\":5,\"204\":8,\"206\":4,\"207\":2,\"208\":7,\"210\":2,\"212\":4,\"213\":1,\"214\":3,\"215\":3,\"216\":1,\"217\":10,\"218\":1,\"220\":4,\"221\":3,\"224\":10,\"225\":3,\"226\":6,\"227\":8,\"243\":1,\"253\":2,\"255\":5,\"261\":2,\"460\":1,\"548\":1,\"582\":1,\"603\":3,\"620\":1,\"640\":1,\"679\":5,\"766\":6,\"828\":1,\"988\":1,\"998\":1,\"1243\":2,\"1287\":1,\"1357\":1,\"1424\":1,\"1485\":1}}],[\"cash\",{\"1\":{\"1623\":1}}],[\"cashback\",{\"1\":{\"1623\":1}}],[\"cast<int>\",{\"1\":{\"1376\":1}}],[\"cast<instruction>\",{\"1\":{\"691\":1}}],[\"cast<javavminitargs\",{\"1\":{\"1365\":1}}],[\"cast<jarray>\",{\"1\":{\"1320\":2}}],[\"cast<jbyte\",{\"1\":{\"1320\":1}}],[\"cast<uintptr\",{\"1\":{\"1320\":1}}],[\"cast<uint8\",{\"1\":{\"509\":1}}],[\"cast<char\",{\"1\":{\"509\":1}}],[\"cases\",{\"1\":{\"558\":1,\"941\":1,\"1060\":1,\"1474\":2}}],[\"case\",{\"1\":{\"177\":1,\"194\":2,\"204\":1,\"236\":1,\"237\":1,\"245\":2,\"465\":1,\"548\":1,\"550\":1,\"557\":1,\"582\":1,\"748\":1,\"759\":1,\"1186\":1,\"1299\":1,\"1307\":4,\"1312\":3,\"1313\":2,\"1314\":2,\"1315\":1,\"1316\":1,\"1333\":4,\"1376\":1,\"1483\":1,\"1543\":2,\"1545\":1,\"1611\":1}}],[\"cai\",{\"1\":{\"427\":2}}],[\"calibration\",{\"1\":{\"1125\":1}}],[\"calculating\",{\"1\":{\"1487\":1}}],[\"calculates\",{\"1\":{\"1492\":1}}],[\"calculate\",{\"1\":{\"245\":2,\"366\":1,\"381\":1,\"1228\":1}}],[\"calculated\",{\"1\":{\"245\":1,\"1123\":1}}],[\"calc\",{\"1\":{\"904\":1}}],[\"callbacks\",{\"1\":{\"1611\":1}}],[\"callback\",{\"1\":{\"1571\":1,\"1602\":5}}],[\"callq\",{\"1\":{\"1463\":2}}],[\"callee\",{\"0\":{\"1346\":1}}],[\"caller\",{\"0\":{\"1345\":1},\"1\":{\"707\":1,\"1329\":3,\"1333\":1,\"1405\":1,\"1542\":1,\"1611\":1}}],[\"called\",{\"1\":{\"194\":1,\"203\":1,\"234\":1,\"236\":1,\"237\":1,\"403\":3,\"559\":1,\"624\":1,\"850\":1,\"941\":1,\"988\":1,\"1381\":1,\"1536\":1,\"1573\":3,\"1602\":5,\"1611\":1,\"1613\":1}}],[\"callingpackage\",{\"1\":{\"1329\":2,\"1333\":1}}],[\"calling\",{\"1\":{\"707\":2,\"844\":1,\"1405\":2,\"1474\":1,\"1498\":1,\"1502\":1}}],[\"calls\",{\"1\":{\"600\":1,\"692\":1,\"1573\":4}}],[\"callable\",{\"1\":{\"435\":2}}],[\"call\",{\"0\":{\"435\":1,\"1320\":1,\"1518\":1,\"1519\":1,\"1573\":1,\"1576\":1},\"1\":{\"256\":1,\"435\":3,\"436\":1,\"458\":1,\"592\":1,\"600\":1,\"844\":1,\"955\":1,\"1079\":1,\"1219\":2,\"1259\":2,\"1271\":2,\"1474\":2,\"1498\":1,\"1516\":1,\"1518\":8,\"1519\":1,\"1553\":3,\"1567\":5,\"1571\":1,\"1573\":15,\"1576\":7,\"1577\":1}}],[\"carefully\",{\"1\":{\"1623\":1}}],[\"care\",{\"1\":{\"1573\":2}}],[\"cards\",{\"1\":{\"1202\":1,\"1388\":1}}],[\"card>\",{\"1\":{\"944\":1}}],[\"card\",{\"1\":{\"944\":1,\"1107\":1,\"1386\":2,\"1388\":4}}],[\"car\",{\"1\":{\"927\":7}}],[\"carried\",{\"1\":{\"542\":1}}],[\"carrying\",{\"1\":{\"236\":1}}],[\"cars\",{\"1\":{\"234\":1,\"1623\":2}}],[\"caused\",{\"1\":{\"1206\":1,\"1208\":1}}],[\"causes\",{\"1\":{\"256\":1}}],[\"cause\",{\"1\":{\"236\":1,\"1421\":1}}],[\"capabilities\",{\"1\":{\"1153\":1,\"1623\":1}}],[\"capacity\",{\"1\":{\"208\":1,\"460\":4}}],[\"capitalize\",{\"1\":{\"931\":3}}],[\"capturing\",{\"1\":{\"604\":1}}],[\"capture\",{\"1\":{\"559\":2,\"1189\":3}}],[\"capsys\",{\"1\":{\"383\":2}}],[\"cap\",{\"0\":{\"587\":1},\"1\":{\"155\":2,\"583\":2,\"587\":2}}],[\"canvas>\",{\"1\":{\"892\":1}}],[\"canvas\",{\"1\":{\"891\":1,\"892\":3}}],[\"canvisitallrooms\",{\"1\":{\"75\":4,\"84\":1}}],[\"canceled\",{\"1\":{\"548\":1}}],[\"cancel\",{\"1\":{\"288\":1}}],[\"cannot\",{\"1\":{\"236\":2,\"237\":1,\"256\":1,\"975\":3,\"989\":1,\"1388\":1,\"1389\":1,\"1426\":1,\"1545\":1}}],[\"caneat\",{\"1\":{\"155\":1}}],[\"candy\",{\"1\":{\"155\":5}}],[\"candiescount\",{\"1\":{\"146\":3,\"155\":4}}],[\"candidates\",{\"1\":{\"10\":14,\"11\":13,\"552\":1}}],[\"can\",{\"1\":{\"155\":5,\"194\":5,\"196\":1,\"203\":1,\"204\":1,\"217\":1,\"237\":1,\"245\":3,\"250\":1,\"255\":1,\"256\":4,\"308\":2,\"339\":1,\"492\":2,\"542\":1,\"543\":4,\"546\":1,\"547\":2,\"548\":1,\"549\":1,\"552\":1,\"553\":2,\"556\":3,\"557\":4,\"558\":1,\"559\":4,\"562\":1,\"573\":1,\"576\":1,\"584\":1,\"592\":1,\"599\":1,\"601\":1,\"703\":2,\"707\":2,\"777\":2,\"781\":1,\"784\":1,\"785\":2,\"786\":1,\"851\":1,\"940\":1,\"941\":1,\"1075\":1,\"1077\":1,\"1080\":1,\"1099\":4,\"1118\":2,\"1123\":1,\"1124\":1,\"1130\":1,\"1145\":1,\"1202\":3,\"1203\":2,\"1204\":1,\"1207\":1,\"1208\":1,\"1209\":2,\"1216\":3,\"1219\":2,\"1385\":1,\"1388\":1,\"1405\":2,\"1474\":1,\"1487\":1,\"1490\":1,\"1497\":1,\"1507\":1,\"1508\":1,\"1509\":3,\"1536\":1,\"1591\":1,\"1592\":1,\"1613\":1,\"1623\":1}}],[\"canpartition\",{\"1\":{\"122\":1}}],[\"canmeasurewater\",{\"1\":{\"91\":1}}],[\"cobalt2\",{\"1\":{\"1638\":1}}],[\"cosmetics\",{\"1\":{\"1623\":1}}],[\"costly\",{\"1\":{\"341\":1,\"548\":1}}],[\"costs\",{\"1\":{\"118\":1}}],[\"cost\",{\"0\":{\"241\":1},\"1\":{\"34\":9,\"236\":1,\"241\":1,\"543\":3,\"547\":2,\"549\":1,\"557\":2,\"558\":1,\"1623\":1}}],[\"co\",{\"1\":{\"1251\":1}}],[\"copied\",{\"1\":{\"1344\":1}}],[\"copies\",{\"1\":{\"1118\":1,\"1492\":1}}],[\"copying\",{\"0\":{\"1389\":1},\"1\":{\"1381\":2,\"1388\":1,\"1389\":3}}],[\"copy\",{\"0\":{\"1344\":1},\"1\":{\"252\":1,\"340\":1,\"341\":1,\"511\":3,\"1118\":1,\"1312\":1,\"1314\":1,\"1342\":3,\"1344\":6,\"1345\":2,\"1380\":3,\"1381\":2,\"1453\":1,\"1524\":1,\"1562\":1,\"1583\":1,\"1584\":1}}],[\"cooperate\",{\"1\":{\"1623\":1}}],[\"cooperation\",{\"1\":{\"1623\":3}}],[\"coops\",{\"1\":{\"676\":4}}],[\"cool\",{\"1\":{\"1592\":1}}],[\"cooling\",{\"0\":{\"1600\":1},\"1\":{\"1592\":6,\"1593\":2,\"1597\":9,\"1600\":9,\"1601\":3,\"1611\":3,\"1613\":1}}],[\"coordination\",{\"1\":{\"1474\":2}}],[\"coordinates\",{\"1\":{\"1228\":1}}],[\"coord\",{\"1\":{\"1162\":1}}],[\"coords=4\",{\"1\":{\"1162\":1}}],[\"cookie\",{\"1\":{\"988\":1,\"1333\":1}}],[\"coherent\",{\"1\":{\"602\":2,\"1124\":2,\"1485\":1}}],[\"coherency\",{\"1\":{\"261\":1,\"1485\":1}}],[\"covers\",{\"1\":{\"1484\":1}}],[\"cover\",{\"1\":{\"1484\":1}}],[\"covered\",{\"1\":{\"562\":1}}],[\"coverage\",{\"1\":{\"543\":3,\"547\":1,\"549\":3,\"558\":2}}],[\"codoms\",{\"1\":{\"1354\":1,\"1355\":1,\"1357\":1}}],[\"coding\",{\"0\":{\"1165\":1},\"1\":{\"468\":1,\"1008\":1,\"1094\":1,\"1219\":1}}],[\"coding=utf\",{\"1\":{\"387\":1,\"388\":1}}],[\"codes\",{\"1\":{\"1509\":1}}],[\"codestr\",{\"1\":{\"904\":2}}],[\"codelife\",{\"2\":{\"1006\":1}}],[\"coder\",{\"0\":{\"307\":1},\"1\":{\"1078\":1}}],[\"code\",{\"0\":{\"24\":1,\"901\":1,\"1078\":1,\"1299\":1,\"1375\":1,\"1399\":1,\"1598\":1},\"1\":{\"47\":1,\"103\":2,\"138\":2,\"170\":1,\"245\":1,\"271\":2,\"288\":1,\"309\":1,\"341\":1,\"344\":3,\"380\":1,\"388\":3,\"400\":1,\"408\":1,\"454\":1,\"502\":4,\"511\":1,\"600\":2,\"664\":5,\"674\":1,\"675\":1,\"676\":1,\"705\":1,\"707\":3,\"708\":1,\"774\":1,\"785\":1,\"797\":1,\"808\":1,\"911\":1,\"923\":1,\"939\":1,\"975\":1,\"1000\":1,\"1052\":1,\"1057\":1,\"1078\":2,\"1094\":2,\"1102\":1,\"1109\":4,\"1110\":3,\"1189\":1,\"1216\":1,\"1320\":4,\"1333\":13,\"1400\":1,\"1405\":1,\"1406\":2,\"1431\":3,\"1460\":1,\"1463\":1,\"1476\":1,\"1479\":1,\"1483\":2,\"1498\":1,\"1609\":1,\"1611\":1,\"1613\":2}}],[\"cor\",{\"1\":{\"1607\":1}}],[\"coroutiones\",{\"0\":{\"279\":1}}],[\"coroutines\",{\"0\":{\"276\":1,\"414\":1}}],[\"correlated\",{\"1\":{\"586\":1}}],[\"correction\",{\"0\":{\"1205\":1,\"1207\":1,\"1208\":1}}],[\"correctly\",{\"1\":{\"620\":1,\"692\":1,\"784\":1,\"1499\":1}}],[\"correct\",{\"1\":{\"243\":2,\"543\":1,\"547\":1,\"549\":1,\"559\":1,\"562\":1,\"601\":1,\"1189\":2,\"1208\":1}}],[\"correspond\",{\"1\":{\"602\":1}}],[\"corresponds\",{\"1\":{\"196\":2,\"250\":1}}],[\"corresponding\",{\"1\":{\"194\":2,\"255\":1,\"256\":1,\"559\":1,\"1386\":1,\"1388\":3,\"1486\":1}}],[\"corelink\",{\"1\":{\"1486\":1,\"1502\":1}}],[\"cores\",{\"1\":{\"546\":1,\"568\":1}}],[\"core\",{\"0\":{\"1197\":1,\"1532\":1,\"1601\":1},\"1\":{\"220\":7,\"221\":2,\"224\":1,\"271\":1,\"566\":1,\"681\":1,\"702\":2,\"703\":1,\"707\":1,\"984\":1,\"1145\":1,\"1243\":1,\"1320\":1,\"1405\":1,\"1459\":2,\"1531\":4,\"1532\":1,\"1533\":1,\"1534\":1,\"1551\":4,\"1552\":2,\"1571\":1,\"1577\":1,\"1601\":1,\"1602\":1,\"1605\":3,\"1623\":1,\"1626\":1}}],[\"cortex\",{\"1\":{\"204\":2,\"566\":1}}],[\"coined\",{\"1\":{\"1501\":1}}],[\"coins\",{\"1\":{\"130\":6,\"134\":3,\"139\":1}}],[\"coinchange\",{\"1\":{\"130\":2}}],[\"coin\",{\"1\":{\"115\":2,\"130\":7,\"134\":4}}],[\"coupled\",{\"1\":{\"564\":1,\"1519\":2,\"1520\":1}}],[\"cout\",{\"1\":{\"455\":1,\"1004\":1}}],[\"couldn\",{\"1\":{\"706\":1,\"1403\":1,\"1551\":1}}],[\"could\",{\"1\":{\"308\":1,\"366\":1,\"552\":1,\"557\":1,\"750\":1,\"991\":1,\"1071\":1,\"1074\":1,\"1075\":1,\"1099\":2,\"1204\":1,\"1320\":1,\"1623\":1}}],[\"course\",{\"1\":{\"86\":1,\"236\":1}}],[\"count=\",{\"1\":{\"1228\":1}}],[\"count=0\",{\"1\":{\"1228\":1}}],[\"countdown=60\",{\"1\":{\"844\":1}}],[\"countdown=10\",{\"1\":{\"844\":1}}],[\"counts\",{\"1\":{\"331\":2,\"455\":3,\"1060\":1}}],[\"counters\",{\"1\":{\"543\":3,\"558\":11,\"562\":3,\"595\":1}}],[\"counter\",{\"0\":{\"299\":1,\"453\":1},\"1\":{\"212\":2,\"285\":2,\"299\":2,\"453\":9,\"480\":4,\"510\":2,\"553\":1,\"558\":4,\"559\":5,\"562\":2,\"576\":2,\"584\":1,\"585\":2,\"586\":1,\"589\":1,\"595\":2,\"605\":1,\"1498\":1,\"1620\":2}}],[\"counting\",{\"1\":{\"176\":1}}],[\"count\",{\"0\":{\"392\":1},\"1\":{\"36\":2,\"76\":4,\"120\":2,\"152\":6,\"153\":7,\"154\":4,\"157\":3,\"285\":4,\"289\":9,\"326\":2,\"392\":3,\"400\":1,\"455\":1,\"673\":3,\"706\":3,\"751\":2,\"1216\":2,\"1228\":2,\"1403\":3,\"1534\":2,\"1596\":2}}],[\"cold\",{\"1\":{\"1474\":1,\"1475\":2,\"1476\":1,\"1481\":4,\"1553\":3}}],[\"colludes\",{\"1\":{\"1623\":1}}],[\"collapse=\",{\"1\":{\"1109\":2}}],[\"collect2\",{\"1\":{\"1449\":1}}],[\"collector\",{\"1\":{\"1380\":5,\"1383\":1}}],[\"collected\",{\"1\":{\"1202\":1}}],[\"collection\",{\"1\":{\"460\":1,\"789\":1,\"791\":4,\"792\":1,\"794\":7,\"1185\":2,\"1186\":3}}],[\"collections\",{\"0\":{\"299\":1,\"405\":1},\"1\":{\"47\":1,\"52\":1,\"54\":1,\"57\":1,\"59\":1,\"60\":1,\"61\":1,\"80\":1,\"84\":1,\"85\":1,\"86\":2,\"88\":4,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"153\":1,\"154\":1,\"157\":1,\"159\":1,\"289\":1,\"299\":4,\"301\":2,\"304\":1,\"313\":1,\"341\":1,\"406\":1,\"453\":2,\"480\":2,\"495\":1,\"703\":1,\"792\":1,\"794\":2,\"796\":1,\"1627\":2}}],[\"collect\",{\"1\":{\"314\":1}}],[\"colors\",{\"0\":{\"898\":1,\"1384\":1,\"1386\":1}}],[\"color\",{\"1\":{\"896\":3,\"897\":2,\"898\":1,\"941\":3,\"1056\":1,\"1189\":2,\"1192\":1,\"1195\":1}}],[\"color=\",{\"1\":{\"892\":1,\"941\":1}}],[\"colname\",{\"1\":{\"794\":1}}],[\"column\",{\"1\":{\"751\":1,\"798\":1,\"806\":2,\"807\":3}}],[\"columns\",{\"1\":{\"401\":1,\"804\":1}}],[\"col\",{\"1\":{\"85\":3,\"340\":6}}],[\"conv2\",{\"1\":{\"1186\":7}}],[\"conv2d\",{\"1\":{\"1142\":1,\"1186\":3}}],[\"conv1\",{\"1\":{\"1186\":7}}],[\"convluted\",{\"1\":{\"1142\":3}}],[\"conv\",{\"1\":{\"1142\":2,\"1161\":4}}],[\"convolutional\",{\"1\":{\"1162\":1}}],[\"convolutions\",{\"1\":{\"1142\":1}}],[\"convolution\",{\"1\":{\"1142\":1,\"1186\":1}}],[\"conversion\",{\"1\":{\"1469\":1}}],[\"convert\",{\"1\":{\"1125\":1,\"1189\":1,\"1219\":4}}],[\"converted\",{\"1\":{\"326\":1}}],[\"conventional\",{\"1\":{\"602\":1}}],[\"convention\",{\"1\":{\"236\":1,\"1075\":1,\"1474\":1,\"1498\":1,\"1502\":1}}],[\"congested\",{\"1\":{\"986\":1}}],[\"congestion\",{\"1\":{\"978\":1,\"986\":3}}],[\"concurrentcopying\",{\"1\":{\"1379\":1}}],[\"concurreny\",{\"1\":{\"281\":1}}],[\"concat\",{\"1\":{\"706\":1,\"1402\":1}}],[\"concrete\",{\"1\":{\"562\":1}}],[\"conclude\",{\"1\":{\"557\":1}}],[\"conclusion\",{\"0\":{\"604\":1,\"1209\":1},\"1\":{\"454\":1}}],[\"concessions\",{\"1\":{\"1623\":1}}],[\"concerned\",{\"1\":{\"1498\":1}}],[\"concern\",{\"1\":{\"552\":1}}],[\"concepts\",{\"0\":{\"1382\":1,\"1414\":1},\"1\":{\"1414\":1}}],[\"conceptually\",{\"1\":{\"1153\":1}}],[\"concept\",{\"0\":{\"1086\":1},\"1\":{\"542\":1,\"573\":1,\"599\":1,\"600\":1}}],[\"conn\",{\"0\":{\"765\":1},\"1\":{\"373\":1,\"765\":1,\"797\":2,\"1000\":1}}],[\"connector\",{\"1\":{\"1145\":1,\"1307\":2}}],[\"connections\",{\"1\":{\"992\":1,\"1142\":1}}],[\"connection\",{\"1\":{\"850\":2,\"951\":2,\"976\":1,\"984\":1,\"988\":1}}],[\"connecting\",{\"1\":{\"703\":1}}],[\"connect\",{\"1\":{\"236\":1,\"371\":1,\"373\":1,\"382\":3,\"703\":4,\"797\":1,\"950\":2,\"951\":1,\"962\":1,\"1237\":1,\"1507\":1}}],[\"connected\",{\"1\":{\"234\":1,\"952\":1,\"1507\":1,\"1508\":2,\"1509\":1}}],[\"conducted\",{\"1\":{\"552\":1}}],[\"cond\",{\"1\":{\"245\":2}}],[\"conditionally\",{\"1\":{\"1545\":1}}],[\"conditions\",{\"1\":{\"600\":1,\"1498\":1}}],[\"condition\",{\"1\":{\"236\":1,\"514\":2,\"599\":1,\"1507\":1,\"1537\":1}}],[\"confg\",{\"1\":{\"1075\":1}}],[\"conference\",{\"1\":{\"606\":1}}],[\"conftest\",{\"1\":{\"377\":2,\"383\":1}}],[\"conf\",{\"1\":{\"337\":1,\"450\":1,\"759\":2,\"760\":1,\"824\":1,\"957\":1,\"1145\":2,\"1424\":2}}],[\"confirmed\",{\"1\":{\"798\":1,\"1507\":1}}],[\"confirmation\",{\"1\":{\"321\":1,\"1056\":1}}],[\"confine\",{\"1\":{\"777\":1}}],[\"confinement\",{\"0\":{\"777\":1},\"1\":{\"776\":1,\"777\":1,\"785\":1}}],[\"confining\",{\"1\":{\"326\":2}}],[\"confidence\",{\"0\":{\"558\":1},\"1\":{\"542\":1,\"543\":1,\"558\":8,\"559\":3,\"562\":3,\"584\":1,\"585\":2,\"587\":1,\"1155\":1}}],[\"configration\",{\"0\":{\"1099\":1}}],[\"configuration\",{\"0\":{\"759\":1},\"1\":{\"758\":1,\"759\":1,\"1075\":1,\"1424\":1}}],[\"configured\",{\"1\":{\"321\":1,\"942\":1,\"1485\":5,\"1492\":1}}],[\"configure\",{\"1\":{\"273\":1,\"274\":1,\"770\":1,\"959\":1,\"1178\":1,\"1499\":3}}],[\"config\",{\"0\":{\"617\":1,\"842\":1,\"1243\":1},\"1\":{\"274\":1,\"326\":2,\"693\":1,\"713\":1,\"744\":2,\"760\":1,\"796\":3,\"858\":1,\"918\":2,\"1056\":2,\"1072\":1,\"1075\":2,\"1099\":3,\"1113\":1,\"1179\":1,\"1243\":9,\"1251\":3,\"1252\":2,\"1259\":1,\"1528\":1,\"1534\":1,\"1541\":2,\"1566\":1,\"1573\":1,\"1607\":4,\"1648\":2}}],[\"conflictstyle\",{\"1\":{\"1252\":1}}],[\"conflicts\",{\"1\":{\"237\":1}}],[\"conflict\",{\"1\":{\"208\":1,\"236\":2,\"603\":1,\"991\":1}}],[\"confusion\",{\"1\":{\"164\":1}}],[\"consecutive\",{\"1\":{\"557\":1,\"562\":1,\"584\":1}}],[\"consequently\",{\"1\":{\"552\":1,\"553\":1}}],[\"consequences\",{\"1\":{\"1126\":1}}],[\"consequence\",{\"1\":{\"543\":1,\"562\":1,\"1125\":2}}],[\"consumption\",{\"1\":{\"1534\":1,\"1536\":1}}],[\"consumers\",{\"1\":{\"1623\":7}}],[\"consumed\",{\"1\":{\"557\":1,\"1312\":2,\"1314\":1,\"1316\":2}}],[\"consume\",{\"1\":{\"366\":1,\"1536\":1}}],[\"consuming\",{\"1\":{\"256\":1}}],[\"console\",{\"0\":{\"324\":1},\"1\":{\"321\":1,\"911\":2,\"927\":1,\"941\":2,\"1004\":1,\"1328\":3,\"1486\":1,\"1492\":1,\"1499\":1}}],[\"consisting\",{\"1\":{\"1592\":1}}],[\"consistent\",{\"1\":{\"1501\":1}}],[\"consists\",{\"1\":{\"194\":1,\"245\":1,\"555\":1,\"559\":2,\"576\":1,\"675\":1}}],[\"considerable\",{\"1\":{\"1508\":1}}],[\"considering\",{\"1\":{\"573\":1,\"600\":1}}],[\"considered\",{\"1\":{\"542\":1,\"556\":1,\"558\":2,\"1124\":1,\"1475\":1}}],[\"consider\",{\"1\":{\"245\":1,\"558\":1,\"562\":2,\"1201\":1}}],[\"constexpr\",{\"1\":{\"707\":1,\"708\":1,\"1307\":1,\"1405\":1}}],[\"constant\",{\"0\":{\"666\":1},\"1\":{\"601\":4,\"602\":4,\"664\":2,\"1142\":2,\"1185\":2,\"1186\":4,\"1212\":2}}],[\"constants\",{\"1\":{\"584\":1,\"600\":2,\"602\":1}}],[\"constraints\",{\"1\":{\"256\":1}}],[\"constructor\",{\"1\":{\"851\":1}}],[\"constructive\",{\"1\":{\"601\":2,\"1118\":1}}],[\"construct\",{\"1\":{\"49\":1}}],[\"const\",{\"0\":{\"912\":1},\"1\":{\"179\":3,\"508\":1,\"509\":1,\"706\":2,\"707\":1,\"939\":1,\"962\":1,\"1113\":1,\"1296\":1,\"1307\":3,\"1320\":4,\"1333\":4,\"1344\":1,\"1345\":1,\"1365\":1,\"1366\":1,\"1403\":2,\"1405\":1,\"1460\":1,\"1463\":1,\"1469\":2,\"1534\":2,\"1596\":1,\"1600\":1,\"1607\":1,\"1608\":1,\"1611\":1}}],[\"contact\",{\"1\":{\"1094\":4}}],[\"contacts\",{\"1\":{\"794\":1}}],[\"contained\",{\"1\":{\"1481\":1}}],[\"containerised\",{\"1\":{\"774\":1}}],[\"containers\",{\"0\":{\"621\":1,\"1106\":1},\"1\":{\"623\":1,\"1056\":1}}],[\"container\",{\"0\":{\"784\":1},\"1\":{\"620\":1,\"621\":2,\"624\":1,\"892\":1}}],[\"containing\",{\"1\":{\"751\":1,\"1501\":1}}],[\"contain\",{\"1\":{\"194\":1,\"196\":1,\"676\":1,\"1501\":1}}],[\"contains\",{\"1\":{\"194\":4,\"195\":2,\"196\":1,\"243\":1,\"255\":1,\"261\":1,\"549\":1,\"658\":1,\"677\":1}}],[\"contemporary\",{\"1\":{\"542\":2,\"605\":1,\"1355\":1}}],[\"content=\",{\"1\":{\"1004\":2}}],[\"content\",{\"1\":{\"354\":4,\"749\":2,\"751\":1,\"999\":2,\"1079\":1,\"1094\":4,\"1106\":4}}],[\"contents\",{\"1\":{\"196\":1,\"936\":1,\"1462\":1,\"1463\":12}}],[\"context=make\",{\"1\":{\"858\":1}}],[\"context\",{\"1\":{\"227\":1,\"256\":1,\"542\":4,\"543\":2,\"545\":5,\"555\":1,\"583\":4,\"759\":1,\"850\":5,\"858\":2,\"1307\":2,\"1383\":1,\"1536\":1}}],[\"contract\",{\"1\":{\"1623\":1}}],[\"contrarily\",{\"1\":{\"558\":1,\"559\":1}}],[\"contrary\",{\"1\":{\"549\":1}}],[\"contrast\",{\"1\":{\"194\":1,\"340\":1}}],[\"contrib\",{\"1\":{\"270\":2,\"1185\":1}}],[\"controlling\",{\"1\":{\"1623\":1}}],[\"controlled\",{\"1\":{\"1492\":1}}],[\"controllers\",{\"1\":{\"1508\":1}}],[\"controller\",{\"1\":{\"1481\":1,\"1492\":1,\"1499\":1,\"1510\":8,\"1591\":4}}],[\"controls\",{\"1\":{\"552\":1}}],[\"control\",{\"0\":{\"1485\":1,\"1493\":1,\"1542\":1,\"1543\":1,\"1544\":1},\"1\":{\"194\":17,\"195\":3,\"235\":1,\"237\":1,\"559\":4,\"775\":1,\"891\":1,\"975\":1,\"986\":2,\"988\":1,\"989\":1,\"992\":1,\"1185\":1,\"1254\":1,\"1431\":1,\"1474\":1,\"1482\":1,\"1483\":1,\"1487\":1,\"1490\":1,\"1493\":2,\"1495\":1,\"1496\":1,\"1497\":1,\"1498\":1,\"1501\":3,\"1514\":1,\"1542\":12,\"1543\":1,\"1544\":1,\"1620\":1}}],[\"contiguous\",{\"1\":{\"158\":1}}],[\"continuous\",{\"1\":{\"156\":1,\"1623\":1}}],[\"continues\",{\"1\":{\"203\":1,\"1487\":1,\"1507\":1}}],[\"continue\",{\"1\":{\"11\":2,\"12\":1,\"13\":2,\"14\":1,\"15\":1,\"52\":1,\"90\":1,\"91\":1,\"237\":1,\"289\":2,\"321\":1,\"465\":1,\"1316\":1,\"1333\":1,\"1493\":1,\"1573\":1,\"1607\":1}}],[\"coming\",{\"1\":{\"1620\":1}}],[\"comes\",{\"1\":{\"245\":1}}],[\"comm\",{\"1\":{\"1515\":2}}],[\"communicating\",{\"1\":{\"1507\":1}}],[\"communication\",{\"0\":{\"413\":1},\"1\":{\"1118\":1,\"1130\":1,\"1354\":1,\"1507\":2}}],[\"commad\",{\"1\":{\"1439\":1}}],[\"commandline\",{\"1\":{\"693\":1}}],[\"commands\",{\"1\":{\"659\":1,\"784\":1}}],[\"command\",{\"0\":{\"758\":1,\"781\":1,\"803\":1,\"1218\":1,\"1266\":1,\"1452\":1},\"1\":{\"266\":1,\"270\":1,\"366\":1,\"751\":3,\"774\":1,\"776\":1,\"778\":1,\"785\":1,\"858\":2,\"1099\":3,\"1101\":1,\"1219\":2,\"1226\":1,\"1239\":1,\"1309\":2,\"1313\":1,\"1320\":1,\"1418\":1,\"1419\":1,\"1439\":1,\"1440\":9,\"1441\":3,\"1509\":2}}],[\"commodity\",{\"1\":{\"1201\":2,\"1202\":2,\"1203\":1,\"1209\":1}}],[\"commonly\",{\"1\":{\"203\":1,\"227\":2,\"584\":1}}],[\"common\",{\"1\":{\"108\":1,\"397\":1,\"675\":2,\"789\":1,\"1079\":1,\"1189\":1,\"1509\":1,\"1542\":1}}],[\"commerce\",{\"1\":{\"1623\":4}}],[\"commercial\",{\"1\":{\"1189\":1}}],[\"commended\",{\"1\":{\"896\":1}}],[\"comment\",{\"1\":{\"408\":1,\"671\":1,\"960\":1,\"1099\":1,\"1463\":2}}],[\"comments<\",{\"1\":{\"1102\":1}}],[\"comments\",{\"1\":{\"191\":1,\"1099\":1,\"1591\":1,\"1592\":1}}],[\"commmand\",{\"1\":{\"748\":1}}],[\"committed\",{\"1\":{\"549\":1,\"1623\":1}}],[\"commit\",{\"0\":{\"549\":1,\"557\":1},\"1\":{\"372\":1,\"543\":4,\"549\":5,\"557\":4,\"558\":1,\"565\":2,\"597\":1,\"1077\":1,\"1114\":1,\"1239\":1,\"1241\":3,\"1248\":1}}],[\"comprehensively\",{\"1\":{\"1623\":1}}],[\"compressed\",{\"1\":{\"1216\":1}}],[\"compression\",{\"1\":{\"673\":3}}],[\"compete\",{\"1\":{\"1623\":1}}],[\"companies\",{\"1\":{\"1623\":1}}],[\"company\",{\"1\":{\"798\":2,\"1623\":7}}],[\"compatibility\",{\"1\":{\"1508\":2}}],[\"compatible\",{\"1\":{\"1004\":1,\"1219\":1}}],[\"compat\",{\"1\":{\"1307\":2}}],[\"comparable\",{\"1\":{\"1509\":1}}],[\"comparisons\",{\"1\":{\"820\":1}}],[\"comparison\",{\"1\":{\"217\":1,\"236\":1,\"245\":1,\"820\":1}}],[\"compareto\",{\"1\":{\"706\":1,\"1402\":1}}],[\"compared\",{\"1\":{\"492\":1,\"557\":1}}],[\"compare\",{\"1\":{\"173\":5,\"185\":4,\"261\":2,\"520\":1,\"1189\":1}}],[\"compiling\",{\"1\":{\"1421\":2}}],[\"compilation\",{\"1\":{\"934\":1,\"1448\":1}}],[\"compilation↩︎\",{\"1\":{\"682\":1}}],[\"compilecommands\",{\"1\":{\"659\":1}}],[\"compileonly\",{\"1\":{\"659\":1}}],[\"compiled\",{\"1\":{\"658\":1,\"664\":1,\"936\":1}}],[\"compile\",{\"0\":{\"1425\":1,\"1428\":1},\"1\":{\"241\":1,\"411\":2,\"600\":1,\"659\":1,\"662\":2,\"1418\":2,\"1425\":6,\"1428\":5,\"1431\":3}}],[\"compiler=clang++\",{\"1\":{\"1431\":1}}],[\"compiler=clang\",{\"1\":{\"1431\":1}}],[\"compiler\",{\"0\":{\"1430\":1},\"1\":{\"237\":1,\"1427\":5,\"1431\":2,\"1553\":1}}],[\"compose\",{\"1\":{\"623\":3,\"624\":1}}],[\"composite\",{\"1\":{\"580\":1,\"592\":1,\"605\":1}}],[\"componentname\",{\"1\":{\"1329\":4}}],[\"component\",{\"1\":{\"559\":7,\"562\":3,\"580\":1,\"592\":1,\"930\":5,\"1055\":1}}],[\"components\",{\"0\":{\"929\":1},\"1\":{\"194\":1,\"557\":1,\"559\":6,\"562\":2,\"583\":1,\"923\":1,\"1055\":2,\"1426\":1,\"1492\":1}}],[\"complilecommands\",{\"1\":{\"659\":1}}],[\"complicated\",{\"1\":{\"1060\":1}}],[\"complicate\",{\"1\":{\"546\":1}}],[\"complementary\",{\"1\":{\"605\":1}}],[\"complement\",{\"1\":{\"580\":1,\"751\":2,\"1464\":2}}],[\"complements\",{\"1\":{\"543\":1}}],[\"complexity\",{\"1\":{\"546\":1,\"548\":1,\"558\":2,\"1501\":1}}],[\"complex\",{\"1\":{\"237\":2,\"542\":2,\"543\":4,\"546\":1,\"549\":2,\"552\":1,\"556\":1,\"1060\":2,\"1143\":1,\"1501\":2}}],[\"completion\",{\"1\":{\"245\":1}}],[\"completing\",{\"1\":{\"234\":1}}],[\"complete给用户\",{\"1\":{\"1316\":1}}],[\"completed\",{\"1\":{\"951\":1,\"1381\":1}}],[\"completely\",{\"1\":{\"602\":1,\"1121\":1}}],[\"complete\",{\"0\":{\"1316\":1},\"1\":{\"549\":2,\"557\":1,\"576\":1,\"748\":1,\"751\":1,\"1308\":1,\"1316\":5,\"1333\":1,\"1496\":1,\"1501\":1}}],[\"completes\",{\"1\":{\"234\":1}}],[\"completepack\",{\"1\":{\"139\":1}}],[\"computation\",{\"1\":{\"599\":1}}],[\"computational\",{\"1\":{\"545\":3}}],[\"computations\",{\"1\":{\"543\":1,\"552\":1}}],[\"computing\",{\"1\":{\"245\":1,\"606\":1,\"1501\":1}}],[\"computes\",{\"1\":{\"1186\":1}}],[\"computed\",{\"1\":{\"236\":1,\"245\":1,\"600\":1,\"910\":1,\"922\":1,\"933\":1}}],[\"compute\",{\"1\":{\"236\":2,\"243\":1,\"245\":1}}],[\"computer\",{\"1\":{\"230\":1,\"234\":2,\"255\":1,\"540\":1,\"566\":1,\"573\":1,\"606\":1,\"1153\":1,\"1189\":3,\"1501\":6,\"1620\":1}}],[\"computers\",{\"1\":{\"193\":1,\"1501\":2}}],[\"compulsory\",{\"1\":{\"208\":1}}],[\"combine0\",{\"1\":{\"1598\":1}}],[\"combines\",{\"1\":{\"580\":1}}],[\"combined\",{\"1\":{\"245\":1}}],[\"combine\",{\"1\":{\"14\":1}}],[\"combination\",{\"1\":{\"8\":4,\"10\":1,\"11\":1,\"245\":1,\"1623\":1}}],[\"combinationsum4\",{\"1\":{\"136\":1}}],[\"combinationsum2\",{\"1\":{\"11\":1}}],[\"combinationsum\",{\"1\":{\"10\":2}}],[\"combinations\",{\"1\":{\"8\":1,\"237\":1}}],[\"com\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"23\":1,\"34\":1,\"49\":1,\"62\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"86\":1,\"87\":1,\"108\":1,\"125\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"182\":1,\"270\":1,\"334\":1,\"336\":4,\"337\":2,\"412\":1,\"445\":2,\"467\":1,\"480\":1,\"491\":1,\"539\":1,\"611\":1,\"619\":3,\"682\":1,\"702\":1,\"707\":1,\"731\":1,\"761\":2,\"776\":1,\"820\":1,\"844\":1,\"848\":1,\"889\":1,\"892\":1,\"939\":1,\"999\":1,\"1075\":1,\"1094\":1,\"1099\":3,\"1105\":1,\"1161\":2,\"1240\":1,\"1244\":3,\"1258\":3,\"1259\":2,\"1264\":1,\"1265\":1,\"1272\":1,\"1274\":1,\"1275\":3,\"1276\":5,\"1277\":1,\"1287\":7,\"1405\":1,\"1435\":1,\"1465\":1,\"1534\":1,\"1537\":1,\"1633\":2,\"1635\":2,\"1646\":1,\"1647\":1}}],[\"c\",{\"0\":{\"183\":1,\"267\":1,\"440\":1,\"442\":1,\"476\":1,\"947\":1,\"1084\":1,\"1410\":1},\"1\":{\"10\":2,\"15\":7,\"85\":3,\"126\":4,\"139\":3,\"149\":1,\"236\":3,\"268\":1,\"280\":1,\"303\":4,\"336\":1,\"343\":2,\"387\":2,\"388\":2,\"408\":3,\"426\":15,\"427\":13,\"480\":2,\"502\":3,\"504\":1,\"559\":6,\"562\":1,\"619\":1,\"623\":1,\"664\":1,\"682\":4,\"692\":2,\"695\":2,\"706\":5,\"751\":2,\"775\":1,\"959\":1,\"961\":1,\"973\":1,\"978\":1,\"1021\":1,\"1022\":1,\"1056\":1,\"1078\":1,\"1084\":2,\"1085\":1,\"1145\":3,\"1155\":1,\"1179\":1,\"1244\":1,\"1263\":1,\"1291\":1,\"1307\":2,\"1308\":1,\"1309\":2,\"1311\":1,\"1352\":2,\"1365\":1,\"1395\":2,\"1402\":2,\"1403\":3,\"1413\":1,\"1418\":1,\"1425\":1,\"1431\":3,\"1440\":26,\"1441\":1,\"1445\":21,\"1446\":6,\"1448\":7,\"1449\":9,\"1454\":1,\"1459\":1,\"1463\":10,\"1469\":1,\"1515\":1,\"1520\":1,\"1529\":1,\"1542\":2,\"1552\":1,\"1556\":1,\"1560\":1,\"1562\":1,\"1570\":1,\"1573\":1,\"1577\":1,\"1586\":3,\"1595\":1,\"1602\":1,\"1605\":1,\"1613\":1,\"1635\":1,\"1645\":1},\"2\":{\"1089\":1}}],[\"chmod\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"cheap\",{\"1\":{\"1623\":2}}],[\"chen852gao\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"chenweigao\",{\"1\":{\"1072\":1,\"1075\":1,\"1077\":1,\"1099\":1}}],[\"chen\",{\"1\":{\"1060\":1}}],[\"checkparcel\",{\"1\":{\"1333\":1}}],[\"checkpoint\",{\"1\":{\"549\":1,\"1217\":1}}],[\"checkout是一条非常危险的命令\",{\"1\":{\"1241\":1}}],[\"checkout\",{\"1\":{\"1052\":1,\"1239\":1,\"1241\":3,\"1242\":1,\"1251\":1,\"1252\":4,\"1253\":2}}],[\"checking\",{\"1\":{\"600\":1,\"1485\":1,\"1611\":1}}],[\"checkinstall\",{\"1\":{\"273\":1}}],[\"checked\",{\"1\":{\"245\":1}}],[\"checksum\",{\"1\":{\"664\":1,\"978\":2}}],[\"checksubarraysum\",{\"1\":{\"156\":1}}],[\"checks\",{\"1\":{\"194\":2,\"255\":1,\"600\":1,\"1381\":1,\"1498\":1}}],[\"check\",{\"1\":{\"34\":4,\"347\":1,\"465\":1,\"559\":1,\"702\":1,\"706\":1,\"707\":2,\"1265\":1,\"1344\":1,\"1381\":1,\"1403\":1,\"1405\":2,\"1509\":1,\"1518\":2,\"1611\":1,\"1647\":1}}],[\"chinese\",{\"1\":{\"1623\":2}}],[\"chinaz\",{\"1\":{\"1244\":1}}],[\"china\",{\"1\":{\"905\":1,\"1073\":1,\"1623\":2,\"1634\":3}}],[\"child\",{\"1\":{\"486\":2}}],[\"children\",{\"1\":{\"486\":5,\"1055\":1}}],[\"children=none\",{\"1\":{\"486\":1}}],[\"chrome的插件中心\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"chrome上的插件proxy\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"chronos\",{\"1\":{\"750\":1}}],[\"chriswailes\",{\"1\":{\"702\":1}}],[\"christopher\",{\"1\":{\"606\":2}}],[\"choose\",{\"1\":{\"748\":1,\"1055\":1,\"1623\":1}}],[\"chose\",{\"1\":{\"564\":1,\"1099\":1}}],[\"chosen\",{\"1\":{\"559\":1,\"1219\":1,\"1475\":2}}],[\"choice\",{\"0\":{\"748\":1},\"1\":{\"6\":1,\"339\":1}}],[\"choices=\",{\"1\":{\"1219\":1}}],[\"choices\",{\"1\":{\"6\":6}}],[\"chunk\",{\"1\":{\"509\":1}}],[\"chunks\",{\"1\":{\"314\":1}}],[\"chche\",{\"1\":{\"460\":2}}],[\"challenge\",{\"0\":{\"1121\":1},\"1\":{\"1201\":1}}],[\"channels\",{\"1\":{\"1204\":1,\"1219\":3}}],[\"channel\",{\"1\":{\"777\":1,\"992\":2,\"1118\":1,\"1124\":1,\"1142\":1,\"1143\":3,\"1192\":1,\"1202\":5,\"1203\":1}}],[\"chance\",{\"1\":{\"689\":1,\"1079\":1}}],[\"changes即可\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"changes\",{\"0\":{\"1586\":1},\"1\":{\"891\":1,\"1239\":1,\"1388\":1}}],[\"changed\",{\"1\":{\"406\":1,\"1623\":1}}],[\"change\",{\"1\":{\"134\":1,\"235\":1,\"237\":1,\"543\":1,\"747\":1,\"940\":1,\"1073\":1,\"1124\":1,\"1596\":1,\"1609\":1}}],[\"championship\",{\"1\":{\"606\":1}}],[\"chain这个是指向链表头结点\",{\"1\":{\"1573\":1}}],[\"chain\",{\"0\":{\"1562\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1627\":1},\"1\":{\"548\":1,\"1562\":1,\"1570\":4,\"1571\":4,\"1572\":2,\"1573\":6,\"1576\":14,\"1577\":5,\"1627\":1}}],[\"chars\",{\"1\":{\"1056\":1}}],[\"charset=\",{\"1\":{\"1004\":1}}],[\"charset=utf\",{\"1\":{\"999\":1}}],[\"chartjs\",{\"1\":{\"892\":1}}],[\"chartdata\",{\"1\":{\"892\":2}}],[\"chart\",{\"1\":{\"889\":3,\"891\":1,\"892\":8}}],[\"charts\",{\"0\":{\"888\":1,\"891\":1},\"1\":{\"888\":2,\"890\":2,\"891\":1,\"892\":6,\"1053\":1,\"1054\":1}}],[\"charfield\",{\"1\":{\"819\":1}}],[\"charat\",{\"1\":{\"706\":1,\"931\":2,\"1402\":1}}],[\"chararray>\",{\"1\":{\"706\":2,\"1402\":2}}],[\"characterization\",{\"1\":{\"1592\":1}}],[\"characterize\",{\"1\":{\"1202\":1}}],[\"characterized\",{\"1\":{\"235\":1}}],[\"characteristic\",{\"1\":{\"676\":1}}],[\"character\",{\"1\":{\"480\":1,\"748\":1,\"751\":1}}],[\"characters\",{\"1\":{\"361\":1,\"751\":1,\"1056\":1}}],[\"char\",{\"1\":{\"481\":4,\"682\":4,\"693\":1,\"705\":1,\"706\":3,\"707\":1,\"743\":2,\"949\":2,\"955\":1,\"1307\":2,\"1376\":1,\"1400\":1,\"1402\":2,\"1403\":1,\"1405\":1,\"1463\":1,\"1464\":1,\"1469\":1,\"1528\":2,\"1534\":2,\"1590\":1,\"1591\":2,\"1595\":1,\"1596\":1,\"1599\":1,\"1600\":1,\"1602\":1,\"1607\":1,\"1608\":2,\"1610\":1,\"1611\":1}}],[\"ch\",{\"1\":{\"8\":2,\"9\":2,\"92\":2,\"465\":10,\"480\":7,\"481\":3,\"1057\":1}}],[\"cnn算法\",{\"1\":{\"1153\":1,\"1155\":1}}],[\"cnn借鉴\",{\"1\":{\"1153\":1}}],[\"cnn的一个改进策略\",{\"1\":{\"1153\":1}}],[\"cnn系算法\",{\"1\":{\"1151\":1}}],[\"cnn\",{\"0\":{\"1142\":1},\"1\":{\"1021\":3,\"1022\":1,\"1151\":3}}],[\"cntfrq\",{\"1\":{\"1498\":1}}],[\"cnt\",{\"1\":{\"751\":1}}],[\"cntvct\",{\"1\":{\"510\":2}}],[\"cntpct\",{\"1\":{\"510\":1}}],[\"cn\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"34\":1,\"49\":1,\"62\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"86\":1,\"87\":1,\"92\":1,\"125\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"167\":1,\"168\":1,\"169\":1,\"182\":1,\"186\":1,\"270\":3,\"449\":1,\"491\":1,\"539\":1,\"619\":3,\"885\":1,\"1113\":1,\"1177\":1,\"1178\":1}}],[\"cfb\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"cfg中\",{\"1\":{\"1162\":1}}],[\"cfg\",{\"1\":{\"1159\":1,\"1161\":2,\"1162\":7,\"1179\":1}}],[\"cfo\",{\"1\":{\"1020\":1,\"1024\":6,\"1206\":1,\"1208\":1}}],[\"cfr\",{\"1\":{\"1020\":4}}],[\"cf\",{\"1\":{\"8\":1,\"1454\":1}}],[\"certificate\",{\"1\":{\"1265\":1,\"1647\":1}}],[\"certain\",{\"1\":{\"406\":1,\"557\":1,\"558\":1,\"1202\":1,\"1623\":1}}],[\"central\",{\"1\":{\"1206\":2}}],[\"cend\",{\"1\":{\"344\":1}}],[\"celeba\",{\"1\":{\"1159\":2}}],[\"celeba数据集中的图片命名格式为统一的000001\",{\"1\":{\"1159\":1}}],[\"celery\",{\"0\":{\"840\":1},\"1\":{\"825\":1,\"828\":1,\"841\":4,\"843\":4,\"844\":1}}],[\"ces\",{\"1\":{\"640\":1,\"643\":1}}],[\"ceil\",{\"1\":{\"28\":2,\"34\":1}}],[\"ce\",{\"1\":{\"8\":1,\"620\":1}}],[\"cdev\",{\"1\":{\"1592\":4}}],[\"cdecl\",{\"1\":{\"1469\":2}}],[\"cdef\",{\"1\":{\"313\":1}}],[\"cdnjs\",{\"1\":{\"889\":1,\"1105\":1}}],[\"cdn\",{\"1\":{\"639\":1,\"889\":2,\"918\":1,\"923\":1,\"939\":1,\"1053\":1,\"1105\":1,\"1236\":1,\"1244\":1}}],[\"cd\",{\"1\":{\"8\":1,\"274\":1,\"445\":1,\"712\":1,\"713\":1,\"770\":1,\"784\":1,\"854\":1,\"864\":1,\"959\":1,\"1074\":1,\"1145\":2,\"1161\":1,\"1239\":1,\"1419\":1,\"1424\":1,\"1439\":1}}],[\"bmw\",{\"1\":{\"1623\":1}}],[\"b8\",{\"1\":{\"1463\":1}}],[\"bz2\",{\"1\":{\"1454\":1}}],[\"bzip2\",{\"1\":{\"1454\":3}}],[\"bzimage\",{\"1\":{\"714\":1}}],[\"bwr\",{\"1\":{\"1301\":10,\"1314\":7}}],[\"bgr2gray\",{\"1\":{\"1195\":1}}],[\"bgr\",{\"1\":{\"1189\":1}}],[\"b=2\",{\"1\":{\"1155\":1}}],[\"b∗5+c\",{\"1\":{\"1155\":2}}],[\"b上分别对模型进行了训练和测试\",{\"1\":{\"1012\":1}}],[\"bbinder\",{\"0\":{\"1304\":1},\"1\":{\"1304\":4,\"1326\":4}}],[\"bbox\",{\"1\":{\"1012\":2,\"1021\":8,\"1159\":2}}],[\"bbbb\",{\"1\":{\"479\":2}}],[\"b+\",{\"1\":{\"812\":1}}],[\"b+tree\",{\"1\":{\"812\":1}}],[\"b+a\",{\"1\":{\"91\":3}}],[\"btree\",{\"1\":{\"812\":1}}],[\"bss\",{\"1\":{\"1460\":2,\"1463\":1}}],[\"bsd\",{\"1\":{\"1189\":1}}],[\"bson\",{\"1\":{\"789\":1}}],[\"bsts\",{\"1\":{\"492\":2}}],[\"bst\",{\"0\":{\"65\":1,\"492\":1,\"493\":1,\"494\":1},\"1\":{\"65\":1,\"492\":4,\"494\":1,\"495\":1,\"496\":2,\"1179\":1}}],[\"bpytop\",{\"0\":{\"1633\":1},\"1\":{\"1633\":2}}],[\"bpbinder\",{\"0\":{\"1305\":1},\"1\":{\"1305\":3,\"1326\":4,\"1327\":2,\"1328\":2,\"1331\":1,\"1333\":5,\"1334\":1}}],[\"bp\",{\"1\":{\"705\":1,\"1400\":1}}],[\"bctimer\",{\"1\":{\"1534\":2}}],[\"bc\",{\"0\":{\"1310\":1,\"1311\":2,\"1315\":1},\"1\":{\"692\":1,\"693\":3,\"1299\":6,\"1301\":1,\"1308\":1,\"1309\":4,\"1310\":16,\"1312\":3,\"1313\":2,\"1315\":1,\"1317\":1,\"1333\":2,\"1544\":3,\"1545\":10}}],[\"bcd\",{\"1\":{\"361\":1}}],[\"bcde\",{\"1\":{\"313\":1}}],[\"b9400820\",{\"1\":{\"673\":1}}],[\"b4afa86fb3b3\",{\"1\":{\"609\":2}}],[\"bhp\",{\"1\":{\"445\":2}}],[\"b1\",{\"1\":{\"426\":3}}],[\"bx\",{\"1\":{\"317\":1}}],[\"bl2\",{\"0\":{\"1487\":1,\"1489\":1},\"1\":{\"1476\":1,\"1477\":1,\"1483\":3,\"1487\":9,\"1488\":1,\"1490\":5,\"1491\":1,\"1492\":4,\"1493\":3,\"1494\":2,\"1495\":4,\"1496\":3,\"1497\":2,\"1499\":2}}],[\"bl1\",{\"0\":{\"1478\":1,\"1480\":1},\"1\":{\"1476\":1,\"1477\":1,\"1479\":3,\"1480\":1,\"1481\":4,\"1482\":1,\"1483\":6,\"1484\":3,\"1486\":3,\"1487\":13,\"1488\":2,\"1490\":3,\"1491\":2,\"1492\":2,\"1497\":2,\"1498\":10}}],[\"bluetooth\",{\"1\":{\"1271\":2}}],[\"blue\",{\"1\":{\"896\":1,\"898\":2,\"941\":4}}],[\"blueprints\",{\"1\":{\"848\":1,\"851\":1}}],[\"blueprint\",{\"0\":{\"851\":1},\"1\":{\"847\":1,\"848\":1,\"851\":7,\"1053\":1}}],[\"blr\",{\"1\":{\"517\":1}}],[\"bl\",{\"1\":{\"517\":2}}],[\"blacklist\",{\"1\":{\"1145\":2}}],[\"black\",{\"1\":{\"445\":1,\"1056\":1,\"1385\":2,\"1388\":18,\"1389\":4}}],[\"blob\",{\"1\":{\"1534\":1}}],[\"blogs\",{\"0\":{\"1650\":1}}],[\"blog\",{\"0\":{\"1063\":1,\"1071\":1,\"1075\":1,\"1077\":1,\"1098\":1},\"1\":{\"408\":1,\"539\":1,\"925\":1,\"933\":2,\"1057\":3,\"1074\":1,\"1075\":3,\"1076\":3,\"1077\":3,\"1099\":6,\"1179\":1,\"1208\":1,\"1472\":1,\"1615\":1},\"2\":{\"1070\":1,\"1083\":1,\"1116\":1}}],[\"blocking\",{\"0\":{\"1564\":1},\"1\":{\"1562\":1,\"1564\":7,\"1573\":1,\"1576\":8}}],[\"blocked\",{\"1\":{\"1121\":1,\"1130\":1}}],[\"blocks\",{\"1\":{\"194\":1,\"210\":2,\"314\":1}}],[\"block\",{\"0\":{\"210\":1,\"1567\":1},\"1\":{\"194\":8,\"195\":2,\"196\":1,\"197\":1,\"198\":8,\"210\":3,\"211\":1,\"217\":2,\"218\":3,\"676\":3,\"751\":1,\"988\":1,\"1053\":1,\"1110\":1,\"1216\":2,\"1316\":1,\"1380\":1,\"1562\":2,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1567\":12,\"1570\":4,\"1571\":2,\"1572\":2,\"1573\":6,\"1575\":1,\"1576\":9,\"1577\":4}}],[\"bl33\",{\"1\":{\"1477\":1,\"1490\":1}}],[\"bl32\",{\"1\":{\"1477\":1}}],[\"bl3\",{\"0\":{\"1473\":1,\"1493\":1,\"1494\":1,\"1495\":1,\"1496\":1,\"1497\":1},\"1\":{\"269\":1,\"1476\":3,\"1483\":2,\"1492\":6,\"1493\":5,\"1494\":4,\"1495\":8,\"1496\":5,\"1497\":5,\"1498\":11,\"1499\":4}}],[\"bl31\",{\"1\":{\"269\":1,\"1477\":1}}],[\"broadcase\",{\"1\":{\"1545\":1}}],[\"broadcasts\",{\"1\":{\"1545\":2}}],[\"broadcast\",{\"0\":{\"1521\":1,\"1542\":1,\"1544\":1,\"1545\":1,\"1546\":1},\"1\":{\"1514\":1,\"1518\":2,\"1520\":4,\"1521\":2,\"1534\":2,\"1542\":21,\"1543\":3,\"1544\":8,\"1545\":24}}],[\"browser\",{\"1\":{\"897\":1,\"1009\":1,\"1074\":1,\"1076\":1}}],[\"broker=\",{\"1\":{\"843\":1}}],[\"brought\",{\"1\":{\"549\":1}}],[\"brief\",{\"1\":{\"1126\":1}}],[\"brife\",{\"1\":{\"1126\":1}}],[\"bridged\",{\"0\":{\"730\":1},\"1\":{\"727\":1}}],[\"bring\",{\"1\":{\"556\":1}}],[\"br\",{\"0\":{\"1316\":1,\"1317\":1},\"1\":{\"517\":1,\"1251\":1,\"1309\":2,\"1316\":4,\"1333\":5}}],[\"brainwashing\",{\"1\":{\"1623\":1}}],[\"brands\",{\"1\":{\"1623\":2}}],[\"brand\",{\"1\":{\"1623\":5}}],[\"branches\",{\"0\":{\"241\":1},\"1\":{\"237\":1,\"241\":4,\"245\":2,\"600\":1,\"1239\":1}}],[\"branch\",{\"0\":{\"240\":1,\"242\":1,\"243\":2,\"1252\":1},\"1\":{\"236\":2,\"243\":10,\"245\":9,\"517\":1,\"520\":1,\"542\":1,\"543\":6,\"544\":1,\"545\":1,\"548\":4,\"551\":1,\"552\":1,\"558\":1,\"559\":3,\"566\":1,\"568\":1,\"571\":2,\"586\":3,\"599\":1,\"1052\":2,\"1072\":1,\"1239\":5,\"1240\":1,\"1246\":1,\"1251\":1,\"1252\":3,\"1253\":4}}],[\"brach\",{\"1\":{\"571\":1}}],[\"bracket\",{\"1\":{\"465\":3}}],[\"brute\",{\"1\":{\"176\":1}}],[\"breadth\",{\"1\":{\"71\":1}}],[\"breaks\",{\"1\":{\"568\":1}}],[\"breaking\",{\"1\":{\"542\":1}}],[\"break\",{\"1\":{\"35\":1,\"47\":1,\"102\":1,\"165\":1,\"166\":1,\"307\":1,\"309\":1,\"358\":1,\"359\":1,\"360\":1,\"508\":1,\"580\":1,\"1060\":1,\"1189\":1,\"1299\":1,\"1312\":1,\"1313\":1,\"1315\":1,\"1316\":2,\"1333\":4,\"1537\":1,\"1543\":1,\"1571\":1,\"1573\":1,\"1606\":2}}],[\"bytop\",{\"1\":{\"1640\":1}}],[\"byte\",{\"1\":{\"195\":2,\"198\":1,\"204\":1,\"205\":2,\"235\":1,\"262\":1,\"533\":1}}],[\"bytes\",{\"1\":{\"194\":4,\"195\":1,\"204\":4,\"509\":3,\"664\":1,\"681\":4,\"682\":8,\"980\":1,\"1216\":1,\"1221\":1,\"1344\":11,\"1345\":1,\"1464\":7}}],[\"bye\",{\"1\":{\"339\":1}}],[\"bypass\",{\"0\":{\"227\":1},\"1\":{\"227\":5,\"542\":1,\"1499\":1}}],[\"by\",{\"0\":{\"304\":1},\"1\":{\"169\":1,\"194\":6,\"204\":2,\"217\":1,\"234\":1,\"235\":1,\"236\":3,\"237\":2,\"243\":2,\"245\":5,\"250\":2,\"271\":1,\"317\":1,\"339\":1,\"341\":1,\"354\":2,\"396\":1,\"491\":1,\"492\":1,\"542\":1,\"545\":1,\"549\":2,\"552\":1,\"557\":4,\"558\":2,\"559\":5,\"562\":1,\"565\":1,\"573\":2,\"575\":1,\"576\":2,\"580\":3,\"582\":1,\"584\":1,\"586\":1,\"599\":2,\"600\":1,\"601\":1,\"602\":2,\"675\":1,\"707\":2,\"759\":1,\"778\":1,\"780\":1,\"784\":1,\"786\":1,\"850\":1,\"891\":1,\"984\":1,\"1052\":1,\"1053\":1,\"1055\":3,\"1060\":2,\"1078\":1,\"1084\":2,\"1098\":1,\"1099\":2,\"1123\":2,\"1124\":1,\"1130\":3,\"1179\":1,\"1201\":1,\"1202\":1,\"1203\":3,\"1206\":3,\"1208\":2,\"1209\":1,\"1212\":1,\"1341\":3,\"1385\":4,\"1405\":2,\"1474\":1,\"1475\":2,\"1483\":3,\"1484\":2,\"1485\":11,\"1487\":2,\"1491\":2,\"1492\":2,\"1494\":1,\"1495\":2,\"1496\":1,\"1497\":1,\"1498\":5,\"1499\":2,\"1507\":2,\"1534\":1,\"1536\":1,\"1545\":1,\"1573\":1,\"1592\":1,\"1613\":2,\"1620\":3,\"1623\":6}}],[\"born\",{\"1\":{\"1623\":1}}],[\"borderjoinstyle\",{\"1\":{\"892\":1}}],[\"borderdashoffset\",{\"1\":{\"892\":1}}],[\"borderdash\",{\"1\":{\"892\":1}}],[\"bordercapstyle\",{\"1\":{\"892\":1}}],[\"bordercolor\",{\"1\":{\"892\":1}}],[\"botton\",{\"1\":{\"1102\":1}}],[\"bot\",{\"0\":{\"1093\":1},\"1\":{\"1094\":3,\"1095\":3}}],[\"both\",{\"1\":{\"203\":1,\"241\":1,\"243\":1,\"565\":1,\"575\":1,\"601\":2,\"675\":1,\"1186\":1,\"1419\":1,\"1483\":1,\"1623\":1}}],[\"boxs\",{\"0\":{\"1149\":1}}],[\"box\",{\"1\":{\"1021\":1,\"1155\":1}}],[\"boilerplate\",{\"1\":{\"942\":1}}],[\"bond6\",{\"1\":{\"732\":1}}],[\"bond0\",{\"1\":{\"732\":1}}],[\"bond\",{\"0\":{\"732\":1},\"1\":{\"732\":2}}],[\"body>\",{\"1\":{\"1004\":1}}],[\"body\",{\"1\":{\"546\":1,\"751\":1}}],[\"board\",{\"1\":{\"340\":7,\"1474\":2,\"1507\":1}}],[\"boost\",{\"1\":{\"1219\":1,\"1426\":6}}],[\"book\",{\"1\":{\"1056\":1,\"1057\":1,\"1623\":1}}],[\"books\",{\"1\":{\"1056\":1}}],[\"booting\",{\"1\":{\"1487\":2}}],[\"bootstrap\",{\"1\":{\"1052\":4,\"1053\":1}}],[\"bootcss\",{\"1\":{\"939\":1}}],[\"boot\",{\"0\":{\"614\":1,\"1475\":1,\"1476\":1,\"1481\":1},\"1\":{\"614\":1,\"715\":1,\"1474\":4,\"1475\":3,\"1476\":8,\"1477\":1,\"1481\":6,\"1483\":2,\"1487\":3,\"1496\":1}}],[\"bootloader\",{\"1\":{\"269\":1,\"1285\":1,\"1492\":1}}],[\"boolean\",{\"1\":{\"673\":1,\"879\":2,\"1219\":1,\"1333\":1,\"1591\":1,\"1626\":1}}],[\"bool\",{\"1\":{\"15\":2,\"30\":1,\"31\":1,\"51\":1,\"52\":1,\"75\":4,\"84\":1,\"91\":1,\"122\":1,\"138\":1,\"155\":1,\"156\":1,\"179\":1,\"186\":1,\"299\":2,\"344\":1,\"401\":2,\"465\":2,\"466\":1,\"495\":1,\"496\":1,\"707\":1,\"1295\":1,\"1296\":3,\"1298\":1,\"1299\":1,\"1301\":1,\"1307\":2,\"1320\":3,\"1365\":2,\"1366\":3,\"1367\":1,\"1406\":1,\"1591\":2,\"1600\":1,\"1607\":1}}],[\"boundary\",{\"1\":{\"1206\":2}}],[\"boundaries\",{\"1\":{\"236\":1}}],[\"boundingbox高度\",{\"1\":{\"1159\":1}}],[\"boundingbox宽度\",{\"1\":{\"1159\":1}}],[\"boundingbox的中心点纵坐标\",{\"1\":{\"1159\":1}}],[\"boundingbox的中心点横坐标\",{\"1\":{\"1159\":1}}],[\"boundingbox的信息在list\",{\"1\":{\"1159\":1}}],[\"bounding\",{\"0\":{\"1149\":1},\"1\":{\"1021\":1,\"1155\":1}}],[\"bound\",{\"1\":{\"160\":3,\"687\":1,\"941\":1,\"1602\":1}}],[\"b−\",{\"1\":{\"91\":2}}],[\"bv1d54y1q7k7\",{\"1\":{\"23\":1}}],[\"bury\",{\"1\":{\"1623\":1}}],[\"burtscher\",{\"1\":{\"558\":1}}],[\"buy\",{\"1\":{\"1623\":1}}],[\"buyers\",{\"1\":{\"1623\":1}}],[\"business\",{\"1\":{\"1623\":4}}],[\"businesses\",{\"1\":{\"1189\":1,\"1623\":1}}],[\"busy\",{\"1\":{\"1528\":1,\"1545\":3}}],[\"bus\",{\"1\":{\"1508\":2,\"1509\":4,\"1511\":1}}],[\"buses\",{\"1\":{\"1508\":1}}],[\"buddy\",{\"1\":{\"1094\":1,\"1095\":1}}],[\"budget\",{\"1\":{\"580\":1}}],[\"bundler\",{\"1\":{\"1073\":1}}],[\"bundle\",{\"1\":{\"774\":1,\"1074\":2,\"1259\":5}}],[\"buflen\",{\"1\":{\"955\":1}}],[\"buf\",{\"1\":{\"743\":1,\"955\":1,\"956\":5,\"1315\":1,\"1345\":1,\"1595\":2,\"1596\":4}}],[\"bufsize\",{\"1\":{\"742\":2}}],[\"buff\",{\"1\":{\"741\":1,\"1341\":1,\"1344\":1}}],[\"buffer为空\",{\"1\":{\"1299\":1}}],[\"bufferent\",{\"1\":{\"962\":1}}],[\"bufferevent\",{\"0\":{\"962\":1},\"1\":{\"961\":2,\"962\":12}}],[\"bufferedwriter\",{\"1\":{\"703\":2}}],[\"buffers\",{\"0\":{\"243\":1},\"1\":{\"1340\":4,\"1341\":3}}],[\"buffer\",{\"0\":{\"216\":1,\"1315\":1,\"1341\":1,\"1344\":1},\"1\":{\"214\":1,\"216\":6,\"217\":2,\"243\":9,\"255\":1,\"256\":1,\"557\":1,\"692\":1,\"703\":1,\"705\":1,\"706\":3,\"976\":1,\"1301\":3,\"1310\":1,\"1312\":2,\"1314\":1,\"1315\":7,\"1316\":2,\"1320\":2,\"1333\":2,\"1338\":1,\"1340\":7,\"1341\":6,\"1342\":1,\"1344\":18,\"1345\":9,\"1400\":1,\"1402\":3,\"1440\":4,\"1522\":1,\"1620\":1}}],[\"builtin\",{\"0\":{\"508\":1},\"1\":{\"383\":1,\"508\":2,\"509\":2}}],[\"built\",{\"1\":{\"340\":1,\"408\":1,\"418\":1,\"1084\":1,\"1098\":1,\"1099\":1,\"1189\":1,\"1219\":1}}],[\"builder\",{\"1\":{\"1629\":1}}],[\"builds\",{\"1\":{\"775\":1,\"1508\":1}}],[\"building\",{\"1\":{\"542\":1,\"774\":1,\"778\":1,\"923\":1,\"1419\":1}}],[\"build\",{\"0\":{\"711\":1,\"784\":1,\"785\":1,\"1074\":1},\"1\":{\"273\":1,\"712\":1,\"770\":1,\"774\":2,\"776\":1,\"778\":2,\"785\":2,\"786\":1,\"847\":1,\"892\":1,\"1055\":2,\"1056\":1,\"1071\":1,\"1072\":1,\"1073\":1,\"1074\":2,\"1076\":1,\"1098\":1,\"1099\":3,\"1101\":3,\"1114\":1,\"1145\":2,\"1248\":2,\"1259\":1,\"1376\":1,\"1418\":3,\"1419\":2,\"1424\":2,\"1432\":1}}],[\"button>\",{\"1\":{\"892\":1,\"938\":1,\"1102\":1}}],[\"button\",{\"1\":{\"892\":4,\"937\":2,\"1102\":1}}],[\"butt\",{\"1\":{\"892\":1}}],[\"but\",{\"1\":{\"194\":1,\"203\":3,\"204\":1,\"236\":3,\"243\":2,\"271\":1,\"308\":1,\"341\":1,\"548\":3,\"557\":1,\"559\":2,\"565\":1,\"568\":1,\"707\":1,\"1208\":1,\"1216\":1,\"1219\":1,\"1385\":1,\"1405\":1,\"1509\":2,\"1623\":11}}],[\"bubblesort\",{\"1\":{\"183\":1}}],[\"bug\",{\"0\":{\"918\":1,\"1051\":1,\"1112\":1},\"1\":{\"22\":1,\"348\":1,\"356\":1,\"744\":1,\"962\":1,\"1054\":1,\"1056\":1,\"1057\":2,\"1114\":1,\"1376\":1},\"2\":{\"1059\":1}}],[\"bucket\",{\"1\":{\"15\":6}}],[\"bill\",{\"1\":{\"1623\":1}}],[\"billion\",{\"1\":{\"1623\":1}}],[\"bilibili\",{\"1\":{\"23\":1}}],[\"bios\",{\"1\":{\"1501\":2}}],[\"bibtex\",{\"1\":{\"1179\":1}}],[\"bias\",{\"1\":{\"1142\":3,\"1162\":1,\"1186\":6,\"1212\":1}}],[\"biases\",{\"1\":{\"1142\":3,\"1185\":6,\"1186\":8}}],[\"biased\",{\"1\":{\"676\":11}}],[\"biasable\",{\"1\":{\"681\":1,\"682\":2}}],[\"bipush\",{\"1\":{\"664\":2}}],[\"bic\",{\"1\":{\"339\":1}}],[\"bicycle\",{\"1\":{\"339\":1,\"1161\":1,\"1623\":1}}],[\"binaries\",{\"1\":{\"1424\":1}}],[\"binarysearch\",{\"1\":{\"26\":1}}],[\"binary\",{\"0\":{\"16\":1,\"40\":1,\"1419\":1},\"1\":{\"25\":1,\"30\":1,\"31\":1,\"42\":1,\"47\":2,\"49\":1,\"54\":1,\"62\":1,\"344\":2,\"461\":1,\"492\":1,\"499\":1,\"571\":2,\"918\":1,\"1216\":1,\"1221\":1,\"1418\":5,\"1419\":3,\"1423\":2,\"1424\":2,\"1431\":1,\"1487\":1},\"2\":{\"39\":1,\"67\":1}}],[\"bingding\",{\"1\":{\"941\":1}}],[\"binging\",{\"1\":{\"939\":1}}],[\"binderflags\",{\"1\":{\"1333\":2}}],[\"binderproxy\",{\"1\":{\"1333\":3}}],[\"binder通信架构↩︎\",{\"1\":{\"1322\":1}}],[\"binder驱动之最简单的通信↩︎\",{\"1\":{\"1322\":1}}],[\"binder原理\",{\"1\":{\"1322\":1}}],[\"binder原理图解\",{\"1\":{\"1322\":1}}],[\"binderinvoker\",{\"1\":{\"1320\":1}}],[\"binder线程线程退出looper\",{\"1\":{\"1310\":1}}],[\"binder主线程进入looper\",{\"1\":{\"1310\":1}}],[\"binderconnector\",{\"1\":{\"1307\":2}}],[\"binder\",{\"0\":{\"1290\":1,\"1293\":1,\"1302\":1,\"1303\":1,\"1306\":1,\"1307\":1,\"1308\":1,\"1309\":1,\"1312\":1,\"1313\":1,\"1314\":1,\"1325\":1,\"1337\":1,\"1340\":1,\"1341\":1,\"1343\":1,\"1344\":1,\"1345\":1,\"1349\":1,\"1351\":1},\"1\":{\"1291\":2,\"1292\":1,\"1293\":14,\"1294\":1,\"1295\":1,\"1297\":3,\"1298\":7,\"1301\":5,\"1302\":1,\"1303\":1,\"1304\":5,\"1305\":6,\"1307\":43,\"1308\":6,\"1309\":9,\"1310\":8,\"1311\":7,\"1312\":10,\"1313\":5,\"1314\":9,\"1315\":7,\"1316\":19,\"1317\":2,\"1318\":1,\"1320\":7,\"1322\":3,\"1325\":1,\"1326\":2,\"1329\":1,\"1333\":11,\"1334\":1,\"1338\":5,\"1340\":4,\"1341\":10,\"1342\":3,\"1344\":10,\"1345\":11,\"1350\":2,\"1352\":9,\"1353\":8,\"1354\":1,\"1356\":1,\"1357\":1,\"1358\":2},\"2\":{\"1336\":1,\"1348\":1,\"1361\":1}}],[\"binding\",{\"1\":{\"941\":5,\"1355\":1,\"1591\":1,\"1592\":5,\"1597\":1,\"1602\":2,\"1623\":1}}],[\"bindings\",{\"1\":{\"940\":1}}],[\"bindinserted\",{\"1\":{\"941\":1}}],[\"bind\",{\"0\":{\"937\":1,\"1592\":1},\"1\":{\"931\":2,\"937\":1,\"938\":1,\"940\":1,\"941\":1,\"950\":1,\"951\":1,\"952\":1,\"961\":1,\"1591\":2,\"1592\":3,\"1593\":1,\"1602\":3,\"1609\":2,\"1611\":1}}],[\"bindmountappstoragedirs\",{\"1\":{\"702\":2}}],[\"bindmountappsdata\",{\"1\":{\"702\":2}}],[\"binpacking\",{\"1\":{\"689\":1}}],[\"bin\",{\"1\":{\"273\":1,\"275\":2,\"400\":1,\"418\":2,\"444\":1,\"445\":1,\"751\":1,\"854\":3,\"959\":1,\"1004\":1,\"1073\":1,\"1221\":2,\"1424\":10,\"1459\":1}}],[\"bitmap\",{\"1\":{\"1386\":3,\"1388\":3,\"1590\":1}}],[\"bitcode\",{\"1\":{\"690\":2,\"692\":1}}],[\"bitfields\",{\"1\":{\"676\":1}}],[\"bit也被扩展并存储到临时寄存器\",{\"1\":{\"245\":1}}],[\"bit\",{\"0\":{\"400\":1},\"1\":{\"198\":3,\"205\":2,\"224\":1,\"243\":3,\"259\":1,\"261\":6,\"262\":1,\"536\":2,\"538\":4,\"558\":11,\"559\":13,\"562\":7,\"573\":1,\"576\":7,\"577\":3,\"584\":3,\"585\":3,\"586\":3,\"587\":4,\"599\":1,\"601\":1,\"605\":1,\"676\":2,\"949\":2,\"978\":1,\"1143\":1,\"1485\":10,\"1509\":1,\"1534\":1,\"1592\":1,\"1611\":1,\"1620\":2}}],[\"bits\",{\"1\":{\"194\":1,\"195\":3,\"204\":8,\"235\":3,\"243\":1,\"245\":2,\"558\":1,\"559\":3,\"576\":2,\"584\":2,\"599\":1,\"676\":6,\"1485\":1,\"1491\":1,\"1620\":1}}],[\"big\",{\"1\":{\"168\":1,\"193\":1,\"670\":1,\"676\":1,\"1080\":1}}],[\"bi\",{\"1\":{\"86\":5,\"1320\":2}}],[\"bisection\",{\"1\":{\"342\":1}}],[\"bisect\",{\"0\":{\"27\":1,\"342\":1},\"1\":{\"19\":3,\"20\":6,\"21\":2,\"27\":8,\"36\":2,\"160\":2,\"175\":3,\"342\":1}}],[\"b\",{\"0\":{\"517\":1,\"1632\":1},\"1\":{\"15\":7,\"28\":1,\"87\":2,\"91\":27,\"98\":5,\"102\":1,\"103\":5,\"179\":2,\"227\":2,\"245\":12,\"251\":2,\"302\":4,\"303\":6,\"343\":11,\"387\":2,\"388\":2,\"426\":15,\"427\":14,\"479\":4,\"502\":3,\"517\":25,\"606\":2,\"682\":1,\"692\":2,\"707\":1,\"793\":1,\"812\":1,\"910\":2,\"933\":2,\"973\":1,\"982\":1,\"1021\":1,\"1022\":1,\"1024\":6,\"1231\":1,\"1240\":1,\"1252\":1,\"1253\":1,\"1278\":1,\"1366\":1,\"1405\":1,\"1463\":3}}],[\"bat\",{\"0\":{\"1224\":1,\"1230\":1},\"1\":{\"1177\":1,\"1227\":1,\"1278\":2}}],[\"batch\",{\"1\":{\"794\":1,\"1185\":8,\"1212\":7,\"1219\":2}}],[\"bad\",{\"1\":{\"1060\":1,\"1365\":1,\"1623\":1}}],[\"baeldung\",{\"1\":{\"682\":1}}],[\"balancing\",{\"1\":{\"549\":1}}],[\"balanced\",{\"1\":{\"623\":1}}],[\"balance\",{\"1\":{\"9\":5,\"640\":1}}],[\"barrier\",{\"0\":{\"1381\":1},\"1\":{\"1381\":6,\"1383\":1}}],[\"barnch\",{\"1\":{\"559\":1}}],[\"bar\",{\"1\":{\"421\":5,\"422\":5,\"664\":3,\"890\":1,\"1056\":2,\"1216\":1}}],[\"baɪ\",{\"1\":{\"342\":1}}],[\"baidu\",{\"1\":{\"308\":4}}],[\"bashrc\",{\"1\":{\"1073\":4}}],[\"bash\",{\"1\":{\"609\":1,\"612\":1,\"746\":1,\"1004\":1,\"1459\":1}}],[\"basis\",{\"1\":{\"599\":1,\"604\":2}}],[\"basics\",{\"0\":{\"976\":1}}],[\"basicblock\",{\"1\":{\"690\":1,\"691\":3}}],[\"basicconfig\",{\"1\":{\"288\":1,\"323\":1,\"324\":1,\"326\":2}}],[\"basic\",{\"0\":{\"779\":1,\"1190\":1,\"1225\":1},\"1\":{\"244\":1,\"245\":2,\"502\":1,\"746\":1,\"750\":1,\"847\":1,\"1009\":2,\"1056\":3,\"1084\":1,\"1098\":1,\"1219\":1,\"1409\":1,\"1501\":1}}],[\"baseurl\",{\"1\":{\"1075\":2}}],[\"basemodel\",{\"1\":{\"819\":2}}],[\"baseline\",{\"1\":{\"562\":1}}],[\"based\",{\"1\":{\"194\":1,\"241\":1,\"542\":2,\"543\":3,\"545\":3,\"556\":4,\"562\":1,\"580\":1,\"584\":1,\"599\":1,\"640\":1,\"670\":1,\"724\":1,\"1085\":1,\"1143\":1,\"1150\":1,\"1202\":1,\"1219\":1,\"1545\":1}}],[\"base\",{\"0\":{\"172\":1,\"1267\":1},\"1\":{\"252\":1,\"427\":9,\"559\":2,\"562\":2,\"659\":1,\"702\":2,\"703\":1,\"925\":1,\"961\":8,\"962\":1,\"1075\":1,\"1185\":2,\"1304\":1,\"1485\":1,\"1487\":3,\"1490\":2,\"1492\":2,\"1497\":2}}],[\"bands\",{\"1\":{\"1208\":1}}],[\"band\",{\"1\":{\"1204\":1,\"1207\":1,\"1209\":1,\"1509\":1}}],[\"bandwidth\",{\"0\":{\"1203\":1},\"1\":{\"236\":1,\"604\":1,\"1201\":2,\"1203\":4,\"1204\":1,\"1507\":1}}],[\"bankruptcy\",{\"1\":{\"1623\":2}}],[\"banks\",{\"1\":{\"557\":2}}],[\"bank\",{\"1\":{\"92\":9,\"557\":1,\"603\":1}}],[\"bananas\",{\"1\":{\"34\":1}}],[\"backward\",{\"1\":{\"1508\":1}}],[\"backwards\",{\"1\":{\"420\":1}}],[\"backgroud\",{\"1\":{\"1374\":1}}],[\"backgrounddexoptservice\",{\"1\":{\"1374\":1}}],[\"backgroundcolor\",{\"1\":{\"892\":1}}],[\"background\",{\"1\":{\"621\":1,\"898\":1}}],[\"backsapcing\",{\"1\":{\"1056\":1}}],[\"backspace\",{\"1\":{\"1056\":1}}],[\"backing\",{\"1\":{\"984\":1}}],[\"backlog\",{\"1\":{\"951\":3,\"984\":1}}],[\"backup\",{\"1\":{\"763\":2,\"1162\":1}}],[\"backend=\",{\"1\":{\"843\":1}}],[\"backend\",{\"1\":{\"843\":1,\"1054\":1},\"2\":{\"631\":1}}],[\"backed\",{\"1\":{\"559\":1}}],[\"back\",{\"0\":{\"217\":1,\"552\":2},\"1\":{\"6\":2,\"8\":3,\"9\":4,\"10\":6,\"11\":4,\"12\":3,\"13\":3,\"14\":3,\"214\":1,\"217\":1,\"236\":1,\"243\":1,\"245\":1,\"406\":1,\"508\":2,\"542\":9,\"543\":6,\"546\":4,\"549\":1,\"551\":1,\"552\":2,\"556\":6,\"564\":1,\"603\":1,\"955\":1,\"1101\":3,\"1326\":4,\"1365\":1}}],[\"backtracking\",{\"1\":{\"5\":1}}],[\"backtrack\",{\"0\":{\"4\":1},\"1\":{\"15\":3}}],[\"bflops\",{\"1\":{\"1161\":4}}],[\"bfs的通用思路\",{\"1\":{\"1064\":1}}],[\"bfs\",{\"0\":{\"52\":1,\"54\":1,\"57\":1,\"59\":1,\"80\":1,\"82\":1,\"1066\":1},\"1\":{\"54\":1,\"56\":1,\"58\":1,\"59\":2,\"71\":2,\"75\":1,\"80\":4,\"83\":5,\"84\":1,\"85\":2,\"86\":2,\"88\":3,\"89\":2,\"90\":1,\"91\":2,\"92\":1,\"1064\":1,\"1066\":1}}],[\"bf\",{\"1\":{\"8\":1}}],[\"began\",{\"1\":{\"1501\":1,\"1623\":1}}],[\"beginner\",{\"1\":{\"757\":1}}],[\"beginning\",{\"1\":{\"361\":5,\"551\":1,\"675\":1,\"1623\":1}}],[\"begins\",{\"1\":{\"243\":1,\"1479\":1}}],[\"begin变量\",{\"1\":{\"10\":1}}],[\"begin\",{\"1\":{\"10\":3,\"11\":7,\"14\":3,\"179\":1,\"509\":2,\"693\":1,\"751\":1,\"1259\":1}}],[\"beauty\",{\"1\":{\"1623\":1}}],[\"beautiful\",{\"1\":{\"1055\":1,\"1060\":1}}],[\"beatbean\",{\"1\":{\"1615\":1}}],[\"beats\",{\"1\":{\"1060\":1}}],[\"bearings\",{\"1\":{\"1122\":1,\"1124\":1}}],[\"bearing\",{\"1\":{\"1122\":1}}],[\"beanfactory\",{\"0\":{\"873\":1},\"1\":{\"873\":3}}],[\"bean\",{\"0\":{\"872\":1,\"874\":1,\"875\":1},\"1\":{\"873\":2,\"876\":9,\"881\":1,\"883\":2,\"884\":3,\"885\":1}}],[\"beans\",{\"1\":{\"871\":1}}],[\"belongs\",{\"1\":{\"1623\":1}}],[\"below\",{\"1\":{\"321\":1,\"676\":1,\"1571\":1,\"1591\":1,\"1602\":2}}],[\"believe\",{\"1\":{\"1623\":1}}],[\"belshe\",{\"1\":{\"967\":1}}],[\"bev\",{\"1\":{\"962\":6}}],[\"benz\",{\"1\":{\"1623\":1}}],[\"benchmark\",{\"1\":{\"552\":1,\"573\":1}}],[\"benefits\",{\"1\":{\"1508\":1,\"1623\":1}}],[\"benefit\",{\"1\":{\"543\":1,\"549\":1,\"556\":1,\"775\":1}}],[\"behave\",{\"1\":{\"623\":1}}],[\"behaves\",{\"1\":{\"559\":1}}],[\"behavior\",{\"1\":{\"241\":1,\"341\":1,\"562\":1,\"586\":1,\"677\":1,\"891\":1,\"1483\":2}}],[\"behind\",{\"1\":{\"509\":1}}],[\"beta\",{\"1\":{\"1103\":1}}],[\"better\",{\"1\":{\"408\":1,\"454\":1,\"559\":1,\"702\":1,\"1060\":8,\"1216\":1,\"1221\":1,\"1623\":1}}],[\"between\",{\"1\":{\"194\":1,\"227\":1,\"233\":1,\"234\":1,\"236\":3,\"253\":1,\"308\":1,\"341\":1,\"454\":1,\"559\":1,\"562\":1,\"599\":1,\"601\":1,\"748\":1,\"898\":1,\"975\":1,\"1056\":1,\"1142\":1,\"1143\":2,\"1201\":1,\"1202\":1,\"1481\":2,\"1501\":1,\"1508\":1,\"1592\":1,\"1611\":2,\"1620\":2,\"1623\":1}}],[\"best\",{\"1\":{\"271\":1,\"1208\":1,\"1623\":1}}],[\"became\",{\"1\":{\"1501\":1}}],[\"because\",{\"1\":{\"196\":1,\"234\":1,\"236\":1,\"237\":1,\"245\":5,\"341\":1,\"707\":1,\"774\":1,\"1124\":1,\"1405\":1,\"1483\":1,\"1508\":1,\"1623\":3}}],[\"becomes\",{\"1\":{\"241\":1,\"573\":1,\"600\":1}}],[\"become\",{\"1\":{\"236\":1,\"271\":1,\"851\":1,\"1623\":3}}],[\"being\",{\"1\":{\"235\":1,\"546\":1,\"556\":1,\"557\":1,\"573\":1,\"575\":2,\"580\":1,\"599\":1,\"600\":1,\"1153\":1,\"1189\":1,\"1381\":2,\"1388\":1,\"1620\":1}}],[\"been\",{\"1\":{\"195\":1,\"243\":1,\"245\":1,\"256\":2,\"321\":1,\"548\":3,\"562\":1,\"565\":1,\"776\":1,\"897\":1,\"1385\":3,\"1611\":1,\"1623\":3}}],[\"before\",{\"1\":{\"172\":1,\"243\":1,\"244\":1,\"556\":1,\"557\":2,\"562\":1,\"565\":1,\"621\":1,\"707\":1,\"778\":1,\"931\":1,\"982\":2,\"1072\":1,\"1201\":1,\"1365\":1,\"1388\":1,\"1405\":1,\"1498\":1}}],[\"be\",{\"1\":{\"8\":1,\"194\":2,\"197\":1,\"203\":2,\"204\":2,\"216\":1,\"217\":2,\"227\":1,\"236\":6,\"237\":1,\"243\":2,\"245\":4,\"250\":2,\"308\":2,\"321\":2,\"341\":1,\"358\":1,\"359\":1,\"360\":2,\"371\":1,\"542\":2,\"543\":5,\"546\":1,\"547\":2,\"548\":1,\"549\":4,\"552\":5,\"553\":1,\"556\":2,\"557\":8,\"558\":2,\"559\":3,\"562\":1,\"573\":1,\"621\":1,\"676\":1,\"703\":2,\"707\":4,\"750\":1,\"777\":1,\"784\":1,\"850\":1,\"896\":1,\"897\":1,\"934\":1,\"936\":1,\"940\":2,\"941\":2,\"989\":1,\"1054\":1,\"1060\":3,\"1074\":1,\"1075\":1,\"1099\":1,\"1121\":1,\"1123\":1,\"1142\":1,\"1202\":3,\"1203\":1,\"1204\":2,\"1208\":1,\"1216\":3,\"1219\":2,\"1344\":2,\"1381\":1,\"1385\":3,\"1388\":2,\"1405\":3,\"1406\":1,\"1474\":1,\"1485\":2,\"1487\":1,\"1490\":1,\"1497\":1,\"1499\":2,\"1501\":3,\"1508\":1,\"1509\":3,\"1534\":1,\"1536\":1,\"1545\":1,\"1551\":1,\"1573\":1,\"1591\":2,\"1592\":2,\"1611\":1,\"1613\":2,\"1620\":2,\"1623\":1}}],[\"bd\",{\"1\":{\"8\":1}}],[\"输出在\",{\"1\":{\"1424\":3}}],[\"输出的预测图片为predictions\",{\"1\":{\"1161\":1}}],[\"输出如下\",{\"1\":{\"388\":1}}],[\"输出集合\",{\"1\":{\"343\":1}}],[\"输出寄存器\",{\"1\":{\"245\":1}}],[\"输出两个数的乘积最小的\",{\"1\":{\"166\":1}}],[\"输出所有和为\",{\"1\":{\"165\":1}}],[\"输出\",{\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"33\":1,\"76\":1,\"77\":1,\"84\":1,\"86\":2,\"87\":2,\"89\":1,\"120\":1,\"122\":1,\"124\":1,\"132\":1,\"136\":1,\"138\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"165\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1}}],[\"输入到浏览器端\",{\"1\":{\"612\":1}}],[\"输入一下内容\",{\"1\":{\"336\":1}}],[\"输入一个递增排序的数组和一个数字s\",{\"1\":{\"166\":1}}],[\"输入一个正整数\",{\"1\":{\"165\":1}}],[\"输入有多组数据\",{\"1\":{\"307\":1}}],[\"输入这样的一个二维数组和一个整数\",{\"1\":{\"30\":1}}],[\"输入\",{\"0\":{\"494\":1},\"1\":{\"8\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"33\":1,\"76\":1,\"77\":1,\"84\":1,\"86\":2,\"87\":2,\"89\":1,\"120\":1,\"122\":1,\"124\":1,\"132\":1,\"136\":1,\"138\":1,\"151\":1,\"155\":1,\"156\":1,\"158\":1,\"160\":1,\"164\":1,\"165\":1,\"167\":1,\"168\":1,\"169\":1,\"186\":1,\"307\":1}}],[\"dvm\",{\"1\":{\"1486\":1}}],[\"d0\",{\"1\":{\"1463\":1}}],[\"dll\",{\"1\":{\"1459\":1}}],[\"d为被平滑的均值偏差\",{\"1\":{\"978\":1}}],[\"dts\",{\"1\":{\"1598\":1,\"1605\":1}}],[\"dtype\",{\"1\":{\"1212\":2,\"1217\":2}}],[\"dtype=float32\",{\"1\":{\"1217\":1}}],[\"dtype=none\",{\"1\":{\"1186\":3}}],[\"dtype=\",{\"1\":{\"1142\":1}}],[\"dtx\",{\"1\":{\"1179\":2}}],[\"dt\",{\"1\":{\"906\":7,\"1000\":1,\"1515\":1}}],[\"djangp\",{\"1\":{\"864\":1}}],[\"django\",{\"0\":{\"862\":1},\"1\":{\"847\":1,\"863\":3,\"864\":1}}],[\"d65f03c0\",{\"1\":{\"673\":1}}],[\"d8144h\",{\"1\":{\"671\":1}}],[\"dns\",{\"0\":{\"997\":1},\"1\":{\"643\":1,\"997\":4,\"1244\":1}}],[\"ddos\",{\"1\":{\"646\":1}}],[\"ddm\",{\"1\":{\"640\":1}}],[\"ddttest\",{\"1\":{\"387\":1}}],[\"ddt\",{\"0\":{\"387\":1,\"388\":1},\"1\":{\"387\":11,\"388\":5}}],[\"dcache\",{\"1\":{\"1460\":1}}],[\"dcmake\",{\"1\":{\"1431\":2}}],[\"dch\",{\"1\":{\"671\":1}}],[\"dcheck\",{\"1\":{\"508\":1}}],[\"dcs\",{\"1\":{\"640\":1}}],[\"d2ffffe9\",{\"1\":{\"537\":1}}],[\"dso\",{\"1\":{\"692\":1}}],[\"dst\",{\"1\":{\"511\":8}}],[\"dsp\",{\"1\":{\"226\":1}}],[\"d1\",{\"1\":{\"426\":5}}],[\"drv\",{\"1\":{\"1518\":5,\"1519\":6,\"1520\":4,\"1525\":1,\"1534\":12}}],[\"dropout\",{\"1\":{\"1186\":1}}],[\"drop\",{\"0\":{\"805\":1},\"1\":{\"805\":3,\"806\":1,\"1118\":1,\"1508\":1}}],[\"driven\",{\"1\":{\"1611\":1}}],[\"driver↩︎\",{\"1\":{\"1322\":1}}],[\"drivers\",{\"1\":{\"717\":1,\"1145\":2,\"1244\":1,\"1291\":1,\"1307\":1,\"1308\":1,\"1311\":1,\"1520\":1,\"1531\":1,\"1534\":3,\"1613\":1}}],[\"drivers和net等子文件\",{\"1\":{\"717\":1}}],[\"driver\",{\"0\":{\"1306\":1,\"1534\":1},\"1\":{\"703\":2,\"725\":1,\"1209\":1,\"1293\":1,\"1307\":5,\"1308\":1,\"1309\":3,\"1326\":6,\"1331\":2,\"1333\":1,\"1334\":1,\"1519\":2,\"1520\":1,\"1531\":2,\"1532\":3,\"1534\":21,\"1592\":1}}],[\"drive\",{\"1\":{\"387\":1}}],[\"dram\",{\"1\":{\"1474\":1,\"1476\":1,\"1481\":1,\"1492\":2}}],[\"dramatic\",{\"1\":{\"235\":1}}],[\"drastically\",{\"1\":{\"549\":1}}],[\"drawn\",{\"1\":{\"236\":1}}],[\"db=db\",{\"1\":{\"858\":1}}],[\"dbname\",{\"1\":{\"795\":1}}],[\"dbs\",{\"1\":{\"794\":1}}],[\"dbss\",{\"1\":{\"648\":1}}],[\"dbaas\",{\"1\":{\"639\":1}}],[\"db\",{\"1\":{\"375\":2,\"382\":1,\"791\":4,\"792\":1,\"793\":3,\"794\":12,\"796\":1,\"797\":2,\"798\":1,\"805\":1,\"819\":2,\"825\":1,\"850\":1,\"858\":3,\"1054\":1}}],[\"dq\",{\"1\":{\"341\":5}}],[\"dy\",{\"1\":{\"317\":1}}],[\"dynticks\",{\"1\":{\"1584\":3}}],[\"dyn\",{\"1\":{\"96\":1,\"691\":1}}],[\"dynamically\",{\"1\":{\"241\":1,\"1536\":1}}],[\"dynamic\",{\"0\":{\"243\":1},\"1\":{\"96\":1,\"243\":1,\"584\":2,\"940\":1,\"1509\":1}}],[\"dx\",{\"1\":{\"317\":1,\"669\":1}}],[\"df\",{\"1\":{\"315\":2,\"329\":5,\"331\":3,\"981\":2}}],[\"dfs是一种用于遍历或搜索树或图的算法\",{\"1\":{\"70\":1}}],[\"dfs\",{\"0\":{\"51\":1,\"56\":1,\"68\":2,\"72\":1,\"79\":1,\"495\":1,\"1066\":1},\"1\":{\"15\":7,\"45\":3,\"47\":4,\"51\":5,\"56\":9,\"57\":1,\"73\":4,\"74\":8,\"75\":11,\"76\":7,\"77\":4,\"79\":4,\"85\":1,\"100\":4,\"102\":3,\"486\":3,\"496\":4,\"1064\":1,\"1066\":1,\"1109\":2}}],[\"dummy\",{\"1\":{\"1320\":2}}],[\"dumpsys\",{\"1\":{\"1269\":1,\"1275\":2}}],[\"dumps\",{\"1\":{\"412\":1,\"1094\":1}}],[\"dump\",{\"1\":{\"298\":1,\"691\":2,\"1459\":2,\"1515\":2}}],[\"duration=1000\",{\"1\":{\"1228\":1}}],[\"duration\",{\"1\":{\"1228\":2}}],[\"during\",{\"1\":{\"236\":6,\"237\":2,\"245\":2,\"321\":1,\"542\":1,\"676\":1,\"850\":1,\"1388\":1,\"1389\":1,\"1481\":1,\"1509\":1}}],[\"dutch\",{\"1\":{\"1060\":1}}],[\"due\",{\"1\":{\"256\":1,\"321\":1,\"548\":1,\"559\":1,\"707\":1,\"1118\":1,\"1405\":1}}],[\"dma\",{\"1\":{\"226\":2,\"227\":2}}],[\"dominant\",{\"1\":{\"1153\":1}}],[\"domains\",{\"1\":{\"1099\":1}}],[\"domain\",{\"1\":{\"991\":1,\"1054\":1,\"1099\":1,\"1202\":1}}],[\"dom\",{\"1\":{\"941\":2}}],[\"dothis\",{\"1\":{\"938\":1}}],[\"doors\",{\"1\":{\"927\":1}}],[\"doreceive\",{\"1\":{\"1301\":2}}],[\"doreceive默认值为true\",{\"1\":{\"1301\":1}}],[\"doreplace\",{\"1\":{\"706\":1,\"1402\":1}}],[\"dormant\",{\"1\":{\"851\":1}}],[\"dose\",{\"1\":{\"1203\":1}}],[\"dos\",{\"1\":{\"776\":2}}],[\"dosboxsvn\",{\"1\":{\"776\":1}}],[\"dosbox\",{\"0\":{\"776\":1},\"1\":{\"776\":8,\"786\":1}}],[\"dokcer\",{\"1\":{\"610\":1,\"614\":1}}],[\"doi\",{\"1\":{\"606\":4}}],[\"doing\",{\"1\":{\"492\":3}}],[\"double\",{\"1\":{\"557\":2,\"1221\":1,\"1592\":1}}],[\"douban\",{\"1\":{\"334\":1,\"336\":2,\"445\":2}}],[\"dog\",{\"1\":{\"425\":8,\"427\":2,\"1161\":2}}],[\"dock\",{\"1\":{\"1575\":2}}],[\"dockerfile\",{\"1\":{\"621\":1}}],[\"dockerhub\",{\"1\":{\"619\":1}}],[\"docker\",{\"0\":{\"607\":1,\"608\":1,\"614\":1},\"1\":{\"609\":3,\"610\":3,\"611\":2,\"612\":4,\"613\":6,\"614\":4,\"616\":5,\"618\":2,\"619\":2,\"620\":6,\"621\":6,\"622\":6,\"623\":7,\"624\":1,\"724\":1},\"2\":{\"627\":1}}],[\"doctype\",{\"1\":{\"1004\":1}}],[\"documentclass\",{\"1\":{\"1179\":1}}],[\"documentation\",{\"1\":{\"1098\":1,\"1592\":1}}],[\"documented\",{\"1\":{\"879\":1,\"1179\":1}}],[\"document\",{\"0\":{\"1127\":1},\"1\":{\"789\":1,\"792\":1,\"793\":2,\"892\":4,\"1091\":1,\"1474\":1,\"1487\":1,\"1490\":1,\"1497\":1}}],[\"documents\",{\"1\":{\"664\":1,\"790\":1,\"793\":2,\"794\":1}}],[\"doc=none\",{\"1\":{\"408\":1}}],[\"doc\",{\"1\":{\"383\":1,\"408\":1,\"888\":1,\"1248\":5}}],[\"docs\",{\"0\":{\"203\":1,\"204\":1},\"1\":{\"317\":1,\"380\":1,\"388\":3,\"766\":1,\"808\":1,\"820\":1,\"848\":1,\"1054\":1,\"1099\":7,\"1101\":6,\"1109\":2}}],[\"dongfengsokon\",{\"1\":{\"1623\":7}}],[\"donot\",{\"1\":{\"981\":1}}],[\"don\",{\"1\":{\"236\":2,\"237\":1,\"243\":1,\"360\":1,\"776\":1,\"820\":1,\"1113\":1,\"1545\":1,\"1573\":2,\"1623\":1}}],[\"done\",{\"1\":{\"217\":1,\"236\":2,\"245\":1,\"543\":2,\"934\":1,\"1099\":1,\"1145\":1,\"1161\":1,\"1310\":3,\"1376\":1,\"1481\":1,\"1498\":1,\"1536\":1,\"1573\":1,\"1591\":1}}],[\"doesn\",{\"1\":{\"243\":1}}],[\"does\",{\"1\":{\"197\":2,\"217\":1,\"236\":1,\"361\":3,\"543\":1,\"549\":1,\"552\":1,\"553\":1,\"556\":1,\"557\":1,\"559\":1,\"582\":1,\"759\":1,\"793\":1,\"892\":1,\"1075\":1,\"1124\":1,\"1483\":1,\"1485\":1,\"1498\":1,\"1545\":1,\"1600\":1}}],[\"do\",{\"0\":{\"1516\":1},\"1\":{\"196\":2,\"236\":2,\"321\":1,\"418\":7,\"492\":1,\"549\":1,\"750\":1,\"888\":2,\"892\":1,\"942\":1,\"1009\":1,\"1060\":2,\"1071\":1,\"1072\":1,\"1074\":1,\"1075\":1,\"1099\":1,\"1145\":1,\"1198\":1,\"1201\":1,\"1226\":1,\"1228\":1,\"1231\":3,\"1269\":1,\"1278\":1,\"1279\":1,\"1299\":1,\"1301\":2,\"1376\":1,\"1515\":3,\"1516\":2,\"1545\":1,\"1557\":3,\"1563\":1,\"1564\":1,\"1565\":1,\"1575\":1,\"1623\":1}}],[\"downhill\",{\"1\":{\"1623\":2}}],[\"downconversion\",{\"0\":{\"1125\":1},\"1\":{\"1125\":1}}],[\"downloading\",{\"1\":{\"1216\":1}}],[\"downloads\",{\"1\":{\"1079\":1,\"1081\":1}}],[\"download\",{\"0\":{\"1216\":1},\"1\":{\"890\":2,\"1079\":1,\"1216\":5,\"1219\":3}}],[\"down\",{\"1\":{\"88\":2,\"234\":1,\"558\":1,\"763\":1,\"1022\":1,\"1545\":1,\"1576\":2,\"1623\":1}}],[\"dainty\",{\"1\":{\"1638\":1}}],[\"daifclr\",{\"1\":{\"1517\":1}}],[\"daa\",{\"1\":{\"1509\":1}}],[\"dacay\",{\"1\":{\"1185\":2,\"1212\":1}}],[\"dashboard\",{\"1\":{\"1054\":1,\"1055\":1}}],[\"darknet是一个开源的神经网络框架\",{\"1\":{\"1160\":1}}],[\"darknet\",{\"0\":{\"1150\":1,\"1160\":1,\"1161\":1},\"1\":{\"1052\":1,\"1161\":3,\"1162\":5}}],[\"danger\",{\"1\":{\"1106\":1}}],[\"dangerous\",{\"1\":{\"786\":1}}],[\"daneden\",{\"1\":{\"944\":1}}],[\"dag\",{\"0\":{\"808\":1},\"1\":{\"801\":1,\"808\":2}}],[\"davlik\",{\"1\":{\"685\":1,\"687\":1}}],[\"dalvik\",{\"1\":{\"652\":3,\"669\":1,\"688\":1,\"689\":2,\"707\":1,\"1405\":1}}],[\"dat\",{\"1\":{\"1145\":1}}],[\"datetime\",{\"1\":{\"1226\":1}}],[\"datetime=\",{\"1\":{\"1226\":1}}],[\"datestr\",{\"1\":{\"906\":2}}],[\"dateformat\",{\"1\":{\"906\":2}}],[\"date\",{\"0\":{\"905\":1,\"908\":1,\"910\":1},\"1\":{\"373\":1,\"747\":2,\"793\":1,\"905\":6,\"906\":1,\"907\":3,\"908\":1,\"909\":1,\"910\":2,\"933\":2,\"1055\":2,\"1076\":1,\"1111\":2,\"1226\":1,\"1424\":1}}],[\"datamation\",{\"1\":{\"1501\":1}}],[\"dataavail\",{\"1\":{\"1333\":1}}],[\"data数据\",{\"1\":{\"1333\":1}}],[\"dataobj\",{\"1\":{\"1333\":2}}],[\"dataparcel\",{\"1\":{\"1320\":3}}],[\"datacapacity\",{\"1\":{\"1301\":1}}],[\"data中的内容\",{\"1\":{\"1162\":1}}],[\"dataset\",{\"0\":{\"1159\":1},\"1\":{\"1012\":1,\"1212\":6,\"1219\":17}}],[\"datasets\",{\"1\":{\"892\":1,\"1185\":1}}],[\"datatype\",{\"1\":{\"806\":1}}],[\"datainputstream\",{\"1\":{\"703\":2}}],[\"datalayout\",{\"1\":{\"692\":2}}],[\"database\",{\"0\":{\"789\":1,\"1651\":1},\"1\":{\"640\":1,\"789\":2,\"805\":1,\"819\":3,\"1052\":1,\"1055\":1},\"2\":{\"799\":1,\"800\":1,\"816\":1,\"817\":1,\"821\":1,\"822\":1,\"838\":1,\"839\":1}}],[\"dataflow\",{\"1\":{\"568\":1,\"570\":1,\"606\":1}}],[\"dataframe\",{\"0\":{\"328\":1},\"1\":{\"328\":1}}],[\"data=req\",{\"1\":{\"1094\":1}}],[\"data=values\",{\"1\":{\"412\":1}}],[\"data=\",{\"1\":{\"412\":1}}],[\"data\",{\"0\":{\"239\":1,\"338\":1,\"461\":1,\"572\":1,\"678\":1,\"949\":1,\"988\":1,\"1216\":1,\"1530\":1},\"1\":{\"32\":9,\"47\":2,\"193\":2,\"194\":27,\"195\":3,\"196\":1,\"197\":1,\"198\":4,\"202\":4,\"203\":1,\"204\":1,\"216\":2,\"227\":6,\"233\":1,\"235\":3,\"236\":7,\"237\":1,\"245\":6,\"285\":2,\"298\":2,\"314\":1,\"387\":5,\"388\":2,\"410\":4,\"412\":5,\"420\":8,\"541\":1,\"542\":1,\"543\":1,\"566\":1,\"568\":1,\"571\":1,\"572\":2,\"580\":1,\"582\":2,\"600\":1,\"602\":1,\"609\":1,\"616\":3,\"655\":1,\"674\":1,\"708\":1,\"742\":3,\"759\":4,\"796\":1,\"850\":1,\"888\":1,\"892\":4,\"904\":1,\"939\":1,\"940\":1,\"955\":7,\"962\":1,\"975\":3,\"979\":2,\"988\":2,\"992\":1,\"1004\":1,\"1055\":2,\"1075\":1,\"1159\":1,\"1161\":2,\"1162\":6,\"1185\":4,\"1191\":1,\"1216\":3,\"1219\":6,\"1237\":1,\"1301\":2,\"1309\":2,\"1311\":1,\"1312\":1,\"1314\":1,\"1315\":3,\"1316\":1,\"1320\":20,\"1328\":8,\"1329\":9,\"1333\":24,\"1341\":2,\"1344\":1,\"1345\":3,\"1460\":2,\"1463\":6,\"1464\":2,\"1476\":1,\"1479\":1,\"1487\":1,\"1501\":1,\"1507\":5,\"1508\":3,\"1509\":2,\"1553\":4,\"1566\":3,\"1567\":2,\"1573\":1,\"1590\":1,\"1611\":1,\"1613\":2,\"1620\":3,\"1629\":1}}],[\"days=2\",{\"1\":{\"844\":1}}],[\"day\",{\"1\":{\"155\":4,\"291\":2,\"1075\":1}}],[\"dpkg\",{\"1\":{\"750\":1}}],[\"dpage\",{\"1\":{\"609\":2}}],[\"dp\",{\"0\":{\"93\":1},\"1\":{\"96\":1,\"100\":3,\"102\":1,\"114\":11,\"115\":13,\"118\":26,\"120\":10,\"122\":7,\"124\":8,\"125\":5,\"130\":17,\"132\":10,\"134\":7,\"136\":7,\"138\":9,\"341\":4},\"2\":{\"142\":1}}],[\"dipc\",{\"0\":{\"1354\":1,\"1355\":1,\"1356\":1,\"1357\":1},\"1\":{\"1354\":2,\"1355\":2,\"1356\":2,\"1358\":1}}],[\"dina\",{\"1\":{\"1130\":1}}],[\"diversity\",{\"1\":{\"1124\":1}}],[\"div>\",{\"1\":{\"931\":1,\"934\":1,\"936\":1,\"1004\":1}}],[\"dividing\",{\"1\":{\"342\":1,\"401\":2}}],[\"divides\",{\"1\":{\"1620\":1}}],[\"divided\",{\"1\":{\"203\":1,\"204\":2,\"1476\":1}}],[\"divide\",{\"1\":{\"194\":1,\"237\":1,\"458\":1,\"692\":1}}],[\"diff3\",{\"1\":{\"1252\":1}}],[\"differ\",{\"0\":{\"1249\":1},\"1\":{\"1186\":1}}],[\"differences\",{\"1\":{\"1118\":1,\"1511\":1}}],[\"difference\",{\"1\":{\"454\":1,\"545\":1,\"559\":1,\"851\":1,\"1123\":2,\"1124\":1,\"1202\":1,\"1207\":1}}],[\"different\",{\"0\":{\"326\":1},\"1\":{\"194\":1,\"196\":1,\"204\":1,\"234\":3,\"236\":2,\"308\":1,\"341\":1,\"548\":2,\"557\":1,\"559\":2,\"584\":1,\"592\":1,\"897\":1,\"1056\":1,\"1118\":1,\"1202\":1,\"1207\":1,\"1425\":1,\"1427\":1,\"1501\":1,\"1509\":1}}],[\"difficulty\",{\"1\":{\"556\":2}}],[\"diff\",{\"1\":{\"545\":3,\"1239\":2,\"1249\":3}}],[\"didn\",{\"1\":{\"703\":1}}],[\"did\",{\"1\":{\"400\":1,\"1545\":1}}],[\"diagnosing\",{\"1\":{\"321\":1}}],[\"diameterofbinarytree\",{\"1\":{\"62\":1}}],[\"diameter\",{\"1\":{\"62\":1}}],[\"disgusted\",{\"1\":{\"1623\":2}}],[\"dissipate\",{\"1\":{\"1591\":1}}],[\"disadvantages\",{\"1\":{\"1623\":3}}],[\"disassembly\",{\"1\":{\"1463\":1}}],[\"disabled\",{\"1\":{\"1524\":2,\"1590\":2}}],[\"disabledcompatchanges\",{\"1\":{\"702\":2}}],[\"disable\",{\"1\":{\"692\":1,\"1272\":1,\"1499\":1,\"1516\":1,\"1517\":2}}],[\"disorder\",{\"1\":{\"986\":1}}],[\"discount\",{\"1\":{\"1623\":1}}],[\"discovered\",{\"1\":{\"1385\":1}}],[\"discretion\",{\"1\":{\"1501\":1}}],[\"discard\",{\"1\":{\"828\":1,\"1553\":1}}],[\"discussion\",{\"1\":{\"1623\":1}}],[\"discuss\",{\"0\":{\"597\":1},\"1\":{\"237\":1,\"241\":1,\"245\":1,\"1055\":1}}],[\"display\",{\"0\":{\"1191\":1},\"1\":{\"751\":1,\"891\":1,\"934\":1,\"1216\":1,\"1440\":6,\"1441\":3}}],[\"displaying\",{\"1\":{\"748\":1}}],[\"dispatcher\",{\"1\":{\"1495\":1}}],[\"dispatched\",{\"1\":{\"552\":1}}],[\"dispatch\",{\"1\":{\"552\":6,\"553\":2,\"556\":1,\"557\":3,\"562\":2,\"599\":1,\"687\":2,\"961\":1}}],[\"dispose\",{\"1\":{\"385\":1}}],[\"disk\",{\"1\":{\"321\":1,\"1196\":1}}],[\"dis\",{\"0\":{\"1517\":1},\"1\":{\"285\":1}}],[\"distinguish\",{\"1\":{\"1481\":2}}],[\"distinct\",{\"1\":{\"236\":1,\"562\":1}}],[\"distributor\",{\"1\":{\"1499\":2}}],[\"distribution\",{\"1\":{\"1208\":1}}],[\"distributed\",{\"1\":{\"640\":2,\"1486\":1}}],[\"distro\",{\"1\":{\"618\":1}}],[\"distances\",{\"1\":{\"1507\":2}}],[\"distance\",{\"1\":{\"285\":2,\"289\":1,\"400\":1}}],[\"dist\",{\"1\":{\"90\":4,\"918\":1,\"1099\":1}}],[\"dic\",{\"1\":{\"186\":5,\"388\":2,\"460\":6,\"467\":4,\"480\":4,\"495\":3,\"1094\":3}}],[\"dict来指定x的取值\",{\"1\":{\"1212\":1}}],[\"dict=\",{\"1\":{\"1142\":2,\"1185\":1,\"1212\":5}}],[\"dicts\",{\"1\":{\"388\":4}}],[\"dictionary\",{\"1\":{\"186\":1,\"824\":1}}],[\"dict\",{\"0\":{\"295\":1,\"304\":1},\"1\":{\"86\":1,\"89\":1,\"144\":2,\"153\":5,\"297\":1,\"298\":1,\"299\":9,\"302\":2,\"303\":4,\"431\":9,\"436\":1,\"460\":3,\"480\":1,\"858\":1}}],[\"dir=updates\",{\"1\":{\"1145\":1}}],[\"dir\",{\"1\":{\"298\":2,\"348\":4,\"391\":1,\"1219\":8,\"1309\":2,\"1418\":5,\"1419\":1,\"1421\":2,\"1424\":3,\"1434\":1}}],[\"dirty\",{\"0\":{\"217\":1},\"1\":{\"217\":8,\"224\":2,\"1056\":1,\"1386\":4,\"1388\":8,\"1389\":4}}],[\"direvt\",{\"1\":{\"202\":2}}],[\"directories\",{\"0\":{\"1421\":1},\"1\":{\"1418\":1,\"1421\":3,\"1426\":1}}],[\"directory\",{\"0\":{\"1075\":1,\"1419\":1},\"1\":{\"252\":1,\"759\":2,\"785\":2,\"786\":2,\"854\":1,\"1008\":1,\"1074\":1,\"1075\":1,\"1079\":1,\"1099\":2,\"1219\":4,\"1239\":1,\"1418\":8,\"1421\":1,\"1424\":1,\"1448\":2,\"1453\":1}}],[\"directibes\",{\"1\":{\"941\":1}}],[\"directive\",{\"1\":{\"940\":1,\"941\":3}}],[\"directives\",{\"0\":{\"932\":1,\"941\":1},\"1\":{\"759\":1,\"1055\":1}}],[\"direction\",{\"1\":{\"243\":1,\"542\":1,\"1123\":1,\"1623\":1}}],[\"directions\",{\"1\":{\"74\":2}}],[\"directly\",{\"1\":{\"227\":6,\"236\":1,\"543\":1,\"550\":1,\"775\":1,\"1202\":1,\"1388\":1}}],[\"direct\",{\"0\":{\"201\":1},\"1\":{\"196\":1,\"199\":1,\"227\":2,\"575\":1,\"601\":1,\"1121\":1,\"1122\":1,\"1264\":1,\"1354\":1,\"1646\":1}}],[\"dirshift\",{\"1\":{\"1309\":1}}],[\"dirs\",{\"1\":{\"74\":2,\"266\":1,\"1418\":1,\"1426\":2}}],[\"digitally\",{\"1\":{\"1508\":1}}],[\"digital\",{\"1\":{\"1079\":2}}],[\"digit\",{\"1\":{\"8\":2,\"401\":2}}],[\"digits\",{\"1\":{\"8\":5,\"391\":1,\"404\":1}}],[\"dig2alph\",{\"1\":{\"8\":2}}],[\"derivative\",{\"1\":{\"1591\":1}}],[\"deriver\",{\"1\":{\"1307\":1}}],[\"derive\",{\"1\":{\"562\":1,\"1204\":1}}],[\"derived\",{\"1\":{\"543\":1,\"1203\":1,\"1204\":1,\"1207\":1,\"1208\":1}}],[\"dereference\",{\"1\":{\"1573\":2}}],[\"de\",{\"1\":{\"1511\":1}}],[\"degrees\",{\"1\":{\"1124\":1}}],[\"densely\",{\"1\":{\"1120\":1}}],[\"dense\",{\"1\":{\"1060\":1}}],[\"densenet\",{\"1\":{\"1012\":1}}],[\"dex2oat\",{\"0\":{\"1370\":1,\"1374\":1,\"1375\":1},\"1\":{\"1371\":2,\"1374\":7,\"1376\":6}}],[\"dexfile\",{\"1\":{\"707\":1,\"1405\":1}}],[\"dex\",{\"0\":{\"668\":1,\"670\":1,\"671\":1},\"1\":{\"652\":1,\"669\":3,\"670\":5,\"671\":12,\"673\":1,\"688\":3,\"1374\":2}}],[\"dedicated\",{\"1\":{\"648\":1}}],[\"dedicating\",{\"1\":{\"542\":1}}],[\"deception\",{\"1\":{\"1623\":1}}],[\"december\",{\"0\":{\"1057\":1},\"1\":{\"907\":1}}],[\"decweakhandle\",{\"1\":{\"1310\":1}}],[\"decrefs\",{\"1\":{\"1310\":1}}],[\"decreasing\",{\"1\":{\"543\":2,\"1534\":1}}],[\"decstronghandle\",{\"1\":{\"1310\":1}}],[\"decided\",{\"1\":{\"1203\":1}}],[\"decibels\",{\"1\":{\"1202\":1}}],[\"decay\",{\"1\":{\"1185\":5,\"1212\":2}}],[\"decade\",{\"1\":{\"542\":1,\"1623\":1}}],[\"dec\",{\"1\":{\"1057\":8}}],[\"decompress\",{\"1\":{\"1216\":1}}],[\"decorators\",{\"0\":{\"407\":1}}],[\"decoding\",{\"1\":{\"245\":1}}],[\"decode<mirror\",{\"1\":{\"706\":2,\"1402\":2}}],[\"decoded\",{\"1\":{\"552\":1,\"1620\":1}}],[\"decode\",{\"1\":{\"236\":1,\"245\":2,\"410\":1,\"550\":1,\"552\":1,\"687\":2,\"1094\":1}}],[\"demonstrates\",{\"1\":{\"1130\":1}}],[\"demonstrate\",{\"1\":{\"599\":1,\"604\":1}}],[\"demo\",{\"0\":{\"680\":1,\"1625\":1},\"1\":{\"378\":2,\"380\":2,\"664\":1,\"681\":1,\"750\":1,\"797\":2}}],[\"demand\",{\"1\":{\"236\":1}}],[\"deeplearning\",{\"2\":{\"1164\":1,\"1188\":1,\"1214\":1,\"1223\":1}}],[\"deep\",{\"1\":{\"926\":1,\"1118\":1,\"1219\":1,\"1542\":1,\"1545\":2,\"1623\":2}}],[\"deepcopy\",{\"1\":{\"341\":4}}],[\"deeper\",{\"1\":{\"241\":1}}],[\"determination\",{\"0\":{\"1481\":1}}],[\"determines\",{\"1\":{\"194\":2,\"1123\":1,\"1487\":1}}],[\"determine\",{\"1\":{\"194\":5,\"236\":1,\"245\":1,\"1492\":1}}],[\"determined\",{\"1\":{\"194\":2,\"234\":1,\"1483\":1,\"1495\":1,\"1496\":1,\"1592\":1}}],[\"detector\",{\"1\":{\"1162\":2}}],[\"detect\",{\"1\":{\"1161\":1}}],[\"detection\",{\"0\":{\"1155\":1},\"1\":{\"1124\":1,\"1150\":1,\"1151\":1,\"1153\":2,\"1206\":2,\"1509\":1}}],[\"detecting\",{\"1\":{\"891\":1,\"1202\":1}}],[\"detected\",{\"1\":{\"548\":1}}],[\"detail\",{\"1\":{\"1202\":1}}],[\"details>\",{\"1\":{\"1110\":2}}],[\"details\",{\"1\":{\"539\":1,\"774\":1,\"781\":1,\"1179\":1,\"1615\":1}}],[\"detailed\",{\"1\":{\"321\":1,\"559\":1,\"1499\":1}}],[\"devdata\",{\"1\":{\"1590\":1,\"1600\":1,\"1611\":2}}],[\"devic\",{\"1\":{\"1532\":1}}],[\"devicename\",{\"1\":{\"1307\":2}}],[\"deviceidle\",{\"1\":{\"1269\":1}}],[\"device\",{\"0\":{\"1533\":1,\"1590\":1,\"1593\":1,\"1600\":1,\"1610\":1,\"1611\":1},\"1\":{\"1054\":1,\"1284\":1,\"1287\":2,\"1307\":6,\"1501\":3,\"1507\":2,\"1509\":1,\"1519\":2,\"1520\":1,\"1532\":1,\"1533\":3,\"1534\":3,\"1541\":1,\"1542\":6,\"1543\":3,\"1544\":5,\"1545\":2,\"1551\":5,\"1590\":5,\"1592\":7,\"1593\":20,\"1594\":1,\"1595\":3,\"1596\":4,\"1597\":7,\"1599\":1,\"1600\":12,\"1601\":3,\"1602\":3,\"1607\":1,\"1608\":3,\"1609\":2,\"1610\":3,\"1611\":13,\"1613\":1}}],[\"devices\",{\"0\":{\"1268\":1},\"1\":{\"227\":3,\"1202\":1,\"1209\":1,\"1268\":1,\"1285\":3,\"1464\":2,\"1501\":3,\"1508\":4,\"1509\":5,\"1592\":1,\"1597\":1,\"1611\":1,\"1613\":2}}],[\"develop\",{\"1\":{\"1052\":1}}],[\"development\",{\"1\":{\"1052\":1,\"1623\":4}}],[\"developer\",{\"0\":{\"1028\":1}}],[\"developers\",{\"1\":{\"777\":1}}],[\"devtools\",{\"0\":{\"928\":1},\"1\":{\"928\":3}}],[\"devmode\",{\"1\":{\"776\":1,\"777\":2}}],[\"dev\",{\"1\":{\"273\":7,\"692\":7,\"712\":1,\"770\":2,\"776\":5,\"942\":1,\"956\":1,\"1055\":1,\"1073\":1,\"1099\":1,\"1101\":5,\"1307\":1,\"1518\":7,\"1519\":5,\"1520\":4,\"1522\":2,\"1525\":1,\"1543\":4,\"1544\":3,\"1545\":3,\"1595\":2,\"1596\":2,\"1607\":1}}],[\"debug\",{\"1\":{\"288\":1,\"289\":2,\"321\":2,\"323\":1,\"326\":1,\"347\":1,\"1054\":1,\"1056\":1,\"1287\":4,\"1341\":1,\"1353\":1,\"1376\":1,\"1416\":1,\"1573\":1}}],[\"deb\",{\"1\":{\"270\":2}}],[\"des\",{\"1\":{\"1258\":1}}],[\"desktop\",{\"1\":{\"842\":1,\"1144\":1}}],[\"destdir=\",{\"1\":{\"1417\":1,\"1424\":1}}],[\"destdir\",{\"0\":{\"1417\":1}}],[\"destruct\",{\"1\":{\"1376\":1}}],[\"destructors\",{\"1\":{\"1376\":1}}],[\"destructor\",{\"1\":{\"1366\":1}}],[\"destruction\",{\"1\":{\"1366\":1}}],[\"destructive\",{\"1\":{\"576\":1,\"601\":2,\"1118\":2}}],[\"destroyallwindows\",{\"1\":{\"1189\":1}}],[\"destination\",{\"1\":{\"236\":1,\"245\":1,\"520\":1,\"557\":1,\"978\":1,\"1424\":4}}],[\"despite\",{\"1\":{\"547\":1,\"553\":1}}],[\"desc\",{\"1\":{\"693\":1}}],[\"descending\",{\"1\":{\"341\":1}}],[\"descriptor\",{\"1\":{\"664\":2,\"1329\":1,\"1333\":1}}],[\"description\",{\"1\":{\"266\":1,\"559\":1,\"681\":2,\"682\":2,\"776\":1,\"785\":1,\"848\":1,\"850\":1,\"1075\":1,\"1239\":1,\"1487\":1}}],[\"describe\",{\"1\":{\"604\":1,\"785\":1,\"1202\":1}}],[\"describes\",{\"1\":{\"559\":1,\"677\":1}}],[\"described\",{\"1\":{\"321\":1,\"1481\":1}}],[\"desirable\",{\"1\":{\"1508\":1}}],[\"desired\",{\"1\":{\"193\":1}}],[\"design↩︎\",{\"1\":{\"1502\":1}}],[\"designating\",{\"1\":{\"245\":1}}],[\"designated\",{\"1\":{\"237\":1}}],[\"design\",{\"0\":{\"1124\":1,\"1156\":1},\"1\":{\"230\":1,\"233\":1,\"557\":1,\"1473\":1,\"1474\":1,\"1509\":1}}],[\"designed\",{\"1\":{\"227\":1,\"235\":1,\"776\":1,\"1130\":1}}],[\"dead\",{\"1\":{\"1310\":1,\"1333\":4}}],[\"deadends\",{\"1\":{\"88\":6}}],[\"death\",{\"1\":{\"1310\":2}}],[\"deafult\",{\"1\":{\"923\":1}}],[\"deaktop\",{\"1\":{\"824\":1}}],[\"deactivate\",{\"1\":{\"445\":1,\"854\":1}}],[\"deal\",{\"1\":{\"236\":1}}],[\"delims=\",{\"1\":{\"1228\":1,\"1231\":1}}],[\"delivery\",{\"1\":{\"775\":1}}],[\"deliver\",{\"1\":{\"236\":1,\"562\":2}}],[\"delɪ\",{\"1\":{\"1126\":1}}],[\"delate\",{\"0\":{\"794\":1}}],[\"delays\",{\"1\":{\"1123\":1}}],[\"delay\",{\"0\":{\"1202\":1},\"1\":{\"243\":1,\"549\":1,\"550\":2,\"844\":2,\"1118\":1,\"1201\":2,\"1202\":5,\"1203\":2,\"1204\":2,\"1207\":1,\"1208\":1,\"1209\":1,\"1590\":2,\"1598\":2,\"1601\":1,\"1611\":4}}],[\"delayed\",{\"1\":{\"237\":1,\"241\":1,\"543\":2,\"1590\":1}}],[\"del\",{\"1\":{\"460\":1,\"955\":1,\"1316\":1}}],[\"deleted\",{\"1\":{\"1316\":1}}],[\"deleterious\",{\"1\":{\"1126\":1}}],[\"deletemany\",{\"1\":{\"794\":1}}],[\"deleteone\",{\"1\":{\"794\":1}}],[\"deletenode\",{\"1\":{\"499\":8}}],[\"delete\",{\"1\":{\"408\":1,\"492\":1,\"751\":2,\"794\":1,\"833\":3,\"865\":1,\"1054\":1,\"1085\":1,\"1099\":2,\"1253\":1,\"1365\":2,\"1366\":1,\"1648\":2}}],[\"deleting\",{\"1\":{\"406\":1,\"1366\":1}}],[\"delta\",{\"1\":{\"35\":3,\"545\":1,\"562\":1,\"664\":1}}],[\"depmod\",{\"1\":{\"717\":3,\"1145\":1}}],[\"dep\",{\"1\":{\"717\":1}}],[\"deployed\",{\"1\":{\"1120\":1}}],[\"deployment\",{\"1\":{\"1099\":1}}],[\"deploy\",{\"1\":{\"623\":1,\"1054\":3,\"1098\":1,\"1099\":1}}],[\"depend\",{\"1\":{\"557\":1,\"559\":1}}],[\"dependent\",{\"1\":{\"548\":4,\"550\":1,\"565\":1}}],[\"dependency\",{\"1\":{\"548\":1,\"568\":1,\"707\":1,\"1405\":1}}],[\"dependencies\",{\"1\":{\"542\":1,\"543\":1,\"580\":1,\"774\":1,\"778\":1,\"892\":1,\"1084\":1,\"1185\":1,\"1551\":1}}],[\"depending\",{\"1\":{\"227\":1,\"245\":1,\"558\":1,\"559\":1}}],[\"depends\",{\"1\":{\"204\":1,\"237\":1,\"243\":1,\"1611\":1}}],[\"depth=1\",{\"1\":{\"1245\":1}}],[\"depth=max\",{\"1\":{\"56\":1}}],[\"depthv2\",{\"1\":{\"1012\":1}}],[\"depth\",{\"1\":{\"54\":4,\"57\":4,\"61\":6,\"62\":4,\"70\":1}}],[\"deques\",{\"1\":{\"341\":1}}],[\"deque\",{\"1\":{\"47\":1,\"52\":1,\"54\":1,\"57\":1,\"59\":1,\"60\":1,\"61\":1,\"80\":1,\"84\":1,\"85\":1,\"86\":1,\"88\":5,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"313\":1,\"341\":7}}],[\"defs\",{\"1\":{\"671\":1,\"1440\":10}}],[\"defg\",{\"1\":{\"313\":1}}],[\"default=40\",{\"1\":{\"1219\":1}}],[\"default=\",{\"1\":{\"1219\":2}}],[\"default=100\",{\"1\":{\"1219\":1}}],[\"default=none\",{\"1\":{\"316\":1,\"1219\":1}}],[\"defaults\",{\"1\":{\"892\":1,\"897\":1}}],[\"default\",{\"1\":{\"309\":1,\"316\":2,\"321\":1,\"341\":1,\"368\":1,\"385\":2,\"609\":2,\"618\":2,\"703\":2,\"745\":1,\"750\":2,\"751\":1,\"759\":1,\"760\":2,\"780\":1,\"851\":1,\"858\":1,\"879\":2,\"923\":1,\"1081\":1,\"1240\":1,\"1264\":1,\"1333\":2,\"1424\":2,\"1483\":1,\"1518\":1,\"1607\":16,\"1626\":2,\"1646\":1}}],[\"defaultdict\",{\"1\":{\"86\":1,\"90\":1,\"153\":1,\"154\":1,\"157\":1,\"159\":1,\"289\":1,\"495\":1}}],[\"defineclass\",{\"1\":{\"708\":1}}],[\"defines\",{\"1\":{\"623\":1,\"1492\":1,\"1507\":1}}],[\"defined\",{\"1\":{\"507\":1,\"510\":1,\"511\":2,\"558\":1,\"776\":1,\"897\":1,\"1469\":1,\"1492\":1,\"1496\":1,\"1499\":1,\"1509\":1,\"1607\":4}}],[\"define\",{\"0\":{\"1529\":1},\"1\":{\"180\":2,\"600\":1,\"692\":1,\"706\":2,\"741\":1,\"778\":1,\"851\":1,\"892\":1,\"931\":2,\"960\":1,\"982\":1,\"1219\":6,\"1309\":2,\"1402\":1,\"1403\":1,\"1449\":1,\"1529\":5,\"1551\":33,\"1553\":13,\"1563\":3,\"1564\":3,\"1565\":3,\"1566\":4,\"1575\":3,\"1591\":1,\"1596\":2,\"1607\":5}}],[\"definitions\",{\"0\":{\"1425\":1},\"1\":{\"671\":1,\"1425\":3}}],[\"definition\",{\"1\":{\"42\":1,\"54\":1,\"499\":1}}],[\"def\",{\"1\":{\"6\":1,\"8\":3,\"9\":5,\"10\":4,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"15\":4,\"19\":2,\"20\":3,\"21\":3,\"26\":1,\"30\":1,\"31\":1,\"32\":3,\"33\":2,\"34\":3,\"35\":2,\"36\":2,\"42\":6,\"43\":1,\"45\":1,\"46\":1,\"47\":4,\"49\":1,\"51\":2,\"52\":1,\"54\":2,\"56\":3,\"57\":1,\"59\":1,\"61\":1,\"62\":3,\"64\":1,\"74\":6,\"75\":7,\"76\":2,\"77\":3,\"79\":3,\"80\":2,\"81\":2,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":4,\"89\":1,\"90\":4,\"91\":1,\"92\":1,\"95\":1,\"96\":1,\"97\":2,\"98\":1,\"102\":4,\"103\":2,\"108\":1,\"118\":2,\"120\":1,\"122\":1,\"124\":1,\"125\":1,\"126\":1,\"130\":2,\"132\":1,\"134\":1,\"136\":1,\"138\":1,\"139\":1,\"149\":1,\"150\":5,\"152\":2,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"165\":2,\"166\":1,\"169\":1,\"173\":3,\"177\":1,\"178\":1,\"184\":2,\"185\":4,\"186\":2,\"285\":3,\"288\":1,\"289\":2,\"293\":2,\"297\":1,\"299\":2,\"313\":1,\"314\":4,\"315\":1,\"316\":1,\"317\":1,\"329\":1,\"341\":2,\"343\":1,\"354\":2,\"371\":1,\"372\":2,\"373\":2,\"374\":1,\"375\":2,\"377\":2,\"379\":6,\"381\":2,\"382\":3,\"385\":4,\"386\":3,\"387\":8,\"388\":4,\"394\":2,\"397\":1,\"400\":1,\"401\":2,\"403\":1,\"408\":5,\"414\":1,\"418\":7,\"420\":4,\"421\":3,\"422\":1,\"424\":15,\"425\":4,\"426\":14,\"427\":9,\"431\":2,\"432\":12,\"433\":3,\"434\":3,\"435\":2,\"436\":2,\"458\":1,\"459\":1,\"460\":2,\"465\":2,\"466\":1,\"467\":1,\"468\":3,\"479\":1,\"480\":2,\"481\":1,\"486\":4,\"493\":2,\"495\":2,\"496\":2,\"499\":6,\"671\":1,\"691\":4,\"796\":1,\"836\":1,\"843\":1,\"858\":1,\"892\":1,\"1094\":1,\"1095\":1,\"1107\":1,\"1185\":4,\"1186\":2,\"1216\":1,\"1219\":1,\"1607\":4,\"1608\":2}}],[\"d\",{\"1\":{\"15\":7,\"74\":6,\"122\":1,\"301\":3,\"302\":2,\"303\":6,\"325\":1,\"349\":1,\"388\":2,\"392\":1,\"401\":3,\"411\":1,\"426\":8,\"427\":2,\"502\":3,\"606\":1,\"609\":2,\"610\":2,\"611\":1,\"612\":1,\"613\":1,\"616\":1,\"621\":1,\"682\":1,\"687\":1,\"707\":2,\"718\":1,\"747\":4,\"751\":2,\"752\":1,\"795\":1,\"797\":1,\"906\":2,\"923\":1,\"973\":1,\"1021\":1,\"1022\":2,\"1025\":3,\"1101\":3,\"1105\":1,\"1145\":3,\"1185\":1,\"1186\":2,\"1212\":1,\"1221\":2,\"1252\":1,\"1263\":1,\"1295\":1,\"1405\":2,\"1446\":1,\"1454\":1,\"1462\":3,\"1463\":4,\"1591\":2,\"1594\":3,\"1595\":2,\"1596\":2,\"1607\":1,\"1645\":1}}],[\"1c\",{\"1\":{\"1463\":1}}],[\"1c000000\",{\"1\":{\"1463\":3}}],[\"1b0c0708\",{\"1\":{\"1463\":1}}],[\"1个小时\",{\"1\":{\"1236\":1}}],[\"1表示右孩子\",{\"1\":{\"1169\":1}}],[\"1+2=3\",{\"1\":{\"1446\":2}}],[\"1+2=\",{\"1\":{\"1446\":1}}],[\"1+\",{\"1\":{\"1103\":1}}],[\"1+n\",{\"1\":{\"559\":2}}],[\"1×1\",{\"1\":{\"1022\":1}}],[\"1xx\",{\"1\":{\"999\":1}}],[\"1m\",{\"1\":{\"825\":1}}],[\"1gb\",{\"1\":{\"825\":1}}],[\"1fa4a\",{\"1\":{\"621\":1}}],[\"1~192\",{\"1\":{\"973\":1}}],[\"1~127\",{\"1\":{\"973\":1}}],[\"1~6\",{\"1\":{\"562\":1}}],[\"1~4\",{\"1\":{\"529\":1}}],[\"1j\",{\"1\":{\"392\":2}}],[\"1n\",{\"1\":{\"390\":1}}],[\"1s\",{\"1\":{\"167\":1,\"985\":3,\"1551\":1}}],[\"1背包总结\",{\"1\":{\"1068\":1}}],[\"1背包保持一致\",{\"1\":{\"134\":1}}],[\"1背包推导而来的\",{\"1\":{\"128\":1}}],[\"1背包\",{\"1\":{\"127\":1,\"1068\":1}}],[\"1背包倒着来\",{\"1\":{\"126\":1}}],[\"1和0\",{\"0\":{\"119\":1},\"1\":{\"114\":1}}],[\"1967\",{\"1\":{\"1501\":1}}],[\"19100793\",{\"1\":{\"1366\":1}}],[\"194\",{\"1\":{\"1244\":1}}],[\"1984\",{\"1\":{\"1501\":1}}],[\"1986\",{\"1\":{\"1127\":1}}],[\"1988\",{\"1\":{\"978\":1}}],[\"1998\",{\"1\":{\"966\":1}}],[\"1996\",{\"1\":{\"606\":5}}],[\"192~223\",{\"1\":{\"973\":1}}],[\"192\",{\"1\":{\"892\":8,\"973\":1}}],[\"195\",{\"1\":{\"444\":1}}],[\"19\",{\"0\":{\"579\":1},\"1\":{\"90\":2,\"146\":1,\"147\":3,\"165\":1,\"196\":1,\"291\":1,\"558\":1,\"563\":1,\"564\":1,\"580\":1,\"664\":2,\"1054\":1,\"1055\":1,\"1056\":1,\"1162\":1}}],[\"14000000\",{\"1\":{\"1463\":1}}],[\"14vundle\",{\"1\":{\"1054\":1}}],[\"1460b\",{\"1\":{\"980\":1}}],[\"1460\",{\"1\":{\"979\":1,\"980\":3}}],[\"14661\",{\"1\":{\"671\":1}}],[\"1480\",{\"1\":{\"979\":1}}],[\"143888405\",{\"1\":{\"707\":1,\"1405\":1}}],[\"1472\",{\"1\":{\"979\":2}}],[\"147\",{\"1\":{\"606\":2}}],[\"144\",{\"1\":{\"94\":1}}],[\"14\",{\"0\":{\"541\":1,\"1042\":1},\"1\":{\"90\":2,\"102\":1,\"150\":1,\"198\":1,\"349\":1,\"360\":1,\"397\":1,\"541\":1,\"584\":1,\"585\":1,\"586\":1,\"587\":1,\"664\":1,\"780\":1,\"1056\":1,\"1057\":1,\"1095\":1,\"1143\":1}}],[\"177\",{\"1\":{\"1244\":1}}],[\"174\",{\"1\":{\"1237\":1}}],[\"179\",{\"1\":{\"898\":1}}],[\"172\",{\"1\":{\"609\":2,\"973\":1}}],[\"1702a132e769a623c1adb78353fc9503\",{\"1\":{\"375\":1}}],[\"17\",{\"1\":{\"90\":2,\"150\":2,\"410\":1,\"609\":2,\"748\":1,\"1052\":1,\"1054\":1,\"1463\":2,\"1551\":1,\"1567\":1,\"1606\":2,\"1607\":1}}],[\"18088\",{\"1\":{\"612\":3}}],[\"18097\",{\"1\":{\"446\":1}}],[\"18\",{\"0\":{\"168\":1},\"1\":{\"90\":2,\"165\":1,\"198\":1,\"308\":2,\"671\":1,\"748\":1,\"750\":2,\"792\":1,\"1052\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1057\":1,\"1161\":1,\"1320\":1,\"1607\":1}}],[\"1的邻居为节点\",{\"1\":{\"89\":1}}],[\"1也是可以的\",{\"1\":{\"88\":1}}],[\"1190000016766079↩︎\",{\"1\":{\"1465\":1}}],[\"11n\",{\"1\":{\"1120\":1,\"1143\":1,\"1145\":1,\"1203\":2}}],[\"11ac\",{\"1\":{\"1120\":1}}],[\"113\",{\"1\":{\"898\":1}}],[\"1145\",{\"1\":{\"606\":2}}],[\"118\",{\"1\":{\"410\":1,\"1054\":1}}],[\"117\",{\"1\":{\"390\":1,\"444\":1}}],[\"1104\",{\"1\":{\"1464\":4}}],[\"1109\",{\"1\":{\"606\":2}}],[\"110\",{\"1\":{\"317\":1}}],[\"1110\",{\"1\":{\"537\":1,\"982\":1}}],[\"111001\",{\"1\":{\"120\":2}}],[\"11111111\",{\"1\":{\"972\":4}}],[\"1111\",{\"1\":{\"537\":2,\"982\":3}}],[\"1115\",{\"1\":{\"349\":1}}],[\"111\",{\"1\":{\"167\":1,\"317\":1,\"390\":1}}],[\"11\",{\"0\":{\"1039\":1,\"1040\":1,\"1041\":1},\"1\":{\"77\":1,\"90\":2,\"122\":2,\"132\":1,\"146\":1,\"147\":2,\"150\":1,\"167\":1,\"341\":2,\"398\":1,\"411\":1,\"664\":1,\"676\":1,\"905\":1,\"906\":1,\"908\":1,\"909\":1,\"1054\":1,\"1055\":1,\"1095\":1,\"1162\":2,\"1203\":2,\"1206\":1,\"1326\":1,\"1427\":1}}],[\"137\",{\"1\":{\"1237\":1}}],[\"1300\",{\"1\":{\"988\":1}}],[\"13e19c5410b145e59dbf70916ed4a3fb\",{\"1\":{\"612\":1}}],[\"138\",{\"1\":{\"606\":2}}],[\"139\",{\"0\":{\"137\":1,\"138\":1}}],[\"133\",{\"1\":{\"89\":1,\"1244\":1}}],[\"13\",{\"1\":{\"77\":2,\"90\":2,\"94\":1,\"155\":2,\"198\":1,\"204\":2,\"360\":1,\"435\":1,\"664\":1,\"981\":1,\"1054\":1,\"1056\":1,\"1095\":1,\"1244\":1,\"1464\":1,\"1496\":1}}],[\"151\",{\"1\":{\"1244\":2}}],[\"1512\",{\"1\":{\"297\":1}}],[\"15m\",{\"1\":{\"1203\":1}}],[\"15803ch\",{\"1\":{\"671\":1}}],[\"15000000\",{\"1\":{\"1463\":1}}],[\"1500\",{\"1\":{\"979\":2,\"980\":1}}],[\"150\",{\"1\":{\"385\":2}}],[\"15\",{\"1\":{\"58\":1,\"90\":2,\"150\":1,\"293\":1,\"360\":1,\"552\":1,\"564\":1,\"664\":1,\"676\":1,\"978\":1,\"1054\":1,\"1055\":1,\"1310\":1,\"1463\":1,\"1499\":1}}],[\"1e\",{\"1\":{\"35\":1,\"1212\":1}}],[\"120\",{\"1\":{\"1054\":1,\"1237\":1}}],[\"1207\",{\"1\":{\"299\":2}}],[\"128~191\",{\"1\":{\"973\":1}}],[\"128\",{\"1\":{\"670\":1,\"692\":1,\"972\":2,\"984\":1,\"1161\":1,\"1212\":1}}],[\"128k\",{\"1\":{\"562\":1}}],[\"128kb\",{\"1\":{\"562\":1}}],[\"12+rank\",{\"1\":{\"562\":2}}],[\"12w2\",{\"1\":{\"557\":1}}],[\"127\",{\"1\":{\"446\":1,\"609\":1,\"618\":1,\"949\":1,\"1264\":1,\"1265\":1,\"1646\":1,\"1647\":1}}],[\"1234\",{\"1\":{\"742\":2,\"743\":1}}],[\"12345\",{\"1\":{\"390\":1}}],[\"12345678\",{\"1\":{\"1285\":1}}],[\"123456\",{\"1\":{\"375\":1,\"609\":1,\"1111\":2}}],[\"123\",{\"1\":{\"394\":4,\"418\":3,\"514\":1,\"939\":1,\"1596\":2}}],[\"121877496↩︎\",{\"1\":{\"539\":1}}],[\"121\",{\"1\":{\"184\":1}}],[\"12\",{\"0\":{\"1042\":1},\"1\":{\"20\":1,\"77\":1,\"90\":2,\"132\":2,\"147\":2,\"184\":1,\"204\":2,\"261\":1,\"262\":1,\"360\":2,\"530\":2,\"664\":1,\"681\":1,\"682\":3,\"789\":1,\"906\":1,\"985\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1057\":1,\"1095\":1,\"1143\":1,\"1144\":2,\"1170\":1,\"1464\":1,\"1509\":1}}],[\"16s\",{\"1\":{\"985\":2}}],[\"168\",{\"1\":{\"973\":2}}],[\"163\",{\"1\":{\"619\":1}}],[\"16\",{\"1\":{\"15\":1,\"90\":2,\"132\":2,\"146\":1,\"147\":2,\"150\":1,\"198\":2,\"204\":1,\"205\":1,\"235\":1,\"245\":3,\"294\":1,\"331\":2,\"511\":1,\"558\":6,\"620\":1,\"664\":1,\"681\":1,\"682\":2,\"692\":1,\"748\":1,\"780\":1,\"949\":1,\"972\":4,\"973\":1,\"978\":1,\"981\":1,\"1055\":1,\"1162\":1,\"1170\":2,\"1462\":1,\"1463\":1,\"1464\":1}}],[\"1080\",{\"1\":{\"1263\":1,\"1264\":1,\"1645\":1,\"1646\":1}}],[\"10~1\",{\"1\":{\"1212\":1}}],[\"10=6\",{\"1\":{\"1170\":1}}],[\"10645725\",{\"1\":{\"1376\":1}}],[\"106\",{\"1\":{\"1161\":1}}],[\"10s\",{\"1\":{\"766\":1}}],[\"10m\",{\"1\":{\"766\":1}}],[\"105\",{\"1\":{\"390\":1,\"1161\":1}}],[\"10^9\",{\"1\":{\"167\":1}}],[\"100w\",{\"1\":{\"594\":1}}],[\"1001\",{\"1\":{\"537\":1}}],[\"10089\",{\"1\":{\"388\":1}}],[\"100\",{\"1\":{\"118\":1,\"165\":3,\"317\":1,\"373\":1,\"374\":1,\"385\":2,\"418\":3,\"432\":8,\"433\":1,\"954\":2,\"1169\":1,\"1185\":1,\"1212\":1,\"1216\":1,\"1282\":1}}],[\"1000000000\",{\"1\":{\"155\":1}}],[\"1000\",{\"1\":{\"88\":1,\"1084\":1,\"1185\":1,\"1212\":1,\"1501\":1}}],[\"103\",{\"1\":{\"61\":1}}],[\"107\",{\"1\":{\"60\":1}}],[\"1024\",{\"1\":{\"194\":2,\"408\":1,\"559\":1,\"954\":1,\"957\":1}}],[\"102\",{\"1\":{\"58\":1,\"182\":1}}],[\"104\",{\"1\":{\"56\":1,\"1161\":1}}],[\"101作为编码器进行迁移学习\",{\"1\":{\"1012\":1}}],[\"1011\",{\"1\":{\"537\":2}}],[\"101\",{\"1\":{\"50\":1,\"52\":1,\"317\":1,\"390\":1,\"1244\":2}}],[\"10\",{\"1\":{\"11\":1,\"77\":8,\"90\":2,\"102\":2,\"120\":3,\"168\":1,\"182\":4,\"275\":1,\"285\":4,\"288\":1,\"339\":1,\"341\":7,\"353\":1,\"418\":1,\"424\":1,\"432\":2,\"433\":2,\"559\":5,\"606\":4,\"664\":6,\"682\":2,\"692\":1,\"707\":1,\"748\":1,\"785\":2,\"786\":3,\"793\":1,\"892\":2,\"906\":1,\"909\":1,\"1004\":2,\"1055\":1,\"1057\":1,\"1095\":1,\"1103\":1,\"1111\":1,\"1162\":1,\"1169\":4,\"1185\":1,\"1186\":2,\"1212\":3,\"1216\":1,\"1217\":1,\"1221\":2,\"1291\":1,\"1326\":1,\"1333\":1,\"1405\":1,\"1448\":1,\"1463\":3,\"1472\":1,\"1515\":1,\"1520\":1,\"1542\":2,\"1586\":1,\"1596\":3,\"1607\":1,\"1623\":1}}],[\"1\",{\"0\":{\"18\":1,\"19\":2,\"20\":1,\"21\":1,\"22\":1,\"94\":2,\"95\":3,\"96\":2,\"97\":2,\"98\":2,\"99\":1,\"100\":2,\"101\":1,\"102\":2,\"103\":1,\"104\":1,\"114\":1,\"116\":1,\"167\":1,\"313\":1,\"358\":1,\"431\":1,\"438\":1,\"712\":1,\"775\":1,\"1029\":1,\"1031\":1,\"1044\":1,\"1144\":2,\"1145\":1,\"1151\":1,\"1153\":1,\"1155\":1,\"1159\":1,\"1161\":1,\"1168\":1,\"1263\":1,\"1327\":1,\"1330\":1,\"1473\":1,\"1494\":1,\"1497\":1,\"1626\":1,\"1645\":1},\"1\":{\"8\":2,\"9\":4,\"11\":10,\"12\":7,\"13\":22,\"14\":7,\"15\":5,\"19\":6,\"20\":15,\"21\":5,\"22\":9,\"23\":2,\"25\":4,\"26\":3,\"27\":1,\"28\":2,\"30\":3,\"31\":2,\"32\":6,\"33\":14,\"34\":9,\"35\":4,\"36\":3,\"46\":2,\"47\":2,\"50\":1,\"51\":1,\"52\":1,\"54\":3,\"56\":3,\"57\":4,\"61\":4,\"62\":4,\"74\":14,\"75\":5,\"76\":19,\"77\":7,\"79\":10,\"80\":8,\"81\":8,\"84\":2,\"85\":7,\"86\":20,\"87\":14,\"88\":14,\"89\":5,\"90\":23,\"92\":7,\"94\":3,\"95\":1,\"96\":5,\"97\":1,\"98\":3,\"102\":5,\"103\":8,\"108\":9,\"112\":2,\"114\":5,\"115\":2,\"116\":1,\"118\":20,\"120\":28,\"122\":7,\"124\":35,\"125\":4,\"126\":3,\"128\":2,\"130\":13,\"132\":12,\"134\":4,\"136\":17,\"138\":4,\"139\":1,\"147\":5,\"149\":6,\"150\":10,\"151\":8,\"152\":5,\"153\":8,\"154\":6,\"155\":7,\"156\":2,\"157\":3,\"158\":5,\"159\":3,\"160\":6,\"164\":1,\"165\":10,\"166\":3,\"167\":6,\"168\":5,\"169\":12,\"172\":8,\"175\":2,\"177\":1,\"183\":5,\"184\":10,\"186\":6,\"194\":6,\"195\":1,\"198\":2,\"202\":4,\"204\":1,\"206\":3,\"217\":1,\"220\":4,\"234\":1,\"251\":1,\"252\":1,\"253\":1,\"269\":1,\"273\":1,\"274\":4,\"288\":1,\"289\":4,\"293\":1,\"297\":3,\"299\":5,\"304\":1,\"308\":4,\"310\":1,\"325\":1,\"331\":1,\"339\":3,\"340\":2,\"341\":10,\"347\":1,\"354\":1,\"356\":2,\"358\":1,\"359\":1,\"360\":6,\"366\":3,\"372\":4,\"374\":2,\"379\":1,\"382\":2,\"386\":4,\"387\":3,\"388\":1,\"392\":2,\"393\":1,\"394\":1,\"395\":2,\"396\":1,\"397\":2,\"398\":2,\"400\":3,\"401\":4,\"411\":1,\"415\":1,\"418\":3,\"420\":4,\"421\":4,\"422\":3,\"427\":2,\"432\":2,\"436\":1,\"446\":1,\"453\":2,\"454\":1,\"465\":3,\"466\":2,\"467\":14,\"478\":1,\"479\":2,\"480\":9,\"481\":2,\"486\":2,\"492\":1,\"495\":1,\"496\":3,\"499\":3,\"502\":2,\"514\":1,\"517\":3,\"518\":1,\"528\":2,\"533\":1,\"534\":2,\"541\":1,\"543\":3,\"555\":1,\"558\":14,\"559\":3,\"562\":2,\"566\":1,\"568\":1,\"571\":1,\"576\":1,\"584\":1,\"599\":1,\"609\":3,\"618\":1,\"624\":1,\"657\":1,\"664\":8,\"673\":2,\"676\":12,\"687\":1,\"688\":2,\"689\":2,\"692\":6,\"693\":2,\"724\":2,\"741\":1,\"742\":3,\"743\":1,\"748\":4,\"797\":1,\"798\":1,\"804\":1,\"848\":1,\"860\":1,\"892\":7,\"898\":1,\"906\":1,\"931\":2,\"949\":1,\"954\":1,\"955\":1,\"966\":2,\"973\":1,\"981\":1,\"982\":6,\"983\":3,\"984\":2,\"985\":3,\"987\":4,\"988\":1,\"999\":4,\"1009\":1,\"1020\":1,\"1021\":1,\"1032\":1,\"1056\":2,\"1105\":2,\"1132\":1,\"1142\":21,\"1145\":1,\"1155\":1,\"1159\":1,\"1161\":8,\"1162\":2,\"1169\":4,\"1170\":4,\"1181\":2,\"1185\":3,\"1186\":22,\"1189\":3,\"1206\":1,\"1212\":12,\"1216\":2,\"1228\":1,\"1231\":2,\"1239\":1,\"1259\":1,\"1264\":1,\"1265\":1,\"1268\":1,\"1278\":1,\"1285\":1,\"1293\":2,\"1309\":1,\"1316\":1,\"1320\":1,\"1326\":1,\"1328\":3,\"1333\":1,\"1341\":3,\"1388\":1,\"1399\":1,\"1413\":1,\"1426\":2,\"1438\":1,\"1446\":1,\"1448\":2,\"1449\":2,\"1459\":1,\"1461\":1,\"1463\":3,\"1464\":3,\"1470\":1,\"1473\":1,\"1476\":3,\"1483\":4,\"1487\":2,\"1492\":2,\"1494\":4,\"1495\":3,\"1496\":2,\"1497\":5,\"1498\":11,\"1499\":3,\"1501\":1,\"1507\":1,\"1515\":2,\"1521\":1,\"1528\":3,\"1534\":2,\"1537\":2,\"1543\":1,\"1551\":2,\"1556\":1,\"1562\":1,\"1571\":1,\"1573\":2,\"1589\":1,\"1595\":1,\"1596\":4,\"1605\":1,\"1620\":1,\"1646\":1,\"1647\":1}}],[\"给\",{\"1\":{\"1295\":1}}],[\"给用户提供一些安全策略\",{\"1\":{\"646\":1}}],[\"给类添加迭代器\",{\"0\":{\"420\":1}}],[\"给出要读取文件的内容\",{\"1\":{\"387\":1}}],[\"给出数字到字母的映射如下\",{\"1\":{\"8\":1}}],[\"给你两个字符串\",{\"1\":{\"479\":1}}],[\"给你两个基因序列\",{\"1\":{\"92\":1}}],[\"给你无向\",{\"1\":{\"89\":1}}],[\"给你一个二进制字符串\",{\"1\":{\"167\":1}}],[\"给你一个二进制字符串数组\",{\"1\":{\"120\":1}}],[\"给你一个整数\",{\"1\":{\"132\":1}}],[\"给你一个整数数组\",{\"1\":{\"124\":1,\"156\":1,\"169\":1}}],[\"给你一个\",{\"1\":{\"122\":1}}],[\"给你一个数组\",{\"1\":{\"86\":1}}],[\"给你一个由\",{\"1\":{\"76\":1,\"136\":1}}],[\"给定多叉树\",{\"1\":{\"486\":1}}],[\"给定入栈和出栈序列\",{\"1\":{\"466\":1}}],[\"给定一段\",{\"1\":{\"657\":1}}],[\"给定一组用外星语书写的单词\",{\"1\":{\"186\":1}}],[\"给定一组非负整数\",{\"1\":{\"182\":1}}],[\"给定一个含有\",{\"1\":{\"160\":1}}],[\"给定一个二叉搜索树\",{\"1\":{\"494\":1}}],[\"给定一个二叉树\",{\"1\":{\"60\":1,\"61\":1}}],[\"给定一个二进制数组\",{\"1\":{\"158\":1}}],[\"给定一个整数数组和一个整数\",{\"1\":{\"151\":1}}],[\"给定一个整数矩阵\",{\"1\":{\"74\":1}}],[\"给定一个非空字符串\",{\"1\":{\"138\":1}}],[\"给定一个\",{\"1\":{\"88\":1}}],[\"给定一个可包含重复数字的序列\",{\"1\":{\"13\":1}}],[\"给定一个不含重复数字的数组\",{\"1\":{\"12\":1}}],[\"给定一个无重复元素的正整数数组\",{\"1\":{\"10\":1}}],[\"给定一个仅包含数字\",{\"1\":{\"8\":1}}],[\"给定不同面额的硬币和一个总金额\",{\"1\":{\"134\":1}}],[\"给定正整数\",{\"1\":{\"132\":1}}],[\"给定\",{\"1\":{\"120\":1,\"236\":1}}],[\"给定数组\",{\"1\":{\"87\":1}}],[\"给定二叉树\",{\"1\":{\"50\":1,\"52\":1}}],[\"给定两个整数\",{\"1\":{\"14\":1}}],[\"返回给用户\",{\"1\":{\"1316\":1}}],[\"返回给\",{\"1\":{\"1316\":1}}],[\"返回空节点\",{\"1\":{\"1169\":1}}],[\"返回空数组\",{\"1\":{\"168\":1}}],[\"返回一次\",{\"1\":{\"956\":1}}],[\"返回一个\",{\"1\":{\"955\":1}}],[\"返回的错误码\",{\"1\":{\"1596\":1}}],[\"返回的次数和发送数据的次数没有关系\",{\"1\":{\"956\":1}}],[\"返回的是含有整个句柄的数组\",{\"1\":{\"954\":1}}],[\"返回的数据放入\",{\"1\":{\"245\":1}}],[\"返回负数\",{\"1\":{\"743\":1}}],[\"返回值说明如下\",{\"1\":{\"742\":1}}],[\"返回值大于\",{\"1\":{\"741\":1}}],[\"返回值小于\",{\"1\":{\"741\":1}}],[\"返回值本身告知当前进程是子进程还是父进程\",{\"1\":{\"738\":1}}],[\"返回值是新派生进程\",{\"1\":{\"738\":1}}],[\"返回在父进程中\",{\"1\":{\"738\":1}}],[\"返回在子进程中\",{\"1\":{\"738\":1}}],[\"返回也是同理\",{\"1\":{\"728\":1}}],[\"返回llvm\",{\"1\":{\"693\":1}}],[\"返回指令等\",{\"1\":{\"691\":1}}],[\"返回迭代器\",{\"1\":{\"394\":1}}],[\"返回包含每次\",{\"1\":{\"393\":1}}],[\"返回了\",{\"1\":{\"329\":1}}],[\"返回排列组合\",{\"1\":{\"317\":1}}],[\"返回排序好的元素\",{\"1\":{\"175\":1}}],[\"返回满足此条件的\",{\"1\":{\"169\":1}}],[\"返回左端点最小的一个\",{\"1\":{\"168\":1}}],[\"返回最短子数组的左端点和右端点\",{\"1\":{\"168\":1}}],[\"返回和为\",{\"1\":{\"132\":1}}],[\"返回此石头最小的可能重量\",{\"1\":{\"125\":1}}],[\"返回可以通过上述方法构造的\",{\"1\":{\"124\":1}}],[\"返回你为了学完所有课程所安排的学习顺序\",{\"1\":{\"86\":1}}],[\"返回时进行类型转换\",{\"1\":{\"60\":1}}],[\"返回她可以在\",{\"1\":{\"34\":1}}],[\"返回范围\",{\"1\":{\"14\":1}}],[\"返回所有字符都为\",{\"1\":{\"167\":1}}],[\"返回所有不重复的全排列\",{\"1\":{\"13\":1}}],[\"返回所有它能表示的字母组合\",{\"1\":{\"8\":1}}],[\"返回答案\",{\"1\":{\"12\":1,\"14\":1}}],[\"返回其他类的实例\",{\"1\":{\"433\":1}}],[\"返回其他实例\",{\"0\":{\"433\":1}}],[\"返回其节点值的锯齿形层序遍历\",{\"1\":{\"61\":1}}],[\"返回其节点值自底向上的层序遍历\",{\"1\":{\"60\":1}}],[\"返回其\",{\"1\":{\"12\":1}}],[\"返回\",{\"1\":{\"8\":1,\"49\":1,\"51\":3,\"86\":1,\"87\":1,\"92\":1,\"138\":1,\"156\":2,\"160\":1,\"186\":2,\"742\":3,\"743\":1,\"872\":1,\"1470\":1,\"1516\":1,\"1534\":1}}],[\"930\",{\"1\":{\"1281\":6}}],[\"9300\",{\"1\":{\"1202\":1}}],[\"9390f2d1a38d7e0cbd2d8115ea6dc05b\",{\"1\":{\"1145\":1}}],[\"94448707\",{\"1\":{\"1179\":1}}],[\"92\",{\"1\":{\"1161\":1}}],[\"9200\",{\"1\":{\"382\":3}}],[\"9c28h\",{\"1\":{\"671\":1}}],[\"96\",{\"0\":{\"598\":1},\"1\":{\"1212\":2}}],[\"97\",{\"1\":{\"390\":1}}],[\"9995\",{\"1\":{\"959\":1}}],[\"9994\",{\"1\":{\"671\":1}}],[\"9999\",{\"1\":{\"613\":1}}],[\"99\",{\"1\":{\"360\":1,\"558\":2,\"1161\":2,\"1185\":2,\"1217\":2}}],[\"997\",{\"1\":{\"87\":1}}],[\"95\",{\"1\":{\"193\":1,\"558\":2}}],[\"953\",{\"1\":{\"173\":1,\"186\":1}}],[\"9~16\",{\"1\":{\"165\":1}}],[\"90010000\",{\"1\":{\"1463\":1}}],[\"9000\",{\"1\":{\"616\":3}}],[\"90\",{\"1\":{\"118\":1,\"542\":1,\"1232\":1,\"1463\":1}}],[\"9\",{\"0\":{\"437\":1,\"438\":1},\"1\":{\"8\":2,\"20\":1,\"58\":1,\"77\":2,\"88\":3,\"90\":2,\"132\":2,\"150\":2,\"165\":1,\"167\":2,\"168\":4,\"169\":1,\"173\":2,\"339\":2,\"341\":4,\"354\":1,\"411\":1,\"606\":1,\"664\":2,\"724\":1,\"892\":1,\"905\":1,\"909\":1,\"1162\":1,\"1212\":4,\"1271\":1,\"1326\":1,\"1515\":1,\"1570\":1}}],[\"2c\",{\"1\":{\"1463\":1}}],[\"2c+\",{\"1\":{\"412\":1}}],[\"2m\",{\"1\":{\"1203\":1,\"1221\":1}}],[\"2msl\",{\"1\":{\"983\":4}}],[\"2是由我们自己生成赖江celeba的数据集转化成voc的数据集\",{\"1\":{\"1159\":1}}],[\"2π\",{\"1\":{\"1025\":1}}],[\"2x1\",{\"1\":{\"1138\":1}}],[\"2x1mpl2w4w\",{\"1\":{\"390\":1}}],[\"2x1mpl2\",{\"1\":{\"390\":1}}],[\"2xx\",{\"1\":{\"999\":1}}],[\"2s\",{\"1\":{\"985\":2,\"1551\":1}}],[\"2字节\",{\"1\":{\"789\":1}}],[\"2^31\",{\"1\":{\"982\":1}}],[\"2^3\",{\"1\":{\"738\":1}}],[\"2^32\",{\"1\":{\"573\":1,\"972\":1}}],[\"2af3ch\",{\"1\":{\"671\":1}}],[\"2~64\",{\"1\":{\"562\":1}}],[\"250\",{\"1\":{\"1244\":1}}],[\"254\",{\"1\":{\"973\":4}}],[\"255\",{\"1\":{\"972\":4,\"973\":9,\"982\":1,\"1161\":2}}],[\"252\",{\"1\":{\"664\":1}}],[\"25\",{\"1\":{\"557\":1,\"676\":3,\"905\":2,\"908\":1,\"1052\":1,\"1054\":1,\"1055\":1,\"1169\":1,\"1189\":2,\"1463\":1,\"1481\":1}}],[\"25640a00\",{\"1\":{\"1463\":1}}],[\"256\",{\"1\":{\"194\":3,\"196\":1,\"204\":3,\"507\":1,\"664\":1,\"743\":1,\"806\":1,\"984\":1,\"1161\":3,\"1263\":1,\"1645\":1}}],[\"26t08\",{\"1\":{\"793\":1}}],[\"26\",{\"1\":{\"480\":1,\"682\":1,\"791\":1,\"793\":1,\"1052\":1,\"1054\":1,\"1055\":1,\"1056\":1,\"1057\":1,\"1269\":4}}],[\"2nd\",{\"1\":{\"445\":1,\"556\":1}}],[\"24element\",{\"1\":{\"1055\":1}}],[\"24000000\",{\"1\":{\"1463\":1}}],[\"240\",{\"1\":{\"973\":1}}],[\"240~255\",{\"1\":{\"973\":1}}],[\"248209\",{\"1\":{\"606\":1}}],[\"24w2\",{\"1\":{\"557\":1}}],[\"241\",{\"1\":{\"410\":1,\"1054\":1}}],[\"24\",{\"0\":{\"1044\":1},\"1\":{\"388\":2,\"410\":1,\"511\":5,\"527\":1,\"676\":1,\"985\":1,\"1052\":1,\"1054\":2,\"1170\":2,\"1333\":1,\"1463\":1,\"1481\":1,\"1591\":1}}],[\"2da9ae73b65f4cce8cff91fc027fa\",{\"1\":{\"1094\":1}}],[\"2d\",{\"1\":{\"308\":1,\"562\":2,\"892\":1}}],[\"2o\",{\"1\":{\"274\":2}}],[\"299\",{\"1\":{\"1161\":1}}],[\"29th\",{\"1\":{\"606\":1}}],[\"29\",{\"0\":{\"569\":1,\"1041\":1},\"1\":{\"194\":1,\"536\":2,\"606\":1,\"676\":1,\"1052\":1,\"1055\":1,\"1341\":1,\"1499\":1}}],[\"280\",{\"1\":{\"988\":1}}],[\"281474976710656\",{\"1\":{\"537\":1}}],[\"28\",{\"1\":{\"194\":1,\"257\":1,\"381\":2,\"528\":1,\"1052\":1,\"1054\":1,\"1056\":1,\"1170\":2,\"1463\":1}}],[\"2222\",{\"1\":{\"1453\":1}}],[\"228\",{\"1\":{\"1244\":1}}],[\"223\",{\"1\":{\"1244\":1}}],[\"224\",{\"1\":{\"973\":1}}],[\"224~239\",{\"1\":{\"973\":1}}],[\"226\",{\"1\":{\"606\":1}}],[\"22age\",{\"1\":{\"412\":1}}],[\"22weigao\",{\"1\":{\"412\":1}}],[\"22name\",{\"1\":{\"412\":1}}],[\"220\",{\"1\":{\"261\":2,\"892\":3,\"1054\":1,\"1237\":1}}],[\"22\",{\"0\":{\"1040\":1},\"1\":{\"165\":1,\"341\":2,\"412\":3,\"1053\":1,\"1055\":1,\"1056\":1,\"1237\":1,\"1453\":1,\"1463\":1,\"1596\":1,\"1607\":1}}],[\"27017\",{\"1\":{\"611\":1,\"796\":1}}],[\"27077\",{\"1\":{\"611\":2}}],[\"27\",{\"1\":{\"146\":1,\"147\":2,\"1052\":1,\"1054\":1,\"1056\":1}}],[\"279\",{\"0\":{\"131\":1,\"132\":1}}],[\"2∗n\",{\"1\":{\"104\":1}}],[\"2∗1\",{\"1\":{\"104\":2}}],[\"21\",{\"1\":{\"94\":1,\"165\":1,\"444\":1,\"530\":1,\"543\":1,\"676\":1,\"977\":1,\"992\":3,\"1056\":1,\"1161\":1,\"1463\":2}}],[\"210\",{\"1\":{\"86\":1,\"182\":2}}],[\"20mhz\",{\"1\":{\"1203\":1}}],[\"208\",{\"1\":{\"1161\":2}}],[\"20bits\",{\"1\":{\"991\":1}}],[\"2006\",{\"1\":{\"1209\":1}}],[\"2004年agrawal在文献中提出了一种保序加密方案opse\",{\"1\":{\"1168\":1}}],[\"200\",{\"1\":{\"999\":1}}],[\"2009\",{\"1\":{\"967\":1}}],[\"2000\",{\"1\":{\"957\":1,\"980\":2}}],[\"20th\",{\"1\":{\"566\":1}}],[\"20happy\",{\"1\":{\"481\":1}}],[\"20are\",{\"1\":{\"481\":1}}],[\"2013\",{\"1\":{\"1004\":1}}],[\"2015\",{\"1\":{\"966\":1,\"1004\":1,\"1623\":1}}],[\"201811201036\",{\"1\":{\"909\":1}}],[\"2018\",{\"0\":{\"1038\":1,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1051\":1},\"1\":{\"793\":1,\"905\":3,\"906\":1,\"909\":1,\"1004\":3,\"1075\":1,\"1076\":1,\"1111\":1}}],[\"2019\",{\"0\":{\"1007\":1,\"1043\":1,\"1044\":1},\"1\":{\"606\":3,\"1111\":1}}],[\"2017\",{\"1\":{\"568\":1,\"1004\":2,\"1076\":1,\"1623\":1}}],[\"2014\",{\"1\":{\"566\":2,\"1004\":1,\"1472\":1}}],[\"201\",{\"1\":{\"444\":1}}],[\"202599\",{\"1\":{\"1159\":1}}],[\"2020年5月17日\",{\"1\":{\"1114\":1}}],[\"2020年5月14日\",{\"1\":{\"1113\":1}}],[\"2020年3月26日\",{\"0\":{\"1046\":1}}],[\"2020\",{\"0\":{\"1045\":1},\"1\":{\"1623\":1}}],[\"2022\",{\"1\":{\"664\":1}}],[\"2022年4月18日\",{\"1\":{\"185\":1}}],[\"2021年5月23日\",{\"1\":{\"1068\":2}}],[\"2021年10月18日\",{\"0\":{\"1048\":1}}],[\"2021年10月24日\",{\"1\":{\"1032\":1}}],[\"2021\",{\"0\":{\"1047\":1},\"1\":{\"445\":1,\"499\":1}}],[\"20230303\",{\"1\":{\"349\":1}}],[\"2023\",{\"1\":{\"250\":1,\"1623\":1}}],[\"20\",{\"0\":{\"1039\":1},\"1\":{\"58\":1,\"165\":1,\"261\":4,\"339\":3,\"341\":3,\"412\":2,\"481\":2,\"549\":1,\"573\":1,\"797\":1,\"905\":1,\"909\":1,\"977\":1,\"979\":4,\"980\":2,\"992\":3,\"1056\":1,\"1143\":1,\"1157\":2,\"1169\":1,\"1170\":2,\"1623\":1}}],[\"2333\",{\"1\":{\"750\":2}}],[\"2375\",{\"1\":{\"618\":1}}],[\"237090\",{\"1\":{\"606\":1}}],[\"237173↩︎↩︎\",{\"1\":{\"606\":2}}],[\"237\",{\"1\":{\"606\":1}}],[\"232\",{\"1\":{\"468\":1}}],[\"2345\",{\"1\":{\"972\":2}}],[\"234\",{\"1\":{\"205\":1}}],[\"23\",{\"1\":{\"8\":1,\"156\":1,\"676\":1,\"1052\":1,\"1053\":1,\"1055\":1,\"1333\":1,\"1463\":1}}],[\"2\",{\"0\":{\"20\":1,\"96\":1,\"99\":1,\"100\":1,\"103\":1,\"359\":1,\"432\":1,\"713\":1,\"776\":1,\"965\":1,\"966\":1,\"1030\":1,\"1031\":1,\"1145\":1,\"1152\":1,\"1153\":1,\"1154\":2,\"1155\":2,\"1156\":3,\"1157\":2,\"1160\":1,\"1161\":1,\"1162\":2,\"1169\":1,\"1264\":1,\"1331\":1,\"1334\":1,\"1495\":1,\"1627\":1,\"1646\":1},\"1\":{\"8\":2,\"9\":3,\"10\":7,\"11\":3,\"12\":7,\"13\":4,\"14\":4,\"19\":2,\"20\":3,\"21\":1,\"23\":1,\"25\":1,\"26\":1,\"28\":2,\"30\":2,\"31\":1,\"32\":2,\"33\":3,\"34\":2,\"35\":5,\"36\":1,\"46\":2,\"50\":2,\"52\":2,\"61\":2,\"74\":3,\"75\":1,\"77\":1,\"79\":2,\"81\":7,\"84\":2,\"86\":10,\"87\":6,\"88\":4,\"89\":6,\"90\":13,\"94\":2,\"95\":2,\"96\":3,\"97\":2,\"98\":1,\"102\":7,\"103\":5,\"118\":1,\"122\":2,\"124\":7,\"125\":2,\"132\":2,\"136\":6,\"147\":1,\"149\":2,\"150\":4,\"151\":2,\"155\":10,\"156\":5,\"158\":1,\"160\":3,\"165\":12,\"168\":1,\"169\":8,\"172\":9,\"175\":2,\"177\":1,\"182\":4,\"192\":1,\"194\":5,\"198\":3,\"202\":2,\"203\":3,\"204\":2,\"213\":1,\"224\":1,\"236\":1,\"245\":3,\"251\":1,\"253\":1,\"274\":1,\"297\":2,\"299\":4,\"308\":1,\"310\":1,\"317\":1,\"339\":5,\"340\":2,\"341\":8,\"360\":1,\"366\":3,\"373\":2,\"374\":4,\"379\":1,\"386\":4,\"387\":1,\"388\":1,\"394\":1,\"395\":1,\"397\":1,\"398\":1,\"401\":1,\"421\":1,\"422\":2,\"427\":2,\"453\":4,\"467\":5,\"481\":3,\"486\":1,\"499\":3,\"502\":1,\"523\":1,\"545\":1,\"552\":1,\"556\":1,\"557\":2,\"559\":5,\"562\":2,\"568\":1,\"576\":2,\"585\":1,\"587\":2,\"601\":1,\"605\":1,\"609\":1,\"618\":2,\"664\":8,\"674\":1,\"676\":10,\"689\":2,\"692\":2,\"724\":1,\"741\":2,\"747\":1,\"748\":3,\"766\":1,\"776\":3,\"785\":2,\"786\":3,\"791\":2,\"844\":2,\"892\":1,\"906\":5,\"927\":1,\"939\":2,\"965\":1,\"966\":2,\"967\":1,\"977\":1,\"982\":1,\"983\":2,\"987\":1,\"1009\":1,\"1020\":1,\"1021\":2,\"1022\":1,\"1025\":1,\"1032\":1,\"1056\":3,\"1057\":1,\"1105\":2,\"1111\":1,\"1124\":1,\"1125\":1,\"1138\":1,\"1142\":16,\"1143\":3,\"1145\":5,\"1157\":5,\"1159\":1,\"1161\":1,\"1162\":1,\"1169\":1,\"1170\":4,\"1186\":10,\"1212\":11,\"1228\":1,\"1249\":1,\"1285\":1,\"1326\":1,\"1333\":2,\"1383\":1,\"1388\":1,\"1413\":1,\"1440\":1,\"1445\":1,\"1446\":1,\"1448\":1,\"1459\":1,\"1463\":10,\"1464\":2,\"1476\":3,\"1479\":1,\"1483\":2,\"1487\":1,\"1492\":2,\"1495\":5,\"1508\":1,\"1515\":1,\"1517\":1,\"1551\":4,\"1553\":1,\"1556\":1,\"1592\":1,\"1598\":1,\"1605\":1}}],[\"t0\",{\"1\":{\"1598\":1}}],[\"twice\",{\"1\":{\"1592\":1}}],[\"two\",{\"0\":{\"1120\":1},\"1\":{\"194\":2,\"203\":1,\"236\":7,\"237\":1,\"241\":1,\"245\":2,\"256\":1,\"342\":1,\"458\":1,\"543\":1,\"545\":1,\"546\":2,\"547\":1,\"555\":1,\"558\":1,\"559\":1,\"562\":2,\"565\":1,\"592\":1,\"675\":1,\"851\":1,\"930\":1,\"940\":1,\"986\":1,\"1124\":1,\"1204\":2,\"1207\":2,\"1221\":1,\"1507\":1,\"1509\":1,\"1620\":1,\"1623\":1}}],[\"td\",{\"1\":{\"1542\":5,\"1543\":3,\"1544\":4}}],[\"tdoa\",{\"1\":{\"1123\":2}}],[\"tdoa室内定位算法以及最终融合aoa和tdoa的基于wifi的室内定位算法\",{\"1\":{\"1012\":1}}],[\"t↩︎\",{\"1\":{\"1472\":1}}],[\"tgid\",{\"1\":{\"1515\":1}}],[\"tgt\",{\"1\":{\"1344\":1}}],[\"tgz\",{\"1\":{\"776\":1}}],[\"t中\",{\"1\":{\"1252\":1}}],[\"tfp\",{\"1\":{\"1485\":1}}],[\"tfrecords\",{\"1\":{\"1219\":1}}],[\"tf\",{\"1\":{\"1142\":10,\"1185\":32,\"1186\":32,\"1212\":61,\"1217\":19,\"1219\":6,\"1320\":2,\"1333\":2}}],[\"tfff\",{\"1\":{\"164\":1}}],[\"tfft\",{\"1\":{\"164\":1}}],[\"tɪərɪəs\",{\"1\":{\"1126\":1}}],[\"tzp\",{\"0\":{\"1591\":1},\"1\":{\"1590\":1,\"1591\":2,\"1611\":2}}],[\"tzc\",{\"1\":{\"1492\":1}}],[\"tz\",{\"1\":{\"1113\":2,\"1591\":1,\"1592\":2,\"1595\":4,\"1596\":12,\"1599\":1,\"1602\":9,\"1607\":3,\"1608\":1,\"1609\":10,\"1610\":2}}],[\"tcb\",{\"1\":{\"988\":9}}],[\"tcpac\",{\"1\":{\"1485\":1}}],[\"tcp才会把断开这个连接\",{\"1\":{\"985\":1}}],[\"tcp的\",{\"1\":{\"978\":1}}],[\"tcp采用了超时重传\",{\"1\":{\"977\":1}}],[\"tcp\",{\"0\":{\"970\":1,\"974\":1,\"976\":1,\"977\":1,\"978\":1,\"982\":1,\"983\":1,\"988\":1,\"991\":1,\"1000\":1},\"1\":{\"740\":1,\"951\":3,\"954\":1,\"970\":1,\"974\":3,\"975\":1,\"976\":6,\"977\":2,\"978\":8,\"979\":2,\"980\":8,\"981\":9,\"982\":5,\"983\":1,\"984\":2,\"987\":2,\"988\":2,\"989\":1,\"991\":1,\"992\":1,\"994\":1,\"997\":4},\"2\":{\"964\":1,\"1002\":1}}],[\"tta\",{\"1\":{\"1485\":1}}],[\"ttroy50\",{\"1\":{\"1435\":1}}],[\"tty\",{\"1\":{\"956\":1}}],[\"ttl\",{\"1\":{\"827\":1}}],[\"tbp\",{\"1\":{\"1591\":3}}],[\"tbps\",{\"1\":{\"1591\":2}}],[\"tbb\",{\"1\":{\"1474\":2}}],[\"tbbr\",{\"1\":{\"1474\":1}}],[\"tbz\",{\"1\":{\"517\":1}}],[\"tbnz\",{\"0\":{\"521\":1},\"1\":{\"517\":1,\"521\":2}}],[\"tsadc\",{\"1\":{\"1605\":1}}],[\"ts=4\",{\"1\":{\"1259\":1}}],[\"tst\",{\"0\":{\"518\":1}}],[\"tsinghua\",{\"1\":{\"449\":1,\"1176\":1,\"1177\":1}}],[\"tsum\",{\"1\":{\"166\":3}}],[\"txt文件和指明验证图片绝对路径的val\",{\"1\":{\"1159\":1}}],[\"txt文件\",{\"1\":{\"1159\":1}}],[\"txt中保存\",{\"1\":{\"1159\":1}}],[\"txt\",{\"0\":{\"855\":1},\"1\":{\"285\":1,\"291\":2,\"326\":2,\"329\":2,\"358\":1,\"359\":1,\"360\":1,\"387\":6,\"659\":2,\"747\":2,\"751\":7,\"847\":1,\"855\":4,\"999\":1,\"1159\":2,\"1162\":2,\"1248\":3,\"1264\":1,\"1278\":1,\"1287\":1,\"1414\":2,\"1424\":2,\"1432\":1,\"1434\":4,\"1453\":3,\"1646\":1}}],[\"tk\",{\"1\":{\"273\":1}}],[\"tickdev\",{\"1\":{\"1541\":2,\"1543\":1,\"1545\":2}}],[\"tickless\",{\"0\":{\"1536\":1},\"1\":{\"1536\":1,\"1584\":3}}],[\"tick\",{\"0\":{\"1539\":1,\"1541\":2,\"1542\":1,\"1543\":1,\"1544\":1,\"1545\":1,\"1546\":1},\"1\":{\"1514\":1,\"1516\":1,\"1518\":15,\"1520\":2,\"1536\":2,\"1540\":3,\"1541\":10,\"1542\":30,\"1543\":6,\"1544\":12,\"1545\":19,\"1584\":3}}],[\"tiny\",{\"1\":{\"1162\":3,\"1586\":3}}],[\"tiptop\",{\"1\":{\"1633\":2}}],[\"tip\",{\"1\":{\"1103\":1,\"1106\":1}}],[\"tips\",{\"1\":{\"401\":1,\"748\":1,\"991\":1}}],[\"timings\",{\"0\":{\"1527\":1},\"1\":{\"1527\":4}}],[\"timingmessage\",{\"1\":{\"1095\":1}}],[\"tim\",{\"1\":{\"1060\":1}}],[\"timer\",{\"1\":{\"1499\":2,\"1520\":1,\"1521\":4,\"1534\":2,\"1536\":3,\"1541\":1,\"1542\":1,\"1545\":4}}],[\"time体现是yolo算法速度快\",{\"1\":{\"1151\":1}}],[\"timezone\",{\"1\":{\"1113\":3}}],[\"timed\",{\"0\":{\"1095\":1},\"1\":{\"1299\":2}}],[\"timedelta\",{\"1\":{\"844\":2}}],[\"timeend\",{\"1\":{\"911\":1}}],[\"timely\",{\"1\":{\"556\":1}}],[\"timeit\",{\"0\":{\"366\":1},\"1\":{\"366\":3}}],[\"timeout=0\",{\"1\":{\"750\":2}}],[\"timeout\",{\"0\":{\"1232\":1},\"1\":{\"286\":1,\"336\":1,\"763\":1,\"833\":1,\"955\":1,\"984\":1,\"1232\":3,\"1263\":1,\"1645\":1}}],[\"timestamps\",{\"1\":{\"978\":1,\"987\":1}}],[\"timestamp\",{\"0\":{\"909\":1},\"1\":{\"909\":1,\"1113\":3}}],[\"times\",{\"1\":{\"236\":1,\"546\":1,\"1202\":1,\"1228\":1,\"1623\":1}}],[\"time\",{\"0\":{\"211\":1,\"549\":1,\"557\":1,\"905\":1},\"1\":{\"177\":2,\"192\":1,\"194\":1,\"210\":1,\"234\":4,\"236\":2,\"237\":1,\"241\":1,\"243\":1,\"250\":1,\"255\":1,\"256\":1,\"271\":1,\"285\":8,\"289\":2,\"349\":1,\"366\":1,\"465\":1,\"492\":1,\"543\":6,\"549\":2,\"552\":1,\"556\":1,\"557\":4,\"558\":1,\"559\":2,\"565\":3,\"568\":1,\"593\":1,\"600\":1,\"606\":1,\"682\":1,\"747\":1,\"850\":1,\"905\":1,\"906\":1,\"908\":1,\"909\":2,\"911\":1,\"955\":1,\"978\":1,\"983\":2,\"1000\":1,\"1052\":1,\"1056\":1,\"1057\":1,\"1076\":1,\"1077\":1,\"1113\":2,\"1123\":1,\"1125\":1,\"1150\":1,\"1151\":1,\"1189\":1,\"1202\":5,\"1203\":1,\"1204\":1,\"1208\":2,\"1376\":1,\"1534\":1,\"1536\":1,\"1542\":2,\"1611\":1,\"1623\":1}}],[\"tiered\",{\"1\":{\"662\":2}}],[\"tight\",{\"1\":{\"543\":2,\"544\":1,\"546\":2,\"552\":6,\"559\":2}}],[\"ti500\",{\"1\":{\"491\":1}}],[\"tid=\",{\"1\":{\"1231\":2,\"1279\":1}}],[\"tidy\",{\"1\":{\"692\":1,\"1469\":1}}],[\"tid\",{\"0\":{\"1279\":1},\"1\":{\"354\":1,\"1279\":1}}],[\"tiktok\",{\"1\":{\"331\":1,\"1623\":1}}],[\"title>\",{\"1\":{\"1004\":1}}],[\"title=\",{\"1\":{\"937\":1}}],[\"title\",{\"1\":{\"266\":1,\"938\":2,\"939\":1,\"1075\":2,\"1076\":2,\"1099\":1,\"1111\":2}}],[\"tl\",{\"1\":{\"1177\":1}}],[\"tls\",{\"1\":{\"992\":1}}],[\"tlbs\",{\"1\":{\"256\":2}}],[\"tlb\",{\"0\":{\"254\":1,\"255\":1,\"256\":1,\"264\":1,\"1522\":1},\"1\":{\"250\":1,\"255\":15,\"256\":25,\"258\":6,\"261\":14,\"1520\":1,\"1522\":7,\"1523\":1}}],[\"tle\",{\"1\":{\"100\":1}}],[\"talkwithdriver\",{\"0\":{\"1301\":1},\"1\":{\"1299\":1,\"1300\":2,\"1301\":1,\"1317\":1,\"1333\":3}}],[\"tap\",{\"0\":{\"1280\":1,\"1282\":1},\"1\":{\"1282\":1}}],[\"taking\",{\"1\":{\"1216\":1}}],[\"take\",{\"1\":{\"357\":1,\"797\":1,\"853\":1,\"1073\":1,\"1203\":1,\"1376\":1,\"1523\":2,\"1623\":1}}],[\"taken\",{\"1\":{\"243\":1,\"245\":1,\"751\":1,\"1485\":2}}],[\"takes\",{\"1\":{\"234\":1,\"255\":1,\"271\":1,\"851\":1}}],[\"taste\",{\"1\":{\"927\":2}}],[\"tasks\",{\"1\":{\"1536\":2}}],[\"task\",{\"0\":{\"624\":1,\"844\":1},\"1\":{\"252\":2,\"285\":2,\"321\":2,\"573\":1,\"600\":1,\"624\":3,\"843\":1,\"844\":2}}],[\"taobao\",{\"1\":{\"918\":2,\"1623\":1}}],[\"tandy\",{\"1\":{\"776\":1}}],[\"taxonomy\",{\"0\":{\"571\":1},\"1\":{\"545\":1}}],[\"tail\",{\"1\":{\"460\":3,\"612\":1,\"692\":1}}],[\"tabs\",{\"0\":{\"1107\":1},\"1\":{\"1107\":1}}],[\"tab\",{\"1\":{\"390\":8,\"1056\":1,\"1107\":3}}],[\"table的编码值按照从小到大的顺序排列\",{\"1\":{\"1170\":1}}],[\"tables\",{\"0\":{\"596\":1},\"1\":{\"256\":1,\"552\":2,\"553\":1,\"556\":2,\"559\":2,\"562\":1,\"581\":1,\"692\":1,\"804\":1,\"810\":1,\"1355\":1,\"1484\":1,\"1491\":1,\"1498\":1}}],[\"table\",{\"1\":{\"196\":1,\"243\":2,\"256\":5,\"492\":2,\"545\":2,\"549\":1,\"553\":2,\"555\":2,\"556\":2,\"557\":2,\"558\":2,\"559\":2,\"562\":1,\"575\":2,\"584\":1,\"587\":1,\"599\":1,\"602\":4,\"797\":1,\"798\":2,\"804\":2,\"805\":6,\"806\":5,\"807\":3,\"819\":1,\"1055\":3,\"1355\":1,\"1464\":1,\"1606\":2}}],[\"tag=csitool\",{\"1\":{\"1145\":1}}],[\"tagless\",{\"1\":{\"559\":1,\"562\":2}}],[\"tagged\",{\"0\":{\"559\":1},\"1\":{\"559\":1,\"562\":3,\"584\":1,\"601\":1}}],[\"tage\",{\"1\":{\"543\":1,\"559\":2}}],[\"tag\",{\"0\":{\"196\":1,\"1246\":1},\"1\":{\"194\":20,\"195\":5,\"196\":8,\"197\":1,\"198\":2,\"202\":4,\"204\":2,\"205\":1,\"212\":1,\"217\":1,\"261\":2,\"559\":3,\"562\":2,\"576\":2,\"577\":1,\"584\":4,\"585\":1,\"586\":1,\"587\":2,\"595\":1,\"601\":1,\"622\":4,\"666\":2,\"702\":1,\"752\":1,\"1056\":1,\"1076\":1,\"1111\":2,\"1246\":5}}],[\"tags\",{\"0\":{\"1103\":1},\"1\":{\"194\":1,\"204\":1,\"243\":1,\"1246\":1}}],[\"tar>\",{\"1\":{\"1454\":1}}],[\"tarfile\",{\"1\":{\"1216\":2}}],[\"tar和ubuntu\",{\"1\":{\"1144\":1}}],[\"tar文件\",{\"1\":{\"1144\":1,\"1145\":1}}],[\"tar\",{\"0\":{\"752\":1},\"1\":{\"273\":1,\"274\":2,\"712\":2,\"752\":4,\"770\":2,\"776\":1,\"785\":1,\"1145\":2,\"1216\":2,\"1454\":20}}],[\"targets\",{\"1\":{\"1424\":2}}],[\"targetsdkversion\",{\"1\":{\"702\":2,\"703\":1}}],[\"target+1\",{\"1\":{\"165\":2}}],[\"target的话就返回\",{\"1\":{\"10\":1}}],[\"target\",{\"0\":{\"1421\":1,\"1423\":1,\"1425\":1,\"1428\":1},\"1\":{\"10\":12,\"11\":5,\"15\":10,\"19\":6,\"20\":11,\"21\":5,\"25\":1,\"26\":2,\"30\":3,\"83\":1,\"88\":2,\"115\":1,\"120\":1,\"122\":4,\"124\":15,\"125\":5,\"136\":8,\"139\":1,\"160\":8,\"165\":9,\"236\":1,\"243\":1,\"245\":2,\"285\":1,\"548\":1,\"600\":1,\"692\":6,\"703\":1,\"879\":1,\"1320\":1,\"1333\":6,\"1341\":1,\"1344\":1,\"1345\":1,\"1421\":5,\"1423\":1,\"1424\":1,\"1425\":3,\"1428\":1,\"1439\":5,\"1440\":3,\"1445\":1,\"1448\":1,\"1449\":1,\"1499\":1,\"1520\":6,\"1521\":4,\"1522\":2,\"1523\":3,\"1524\":1,\"1525\":1,\"1526\":1,\"1629\":2}}],[\"tarack\",{\"1\":{\"6\":1}}],[\"t>\",{\"1\":{\"179\":1,\"455\":1,\"1320\":1}}],[\"tell\",{\"1\":{\"1542\":1}}],[\"tells\",{\"1\":{\"1076\":1,\"1507\":1}}],[\"tee\",{\"1\":{\"1145\":3}}],[\"tensors\",{\"1\":{\"1186\":1}}],[\"tensor\",{\"1\":{\"1185\":2,\"1186\":2,\"1217\":1}}],[\"tensorflow对这两个功能进行了统一封装\",{\"1\":{\"1212\":1}}],[\"tensorflow中一些简单但是容易忘记的\",{\"1\":{\"1212\":1}}],[\"tensorflow\",{\"0\":{\"1212\":1,\"1215\":1,\"1217\":1},\"1\":{\"1142\":1,\"1185\":3,\"1186\":1,\"1212\":4,\"1217\":3,\"1219\":1}}],[\"tencent\",{\"1\":{\"1054\":1}}],[\"teaching\",{\"1\":{\"1616\":1}}],[\"team\",{\"1\":{\"1052\":1,\"1130\":1,\"1202\":1}}],[\"teardown\",{\"1\":{\"150\":1,\"385\":1,\"387\":2,\"388\":1}}],[\"technology\",{\"1\":{\"1623\":2}}],[\"technological\",{\"1\":{\"1201\":1}}],[\"technologies\",{\"1\":{\"1120\":1}}],[\"technical\",{\"1\":{\"566\":1}}],[\"techniques\",{\"1\":{\"256\":1}}],[\"technique\",{\"1\":{\"217\":1,\"234\":1,\"250\":1,\"568\":1,\"599\":1,\"604\":1}}],[\"tech\",{\"1\":{\"1012\":1}}],[\"texstudio\",{\"1\":{\"1178\":1}}],[\"texstdio\",{\"0\":{\"1178\":1},\"1\":{\"1178\":1}}],[\"texlive\",{\"0\":{\"1177\":1},\"1\":{\"1176\":2,\"1177\":1}}],[\"tex\",{\"0\":{\"1176\":1},\"1\":{\"1177\":1,\"1179\":2}}],[\"texas\",{\"1\":{\"798\":1}}],[\"text+0x1f\",{\"1\":{\"1449\":1}}],[\"textcontent\",{\"1\":{\"935\":1}}],[\"text=\",{\"1\":{\"935\":1,\"1103\":2}}],[\"text<\",{\"1\":{\"892\":1}}],[\"text\",{\"0\":{\"935\":1,\"1084\":1},\"1\":{\"194\":1,\"361\":2,\"743\":1,\"751\":1,\"760\":1,\"785\":1,\"892\":3,\"896\":1,\"897\":1,\"940\":2,\"999\":1,\"1004\":1,\"1056\":1,\"1079\":1,\"1094\":5,\"1201\":1,\"1460\":2,\"1463\":3,\"1551\":2,\"1553\":4,\"1573\":1}}],[\"term\",{\"1\":{\"1501\":2}}],[\"terminated\",{\"1\":{\"1448\":1}}],[\"terminal\",{\"1\":{\"794\":1,\"961\":1,\"1053\":1,\"1076\":1}}],[\"terms↩︎\",{\"1\":{\"682\":1}}],[\"terms\",{\"1\":{\"557\":1,\"1385\":1,\"1623\":1}}],[\"tes\",{\"1\":{\"1446\":1}}],[\"tesrdown\",{\"1\":{\"387\":1}}],[\"testpingservice\",{\"1\":{\"1320\":1}}],[\"testabilityproxy\",{\"1\":{\"1320\":1}}],[\"testing\",{\"1\":{\"1252\":6}}],[\"tests\",{\"1\":{\"382\":1,\"864\":1}}],[\"testsolution\",{\"1\":{\"150\":1}}],[\"testclassscope\",{\"1\":{\"379\":1}}],[\"testcase\",{\"0\":{\"81\":1},\"1\":{\"81\":1,\"90\":1,\"102\":1,\"150\":1,\"385\":1,\"386\":1,\"387\":2,\"388\":1}}],[\"test07\",{\"1\":{\"285\":1}}],[\"test01\",{\"1\":{\"81\":1,\"173\":1,\"354\":1,\"1626\":1,\"1627\":1,\"1629\":1}}],[\"test2\",{\"1\":{\"90\":1}}],[\"test\",{\"0\":{\"784\":1},\"1\":{\"81\":1,\"90\":2,\"102\":2,\"150\":2,\"173\":2,\"309\":1,\"371\":2,\"372\":6,\"373\":4,\"374\":4,\"375\":4,\"377\":2,\"378\":2,\"379\":3,\"381\":2,\"382\":2,\"385\":2,\"386\":4,\"387\":7,\"388\":2,\"390\":2,\"397\":2,\"403\":5,\"418\":9,\"427\":4,\"433\":2,\"568\":1,\"606\":1,\"620\":1,\"747\":1,\"766\":1,\"784\":3,\"785\":1,\"797\":1,\"890\":1,\"1052\":4,\"1076\":2,\"1162\":2,\"1185\":1,\"1445\":8,\"1446\":2,\"1448\":3,\"1449\":6,\"1496\":1,\"1519\":1,\"1545\":3}}],[\"temperature\",{\"1\":{\"1590\":3,\"1591\":2,\"1595\":3,\"1596\":6,\"1598\":1,\"1602\":4}}],[\"temptation\",{\"1\":{\"1060\":1}}],[\"temporary\",{\"1\":{\"245\":4,\"1118\":1,\"1219\":1,\"1620\":1}}],[\"temporal\",{\"0\":{\"192\":1},\"1\":{\"191\":1,\"1139\":1}}],[\"template>\",{\"1\":{\"1109\":2}}],[\"templates\",{\"1\":{\"936\":1,\"1052\":1,\"1428\":1,\"1451\":1}}],[\"template<bool\",{\"1\":{\"708\":1}}],[\"template<class\",{\"1\":{\"179\":1}}],[\"template\",{\"0\":{\"179\":1},\"1\":{\"502\":1,\"785\":1,\"892\":1,\"941\":1,\"1428\":2}}],[\"temp\",{\"0\":{\"1594\":1,\"1595\":1,\"1596\":1},\"1\":{\"165\":4,\"180\":5,\"183\":3,\"957\":1,\"1590\":1,\"1593\":5,\"1594\":4,\"1595\":4,\"1596\":6,\"1597\":1}}],[\"tuling123\",{\"1\":{\"1094\":1}}],[\"tuesday\",{\"1\":{\"909\":1}}],[\"tuna\",{\"1\":{\"449\":1,\"1177\":1}}],[\"tutorials\",{\"1\":{\"1185\":1}}],[\"tutorial\",{\"1\":{\"308\":1,\"620\":1,\"751\":1,\"848\":2,\"851\":1,\"890\":1,\"1084\":1,\"1098\":1,\"1099\":2,\"1413\":1,\"1435\":1}}],[\"tup\",{\"1\":{\"289\":4}}],[\"tuples\",{\"1\":{\"396\":1,\"1592\":1}}],[\"tuple\",{\"1\":{\"102\":2,\"313\":2,\"317\":2,\"1592\":1}}],[\"turned\",{\"1\":{\"1475\":1,\"1509\":1}}],[\"turns\",{\"1\":{\"243\":1,\"573\":1,\"600\":1}}],[\"turn\",{\"1\":{\"241\":1}}],[\"tuv\",{\"1\":{\"8\":1}}],[\"typical\",{\"1\":{\"1501\":1,\"1623\":1}}],[\"typically\",{\"1\":{\"227\":2,\"235\":2,\"236\":1,\"321\":1,\"1493\":1,\"1507\":1}}],[\"typing\",{\"1\":{\"74\":2,\"149\":1,\"185\":1}}],[\"typecheck\",{\"1\":{\"1309\":1}}],[\"typecast\",{\"1\":{\"940\":1}}],[\"typedef\",{\"1\":{\"955\":1,\"962\":2,\"1464\":1,\"1471\":1,\"1567\":1,\"1573\":1,\"1591\":2}}],[\"type=str\",{\"1\":{\"1219\":3}}],[\"type=int\",{\"1\":{\"1219\":2}}],[\"type=\",{\"1\":{\"892\":3,\"896\":1,\"897\":1,\"937\":1,\"940\":2,\"1004\":1,\"1103\":2}}],[\"typeshift\",{\"1\":{\"1309\":1}}],[\"types\",{\"1\":{\"580\":1,\"671\":1,\"760\":1,\"930\":1,\"1186\":1}}],[\"type\",{\"1\":{\"155\":4,\"245\":1,\"343\":1,\"371\":1,\"401\":3,\"421\":1,\"433\":1,\"465\":1,\"664\":1,\"671\":4,\"675\":1,\"681\":2,\"682\":2,\"760\":2,\"776\":1,\"879\":1,\"892\":1,\"999\":1,\"1000\":1,\"1074\":1,\"1076\":2,\"1094\":1,\"1107\":1,\"1108\":1,\"1186\":1,\"1309\":4,\"1345\":1,\"1428\":2,\"1464\":4,\"1469\":1,\"1471\":1,\"1483\":1,\"1501\":1,\"1529\":2,\"1554\":1,\"1590\":2,\"1591\":1,\"1592\":1,\"1593\":3,\"1596\":5,\"1597\":1,\"1598\":1,\"1600\":1,\"1611\":4}}],[\"typeerror\",{\"1\":{\"88\":1,\"371\":1,\"432\":2}}],[\"ths\",{\"1\":{\"1598\":1}}],[\"thu\",{\"1\":{\"905\":2}}],[\"thus\",{\"1\":{\"236\":1,\"549\":1,\"552\":1,\"553\":1,\"556\":1,\"1623\":1}}],[\"those\",{\"1\":{\"552\":1,\"562\":1,\"572\":4,\"573\":1,\"600\":1,\"1060\":1,\"1501\":1}}],[\"thoughts\",{\"1\":{\"1038\":1},\"2\":{\"1050\":1}}],[\"though\",{\"1\":{\"204\":1,\"549\":1}}],[\"th3s\",{\"1\":{\"390\":2}}],[\"throws\",{\"1\":{\"703\":4,\"1329\":1,\"1333\":1,\"1629\":1}}],[\"throw\",{\"1\":{\"702\":1,\"703\":4}}],[\"throttling\",{\"1\":{\"592\":1}}],[\"throttle\",{\"1\":{\"592\":1,\"986\":1,\"1599\":1,\"1602\":5}}],[\"throughput\",{\"1\":{\"237\":1,\"1509\":2}}],[\"through\",{\"0\":{\"215\":1,\"241\":1,\"558\":1},\"1\":{\"214\":1,\"217\":1,\"218\":2,\"227\":2,\"234\":1,\"236\":2,\"271\":1,\"547\":1,\"549\":1,\"558\":1,\"580\":1,\"584\":1,\"702\":2,\"703\":2,\"1130\":2,\"1202\":1,\"1320\":2,\"1475\":1,\"1499\":1,\"1501\":1,\"1545\":1,\"1623\":8}}],[\"thresh\",{\"1\":{\"1162\":1}}],[\"threshold\",{\"1\":{\"285\":3,\"289\":1,\"1591\":1}}],[\"threads++\",{\"1\":{\"1316\":1}}],[\"threads\",{\"1\":{\"1307\":1,\"1316\":1}}],[\"threadloop\",{\"1\":{\"1296\":2}}],[\"threadlocal\",{\"1\":{\"876\":2}}],[\"thread\",{\"0\":{\"736\":1,\"1312\":1},\"1\":{\"408\":1,\"542\":2,\"706\":1,\"707\":2,\"1056\":1,\"1279\":2,\"1295\":1,\"1296\":2,\"1301\":1,\"1307\":3,\"1311\":1,\"1312\":4,\"1313\":1,\"1314\":5,\"1315\":1,\"1316\":16,\"1317\":1,\"1355\":1,\"1365\":2,\"1381\":2,\"1402\":1,\"1405\":2},\"2\":{\"756\":1}}],[\"three\",{\"1\":{\"237\":1,\"896\":1}}],[\"thrashing\",{\"1\":{\"253\":1}}],[\"thin\",{\"1\":{\"896\":1}}],[\"think\",{\"1\":{\"400\":1,\"1186\":1,\"1623\":3}}],[\"things\",{\"1\":{\"321\":1,\"1075\":1}}],[\"thing\",{\"1\":{\"308\":1,\"1307\":1}}],[\"third\",{\"1\":{\"236\":1,\"751\":1}}],[\"this\",{\"1\":{\"194\":7,\"203\":1,\"204\":3,\"217\":1,\"227\":1,\"234\":1,\"235\":1,\"236\":4,\"237\":3,\"243\":3,\"245\":4,\"250\":1,\"256\":1,\"271\":2,\"321\":1,\"341\":1,\"390\":1,\"400\":1,\"401\":1,\"408\":3,\"455\":1,\"465\":2,\"500\":1,\"504\":1,\"540\":1,\"542\":3,\"543\":2,\"548\":2,\"549\":1,\"555\":1,\"556\":1,\"557\":4,\"558\":5,\"559\":1,\"562\":1,\"565\":1,\"580\":1,\"584\":1,\"599\":2,\"600\":1,\"602\":1,\"621\":1,\"664\":1,\"702\":1,\"706\":2,\"746\":1,\"748\":3,\"750\":2,\"761\":2,\"774\":1,\"777\":1,\"785\":2,\"786\":1,\"851\":1,\"888\":1,\"896\":1,\"904\":4,\"910\":1,\"925\":1,\"926\":7,\"933\":1,\"939\":1,\"941\":2,\"942\":1,\"986\":1,\"988\":1,\"1038\":1,\"1071\":1,\"1072\":1,\"1073\":1,\"1074\":1,\"1075\":5,\"1076\":1,\"1080\":1,\"1084\":1,\"1095\":1,\"1098\":1,\"1099\":6,\"1107\":1,\"1118\":1,\"1123\":1,\"1125\":3,\"1130\":2,\"1189\":4,\"1201\":1,\"1203\":1,\"1207\":1,\"1208\":1,\"1209\":1,\"1216\":1,\"1259\":1,\"1301\":1,\"1307\":1,\"1320\":2,\"1333\":1,\"1344\":1,\"1365\":1,\"1366\":1,\"1376\":1,\"1383\":1,\"1402\":2,\"1418\":1,\"1421\":1,\"1464\":1,\"1474\":1,\"1476\":1,\"1479\":1,\"1481\":3,\"1483\":4,\"1484\":1,\"1487\":2,\"1490\":1,\"1494\":1,\"1495\":1,\"1496\":1,\"1497\":2,\"1498\":1,\"1501\":2,\"1507\":1,\"1523\":2,\"1542\":2,\"1545\":1,\"1573\":2,\"1591\":1,\"1592\":6,\"1611\":1,\"1613\":1,\"1623\":9}}],[\"that\",{\"1\":{\"182\":1,\"193\":1,\"194\":11,\"196\":2,\"197\":1,\"204\":2,\"212\":2,\"216\":1,\"227\":5,\"234\":1,\"235\":3,\"236\":12,\"237\":6,\"241\":2,\"243\":3,\"245\":3,\"250\":1,\"253\":1,\"255\":2,\"256\":2,\"261\":1,\"321\":5,\"339\":1,\"340\":1,\"341\":1,\"408\":1,\"542\":2,\"543\":4,\"546\":2,\"547\":2,\"548\":1,\"552\":1,\"553\":1,\"556\":2,\"557\":5,\"558\":2,\"559\":2,\"562\":3,\"568\":1,\"572\":4,\"573\":1,\"576\":2,\"577\":1,\"580\":5,\"582\":1,\"584\":2,\"586\":1,\"599\":1,\"600\":1,\"601\":1,\"602\":1,\"604\":1,\"623\":1,\"675\":1,\"703\":1,\"707\":3,\"748\":1,\"750\":3,\"774\":1,\"775\":1,\"776\":1,\"783\":1,\"784\":1,\"850\":2,\"851\":3,\"936\":1,\"1000\":1,\"1060\":1,\"1080\":1,\"1118\":1,\"1124\":1,\"1125\":2,\"1143\":2,\"1191\":1,\"1198\":1,\"1202\":2,\"1203\":1,\"1204\":1,\"1207\":2,\"1208\":1,\"1209\":2,\"1355\":1,\"1376\":1,\"1383\":1,\"1385\":2,\"1405\":2,\"1406\":1,\"1419\":1,\"1421\":1,\"1485\":1,\"1486\":1,\"1501\":3,\"1507\":1,\"1536\":1,\"1551\":1,\"1591\":2,\"1592\":3,\"1602\":1,\"1613\":1,\"1620\":1,\"1623\":6}}],[\"thanks\",{\"1\":{\"543\":1,\"557\":2}}],[\"than\",{\"1\":{\"20\":2,\"21\":2,\"203\":1,\"235\":1,\"237\":2,\"243\":1,\"250\":1,\"256\":1,\"340\":1,\"542\":1,\"557\":1,\"558\":1,\"559\":2,\"793\":1,\"941\":1,\"1060\":8,\"1122\":1,\"1203\":1,\"1221\":1,\"1475\":1,\"1483\":1,\"1545\":1,\"1623\":2}}],[\"theory\",{\"0\":{\"1165\":1},\"1\":{\"1203\":1,\"1206\":1}}],[\"thermel\",{\"1\":{\"1605\":1}}],[\"thermal↩︎\",{\"1\":{\"1603\":1}}],[\"thermal\",{\"0\":{\"1548\":1,\"1552\":1,\"1588\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1599\":1,\"1600\":1,\"1601\":1,\"1602\":1,\"1604\":1,\"1606\":1,\"1607\":1,\"1609\":1,\"1610\":1,\"1611\":1,\"1613\":1},\"1\":{\"269\":2,\"1503\":1,\"1549\":1,\"1552\":4,\"1557\":2,\"1589\":2,\"1590\":17,\"1591\":8,\"1592\":14,\"1593\":24,\"1594\":1,\"1595\":3,\"1596\":6,\"1597\":3,\"1598\":3,\"1599\":4,\"1600\":10,\"1601\":7,\"1602\":17,\"1605\":15,\"1606\":7,\"1607\":38,\"1608\":12,\"1609\":8,\"1610\":6,\"1611\":21,\"1613\":7}}],[\"therefore\",{\"1\":{\"341\":1,\"543\":1,\"556\":1,\"1623\":1}}],[\"there\",{\"1\":{\"203\":1,\"236\":1,\"237\":2,\"243\":1,\"309\":1,\"549\":1,\"550\":1,\"552\":1,\"557\":2,\"702\":1,\"751\":1,\"793\":1,\"888\":1,\"890\":1,\"892\":1,\"930\":1,\"941\":2,\"986\":1,\"988\":1,\"1060\":1,\"1079\":1,\"1080\":1,\"1099\":1,\"1186\":3,\"1204\":1,\"1221\":1,\"1388\":1,\"1487\":1,\"1492\":1,\"1494\":1,\"1536\":1,\"1542\":1}}],[\"these\",{\"1\":{\"194\":1,\"227\":3,\"234\":1,\"235\":2,\"236\":2,\"237\":1,\"245\":1,\"361\":1,\"492\":1,\"547\":1,\"558\":2,\"559\":1,\"562\":1,\"707\":1,\"1075\":1,\"1091\":1,\"1123\":1,\"1125\":1,\"1143\":1,\"1204\":1,\"1405\":1,\"1431\":1,\"1476\":1,\"1499\":1,\"1536\":1,\"1553\":1,\"1571\":1,\"1592\":1,\"1619\":1,\"1623\":1}}],[\"then\",{\"1\":{\"194\":2,\"203\":1,\"234\":1,\"245\":1,\"285\":1,\"357\":1,\"361\":2,\"465\":2,\"543\":1,\"548\":1,\"549\":1,\"555\":1,\"584\":1,\"707\":1,\"781\":1,\"793\":1,\"890\":1,\"923\":1,\"927\":1,\"941\":1,\"1074\":2,\"1076\":2,\"1077\":1,\"1081\":1,\"1099\":4,\"1191\":1,\"1216\":1,\"1217\":1,\"1219\":2,\"1259\":1,\"1328\":1,\"1381\":1,\"1388\":1,\"1405\":1,\"1485\":1,\"1545\":1}}],[\"their\",{\"1\":{\"194\":1,\"321\":1,\"562\":1,\"774\":1,\"1613\":1,\"1623\":6}}],[\"they\",{\"1\":{\"182\":1,\"236\":2,\"237\":3,\"321\":1,\"548\":1,\"549\":1,\"550\":1,\"556\":1,\"559\":1,\"562\":1,\"580\":1,\"707\":1,\"774\":3,\"936\":1,\"1124\":1,\"1385\":1,\"1405\":1,\"1498\":2,\"1623\":5}}],[\"themes\",{\"0\":{\"1638\":1},\"1\":{\"1259\":1}}],[\"theme\",{\"1\":{\"1105\":1}}],[\"them\",{\"1\":{\"182\":1,\"236\":1,\"285\":1,\"308\":1,\"551\":1,\"559\":1,\"562\":1,\"777\":1,\"1475\":1}}],[\"the\",{\"0\":{\"236\":1,\"237\":1,\"241\":1,\"557\":1,\"559\":1,\"603\":1,\"781\":1,\"1028\":1,\"1060\":1},\"1\":{\"76\":1,\"87\":1,\"164\":1,\"177\":1,\"182\":1,\"193\":12,\"194\":52,\"195\":7,\"196\":7,\"197\":2,\"203\":4,\"204\":12,\"210\":4,\"212\":7,\"216\":1,\"217\":1,\"227\":27,\"230\":1,\"233\":1,\"234\":15,\"235\":7,\"236\":53,\"237\":21,\"241\":1,\"243\":24,\"245\":83,\"250\":4,\"253\":3,\"255\":14,\"256\":13,\"261\":6,\"270\":1,\"271\":1,\"285\":1,\"288\":1,\"308\":5,\"309\":5,\"316\":1,\"321\":10,\"326\":2,\"339\":1,\"340\":4,\"341\":11,\"342\":1,\"347\":1,\"357\":2,\"361\":27,\"366\":1,\"385\":1,\"401\":5,\"406\":6,\"408\":6,\"410\":1,\"458\":4,\"465\":12,\"509\":3,\"520\":3,\"542\":11,\"543\":19,\"545\":1,\"546\":5,\"547\":4,\"548\":11,\"549\":21,\"550\":5,\"551\":4,\"552\":15,\"553\":4,\"555\":3,\"556\":13,\"557\":43,\"558\":27,\"559\":33,\"562\":14,\"564\":1,\"565\":4,\"568\":1,\"570\":1,\"572\":7,\"573\":4,\"575\":7,\"576\":8,\"580\":7,\"582\":1,\"584\":4,\"586\":2,\"599\":5,\"600\":5,\"601\":4,\"602\":4,\"606\":3,\"620\":3,\"621\":1,\"622\":2,\"623\":1,\"624\":1,\"658\":3,\"675\":2,\"676\":1,\"677\":4,\"702\":1,\"703\":6,\"707\":10,\"747\":1,\"748\":2,\"749\":2,\"750\":5,\"751\":14,\"758\":2,\"759\":6,\"760\":1,\"774\":3,\"775\":1,\"776\":3,\"777\":1,\"778\":2,\"780\":3,\"781\":2,\"783\":1,\"785\":6,\"786\":2,\"793\":7,\"794\":1,\"796\":1,\"798\":1,\"850\":5,\"851\":9,\"856\":1,\"888\":1,\"889\":2,\"890\":5,\"891\":3,\"892\":5,\"897\":4,\"923\":1,\"927\":3,\"931\":1,\"934\":2,\"935\":1,\"936\":1,\"939\":2,\"940\":3,\"941\":7,\"942\":1,\"943\":1,\"975\":5,\"978\":2,\"986\":7,\"988\":3,\"1000\":3,\"1052\":2,\"1054\":9,\"1055\":3,\"1056\":8,\"1060\":5,\"1073\":1,\"1075\":4,\"1076\":3,\"1078\":1,\"1079\":4,\"1080\":1,\"1081\":1,\"1084\":1,\"1091\":1,\"1094\":1,\"1099\":10,\"1101\":2,\"1110\":1,\"1118\":10,\"1123\":6,\"1124\":5,\"1125\":4,\"1130\":3,\"1143\":5,\"1153\":3,\"1159\":1,\"1186\":2,\"1189\":9,\"1191\":2,\"1192\":6,\"1196\":1,\"1198\":1,\"1201\":7,\"1202\":10,\"1203\":13,\"1204\":10,\"1206\":10,\"1207\":3,\"1208\":7,\"1209\":1,\"1216\":5,\"1219\":19,\"1221\":2,\"1228\":8,\"1239\":5,\"1243\":1,\"1244\":3,\"1320\":2,\"1345\":2,\"1354\":1,\"1355\":1,\"1366\":3,\"1376\":2,\"1381\":16,\"1383\":1,\"1385\":6,\"1386\":1,\"1405\":8,\"1406\":2,\"1418\":11,\"1419\":3,\"1421\":4,\"1422\":1,\"1424\":3,\"1425\":1,\"1427\":1,\"1429\":1,\"1431\":4,\"1474\":14,\"1475\":10,\"1476\":3,\"1479\":4,\"1481\":7,\"1483\":14,\"1484\":2,\"1485\":20,\"1486\":4,\"1487\":18,\"1491\":4,\"1492\":12,\"1493\":5,\"1494\":4,\"1495\":9,\"1496\":9,\"1497\":1,\"1498\":12,\"1499\":15,\"1501\":7,\"1507\":13,\"1508\":9,\"1509\":5,\"1520\":1,\"1523\":3,\"1534\":4,\"1536\":5,\"1542\":1,\"1545\":18,\"1570\":1,\"1571\":1,\"1573\":5,\"1591\":6,\"1592\":3,\"1597\":4,\"1600\":1,\"1602\":5,\"1609\":3,\"1611\":10,\"1613\":1,\"1620\":9,\"1623\":55}}],[\"tmp=\",{\"1\":{\"1231\":1}}],[\"tmpdir\",{\"1\":{\"383\":4}}],[\"tmpfile\",{\"1\":{\"326\":1}}],[\"tmp\",{\"1\":{\"47\":4,\"59\":4,\"60\":1,\"61\":5,\"88\":6,\"1417\":1,\"1424\":1}}],[\"t\",{\"0\":{\"1467\":1,\"1469\":1,\"1470\":1,\"1471\":1},\"1\":{\"25\":3,\"164\":2,\"176\":1,\"177\":2,\"179\":2,\"236\":2,\"237\":2,\"243\":2,\"271\":1,\"315\":1,\"329\":2,\"360\":1,\"507\":1,\"509\":8,\"510\":2,\"511\":10,\"703\":2,\"706\":1,\"707\":1,\"742\":1,\"743\":1,\"744\":2,\"748\":1,\"751\":3,\"776\":1,\"777\":1,\"820\":1,\"844\":7,\"949\":3,\"950\":2,\"952\":1,\"955\":6,\"1020\":2,\"1060\":1,\"1113\":1,\"1145\":1,\"1169\":1,\"1181\":2,\"1231\":2,\"1232\":2,\"1279\":1,\"1295\":2,\"1296\":1,\"1299\":1,\"1300\":3,\"1301\":3,\"1312\":3,\"1315\":3,\"1316\":8,\"1320\":9,\"1333\":22,\"1340\":4,\"1341\":3,\"1344\":5,\"1345\":11,\"1403\":1,\"1405\":1,\"1463\":2,\"1468\":6,\"1469\":8,\"1470\":8,\"1471\":8,\"1545\":1,\"1551\":1,\"1563\":2,\"1567\":5,\"1570\":1,\"1573\":4,\"1575\":1,\"1590\":1,\"1595\":1,\"1596\":2,\"1623\":1}}],[\"too\",{\"1\":{\"1623\":2}}],[\"tool将截图转化为\",{\"1\":{\"1182\":1}}],[\"tool\",{\"0\":{\"1143\":1,\"1145\":1},\"1\":{\"774\":1,\"1052\":1,\"1055\":1,\"1080\":2,\"1144\":2,\"1145\":5,\"1244\":1,\"1252\":1,\"1376\":1}}],[\"tools\",{\"0\":{\"364\":1,\"615\":1,\"802\":1,\"1175\":1,\"1176\":1,\"1182\":1,\"1636\":1,\"1637\":1,\"1639\":1,\"1640\":1,\"1658\":1},\"1\":{\"336\":2,\"337\":2,\"692\":1,\"775\":1,\"1055\":1,\"1153\":1,\"1635\":1},\"2\":{\"1233\":1,\"1255\":1,\"1260\":1}}],[\"toward\",{\"1\":{\"1619\":1}}],[\"town\",{\"1\":{\"87\":1}}],[\"tofile\",{\"1\":{\"1221\":2}}],[\"touchscreen\",{\"1\":{\"1281\":4}}],[\"touches\",{\"1\":{\"707\":1,\"1406\":1}}],[\"touppercase\",{\"1\":{\"931\":2}}],[\"totimestring\",{\"1\":{\"909\":1}}],[\"total\",{\"1\":{\"194\":2,\"547\":2,\"549\":1,\"558\":2,\"584\":1,\"681\":1,\"682\":2,\"1204\":1,\"1212\":2,\"1216\":2}}],[\"tostring\",{\"1\":{\"906\":5,\"931\":2}}],[\"tosca\",{\"1\":{\"689\":3}}],[\"torvalds\",{\"1\":{\"1534\":1}}],[\"toronto\",{\"1\":{\"1216\":1}}],[\"tornado\",{\"1\":{\"854\":1}}],[\"toreflectedfield\",{\"1\":{\"708\":1}}],[\"toreflectedmethod\",{\"1\":{\"708\":1}}],[\"todatestring\",{\"1\":{\"905\":1,\"908\":1}}],[\"today\",{\"1\":{\"747\":2}}],[\"todo\",{\"0\":{\"1582\":1},\"1\":{\"13\":1,\"65\":1,\"236\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"255\":1,\"257\":1,\"382\":1,\"383\":1,\"463\":1,\"479\":1,\"487\":2,\"491\":1,\"497\":1,\"537\":1,\"542\":1,\"554\":1,\"580\":1,\"590\":1,\"676\":1,\"698\":1,\"702\":3,\"706\":1,\"707\":1,\"874\":1,\"1055\":1,\"1230\":1,\"1248\":2,\"1316\":1,\"1321\":1,\"1343\":1,\"1363\":1,\"1366\":2,\"1373\":1,\"1389\":1,\"1397\":1,\"1398\":1,\"1403\":1,\"1405\":1,\"1411\":1,\"1484\":1,\"1546\":1,\"1598\":1,\"1612\":1,\"1626\":1,\"1628\":1,\"1637\":1}}],[\"tochararray\",{\"1\":{\"706\":1,\"1402\":1}}],[\"token=3\",{\"1\":{\"1231\":1}}],[\"tokens=\",{\"1\":{\"1269\":1,\"1278\":1}}],[\"tokens=3\",{\"1\":{\"1231\":2,\"1279\":1}}],[\"tokens=2\",{\"1\":{\"1228\":1}}],[\"token\",{\"1\":{\"571\":2}}],[\"tolerated\",{\"1\":{\"552\":1}}],[\"toprintable\",{\"1\":{\"681\":1,\"682\":1}}],[\"top\",{\"1\":{\"465\":2,\"542\":1,\"545\":1,\"687\":1,\"738\":1,\"775\":1,\"944\":1,\"1022\":1,\"1101\":3,\"1418\":1,\"1419\":1,\"1434\":1,\"1571\":1}}],[\"tomcat\",{\"0\":{\"613\":1},\"1\":{\"613\":5,\"998\":1}}],[\"tom\",{\"1\":{\"343\":2,\"375\":2}}],[\"together\",{\"1\":{\"194\":2,\"748\":1,\"1124\":1}}],[\"to\",{\"0\":{\"173\":1,\"209\":1,\"302\":1,\"322\":1,\"323\":1,\"324\":1,\"552\":1,\"1344\":1,\"1396\":1},\"1\":{\"20\":1,\"21\":1,\"126\":2,\"139\":3,\"173\":5,\"185\":2,\"186\":2,\"193\":3,\"194\":12,\"195\":1,\"196\":3,\"197\":1,\"203\":4,\"204\":3,\"210\":1,\"212\":1,\"216\":2,\"227\":10,\"234\":2,\"235\":4,\"236\":21,\"237\":2,\"241\":2,\"243\":5,\"244\":2,\"245\":13,\"250\":4,\"255\":7,\"256\":7,\"261\":1,\"271\":3,\"289\":2,\"298\":1,\"301\":1,\"302\":3,\"308\":2,\"309\":2,\"321\":5,\"325\":1,\"331\":2,\"339\":2,\"340\":1,\"341\":1,\"344\":1,\"358\":1,\"359\":1,\"360\":2,\"361\":4,\"366\":1,\"382\":6,\"400\":1,\"406\":2,\"408\":4,\"458\":1,\"460\":1,\"492\":3,\"511\":3,\"542\":12,\"543\":9,\"546\":4,\"548\":5,\"549\":7,\"552\":6,\"553\":2,\"555\":1,\"556\":7,\"557\":15,\"558\":17,\"559\":13,\"562\":9,\"564\":2,\"568\":1,\"573\":4,\"575\":3,\"576\":3,\"580\":2,\"582\":2,\"584\":1,\"586\":1,\"599\":2,\"600\":2,\"601\":1,\"602\":3,\"604\":1,\"675\":1,\"676\":1,\"677\":1,\"702\":1,\"703\":1,\"707\":7,\"747\":1,\"750\":1,\"759\":1,\"760\":1,\"761\":5,\"774\":8,\"775\":2,\"776\":1,\"777\":2,\"778\":1,\"780\":1,\"785\":3,\"793\":4,\"794\":1,\"820\":1,\"847\":1,\"850\":1,\"851\":1,\"888\":2,\"890\":4,\"891\":1,\"892\":1,\"896\":3,\"909\":1,\"923\":2,\"930\":1,\"938\":2,\"940\":4,\"941\":1,\"942\":3,\"986\":1,\"988\":2,\"1052\":3,\"1054\":1,\"1055\":1,\"1056\":1,\"1057\":1,\"1060\":5,\"1071\":1,\"1072\":1,\"1073\":1,\"1075\":5,\"1076\":1,\"1077\":2,\"1078\":1,\"1079\":5,\"1080\":1,\"1098\":1,\"1099\":2,\"1101\":4,\"1105\":1,\"1113\":1,\"1118\":4,\"1125\":4,\"1126\":1,\"1143\":1,\"1145\":1,\"1151\":1,\"1155\":2,\"1185\":1,\"1186\":5,\"1189\":9,\"1196\":1,\"1198\":2,\"1201\":1,\"1202\":3,\"1203\":5,\"1204\":1,\"1206\":1,\"1208\":1,\"1216\":3,\"1217\":4,\"1219\":11,\"1221\":4,\"1239\":2,\"1246\":1,\"1315\":1,\"1326\":4,\"1327\":1,\"1328\":1,\"1331\":1,\"1342\":1,\"1344\":8,\"1345\":6,\"1354\":1,\"1355\":2,\"1365\":1,\"1366\":1,\"1376\":1,\"1380\":5,\"1381\":11,\"1383\":2,\"1385\":3,\"1386\":1,\"1388\":2,\"1389\":3,\"1405\":5,\"1406\":2,\"1418\":2,\"1422\":1,\"1424\":8,\"1431\":5,\"1449\":1,\"1453\":4,\"1469\":1,\"1474\":3,\"1475\":1,\"1481\":4,\"1483\":8,\"1484\":1,\"1485\":12,\"1486\":2,\"1487\":3,\"1490\":1,\"1491\":3,\"1492\":9,\"1493\":2,\"1494\":2,\"1495\":3,\"1496\":3,\"1497\":1,\"1498\":4,\"1499\":7,\"1501\":8,\"1507\":3,\"1508\":2,\"1509\":2,\"1520\":1,\"1523\":1,\"1534\":2,\"1536\":5,\"1542\":1,\"1543\":1,\"1545\":5,\"1570\":2,\"1573\":8,\"1591\":3,\"1592\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1602\":6,\"1606\":1,\"1607\":1,\"1609\":6,\"1611\":5,\"1613\":2,\"1620\":6,\"1623\":25}}],[\"trouble\",{\"1\":{\"1204\":1}}],[\"tr\",{\"0\":{\"751\":1},\"1\":{\"751\":7,\"1312\":5,\"1320\":15,\"1333\":14,\"1345\":5}}],[\"trick\",{\"1\":{\"1219\":1}}],[\"trip0\",{\"1\":{\"1598\":1}}],[\"trips\",{\"1\":{\"1590\":4,\"1592\":1,\"1593\":1,\"1598\":1,\"1611\":2}}],[\"trip\",{\"0\":{\"1595\":1,\"1596\":1,\"1597\":1},\"1\":{\"978\":1,\"1590\":5,\"1592\":5,\"1593\":7,\"1595\":7,\"1596\":20,\"1597\":5,\"1599\":1,\"1601\":1,\"1602\":5,\"1611\":3}}],[\"triple\",{\"1\":{\"692\":2}}],[\"trimmed\",{\"1\":{\"940\":1}}],[\"trim=\",{\"1\":{\"940\":1}}],[\"trim\",{\"1\":{\"940\":1}}],[\"triggered\",{\"1\":{\"558\":1}}],[\"tries\",{\"1\":{\"986\":1,\"1611\":1}}],[\"trie\",{\"0\":{\"491\":1},\"1\":{\"491\":2}}],[\"trend\",{\"1\":{\"1593\":2,\"1611\":1}}],[\"treated\",{\"1\":{\"551\":1}}],[\"trecov​\",{\"1\":{\"549\":1}}],[\"trecov​=pvalue​∗nmisp​\",{\"1\":{\"547\":1}}],[\"trecov\",{\"1\":{\"549\":1}}],[\"tree2str\",{\"1\":{\"49\":3}}],[\"treenode\",{\"1\":{\"42\":5,\"43\":1,\"45\":1,\"46\":1,\"47\":3,\"49\":1,\"51\":1,\"52\":1,\"54\":2,\"56\":3,\"57\":1,\"59\":1,\"61\":1,\"62\":2,\"64\":3,\"495\":1,\"496\":2,\"499\":5}}],[\"tree\",{\"0\":{\"40\":1,\"484\":1},\"1\":{\"42\":1,\"47\":2,\"49\":1,\"54\":1,\"62\":1,\"461\":1,\"491\":1,\"492\":1,\"499\":1,\"892\":1,\"1169\":1,\"1445\":1,\"1566\":1,\"1586\":5,\"1601\":1,\"1613\":1},\"2\":{\"67\":1}}],[\"try\",{\"1\":{\"193\":1,\"236\":1,\"289\":2,\"298\":1,\"309\":1,\"702\":1,\"703\":4,\"759\":1,\"1328\":1,\"1545\":1}}],[\"truck\",{\"1\":{\"1161\":1}}],[\"truth的iou较大的那个边界框来负责预测该目标\",{\"1\":{\"1156\":1}}],[\"truth\",{\"1\":{\"1021\":2,\"1155\":1}}],[\"truncated\",{\"1\":{\"361\":1,\"1185\":1,\"1186\":4}}],[\"truncate\",{\"1\":{\"361\":1,\"805\":1}}],[\"trur\",{\"1\":{\"122\":1}}],[\"trustzone\",{\"1\":{\"1492\":1}}],[\"trusted\",{\"0\":{\"1496\":1},\"1\":{\"336\":2,\"337\":1,\"445\":1,\"1473\":1,\"1474\":7,\"1476\":7,\"1479\":3,\"1481\":1,\"1487\":8,\"1491\":1,\"1492\":1,\"1494\":2,\"1497\":1,\"1499\":2,\"1502\":1}}],[\"trust\",{\"1\":{\"87\":12,\"1479\":1}}],[\"true\",{\"1\":{\"0\":1,\"15\":3,\"30\":1,\"31\":1,\"35\":1,\"47\":1,\"51\":3,\"52\":1,\"75\":1,\"90\":2,\"91\":1,\"112\":1,\"115\":1,\"122\":2,\"138\":5,\"155\":2,\"156\":3,\"186\":2,\"293\":1,\"302\":2,\"303\":1,\"309\":1,\"395\":2,\"401\":3,\"435\":1,\"494\":1,\"495\":1,\"496\":1,\"542\":1,\"543\":1,\"568\":1,\"580\":1,\"582\":1,\"673\":1,\"793\":2,\"891\":1,\"892\":1,\"1109\":1,\"1189\":2,\"1293\":2,\"1294\":3,\"1307\":1,\"1320\":1,\"1333\":1,\"1366\":1,\"1521\":1,\"1591\":1,\"1600\":1,\"1607\":1,\"1626\":1}}],[\"traffic\",{\"1\":{\"1623\":1}}],[\"traditionally\",{\"1\":{\"1536\":1}}],[\"traditional\",{\"1\":{\"1501\":1}}],[\"trade\",{\"1\":{\"562\":1,\"1353\":1}}],[\"tradeoff\",{\"1\":{\"562\":1}}],[\"trap\",{\"1\":{\"1485\":3}}],[\"trapping\",{\"1\":{\"692\":1}}],[\"travel\",{\"1\":{\"1202\":1}}],[\"travelling\",{\"1\":{\"1118\":1}}],[\"traversing\",{\"1\":{\"1118\":1}}],[\"traverses\",{\"1\":{\"1380\":1}}],[\"traverse\",{\"1\":{\"1118\":1,\"1380\":1}}],[\"traversal\",{\"0\":{\"485\":1,\"488\":1,\"490\":1},\"1\":{\"47\":1,\"492\":1}}],[\"trainable\",{\"1\":{\"1185\":1}}],[\"trainable=false\",{\"1\":{\"1185\":1}}],[\"train\",{\"1\":{\"583\":1,\"1162\":3,\"1185\":15,\"1186\":2,\"1212\":12,\"1217\":5,\"1219\":2}}],[\"trained\",{\"1\":{\"553\":1,\"584\":1}}],[\"training\",{\"0\":{\"590\":1},\"1\":{\"549\":1,\"581\":2,\"590\":2,\"1185\":4,\"1212\":1}}],[\"tranform\",{\"1\":{\"909\":1}}],[\"tran\",{\"1\":{\"390\":4}}],[\"trans\",{\"1\":{\"1320\":1}}],[\"transactnative\",{\"1\":{\"1333\":4}}],[\"transact\",{\"1\":{\"1310\":1,\"1329\":1,\"1333\":11}}],[\"transaction\",{\"0\":{\"1308\":1,\"1311\":1,\"1316\":1,\"1317\":1,\"1345\":1},\"1\":{\"1308\":4,\"1309\":3,\"1310\":1,\"1311\":2,\"1312\":3,\"1313\":1,\"1316\":6,\"1317\":1,\"1320\":2,\"1329\":1,\"1333\":9,\"1341\":5,\"1345\":6}}],[\"transimitter\",{\"1\":{\"1124\":1}}],[\"transitioned\",{\"1\":{\"1543\":1}}],[\"transition\",{\"1\":{\"558\":1}}],[\"transmit\",{\"1\":{\"1143\":1}}],[\"transmitted\",{\"1\":{\"1118\":2,\"1203\":1}}],[\"transmitter\",{\"1\":{\"1118\":1}}],[\"transmission\",{\"0\":{\"1095\":1},\"1\":{\"988\":1,\"989\":1,\"1508\":1}}],[\"transformed\",{\"1\":{\"1196\":1}}],[\"transformer\",{\"1\":{\"1113\":1}}],[\"transferred\",{\"1\":{\"1493\":1,\"1620\":1}}],[\"transfer\",{\"0\":{\"211\":1},\"1\":{\"210\":2,\"227\":2,\"1509\":1}}],[\"transparent\",{\"1\":{\"256\":1,\"898\":2}}],[\"translate\",{\"1\":{\"256\":1,\"390\":2}}],[\"translated\",{\"1\":{\"250\":1,\"1060\":1}}],[\"translations\",{\"1\":{\"255\":1}}],[\"translation\",{\"1\":{\"250\":1,\"255\":5,\"256\":5,\"1484\":1,\"1491\":1,\"1522\":1}}],[\"trace2\",{\"1\":{\"707\":1,\"1406\":1}}],[\"traceback\",{\"1\":{\"436\":1}}],[\"traces\",{\"1\":{\"298\":2,\"1202\":1,\"1207\":1}}],[\"trace\",{\"1\":{\"298\":4,\"326\":1,\"1365\":1,\"1485\":1}}],[\"tracking\",{\"1\":{\"556\":2}}],[\"tracked\",{\"1\":{\"321\":1}}],[\"track\",{\"1\":{\"6\":1,\"8\":3,\"9\":4,\"10\":6,\"11\":4,\"12\":3,\"13\":3,\"14\":3,\"321\":1,\"556\":1,\"988\":1,\"1253\":1,\"1536\":1,\"1620\":1}}],[\"i²c\",{\"1\":{\"1508\":2}}],[\"i3c\",{\"0\":{\"1504\":1,\"1506\":1,\"1508\":1,\"1509\":1},\"1\":{\"1508\":17,\"1509\":2,\"1511\":2}}],[\"i32\",{\"1\":{\"692\":18}}],[\"i2c\",{\"0\":{\"1504\":1,\"1506\":1,\"1507\":1,\"1509\":1,\"1510\":1},\"1\":{\"1507\":7,\"1508\":3,\"1509\":4,\"1510\":12,\"1511\":1}}],[\"i<pool\",{\"1\":{\"1329\":1}}],[\"ibinder\",{\"1\":{\"1298\":1,\"1304\":1,\"1333\":3}}],[\"ibd\",{\"1\":{\"814\":1}}],[\"iwlwifi\",{\"1\":{\"1145\":11}}],[\"iwldvm\",{\"1\":{\"1145\":2}}],[\"iwl5300\",{\"1\":{\"1143\":1}}],[\"iw\",{\"1\":{\"1145\":1}}],[\"i>\",{\"1\":{\"1102\":1}}],[\"ic\",{\"1\":{\"1589\":2}}],[\"icache\",{\"1\":{\"1460\":1}}],[\"icon=\",{\"1\":{\"1102\":1}}],[\"iconfont\",{\"1\":{\"1102\":3}}],[\"icon\",{\"1\":{\"1102\":3}}],[\"icons\",{\"0\":{\"1102\":1}}],[\"icmp\",{\"1\":{\"977\":1}}],[\"icu4cmetadata\",{\"1\":{\"707\":1,\"1405\":1}}],[\"igmp\",{\"1\":{\"977\":1}}],[\"ig\",{\"1\":{\"909\":1}}],[\"ignoring\",{\"1\":{\"576\":1}}],[\"ignore\",{\"1\":{\"314\":3,\"315\":1,\"329\":1,\"543\":1,\"703\":1,\"1075\":1,\"1365\":2,\"1366\":2}}],[\"ie=edge\",{\"1\":{\"1004\":1}}],[\"ie\",{\"1\":{\"693\":3}}],[\"ieee\",{\"1\":{\"566\":1,\"606\":2,\"977\":1}}],[\"i64\",{\"1\":{\"692\":1}}],[\"iactivitymanager\",{\"1\":{\"1329\":1}}],[\"iapplicationthread\",{\"1\":{\"1329\":1}}],[\"iam\",{\"1\":{\"640\":1,\"646\":1}}],[\"iaas+\",{\"1\":{\"639\":1}}],[\"iaas\",{\"1\":{\"639\":2}}],[\"ilike\",{\"1\":{\"820\":3}}],[\"illegalaccessexception\",{\"1\":{\"1629\":1}}],[\"illegalargumentexception\",{\"1\":{\"703\":1}}],[\"illustrated\",{\"1\":{\"562\":1}}],[\"illustrates\",{\"1\":{\"194\":1}}],[\"illustrate\",{\"1\":{\"194\":1,\"565\":1}}],[\"iload\",{\"1\":{\"664\":1}}],[\"ilp\",{\"1\":{\"582\":2}}],[\"iq\",{\"1\":{\"550\":7}}],[\"i=0\",{\"1\":{\"507\":1,\"1329\":1}}],[\"iot\",{\"1\":{\"1509\":1}}],[\"iow\",{\"1\":{\"1309\":4}}],[\"iou\",{\"1\":{\"1021\":6,\"1155\":1}}],[\"ioclt\",{\"1\":{\"1307\":1}}],[\"ioctl执行binder读写操作\",{\"1\":{\"1301\":1}}],[\"ioctl\",{\"0\":{\"1307\":1,\"1313\":1,\"1314\":1},\"1\":{\"1056\":1,\"1301\":3,\"1307\":14,\"1311\":2,\"1312\":2,\"1313\":3,\"1314\":2,\"1333\":1}}],[\"ioc\",{\"0\":{\"870\":1,\"871\":1,\"881\":1},\"1\":{\"869\":1,\"871\":7,\"872\":1,\"881\":1,\"1309\":8,\"1314\":1}}],[\"ioe\",{\"1\":{\"703\":2}}],[\"ioexception\",{\"1\":{\"703\":5}}],[\"io\",{\"0\":{\"1220\":1},\"1\":{\"280\":4,\"283\":1,\"383\":1,\"664\":4,\"848\":1,\"944\":1,\"954\":1,\"958\":1,\"1072\":2,\"1074\":2,\"1077\":2,\"1472\":1}}],[\"ipi\",{\"1\":{\"1545\":1}}],[\"ipid\",{\"1\":{\"981\":2}}],[\"ip分片只有第一个带有传输层头\",{\"1\":{\"980\":1}}],[\"ipv6\",{\"1\":{\"971\":1,\"972\":1,\"977\":1}}],[\"ipv4\",{\"1\":{\"949\":1,\"971\":1,\"972\":1,\"980\":1,\"984\":1}}],[\"ip加速\",{\"1\":{\"643\":1}}],[\"ip6\",{\"1\":{\"609\":6}}],[\"ip\",{\"0\":{\"764\":1,\"970\":1,\"971\":1,\"972\":1,\"973\":1,\"981\":1},\"1\":{\"446\":1,\"609\":1,\"646\":1,\"740\":1,\"760\":1,\"761\":1,\"763\":2,\"764\":3,\"970\":1,\"971\":1,\"974\":5,\"975\":1,\"977\":3,\"979\":4,\"980\":6,\"981\":26,\"983\":1,\"991\":1,\"993\":6,\"994\":3,\"1054\":2,\"1244\":1},\"2\":{\"964\":1,\"1002\":1}}],[\"ipython\",{\"0\":{\"365\":1},\"1\":{\"366\":1}}],[\"ipcobjects\",{\"1\":{\"1333\":1}}],[\"ipcobjectscount\",{\"1\":{\"1333\":1}}],[\"ipcdata\",{\"1\":{\"1333\":1}}],[\"ipcdatasize\",{\"1\":{\"1333\":1}}],[\"ipcthreadstate\",{\"1\":{\"1296\":1,\"1298\":2,\"1299\":2,\"1300\":1,\"1301\":1,\"1333\":7}}],[\"ipc\",{\"0\":{\"742\":1,\"1292\":1,\"1298\":1,\"1349\":1},\"1\":{\"266\":1,\"740\":1,\"742\":2,\"743\":1,\"1292\":2,\"1293\":1,\"1307\":1,\"1320\":4,\"1322\":1,\"1338\":1,\"1350\":2,\"1354\":2}}],[\"ipad\",{\"1\":{\"13\":1}}],[\"irqrestore\",{\"1\":{\"1570\":1}}],[\"irqsave\",{\"1\":{\"1570\":1}}],[\"irqs\",{\"1\":{\"1524\":2}}],[\"irq\",{\"0\":{\"1517\":1},\"1\":{\"1483\":4,\"1516\":3,\"1517\":8,\"1518\":1,\"1520\":1}}],[\"ir的顶级容器\",{\"1\":{\"693\":1}}],[\"ir字节码文件\",{\"1\":{\"693\":1}}],[\"ir字节码的文件名\",{\"1\":{\"693\":1}}],[\"irreader\",{\"1\":{\"693\":2}}],[\"irrelevant\",{\"1\":{\"543\":1}}],[\"irrespective\",{\"1\":{\"361\":2}}],[\"ir\",{\"0\":{\"690\":1,\"691\":1,\"692\":1,\"693\":1},\"1\":{\"245\":10,\"685\":1,\"690\":6,\"691\":1,\"692\":5,\"693\":3,\"1620\":1}}],[\"i7\",{\"1\":{\"225\":1}}],[\"imwrite\",{\"0\":{\"1196\":1},\"1\":{\"1196\":2}}],[\"imread\",{\"0\":{\"1192\":1},\"1\":{\"1192\":3}}],[\"imshow\",{\"1\":{\"1189\":1}}],[\"imaginary\",{\"1\":{\"1139\":1,\"1143\":1}}],[\"imagename\",{\"1\":{\"1108\":1}}],[\"images\",{\"0\":{\"622\":1,\"1079\":1},\"1\":{\"759\":2,\"1079\":2,\"1162\":1,\"1177\":1,\"1196\":1,\"1198\":1,\"1219\":1,\"1492\":1}}],[\"image\",{\"0\":{\"1108\":1,\"1191\":1,\"1194\":1,\"1487\":1,\"1493\":1,\"1494\":1,\"1495\":1,\"1496\":1},\"1\":{\"620\":1,\"622\":4,\"623\":1,\"1079\":1,\"1108\":1,\"1142\":1,\"1153\":1,\"1189\":1,\"1191\":1,\"1192\":3,\"1195\":2,\"1196\":4,\"1355\":1,\"1487\":5,\"1492\":3,\"1493\":2,\"1494\":4,\"1495\":4,\"1496\":3,\"1497\":2,\"1499\":1}}],[\"img\",{\"1\":{\"715\":1}}],[\"imm\",{\"1\":{\"245\":10,\"529\":2}}],[\"immediate\",{\"1\":{\"245\":10,\"926\":1}}],[\"immediately\",{\"1\":{\"217\":1,\"573\":1,\"600\":1,\"675\":1}}],[\"impose\",{\"1\":{\"605\":1}}],[\"imposed\",{\"1\":{\"580\":1}}],[\"importantly\",{\"1\":{\"1080\":1}}],[\"important\",{\"1\":{\"193\":1,\"243\":1,\"923\":1,\"1054\":1,\"1075\":2}}],[\"import\",{\"0\":{\"391\":1},\"1\":{\"27\":1,\"74\":3,\"146\":1,\"149\":2,\"173\":1,\"175\":1,\"185\":2,\"285\":2,\"298\":1,\"299\":1,\"301\":1,\"307\":1,\"320\":1,\"323\":1,\"329\":1,\"341\":2,\"349\":1,\"352\":1,\"354\":2,\"358\":1,\"359\":1,\"360\":1,\"367\":1,\"375\":1,\"385\":1,\"387\":5,\"388\":3,\"391\":1,\"398\":2,\"403\":1,\"404\":2,\"406\":1,\"410\":2,\"411\":1,\"412\":2,\"415\":1,\"447\":1,\"453\":2,\"664\":1,\"681\":2,\"682\":1,\"794\":1,\"796\":3,\"798\":1,\"819\":1,\"836\":1,\"843\":3,\"850\":1,\"851\":1,\"858\":5,\"863\":1,\"879\":2,\"889\":1,\"923\":2,\"1052\":2,\"1055\":1,\"1094\":3,\"1142\":2,\"1185\":5,\"1186\":1,\"1212\":5,\"1216\":2,\"1217\":3,\"1219\":4,\"1221\":2,\"1328\":1,\"1626\":2}}],[\"impact\",{\"1\":{\"256\":1,\"557\":1,\"1208\":1}}],[\"improper\",{\"1\":{\"1623\":1}}],[\"improved\",{\"0\":{\"1165\":1},\"1\":{\"1508\":1}}],[\"improves\",{\"1\":{\"549\":1}}],[\"improve\",{\"1\":{\"542\":1}}],[\"improvement\",{\"1\":{\"243\":1}}],[\"imprt\",{\"1\":{\"28\":1}}],[\"implicit\",{\"1\":{\"986\":1,\"1060\":1}}],[\"implications\",{\"0\":{\"557\":1},\"1\":{\"233\":1}}],[\"implies\",{\"1\":{\"465\":2,\"562\":1}}],[\"implementing\",{\"1\":{\"1474\":1}}],[\"implements\",{\"1\":{\"664\":2,\"707\":1,\"1084\":1,\"1333\":1,\"1405\":1,\"1474\":2}}],[\"implemented\",{\"0\":{\"244\":1},\"1\":{\"245\":1,\"542\":1,\"548\":2,\"549\":1,\"553\":1,\"1054\":1,\"1498\":1}}],[\"implement\",{\"0\":{\"297\":1,\"460\":1},\"1\":{\"236\":1,\"245\":1,\"491\":1,\"492\":2,\"543\":1,\"546\":1,\"549\":1,\"1481\":1,\"1485\":1,\"1498\":1}}],[\"implementation\",{\"0\":{\"245\":1},\"1\":{\"234\":1,\"235\":1,\"244\":1,\"245\":1,\"465\":1,\"542\":1,\"546\":1,\"556\":1,\"565\":1,\"1060\":2,\"1469\":1,\"1476\":1,\"1485\":1,\"1499\":1,\"1619\":1}}],[\"implementations\",{\"1\":{\"203\":1,\"543\":1,\"556\":1,\"557\":1}}],[\"imp\",{\"1\":{\"98\":1}}],[\"imperative\",{\"1\":{\"98\":1}}],[\"ida\",{\"1\":{\"1590\":2}}],[\"idle标志\",{\"1\":{\"1526\":2}}],[\"idle函数进行rcu更新准备工作\",{\"1\":{\"1524\":1}}],[\"idle\",{\"0\":{\"1512\":1,\"1516\":1,\"1518\":1,\"1523\":1,\"1524\":1,\"1526\":1,\"1528\":1,\"1530\":1,\"1539\":1,\"1541\":1,\"1585\":1},\"1\":{\"1474\":1,\"1513\":1,\"1515\":11,\"1516\":11,\"1518\":17,\"1520\":8,\"1521\":1,\"1523\":13,\"1524\":6,\"1526\":4,\"1528\":11,\"1531\":3,\"1534\":3,\"1537\":1,\"1540\":3,\"1541\":3,\"1542\":3,\"1543\":1,\"1545\":5,\"1583\":2,\"1584\":1,\"1585\":2}}],[\"id1\",{\"1\":{\"892\":1}}],[\"ids\",{\"1\":{\"671\":5}}],[\"id=4\",{\"1\":{\"798\":1}}],[\"id=\",{\"1\":{\"375\":2,\"892\":2,\"931\":1,\"1004\":1}}],[\"idiomatic\",{\"1\":{\"271\":1}}],[\"id\",{\"1\":{\"236\":7,\"245\":1,\"374\":6,\"375\":2,\"387\":2,\"671\":10,\"692\":1,\"738\":5,\"742\":1,\"789\":4,\"798\":1,\"1320\":1,\"1341\":2,\"1483\":1,\"1542\":1,\"1590\":1,\"1600\":1}}],[\"idel\",{\"1\":{\"1474\":1}}],[\"ide\",{\"1\":{\"1469\":1}}],[\"ident\",{\"1\":{\"692\":1,\"1464\":2}}],[\"identified\",{\"1\":{\"1507\":1}}],[\"identify\",{\"1\":{\"195\":1,\"196\":1,\"546\":1}}],[\"identity\",{\"1\":{\"640\":1,\"675\":1,\"676\":1}}],[\"identities\",{\"1\":{\"600\":1}}],[\"identical\",{\"1\":{\"245\":1}}],[\"idealistic\",{\"1\":{\"558\":1,\"565\":1}}],[\"ideally\",{\"1\":{\"542\":1}}],[\"ideal\",{\"1\":{\"237\":1,\"1507\":1}}],[\"idea\",{\"1\":{\"193\":1,\"559\":1,\"1060\":3,\"1623\":1}}],[\"idx=3308\",{\"1\":{\"673\":1}}],[\"idx\",{\"1\":{\"75\":2,\"118\":2,\"289\":9,\"356\":2,\"480\":2,\"509\":1,\"1463\":1}}],[\"i++\",{\"1\":{\"149\":1,\"183\":1,\"480\":1,\"481\":1,\"509\":1,\"1329\":1}}],[\"i+1\",{\"1\":{\"11\":1,\"150\":2,\"178\":1,\"401\":1}}],[\"i−1\",{\"1\":{\"117\":4,\"120\":2,\"128\":1}}],[\"iv\",{\"0\":{\"135\":1,\"494\":1},\"1\":{\"115\":1}}],[\"it++\",{\"1\":{\"693\":1}}],[\"ittage\",{\"1\":{\"543\":1,\"559\":6}}],[\"itilalarmcgi\",{\"1\":{\"412\":1}}],[\"itself\",{\"1\":{\"321\":1,\"707\":1,\"1405\":1}}],[\"its\",{\"1\":{\"237\":1,\"271\":1,\"542\":1,\"548\":1,\"553\":1,\"556\":1,\"559\":2,\"562\":1,\"892\":1,\"986\":1,\"1125\":1,\"1198\":1,\"1388\":1,\"1389\":1,\"1476\":1,\"1483\":1,\"1487\":2,\"1498\":1,\"1507\":1,\"1623\":8}}],[\"iterative\",{\"1\":{\"458\":1}}],[\"iterator\",{\"1\":{\"396\":1,\"420\":1,\"693\":1,\"1056\":2}}],[\"iterators\",{\"1\":{\"396\":1}}],[\"iterable\",{\"1\":{\"88\":1,\"313\":2,\"314\":2,\"316\":3,\"393\":2,\"401\":3}}],[\"itertuples\",{\"1\":{\"315\":1,\"329\":2}}],[\"itertools↩︎\",{\"1\":{\"317\":1}}],[\"itertools\",{\"0\":{\"310\":1,\"311\":1,\"358\":1},\"1\":{\"146\":1,\"160\":1,\"310\":2,\"311\":3,\"315\":1,\"329\":2,\"358\":1}}],[\"iter\",{\"1\":{\"313\":1,\"314\":1,\"341\":2,\"420\":3}}],[\"items\",{\"1\":{\"289\":3,\"304\":1,\"341\":2,\"671\":1}}],[\"item\",{\"1\":{\"21\":1,\"303\":2,\"316\":1,\"341\":1,\"671\":2,\"793\":3,\"892\":4}}],[\"it\",{\"1\":{\"75\":3,\"84\":4,\"193\":2,\"194\":5,\"195\":2,\"203\":1,\"236\":5,\"237\":1,\"243\":5,\"245\":3,\"250\":2,\"255\":4,\"261\":1,\"271\":1,\"308\":2,\"313\":3,\"321\":1,\"340\":2,\"361\":4,\"386\":1,\"406\":1,\"465\":1,\"542\":1,\"549\":5,\"552\":1,\"557\":1,\"558\":1,\"559\":4,\"573\":1,\"582\":1,\"592\":1,\"600\":1,\"609\":1,\"612\":1,\"675\":1,\"693\":4,\"707\":2,\"751\":1,\"776\":2,\"780\":1,\"781\":1,\"785\":1,\"850\":1,\"851\":2,\"892\":1,\"923\":2,\"941\":1,\"942\":1,\"975\":3,\"988\":1,\"1000\":1,\"1052\":1,\"1060\":3,\"1074\":1,\"1075\":1,\"1077\":1,\"1080\":3,\"1084\":2,\"1099\":4,\"1105\":3,\"1125\":1,\"1130\":1,\"1143\":1,\"1153\":1,\"1189\":1,\"1198\":2,\"1202\":2,\"1203\":2,\"1208\":2,\"1209\":1,\"1216\":2,\"1217\":1,\"1219\":4,\"1221\":1,\"1388\":1,\"1405\":1,\"1406\":1,\"1474\":1,\"1487\":1,\"1491\":1,\"1492\":2,\"1494\":1,\"1495\":1,\"1498\":1,\"1499\":2,\"1501\":1,\"1507\":4,\"1508\":1,\"1545\":2,\"1553\":1,\"1592\":2,\"1602\":2,\"1611\":1,\"1623\":6}}],[\"iis\",{\"1\":{\"859\":1}}],[\"iii\",{\"0\":{\"125\":1},\"1\":{\"114\":1}}],[\"ii\",{\"0\":{\"134\":1},\"1\":{\"11\":1,\"60\":1,\"86\":2,\"125\":1,\"165\":1,\"706\":2,\"1402\":2}}],[\"i\",{\"0\":{\"306\":1,\"1215\":1},\"1\":{\"10\":6,\"11\":13,\"12\":3,\"13\":19,\"14\":8,\"15\":18,\"21\":6,\"30\":4,\"33\":4,\"34\":2,\"36\":3,\"74\":18,\"75\":13,\"76\":12,\"77\":4,\"79\":8,\"80\":8,\"86\":1,\"87\":5,\"88\":12,\"92\":7,\"96\":5,\"98\":1,\"102\":15,\"103\":1,\"108\":10,\"114\":11,\"115\":13,\"117\":7,\"118\":22,\"120\":12,\"122\":7,\"124\":7,\"125\":4,\"126\":1,\"128\":1,\"130\":13,\"132\":7,\"134\":6,\"136\":6,\"138\":10,\"139\":1,\"147\":13,\"149\":7,\"150\":12,\"152\":11,\"153\":19,\"154\":4,\"156\":3,\"157\":1,\"159\":3,\"160\":12,\"165\":2,\"178\":4,\"183\":4,\"184\":6,\"186\":11,\"224\":1,\"270\":1,\"285\":1,\"334\":1,\"340\":6,\"354\":1,\"355\":3,\"360\":2,\"397\":4,\"401\":2,\"414\":1,\"425\":3,\"445\":1,\"454\":1,\"466\":5,\"467\":1,\"480\":7,\"481\":11,\"502\":4,\"504\":6,\"507\":3,\"509\":9,\"548\":1,\"557\":1,\"558\":1,\"559\":1,\"565\":2,\"664\":2,\"706\":2,\"746\":1,\"750\":2,\"751\":1,\"753\":1,\"917\":1,\"955\":1,\"998\":2,\"1020\":1,\"1021\":4,\"1101\":1,\"1125\":1,\"1185\":2,\"1189\":3,\"1198\":1,\"1212\":6,\"1221\":1,\"1231\":2,\"1329\":2,\"1365\":3,\"1402\":2,\"1421\":1,\"1448\":2,\"1449\":1,\"1463\":2,\"1485\":1,\"1509\":1,\"1591\":2,\"1623\":2}}],[\"isempty\",{\"1\":{\"1627\":1}}],[\"isbadjniversion\",{\"1\":{\"1365\":1}}],[\"isblue\",{\"1\":{\"23\":1}}],[\"isolate\",{\"1\":{\"1355\":1}}],[\"isodate\",{\"1\":{\"793\":1}}],[\"ismain\",{\"1\":{\"1293\":1,\"1295\":2,\"1296\":2,\"1298\":2,\"1299\":4}}],[\"isn\",{\"1\":{\"978\":2,\"982\":10,\"988\":1}}],[\"isclosed\",{\"1\":{\"703\":1}}],[\"isintrinsic\",{\"1\":{\"693\":1}}],[\"isinstance\",{\"0\":{\"395\":1},\"1\":{\"395\":2}}],[\"istopapp\",{\"1\":{\"702\":2}}],[\"istore\",{\"1\":{\"664\":2}}],[\"istoeplitzmatrix\",{\"1\":{\"401\":1}}],[\"isassignablefrom\",{\"1\":{\"708\":1}}],[\"isa\",{\"1\":{\"564\":1,\"1618\":1}}],[\"isaliensorted\",{\"1\":{\"186\":1}}],[\"isvalid\",{\"1\":{\"465\":2}}],[\"ispositive\",{\"1\":{\"402\":1}}],[\"isperfectsquare\",{\"1\":{\"31\":1}}],[\"islice\",{\"0\":{\"358\":1},\"1\":{\"313\":1,\"316\":1,\"358\":2}}],[\"islands\",{\"1\":{\"76\":1}}],[\"issuing\",{\"1\":{\"1486\":1}}],[\"issues\",{\"1\":{\"1507\":1}}],[\"issue\",{\"1\":{\"321\":1,\"549\":1,\"550\":2,\"552\":3,\"556\":1,\"559\":1,\"565\":1,\"747\":1}}],[\"issued\",{\"1\":{\"237\":2,\"548\":3,\"565\":1,\"1507\":1}}],[\"issafetocallabort\",{\"1\":{\"1366\":1}}],[\"issymmetric\",{\"1\":{\"51\":1,\"52\":1}}],[\"is\",{\"0\":{\"234\":1,\"244\":1,\"255\":1},\"1\":{\"9\":2,\"88\":1,\"108\":1,\"193\":2,\"194\":5,\"195\":2,\"196\":2,\"203\":1,\"204\":2,\"212\":2,\"227\":1,\"234\":6,\"235\":1,\"236\":11,\"237\":2,\"243\":14,\"245\":21,\"250\":4,\"253\":1,\"255\":5,\"256\":1,\"288\":2,\"289\":1,\"308\":1,\"309\":2,\"321\":3,\"325\":1,\"339\":3,\"340\":2,\"341\":6,\"342\":1,\"344\":2,\"347\":2,\"361\":10,\"390\":1,\"401\":5,\"403\":5,\"406\":1,\"408\":6,\"410\":1,\"427\":2,\"434\":3,\"454\":2,\"458\":1,\"459\":5,\"465\":1,\"486\":2,\"492\":1,\"500\":1,\"504\":1,\"509\":1,\"510\":1,\"520\":2,\"540\":1,\"542\":4,\"543\":20,\"546\":1,\"547\":2,\"548\":9,\"549\":3,\"550\":1,\"551\":2,\"552\":1,\"553\":1,\"555\":1,\"556\":3,\"557\":6,\"558\":12,\"559\":23,\"562\":6,\"565\":3,\"568\":1,\"573\":1,\"575\":1,\"576\":2,\"580\":3,\"582\":1,\"584\":1,\"586\":2,\"592\":1,\"601\":3,\"602\":1,\"620\":1,\"621\":1,\"623\":1,\"624\":1,\"675\":1,\"691\":1,\"702\":1,\"703\":1,\"707\":1,\"746\":1,\"748\":2,\"750\":3,\"751\":1,\"759\":1,\"761\":2,\"774\":2,\"776\":1,\"778\":1,\"783\":2,\"784\":1,\"785\":1,\"786\":1,\"793\":1,\"796\":1,\"820\":3,\"850\":5,\"851\":5,\"890\":1,\"892\":2,\"896\":2,\"898\":1,\"923\":2,\"934\":1,\"938\":2,\"939\":2,\"940\":1,\"941\":2,\"942\":1,\"975\":4,\"986\":1,\"988\":1,\"992\":1,\"1000\":2,\"1038\":1,\"1054\":1,\"1060\":10,\"1072\":1,\"1075\":4,\"1076\":2,\"1077\":1,\"1079\":1,\"1080\":5,\"1084\":1,\"1094\":1,\"1095\":2,\"1098\":1,\"1099\":3,\"1107\":1,\"1110\":1,\"1118\":1,\"1120\":1,\"1122\":1,\"1123\":1,\"1124\":1,\"1125\":3,\"1130\":2,\"1143\":2,\"1145\":1,\"1153\":3,\"1185\":1,\"1186\":1,\"1189\":1,\"1192\":2,\"1198\":1,\"1201\":6,\"1202\":6,\"1203\":5,\"1204\":3,\"1206\":1,\"1207\":1,\"1208\":2,\"1212\":1,\"1216\":2,\"1219\":6,\"1221\":4,\"1259\":3,\"1269\":2,\"1278\":3,\"1287\":1,\"1301\":1,\"1345\":1,\"1381\":2,\"1386\":2,\"1388\":5,\"1405\":1,\"1418\":1,\"1419\":2,\"1422\":1,\"1429\":2,\"1469\":1,\"1474\":3,\"1475\":4,\"1476\":1,\"1479\":1,\"1481\":5,\"1483\":4,\"1485\":8,\"1487\":6,\"1490\":1,\"1492\":6,\"1493\":2,\"1494\":3,\"1495\":4,\"1496\":4,\"1497\":2,\"1498\":3,\"1501\":3,\"1507\":5,\"1508\":5,\"1509\":1,\"1519\":1,\"1520\":2,\"1523\":1,\"1536\":1,\"1542\":1,\"1545\":4,\"1573\":3,\"1591\":2,\"1592\":7,\"1597\":1,\"1602\":4,\"1607\":1,\"1611\":2,\"1619\":2,\"1620\":5,\"1623\":18}}],[\"inherently\",{\"1\":{\"1485\":1}}],[\"ineo6\",{\"1\":{\"1236\":1}}],[\"inet\",{\"1\":{\"949\":6,\"1145\":1}}],[\"inoperable\",{\"1\":{\"1125\":1}}],[\"inorder\",{\"0\":{\"490\":1},\"1\":{\"492\":1,\"493\":4}}],[\"inordersuccessor\",{\"1\":{\"64\":1}}],[\"inordertraversal\",{\"1\":{\"46\":1,\"493\":1}}],[\"innodb\",{\"0\":{\"814\":1},\"1\":{\"814\":2}}],[\"inner\",{\"1\":{\"418\":2,\"807\":2}}],[\"inactive=30s\",{\"1\":{\"766\":1}}],[\"inparallel\",{\"1\":{\"583\":1}}],[\"inputtext\",{\"1\":{\"1094\":1}}],[\"inputfilename\",{\"1\":{\"693\":2}}],[\"input\",{\"0\":{\"307\":1,\"309\":1,\"504\":1},\"1\":{\"177\":1,\"182\":1,\"236\":1,\"307\":3,\"309\":10,\"502\":5,\"504\":8,\"507\":4,\"748\":1,\"940\":4,\"1142\":2,\"1161\":1,\"1185\":9,\"1186\":2,\"1212\":5,\"1221\":1,\"1228\":1,\"1269\":5,\"1281\":4,\"1282\":1}}],[\"inline使用\",{\"1\":{\"1110\":1}}],[\"inline\",{\"1\":{\"502\":2,\"510\":1,\"706\":2,\"896\":2,\"897\":1,\"982\":1,\"1345\":1,\"1403\":2,\"1534\":1,\"1542\":2}}],[\"ini\",{\"1\":{\"336\":2,\"449\":1}}],[\"initconst\",{\"1\":{\"1553\":1}}],[\"initcalls\",{\"1\":{\"1557\":3}}],[\"initcall7\",{\"1\":{\"1551\":2}}],[\"initcall6\",{\"1\":{\"1551\":2}}],[\"initcall5\",{\"1\":{\"1551\":2}}],[\"initcall4\",{\"1\":{\"1551\":2}}],[\"initcall3\",{\"1\":{\"1551\":2}}],[\"initcall2\",{\"1\":{\"1551\":3,\"1552\":1}}],[\"initcall1\",{\"1\":{\"1551\":4}}],[\"initcall\",{\"0\":{\"1550\":1,\"1551\":1,\"1552\":1},\"1\":{\"1551\":48,\"1552\":1,\"1557\":1,\"1605\":6}}],[\"initdata\",{\"1\":{\"1553\":4}}],[\"initiate\",{\"1\":{\"1623\":1}}],[\"initiated\",{\"1\":{\"1501\":1}}],[\"initial\",{\"1\":{\"978\":1,\"1004\":1,\"1241\":1}}],[\"initialization\",{\"0\":{\"1482\":1,\"1486\":1,\"1491\":1,\"1492\":1,\"1498\":1,\"1499\":1},\"1\":{\"707\":1,\"1053\":1,\"1405\":1,\"1475\":2,\"1482\":1,\"1491\":1,\"1496\":1,\"1498\":3,\"1499\":2,\"1613\":2}}],[\"initializenativeloader\",{\"1\":{\"1365\":1}}],[\"initializes\",{\"1\":{\"1239\":1,\"1486\":1,\"1492\":1,\"1498\":1,\"1499\":1,\"1551\":1}}],[\"initializer\",{\"1\":{\"1142\":3,\"1185\":4,\"1186\":8,\"1212\":5,\"1217\":1,\"1564\":1,\"1566\":1}}],[\"initializer=tf\",{\"1\":{\"1142\":2,\"1185\":3,\"1186\":8}}],[\"initialized\",{\"1\":{\"584\":1,\"707\":1,\"988\":1,\"1405\":1,\"1424\":1,\"1492\":2,\"1495\":1,\"1551\":1}}],[\"initialize\",{\"1\":{\"465\":1,\"707\":2,\"1052\":1,\"1219\":1,\"1365\":1,\"1405\":2}}],[\"initialadminpassword\",{\"1\":{\"612\":1}}],[\"initially\",{\"1\":{\"245\":1,\"1507\":1}}],[\"inithighlightingonload\",{\"1\":{\"1081\":1}}],[\"initrd\",{\"1\":{\"715\":1}}],[\"initnativemethods\",{\"0\":{\"707\":1,\"1405\":1},\"1\":{\"707\":8,\"1405\":6,\"1406\":3}}],[\"init\",{\"0\":{\"301\":1,\"432\":1,\"1240\":1,\"1367\":1,\"1548\":1,\"1551\":1,\"1557\":1,\"1575\":1,\"1604\":1},\"1\":{\"42\":1,\"54\":1,\"62\":1,\"74\":2,\"269\":2,\"420\":1,\"421\":3,\"424\":16,\"425\":11,\"426\":26,\"427\":12,\"428\":2,\"430\":3,\"431\":8,\"432\":23,\"433\":1,\"434\":1,\"435\":1,\"436\":2,\"460\":1,\"468\":1,\"486\":1,\"495\":1,\"499\":1,\"614\":1,\"623\":1,\"696\":2,\"707\":1,\"783\":1,\"784\":1,\"785\":1,\"796\":2,\"851\":1,\"864\":3,\"1056\":1,\"1212\":6,\"1217\":2,\"1239\":1,\"1240\":3,\"1307\":3,\"1366\":1,\"1367\":2,\"1396\":2,\"1405\":1,\"1463\":1,\"1515\":1,\"1528\":2,\"1549\":1,\"1551\":27,\"1552\":7,\"1553\":9,\"1556\":3,\"1557\":2,\"1563\":4,\"1564\":4,\"1565\":3,\"1566\":4,\"1570\":1,\"1575\":5,\"1576\":1,\"1605\":6,\"1606\":1}}],[\"incweakhandle\",{\"1\":{\"1310\":1}}],[\"incstronghandle\",{\"1\":{\"1310\":1}}],[\"inc\",{\"1\":{\"1209\":1}}],[\"including\",{\"0\":{\"1079\":1},\"1\":{\"676\":1,\"942\":1,\"1056\":1,\"1079\":1,\"1192\":1,\"1508\":1}}],[\"include\",{\"0\":{\"1421\":1},\"1\":{\"455\":2,\"502\":1,\"693\":6,\"706\":1,\"746\":1,\"760\":1,\"941\":1,\"950\":1,\"951\":1,\"956\":1,\"959\":1,\"960\":1,\"1004\":2,\"1079\":2,\"1120\":1,\"1179\":1,\"1402\":1,\"1418\":2,\"1421\":8,\"1424\":7,\"1426\":3,\"1431\":1,\"1434\":2,\"1445\":1,\"1446\":2,\"1448\":5,\"1449\":5,\"1464\":1,\"1534\":1}}],[\"includes\",{\"1\":{\"455\":1,\"552\":1,\"675\":1,\"780\":1,\"1485\":1,\"1486\":1}}],[\"included\",{\"1\":{\"245\":1,\"1421\":1}}],[\"incoming\",{\"1\":{\"1125\":1}}],[\"incomplete\",{\"1\":{\"314\":3,\"951\":1}}],[\"incomplete=\",{\"1\":{\"314\":3,\"315\":1,\"329\":1}}],[\"incorrect\",{\"1\":{\"385\":1,\"548\":2,\"559\":1,\"601\":1}}],[\"incorporates\",{\"1\":{\"1125\":1}}],[\"incorporate\",{\"1\":{\"245\":1}}],[\"increfs\",{\"1\":{\"1310\":2}}],[\"increasing\",{\"1\":{\"321\":1,\"558\":1,\"576\":1,\"1120\":1}}],[\"increase\",{\"1\":{\"256\":2,\"558\":2,\"568\":1,\"1124\":1,\"1203\":1,\"1501\":1}}],[\"increases\",{\"1\":{\"241\":1}}],[\"increased\",{\"1\":{\"236\":1,\"557\":1,\"1623\":1}}],[\"incremental\",{\"1\":{\"1074\":1}}],[\"increment\",{\"1\":{\"236\":1,\"245\":1,\"1170\":1}}],[\"incremented\",{\"1\":{\"212\":1,\"562\":1}}],[\"invented\",{\"1\":{\"1501\":1}}],[\"inventory\",{\"1\":{\"793\":4}}],[\"inverted\",{\"1\":{\"243\":1,\"1056\":1}}],[\"inversions\",{\"1\":{\"176\":1}}],[\"invocationtargetexception\",{\"1\":{\"1629\":1}}],[\"invocation\",{\"0\":{\"1629\":1},\"1\":{\"1365\":1,\"1626\":5,\"1629\":1}}],[\"invoker\",{\"1\":{\"1320\":1}}],[\"invoke\",{\"1\":{\"707\":1,\"1405\":1,\"1629\":2}}],[\"invokewith\",{\"1\":{\"702\":2}}],[\"invokespecial\",{\"1\":{\"664\":1}}],[\"involves\",{\"1\":{\"245\":1}}],[\"invaild\",{\"1\":{\"465\":2}}],[\"invalidating\",{\"1\":{\"602\":1}}],[\"invalidate\",{\"0\":{\"221\":1},\"1\":{\"220\":1,\"224\":1}}],[\"invalid\",{\"1\":{\"224\":1,\"1056\":1,\"1573\":1}}],[\"industry\",{\"1\":{\"1508\":2,\"1623\":1}}],[\"induced\",{\"1\":{\"557\":1}}],[\"induce\",{\"1\":{\"548\":1,\"549\":1}}],[\"indoor\",{\"1\":{\"1127\":1}}],[\"indoors\",{\"1\":{\"1121\":1}}],[\"ind\",{\"1\":{\"359\":2,\"360\":2}}],[\"indicate\",{\"1\":{\"576\":1,\"1487\":1,\"1591\":1}}],[\"indicates\",{\"1\":{\"576\":1}}],[\"indicative\",{\"1\":{\"321\":1}}],[\"indication\",{\"1\":{\"321\":1}}],[\"indicating\",{\"1\":{\"195\":1,\"321\":1,\"1611\":1}}],[\"indirectly\",{\"1\":{\"550\":1}}],[\"indirect\",{\"1\":{\"543\":1}}],[\"individually\",{\"1\":{\"573\":1,\"600\":1}}],[\"individualize\",{\"1\":{\"558\":1}}],[\"individual\",{\"1\":{\"203\":1,\"543\":1,\"547\":1,\"557\":1,\"558\":1,\"1123\":1,\"1204\":2,\"1208\":1}}],[\"indent\",{\"1\":{\"1259\":1}}],[\"indefi\",{\"1\":{\"1012\":1}}],[\"indepthnet\",{\"1\":{\"1012\":3}}],[\"independent\",{\"1\":{\"553\":1,\"559\":2}}],[\"independently\",{\"1\":{\"543\":1,\"1153\":1}}],[\"indetectnet在对小目标的检测上拥有十分巨大的优势\",{\"1\":{\"1012\":1}}],[\"indetectnet具有极大的精度领先\",{\"1\":{\"1012\":1}}],[\"indetectnet\",{\"1\":{\"1012\":1}}],[\"indece\",{\"1\":{\"599\":1}}],[\"indeed\",{\"1\":{\"559\":1}}],[\"indeg\",{\"1\":{\"86\":5}}],[\"indexerror\",{\"1\":{\"289\":2}}],[\"indexed\",{\"1\":{\"243\":1,\"559\":1,\"575\":1,\"584\":1,\"599\":1,\"601\":1}}],[\"index\",{\"0\":{\"809\":1},\"1\":{\"8\":4,\"15\":6,\"86\":1,\"89\":1,\"194\":6,\"198\":1,\"203\":1,\"204\":3,\"205\":1,\"261\":4,\"336\":2,\"337\":1,\"341\":1,\"420\":7,\"449\":1,\"555\":1,\"559\":1,\"575\":3,\"705\":1,\"706\":2,\"760\":3,\"789\":1,\"796\":1,\"805\":2,\"903\":1,\"933\":2,\"976\":1,\"978\":1,\"1400\":1,\"1402\":2,\"1435\":1,\"1464\":1,\"1519\":4,\"1520\":7,\"1525\":1,\"1534\":1}}],[\"inspired\",{\"1\":{\"586\":1,\"892\":1}}],[\"insights\",{\"1\":{\"562\":1}}],[\"insiders\",{\"1\":{\"1623\":1}}],[\"inside\",{\"1\":{\"543\":1}}],[\"inserted\",{\"1\":{\"936\":1,\"941\":2}}],[\"insertmany\",{\"1\":{\"791\":2}}],[\"insertone\",{\"1\":{\"791\":2}}],[\"insert\",{\"0\":{\"896\":1},\"1\":{\"341\":1,\"492\":1,\"794\":1,\"797\":1,\"896\":1,\"1056\":1,\"1440\":6,\"1441\":3}}],[\"inserting\",{\"1\":{\"341\":1,\"406\":1,\"454\":1,\"1056\":1}}],[\"insertion\",{\"0\":{\"175\":1},\"1\":{\"406\":1}}],[\"ins\",{\"1\":{\"289\":4,\"1179\":1}}],[\"insufficient\",{\"1\":{\"241\":1}}],[\"instrument\",{\"1\":{\"1553\":1}}],[\"instrumented\",{\"1\":{\"1376\":1}}],[\"instruction\",{\"0\":{\"235\":1,\"515\":1},\"1\":{\"212\":4,\"233\":1,\"234\":4,\"235\":2,\"236\":9,\"237\":7,\"243\":1,\"245\":20,\"515\":1,\"542\":1,\"546\":1,\"548\":5,\"550\":1,\"552\":4,\"555\":1,\"556\":4,\"557\":1,\"558\":2,\"559\":3,\"562\":1,\"565\":2,\"568\":1,\"573\":1,\"575\":3,\"580\":3,\"582\":1,\"599\":2,\"601\":1,\"602\":1,\"604\":2,\"690\":1,\"691\":4,\"1474\":2,\"1485\":2,\"1618\":1,\"1620\":5}}],[\"instructionset\",{\"1\":{\"702\":2}}],[\"instructions\",{\"0\":{\"513\":1},\"1\":{\"195\":1,\"227\":13,\"234\":3,\"235\":1,\"236\":3,\"237\":9,\"245\":3,\"539\":1,\"543\":2,\"546\":1,\"548\":4,\"550\":2,\"551\":1,\"552\":2,\"557\":1,\"558\":1,\"559\":1,\"573\":2,\"582\":1,\"599\":1,\"603\":1,\"604\":1,\"1143\":1,\"1485\":1,\"1620\":1}}],[\"instock\",{\"1\":{\"793\":1}}],[\"inst\",{\"1\":{\"691\":2,\"1424\":9}}],[\"instantaneously\",{\"1\":{\"562\":1}}],[\"instances\",{\"1\":{\"584\":2,\"1590\":1,\"1600\":2}}],[\"instance\",{\"0\":{\"678\":1},\"1\":{\"197\":1,\"438\":3,\"552\":1,\"553\":1,\"557\":1,\"558\":1,\"674\":1,\"681\":1,\"682\":2,\"850\":1,\"931\":1,\"940\":1,\"1366\":8}}],[\"installs\",{\"1\":{\"1483\":1}}],[\"installd\",{\"1\":{\"1374\":4}}],[\"installing\",{\"0\":{\"1161\":1},\"1\":{\"1424\":8}}],[\"installers\",{\"1\":{\"890\":1}}],[\"installer\",{\"1\":{\"703\":2}}],[\"installed\",{\"1\":{\"620\":1,\"778\":1,\"781\":1,\"786\":1}}],[\"installation\",{\"0\":{\"620\":1,\"853\":1,\"863\":1,\"889\":1,\"1099\":1,\"1175\":1},\"1\":{\"775\":1,\"783\":1,\"890\":1,\"1091\":1,\"1179\":1}}],[\"install\",{\"0\":{\"272\":1,\"274\":1,\"770\":1,\"780\":1,\"890\":1,\"916\":1,\"958\":1,\"959\":1,\"960\":1,\"1073\":1,\"1177\":1,\"1178\":1,\"1424\":1},\"1\":{\"273\":2,\"274\":2,\"290\":1,\"311\":1,\"334\":1,\"365\":1,\"388\":1,\"445\":3,\"692\":1,\"712\":1,\"714\":2,\"744\":1,\"770\":2,\"774\":1,\"775\":3,\"777\":1,\"780\":2,\"781\":2,\"783\":1,\"786\":1,\"789\":1,\"796\":2,\"824\":1,\"841\":2,\"847\":1,\"849\":1,\"853\":1,\"854\":1,\"855\":2,\"856\":3,\"861\":1,\"863\":1,\"890\":3,\"916\":4,\"928\":1,\"942\":2,\"943\":1,\"959\":2,\"1052\":1,\"1073\":5,\"1074\":1,\"1091\":1,\"1099\":2,\"1105\":1,\"1113\":1,\"1145\":4,\"1177\":1,\"1263\":3,\"1274\":1,\"1417\":2,\"1418\":2,\"1424\":27,\"1431\":1,\"1432\":1,\"1633\":1,\"1635\":3,\"1645\":3,\"1648\":1}}],[\"instead\",{\"1\":{\"237\":1,\"241\":1,\"558\":1,\"820\":5,\"850\":1,\"940\":1,\"1366\":1,\"1509\":1}}],[\"insort\",{\"1\":{\"175\":1}}],[\"infrastructure\",{\"1\":{\"1189\":1}}],[\"infrequently\",{\"1\":{\"600\":1}}],[\"infrequent\",{\"1\":{\"237\":1}}],[\"inference\",{\"1\":{\"1185\":7,\"1186\":1}}],[\"infs\",{\"1\":{\"692\":1}}],[\"informs\",{\"1\":{\"1573\":1}}],[\"informing\",{\"1\":{\"986\":1}}],[\"informzygotesofusappoolstatus\",{\"1\":{\"702\":1}}],[\"information\",{\"0\":{\"747\":1,\"1165\":1},\"1\":{\"196\":1,\"197\":1,\"241\":1,\"261\":1,\"270\":1,\"321\":1,\"675\":1,\"676\":1,\"746\":1,\"778\":1,\"1099\":1,\"1143\":1,\"1159\":1,\"1202\":1,\"1481\":1,\"1487\":3,\"1490\":1,\"1492\":1,\"1494\":1,\"1495\":1,\"1496\":1,\"1497\":1,\"1499\":1,\"1592\":1,\"1602\":1}}],[\"info\",{\"1\":{\"288\":1,\"289\":1,\"321\":2,\"324\":1,\"325\":1,\"326\":3,\"510\":1,\"620\":1,\"666\":5,\"681\":1,\"682\":1,\"843\":1,\"1216\":1,\"1606\":1,\"1613\":1}}],[\"inf\",{\"1\":{\"130\":5,\"132\":2}}],[\"int32\",{\"1\":{\"1300\":1,\"1320\":3,\"1333\":5}}],[\"int>\",{\"1\":{\"454\":1,\"480\":1}}],[\"intnum\",{\"1\":{\"394\":2}}],[\"int2list\",{\"0\":{\"394\":1},\"1\":{\"394\":2}}],[\"intended\",{\"1\":{\"1508\":1}}],[\"intensity\",{\"1\":{\"1192\":1,\"1202\":1}}],[\"intent\",{\"1\":{\"1094\":2,\"1272\":1,\"1329\":1,\"1333\":1}}],[\"integral\",{\"1\":{\"1591\":3}}],[\"integrated\",{\"1\":{\"1501\":1,\"1507\":3,\"1508\":1}}],[\"integrates\",{\"1\":{\"774\":1}}],[\"integer\",{\"1\":{\"245\":3,\"674\":1,\"1219\":1}}],[\"integers\",{\"1\":{\"182\":1}}],[\"intercept\",{\"1\":{\"1626\":1}}],[\"intermediary\",{\"1\":{\"1501\":1}}],[\"intermediate\",{\"1\":{\"236\":1,\"690\":1}}],[\"interspersed\",{\"1\":{\"1419\":1}}],[\"intersection\",{\"0\":{\"459\":1},\"1\":{\"459\":1,\"1155\":1}}],[\"inter\",{\"1\":{\"1354\":1,\"1388\":1,\"1507\":2,\"1508\":1}}],[\"interactive\",{\"1\":{\"917\":1,\"1101\":1}}],[\"interaction\",{\"1\":{\"233\":1,\"1495\":1}}],[\"internet\",{\"1\":{\"979\":1,\"1216\":1,\"1623\":8}}],[\"internetwork\",{\"1\":{\"977\":1}}],[\"intern\",{\"1\":{\"706\":1,\"1402\":1}}],[\"internals\",{\"1\":{\"681\":1,\"682\":2}}],[\"internal\",{\"0\":{\"731\":1},\"1\":{\"675\":1,\"681\":1,\"682\":2,\"708\":1,\"727\":1,\"896\":1,\"897\":1}}],[\"international\",{\"1\":{\"566\":1,\"606\":3,\"1623\":2}}],[\"interprocess\",{\"0\":{\"413\":1}}],[\"intervening\",{\"1\":{\"361\":2}}],[\"interestingly\",{\"1\":{\"558\":1}}],[\"interest\",{\"1\":{\"243\":1,\"321\":1,\"1021\":1}}],[\"interference\",{\"1\":{\"576\":1,\"601\":2,\"1118\":2}}],[\"interfere\",{\"1\":{\"236\":1}}],[\"interfaces\",{\"0\":{\"1621\":1},\"1\":{\"664\":1,\"1145\":1}}],[\"interface\",{\"1\":{\"230\":1,\"695\":1,\"860\":1,\"879\":1,\"1202\":1,\"1365\":1,\"1395\":1,\"1474\":3,\"1486\":1,\"1499\":3,\"1508\":5,\"1509\":1,\"1534\":1,\"1591\":2,\"1611\":1,\"1626\":1}}],[\"interrupts\",{\"1\":{\"1485\":1,\"1499\":6,\"1509\":1,\"1536\":3}}],[\"interrupt\",{\"1\":{\"227\":1,\"1499\":5,\"1536\":2,\"1537\":1,\"1611\":1}}],[\"intel\",{\"1\":{\"225\":1,\"724\":2,\"1144\":1}}],[\"into\",{\"1\":{\"203\":1,\"204\":1,\"236\":1,\"241\":1,\"245\":7,\"250\":1,\"256\":1,\"261\":1,\"314\":1,\"342\":1,\"575\":1,\"600\":1,\"774\":1,\"797\":1,\"941\":1,\"1052\":1,\"1079\":1,\"1105\":1,\"1344\":1,\"1464\":4,\"1476\":1,\"1493\":2,\"1494\":1,\"1495\":2,\"1496\":1,\"1542\":1,\"1620\":1}}],[\"intra\",{\"1\":{\"1485\":1}}],[\"intrinsic\",{\"1\":{\"1381\":2}}],[\"intrinsity\",{\"1\":{\"198\":2}}],[\"introducing\",{\"1\":{\"236\":1}}],[\"introduces\",{\"1\":{\"1125\":1}}],[\"introduced\",{\"1\":{\"557\":2,\"1120\":1,\"1206\":1,\"1209\":1}}],[\"introduce\",{\"1\":{\"227\":2,\"542\":1,\"543\":1,\"552\":1,\"556\":1,\"576\":1,\"599\":1,\"600\":1,\"1206\":1}}],[\"introduction\",{\"0\":{\"190\":1,\"543\":1,\"582\":1,\"1474\":1}}],[\"int\",{\"0\":{\"1594\":1,\"1595\":1,\"1596\":1},\"1\":{\"9\":2,\"10\":6,\"11\":3,\"12\":2,\"13\":2,\"14\":3,\"15\":3,\"19\":6,\"20\":9,\"21\":3,\"31\":1,\"33\":4,\"34\":6,\"35\":4,\"36\":5,\"42\":3,\"43\":1,\"46\":1,\"47\":3,\"54\":1,\"56\":2,\"57\":1,\"59\":1,\"61\":1,\"62\":1,\"74\":4,\"75\":6,\"77\":5,\"79\":4,\"80\":2,\"84\":1,\"86\":3,\"87\":3,\"88\":3,\"90\":3,\"91\":3,\"92\":1,\"102\":4,\"120\":3,\"122\":1,\"124\":3,\"125\":2,\"130\":6,\"132\":2,\"134\":3,\"136\":3,\"149\":6,\"150\":2,\"152\":6,\"153\":4,\"154\":4,\"155\":2,\"156\":2,\"157\":4,\"159\":3,\"160\":3,\"165\":4,\"169\":2,\"173\":4,\"180\":14,\"183\":2,\"184\":4,\"185\":5,\"297\":2,\"299\":2,\"307\":2,\"309\":2,\"371\":1,\"394\":4,\"395\":1,\"401\":7,\"460\":3,\"466\":2,\"479\":1,\"480\":7,\"481\":4,\"486\":4,\"495\":2,\"496\":1,\"499\":2,\"502\":8,\"507\":1,\"664\":3,\"673\":1,\"692\":3,\"693\":2,\"705\":3,\"742\":1,\"743\":1,\"797\":1,\"950\":2,\"951\":3,\"952\":2,\"955\":17,\"956\":1,\"962\":2,\"982\":1,\"1004\":2,\"1078\":1,\"1198\":1,\"1307\":3,\"1312\":1,\"1313\":1,\"1314\":4,\"1316\":2,\"1320\":5,\"1329\":2,\"1333\":2,\"1340\":1,\"1341\":1,\"1365\":1,\"1376\":3,\"1400\":3,\"1445\":1,\"1446\":5,\"1449\":8,\"1463\":9,\"1469\":6,\"1470\":6,\"1471\":2,\"1519\":4,\"1520\":2,\"1528\":2,\"1529\":3,\"1534\":6,\"1542\":4,\"1543\":2,\"1544\":2,\"1545\":2,\"1567\":7,\"1570\":2,\"1571\":1,\"1572\":1,\"1573\":7,\"1576\":14,\"1577\":5,\"1590\":11,\"1591\":9,\"1592\":6,\"1593\":31,\"1594\":2,\"1595\":2,\"1596\":3,\"1599\":2,\"1600\":4,\"1602\":4,\"1606\":2,\"1607\":4,\"1608\":2,\"1609\":1,\"1610\":1,\"1611\":4}}],[\"in\",{\"0\":{\"326\":1,\"453\":1,\"501\":1,\"509\":1,\"568\":1,\"1381\":1,\"1384\":1,\"1539\":1,\"1548\":1},\"1\":{\"6\":1,\"8\":1,\"9\":1,\"10\":3,\"11\":1,\"12\":2,\"13\":2,\"14\":2,\"15\":1,\"30\":2,\"33\":1,\"34\":1,\"36\":1,\"47\":3,\"59\":1,\"61\":1,\"74\":7,\"75\":8,\"76\":2,\"77\":3,\"79\":7,\"80\":6,\"84\":2,\"85\":3,\"86\":3,\"87\":5,\"88\":5,\"89\":2,\"90\":3,\"91\":2,\"92\":4,\"96\":2,\"97\":1,\"98\":1,\"102\":6,\"103\":1,\"108\":4,\"118\":7,\"120\":4,\"122\":2,\"124\":2,\"125\":2,\"130\":4,\"132\":3,\"134\":2,\"136\":2,\"138\":2,\"147\":1,\"149\":2,\"150\":4,\"152\":4,\"153\":6,\"154\":5,\"155\":1,\"156\":2,\"157\":2,\"159\":3,\"160\":1,\"165\":2,\"177\":2,\"178\":2,\"184\":3,\"186\":1,\"193\":1,\"194\":15,\"195\":1,\"196\":4,\"203\":2,\"204\":4,\"212\":1,\"217\":2,\"227\":1,\"234\":7,\"235\":5,\"236\":15,\"237\":12,\"243\":3,\"245\":27,\"250\":2,\"255\":3,\"256\":3,\"285\":3,\"288\":2,\"289\":6,\"293\":1,\"297\":1,\"298\":1,\"299\":1,\"307\":3,\"308\":1,\"309\":2,\"313\":1,\"315\":2,\"317\":5,\"321\":2,\"326\":2,\"329\":1,\"340\":7,\"341\":1,\"343\":1,\"347\":1,\"348\":2,\"355\":1,\"356\":2,\"358\":1,\"359\":1,\"360\":2,\"366\":3,\"368\":1,\"387\":1,\"390\":2,\"393\":1,\"396\":1,\"397\":1,\"401\":7,\"402\":1,\"406\":1,\"408\":2,\"411\":1,\"418\":3,\"420\":1,\"431\":1,\"436\":1,\"458\":1,\"460\":1,\"465\":5,\"466\":1,\"467\":2,\"480\":4,\"481\":1,\"486\":1,\"492\":2,\"495\":1,\"542\":10,\"543\":14,\"546\":1,\"548\":5,\"549\":9,\"550\":3,\"551\":1,\"552\":6,\"556\":1,\"557\":9,\"558\":9,\"559\":9,\"562\":8,\"564\":1,\"565\":1,\"568\":1,\"576\":1,\"580\":1,\"582\":1,\"592\":1,\"599\":2,\"600\":1,\"606\":1,\"614\":1,\"620\":1,\"623\":1,\"624\":1,\"675\":1,\"691\":1,\"707\":4,\"745\":1,\"748\":1,\"750\":1,\"751\":3,\"759\":7,\"776\":2,\"781\":2,\"783\":1,\"785\":1,\"786\":2,\"789\":1,\"791\":2,\"794\":2,\"796\":3,\"804\":1,\"820\":6,\"847\":1,\"850\":1,\"851\":2,\"888\":1,\"889\":1,\"890\":1,\"892\":5,\"896\":1,\"897\":2,\"923\":3,\"925\":2,\"931\":2,\"941\":2,\"944\":1,\"949\":6,\"950\":2,\"955\":1,\"961\":1,\"975\":1,\"986\":2,\"988\":1,\"991\":1,\"1000\":1,\"1052\":2,\"1053\":4,\"1054\":3,\"1055\":2,\"1056\":3,\"1057\":3,\"1060\":1,\"1072\":2,\"1074\":1,\"1075\":2,\"1076\":1,\"1077\":1,\"1079\":3,\"1081\":1,\"1084\":2,\"1085\":1,\"1091\":2,\"1095\":1,\"1099\":3,\"1102\":1,\"1105\":3,\"1118\":5,\"1120\":1,\"1123\":2,\"1124\":2,\"1125\":1,\"1126\":1,\"1130\":3,\"1143\":2,\"1145\":2,\"1153\":2,\"1161\":1,\"1185\":1,\"1186\":1,\"1189\":4,\"1192\":1,\"1196\":1,\"1201\":2,\"1202\":5,\"1203\":4,\"1206\":2,\"1207\":1,\"1208\":2,\"1209\":1,\"1212\":4,\"1216\":2,\"1217\":3,\"1219\":4,\"1221\":1,\"1226\":1,\"1228\":2,\"1231\":3,\"1244\":1,\"1259\":1,\"1269\":1,\"1278\":1,\"1279\":1,\"1355\":1,\"1367\":1,\"1376\":1,\"1381\":2,\"1385\":1,\"1386\":4,\"1388\":4,\"1389\":2,\"1405\":4,\"1418\":1,\"1419\":1,\"1421\":1,\"1425\":1,\"1449\":1,\"1474\":2,\"1475\":1,\"1476\":2,\"1479\":2,\"1481\":4,\"1483\":5,\"1485\":2,\"1486\":1,\"1487\":3,\"1490\":1,\"1491\":1,\"1492\":1,\"1494\":1,\"1495\":1,\"1496\":1,\"1497\":2,\"1498\":3,\"1499\":4,\"1501\":6,\"1507\":1,\"1508\":1,\"1509\":3,\"1515\":1,\"1534\":2,\"1536\":1,\"1542\":1,\"1545\":3,\"1553\":1,\"1573\":1,\"1591\":2,\"1602\":2,\"1607\":1,\"1611\":1,\"1620\":1,\"1623\":20}}],[\"ifdef\",{\"1\":{\"1528\":1,\"1566\":1,\"1573\":1}}],[\"ifft\",{\"1\":{\"1202\":1}}],[\"iface\",{\"1\":{\"1145\":1}}],[\"ifndef\",{\"1\":{\"706\":1,\"1402\":1,\"1449\":1}}],[\"ifle\",{\"1\":{\"664\":1}}],[\"if\",{\"1\":{\"6\":1,\"8\":2,\"9\":7,\"10\":5,\"11\":5,\"12\":2,\"13\":3,\"14\":2,\"15\":10,\"19\":3,\"20\":4,\"21\":4,\"23\":1,\"25\":2,\"26\":1,\"30\":1,\"31\":1,\"32\":2,\"33\":4,\"34\":3,\"35\":4,\"36\":1,\"42\":3,\"45\":1,\"47\":12,\"49\":3,\"51\":5,\"52\":4,\"54\":4,\"56\":3,\"57\":3,\"59\":4,\"61\":5,\"62\":1,\"64\":1,\"74\":6,\"75\":4,\"76\":3,\"77\":2,\"79\":2,\"80\":1,\"84\":1,\"85\":3,\"86\":3,\"87\":1,\"88\":6,\"89\":2,\"90\":1,\"91\":6,\"92\":5,\"95\":1,\"96\":1,\"97\":2,\"98\":1,\"102\":3,\"103\":2,\"108\":1,\"118\":3,\"120\":1,\"122\":2,\"124\":2,\"130\":6,\"132\":2,\"134\":1,\"136\":2,\"138\":2,\"150\":5,\"152\":2,\"153\":5,\"154\":3,\"156\":2,\"157\":1,\"159\":2,\"160\":3,\"165\":4,\"166\":2,\"169\":1,\"177\":4,\"178\":1,\"183\":1,\"184\":3,\"185\":1,\"186\":2,\"234\":1,\"236\":4,\"243\":2,\"245\":7,\"250\":1,\"255\":3,\"256\":1,\"285\":1,\"288\":3,\"289\":5,\"293\":1,\"307\":1,\"313\":1,\"314\":3,\"326\":1,\"339\":1,\"341\":1,\"343\":1,\"344\":1,\"347\":2,\"354\":2,\"356\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":3,\"385\":1,\"387\":2,\"388\":1,\"397\":2,\"400\":1,\"401\":3,\"402\":1,\"403\":1,\"406\":1,\"420\":1,\"421\":1,\"422\":2,\"424\":4,\"425\":1,\"426\":3,\"427\":2,\"431\":2,\"432\":8,\"433\":1,\"434\":1,\"459\":3,\"460\":2,\"465\":11,\"468\":1,\"479\":1,\"480\":4,\"481\":3,\"486\":3,\"493\":3,\"495\":2,\"496\":2,\"499\":9,\"507\":1,\"508\":1,\"509\":1,\"510\":1,\"511\":4,\"517\":1,\"548\":2,\"549\":1,\"556\":1,\"557\":2,\"558\":1,\"559\":4,\"562\":1,\"565\":1,\"573\":1,\"600\":1,\"664\":1,\"673\":1,\"691\":1,\"693\":3,\"702\":1,\"703\":12,\"706\":1,\"707\":4,\"793\":2,\"843\":2,\"850\":1,\"856\":1,\"858\":1,\"897\":1,\"923\":1,\"925\":1,\"931\":2,\"975\":2,\"1000\":1,\"1060\":2,\"1072\":1,\"1075\":1,\"1094\":1,\"1095\":1,\"1099\":1,\"1124\":1,\"1185\":3,\"1186\":4,\"1189\":3,\"1192\":1,\"1212\":1,\"1216\":2,\"1217\":1,\"1219\":5,\"1221\":2,\"1228\":1,\"1269\":1,\"1278\":1,\"1294\":2,\"1295\":1,\"1299\":2,\"1301\":3,\"1312\":1,\"1313\":1,\"1314\":2,\"1315\":1,\"1316\":10,\"1320\":10,\"1328\":2,\"1329\":1,\"1333\":15,\"1344\":2,\"1345\":1,\"1365\":3,\"1366\":2,\"1376\":1,\"1381\":2,\"1388\":1,\"1403\":1,\"1405\":3,\"1406\":1,\"1418\":1,\"1424\":1,\"1426\":1,\"1427\":1,\"1434\":1,\"1487\":3,\"1494\":2,\"1495\":1,\"1498\":1,\"1507\":1,\"1518\":5,\"1519\":2,\"1520\":8,\"1522\":1,\"1524\":1,\"1526\":1,\"1534\":1,\"1537\":1,\"1542\":4,\"1543\":3,\"1544\":1,\"1545\":15,\"1571\":2,\"1573\":3,\"1591\":1,\"1594\":1,\"1595\":3,\"1596\":7,\"1600\":1,\"1602\":3,\"1606\":3,\"1607\":7,\"1608\":2,\"1609\":1,\"1627\":1}}],[\"fn\",{\"1\":{\"1551\":45,\"1567\":5,\"1573\":2}}],[\"fvp\",{\"1\":{\"1479\":1,\"1483\":3,\"1485\":2,\"1492\":1}}],[\"fvps\",{\"1\":{\"1476\":2,\"1481\":1,\"1496\":1}}],[\"f8\",{\"1\":{\"1463\":3}}],[\"f8c9c3\",{\"1\":{\"1463\":1}}],[\"f80\",{\"1\":{\"692\":1}}],[\"fy=0\",{\"1\":{\"1189\":1}}],[\"fx=0\",{\"1\":{\"1189\":1}}],[\"fmcw基于反射物的距离分布分离rf反射信号\",{\"1\":{\"1134\":1}}],[\"fk\",{\"1\":{\"865\":1}}],[\"ftp通信中使用两条tcp连接\",{\"1\":{\"992\":1}}],[\"ftps\",{\"1\":{\"992\":1}}],[\"ftp\",{\"0\":{\"992\":1},\"1\":{\"785\":1,\"977\":2,\"992\":4}}],[\"fw\",{\"1\":{\"719\":1,\"1380\":3}}],[\"f与\",{\"1\":{\"687\":1}}],[\"fds\",{\"1\":{\"1320\":1,\"1333\":1}}],[\"fd\",{\"1\":{\"954\":1,\"955\":6,\"956\":7,\"962\":1,\"1307\":4,\"1320\":2}}],[\"fdx\",{\"1\":{\"687\":1}}],[\"fdel\",{\"1\":{\"408\":1}}],[\"fdel=none\",{\"1\":{\"408\":1}}],[\"fpen\",{\"1\":{\"1491\":1}}],[\"fpn\",{\"1\":{\"1022\":4}}],[\"fputs\",{\"1\":{\"741\":1}}],[\"fpmad\",{\"1\":{\"692\":1}}],[\"fp\",{\"1\":{\"692\":5,\"741\":2,\"1221\":6}}],[\"fpgas\",{\"1\":{\"1508\":1}}],[\"fpga\",{\"1\":{\"643\":2}}],[\"fpc\",{\"0\":{\"589\":1},\"1\":{\"543\":14,\"544\":1,\"558\":6,\"562\":3,\"589\":2,\"828\":1}}],[\"fff\",{\"1\":{\"892\":1}}],[\"ffft\",{\"1\":{\"164\":1}}],[\"ff02\",{\"1\":{\"609\":2}}],[\"ff0000\",{\"1\":{\"898\":1}}],[\"ff00\",{\"1\":{\"609\":1}}],[\"fc\",{\"1\":{\"1463\":3}}],[\"fc01d089\",{\"1\":{\"1463\":1}}],[\"fc2\",{\"1\":{\"1186\":6}}],[\"fc1\",{\"1\":{\"1186\":10}}],[\"fcntl\",{\"1\":{\"956\":3}}],[\"fcm\",{\"0\":{\"555\":1},\"1\":{\"545\":2,\"552\":1,\"556\":2,\"562\":5}}],[\"fcvtz\",{\"0\":{\"519\":1}}],[\"fgets\",{\"1\":{\"741\":1}}],[\"fget\",{\"1\":{\"408\":1}}],[\"fget=none\",{\"1\":{\"408\":1}}],[\"fssl\",{\"1\":{\"1635\":1}}],[\"fset\",{\"1\":{\"408\":1}}],[\"fset=none\",{\"1\":{\"408\":1}}],[\"fseek\",{\"1\":{\"361\":2}}],[\"fs\",{\"1\":{\"289\":6,\"957\":1,\"1551\":3,\"1605\":3}}],[\"flipinx\",{\"1\":{\"944\":1}}],[\"flight\",{\"1\":{\"397\":1}}],[\"flash\",{\"1\":{\"1501\":6}}],[\"flask\",{\"0\":{\"796\":1,\"847\":1,\"850\":1,\"857\":1,\"858\":1},\"1\":{\"796\":2,\"798\":1,\"847\":2,\"848\":5,\"849\":1,\"850\":1,\"851\":1,\"858\":3,\"888\":1,\"889\":1,\"892\":1,\"1052\":11,\"1053\":5,\"1054\":2}}],[\"flat\",{\"1\":{\"1060\":1,\"1308\":1,\"1345\":1}}],[\"flack\",{\"1\":{\"848\":1}}],[\"flavor\",{\"1\":{\"572\":1,\"780\":1}}],[\"flags=\",{\"1\":{\"703\":1}}],[\"flags\",{\"1\":{\"664\":3,\"692\":1,\"956\":1,\"1219\":16,\"1320\":5,\"1333\":11,\"1345\":3,\"1418\":4,\"1425\":5,\"1427\":4,\"1464\":2,\"1521\":1,\"1522\":1,\"1570\":3}}],[\"flag\",{\"0\":{\"1522\":1},\"1\":{\"227\":3,\"514\":1,\"956\":3,\"1056\":1,\"1219\":1,\"1507\":2,\"1520\":4,\"1521\":3,\"1522\":2,\"1524\":1,\"1526\":3}}],[\"flush\",{\"1\":{\"595\":1,\"1216\":1,\"1307\":2}}],[\"flushed\",{\"0\":{\"1522\":1},\"1\":{\"548\":1,\"1520\":1,\"1522\":2}}],[\"flushing\",{\"1\":{\"548\":1}}],[\"flood\",{\"1\":{\"988\":2}}],[\"flood攻击\",{\"1\":{\"988\":1}}],[\"floor\",{\"1\":{\"25\":1,\"28\":2}}],[\"floats\",{\"1\":{\"1221\":10}}],[\"float32\",{\"1\":{\"1142\":2,\"1185\":2,\"1212\":5,\"1217\":2}}],[\"floating\",{\"1\":{\"237\":1,\"245\":1,\"573\":1,\"600\":1,\"1485\":1,\"1491\":1}}],[\"float\",{\"1\":{\"130\":5,\"132\":2,\"692\":1,\"1219\":1}}],[\"flowers\",{\"1\":{\"1219\":3}}],[\"flower\",{\"1\":{\"397\":1}}],[\"flow\",{\"0\":{\"988\":1,\"1514\":1},\"1\":{\"78\":1,\"397\":1,\"559\":4,\"975\":1}}],[\"feed\",{\"1\":{\"1142\":2,\"1185\":1,\"1212\":6}}],[\"feedback\",{\"1\":{\"558\":1}}],[\"fe00\",{\"1\":{\"609\":1}}],[\"february\",{\"1\":{\"892\":1,\"907\":1}}],[\"feb\",{\"1\":{\"566\":1}}],[\"feat\",{\"1\":{\"1542\":2,\"1545\":2}}],[\"feature\",{\"1\":{\"1084\":1,\"1428\":2,\"1536\":1}}],[\"features\",{\"0\":{\"1085\":1,\"1428\":1},\"1\":{\"271\":2,\"692\":1,\"1084\":1,\"1142\":1,\"1202\":1,\"1428\":5,\"1508\":1}}],[\"featuring\",{\"1\":{\"562\":1}}],[\"feasible\",{\"1\":{\"543\":1}}],[\"few\",{\"1\":{\"227\":1,\"235\":2,\"546\":1,\"552\":1,\"557\":1,\"784\":1,\"891\":1}}],[\"fetch之后紧跟着执行了git\",{\"1\":{\"1253\":1}}],[\"fetch命令会拉取本地没有的远程最新更改数据\",{\"1\":{\"1253\":1}}],[\"fetchusappoolenabledpropwithmininterval\",{\"1\":{\"702\":1}}],[\"fetching\",{\"1\":{\"243\":1}}],[\"fetch\",{\"1\":{\"210\":1,\"236\":2,\"243\":1,\"245\":4,\"548\":1,\"550\":1,\"551\":2,\"552\":1,\"557\":2,\"593\":2,\"603\":1,\"687\":2,\"785\":1,\"1241\":1,\"1250\":2,\"1253\":1}}],[\"fetched\",{\"1\":{\"194\":1,\"237\":1,\"552\":2,\"562\":1}}],[\"fucntion\",{\"1\":{\"545\":1}}],[\"fundamental\",{\"1\":{\"675\":1,\"1355\":1}}],[\"fun1\",{\"1\":{\"418\":2}}],[\"func2\",{\"1\":{\"372\":1}}],[\"func1\",{\"1\":{\"372\":1,\"1463\":2}}],[\"func7\",{\"1\":{\"245\":1}}],[\"func3\",{\"1\":{\"245\":1}}],[\"func\",{\"1\":{\"245\":1,\"379\":1,\"691\":1,\"1573\":1}}],[\"functools\",{\"1\":{\"173\":1,\"185\":1,\"398\":4}}],[\"function如何理解这个\",{\"1\":{\"1573\":1}}],[\"functions\",{\"0\":{\"1420\":1},\"1\":{\"245\":1,\"285\":4,\"321\":1,\"850\":1,\"905\":1,\"1056\":1,\"1057\":1,\"1486\":1,\"1492\":1,\"1499\":1,\"1501\":2,\"1508\":1,\"1573\":1}}],[\"functionality\",{\"1\":{\"1485\":1}}],[\"functional\",{\"1\":{\"237\":1}}],[\"function\",{\"0\":{\"172\":1,\"293\":1,\"389\":1,\"1514\":1},\"1\":{\"25\":1,\"236\":1,\"245\":1,\"285\":3,\"288\":1,\"309\":1,\"321\":1,\"340\":1,\"341\":1,\"379\":3,\"380\":1,\"393\":5,\"408\":5,\"562\":1,\"600\":1,\"691\":4,\"692\":1,\"693\":5,\"903\":1,\"906\":1,\"923\":3,\"926\":2,\"931\":2,\"933\":2,\"939\":1,\"941\":3,\"1052\":1,\"1055\":2,\"1056\":4,\"1057\":1,\"1202\":1,\"1216\":2,\"1219\":1,\"1328\":3,\"1365\":1,\"1422\":1,\"1425\":1,\"1449\":1,\"1483\":1,\"1499\":3,\"1516\":1,\"1553\":1,\"1554\":1,\"1573\":2,\"1611\":1,\"1613\":2}}],[\"future\",{\"1\":{\"321\":1,\"541\":1,\"542\":1,\"546\":1,\"566\":1,\"843\":1,\"1054\":1,\"1623\":1}}],[\"futures=true\",{\"1\":{\"288\":1}}],[\"further\",{\"1\":{\"236\":1,\"1487\":1,\"1492\":1,\"1623\":1}}],[\"furthermore\",{\"1\":{\"236\":1}}],[\"fully\",{\"1\":{\"898\":1,\"1385\":2}}],[\"fullloader\",{\"1\":{\"388\":1}}],[\"full\",{\"0\":{\"200\":1,\"907\":1},\"1\":{\"199\":1,\"200\":1,\"235\":1,\"236\":1,\"256\":1,\"558\":1,\"559\":1,\"599\":1,\"1492\":1,\"1623\":1}}],[\"friends\",{\"1\":{\"1623\":1}}],[\"friendly\",{\"1\":{\"785\":1}}],[\"friendlyhello\",{\"1\":{\"621\":2,\"622\":1}}],[\"frist\",{\"1\":{\"1077\":1}}],[\"frm\",{\"1\":{\"814\":1}}],[\"fraud\",{\"1\":{\"1623\":1}}],[\"fragment\",{\"1\":{\"981\":1}}],[\"frappe\",{\"1\":{\"888\":1}}],[\"fraction\",{\"1\":{\"558\":1,\"573\":1,\"600\":1,\"1509\":1}}],[\"frames\",{\"1\":{\"1124\":1}}],[\"framework\",{\"0\":{\"1303\":1},\"1\":{\"888\":1,\"1298\":1,\"1303\":1,\"1531\":1,\"1532\":1,\"1534\":1,\"1613\":1},\"2\":{\"867\":1}}],[\"frameworks\",{\"0\":{\"1652\":1},\"1\":{\"702\":2,\"703\":1},\"2\":{\"845\":1,\"866\":1,\"886\":1}}],[\"frame\",{\"1\":{\"331\":1,\"664\":1,\"692\":1,\"1189\":17,\"1463\":2}}],[\"frequency\",{\"1\":{\"1125\":1,\"1131\":1,\"1206\":4,\"1498\":1,\"1536\":2}}],[\"frequence\",{\"1\":{\"1124\":1}}],[\"frequent\",{\"1\":{\"237\":1}}],[\"frequently\",{\"1\":{\"194\":1,\"237\":1,\"599\":1,\"1118\":1}}],[\"freezable\",{\"1\":{\"1316\":2}}],[\"freeze\",{\"1\":{\"855\":1}}],[\"freebuffer\",{\"1\":{\"1310\":1}}],[\"freescale\",{\"1\":{\"1209\":1}}],[\"freed\",{\"1\":{\"509\":2}}],[\"free\",{\"0\":{\"1315\":1},\"1\":{\"216\":1,\"270\":2,\"676\":8,\"961\":3,\"962\":2,\"1080\":1,\"1310\":1,\"1315\":3,\"1340\":3,\"1341\":5,\"1487\":3}}],[\"fro\",{\"1\":{\"775\":1}}],[\"frond\",{\"1\":{\"542\":1}}],[\"frontmatter\",{\"1\":{\"933\":1}}],[\"frontend\",{\"0\":{\"1653\":1},\"1\":{\"1054\":3},\"2\":{\"893\":1,\"894\":1,\"899\":1,\"900\":1,\"913\":1,\"914\":1,\"919\":1,\"920\":1,\"945\":1,\"946\":1}}],[\"front\",{\"1\":{\"0\":1,\"508\":2,\"543\":2,\"549\":1,\"564\":1}}],[\"fromfile\",{\"1\":{\"1221\":2}}],[\"fromreflectedfield\",{\"1\":{\"708\":1}}],[\"fromreflectedmethod\",{\"1\":{\"708\":1}}],[\"fromkeys\",{\"1\":{\"301\":1}}],[\"from\",{\"0\":{\"410\":1},\"1\":{\"49\":1,\"74\":3,\"146\":1,\"149\":1,\"173\":1,\"185\":2,\"193\":1,\"194\":3,\"203\":1,\"204\":1,\"212\":1,\"227\":4,\"235\":2,\"236\":2,\"237\":4,\"245\":5,\"256\":1,\"261\":1,\"309\":1,\"315\":1,\"341\":6,\"358\":1,\"359\":1,\"360\":1,\"387\":2,\"398\":1,\"406\":1,\"410\":1,\"453\":2,\"511\":3,\"543\":2,\"547\":1,\"548\":3,\"550\":1,\"559\":1,\"562\":1,\"580\":1,\"599\":1,\"600\":1,\"664\":1,\"707\":2,\"774\":2,\"785\":1,\"796\":3,\"798\":2,\"804\":1,\"807\":1,\"810\":1,\"819\":1,\"836\":1,\"843\":2,\"847\":1,\"850\":1,\"851\":1,\"855\":2,\"858\":4,\"890\":1,\"897\":1,\"923\":1,\"941\":1,\"975\":1,\"1052\":1,\"1055\":1,\"1071\":1,\"1099\":1,\"1110\":1,\"1118\":1,\"1123\":1,\"1124\":1,\"1127\":1,\"1130\":1,\"1161\":1,\"1185\":1,\"1186\":1,\"1189\":1,\"1202\":3,\"1203\":1,\"1204\":2,\"1207\":1,\"1212\":1,\"1216\":1,\"1221\":3,\"1312\":1,\"1314\":1,\"1328\":1,\"1342\":1,\"1344\":6,\"1345\":2,\"1380\":5,\"1381\":1,\"1388\":6,\"1389\":1,\"1405\":2,\"1419\":1,\"1422\":1,\"1469\":1,\"1474\":1,\"1475\":1,\"1479\":1,\"1481\":1,\"1483\":16,\"1485\":3,\"1486\":1,\"1487\":3,\"1493\":1,\"1494\":1,\"1495\":1,\"1496\":1,\"1499\":1,\"1501\":2,\"1545\":1,\"1602\":4,\"1609\":1,\"1623\":5}}],[\"fops\",{\"1\":{\"1307\":6}}],[\"fopen\",{\"1\":{\"361\":1,\"741\":1}}],[\"foxmail\",{\"1\":{\"1075\":1}}],[\"font\",{\"1\":{\"705\":1,\"1400\":1}}],[\"foor\",{\"1\":{\"1231\":1}}],[\"foo\",{\"1\":{\"421\":4,\"422\":5,\"434\":2,\"613\":2,\"664\":11,\"1179\":1}}],[\"folder\",{\"0\":{\"349\":1},\"1\":{\"349\":2,\"352\":1,\"1072\":1,\"1079\":1,\"1419\":2,\"1611\":1}}],[\"followinng\",{\"1\":{\"794\":1}}],[\"following\",{\"1\":{\"361\":1,\"492\":1,\"573\":1,\"600\":1,\"1201\":1,\"1206\":1,\"1421\":1,\"1481\":1,\"1483\":1,\"1487\":2}}],[\"followed\",{\"1\":{\"582\":1,\"675\":1,\"1507\":1}}],[\"follow\",{\"1\":{\"236\":1,\"361\":1,\"620\":1,\"1075\":1,\"1099\":1,\"1244\":1}}],[\"follows\",{\"1\":{\"194\":1,\"245\":1,\"1072\":1,\"1207\":1,\"1208\":1,\"1482\":1,\"1487\":1}}],[\"focusing\",{\"1\":{\"1623\":1}}],[\"focused\",{\"1\":{\"1623\":1}}],[\"focus>\",{\"1\":{\"941\":1}}],[\"focus`\",{\"1\":{\"941\":1}}],[\"focus\",{\"1\":{\"237\":1,\"245\":1,\"941\":4,\"1055\":1}}],[\"foundation\",{\"1\":{\"1623\":1}}],[\"founded\",{\"1\":{\"1623\":1}}],[\"found\",{\"1\":{\"203\":1,\"204\":1,\"289\":1,\"293\":4,\"308\":1,\"558\":1,\"559\":1,\"562\":1,\"580\":1,\"1099\":1,\"1244\":1,\"1418\":1,\"1426\":3,\"1487\":1,\"1490\":1,\"1497\":1,\"1623\":1}}],[\"fourth\",{\"1\":{\"751\":1}}],[\"four\",{\"1\":{\"194\":3,\"245\":1,\"559\":1,\"580\":2,\"583\":1,\"970\":1,\"1120\":1,\"1509\":1}}],[\"fordwarding\",{\"1\":{\"1381\":1}}],[\"forwaring\",{\"1\":{\"1381\":1}}],[\"forwarding\",{\"0\":{\"1380\":1},\"1\":{\"1380\":3,\"1381\":4}}],[\"forward\",{\"1\":{\"225\":1,\"543\":2,\"558\":2,\"589\":1,\"1252\":1}}],[\"forwading\",{\"1\":{\"1380\":1}}],[\"forgotten\",{\"1\":{\"1241\":1}}],[\"forget\",{\"1\":{\"820\":1,\"1113\":1}}],[\"for=\",{\"1\":{\"944\":1}}],[\"foreign\",{\"1\":{\"1623\":1}}],[\"foreword\",{\"0\":{\"1617\":1}}],[\"foreground\",{\"1\":{\"1299\":1}}],[\"foregin\",{\"1\":{\"865\":1}}],[\"foreach\",{\"0\":{\"903\":1},\"1\":{\"903\":1}}],[\"fork\",{\"0\":{\"738\":1},\"1\":{\"738\":5,\"739\":2,\"1099\":3,\"1293\":1,\"1374\":1}}],[\"forcing\",{\"1\":{\"602\":1}}],[\"forced\",{\"1\":{\"1590\":1}}],[\"force\",{\"1\":{\"176\":1,\"1277\":2,\"1424\":1,\"1518\":2,\"1528\":2,\"1545\":5}}],[\"formual\",{\"0\":{\"1180\":1}}],[\"formula\",{\"0\":{\"1105\":1}}],[\"forms\",{\"1\":{\"245\":1,\"1053\":1}}],[\"format选择autoproxy\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"formatid\",{\"1\":{\"931\":1}}],[\"formatting\",{\"0\":{\"906\":1}}],[\"formatted\",{\"1\":{\"794\":1}}],[\"format\",{\"0\":{\"308\":1,\"325\":1},\"1\":{\"245\":1,\"288\":2,\"289\":4,\"308\":6,\"325\":2,\"347\":2,\"349\":1,\"675\":1,\"676\":1,\"692\":1,\"798\":1,\"1052\":1,\"1056\":1,\"1075\":1,\"1113\":2,\"1143\":1,\"1192\":2,\"1219\":3,\"1226\":1,\"1463\":3,\"1483\":1}}],[\"formats\",{\"1\":{\"235\":1}}],[\"form\",{\"1\":{\"182\":1,\"234\":1,\"245\":1,\"559\":1,\"780\":1,\"890\":1,\"940\":1,\"1099\":1,\"1203\":1,\"1216\":1,\"1237\":1}}],[\"for\",{\"0\":{\"236\":1,\"509\":1,\"748\":1,\"933\":1,\"1231\":1},\"1\":{\"6\":1,\"8\":1,\"9\":1,\"10\":4,\"11\":1,\"12\":1,\"13\":2,\"14\":2,\"15\":1,\"30\":1,\"33\":1,\"34\":1,\"36\":1,\"42\":1,\"47\":5,\"54\":1,\"59\":6,\"61\":1,\"74\":7,\"75\":4,\"76\":2,\"77\":3,\"79\":6,\"80\":5,\"84\":1,\"85\":3,\"86\":3,\"87\":2,\"88\":3,\"89\":1,\"90\":3,\"91\":1,\"92\":2,\"96\":2,\"98\":1,\"102\":6,\"103\":1,\"108\":4,\"118\":8,\"120\":4,\"122\":2,\"124\":2,\"125\":2,\"126\":2,\"130\":4,\"132\":3,\"134\":2,\"136\":2,\"138\":2,\"139\":3,\"147\":1,\"149\":5,\"150\":4,\"152\":4,\"153\":6,\"154\":4,\"155\":1,\"156\":1,\"157\":1,\"159\":2,\"160\":1,\"165\":2,\"177\":2,\"178\":2,\"183\":2,\"184\":3,\"186\":1,\"194\":3,\"195\":1,\"196\":1,\"197\":1,\"227\":6,\"234\":1,\"236\":8,\"237\":1,\"241\":1,\"243\":1,\"245\":6,\"253\":1,\"255\":3,\"256\":2,\"270\":2,\"285\":3,\"288\":1,\"289\":6,\"297\":1,\"298\":1,\"299\":1,\"307\":1,\"309\":2,\"313\":1,\"315\":2,\"317\":5,\"321\":1,\"329\":1,\"340\":4,\"343\":1,\"348\":2,\"355\":1,\"356\":2,\"358\":1,\"359\":1,\"360\":2,\"361\":6,\"387\":1,\"393\":1,\"396\":1,\"397\":1,\"401\":6,\"402\":1,\"420\":2,\"454\":3,\"455\":2,\"458\":1,\"465\":3,\"466\":1,\"467\":2,\"480\":7,\"481\":3,\"486\":1,\"492\":1,\"499\":1,\"509\":3,\"541\":1,\"543\":3,\"546\":1,\"549\":1,\"551\":1,\"552\":10,\"556\":4,\"557\":5,\"558\":5,\"559\":2,\"562\":3,\"566\":1,\"568\":1,\"584\":1,\"599\":1,\"600\":1,\"604\":1,\"606\":2,\"662\":2,\"677\":1,\"691\":2,\"693\":2,\"707\":5,\"747\":1,\"748\":3,\"776\":1,\"780\":1,\"785\":1,\"792\":1,\"797\":1,\"850\":2,\"851\":1,\"892\":3,\"896\":1,\"897\":1,\"933\":4,\"939\":1,\"942\":3,\"975\":2,\"986\":2,\"988\":2,\"1054\":3,\"1055\":1,\"1056\":1,\"1071\":1,\"1072\":1,\"1075\":2,\"1078\":1,\"1079\":1,\"1095\":1,\"1124\":1,\"1125\":1,\"1143\":3,\"1145\":1,\"1153\":2,\"1185\":1,\"1189\":5,\"1208\":1,\"1212\":4,\"1217\":3,\"1219\":2,\"1221\":1,\"1226\":1,\"1228\":2,\"1231\":4,\"1259\":1,\"1269\":1,\"1278\":1,\"1279\":1,\"1284\":1,\"1287\":2,\"1316\":5,\"1320\":1,\"1329\":1,\"1344\":1,\"1365\":1,\"1405\":5,\"1418\":2,\"1419\":1,\"1424\":1,\"1448\":1,\"1449\":1,\"1474\":2,\"1476\":1,\"1483\":3,\"1485\":1,\"1487\":1,\"1491\":1,\"1492\":2,\"1493\":2,\"1494\":1,\"1495\":2,\"1496\":1,\"1497\":1,\"1498\":3,\"1499\":1,\"1501\":3,\"1507\":2,\"1508\":5,\"1509\":5,\"1524\":1,\"1534\":2,\"1537\":1,\"1553\":1,\"1590\":1,\"1591\":1,\"1592\":3,\"1597\":1,\"1602\":2,\"1606\":2,\"1607\":2,\"1608\":1,\"1611\":1,\"1620\":4,\"1623\":4}}],[\"fakereply\",{\"1\":{\"1333\":2}}],[\"fakeroot\",{\"1\":{\"712\":1}}],[\"famous\",{\"1\":{\"1130\":1}}],[\"family\",{\"1\":{\"949\":2,\"1486\":1,\"1492\":1,\"1499\":1,\"1623\":1}}],[\"family4\",{\"1\":{\"562\":1}}],[\"fade\",{\"0\":{\"1119\":1},\"1\":{\"1118\":1}}],[\"facing\",{\"1\":{\"1623\":1}}],[\"faces\",{\"1\":{\"1153\":1,\"1189\":2}}],[\"face\",{\"0\":{\"1158\":1,\"1162\":1},\"1\":{\"1060\":1,\"1150\":1,\"1153\":1,\"1189\":19}}],[\"fact\",{\"1\":{\"243\":1}}],[\"factors\",{\"1\":{\"546\":1}}],[\"factory\",{\"1\":{\"383\":1}}],[\"factor\",{\"1\":{\"237\":1}}],[\"fatal\",{\"1\":{\"706\":1,\"707\":3,\"1145\":1,\"1403\":1,\"1405\":3,\"1426\":1,\"1448\":1}}],[\"father\",{\"1\":{\"424\":12}}],[\"fair\",{\"1\":{\"1607\":2}}],[\"fairly\",{\"1\":{\"552\":1,\"564\":1,\"599\":1}}],[\"failure\",{\"1\":{\"1118\":1,\"1320\":1,\"1483\":1,\"1494\":1}}],[\"fail\",{\"1\":{\"763\":1}}],[\"fails\",{\"1\":{\"763\":2,\"1602\":1,\"1623\":1}}],[\"failed\",{\"1\":{\"702\":2,\"707\":3,\"1052\":1,\"1328\":2,\"1333\":2,\"1365\":1,\"1405\":3,\"1448\":1,\"1449\":1,\"1487\":1,\"1606\":1,\"1607\":1,\"1609\":1}}],[\"fashion\",{\"1\":{\"549\":1}}],[\"fastexit\",{\"1\":{\"1376\":1}}],[\"faster\",{\"1\":{\"271\":1,\"289\":1,\"1021\":1,\"1080\":1,\"1151\":1,\"1189\":1}}],[\"fastboot\",{\"1\":{\"1285\":3}}],[\"fastly\",{\"1\":{\"1244\":1}}],[\"fastsubstring\",{\"1\":{\"706\":1,\"1402\":1}}],[\"fast\",{\"1\":{\"706\":9,\"758\":1,\"975\":3,\"1021\":1,\"1151\":1,\"1221\":1,\"1252\":1,\"1402\":8,\"1403\":1,\"1509\":1}}],[\"fastnative\",{\"1\":{\"705\":2,\"1393\":1,\"1400\":2}}],[\"fastmath\",{\"1\":{\"198\":2}}],[\"fault\",{\"0\":{\"259\":1}}],[\"fall\",{\"1\":{\"241\":1}}],[\"false代表bwr数据的read\",{\"1\":{\"1299\":1}}],[\"false问题\",{\"1\":{\"114\":1,\"115\":1}}],[\"false\",{\"1\":{\"9\":1,\"15\":4,\"30\":1,\"31\":1,\"51\":5,\"52\":3,\"75\":1,\"84\":1,\"90\":1,\"91\":2,\"112\":1,\"122\":4,\"138\":3,\"155\":1,\"156\":2,\"186\":1,\"293\":1,\"302\":1,\"303\":1,\"386\":1,\"400\":1,\"465\":6,\"495\":1,\"496\":1,\"692\":10,\"702\":1,\"703\":1,\"879\":2,\"892\":2,\"1109\":1,\"1111\":1,\"1293\":2,\"1296\":1,\"1299\":1,\"1320\":8,\"1333\":1,\"1366\":2,\"1521\":1,\"1524\":1,\"1591\":1}}],[\"farther\",{\"1\":{\"237\":1}}],[\"far\",{\"1\":{\"237\":1,\"1498\":1}}],[\"favor\",{\"1\":{\"155\":4}}],[\"favoriteflavor\",{\"1\":{\"927\":4}}],[\"favorite\",{\"1\":{\"155\":2}}],[\"f\",{\"1\":{\"94\":1,\"103\":4,\"104\":3,\"117\":4,\"120\":2,\"126\":5,\"128\":1,\"139\":8,\"164\":3,\"225\":1,\"285\":1,\"289\":2,\"298\":4,\"308\":1,\"355\":2,\"356\":3,\"358\":3,\"359\":3,\"360\":4,\"375\":1,\"410\":2,\"419\":2,\"612\":1,\"682\":1,\"691\":5,\"693\":6,\"719\":1,\"744\":2,\"751\":1,\"956\":2,\"960\":1,\"972\":1,\"978\":1,\"982\":2,\"1142\":1,\"1145\":1,\"1189\":7,\"1226\":1,\"1228\":1,\"1231\":2,\"1246\":1,\"1269\":1,\"1278\":1,\"1279\":1}}],[\"fiqs\",{\"1\":{\"1499\":1}}],[\"fiq\",{\"1\":{\"1483\":4,\"1485\":2}}],[\"firmware↩︎↩︎\",{\"1\":{\"1502\":1}}],[\"firmware\",{\"0\":{\"1493\":1,\"1494\":1,\"1496\":1,\"1501\":1},\"1\":{\"1145\":4,\"1473\":1,\"1474\":10,\"1476\":4,\"1487\":3,\"1491\":1,\"1501\":12,\"1502\":1}}],[\"firstuniqchar\",{\"1\":{\"480\":4}}],[\"first\",{\"0\":{\"785\":1},\"1\":{\"54\":2,\"70\":1,\"71\":1,\"155\":2,\"210\":1,\"211\":2,\"212\":1,\"236\":2,\"255\":1,\"340\":1,\"341\":1,\"445\":3,\"455\":1,\"458\":2,\"460\":3,\"480\":1,\"542\":1,\"543\":2,\"546\":1,\"550\":1,\"551\":1,\"552\":1,\"555\":1,\"557\":1,\"676\":2,\"703\":1,\"707\":1,\"1060\":1,\"1192\":1,\"1219\":3,\"1246\":1,\"1316\":2,\"1405\":1,\"1484\":1,\"1491\":1,\"1498\":1,\"1501\":1,\"1623\":1}}],[\"fig\",{\"1\":{\"559\":2}}],[\"figures\",{\"1\":{\"236\":1},\"2\":{\"894\":1}}],[\"figure\",{\"1\":{\"194\":1,\"204\":2,\"236\":2,\"342\":1,\"555\":1,\"590\":1,\"1207\":1}}],[\"fix\",{\"0\":{\"1112\":1},\"1\":{\"458\":1,\"1054\":1,\"1056\":1,\"1057\":2,\"1366\":1}}],[\"fixture\",{\"0\":{\"376\":1,\"377\":1},\"1\":{\"376\":1,\"377\":4,\"379\":4,\"381\":1,\"382\":3,\"383\":2}}],[\"fixed\",{\"1\":{\"245\":1,\"314\":1,\"1386\":1,\"1476\":1,\"1536\":1}}],[\"finer\",{\"1\":{\"1204\":1}}],[\"fine\",{\"1\":{\"1127\":1}}],[\"fin\",{\"1\":{\"978\":2,\"983\":4}}],[\"fingerprint\",{\"1\":{\"658\":2}}],[\"finite\",{\"1\":{\"543\":1,\"545\":1,\"555\":1}}],[\"finish\",{\"1\":{\"285\":2,\"1056\":1,\"1333\":6}}],[\"finished\",{\"1\":{\"285\":2,\"372\":3}}],[\"final\",{\"1\":{\"341\":1,\"673\":1,\"702\":2,\"703\":2,\"785\":1,\"1162\":2,\"1329\":1,\"1333\":1,\"1627\":1}}],[\"finally\",{\"1\":{\"270\":1,\"285\":1,\"548\":1,\"1328\":2}}],[\"findclass\",{\"1\":{\"708\":1}}],[\"findcontinuoussequence\",{\"1\":{\"165\":2}}],[\"findtarget\",{\"1\":{\"495\":3,\"496\":1}}],[\"findtargetsumways\",{\"1\":{\"124\":1}}],[\"finding\",{\"1\":{\"492\":1,\"580\":1}}],[\"findluslength\",{\"1\":{\"479\":1}}],[\"findall\",{\"1\":{\"411\":1}}],[\"findwords\",{\"1\":{\"343\":1}}],[\"finds\",{\"1\":{\"193\":1,\"194\":2}}],[\"findnumberswithsum\",{\"1\":{\"166\":1}}],[\"findmaxlength\",{\"1\":{\"159\":1}}],[\"findmaxform\",{\"1\":{\"120\":1}}],[\"findjudge\",{\"1\":{\"87\":1}}],[\"findorder\",{\"1\":{\"86\":1}}],[\"findpeakelement\",{\"1\":{\"33\":2}}],[\"find\",{\"0\":{\"33\":1,\"1426\":1,\"1608\":1},\"1\":{\"20\":2,\"21\":4,\"30\":1,\"87\":1,\"160\":2,\"193\":1,\"256\":2,\"285\":1,\"344\":1,\"357\":1,\"411\":1,\"467\":6,\"575\":1,\"599\":1,\"706\":1,\"759\":1,\"781\":2,\"792\":1,\"794\":2,\"796\":1,\"1076\":1,\"1189\":2,\"1403\":1,\"1426\":2,\"1591\":1,\"1607\":3,\"1608\":2,\"1610\":1}}],[\"filp\",{\"1\":{\"1307\":2,\"1313\":2,\"1314\":2}}],[\"filaa\",{\"1\":{\"1251\":1}}],[\"filr\",{\"1\":{\"741\":1}}],[\"fillvalue=fillvalue\",{\"1\":{\"314\":1}}],[\"fillvalue=\",{\"1\":{\"314\":1}}],[\"fillvalue=none\",{\"1\":{\"314\":1}}],[\"fill\",{\"1\":{\"314\":3,\"892\":1,\"950\":1,\"1099\":1}}],[\"filetype\",{\"1\":{\"1259\":2}}],[\"filea\",{\"1\":{\"1251\":1}}],[\"file2\",{\"1\":{\"1221\":3}}],[\"filepath\",{\"1\":{\"1216\":2}}],[\"filegroup\",{\"1\":{\"705\":1,\"1400\":1}}],[\"filesystem\",{\"1\":{\"1426\":1}}],[\"files\",{\"1\":{\"705\":2,\"751\":1,\"758\":1,\"759\":1,\"890\":1,\"957\":1,\"1054\":1,\"1075\":2,\"1079\":1,\"1161\":1,\"1179\":2,\"1216\":4,\"1219\":1,\"1400\":2,\"1419\":2,\"1422\":1,\"1424\":2,\"1440\":6,\"1441\":3,\"1448\":1}}],[\"fileno\",{\"1\":{\"956\":1,\"961\":1}}],[\"filenotfounderror\",{\"1\":{\"298\":1}}],[\"filename\",{\"1\":{\"692\":2,\"1192\":1,\"1216\":4}}],[\"filename=\",{\"1\":{\"323\":1,\"326\":1}}],[\"file=s\",{\"1\":{\"289\":3}}],[\"file=none\",{\"1\":{\"289\":1,\"315\":1,\"329\":1}}],[\"filed\",{\"1\":{\"245\":1,\"793\":1}}],[\"file\",{\"0\":{\"322\":1,\"323\":1,\"345\":1,\"346\":1,\"350\":1,\"361\":1,\"368\":1,\"410\":1,\"745\":1,\"1220\":1},\"1\":{\"236\":3,\"245\":3,\"285\":3,\"288\":3,\"289\":9,\"298\":10,\"315\":1,\"325\":1,\"326\":2,\"329\":1,\"331\":1,\"347\":3,\"348\":11,\"352\":1,\"354\":2,\"355\":3,\"356\":1,\"361\":16,\"387\":5,\"388\":4,\"410\":1,\"436\":1,\"557\":7,\"623\":2,\"658\":1,\"671\":1,\"707\":1,\"741\":5,\"747\":1,\"750\":1,\"751\":1,\"752\":1,\"758\":1,\"759\":1,\"776\":1,\"785\":4,\"794\":2,\"923\":1,\"944\":1,\"957\":1,\"998\":1,\"1052\":1,\"1056\":1,\"1075\":3,\"1076\":1,\"1084\":1,\"1105\":1,\"1145\":2,\"1179\":1,\"1196\":2,\"1216\":7,\"1221\":8,\"1237\":1,\"1241\":1,\"1247\":1,\"1307\":2,\"1313\":1,\"1314\":1,\"1406\":1,\"1448\":1,\"1453\":3,\"1459\":2,\"1460\":1,\"1463\":3,\"1464\":6,\"1487\":1},\"2\":{\"363\":1}}],[\"filters=45\",{\"1\":{\"1162\":1}}],[\"filters\",{\"0\":{\"931\":1},\"1\":{\"580\":1,\"606\":1,\"906\":1,\"931\":2,\"1142\":1,\"1161\":1}}],[\"filter\",{\"0\":{\"402\":1},\"1\":{\"102\":3,\"285\":2,\"401\":2,\"402\":3,\"906\":1,\"910\":1,\"931\":2,\"933\":1,\"1142\":4}}],[\"five\",{\"0\":{\"236\":1,\"1618\":1},\"1\":{\"236\":1,\"1124\":1,\"1476\":1}}],[\"fifo\",{\"0\":{\"741\":1},\"1\":{\"213\":1,\"508\":6,\"741\":5}}],[\"fields\",{\"1\":{\"197\":1,\"245\":2,\"557\":1,\"664\":1,\"671\":1,\"751\":1}}],[\"field\",{\"1\":{\"196\":1,\"203\":1,\"245\":3,\"576\":4,\"671\":3,\"675\":1,\"789\":1,\"793\":3,\"986\":1,\"1130\":1,\"1383\":1,\"1481\":1,\"1573\":1}}],[\"fi\",{\"0\":{\"1272\":1},\"1\":{\"126\":1,\"1201\":2,\"1202\":2,\"1203\":1,\"1204\":2,\"1207\":1,\"1208\":1,\"1209\":2}}],[\"fib\",{\"1\":{\"95\":3,\"96\":1,\"97\":5,\"98\":1}}],[\"fibonacci\",{\"0\":{\"94\":1},\"1\":{\"97\":1}}],[\"=1\",{\"1\":{\"1155\":1,\"1212\":1}}],[\"=>\",{\"1\":{\"909\":1,\"910\":2,\"923\":2,\"933\":2,\"1105\":1,\"1113\":1,\"1328\":1}}],[\"=r\",{\"1\":{\"502\":1,\"503\":1,\"510\":1}}],[\"=32\",{\"1\":{\"204\":1}}],[\"=x\",{\"1\":{\"180\":1}}],[\"=θ\",{\"1\":{\"177\":1}}],[\"=2t\",{\"1\":{\"177\":1}}],[\"=t\",{\"1\":{\"177\":1}}],[\"=o\",{\"1\":{\"176\":1}}],[\"=0\",{\"1\":{\"156\":1,\"1155\":1}}],[\"=maxf\",{\"1\":{\"128\":1}}],[\"=max\",{\"1\":{\"117\":1}}],[\"=f\",{\"1\":{\"94\":1,\"104\":1}}],[\"==\",{\"1\":{\"8\":1,\"9\":5,\"10\":2,\"11\":3,\"12\":1,\"13\":10,\"14\":2,\"15\":5,\"19\":1,\"20\":1,\"21\":1,\"31\":1,\"33\":2,\"42\":1,\"47\":2,\"61\":2,\"64\":1,\"74\":1,\"75\":4,\"76\":1,\"77\":1,\"84\":1,\"85\":2,\"86\":2,\"87\":2,\"88\":4,\"91\":1,\"92\":2,\"102\":2,\"108\":3,\"122\":1,\"124\":1,\"125\":1,\"130\":2,\"132\":1,\"138\":1,\"150\":4,\"152\":2,\"153\":4,\"154\":1,\"159\":1,\"160\":1,\"165\":1,\"166\":1,\"169\":2,\"184\":2,\"185\":1,\"186\":1,\"202\":1,\"245\":1,\"285\":2,\"288\":1,\"299\":2,\"313\":1,\"314\":3,\"326\":1,\"343\":3,\"344\":1,\"354\":1,\"358\":1,\"359\":1,\"360\":1,\"371\":1,\"372\":1,\"375\":1,\"377\":1,\"381\":1,\"382\":1,\"385\":1,\"387\":2,\"388\":1,\"401\":2,\"403\":1,\"420\":1,\"421\":1,\"422\":2,\"424\":4,\"425\":1,\"426\":3,\"427\":2,\"431\":1,\"432\":6,\"433\":1,\"434\":1,\"465\":7,\"466\":3,\"468\":1,\"478\":1,\"479\":1,\"480\":4,\"481\":3,\"496\":1,\"499\":3,\"687\":1,\"703\":6,\"706\":1,\"820\":1,\"843\":1,\"858\":1,\"955\":1,\"1094\":1,\"1185\":2,\"1189\":1,\"1212\":1,\"1219\":4,\"1221\":1,\"1251\":1,\"1269\":1,\"1278\":1,\"1299\":1,\"1301\":3,\"1312\":1,\"1316\":3,\"1320\":4,\"1333\":5,\"1403\":1,\"1544\":1,\"1545\":3,\"1571\":1,\"1591\":2,\"1606\":1,\"1607\":2}}],[\"=\",{\"1\":{\"6\":1,\"8\":5,\"9\":4,\"10\":5,\"11\":4,\"12\":2,\"13\":5,\"14\":4,\"15\":8,\"19\":6,\"20\":8,\"21\":10,\"22\":10,\"23\":6,\"25\":6,\"26\":4,\"27\":1,\"30\":6,\"31\":4,\"32\":10,\"33\":7,\"34\":11,\"35\":16,\"36\":6,\"42\":5,\"43\":4,\"46\":5,\"47\":11,\"49\":3,\"51\":1,\"52\":3,\"54\":6,\"57\":4,\"59\":5,\"60\":1,\"61\":6,\"62\":4,\"64\":8,\"74\":22,\"75\":10,\"76\":4,\"77\":7,\"79\":4,\"80\":6,\"81\":3,\"84\":4,\"85\":6,\"86\":12,\"87\":7,\"88\":19,\"89\":6,\"90\":16,\"91\":5,\"92\":7,\"96\":4,\"97\":4,\"98\":3,\"102\":14,\"103\":3,\"108\":12,\"114\":3,\"115\":3,\"118\":12,\"120\":8,\"122\":5,\"124\":13,\"125\":4,\"130\":7,\"132\":7,\"134\":2,\"136\":4,\"138\":6,\"146\":1,\"147\":8,\"149\":9,\"150\":21,\"151\":2,\"152\":6,\"153\":5,\"154\":5,\"155\":6,\"156\":6,\"157\":4,\"158\":1,\"159\":7,\"160\":9,\"164\":4,\"165\":8,\"166\":4,\"167\":1,\"168\":2,\"169\":8,\"173\":3,\"175\":1,\"177\":3,\"178\":3,\"180\":13,\"182\":2,\"183\":5,\"184\":7,\"185\":1,\"186\":5,\"194\":6,\"204\":1,\"220\":3,\"285\":10,\"288\":2,\"289\":15,\"293\":2,\"297\":4,\"298\":3,\"299\":5,\"301\":2,\"303\":2,\"304\":1,\"307\":4,\"308\":2,\"309\":3,\"313\":2,\"314\":1,\"315\":5,\"317\":3,\"326\":4,\"329\":2,\"331\":1,\"336\":3,\"339\":3,\"340\":10,\"341\":2,\"343\":8,\"344\":4,\"348\":2,\"349\":1,\"352\":1,\"354\":4,\"355\":1,\"356\":2,\"360\":1,\"367\":1,\"371\":1,\"372\":1,\"374\":3,\"375\":2,\"385\":1,\"387\":2,\"388\":2,\"390\":4,\"393\":1,\"396\":1,\"397\":1,\"398\":1,\"399\":2,\"400\":1,\"401\":2,\"402\":3,\"404\":2,\"408\":4,\"410\":2,\"411\":4,\"412\":4,\"418\":8,\"420\":3,\"421\":3,\"422\":5,\"424\":6,\"425\":3,\"427\":7,\"431\":5,\"432\":10,\"433\":3,\"434\":2,\"435\":2,\"436\":9,\"449\":1,\"453\":4,\"454\":2,\"455\":1,\"458\":6,\"459\":4,\"460\":9,\"465\":7,\"466\":3,\"467\":5,\"468\":2,\"478\":2,\"480\":6,\"481\":10,\"486\":7,\"493\":1,\"495\":1,\"496\":4,\"499\":27,\"502\":6,\"508\":4,\"509\":6,\"510\":1,\"664\":22,\"673\":1,\"681\":2,\"682\":5,\"691\":4,\"692\":31,\"693\":5,\"702\":1,\"703\":8,\"706\":2,\"707\":3,\"708\":2,\"741\":1,\"742\":1,\"743\":2,\"751\":3,\"760\":1,\"796\":3,\"797\":2,\"798\":4,\"819\":4,\"836\":1,\"843\":1,\"851\":1,\"858\":3,\"872\":2,\"892\":7,\"904\":3,\"905\":1,\"906\":7,\"907\":3,\"923\":2,\"925\":1,\"926\":3,\"927\":6,\"931\":3,\"933\":1,\"939\":1,\"941\":2,\"950\":1,\"955\":4,\"956\":3,\"961\":4,\"962\":1,\"972\":1,\"979\":4,\"980\":2,\"982\":5,\"985\":1,\"996\":1,\"1000\":1,\"1004\":1,\"1021\":1,\"1094\":9,\"1095\":1,\"1105\":1,\"1113\":4,\"1142\":14,\"1145\":1,\"1159\":4,\"1162\":6,\"1170\":1,\"1181\":1,\"1185\":37,\"1186\":24,\"1189\":9,\"1212\":65,\"1216\":5,\"1217\":13,\"1219\":2,\"1221\":4,\"1259\":1,\"1294\":1,\"1295\":2,\"1299\":7,\"1300\":1,\"1301\":7,\"1307\":16,\"1309\":2,\"1312\":1,\"1313\":1,\"1314\":6,\"1315\":1,\"1316\":7,\"1320\":19,\"1328\":8,\"1329\":9,\"1333\":33,\"1344\":5,\"1345\":1,\"1365\":8,\"1366\":3,\"1376\":1,\"1389\":2,\"1402\":1,\"1403\":1,\"1405\":3,\"1441\":1,\"1445\":2,\"1446\":1,\"1448\":1,\"1449\":1,\"1463\":4,\"1469\":1,\"1518\":2,\"1519\":2,\"1520\":2,\"1521\":1,\"1525\":1,\"1528\":2,\"1529\":1,\"1534\":3,\"1542\":3,\"1543\":4,\"1544\":3,\"1545\":4,\"1563\":4,\"1564\":4,\"1565\":3,\"1566\":5,\"1570\":1,\"1571\":3,\"1573\":7,\"1575\":4,\"1591\":1,\"1595\":3,\"1596\":7,\"1598\":6,\"1606\":2,\"1607\":6,\"1609\":1,\"1610\":1,\"1627\":1}}],[\"它用于将cpu置于rcu空闲状态\",{\"1\":{\"1585\":1}}],[\"它用于在\",{\"1\":{\"1159\":1}}],[\"它通过使用复制而不是传统的互斥量机制来实现对共享数据结构的并发安全\",{\"1\":{\"1583\":1}}],[\"它通过代理方式与远程的\",{\"1\":{\"1305\":1}}],[\"它对哪些事情感兴趣\",{\"1\":{\"1580\":1}}],[\"它对原子通知链的基本api又封装了一层\",{\"1\":{\"1577\":1}}],[\"它的返回值是一个指向\",{\"1\":{\"1523\":1}}],[\"它的文件名与该图片的文件名相同\",{\"1\":{\"1159\":1}}],[\"它使用\",{\"1\":{\"1453\":1}}],[\"它类似于\",{\"1\":{\"1345\":1}}],[\"它隐藏了与底层\",{\"1\":{\"1305\":1}}],[\"它实现了\",{\"1\":{\"1304\":1}}],[\"它将被加入到线程池中等待任务分配\",{\"1\":{\"1298\":1}}],[\"它将取消上一步甚至是上几步的计算\",{\"1\":{\"5\":1}}],[\"它既能保护用户数据机密性\",{\"1\":{\"1166\":1}}],[\"它不再是窗口滑动了\",{\"1\":{\"1153\":1}}],[\"它们是two\",{\"1\":{\"1151\":1}}],[\"它们可以在\",{\"1\":{\"562\":1}}],[\"它首先检测图像上面的关键点\",{\"1\":{\"1133\":1}}],[\"它传输较小功率的无线信号\",{\"1\":{\"1132\":1}}],[\"它是防止过多的包被发送到网络中\",{\"1\":{\"986\":1}}],[\"它是任何报文被丢弃在网络内的最长时间\",{\"1\":{\"983\":1}}],[\"它是一个将调用\",{\"1\":{\"951\":1}}],[\"它只是尽可能快地把分组从源节点送到目的节点\",{\"1\":{\"977\":1}}],[\"它在该服务器的生命周期内一直存在\",{\"1\":{\"952\":1}}],[\"它被假设为一个\",{\"1\":{\"951\":1}}],[\"它告诉内核在该结构中究竟存储了多少信息\",{\"1\":{\"950\":1}}],[\"它告诉内核该结构的大小\",{\"1\":{\"950\":1}}],[\"它专注于实时处理\",{\"1\":{\"841\":1}}],[\"它可以与同属一个进程的其他线程共享进程所拥有的全部资源\",{\"1\":{\"736\":1}}],[\"它会被分配给\",{\"1\":{\"1298\":1}}],[\"它会将目标存储地址\",{\"1\":{\"534\":1}}],[\"它会从指定的内存地址中取得一个\",{\"1\":{\"529\":1}}],[\"它代表了类继承的顺序\",{\"1\":{\"427\":1}}],[\"它确保任何时候都只有一个python线程执行\",{\"1\":{\"277\":1}}],[\"它也可以跳上n级\",{\"1\":{\"103\":1}}],[\"它尝试分步的去解决一个问题\",{\"1\":{\"5\":1}}],[\"八皇后问题是在标准国际象棋棋盘中寻找八个皇后的所有分布\",{\"1\":{\"5\":1}}],[\"八皇后问题展示了回溯法的用例\",{\"1\":{\"5\":1}}],[\"在之前的代码中使用的是\",{\"1\":{\"1605\":1}}],[\"在深入分析之前\",{\"1\":{\"1592\":1}}],[\"在深入使用了这个接口以后\",{\"1\":{\"289\":1}}],[\"在具体实现上\",{\"1\":{\"1585\":1}}],[\"在过去的一些\",{\"1\":{\"1584\":1}}],[\"在所有线程退出\",{\"1\":{\"1584\":1}}],[\"在阅读源码的时候\",{\"1\":{\"1567\":1}}],[\"在阅读了相关论文之后\",{\"1\":{\"1166\":1}}],[\"在中断或原子操作上下文中运行\",{\"1\":{\"1562\":1}}],[\"在启动从处理器以前执行准备工作\",{\"1\":{\"1557\":1}}],[\"在启动的时候选定一个\",{\"1\":{\"1477\":1}}],[\"在模块卸载的时候使用\",{\"1\":{\"1553\":1}}],[\"在模块装载后\",{\"1\":{\"1553\":1}}],[\"在内核中\",{\"1\":{\"1551\":1}}],[\"在内存映射技术中\",{\"1\":{\"1318\":1}}],[\"在内存中\",{\"1\":{\"256\":1}}],[\"在设置成功的前提下\",{\"1\":{\"1545\":1}}],[\"在研究之前\",{\"1\":{\"1542\":1}}],[\"在现在的\",{\"1\":{\"1533\":1}}],[\"在汇编层面\",{\"1\":{\"1529\":1}}],[\"在传统的cpu调度方案中\",{\"1\":{\"1528\":1}}],[\"在传输信号中产生一个时移\",{\"1\":{\"1024\":1}}],[\"在停止之前和停止之后\",{\"1\":{\"1527\":1}}],[\"在其中等待所有正在使用旧副本的进程访问完毕并结束\",{\"1\":{\"1524\":1}}],[\"在其中引用已经\",{\"1\":{\"623\":1}}],[\"在rcu空闲处理期间不会被重新打开\",{\"1\":{\"1524\":1}}],[\"在rf频率下穿墙所产生的视觉系统与无线系统感知情景的不同等问题\",{\"1\":{\"1132\":1}}],[\"在linux内核中\",{\"1\":{\"1524\":1,\"1583\":1}}],[\"在cpu进入指定的空闲状态之前检查该状态是否需要刷新tlb\",{\"1\":{\"1522\":1}}],[\"在进入空闲状态时\",{\"1\":{\"1524\":1}}],[\"在进入\",{\"1\":{\"1518\":1}}],[\"在进程切换的过程中\",{\"1\":{\"252\":1}}],[\"在外围对是否进入该函数有一个判断\",{\"1\":{\"1518\":1}}],[\"在外部请求到达时\",{\"1\":{\"984\":1}}],[\"在百万次级别\",{\"1\":{\"1501\":1}}],[\"在举例\",{\"1\":{\"1501\":1}}],[\"在加载\",{\"1\":{\"1487\":1}}],[\"在主流平台中都是\",{\"1\":{\"1470\":1}}],[\"在绝大部分的机器上\",{\"1\":{\"1470\":1}}],[\"在标准\",{\"1\":{\"1469\":1}}],[\"在查阅资料后发现\",{\"1\":{\"1469\":1}}],[\"在查阅资料以后\",{\"1\":{\"559\":1}}],[\"在源码中\",{\"1\":{\"1469\":1}}],[\"在源码中如下\",{\"1\":{\"1469\":1}}],[\"在64位系统中为\",{\"1\":{\"1469\":1}}],[\"在控制台执行\",{\"1\":{\"1463\":1}}],[\"在日常的生产中\",{\"1\":{\"1449\":1}}],[\"在染色算法中\",{\"1\":{\"1388\":1}}],[\"在常见的编程语言中\",{\"1\":{\"1383\":1}}],[\"在并发场景下\",{\"1\":{\"1381\":1}}],[\"在拷贝的时候\",{\"1\":{\"1380\":1}}],[\"在系统空闲的阶段停掉周期性的时钟达到节省功耗的目的\",{\"1\":{\"1541\":1}}],[\"在系统中断的时候\",{\"1\":{\"1541\":1}}],[\"在系统中非常重要\",{\"1\":{\"1350\":1}}],[\"在系统的这种情况下\",{\"1\":{\"1134\":1}}],[\"在红黑树中\",{\"1\":{\"1341\":1}}],[\"在红黑树上监听\",{\"1\":{\"955\":1}}],[\"在缓冲区初始化或者分配以后\",{\"1\":{\"1340\":1}}],[\"在缓存中分配一个\",{\"1\":{\"218\":1}}],[\"在缓存里面有的话\",{\"1\":{\"74\":1}}],[\"在看\",{\"1\":{\"1333\":1}}],[\"在后续的研究中\",{\"1\":{\"1330\":1}}],[\"在结构体\",{\"1\":{\"1307\":1}}],[\"在服务端\",{\"1\":{\"1298\":1}}],[\"在服务器端会产生\",{\"1\":{\"1113\":1}}],[\"在服务器上启动\",{\"1\":{\"446\":1}}],[\"在新的\",{\"1\":{\"1551\":1}}],[\"在新进程中执行\",{\"1\":{\"1293\":1}}],[\"在新建模块的时候\",{\"1\":{\"717\":1}}],[\"在91云\",{\"1\":{\"1264\":1,\"1646\":1}}],[\"在优化参数的时候\",{\"1\":{\"1212\":1}}],[\"在采用随机梯度下降算法训练神经网络时\",{\"1\":{\"1185\":1}}],[\"在线学习难以达到收敛\",{\"1\":{\"1185\":1}}],[\"在线学习\",{\"1\":{\"1185\":1}}],[\"在损失函数中\",{\"1\":{\"1185\":1}}],[\"在插入新值后\",{\"1\":{\"1170\":1}}],[\"在path后一位补1\",{\"1\":{\"1169\":1}}],[\"在云计算环境中\",{\"1\":{\"1166\":1}}],[\"在漫长的等待过后\",{\"1\":{\"1162\":1}}],[\"在文件tiny\",{\"1\":{\"1162\":1}}],[\"在voc数据集中位于voc2007\",{\"1\":{\"1159\":1}}],[\"在yolo中\",{\"1\":{\"1159\":1}}],[\"在预训练得到的20层卷积层之上加上随机初始化的4个卷积层和2个全连接层\",{\"1\":{\"1156\":1}}],[\"在预测的时候先使用哪个\",{\"1\":{\"583\":1}}],[\"在预测的时候\",{\"1\":{\"559\":1}}],[\"在命令行输入\",{\"1\":{\"1145\":1}}],[\"在本章研究的\",{\"1\":{\"1313\":1}}],[\"在本实验中使用的数据集是celeba大规模名人人脸标注数据集\",{\"1\":{\"1159\":1}}],[\"在本论文中\",{\"1\":{\"1134\":1}}],[\"在本地正常\",{\"1\":{\"1113\":1}}],[\"在无线感知系统中\",{\"1\":{\"1133\":1}}],[\"在穿墙的场景下\",{\"1\":{\"1132\":1}}],[\"在可见场景下\",{\"1\":{\"1132\":1}}],[\"在训练之前\",{\"1\":{\"1156\":1}}],[\"在训练过程中\",{\"1\":{\"1132\":1}}],[\"在训练时同步地将rfid的无线信号和计算机的视觉信号相结合\",{\"1\":{\"1131\":1}}],[\"在某次提交后如果发现自己忘记添加某些文件\",{\"1\":{\"1241\":1}}],[\"在某个公司成为主管\",{\"1\":{\"1033\":1}}],[\"在某些架构中\",{\"1\":{\"552\":1}}],[\"在移除掉包边界检测\",{\"1\":{\"1024\":1}}],[\"在很短的时间中趋于稳定\",{\"1\":{\"1024\":1}}],[\"在网络内创建\",{\"1\":{\"1022\":1}}],[\"在网络编程中\",{\"1\":{\"979\":1}}],[\"在图中进行了高亮\",{\"1\":{\"1515\":1}}],[\"在图中的\",{\"1\":{\"1021\":1}}],[\"在图中为\",{\"1\":{\"1020\":1}}],[\"在频域上\",{\"1\":{\"1020\":1}}],[\"在视觉定位方面\",{\"1\":{\"1017\":1}}],[\"在室外\",{\"1\":{\"1014\":1}}],[\"在kitti数据集上的测试结果如表所示\",{\"1\":{\"1012\":1}}],[\"在目标轻微运动时\",{\"1\":{\"1025\":1}}],[\"在目标检测领域\",{\"1\":{\"1012\":1}}],[\"在目前是最受欢迎的\",{\"1\":{\"869\":1}}],[\"在基于wifi的室内定位系统中\",{\"1\":{\"1012\":1}}],[\"在区域传输的时候使用\",{\"1\":{\"997\":1}}],[\"在每一层的后面使用了正则化和relu激活函数\",{\"1\":{\"1138\":1}}],[\"在每一层上都具有丰富的语义\",{\"1\":{\"1022\":1}}],[\"在每层空间维度的步长为1x2x2\",{\"1\":{\"1138\":1}}],[\"在每个\",{\"1\":{\"1025\":1}}],[\"在每台安装有\",{\"1\":{\"994\":1}}],[\"在每次迭代中\",{\"1\":{\"59\":1}}],[\"在以太网中\",{\"1\":{\"993\":1}}],[\"在ipv6\",{\"1\":{\"993\":1}}],[\"在收集过程中的每一步都会产生或大或小的一些误差\",{\"1\":{\"1012\":1}}],[\"在收到对方的\",{\"1\":{\"988\":1}}],[\"在收到发送报文的\",{\"1\":{\"987\":1}}],[\"在收发两端之间仍然有流动的数据\",{\"1\":{\"987\":1}}],[\"在丢失的情况下\",{\"1\":{\"983\":1}}],[\"在超市后会重发整个\",{\"1\":{\"981\":1}}],[\"在三次握手协议中\",{\"1\":{\"984\":1}}],[\"在三次握手的时候会协商\",{\"1\":{\"980\":1}}],[\"在三路握手正常完成的前提下\",{\"1\":{\"951\":1}}],[\"在应用程序中我们用到的\",{\"1\":{\"979\":1}}],[\"在一定时间内如果没有得到发送数据报的\",{\"1\":{\"978\":1}}],[\"在一个文件夹中\",{\"1\":{\"1440\":1}}],[\"在一个专用的\",{\"1\":{\"988\":1}}],[\"在一个往返时间最多为\",{\"1\":{\"987\":1}}],[\"在一个\",{\"1\":{\"691\":1}}],[\"在一个小镇里\",{\"1\":{\"87\":1}}],[\"在一个二维数组中\",{\"1\":{\"30\":1}}],[\"在流中的位置\",{\"1\":{\"978\":1}}],[\"在流水线中提供预测\",{\"1\":{\"559\":1}}],[\"在流水线中称作\",{\"1\":{\"234\":1}}],[\"在套接字通信中\",{\"1\":{\"962\":1}}],[\"在初始化时内核会通过这些函数指针调用这些\",{\"1\":{\"1551\":1}}],[\"在初始化\",{\"1\":{\"962\":1,\"1557\":1}}],[\"在运行时\",{\"1\":{\"960\":1}}],[\"在项目中安装\",{\"1\":{\"1113\":1}}],[\"在项目中的示例代码如下所示\",{\"1\":{\"329\":1}}],[\"在项目启动的时候\",{\"1\":{\"871\":1}}],[\"在创立之初是一个轻量级的\",{\"1\":{\"869\":1}}],[\"在创建之前\",{\"1\":{\"1365\":1}}],[\"在创建\",{\"1\":{\"609\":1}}],[\"在当前目录中安装\",{\"1\":{\"1240\":1}}],[\"在当前目录中创建一个项目my\",{\"1\":{\"864\":1}}],[\"在当前虚环境下安装tornado组件\",{\"1\":{\"854\":1}}],[\"在两分钟后过期\",{\"1\":{\"844\":1}}],[\"在数据采样过程中\",{\"1\":{\"1020\":1}}],[\"在数据库中使用\",{\"1\":{\"819\":1}}],[\"在数据库中插入新的\",{\"1\":{\"806\":1}}],[\"在数组中查找两个数\",{\"1\":{\"166\":1}}],[\"在数组中的插入位置\",{\"1\":{\"160\":1}}],[\"在子进程返回\",{\"1\":{\"738\":1}}],[\"在子进程中又返回一次\",{\"1\":{\"738\":1}}],[\"在调用的时候作为\",{\"1\":{\"1571\":1}}],[\"在调用该函数之前\",{\"1\":{\"1523\":1}}],[\"在调用该函数之间\",{\"1\":{\"1327\":1}}],[\"在调用\",{\"1\":{\"696\":1,\"1396\":1,\"1551\":1}}],[\"在屏幕上打印出所有的信息\",{\"1\":{\"691\":1}}],[\"在整个编译器中所处的位置\",{\"1\":{\"690\":1}}],[\"在最原始的\",{\"1\":{\"689\":1}}],[\"在最坏的情况下\",{\"1\":{\"5\":1}}],[\"在字节码部分\",{\"1\":{\"688\":1}}],[\"在字典中添加栈顶元素\",{\"1\":{\"467\":1}}],[\"在不定期使用计时器的情况下执行\",{\"1\":{\"1584\":1}}],[\"在不同的子系统中表示不同的信息\",{\"1\":{\"1567\":1}}],[\"在不同的\",{\"1\":{\"1380\":1}}],[\"在不同的锁状态下存储的内容不同\",{\"1\":{\"676\":1}}],[\"在不同时延下的功率分布\",{\"1\":{\"1020\":1}}],[\"在不考虑缓冲区的情况下\",{\"1\":{\"980\":1}}],[\"在不可靠的\",{\"1\":{\"977\":1}}],[\"在不购买大礼包的时候\",{\"1\":{\"102\":1}}],[\"在堆中的\",{\"1\":{\"674\":1}}],[\"在我们\",{\"1\":{\"1328\":1}}],[\"在我们开始之前\",{\"1\":{\"669\":1}}],[\"在我们的示例中\",{\"1\":{\"419\":1}}],[\"在开始研究之前\",{\"1\":{\"664\":1}}],[\"在程序启动后\",{\"1\":{\"655\":1}}],[\"在自动驾驶领域的应用\",{\"1\":{\"643\":1}}],[\"在更新的时候\",{\"1\":{\"559\":1}}],[\"在分支预测中\",{\"1\":{\"559\":1}}],[\"在分步解决问题的过程中\",{\"1\":{\"5\":1}}],[\"在什么情况下\",{\"1\":{\"559\":1}}],[\"在与没有\",{\"1\":{\"557\":1}}],[\"在执行\",{\"1\":{\"1316\":1,\"1428\":1}}],[\"在执行阶段不需要使用复杂的修复机制如\",{\"1\":{\"543\":1}}],[\"在执行期间的任何时刻\",{\"1\":{\"418\":1}}],[\"在精度极低的情况下\",{\"1\":{\"543\":1}}],[\"在示例中括号也给出了最终的偏移地址\",{\"1\":{\"530\":1}}],[\"在寄存器中递增值\",{\"1\":{\"523\":1}}],[\"在输出中\",{\"1\":{\"503\":1}}],[\"在算法中\",{\"1\":{\"477\":1}}],[\"在栈非空的前提下\",{\"1\":{\"465\":1}}],[\"在腾讯面试的过程中\",{\"1\":{\"453\":1}}],[\"在多个程序之间共享硬件\",{\"1\":{\"1621\":1}}],[\"在多个程序之间共享一台计算机\",{\"1\":{\"1621\":1}}],[\"在多核系统中\",{\"1\":{\"1529\":1}}],[\"在多次进行\",{\"1\":{\"460\":1}}],[\"在多重继承的场景下会这样\",{\"1\":{\"427\":1}}],[\"在多进程的实现函数中\",{\"1\":{\"289\":1}}],[\"在类的继承中\",{\"1\":{\"427\":1}}],[\"在类中往往有一些方法跟类有关系\",{\"1\":{\"422\":1}}],[\"在super机制里\",{\"1\":{\"424\":1}}],[\"在指定了第三个参数以后\",{\"1\":{\"390\":1}}],[\"在定义固件时指定\",{\"1\":{\"380\":1}}],[\"在定义固件时\",{\"1\":{\"379\":1}}],[\"在复杂的项目中\",{\"1\":{\"377\":1}}],[\"在对\",{\"1\":{\"341\":1}}],[\"在有些解释中\",{\"1\":{\"1602\":1}}],[\"在有些\",{\"1\":{\"336\":1}}],[\"在例子中\",{\"1\":{\"331\":1}}],[\"在使用该函数时\",{\"1\":{\"1526\":1}}],[\"在使用\",{\"1\":{\"325\":1}}],[\"在使用较大的\",{\"1\":{\"211\":1}}],[\"在切回来的时候\",{\"1\":{\"282\":1}}],[\"在同一时间只能执行一个线程\",{\"1\":{\"276\":1,\"279\":1}}],[\"在计算属性不适用的时候\",{\"1\":{\"933\":1}}],[\"在计算机\",{\"1\":{\"234\":1}}],[\"在计算前缀和的同时把前缀和的每个值出现的次数都记录在\",{\"1\":{\"153\":1}}],[\"在虚拟存储中\",{\"1\":{\"213\":1}}],[\"在相联度不低\",{\"1\":{\"213\":1}}],[\"在相等判断以后应当右移\",{\"1\":{\"165\":1}}],[\"在途中就是用\",{\"1\":{\"204\":1}}],[\"在上文研究了\",{\"1\":{\"1575\":1}}],[\"在上面代码中体现为\",{\"1\":{\"1515\":1}}],[\"在上面的命令中\",{\"1\":{\"1231\":1}}],[\"在上面的函数中\",{\"1\":{\"285\":1}}],[\"在上层\",{\"1\":{\"1352\":1}}],[\"在上层我们使用\",{\"1\":{\"1307\":1}}],[\"在上节对于mope算法分析中提到\",{\"1\":{\"1170\":1}}],[\"在上节下载好的darknet文件夹中进行一些文件和脚本的修改\",{\"1\":{\"1162\":1}}],[\"在上图中\",{\"1\":{\"203\":1}}],[\"在上述结构体的\",{\"1\":{\"1591\":1}}],[\"在上述的解释中\",{\"1\":{\"1381\":1}}],[\"在上述的例子中\",{\"1\":{\"198\":1}}],[\"在上述两种情况下\",{\"1\":{\"565\":1}}],[\"在上述例子中的顺序变化为\",{\"1\":{\"467\":1}}],[\"在上述例子中\",{\"1\":{\"408\":1}}],[\"在上述图中\",{\"1\":{\"195\":1}}],[\"在上述代码中\",{\"1\":{\"118\":1,\"1537\":1}}],[\"在该模块进行\",{\"1\":{\"1531\":1}}],[\"在该模块中\",{\"1\":{\"1012\":1}}],[\"在该函数中\",{\"1\":{\"1524\":1}}],[\"在该层之后\",{\"1\":{\"1138\":1}}],[\"在该队列放入一项才唤醒它\",{\"1\":{\"951\":1}}],[\"在该语言的字母表中\",{\"1\":{\"186\":1}}],[\"在该题目中同理\",{\"1\":{\"13\":1}}],[\"在代码中的含义就是y`表示正确结果\",{\"1\":{\"1212\":1}}],[\"在代码中进行了一些优化操作\",{\"1\":{\"130\":1}}],[\"在代码第\",{\"1\":{\"169\":1}}],[\"在面试中往往能成为加分项\",{\"1\":{\"162\":1}}],[\"在第一次握手的时候就有一个\",{\"1\":{\"980\":1}}],[\"在第\",{\"1\":{\"155\":1}}],[\"在实践中\",{\"1\":{\"1169\":1}}],[\"在实现\",{\"1\":{\"1534\":1}}],[\"在实现时\",{\"1\":{\"1185\":1}}],[\"在实现细节上\",{\"1\":{\"1138\":1}}],[\"在实现的节点上\",{\"1\":{\"549\":1}}],[\"在实现这个解法的时候\",{\"1\":{\"169\":1}}],[\"在实现这个代码的时候\",{\"1\":{\"64\":1}}],[\"在实际的应用场景中\",{\"1\":{\"1534\":1}}],[\"在实际的编写代码过程中\",{\"1\":{\"147\":1}}],[\"在实际加载动态库的时候会将其拓展称为\",{\"1\":{\"696\":1,\"1396\":1}}],[\"在实际场景中\",{\"1\":{\"329\":1}}],[\"在实战中的演示如下\",{\"1\":{\"315\":1}}],[\"在递推过程中\",{\"1\":{\"120\":1}}],[\"在此判断是否支持\",{\"1\":{\"1545\":1}}],[\"在此返回\",{\"1\":{\"1545\":1}}],[\"在此期间\",{\"1\":{\"1524\":1}}],[\"在此之前\",{\"1\":{\"1469\":1}}],[\"在此之后\",{\"1\":{\"1138\":1}}],[\"在此稍微说明一下\",{\"1\":{\"1386\":1}}],[\"在此不详细展开\",{\"1\":{\"1358\":1}}],[\"在此对具体的技术细节就不进行赘述\",{\"1\":{\"1352\":1}}],[\"在此对权限进行以下说明\",{\"1\":{\"741\":1}}],[\"在此过程中\",{\"1\":{\"1169\":1}}],[\"在此只列举部分关键代码\",{\"1\":{\"703\":1}}],[\"在此需要解释一下几个类型\",{\"1\":{\"676\":1}}],[\"在此需要解释一下\",{\"1\":{\"673\":1}}],[\"在此先引用一下一篇论文中的解释\",{\"1\":{\"580\":1}}],[\"在此复习一下二叉树的中序遍历\",{\"1\":{\"496\":1}}],[\"在此归纳一下这个题目的一些重点\",{\"1\":{\"92\":1}}],[\"在此给个参考\",{\"1\":{\"88\":1}}],[\"在找到目标后返回\",{\"1\":{\"88\":1}}],[\"在队列初始化的时候一般会加入将起点加入队列中\",{\"1\":{\"83\":1}}],[\"在队列中同时取出两个节点\",{\"1\":{\"52\":1}}],[\"在形式上\",{\"1\":{\"75\":1}}],[\"在这列举出来\",{\"1\":{\"1450\":1}}],[\"在这几行代码里面\",{\"1\":{\"1441\":1}}],[\"在这种情况下\",{\"1\":{\"1449\":1}}],[\"在这种模式下\",{\"1\":{\"729\":1}}],[\"在这种不需要考虑顺序的题目中\",{\"1\":{\"10\":1}}],[\"在这关于\",{\"1\":{\"688\":1}}],[\"在这进行一个简单的研究\",{\"1\":{\"687\":1}}],[\"在这需要说明以下\",{\"1\":{\"667\":1}}],[\"在这里方法先不用加以考虑\",{\"1\":{\"1030\":1}}],[\"在这里我向我的导师表示深深的谢意\",{\"1\":{\"1012\":1}}],[\"在这里我理解了为什么\",{\"1\":{\"59\":1}}],[\"在这里\",{\"1\":{\"559\":1}}],[\"在这里为什么递归会起作用呢\",{\"1\":{\"499\":1}}],[\"在这记录一下\",{\"1\":{\"383\":1}}],[\"在这个地方有\",{\"1\":{\"1517\":1}}],[\"在这个地方进行一个对比\",{\"1\":{\"348\":1}}],[\"在这个\",{\"1\":{\"1380\":1}}],[\"在这个模式下\",{\"1\":{\"730\":1}}],[\"在这个阶段\",{\"1\":{\"593\":1}}],[\"在这个过程中\",{\"1\":{\"251\":1,\"1380\":1}}],[\"在这个步骤中\",{\"1\":{\"245\":1}}],[\"在这个例子中我们只写入了\",{\"1\":{\"1596\":1}}],[\"在这个例子中的结果是\",{\"1\":{\"467\":1}}],[\"在这个例子中的错误示例中\",{\"1\":{\"294\":1}}],[\"在这个例子中\",{\"1\":{\"185\":2,\"349\":1,\"504\":1,\"1231\":1}}],[\"在这个问题中\",{\"1\":{\"91\":1}}],[\"在这些条件满足以后\",{\"1\":{\"51\":1}}],[\"在\",{\"0\":{\"1230\":1},\"1\":{\"47\":1,\"59\":1,\"124\":1,\"146\":1,\"165\":1,\"172\":1,\"173\":1,\"204\":1,\"205\":1,\"218\":1,\"221\":1,\"224\":1,\"227\":1,\"236\":2,\"273\":1,\"336\":2,\"337\":1,\"351\":1,\"377\":3,\"388\":1,\"411\":1,\"414\":1,\"428\":1,\"431\":1,\"432\":2,\"435\":1,\"436\":1,\"445\":1,\"523\":1,\"529\":1,\"534\":1,\"549\":3,\"550\":2,\"552\":1,\"593\":1,\"618\":1,\"658\":1,\"669\":1,\"670\":1,\"675\":1,\"676\":1,\"695\":1,\"701\":1,\"705\":1,\"706\":2,\"717\":1,\"724\":1,\"761\":2,\"807\":1,\"916\":1,\"925\":1,\"952\":1,\"954\":1,\"956\":1,\"960\":1,\"978\":1,\"981\":1,\"1113\":1,\"1145\":1,\"1176\":1,\"1252\":1,\"1293\":1,\"1307\":4,\"1320\":1,\"1327\":1,\"1328\":1,\"1333\":1,\"1352\":1,\"1355\":1,\"1376\":1,\"1380\":5,\"1381\":2,\"1383\":4,\"1386\":2,\"1388\":2,\"1395\":1,\"1400\":1,\"1402\":2,\"1454\":1,\"1479\":2,\"1490\":1,\"1498\":1,\"1517\":1,\"1521\":1,\"1529\":1,\"1531\":1,\"1540\":1,\"1551\":2,\"1552\":1,\"1553\":1,\"1563\":1,\"1584\":2,\"1590\":1,\"1595\":1}}],[\"在循环里面更新\",{\"1\":{\"47\":1}}],[\"在前面我们提到\",{\"1\":{\"1575\":1}}],[\"在前\",{\"1\":{\"25\":1}}],[\"在写\",{\"1\":{\"83\":1}}],[\"在写二分查找时\",{\"1\":{\"22\":1}}],[\"在写代码时\",{\"1\":{\"22\":1}}],[\"在二分查找中\",{\"1\":{\"22\":1}}],[\"在解决了上面的那些问题以后\",{\"1\":{\"12\":1}}],[\"在解决约束满足问题时\",{\"1\":{\"5\":1}}],[\"在尝试了所有可能的分步方法后宣告该问题没有答案\",{\"1\":{\"5\":1}}],[\"在反复重复上述的步骤后可能出现两种情况\",{\"1\":{\"5\":1}}],[\"在经典的教科书中\",{\"1\":{\"5\":1}}],[\"尤其适用于约束补偿问题\",{\"1\":{\"5\":1}}],[\"这可以避免竞态条件和死锁等问题\",{\"1\":{\"1585\":1}}],[\"这几种通知链的区别是在执行通知链上的回调函数时是否有安全保护措施\",{\"1\":{\"1562\":1}}],[\"这几个的关系大致如下图所示\",{\"1\":{\"1531\":1}}],[\"这几个\",{\"1\":{\"1441\":1}}],[\"这行代码最终会将广播标志设置为\",{\"1\":{\"1521\":1}}],[\"这行代码的作用是设置一个广播标志\",{\"1\":{\"1521\":1}}],[\"这行的意思就是起始地址是\",{\"1\":{\"1463\":1}}],[\"这行数据是\",{\"1\":{\"224\":3}}],[\"这行数据无效\",{\"1\":{\"224\":1}}],[\"这行数据有效\",{\"1\":{\"224\":2}}],[\"这行数据被修改了\",{\"1\":{\"224\":1}}],[\"这事情就会很难\",{\"1\":{\"1357\":1}}],[\"这肯定会带来巨大的性能提升\",{\"1\":{\"1356\":1}}],[\"这不是一个纯粹的软件策略\",{\"1\":{\"1355\":1}}],[\"这都为我们提供了一个新的思路\",{\"1\":{\"1355\":1}}],[\"这会是一场灾难\",{\"1\":{\"1353\":1}}],[\"这会使得窗口按指数方式增长\",{\"1\":{\"987\":1}}],[\"这块部分如果后续较为完善的话可以考虑独立出去\",{\"1\":{\"1326\":1}}],[\"这块做一个简单的总结\",{\"1\":{\"581\":1}}],[\"这由于当前的master分支所指向的提交是要并入的testing分支的直接上游\",{\"1\":{\"1252\":1}}],[\"这表明预测的结果和真实值的差距越来越小\",{\"1\":{\"1212\":1}}],[\"这导致了树重新平衡之后\",{\"1\":{\"1169\":1}}],[\"这在训练的时候是没有可以标注的\",{\"1\":{\"1132\":1}}],[\"这使得本文的目标检测网络在每一层都可以生成高分辨率高语义的目标特征\",{\"1\":{\"1012\":1}}],[\"这使得流可以分割为若干个段\",{\"1\":{\"976\":1}}],[\"这三个模型相互结合\",{\"1\":{\"1012\":1}}],[\"这指的是\",{\"1\":{\"728\":1}}],[\"这篇论文的研究可以看我的另一篇文章\",{\"1\":{\"1354\":1}}],[\"这篇博客主要记录\",{\"1\":{\"722\":1}}],[\"这篇博客\",{\"1\":{\"704\":1,\"1399\":1}}],[\"这篇文章讲述了\",{\"1\":{\"1470\":1}}],[\"这篇文章思考并解决以下问题\",{\"1\":{\"1468\":1}}],[\"这篇文章主要研究\",{\"1\":{\"1468\":1}}],[\"这篇文章主要是研究\",{\"1\":{\"541\":1}}],[\"这篇文章为了解决\",{\"1\":{\"1354\":1}}],[\"这篇文章是一个关于\",{\"1\":{\"685\":1}}],[\"这篇文章也阐述了值局部性的原理\",{\"1\":{\"600\":1}}],[\"这篇文章的主要工作就是预测\",{\"1\":{\"599\":1}}],[\"这篇文章使用了\",{\"1\":{\"573\":1}}],[\"这篇文章作为经典的\",{\"1\":{\"570\":1}}],[\"这篇文章\",{\"1\":{\"570\":1,\"1553\":1}}],[\"这篇文章将总结一下常见的有关\",{\"1\":{\"477\":1}}],[\"这么做的好处在于\",{\"1\":{\"679\":1}}],[\"这么做的好处在哪\",{\"1\":{\"673\":1}}],[\"这么做的原因在于\",{\"1\":{\"499\":1}}],[\"这又是一个很大的话题了\",{\"1\":{\"667\":1}}],[\"这次尝试在\",{\"1\":{\"614\":1}}],[\"这\",{\"1\":{\"583\":1}}],[\"这段引用较难理解\",{\"1\":{\"1584\":1}}],[\"这段逻辑很少被执行\",{\"1\":{\"1522\":1}}],[\"这段话说明了\",{\"1\":{\"1483\":1}}],[\"这段话说了可以原地\",{\"1\":{\"1419\":1}}],[\"这段比较难理解\",{\"1\":{\"1388\":1}}],[\"这段比较重要\",{\"1\":{\"559\":1}}],[\"这段代码很长\",{\"1\":{\"1544\":1}}],[\"这段代码用于判断目标状态是否为rcu空闲状态\",{\"1\":{\"1526\":1}}],[\"这段代码用于判断当前进入空闲状态的目标状态是否需要进行rcu\",{\"1\":{\"1524\":1}}],[\"这段代码的作用是将当前\",{\"1\":{\"1523\":1}}],[\"这段代码的作用是确保在进入特定的空闲状态之前清除\",{\"1\":{\"1522\":1}}],[\"这段代码的作用是\",{\"1\":{\"1522\":1}}],[\"这段代码是客户端❓写\",{\"1\":{\"1320\":1}}],[\"这段代码总共可以进三次测试\",{\"1\":{\"375\":1}}],[\"这段函数的重点就是\",{\"1\":{\"1296\":1}}],[\"这段始终不能为空\",{\"1\":{\"978\":1}}],[\"这意味着需要在内核的地址空间占用临时映射区的空间\",{\"1\":{\"1353\":1}}],[\"这意味着\",{\"1\":{\"1024\":1}}],[\"这意味着复杂耗电的\",{\"1\":{\"543\":1}}],[\"这意味着递增arm上特定内存地址上的\",{\"1\":{\"523\":1}}],[\"这意味着只有加载\",{\"1\":{\"523\":1}}],[\"这意味着置无效就是把\",{\"1\":{\"221\":1}}],[\"这时你的提交历史就与服务器上的历史产生了偏离\",{\"1\":{\"1253\":1}}],[\"这时可以通过重载\",{\"1\":{\"431\":1}}],[\"这时\",{\"1\":{\"427\":1}}],[\"这时候mope编码的优势就体现了出来\",{\"1\":{\"1169\":1}}],[\"这时候使用\",{\"1\":{\"997\":1}}],[\"这时候存在资源的竞争\",{\"1\":{\"876\":1}}],[\"这时候是线程安全的\",{\"1\":{\"876\":1}}],[\"这时候锁的\",{\"1\":{\"833\":1}}],[\"这时候把\",{\"1\":{\"728\":1}}],[\"这时候可以看到\",{\"1\":{\"624\":1}}],[\"这时候就是从内存中取出来要使用的值\",{\"1\":{\"580\":1}}],[\"这时候的这个节点必然是没有左子树的\",{\"1\":{\"499\":1}}],[\"这时候还未修改是因为还在执行\",{\"1\":{\"418\":1}}],[\"这时候我们执行\",{\"1\":{\"1448\":1}}],[\"这时候我们只需要将数据传入计算图\",{\"1\":{\"1212\":1}}],[\"这时候我们选择该礼包\",{\"1\":{\"102\":1}}],[\"这时候我们给结果里面增加元素\",{\"1\":{\"46\":1}}],[\"这时候结果是\",{\"1\":{\"88\":1}}],[\"这时候需要向左查找\",{\"1\":{\"22\":1}}],[\"这一小部分数据称为一个batch\",{\"1\":{\"1212\":1}}],[\"这一小部分数据被称之为一个batch\",{\"1\":{\"1185\":1}}],[\"这一过程资源消耗较大\",{\"1\":{\"954\":1}}],[\"这一位的字段增加或者减少\",{\"1\":{\"576\":1}}],[\"这一段的细节我们暂时不进行考究\",{\"1\":{\"559\":1}}],[\"这一名称在\",{\"1\":{\"419\":1}}],[\"这一步骤执行了级别\",{\"1\":{\"1557\":1}}],[\"这一步骤可能是分支指令\",{\"1\":{\"245\":1}}],[\"这一步是安装csitool所需要的一些依赖\",{\"1\":{\"1145\":1}}],[\"这一步是送出\",{\"1\":{\"245\":1}}],[\"这一步省略调代码也是可以通过的\",{\"1\":{\"130\":1}}],[\"这一步很重要\",{\"1\":{\"74\":1}}],[\"这一步操作排除了当前层的节点\",{\"1\":{\"11\":1}}],[\"这类任务的特点就是\",{\"1\":{\"280\":1}}],[\"这也就意味着不需要陷入内核\",{\"1\":{\"1356\":1}}],[\"这也就是\",{\"1\":{\"1353\":1}}],[\"这也就是我们要说的\",{\"1\":{\"1353\":1}}],[\"这也是为什么说\",{\"1\":{\"1510\":1}}],[\"这也是一个较为损耗面积的修改\",{\"1\":{\"1357\":1}}],[\"这也是一种序列化的表示形式\",{\"1\":{\"690\":1}}],[\"这也是作者的工作量所在\",{\"1\":{\"1356\":1}}],[\"这也是yolo算法的缺点之一\",{\"1\":{\"1156\":1}}],[\"这也是最快的解法\",{\"1\":{\"480\":1}}],[\"这也是我们这节要研究的\",{\"1\":{\"202\":1}}],[\"这也不过就是一个约定\",{\"1\":{\"419\":1}}],[\"这也印证了为什么有些说法称\",{\"1\":{\"255\":1}}],[\"这边使用\",{\"1\":{\"1605\":1}}],[\"这边可能会存在一个竞态\",{\"1\":{\"1545\":1}}],[\"这边可以考虑使用固件的参数化进行代码重构\",{\"1\":{\"382\":1}}],[\"这边有个二次判断\",{\"1\":{\"1545\":1}}],[\"这边有个细节\",{\"1\":{\"552\":1}}],[\"这边举了两个例子\",{\"1\":{\"584\":1}}],[\"这边需要专题理解\",{\"1\":{\"564\":1}}],[\"这边的\",{\"1\":{\"559\":1}}],[\"这边的操作使用固件抽离出数据库的通用操作\",{\"1\":{\"382\":1}}],[\"这边\",{\"1\":{\"496\":1}}],[\"这边附上图\",{\"1\":{\"257\":1}}],[\"这边还涉及到一个问题\",{\"1\":{\"253\":1}}],[\"这边是\",{\"1\":{\"64\":1}}],[\"这句话的深层含义是说\",{\"1\":{\"1557\":1}}],[\"这句话的意思是说\",{\"1\":{\"558\":1}}],[\"这句话说了\",{\"1\":{\"1507\":1}}],[\"这句话说的是\",{\"1\":{\"1490\":1,\"1507\":1}}],[\"这句话举例说明了\",{\"1\":{\"1501\":1}}],[\"这句话还是在说\",{\"1\":{\"1497\":1}}],[\"这句话是想说\",{\"1\":{\"1352\":1}}],[\"这句话阐述了一个观点\",{\"1\":{\"580\":1}}],[\"这句话主要的意思是\",{\"1\":{\"576\":1}}],[\"这句话难理解\",{\"1\":{\"557\":1}}],[\"这句话我是这么理解的\",{\"1\":{\"253\":1}}],[\"这句话从宏观维度总结了\",{\"1\":{\"193\":1}}],[\"这里指代的是待休眠\",{\"1\":{\"1544\":1}}],[\"这里指的应该是不能直接访问\",{\"1\":{\"728\":1}}],[\"这里的通知块指的是\",{\"1\":{\"1576\":1}}],[\"这里的实际上存储的是\",{\"1\":{\"1463\":1}}],[\"这里的写\",{\"1\":{\"218\":1}}],[\"这里存疑\",{\"1\":{\"1388\":1}}],[\"这里会将命令\",{\"1\":{\"1316\":1}}],[\"这里用tiny\",{\"1\":{\"1159\":1}}],[\"这里x\",{\"1\":{\"1159\":1}}],[\"这里nms处理结果不是剔除\",{\"1\":{\"1157\":1}}],[\"这里总共预测了7∗7∗2=98边界框\",{\"1\":{\"1157\":1}}],[\"这里我们谈的是yolo\",{\"1\":{\"1151\":1}}],[\"这里是指在使用\",{\"1\":{\"980\":1}}],[\"这里面有一个细节需要注意\",{\"1\":{\"1463\":1}}],[\"这里面有几点是需要注意的\",{\"1\":{\"1445\":1}}],[\"这里面又引入了关键的操作\",{\"1\":{\"1333\":1}}],[\"这里面说的就是堆栈的上下文切换之类的\",{\"1\":{\"687\":1}}],[\"这里面分为\",{\"1\":{\"653\":1}}],[\"这里面的值是和主存中的值保持一致的\",{\"1\":{\"602\":1}}],[\"这里提到了全局预测历史的\",{\"1\":{\"559\":1}}],[\"这里有\",{\"1\":{\"34\":1}}],[\"这将重新读取指令\",{\"1\":{\"212\":1}}],[\"这点比较重要\",{\"1\":{\"1605\":1}}],[\"这点在下面的图中也可以得到印证\",{\"1\":{\"194\":1}}],[\"这点很容易忽视\",{\"1\":{\"169\":1}}],[\"这道题可以帮助理解\",{\"1\":{\"149\":1}}],[\"这道题目用python\",{\"1\":{\"481\":1}}],[\"这道题目的大意是给定两个\",{\"1\":{\"467\":1}}],[\"这道题目的核心难点在于\",{\"1\":{\"49\":1}}],[\"这道题目是阿里面试的第一道算法题目\",{\"1\":{\"480\":1}}],[\"这道题目是需要我们把所有的偶数移到奇数前面\",{\"1\":{\"169\":1}}],[\"这道题目是上面二叉树层序遍历的变种题目\",{\"1\":{\"61\":1}}],[\"这道题目在\",{\"1\":{\"165\":1}}],[\"这道题目要求返回的是子数组的长度\",{\"1\":{\"158\":1}}],[\"这道题目首先把数组中的\",{\"1\":{\"158\":1}}],[\"这道题目也是一个经典的前缀和应用\",{\"1\":{\"156\":1}}],[\"这道题目并不是最典型的\",{\"1\":{\"120\":1}}],[\"这道题目可以利用记忆化搜索的方式去求解\",{\"1\":{\"102\":1}}],[\"这道题目与lc210\",{\"1\":{\"87\":1}}],[\"这道题目比较综合\",{\"1\":{\"86\":1}}],[\"这道题目除了可以根据中序遍历来求解外\",{\"1\":{\"65\":1}}],[\"这道题目为什么可以使用二分\",{\"1\":{\"36\":1}}],[\"这道题目只要求返回一个峰值\",{\"1\":{\"33\":1}}],[\"这道题目需要注意以下几点\",{\"1\":{\"15\":1}}],[\"这道题目不同于全排列的点在于\",{\"1\":{\"13\":1}}],[\"这就涉及到了\",{\"1\":{\"1545\":1}}],[\"这就提供了一种穿墙追踪人类活动的可能性\",{\"1\":{\"1131\":1}}],[\"这就导致了高分辨率的低等级特征损害了目标识别中的表达能力\",{\"1\":{\"1022\":1}}],[\"这就节省了很多\",{\"1\":{\"226\":1}}],[\"这就意味着我们需要\",{\"1\":{\"204\":1}}],[\"这就意味着\",{\"1\":{\"196\":1,\"289\":1,\"1355\":1}}],[\"这就使用到了前缀和的技巧\",{\"1\":{\"147\":1}}],[\"这就是yolo算法的朴素思想\",{\"1\":{\"1153\":1}}],[\"这就是迟滞\",{\"1\":{\"576\":1}}],[\"这就是等比级数或者几何级数\",{\"1\":{\"559\":1}}],[\"这就是\",{\"1\":{\"120\":1,\"559\":1}}],[\"这就像是一幅图\",{\"1\":{\"88\":1}}],[\"这两步操作的时间复杂度都是o\",{\"1\":{\"1170\":1}}],[\"这两步是为了电脑在开机的时候不启动无线\",{\"1\":{\"1145\":1}}],[\"这两者的功能是\",{\"1\":{\"1333\":1}}],[\"这两者产生的平均错误预测惩罚不同\",{\"1\":{\"548\":1}}],[\"这两者就可以对应上述两点\",{\"1\":{\"256\":1}}],[\"这两个函数都是调用了\",{\"1\":{\"1542\":1}}],[\"这两个函数的代码如下\",{\"1\":{\"1542\":1}}],[\"这两个函数之后\",{\"1\":{\"951\":1}}],[\"这两个判断的结果比较明显\",{\"1\":{\"1518\":1}}],[\"这两个文件我已经上传到百度云\",{\"1\":{\"1144\":1}}],[\"这两个包\",{\"1\":{\"980\":1}}],[\"这两个基本类型会产生\",{\"1\":{\"691\":1}}],[\"这两个字符串中\",{\"1\":{\"479\":1}}],[\"这两个也被执行了三次\",{\"1\":{\"387\":1}}],[\"这两个在每一次测试用例执行的时候都会执行一遍\",{\"1\":{\"387\":1}}],[\"这两个的功能是不一样的\",{\"1\":{\"354\":1}}],[\"这两个合起来就是\",{\"1\":{\"261\":1}}],[\"这两个条件可以作为我们的剪枝条件\",{\"1\":{\"15\":1}}],[\"这两种方式是互补的因为它们擅长预测不同的指令\",{\"1\":{\"545\":1}}],[\"这两种方式都可以实现填满\",{\"1\":{\"104\":1}}],[\"这两种用法是不同的\",{\"1\":{\"236\":1}}],[\"这两种遍历方式在本题中都是\",{\"1\":{\"118\":1}}],[\"这些函数指针的顺序也是和链接的顺序有关的\",{\"1\":{\"1551\":1}}],[\"这些函数在内核初始化过程中的调用顺序只和这里的函数指针的顺序有关\",{\"1\":{\"1551\":1}}],[\"这些函数的其中两个参数是指向某个套接字地址结构的指针和指向表示该结构大小的整数变量的指针\",{\"1\":{\"950\":1}}],[\"这些函数的一个参数是指向某个套接字地址结构的指针\",{\"1\":{\"950\":1}}],[\"这些成员与\",{\"1\":{\"1464\":1}}],[\"这些链接所需要的信息都被存储在\",{\"1\":{\"1460\":1}}],[\"这些都是按照可执行文件的格式存储的\",{\"1\":{\"1459\":1}}],[\"这些都是冗余信息\",{\"1\":{\"688\":1}}],[\"这些是一些常用的\",{\"1\":{\"1454\":1}}],[\"这些命令\",{\"1\":{\"1439\":1}}],[\"这些对象不会再被使用了\",{\"1\":{\"1380\":1}}],[\"这些协议都定义在\",{\"1\":{\"1309\":1}}],[\"这些特征图的深度不同\",{\"1\":{\"1022\":1}}],[\"这些室内定位技术可以被分为两类\",{\"1\":{\"1016\":1}}],[\"这些误差会使得收集到的\",{\"1\":{\"1012\":1}}],[\"这些技术定位精度较高\",{\"1\":{\"1012\":1}}],[\"这些套接字处于\",{\"1\":{\"951\":2}}],[\"这些常量池一般都是存在重叠的\",{\"1\":{\"688\":1}}],[\"这些\",{\"1\":{\"670\":1,\"1600\":1}}],[\"这些文件统一打包成\",{\"1\":{\"670\":1}}],[\"这些需要预知的信息包括静态字段的地址\",{\"1\":{\"654\":1}}],[\"这些值由\",{\"1\":{\"577\":1}}],[\"这些寄存器紧跟在写入指令之后\",{\"1\":{\"573\":1}}],[\"这些表由无标记\",{\"1\":{\"559\":1}}],[\"这些预测器一般使用\",{\"1\":{\"545\":1}}],[\"这些方法可以给\",{\"1\":{\"428\":1}}],[\"这些方法被称为魔法方法\",{\"1\":{\"428\":1}}],[\"这些程序或者数据没有在\",{\"1\":{\"208\":1}}],[\"这些边界值\",{\"1\":{\"88\":1}}],[\"这些人中有一个是小镇上的秘密法官\",{\"1\":{\"87\":1}}],[\"这对数据\",{\"1\":{\"86\":1}}],[\"这种变量在\",{\"1\":{\"1529\":1}}],[\"这种区分依赖于特定的平台\",{\"1\":{\"1481\":1}}],[\"这种映射本身操作系统就会完成\",{\"1\":{\"1318\":1}}],[\"这种补偿通常不够完整\",{\"1\":{\"1024\":1}}],[\"这种类型的参数称为\",{\"1\":{\"950\":1}}],[\"这种措施的好处就是可以降低内存带宽的需求\",{\"1\":{\"602\":1}}],[\"这种迟滞\",{\"1\":{\"576\":1}}],[\"这种预测用于决定是否预测特定指令的结果\",{\"1\":{\"576\":1}}],[\"这种计数器的优点在于\",{\"1\":{\"558\":1}}],[\"这种计算密集型任务虽然也可以用多任务完成\",{\"1\":{\"280\":1}}],[\"这种需要进行研究\",{\"1\":{\"545\":1}}],[\"这种复杂机制\",{\"1\":{\"543\":1}}],[\"这种\",{\"1\":{\"478\":1,\"690\":1}}],[\"这种写法不与父类类名绑定\",{\"1\":{\"426\":1}}],[\"这种是在测试脚本中直接使用固件的例子\",{\"1\":{\"377\":1}}],[\"这种做法称为\",{\"1\":{\"442\":1}}],[\"这种做法的优点在于\",{\"1\":{\"351\":1}}],[\"这种做法与初始化一个空的队列\",{\"1\":{\"88\":1}}],[\"这种隔离是把物理内存分成大小相等的页来实现的\",{\"1\":{\"251\":1}}],[\"这种转换过程一般会比较缓慢\",{\"1\":{\"250\":1}}],[\"这种分离是通过在流水线的连续\",{\"1\":{\"236\":1}}],[\"这种在做法可以有效地控制\",{\"1\":{\"226\":1}}],[\"这种场景可能适用于计算机清零某一页的内容这样的情况\",{\"1\":{\"218\":1}}],[\"这种情况叫做\",{\"1\":{\"985\":1}}],[\"这种情况在程序中很多\",{\"1\":{\"552\":1}}],[\"这种情况称作\",{\"1\":{\"253\":1}}],[\"这种情况\",{\"1\":{\"184\":1}}],[\"这种情况下\",{\"1\":{\"169\":1,\"208\":1,\"987\":1}}],[\"这种方案就完全失效了\",{\"1\":{\"1131\":1}}],[\"这种方式可以很精确地对于人体进行成像\",{\"1\":{\"1133\":1}}],[\"这种方式会往消息队列发送消息\",{\"1\":{\"844\":1}}],[\"这种方式会有大量写内存的操作\",{\"1\":{\"215\":1}}],[\"这种方式的缺点在于\",{\"1\":{\"728\":1}}],[\"这种方式以后可以加以尝试\",{\"1\":{\"644\":1}}],[\"这种方式还是可以应用的\",{\"1\":{\"200\":1}}],[\"这种方式求解的前缀和\",{\"1\":{\"160\":1}}],[\"这种方式在一定程度上可以提高性能\",{\"1\":{\"130\":1}}],[\"这种方法是静态方法\",{\"1\":{\"422\":1}}],[\"这种方法可能会使得迭代以外终止\",{\"1\":{\"358\":1}}],[\"这种方法要求必须是一个迭代器传入给函数\",{\"1\":{\"289\":1}}],[\"这种方法的好处是可以省去编译的时间\",{\"1\":{\"655\":1}}],[\"这种方法的优点在于\",{\"1\":{\"221\":1}}],[\"这种方法的缺点在于\",{\"1\":{\"216\":1}}],[\"这种方法同理\",{\"1\":{\"88\":1}}],[\"这种方法理解起来并不是很直观\",{\"1\":{\"46\":1}}],[\"这种解法的核心在于判断末尾是否已经搜索完成\",{\"1\":{\"77\":1}}],[\"这种解法的思路在于\",{\"1\":{\"52\":1}}],[\"这是最简单的实现方法\",{\"1\":{\"1537\":1}}],[\"这是最常用的协议\",{\"1\":{\"1311\":1}}],[\"这是自动推导了\",{\"1\":{\"1445\":1}}],[\"这是在\",{\"1\":{\"1389\":1}}],[\"这是在用户态可以配置的\",{\"1\":{\"1355\":1}}],[\"这是在缓存中就可以找到该指令\",{\"1\":{\"212\":1}}],[\"这是第四个参数\",{\"1\":{\"1345\":1}}],[\"这是由\",{\"1\":{\"1313\":1,\"1570\":1}}],[\"这是远远不够的\",{\"1\":{\"1153\":1,\"1350\":1}}],[\"这是r\",{\"1\":{\"1153\":1}}],[\"这是慢启动过程\",{\"1\":{\"987\":1}}],[\"这是为了\",{\"1\":{\"688\":1}}],[\"这是为了避免引入不必要的错误值\",{\"1\":{\"576\":1}}],[\"这是比较完备的举例\",{\"1\":{\"511\":1}}],[\"这是面试中的经典问题\",{\"1\":{\"468\":1}}],[\"这是我经常混淆的点\",{\"1\":{\"425\":1}}],[\"这是默认状态\",{\"1\":{\"418\":1}}],[\"这是\",{\"1\":{\"299\":1}}],[\"这是构造了一个hash\",{\"1\":{\"297\":1}}],[\"这是可能的\",{\"1\":{\"245\":1}}],[\"这是因为\",{\"1\":{\"652\":1,\"676\":1,\"688\":1}}],[\"这是因为我们需要提供一个feed\",{\"1\":{\"1212\":1}}],[\"这是因为我们在递归到最左边子树的时候\",{\"1\":{\"499\":1}}],[\"这是因为我们的递推公式中使用到了\",{\"1\":{\"120\":1}}],[\"这是因为缓存中可以保存的块的数量变少\",{\"1\":{\"210\":1}}],[\"这是百度百科冒泡排序算法的参考\",{\"1\":{\"183\":1}}],[\"这是一篇关于\",{\"1\":{\"1028\":1}}],[\"这是一种线性增长\",{\"1\":{\"987\":1}}],[\"这是一种软件全虚拟化方案\",{\"1\":{\"724\":1}}],[\"这是一种序列化二进制的表示形式\",{\"1\":{\"690\":1}}],[\"这是一段计算字符串\",{\"1\":{\"673\":1}}],[\"这是一个比较简单的例子\",{\"1\":{\"1440\":1}}],[\"这是一个关于如何获取\",{\"1\":{\"1278\":1}}],[\"这是一个使模型在测试数据上更robust的方法\",{\"1\":{\"1185\":1}}],[\"这是一个简单的示意图\",{\"1\":{\"691\":1}}],[\"这是一个很关键的调用栈\",{\"1\":{\"1515\":1}}],[\"这是一个很新手入门的图\",{\"1\":{\"653\":1}}],[\"这是一个很好的\",{\"1\":{\"562\":1}}],[\"这是一个正确的示例\",{\"1\":{\"432\":1}}],[\"这是一个基本的例子\",{\"1\":{\"285\":1}}],[\"这是一个\",{\"1\":{\"203\":1,\"654\":1}}],[\"这是一个经典的考虑顺序的完全背包组合问题\",{\"1\":{\"136\":1}}],[\"这是一个优化\",{\"1\":{\"134\":1}}],[\"这是一个完全背包且不考虑顺序的组合问题\",{\"1\":{\"134\":1}}],[\"这是一个换了个考法的斐波那契数列问题\",{\"1\":{\"103\":1}}],[\"这是一道华为的笔试题\",{\"1\":{\"406\":1}}],[\"这是一道比较隐晦的\",{\"1\":{\"125\":1}}],[\"这是一道迷宫搜索问题\",{\"1\":{\"74\":1}}],[\"这是该题目的\",{\"1\":{\"51\":1}}],[\"这是目前可以写出的比较高效的一个算法\",{\"1\":{\"47\":1}}],[\"这是普通主页的案例\",{\"1\":{\"0\":1}}],[\"这样参数就可以对应起来了\",{\"1\":{\"1573\":1}}],[\"这样做可以将初始化函数占用的内存释放出来\",{\"1\":{\"1553\":1}}],[\"这样做可以解决一些\",{\"1\":{\"1551\":1}}],[\"这样做的好处在于\",{\"1\":{\"1517\":1}}],[\"这样做的好处可以避免过多的回溯\",{\"1\":{\"15\":1}}],[\"这样在系统空闲的时候就可以停掉\",{\"1\":{\"1541\":1}}],[\"这样一来\",{\"1\":{\"1524\":1,\"1526\":1,\"1527\":1}}],[\"这样一次cnn计算就可以实现窗口滑动的所有子区域的分类预测\",{\"1\":{\"1153\":1}}],[\"这样才是进步之道\",{\"1\":{\"1355\":1}}],[\"这样会创建一个\",{\"1\":{\"1240\":1}}],[\"这样会导致吞吐率下降\",{\"1\":{\"978\":1}}],[\"这样得到的新的ope编码就保存了原有的顺序并可以取代后者\",{\"1\":{\"1170\":1}}],[\"这样设置的一个结果将会使一个单元格对应的边界框更加专业化\",{\"1\":{\"1156\":1}}],[\"这样理论上4个元素的大小应该在\",{\"1\":{\"1155\":1}}],[\"这样能够实现更快的检测速度\",{\"1\":{\"1022\":1}}],[\"这样不仅增加了特征的推算时长\",{\"1\":{\"1022\":1}}],[\"这样双向通信都可以避免因为\",{\"1\":{\"980\":1}}],[\"这样内核在写该结构时不至于越界\",{\"1\":{\"950\":1}}],[\"这样来自同一\",{\"1\":{\"764\":1}}],[\"这样每个副本都可以在另一个副本执行其他任务的同时处理各自的某个操作\",{\"1\":{\"739\":1}}],[\"这样达到了更加节省空间的目的\",{\"1\":{\"545\":1}}],[\"这样子两个链表就合成了一个链表\",{\"1\":{\"459\":1}}],[\"这样\",{\"1\":{\"251\":1,\"436\":1,\"460\":1,\"997\":1,\"1448\":1,\"1529\":1,\"1575\":1,\"1584\":1,\"1611\":1}}],[\"这样可以对比分析\",{\"1\":{\"1461\":1}}],[\"这样可以提高并发效率\",{\"1\":{\"736\":1}}],[\"这样可以提高性能\",{\"1\":{\"130\":1}}],[\"这样可以熟悉\",{\"1\":{\"74\":1}}],[\"这样稍微快一些\",{\"1\":{\"130\":1}}],[\"这样就实现了多个虚拟主机的代理\",{\"1\":{\"760\":1}}],[\"这样就得到了当前\",{\"1\":{\"530\":1}}],[\"这样就能很方便地查看是哪个参数通过\",{\"1\":{\"375\":1}}],[\"这样就可以改变解释器前面的那个外观了\",{\"1\":{\"367\":1}}],[\"这样就可以得到我们想要的输出形式了\",{\"1\":{\"60\":1}}],[\"这样就会导致数据不一致的问题\",{\"1\":{\"220\":1}}],[\"这样就减少了计算量\",{\"1\":{\"10\":1}}],[\"这样的做法会产生很多的子区域经过分类器去做预测\",{\"1\":{\"1153\":1}}],[\"这样的形式\",{\"1\":{\"692\":1}}],[\"这样的输出\",{\"1\":{\"612\":1}}],[\"这样的脚本语言运行效率很低\",{\"1\":{\"280\":1}}],[\"这样的程序会不停的在主存和辅存之间交换页面\",{\"1\":{\"253\":1}}],[\"这样的方式\",{\"1\":{\"172\":1}}],[\"这样的\",{\"1\":{\"58\":1}}],[\"这个地方放置临时性的\",{\"1\":{\"1631\":1}}],[\"这个地址字段就是一直有效的\",{\"1\":{\"602\":1}}],[\"这个互斥锁用于对临界区上锁\",{\"1\":{\"1607\":1}}],[\"这个代码比较重要\",{\"1\":{\"1606\":1}}],[\"这个步骤是向\",{\"1\":{\"1605\":1}}],[\"这个取值是由谁决定的\",{\"1\":{\"1597\":1}}],[\"这个绑定信息指的是\",{\"1\":{\"1597\":1}}],[\"这个调用的意思是说\",{\"1\":{\"1596\":1}}],[\"这个调用中有几个知识点可以注意的\",{\"1\":{\"1596\":1}}],[\"这个路径下面\",{\"1\":{\"1586\":1}}],[\"这个能不能用依赖于宏定义\",{\"1\":{\"1566\":1}}],[\"这个放在\",{\"1\":{\"1553\":1}}],[\"这个设置的前提是本\",{\"1\":{\"1545\":1}}],[\"这个开关是被使能的\",{\"1\":{\"1534\":1}}],[\"这个文档主要用于收集嵌入式和芯片中公开的\",{\"1\":{\"1505\":1}}],[\"这个文件\",{\"1\":{\"1586\":2}}],[\"这个文件没有被干掉\",{\"1\":{\"1424\":1}}],[\"这个文件是存储所有\",{\"1\":{\"1414\":1}}],[\"这个文件的创建使用\",{\"1\":{\"717\":1}}],[\"这个文件比较重要\",{\"1\":{\"707\":1,\"1405\":1}}],[\"这个系统服务举例就是\",{\"1\":{\"1498\":1}}],[\"这个系统变量显示了当前模块执行过程中的名称\",{\"1\":{\"403\":1}}],[\"这个介绍比较简单\",{\"1\":{\"1494\":1}}],[\"这个启动路径指的就是区分冷热启动\",{\"1\":{\"1481\":1}}],[\"这个后文会研究\",{\"1\":{\"1479\":1}}],[\"这个段中存放的是只读数据\",{\"1\":{\"1460\":1}}],[\"这个错误折磨了我好几天\",{\"1\":{\"1449\":1}}],[\"这个头文件中定义了最简单的一个函数\",{\"1\":{\"1446\":1}}],[\"这个不指定的话会报失败的\",{\"1\":{\"1445\":1}}],[\"这个不带辅助函数的解法是比带辅助函数的解法稍慢的\",{\"1\":{\"56\":1}}],[\"这个变量能否使用\",{\"1\":{\"1545\":1}}],[\"这个变量中\",{\"1\":{\"1428\":1}}],[\"这个变量用于组合问题\",{\"1\":{\"10\":1}}],[\"这个会造成在编译的时候加入定义\",{\"1\":{\"1425\":1}}],[\"这个环境变量的默认值的话\",{\"1\":{\"1424\":1}}],[\"这个可以是一个目标文件\",{\"1\":{\"1439\":1}}],[\"这个可以用来设置\",{\"1\":{\"1417\":1}}],[\"这个可以理解为一个完整的编译单元\",{\"1\":{\"691\":1}}],[\"这个好理解\",{\"1\":{\"1389\":1}}],[\"这个线程此时访问正在拷贝的对象的引用\",{\"1\":{\"1381\":1}}],[\"这个对象的引用\",{\"1\":{\"1381\":1}}],[\"这个单例就是描述当前进程的\",{\"1\":{\"1366\":1}}],[\"这个单独的控制器启动内存访问\",{\"1\":{\"212\":1}}],[\"这个算法的实现还是比较复杂的\",{\"1\":{\"1357\":1}}],[\"这个算法不单单是针对yolo算法的\",{\"1\":{\"1157\":1}}],[\"这个是\",{\"1\":{\"1606\":1}}],[\"这个是重中之重\",{\"1\":{\"1605\":1}}],[\"这个是要持有疑问的\",{\"1\":{\"1357\":1}}],[\"这个是引用知乎上的一个回答中的问题\",{\"1\":{\"690\":1}}],[\"这个研究主要针对于单个进程之间的组件隔离\",{\"1\":{\"1355\":1}}],[\"这个时候调用了\",{\"1\":{\"1300\":1}}],[\"这个主线程不会退出\",{\"1\":{\"1293\":1}}],[\"这个和\",{\"1\":{\"1240\":1}}],[\"这个章节研究\",{\"1\":{\"1497\":1}}],[\"这个章节中\",{\"1\":{\"1307\":1}}],[\"这个章节介绍使用\",{\"1\":{\"1227\":1}}],[\"这个章节主要介绍一些数据结构的基本概念及其应用\",{\"1\":{\"461\":1}}],[\"这个label文件应当是一个\",{\"1\":{\"1159\":1}}],[\"这个思路也被r\",{\"1\":{\"1153\":1}}],[\"这个思路十分巧妙\",{\"1\":{\"499\":1}}],[\"这个2x2的图上每个元素都是和原图是一一对应的\",{\"1\":{\"1153\":1}}],[\"这个目标文件了\",{\"1\":{\"1440\":1}}],[\"这个目标足够长远\",{\"1\":{\"1032\":1}}],[\"这个目标可能是存在于程序地址的任何空间中的\",{\"1\":{\"571\":1}}],[\"这个距离差的大小只与方向角\",{\"1\":{\"1025\":1}}],[\"这个限制是特定的浏览器及服务器对它的限制\",{\"1\":{\"998\":1}}],[\"这个机制不需要等待\",{\"1\":{\"987\":1}}],[\"这个机制最终还是没有保证\",{\"1\":{\"597\":1}}],[\"这个包就会回一次\",{\"1\":{\"980\":1}}],[\"这个网桥有若干接口\",{\"1\":{\"730\":1}}],[\"这个模式比较厉害\",{\"1\":{\"730\":1}}],[\"这个模块主要是研究算法和数据结构\",{\"1\":{\"3\":1}}],[\"这个进程\",{\"1\":{\"703\":1}}],[\"这个方法用于\",{\"1\":{\"1381\":1}}],[\"这个方法的功能非常简单\",{\"1\":{\"1333\":1}}],[\"这个方法定义在\",{\"1\":{\"702\":1}}],[\"这个方法由于上述限制\",{\"1\":{\"289\":1}}],[\"这个问题是萦绕在初学\",{\"1\":{\"696\":1,\"1396\":1}}],[\"这个问题的实现和完全背包也不尽完全相同\",{\"1\":{\"130\":1}}],[\"这个解析用的程序中有以下的细节需要注意\",{\"1\":{\"693\":1}}],[\"这个解法一是我一年前\",{\"1\":{\"499\":1}}],[\"这个解法不再需要额外的空间消耗\",{\"1\":{\"497\":1}}],[\"这个解法的核心思路就是\",{\"1\":{\"495\":1}}],[\"这个解法是没有回溯的解法优雅的\",{\"1\":{\"15\":1}}],[\"这个解法也是有助于我们理解这个题目的\",{\"1\":{\"15\":1}}],[\"这个参数\",{\"1\":{\"1591\":1}}],[\"这个参数的含义是需要处理的llvm\",{\"1\":{\"693\":1}}],[\"这个参数值为方法所属实例对象\",{\"1\":{\"419\":1}}],[\"这个类表示一个基本代码块\",{\"1\":{\"691\":1}}],[\"这个类顾名思义就是对应一个函数单元\",{\"1\":{\"691\":1}}],[\"这个类的内存布局只有一个\",{\"1\":{\"681\":1}}],[\"这个编译单元就是一个源码文件\",{\"1\":{\"691\":1}}],[\"这个缓存寄存器也叫累加器\",{\"1\":{\"689\":1}}],[\"这个描述字段中的值为\",{\"1\":{\"682\":1}}],[\"这个栈帧的设计比较巧妙\",{\"1\":{\"667\":1}}],[\"这个接口实现了增加一个新的\",{\"1\":{\"1611\":1}}],[\"这个接口实现了电源管理用例\",{\"1\":{\"1474\":1}}],[\"这个接口可以返回\",{\"1\":{\"316\":1}}],[\"这个接触比较多\",{\"1\":{\"643\":1}}],[\"这个云管理是否就是\",{\"1\":{\"641\":1}}],[\"这个比较好理解\",{\"1\":{\"600\":1}}],[\"这个比较函数实现上述比较关系的结果\",{\"1\":{\"185\":1}}],[\"这个优点导致的结果是\",{\"1\":{\"599\":1}}],[\"这个优点很多\",{\"1\":{\"558\":1}}],[\"这个预测错误率有一个计算的方法\",{\"1\":{\"594\":1}}],[\"这个预测器如果遇到了\",{\"1\":{\"584\":1}}],[\"这个预测器是对上下文不感知的\",{\"1\":{\"584\":1}}],[\"这个预测器的原理在于\",{\"1\":{\"584\":1}}],[\"这个结论也同样适用\",{\"1\":{\"586\":1}}],[\"这个技术可以再研究一下\",{\"1\":{\"582\":1}}],[\"这个技术通过屏蔽\",{\"1\":{\"581\":1}}],[\"这个值来自于内存中\",{\"1\":{\"580\":1}}],[\"这个迟滞可能的意思是说\",{\"1\":{\"576\":1}}],[\"这个的意思可能是\",{\"1\":{\"559\":1}}],[\"这个两级结构的图可以参考\",{\"1\":{\"555\":1}}],[\"这个博客上面展示了一个\",{\"1\":{\"522\":1}}],[\"这个里面指定寄存器\",{\"1\":{\"505\":1}}],[\"这个节点的左子树都比它小\",{\"1\":{\"499\":1}}],[\"这个节点将来就是用来替换\",{\"1\":{\"499\":1}}],[\"这个迭代中有几个关键点\",{\"1\":{\"486\":1}}],[\"这个迭代器\",{\"1\":{\"285\":1}}],[\"这个很重要\",{\"1\":{\"383\":1}}],[\"这个函数位于\",{\"1\":{\"1586\":1}}],[\"这个函数名字中的\",{\"1\":{\"1586\":1}}],[\"这个函数核心的逻辑是进入给定\",{\"1\":{\"1520\":1}}],[\"这个函数涉及到中断处理的相关操作\",{\"1\":{\"1517\":1}}],[\"这个函数就是用来设置\",{\"1\":{\"1425\":1}}],[\"这个函数不长\",{\"1\":{\"1365\":1}}],[\"这个函数的作用是\",{\"1\":{\"1570\":1}}],[\"这个函数的实现如下\",{\"1\":{\"1365\":1}}],[\"这个函数的调用也是在这个文件中的\",{\"1\":{\"707\":1,\"1405\":1}}],[\"这个函数分配的是内核中的虚拟内存\",{\"1\":{\"1345\":1}}],[\"这个函数是\",{\"1\":{\"1308\":1}}],[\"这个函数\",{\"1\":{\"1297\":1}}],[\"这个函数会返回文件对应的这行结果\",{\"1\":{\"354\":1}}],[\"这个函数求解\",{\"1\":{\"36\":1}}],[\"这个保证了下划线是可以和操作系统匹配的\",{\"1\":{\"352\":1}}],[\"这个数组是不能指定\",{\"1\":{\"331\":1}}],[\"这个数量作为二分查找的条件\",{\"1\":{\"36\":1}}],[\"这个闭包函数\",{\"1\":{\"293\":1}}],[\"这个状态是\",{\"1\":{\"225\":1}}],[\"这个状态有\",{\"1\":{\"88\":1}}],[\"这个第一眼看过去似乎是比较奇特的\",{\"1\":{\"218\":1}}],[\"这个之中还有一个矛盾在于\",{\"1\":{\"216\":1}}],[\"这个过程主要是从客户端\",{\"1\":{\"1331\":1}}],[\"这个过程主要发生了以下事情\",{\"1\":{\"1327\":1}}],[\"这个过程确认一下是否这样的\",{\"1\":{\"653\":1}}],[\"这个过程的实现是通过\",{\"1\":{\"252\":1}}],[\"这个过程分为两个部分\",{\"1\":{\"210\":1}}],[\"这个过程是比较耗时的\",{\"1\":{\"196\":1}}],[\"这个例子中的文件结构可以看到的话\",{\"1\":{\"1440\":1}}],[\"这个例子中的\",{\"1\":{\"198\":1}}],[\"这个以后再好好思考一下\",{\"1\":{\"196\":1}}],[\"这个字段被替换掉\",{\"1\":{\"577\":1}}],[\"这个字段会用于虚拟地址到物理地址的转换\",{\"1\":{\"261\":1}}],[\"这个字段\",{\"1\":{\"196\":1}}],[\"这个也是默认的情况\",{\"1\":{\"172\":1}}],[\"这个中间状态\",{\"1\":{\"120\":1}}],[\"这个子问题\",{\"1\":{\"117\":1}}],[\"这个递推公式表示在只考虑\",{\"1\":{\"117\":1}}],[\"这个题解目前还有很多的疑问点\",{\"1\":{\"102\":1}}],[\"这个题目需要用到二叉搜索树和两数之和解法的一些特性\",{\"1\":{\"494\":1}}],[\"这个题目涉及到基础知识\",{\"1\":{\"479\":1}}],[\"这个题目可以用滑动窗口\",{\"1\":{\"167\":1}}],[\"这个题目和上述例题都是完全背包问题\",{\"1\":{\"134\":1}}],[\"这个题目描述比较长\",{\"1\":{\"92\":1}}],[\"这个题目描述比较复杂\",{\"1\":{\"90\":1,\"155\":1}}],[\"这个题目较为复杂\",{\"1\":{\"89\":1}}],[\"这个题目真可谓是返璞归真\",{\"1\":{\"89\":1}}],[\"这个题目中用到了一种\",{\"1\":{\"79\":1}}],[\"这个题目就是给你一个二维的矩阵\",{\"1\":{\"78\":1}}],[\"这个题目不同于二叉树层次遍历的地方在于\",{\"1\":{\"60\":1}}],[\"这个题目的关键就是用\",{\"1\":{\"59\":1}}],[\"这个题目的难点在于想到可以使用二分查找求解\",{\"1\":{\"36\":1}}],[\"这个题目存在以下几个难点\",{\"1\":{\"58\":1}}],[\"这个题目存在\",{\"1\":{\"56\":1}}],[\"这个题目对查找插入位置的概念进行了强化\",{\"1\":{\"32\":1}}],[\"这个按照\",{\"1\":{\"92\":1}}],[\"这个邻接表的含义是\",{\"1\":{\"89\":1}}],[\"这个在内核中是如此兼容的\",{\"1\":{\"1551\":1}}],[\"这个在其他论文中提到了\",{\"1\":{\"589\":1}}],[\"这个在\",{\"1\":{\"88\":1}}],[\"这个组合对应着\",{\"1\":{\"88\":1}}],[\"这个测试用例的\",{\"1\":{\"81\":1}}],[\"这个顺序需要保证\",{\"1\":{\"61\":1}}],[\"这个队列拿空\",{\"1\":{\"47\":1,\"59\":1}}],[\"这个\",{\"1\":{\"36\":1,\"47\":1,\"88\":2,\"221\":1,\"234\":1,\"255\":1,\"256\":1,\"558\":1,\"559\":1,\"602\":2,\"657\":1,\"1240\":1,\"1355\":1,\"1428\":1,\"1440\":1,\"1499\":1,\"1523\":1,\"1607\":1}}],[\"这个速度的最小值为\",{\"1\":{\"34\":1}}],[\"这个速度是每次吃香蕉的速度\",{\"1\":{\"34\":1}}],[\"这个操作顺便复习一下二分查找\",{\"1\":{\"30\":1}}],[\"这个剪枝相比于上面的解法高明之处在哪里呢\",{\"1\":{\"10\":1}}],[\"a53\",{\"1\":{\"1485\":1}}],[\"a57\",{\"1\":{\"1485\":1}}],[\"a4d3e62\",{\"1\":{\"1275\":1}}],[\"a和part\",{\"1\":{\"1012\":1}}],[\"ajax\",{\"1\":{\"923\":1,\"1105\":1}}],[\"aoa\",{\"0\":{\"1025\":1,\"1123\":1},\"1\":{\"1012\":2,\"1025\":6,\"1123\":3,\"1124\":2,\"1125\":1,\"1126\":1,\"1127\":1}}],[\"aopalliance\",{\"1\":{\"1626\":1}}],[\"aop\",{\"0\":{\"877\":1,\"878\":1},\"1\":{\"869\":1,\"878\":2}}],[\"aotlibrary=\",{\"1\":{\"658\":2}}],[\"aotlibrary\",{\"1\":{\"658\":1}}],[\"aot\",{\"0\":{\"653\":1,\"654\":1,\"656\":1,\"658\":1,\"659\":1},\"1\":{\"651\":1,\"653\":4,\"654\":3,\"657\":2,\"658\":3,\"659\":1,\"662\":1}}],[\"aweme\",{\"1\":{\"1276\":2}}],[\"awk\",{\"0\":{\"751\":1},\"1\":{\"746\":1,\"751\":16}}],[\"awt\",{\"1\":{\"705\":1,\"1400\":1}}],[\"away\",{\"1\":{\"1545\":1}}],[\"award↩︎\",{\"1\":{\"606\":1}}],[\"award\",{\"1\":{\"568\":1}}],[\"awareness\",{\"1\":{\"1623\":1}}],[\"aware\",{\"1\":{\"237\":1,\"583\":1}}],[\"await\",{\"1\":{\"414\":1,\"415\":1}}],[\"azk8s\",{\"1\":{\"619\":1}}],[\"azeria\",{\"1\":{\"539\":1}}],[\"ahead\",{\"1\":{\"509\":3,\"682\":1}}],[\"a3\",{\"1\":{\"431\":1}}],[\"a2\",{\"1\":{\"431\":1}}],[\"aarch32\",{\"1\":{\"1483\":4}}],[\"aarch64\",{\"1\":{\"510\":1,\"511\":1,\"1483\":4,\"1485\":1}}],[\"aaaa\",{\"1\":{\"479\":1}}],[\"aaa\",{\"1\":{\"431\":3,\"479\":3,\"791\":1,\"797\":1}}],[\"aa1003f5\",{\"1\":{\"354\":1}}],[\"a1\",{\"1\":{\"426\":3,\"431\":1,\"810\":1}}],[\"a123456a\",{\"1\":{\"375\":1}}],[\"a表示在文件后追加写\",{\"1\":{\"361\":1}}],[\"a+\",{\"1\":{\"361\":3}}],[\"a+b\",{\"1\":{\"91\":3}}],[\"a+b−1\",{\"1\":{\"28\":1}}],[\"ayu\",{\"1\":{\"1638\":1}}],[\"ay\",{\"1\":{\"317\":1}}],[\"axx\",{\"0\":{\"1358\":1}}],[\"axios\",{\"0\":{\"923\":1},\"1\":{\"923\":6,\"1055\":1}}],[\"ax\",{\"1\":{\"317\":1,\"396\":1,\"758\":1}}],[\"agree\",{\"1\":{\"1623\":1}}],[\"ago\",{\"1\":{\"1623\":1}}],[\"agc\",{\"1\":{\"1024\":1}}],[\"agnostic\",{\"1\":{\"583\":1}}],[\"against\",{\"1\":{\"576\":1,\"1490\":1,\"1497\":1}}],[\"aged\",{\"1\":{\"1388\":2}}],[\"age\",{\"1\":{\"308\":2,\"381\":5,\"388\":2,\"412\":2,\"424\":2,\"432\":39,\"433\":5,\"676\":7,\"681\":1,\"682\":2,\"791\":1,\"792\":1,\"926\":3,\"940\":1}}],[\"aggressive\",{\"1\":{\"241\":1,\"245\":2,\"564\":1}}],[\"ap\",{\"1\":{\"1020\":1,\"1120\":1,\"1476\":1,\"1493\":1}}],[\"aplha\",{\"1\":{\"898\":1}}],[\"april\",{\"1\":{\"892\":1,\"907\":1}}],[\"apache\",{\"1\":{\"859\":1}}],[\"apex\",{\"1\":{\"707\":1,\"1287\":10,\"1405\":1}}],[\"apk\",{\"1\":{\"671\":1,\"701\":2,\"1274\":1}}],[\"apis\",{\"0\":{\"1568\":1}}],[\"apic计数器等\",{\"1\":{\"1527\":1}}],[\"apikey\",{\"1\":{\"1094\":1}}],[\"api规范\",{\"1\":{\"797\":1}}],[\"api\",{\"0\":{\"286\":1,\"346\":1},\"1\":{\"310\":1,\"315\":1,\"373\":2,\"374\":1,\"382\":2,\"411\":1,\"412\":1,\"725\":2,\"937\":1,\"941\":1,\"1094\":4,\"1216\":1,\"1219\":1,\"1341\":1,\"1569\":1,\"1577\":1,\"1592\":2}}],[\"apt\",{\"0\":{\"270\":1},\"1\":{\"270\":3,\"273\":1,\"445\":1,\"620\":1,\"692\":1,\"712\":1,\"744\":1,\"770\":1,\"775\":1,\"780\":1,\"861\":1,\"916\":3,\"1073\":2,\"1145\":3,\"1431\":1,\"1635\":1,\"1641\":1}}],[\"appname\",{\"1\":{\"1274\":1}}],[\"app=app\",{\"1\":{\"858\":1}}],[\"apps\",{\"1\":{\"776\":1,\"785\":1,\"864\":1}}],[\"app\",{\"0\":{\"1273\":1,\"1275\":1,\"1276\":1,\"1277\":1},\"1\":{\"621\":1,\"623\":2,\"643\":1,\"703\":1,\"796\":4,\"843\":5,\"850\":2,\"851\":2,\"858\":7,\"864\":4,\"904\":1,\"939\":1,\"1004\":2,\"1042\":1,\"1052\":1,\"1055\":1,\"1057\":1,\"1099\":1,\"1185\":1,\"1219\":6,\"1275\":4,\"1277\":2,\"1278\":2,\"1293\":1,\"1326\":3,\"1327\":2,\"1328\":1,\"1374\":4}}],[\"appropriate\",{\"1\":{\"942\":1,\"1507\":1,\"1571\":1,\"1623\":1}}],[\"approximation\",{\"1\":{\"557\":1}}],[\"approximately\",{\"1\":{\"557\":1}}],[\"approaches\",{\"1\":{\"241\":1}}],[\"approach使用公式\",{\"1\":{\"98\":1}}],[\"approach\",{\"1\":{\"95\":1,\"96\":1}}],[\"appdatadir\",{\"1\":{\"702\":2}}],[\"appdata\",{\"1\":{\"336\":1}}],[\"appliances\",{\"1\":{\"1501\":1}}],[\"applied\",{\"1\":{\"573\":1}}],[\"applicability\",{\"1\":{\"321\":1}}],[\"applicationcontext\",{\"0\":{\"873\":1},\"1\":{\"872\":3,\"873\":4}}],[\"application\",{\"0\":{\"864\":1,\"1302\":1},\"1\":{\"227\":1,\"331\":1,\"703\":2,\"760\":1,\"775\":1,\"777\":1,\"778\":1,\"850\":4,\"851\":3,\"1094\":1,\"1479\":1,\"1493\":1,\"1508\":1}}],[\"applications\",{\"1\":{\"227\":2,\"777\":1,\"851\":1,\"1189\":1,\"1202\":1,\"1508\":2,\"1623\":1}}],[\"apply\",{\"1\":{\"235\":1,\"285\":1,\"844\":6,\"896\":1,\"1054\":1,\"1185\":1,\"1217\":1}}],[\"appendformat\",{\"1\":{\"1295\":1}}],[\"appending\",{\"1\":{\"341\":1}}],[\"appendix\",{\"1\":{\"237\":1,\"245\":1}}],[\"appendleft\",{\"1\":{\"60\":1,\"341\":2}}],[\"append\",{\"0\":{\"837\":1},\"1\":{\"6\":1,\"8\":2,\"9\":6,\"10\":4,\"11\":2,\"12\":2,\"13\":2,\"14\":2,\"42\":2,\"43\":2,\"45\":1,\"46\":2,\"47\":9,\"52\":2,\"54\":3,\"57\":2,\"59\":4,\"61\":4,\"64\":2,\"75\":1,\"77\":1,\"80\":1,\"84\":1,\"85\":1,\"86\":3,\"88\":5,\"89\":2,\"90\":3,\"91\":1,\"92\":1,\"102\":2,\"150\":2,\"155\":1,\"159\":2,\"165\":2,\"285\":1,\"294\":1,\"313\":1,\"341\":3,\"343\":1,\"356\":1,\"361\":2,\"387\":1,\"393\":1,\"402\":1,\"465\":2,\"466\":1,\"467\":2,\"468\":2,\"486\":2,\"493\":1,\"496\":1,\"664\":1,\"837\":1}}],[\"averaging\",{\"1\":{\"1208\":1}}],[\"averages\",{\"1\":{\"1185\":4}}],[\"average\",{\"1\":{\"234\":1,\"381\":1,\"547\":2,\"548\":1,\"549\":3,\"1185\":2,\"1207\":1,\"1217\":3}}],[\"avl\",{\"1\":{\"1169\":1}}],[\"avg\",{\"1\":{\"1142\":1}}],[\"avoid\",{\"1\":{\"558\":1,\"576\":2,\"602\":1,\"748\":1,\"962\":1,\"1366\":1,\"1376\":1}}],[\"avoided\",{\"1\":{\"548\":1}}],[\"avoiding\",{\"1\":{\"237\":1}}],[\"available\",{\"1\":{\"195\":1,\"235\":1,\"241\":1,\"250\":1,\"620\":1,\"747\":1,\"786\":1,\"1054\":1,\"1124\":1,\"1487\":2,\"1492\":1,\"1494\":1,\"1518\":2}}],[\"auxiliary\",{\"1\":{\"1179\":1}}],[\"aux\",{\"1\":{\"1179\":1}}],[\"aug\",{\"1\":{\"1053\":7}}],[\"august\",{\"0\":{\"1053\":1},\"1\":{\"892\":1,\"907\":1}}],[\"augmented\",{\"1\":{\"558\":1}}],[\"authentication\",{\"1\":{\"1056\":1}}],[\"auth\",{\"1\":{\"841\":1}}],[\"author\",{\"0\":{\"1\":1},\"1\":{\"271\":1}}],[\"automutex\",{\"1\":{\"1294\":1}}],[\"automatically\",{\"1\":{\"940\":2,\"1219\":1,\"1501\":1}}],[\"automaticlly\",{\"1\":{\"923\":1}}],[\"automatic\",{\"1\":{\"775\":1}}],[\"automaton\",{\"1\":{\"543\":1}}],[\"autoindent\",{\"1\":{\"1259\":1}}],[\"autosize\",{\"1\":{\"1193\":1}}],[\"autotools\",{\"1\":{\"775\":1,\"776\":1,\"778\":2,\"785\":1}}],[\"autouse=true\",{\"1\":{\"382\":1}}],[\"autouse\",{\"1\":{\"380\":2}}],[\"auto\",{\"1\":{\"344\":2,\"455\":2,\"480\":2,\"774\":1,\"1080\":1,\"1111\":1,\"1428\":2,\"1623\":2}}],[\"audio\",{\"1\":{\"227\":1}}],[\"ams\",{\"1\":{\"1333\":1}}],[\"amp\",{\"1\":{\"1327\":1}}],[\"amplitude\",{\"0\":{\"1207\":1},\"1\":{\"1204\":1,\"1207\":1}}],[\"amplifying\",{\"1\":{\"1118\":1}}],[\"amend\",{\"1\":{\"1241\":2}}],[\"amend选项\",{\"1\":{\"1241\":1}}],[\"amenable\",{\"1\":{\"542\":1,\"543\":2}}],[\"ambiguity\",{\"1\":{\"1060\":1}}],[\"am\",{\"0\":{\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1},\"1\":{\"425\":3,\"581\":4,\"592\":5,\"593\":10,\"594\":1,\"595\":6,\"702\":1,\"1272\":1,\"1276\":3,\"1277\":1}}],[\"amd64\",{\"1\":{\"786\":2}}],[\"amd\",{\"1\":{\"225\":1,\"724\":1}}],[\"amounts\",{\"1\":{\"604\":1}}],[\"amount\",{\"1\":{\"130\":10,\"134\":4,\"1487\":3,\"1494\":1,\"1536\":1,\"1623\":1}}],[\"a9\",{\"1\":{\"204\":1}}],[\"a75\",{\"1\":{\"566\":1}}],[\"a7\",{\"1\":{\"204\":1}}],[\"asbinder\",{\"1\":{\"1329\":1}}],[\"ashmemcreate\",{\"1\":{\"1320\":1}}],[\"asia\",{\"1\":{\"1113\":2}}],[\"aspectjautoproxyregistrar\",{\"1\":{\"879\":2}}],[\"aspectj\",{\"1\":{\"879\":2}}],[\"aspects\",{\"1\":{\"233\":1}}],[\"asplos\",{\"0\":{\"598\":1},\"1\":{\"606\":1}}],[\"asr\",{\"1\":{\"514\":1}}],[\"asmirrorptr\",{\"1\":{\"508\":1}}],[\"asm\",{\"0\":{\"502\":1},\"1\":{\"502\":3,\"504\":1,\"507\":2,\"510\":1,\"511\":3}}],[\"ascher\",{\"1\":{\"1501\":1}}],[\"ascii\",{\"1\":{\"390\":1,\"391\":1,\"404\":1}}],[\"ascending\",{\"1\":{\"341\":1}}],[\"ascending=false\",{\"1\":{\"331\":2}}],[\"as52345fasdf4\",{\"1\":{\"375\":1}}],[\"asdfghjkl\",{\"1\":{\"343\":1}}],[\"asynchronous\",{\"1\":{\"1483\":1}}],[\"asyncio\",{\"0\":{\"415\":1},\"1\":{\"414\":1,\"415\":4}}],[\"async\",{\"1\":{\"285\":1,\"414\":1,\"844\":8,\"1340\":1,\"1341\":1,\"1483\":1}}],[\"asked\",{\"1\":{\"236\":1}}],[\"as\",{\"1\":{\"194\":3,\"195\":1,\"204\":1,\"227\":2,\"234\":1,\"236\":1,\"237\":5,\"241\":1,\"243\":1,\"245\":1,\"256\":2,\"261\":2,\"288\":1,\"289\":4,\"298\":2,\"308\":2,\"321\":2,\"329\":1,\"341\":1,\"355\":1,\"356\":1,\"358\":1,\"359\":1,\"360\":1,\"371\":1,\"406\":1,\"410\":1,\"542\":2,\"543\":8,\"547\":1,\"548\":4,\"549\":4,\"552\":2,\"553\":2,\"556\":2,\"558\":5,\"559\":5,\"562\":6,\"573\":1,\"584\":1,\"599\":2,\"600\":2,\"604\":2,\"747\":1,\"759\":1,\"774\":1,\"778\":1,\"793\":1,\"853\":1,\"898\":1,\"936\":2,\"939\":1,\"940\":1,\"975\":5,\"1072\":1,\"1073\":1,\"1075\":3,\"1077\":1,\"1084\":2,\"1118\":2,\"1125\":1,\"1142\":3,\"1153\":1,\"1185\":3,\"1186\":2,\"1192\":2,\"1198\":2,\"1202\":1,\"1203\":1,\"1212\":6,\"1216\":3,\"1217\":5,\"1244\":1,\"1385\":1,\"1419\":1,\"1474\":2,\"1475\":1,\"1481\":1,\"1482\":1,\"1487\":2,\"1496\":2,\"1498\":4,\"1499\":3,\"1501\":6,\"1507\":3,\"1508\":2,\"1536\":1,\"1545\":1,\"1592\":1,\"1611\":1,\"1620\":1,\"1623\":4}}],[\"assign\",{\"1\":{\"558\":1,\"1217\":1,\"1571\":1}}],[\"assignment\",{\"1\":{\"418\":6,\"566\":1,\"1509\":1}}],[\"assigning\",{\"1\":{\"339\":1}}],[\"assumed\",{\"1\":{\"243\":1}}],[\"assuming\",{\"1\":{\"217\":1,\"237\":1,\"557\":2}}],[\"asset\",{\"0\":{\"1108\":1}}],[\"assets\",{\"1\":{\"1079\":7,\"1081\":2,\"1244\":1}}],[\"assembly\",{\"0\":{\"501\":1},\"1\":{\"234\":2,\"502\":2}}],[\"assertion\",{\"1\":{\"1483\":1,\"1494\":1}}],[\"asserted\",{\"1\":{\"1388\":1,\"1499\":1}}],[\"assertequal\",{\"1\":{\"90\":1,\"102\":1,\"150\":2,\"173\":1,\"385\":2}}],[\"assert\",{\"1\":{\"371\":1,\"372\":2,\"374\":1,\"375\":2,\"377\":1,\"381\":1,\"382\":1,\"1524\":2}}],[\"assertcountequal\",{\"1\":{\"81\":2}}],[\"association\",{\"1\":{\"606\":1}}],[\"associating\",{\"1\":{\"580\":1}}],[\"associative\",{\"0\":{\"200\":1,\"202\":1,\"203\":1},\"1\":{\"194\":5,\"199\":2,\"202\":3,\"204\":1,\"230\":1}}],[\"associativity\",{\"1\":{\"194\":4}}],[\"associate\",{\"1\":{\"200\":1}}],[\"associated\",{\"1\":{\"195\":1,\"196\":1,\"558\":1,\"702\":1,\"851\":1,\"1485\":1,\"1592\":1}}],[\"atomic\",{\"0\":{\"1563\":1},\"1\":{\"1562\":1,\"1563\":6,\"1570\":8,\"1575\":10,\"1576\":6,\"1577\":3,\"1590\":1}}],[\"atheors\",{\"1\":{\"1202\":1}}],[\"ath\",{\"1\":{\"718\":1}}],[\"attenuated\",{\"1\":{\"1121\":1}}],[\"attenuating\",{\"1\":{\"1118\":1}}],[\"attenuation\",{\"1\":{\"1118\":1}}],[\"attemptconnectiontosecondaryzygote\",{\"1\":{\"703\":2}}],[\"attemptconnectiontoprimaryzygote\",{\"1\":{\"703\":1}}],[\"attempts\",{\"1\":{\"256\":1}}],[\"attempt\",{\"1\":{\"236\":1}}],[\"attr\",{\"1\":{\"1590\":3,\"1595\":2,\"1596\":4}}],[\"attribution\",{\"1\":{\"1055\":1}}],[\"attributes\",{\"1\":{\"664\":1,\"692\":1,\"1553\":1}}],[\"attributeerror\",{\"1\":{\"421\":1,\"436\":1}}],[\"attribute\",{\"0\":{\"1554\":1},\"1\":{\"408\":3,\"421\":1,\"436\":1,\"572\":1,\"941\":1,\"1553\":3,\"1554\":4,\"1558\":1,\"1590\":2,\"1595\":1,\"1596\":1}}],[\"attrs\",{\"1\":{\"692\":1,\"1590\":3}}],[\"at\",{\"0\":{\"549\":2},\"1\":{\"146\":1,\"234\":3,\"236\":3,\"241\":1,\"245\":3,\"271\":1,\"361\":8,\"454\":1,\"465\":2,\"543\":4,\"548\":1,\"549\":8,\"552\":2,\"557\":2,\"558\":2,\"559\":2,\"565\":3,\"593\":1,\"599\":1,\"675\":1,\"851\":2,\"892\":1,\"898\":1,\"1056\":1,\"1060\":1,\"1074\":1,\"1076\":1,\"1077\":1,\"1079\":2,\"1099\":2,\"1118\":1,\"1123\":2,\"1143\":2,\"1479\":3,\"1481\":1,\"1483\":1,\"1487\":3,\"1490\":2,\"1494\":1,\"1497\":2,\"1501\":1,\"1508\":1,\"1534\":1,\"1536\":1,\"1611\":1,\"1623\":2}}],[\"atlantic\",{\"1\":{\"78\":1,\"79\":3,\"80\":2}}],[\"acpu\",{\"1\":{\"1510\":1}}],[\"acquireresult\",{\"1\":{\"1333\":2}}],[\"acquire\",{\"1\":{\"1310\":2,\"1366\":1}}],[\"acked\",{\"1\":{\"989\":1}}],[\"ack>\",{\"1\":{\"982\":1}}],[\"acknowledgments\",{\"1\":{\"988\":1}}],[\"acknowledgment\",{\"1\":{\"978\":2}}],[\"acknowledgements\",{\"0\":{\"1617\":1}}],[\"acknowledgement\",{\"1\":{\"975\":1}}],[\"ack\",{\"1\":{\"976\":1,\"978\":6,\"980\":2,\"982\":2,\"983\":2,\"984\":4,\"985\":3,\"987\":4,\"988\":3}}],[\"ac\",{\"1\":{\"850\":1}}],[\"acm\",{\"1\":{\"606\":1}}],[\"achieved\",{\"1\":{\"1623\":1}}],[\"achieve\",{\"1\":{\"558\":1,\"988\":1,\"1623\":3}}],[\"achieves\",{\"1\":{\"542\":1}}],[\"actuators\",{\"1\":{\"1508\":1}}],[\"actually\",{\"1\":{\"236\":3,\"558\":1,\"1553\":1}}],[\"actual\",{\"1\":{\"195\":1,\"572\":1}}],[\"act\",{\"1\":{\"1501\":1}}],[\"action\",{\"1\":{\"751\":2,\"1272\":1,\"1567\":2,\"1573\":1}}],[\"activation=linear\",{\"1\":{\"1162\":1}}],[\"activate\",{\"1\":{\"275\":1,\"444\":1,\"854\":1}}],[\"activities\",{\"1\":{\"1130\":1}}],[\"activitymanagerservice\",{\"1\":{\"702\":2}}],[\"activity\",{\"0\":{\"1275\":1},\"1\":{\"342\":1,\"701\":1,\"1275\":2,\"1277\":1}}],[\"active\",{\"1\":{\"445\":1,\"850\":1,\"955\":1,\"1259\":1,\"1597\":1,\"1623\":1}}],[\"across\",{\"1\":{\"236\":1}}],[\"accident\",{\"1\":{\"1623\":1}}],[\"account\",{\"1\":{\"781\":1,\"1099\":1}}],[\"accordingly\",{\"1\":{\"891\":1,\"1498\":1}}],[\"according\",{\"1\":{\"557\":1,\"1203\":1,\"1204\":1,\"1206\":1}}],[\"accelerate\",{\"0\":{\"1244\":1},\"1\":{\"1189\":1,\"1354\":1}}],[\"accept\",{\"0\":{\"952\":1},\"1\":{\"748\":1,\"950\":2,\"951\":2,\"952\":2,\"955\":1,\"984\":2,\"999\":1,\"1320\":1,\"1333\":1}}],[\"accesses\",{\"1\":{\"250\":2,\"256\":1,\"261\":1,\"1485\":1}}],[\"accessed\",{\"1\":{\"194\":1,\"256\":1,\"555\":1,\"559\":4,\"850\":1,\"1344\":1}}],[\"access\",{\"1\":{\"227\":5,\"236\":2,\"243\":1,\"245\":4,\"255\":3,\"259\":1,\"261\":1,\"556\":1,\"582\":1,\"584\":1,\"640\":1,\"759\":1,\"941\":1,\"1120\":1,\"1474\":1,\"1485\":2,\"1486\":1,\"1491\":1,\"1492\":4,\"1498\":1,\"1499\":1,\"1620\":2}}],[\"accessing\",{\"1\":{\"204\":1,\"602\":1}}],[\"acc\",{\"1\":{\"664\":4,\"1620\":1}}],[\"accumulator\",{\"1\":{\"1620\":1}}],[\"accumulated\",{\"1\":{\"1591\":1}}],[\"accumulate\",{\"1\":{\"144\":1,\"146\":4,\"147\":2,\"152\":2,\"155\":1,\"156\":1,\"157\":1,\"159\":1,\"160\":1}}],[\"accuracy\",{\"0\":{\"558\":1,\"591\":1},\"1\":{\"243\":1,\"542\":1,\"543\":3,\"547\":1,\"549\":2,\"558\":5,\"581\":1,\"592\":1}}],[\"accurately\",{\"1\":{\"573\":1,\"600\":1,\"1130\":1}}],[\"accurate\",{\"1\":{\"243\":1,\"558\":1,\"564\":1,\"1130\":2}}],[\"acgt\",{\"1\":{\"92\":1}}],[\"a−\",{\"1\":{\"91\":1}}],[\"airline\",{\"1\":{\"1258\":3,\"1259\":4}}],[\"ai\",{\"1\":{\"86\":6,\"643\":1}}],[\"annotationawareordercomparator\",{\"0\":{\"1628\":1},\"1\":{\"1627\":1}}],[\"annual\",{\"1\":{\"606\":1}}],[\"anchor\",{\"1\":{\"1623\":5}}],[\"anchors\",{\"1\":{\"1162\":1,\"1623\":2}}],[\"ancestor\",{\"1\":{\"806\":2}}],[\"antenna\",{\"1\":{\"1123\":1,\"1143\":1}}],[\"antennas\",{\"1\":{\"1120\":1,\"1124\":1}}],[\"angle\",{\"1\":{\"1055\":1,\"1123\":1,\"1623\":1}}],[\"animation\",{\"1\":{\"1055\":1}}],[\"animating\",{\"0\":{\"922\":1}}],[\"animated\",{\"1\":{\"944\":2}}],[\"animate\",{\"0\":{\"944\":1},\"1\":{\"944\":1,\"1055\":1}}],[\"animal\",{\"1\":{\"425\":3,\"427\":2}}],[\"ane\",{\"1\":{\"717\":2}}],[\"analysis\",{\"0\":{\"705\":1,\"1399\":1}}],[\"analyzers\",{\"1\":{\"1511\":1}}],[\"analyzed\",{\"1\":{\"580\":1}}],[\"analyze\",{\"1\":{\"243\":1}}],[\"ano\",{\"1\":{\"753\":1}}],[\"anomalous\",{\"1\":{\"576\":1}}],[\"another\",{\"1\":{\"176\":1,\"217\":1,\"236\":3,\"243\":1,\"557\":1,\"677\":1,\"1072\":1,\"1208\":1,\"1219\":1,\"1383\":1,\"1592\":1,\"1609\":2}}],[\"anything\",{\"1\":{\"1551\":1,\"1623\":1}}],[\"anywhere\",{\"1\":{\"1105\":1}}],[\"anymore\",{\"1\":{\"543\":2}}],[\"any\",{\"1\":{\"361\":2,\"545\":1,\"556\":1,\"557\":1,\"573\":1,\"602\":1,\"751\":1,\"780\":1,\"907\":1,\"941\":1,\"1072\":1,\"1079\":1,\"1385\":1,\"1421\":1,\"1483\":2,\"1498\":1,\"1508\":1,\"1536\":1,\"1619\":1}}],[\"anr\",{\"1\":{\"348\":7,\"349\":6,\"1226\":4}}],[\"an\",{\"0\":{\"1165\":1,\"1191\":1,\"1194\":1},\"1\":{\"164\":1,\"186\":1,\"194\":2,\"203\":1,\"204\":1,\"212\":2,\"234\":4,\"236\":3,\"237\":2,\"244\":1,\"245\":5,\"308\":1,\"321\":4,\"341\":1,\"465\":4,\"504\":1,\"542\":1,\"543\":1,\"548\":2,\"556\":1,\"558\":2,\"559\":6,\"577\":1,\"584\":2,\"592\":1,\"675\":1,\"676\":1,\"750\":1,\"851\":2,\"892\":1,\"896\":1,\"897\":1,\"927\":1,\"975\":1,\"1073\":1,\"1075\":1,\"1079\":1,\"1080\":1,\"1120\":1,\"1125\":3,\"1143\":1,\"1189\":1,\"1192\":1,\"1203\":1,\"1207\":1,\"1208\":1,\"1216\":1,\"1219\":1,\"1376\":1,\"1381\":5,\"1388\":1,\"1389\":1,\"1429\":1,\"1481\":1,\"1483\":2,\"1494\":1,\"1498\":1,\"1501\":1,\"1507\":2,\"1509\":1,\"1570\":1,\"1573\":1,\"1592\":2,\"1609\":1,\"1611\":2,\"1618\":1,\"1620\":1,\"1623\":2}}],[\"answer\",{\"1\":{\"748\":1}}],[\"answerkey\",{\"1\":{\"164\":3}}],[\"ans\",{\"1\":{\"74\":9,\"160\":5,\"343\":3}}],[\"andriod\",{\"1\":{\"1371\":1}}],[\"android10\",{\"1\":{\"708\":1,\"1406\":1}}],[\"android\",{\"0\":{\"1227\":1,\"1329\":1,\"1333\":1,\"1659\":1},\"1\":{\"266\":2,\"664\":1,\"669\":1,\"696\":1,\"702\":2,\"703\":3,\"707\":1,\"1240\":2,\"1272\":2,\"1276\":2,\"1287\":7,\"1291\":1,\"1293\":1,\"1298\":1,\"1307\":1,\"1308\":1,\"1309\":1,\"1311\":1,\"1322\":2,\"1327\":1,\"1333\":3,\"1350\":1,\"1352\":1,\"1353\":2,\"1365\":1,\"1396\":1,\"1405\":1},\"2\":{\"1288\":1,\"1323\":1,\"1324\":1,\"1335\":1,\"1336\":1,\"1347\":1,\"1348\":1,\"1360\":1,\"1361\":1}}],[\"and\",{\"0\":{\"243\":1,\"260\":1,\"266\":1,\"267\":1,\"341\":1,\"394\":1,\"398\":1,\"399\":1,\"413\":1,\"440\":1,\"537\":1,\"557\":1,\"736\":1,\"751\":1,\"823\":1,\"905\":1,\"912\":1,\"916\":1,\"953\":1,\"965\":1,\"998\":1,\"999\":1,\"1004\":1,\"1079\":1,\"1099\":1,\"1150\":1,\"1165\":1,\"1175\":1,\"1191\":1,\"1194\":1,\"1203\":1,\"1216\":1,\"1262\":1,\"1266\":1,\"1280\":1,\"1487\":1,\"1506\":1,\"1576\":1,\"1617\":1,\"1644\":1},\"1\":{\"10\":1,\"11\":2,\"13\":2,\"14\":1,\"15\":1,\"19\":1,\"22\":2,\"49\":1,\"51\":3,\"52\":1,\"54\":1,\"74\":6,\"75\":1,\"79\":3,\"80\":4,\"85\":2,\"87\":1,\"102\":1,\"138\":1,\"155\":1,\"169\":2,\"184\":1,\"186\":1,\"193\":2,\"194\":15,\"195\":1,\"197\":1,\"204\":1,\"210\":1,\"227\":9,\"230\":1,\"233\":2,\"234\":1,\"235\":4,\"236\":16,\"237\":4,\"241\":3,\"243\":5,\"245\":15,\"253\":1,\"255\":1,\"256\":5,\"261\":3,\"271\":4,\"275\":1,\"289\":1,\"308\":5,\"309\":2,\"321\":2,\"340\":1,\"341\":6,\"344\":1,\"354\":1,\"361\":3,\"372\":1,\"401\":2,\"406\":1,\"408\":2,\"454\":2,\"455\":1,\"458\":1,\"465\":4,\"466\":2,\"467\":1,\"478\":1,\"479\":4,\"492\":2,\"499\":6,\"537\":3,\"539\":1,\"542\":2,\"543\":10,\"546\":3,\"547\":2,\"548\":1,\"549\":4,\"550\":1,\"551\":1,\"552\":3,\"553\":1,\"555\":1,\"556\":2,\"557\":9,\"558\":8,\"559\":8,\"562\":8,\"565\":2,\"566\":1,\"573\":2,\"575\":2,\"576\":4,\"580\":2,\"584\":2,\"599\":4,\"600\":1,\"601\":4,\"604\":1,\"606\":9,\"675\":2,\"676\":1,\"677\":1,\"703\":1,\"707\":1,\"748\":2,\"751\":2,\"759\":4,\"774\":5,\"775\":1,\"776\":1,\"777\":1,\"781\":1,\"789\":1,\"790\":1,\"795\":1,\"810\":1,\"820\":3,\"847\":2,\"850\":2,\"851\":1,\"865\":1,\"888\":1,\"890\":1,\"891\":2,\"892\":1,\"897\":3,\"898\":1,\"923\":1,\"927\":2,\"930\":1,\"940\":1,\"941\":5,\"942\":1,\"961\":2,\"986\":1,\"988\":1,\"989\":1,\"991\":1,\"1004\":8,\"1052\":3,\"1054\":1,\"1055\":5,\"1056\":6,\"1057\":2,\"1060\":1,\"1071\":1,\"1072\":1,\"1074\":1,\"1075\":1,\"1076\":3,\"1078\":1,\"1080\":1,\"1081\":1,\"1084\":2,\"1085\":1,\"1094\":1,\"1098\":1,\"1099\":7,\"1118\":3,\"1120\":1,\"1124\":1,\"1130\":4,\"1142\":1,\"1143\":3,\"1153\":2,\"1186\":1,\"1189\":4,\"1198\":2,\"1201\":1,\"1202\":3,\"1203\":2,\"1206\":3,\"1207\":1,\"1216\":2,\"1219\":6,\"1221\":2,\"1228\":3,\"1244\":1,\"1259\":1,\"1341\":1,\"1380\":1,\"1381\":1,\"1385\":2,\"1386\":2,\"1388\":2,\"1389\":1,\"1405\":1,\"1418\":1,\"1419\":3,\"1424\":1,\"1425\":1,\"1431\":1,\"1474\":2,\"1475\":1,\"1476\":2,\"1481\":2,\"1483\":1,\"1484\":1,\"1485\":4,\"1486\":1,\"1487\":1,\"1490\":2,\"1491\":2,\"1493\":2,\"1494\":1,\"1496\":1,\"1497\":2,\"1498\":1,\"1499\":1,\"1501\":8,\"1507\":3,\"1508\":6,\"1509\":5,\"1511\":1,\"1519\":1,\"1521\":1,\"1536\":2,\"1545\":4,\"1551\":1,\"1592\":1,\"1613\":2,\"1619\":1,\"1620\":4,\"1623\":27}}],[\"aroused\",{\"1\":{\"1623\":1}}],[\"around\",{\"1\":{\"177\":1,\"557\":1,\"1623\":1}}],[\"arp\",{\"0\":{\"993\":1},\"1\":{\"993\":2,\"994\":2}}],[\"archs\",{\"1\":{\"1553\":1}}],[\"arch\",{\"1\":{\"510\":1,\"1248\":1,\"1515\":2,\"1516\":3,\"1551\":3}}],[\"architectural\",{\"0\":{\"1482\":1,\"1491\":1,\"1498\":1},\"1\":{\"606\":1,\"1482\":1,\"1491\":1,\"1498\":2}}],[\"architectures\",{\"1\":{\"227\":1,\"235\":1,\"1355\":1}}],[\"architecture\",{\"0\":{\"187\":1},\"1\":{\"227\":2,\"245\":1,\"255\":1,\"540\":1,\"557\":1,\"566\":1,\"606\":1,\"1354\":1,\"1507\":1,\"1618\":3,\"1620\":2}}],[\"archive\",{\"1\":{\"270\":1,\"780\":1}}],[\"argparse\",{\"0\":{\"1219\":1},\"1\":{\"1219\":4}}],[\"argmax\",{\"1\":{\"1185\":1}}],[\"arguement\",{\"1\":{\"941\":1}}],[\"argumentparser\",{\"1\":{\"1219\":2}}],[\"arguments\",{\"1\":{\"851\":1}}],[\"argument\",{\"0\":{\"1415\":1},\"1\":{\"341\":1,\"361\":1,\"432\":2,\"1192\":2,\"1219\":5}}],[\"arg\",{\"1\":{\"693\":3,\"844\":2,\"955\":2,\"1307\":2,\"1313\":2,\"1314\":2}}],[\"argv=none\",{\"1\":{\"1185\":1}}],[\"argv\",{\"1\":{\"693\":3,\"1376\":2}}],[\"argc\",{\"1\":{\"693\":2,\"1376\":2}}],[\"argsforzygote\",{\"1\":{\"703\":13}}],[\"args=\",{\"1\":{\"285\":1}}],[\"args\",{\"1\":{\"74\":1,\"314\":4,\"317\":2,\"371\":1,\"432\":1,\"433\":2,\"664\":2,\"681\":1,\"682\":1,\"702\":2,\"703\":4,\"844\":2,\"1004\":1,\"1365\":9,\"1629\":2}}],[\"articles\",{\"1\":{\"1623\":1}}],[\"article\",{\"1\":{\"539\":1,\"1075\":1,\"1076\":1,\"1179\":1,\"1501\":2,\"1615\":1,\"1623\":1}}],[\"art\",{\"0\":{\"651\":1,\"652\":1,\"685\":1,\"700\":1,\"701\":1,\"1287\":1,\"1362\":1,\"1364\":1,\"1370\":1,\"1372\":1,\"1379\":1,\"1381\":1,\"1392\":1,\"1660\":1},\"1\":{\"266\":1,\"508\":1,\"580\":1,\"651\":1,\"652\":2,\"669\":1,\"685\":1,\"706\":8,\"707\":3,\"708\":2,\"1287\":8,\"1363\":1,\"1365\":3,\"1366\":5,\"1367\":1,\"1371\":2,\"1373\":1,\"1376\":6,\"1379\":1,\"1380\":1,\"1381\":2,\"1383\":3,\"1392\":1,\"1402\":6,\"1403\":2,\"1405\":3}}],[\"aristocratos\",{\"1\":{\"1633\":1}}],[\"arises\",{\"1\":{\"556\":1}}],[\"arise\",{\"1\":{\"236\":1,\"237\":3}}],[\"arithmetic\",{\"1\":{\"176\":1,\"1620\":1}}],[\"arm64没有实现\",{\"1\":{\"1516\":1}}],[\"arm64\",{\"1\":{\"1515\":1,\"1516\":1,\"1517\":1,\"1537\":2}}],[\"armv8\",{\"1\":{\"1502\":1}}],[\"arm的strb和ldrb指令分析↩︎\",{\"1\":{\"539\":1}}],[\"arm的strb和ldrb指令分析\",{\"1\":{\"527\":1}}],[\"arm\",{\"0\":{\"203\":1,\"204\":1,\"500\":1,\"501\":1,\"513\":1},\"1\":{\"195\":1,\"203\":1,\"204\":2,\"227\":3,\"230\":1,\"235\":2,\"256\":1,\"259\":1,\"500\":1,\"507\":1,\"511\":1,\"514\":2,\"523\":1,\"529\":2,\"534\":1,\"537\":1,\"566\":1,\"670\":1,\"724\":1,\"1473\":1,\"1474\":8,\"1476\":3,\"1479\":1,\"1481\":2,\"1485\":1,\"1491\":1,\"1498\":1,\"1499\":1,\"1502\":1,\"1537\":1},\"2\":{\"231\":1,\"246\":1,\"265\":1,\"512\":1}}],[\"area\",{\"1\":{\"542\":1,\"557\":4,\"940\":1,\"1340\":4,\"1342\":1,\"1495\":1,\"1496\":1}}],[\"aren\",{\"1\":{\"237\":1,\"271\":1,\"1060\":1}}],[\"are\",{\"1\":{\"177\":1,\"193\":1,\"194\":1,\"203\":1,\"204\":2,\"216\":1,\"227\":4,\"234\":3,\"235\":5,\"236\":5,\"237\":9,\"245\":9,\"309\":1,\"321\":4,\"326\":2,\"465\":1,\"481\":1,\"492\":2,\"543\":2,\"548\":4,\"549\":1,\"550\":3,\"551\":1,\"552\":3,\"553\":1,\"557\":3,\"558\":1,\"559\":7,\"562\":4,\"573\":1,\"575\":1,\"577\":1,\"599\":2,\"600\":2,\"707\":2,\"747\":1,\"748\":1,\"774\":3,\"775\":1,\"776\":1,\"778\":1,\"781\":1,\"793\":1,\"851\":1,\"888\":1,\"930\":1,\"936\":1,\"941\":1,\"986\":1,\"1060\":1,\"1079\":3,\"1110\":1,\"1124\":1,\"1143\":2,\"1186\":1,\"1202\":1,\"1204\":1,\"1206\":1,\"1219\":1,\"1221\":2,\"1345\":1,\"1355\":1,\"1385\":1,\"1388\":4,\"1389\":2,\"1405\":2,\"1418\":1,\"1475\":2,\"1483\":1,\"1485\":4,\"1491\":1,\"1498\":1,\"1501\":1,\"1507\":1,\"1536\":1,\"1545\":1,\"1553\":1,\"1571\":1,\"1613\":1,\"1623\":5}}],[\"arrivals\",{\"1\":{\"1202\":1}}],[\"arrival\",{\"1\":{\"1123\":2,\"1202\":1}}],[\"arrives\",{\"1\":{\"236\":1,\"556\":1}}],[\"arraryname\",{\"1\":{\"749\":1}}],[\"arrary\",{\"1\":{\"749\":1}}],[\"arrange\",{\"1\":{\"182\":1}}],[\"arraytrack\",{\"0\":{\"1117\":1},\"1\":{\"1124\":1,\"1127\":1}}],[\"arrayname\",{\"1\":{\"749\":1}}],[\"arrayname=\",{\"1\":{\"749\":1}}],[\"arraylist<>\",{\"1\":{\"703\":1,\"1627\":1}}],[\"arraylist<string>\",{\"1\":{\"703\":1}}],[\"arrayb\",{\"1\":{\"682\":2}}],[\"arraya\",{\"1\":{\"682\":3}}],[\"arraysize\",{\"1\":{\"706\":1,\"1403\":1}}],[\"arrays\",{\"0\":{\"1221\":1},\"1\":{\"675\":1,\"1126\":1}}],[\"array\",{\"0\":{\"749\":1},\"1\":{\"30\":1,\"158\":1,\"166\":6,\"169\":1,\"177\":1,\"584\":1,\"675\":1,\"682\":4,\"706\":2,\"746\":1,\"749\":2,\"903\":1,\"907\":1,\"1123\":2,\"1142\":2,\"1221\":7,\"1402\":2,\"1534\":1,\"1592\":2}}],[\"arr\",{\"1\":{\"149\":7,\"177\":5,\"178\":10,\"183\":7,\"299\":15}}],[\"algn\",{\"1\":{\"1463\":1}}],[\"algorithms\",{\"1\":{\"1021\":1}}],[\"algorithm\",{\"0\":{\"3\":1},\"1\":{\"299\":1,\"910\":1,\"1124\":2,\"1127\":1,\"1385\":2},\"2\":{\"38\":1,\"39\":1,\"66\":1,\"109\":1,\"110\":1,\"141\":1,\"142\":1,\"482\":1,\"483\":1}}],[\"ale\",{\"1\":{\"1258\":2,\"1259\":1}}],[\"alert\",{\"1\":{\"939\":1}}],[\"alpha\",{\"1\":{\"898\":2,\"1192\":1}}],[\"alogv\",{\"1\":{\"1295\":1}}],[\"aload\",{\"1\":{\"664\":1}}],[\"along\",{\"1\":{\"237\":2,\"261\":1,\"1079\":1,\"1623\":1}}],[\"alter\",{\"0\":{\"806\":1},\"1\":{\"805\":1,\"806\":3}}],[\"alternative\",{\"1\":{\"556\":1}}],[\"although\",{\"1\":{\"236\":2,\"245\":1,\"559\":2,\"573\":1,\"1060\":3,\"1204\":1,\"1207\":1,\"1553\":1,\"1623\":1}}],[\"already\",{\"1\":{\"547\":1,\"548\":1,\"558\":1,\"1571\":1}}],[\"al\",{\"1\":{\"514\":1,\"543\":2,\"545\":1,\"558\":2}}],[\"alacazam\",{\"1\":{\"343\":1}}],[\"almost\",{\"1\":{\"234\":1}}],[\"allargsconstructor\",{\"1\":{\"1629\":1}}],[\"alliance↩︎\",{\"1\":{\"1511\":1}}],[\"allkeys\",{\"1\":{\"827\":3}}],[\"allrouters\",{\"1\":{\"609\":1}}],[\"allnodes\",{\"1\":{\"609\":1}}],[\"all\",{\"0\":{\"401\":1},\"1\":{\"234\":1,\"235\":3,\"236\":1,\"237\":2,\"245\":2,\"285\":6,\"288\":2,\"289\":4,\"298\":2,\"315\":3,\"329\":3,\"401\":6,\"411\":1,\"492\":1,\"543\":2,\"548\":2,\"549\":2,\"550\":1,\"558\":1,\"559\":3,\"562\":2,\"580\":2,\"583\":1,\"620\":1,\"621\":1,\"692\":1,\"774\":1,\"784\":1,\"898\":1,\"942\":1,\"955\":1,\"1052\":1,\"1084\":1,\"1099\":1,\"1153\":1,\"1189\":1,\"1217\":3,\"1241\":1,\"1388\":2,\"1419\":1,\"1475\":1,\"1484\":1,\"1499\":2,\"1501\":1,\"1507\":1,\"1508\":2,\"1553\":1,\"1592\":1,\"1611\":1,\"1623\":4}}],[\"alloc\",{\"0\":{\"1340\":1,\"1343\":1,\"1344\":1},\"1\":{\"1315\":1,\"1338\":1,\"1340\":1,\"1341\":1,\"1342\":4,\"1344\":10,\"1345\":2,\"1463\":5}}],[\"alloca\",{\"1\":{\"692\":4}}],[\"allocator\",{\"1\":{\"1607\":2}}],[\"allocations\",{\"1\":{\"1389\":1}}],[\"allocationsizenonvirtual\",{\"1\":{\"509\":1}}],[\"allocation\",{\"1\":{\"509\":2}}],[\"allocated\",{\"1\":{\"559\":3,\"1340\":2,\"1341\":3,\"1388\":1,\"1389\":1}}],[\"allocate\",{\"1\":{\"218\":2,\"557\":1,\"1198\":1,\"1345\":2}}],[\"allowlisteddatainfolist\",{\"1\":{\"702\":1}}],[\"allowing\",{\"1\":{\"542\":1,\"1508\":1}}],[\"allowed\",{\"1\":{\"237\":1,\"1186\":1}}],[\"allows\",{\"1\":{\"227\":1,\"549\":1,\"602\":1,\"1056\":1,\"1355\":1,\"1498\":1,\"1536\":1}}],[\"allow\",{\"1\":{\"227\":5,\"552\":1,\"1341\":1,\"1424\":1,\"1492\":1,\"1499\":1}}],[\"always\",{\"1\":{\"217\":1,\"234\":1,\"235\":1,\"361\":2,\"616\":1,\"706\":1,\"851\":1,\"1219\":1,\"1388\":1,\"1403\":1}}],[\"aluoutput\",{\"1\":{\"245\":4}}],[\"alu\",{\"1\":{\"212\":1,\"236\":7,\"245\":29,\"1620\":1}}],[\"also\",{\"1\":{\"197\":1,\"236\":3,\"237\":1,\"245\":2,\"308\":1,\"548\":2,\"557\":2,\"558\":1,\"559\":1,\"562\":1,\"576\":1,\"582\":1,\"584\":1,\"592\":1,\"676\":1,\"851\":1,\"937\":1,\"939\":1,\"1130\":1,\"1219\":1,\"1419\":1,\"1474\":1,\"1486\":1,\"1487\":3,\"1492\":2,\"1499\":2,\"1508\":2,\"1620\":1,\"1623\":7}}],[\"alibaba\",{\"1\":{\"1623\":1}}],[\"aliyun\",{\"1\":{\"1054\":1,\"1102\":1}}],[\"align\",{\"1\":{\"692\":6}}],[\"alignment\",{\"1\":{\"681\":1,\"682\":2,\"1485\":2}}],[\"aliasing\",{\"1\":{\"1022\":1}}],[\"alias\",{\"1\":{\"600\":1,\"1251\":3,\"1428\":1}}],[\"alien\",{\"1\":{\"186\":1}}],[\"alist\",{\"1\":{\"30\":5,\"394\":2}}],[\"abandoned\",{\"1\":{\"1623\":1}}],[\"abbr\",{\"1\":{\"1620\":1}}],[\"ability\",{\"1\":{\"1320\":1,\"1424\":1}}],[\"abi\",{\"1\":{\"702\":2,\"703\":6,\"1464\":4}}],[\"abundant\",{\"1\":{\"552\":1}}],[\"abracadabra\",{\"1\":{\"343\":1}}],[\"able\",{\"0\":{\"1517\":1},\"1\":{\"321\":1,\"556\":2,\"559\":1,\"562\":2,\"573\":1,\"600\":1,\"1562\":1}}],[\"aborts\",{\"1\":{\"1485\":1}}],[\"abort\",{\"1\":{\"984\":1,\"1299\":1,\"1366\":1}}],[\"about\",{\"0\":{\"289\":1,\"779\":1,\"1500\":1},\"1\":{\"401\":1,\"500\":1,\"540\":1,\"675\":1,\"746\":1,\"781\":1,\"847\":1,\"925\":1,\"986\":1,\"1009\":1,\"1052\":1,\"1072\":1,\"1084\":1,\"1099\":1,\"1143\":1,\"1186\":1,\"1201\":1,\"1487\":2,\"1520\":1,\"1523\":1,\"1536\":1,\"1573\":1}}],[\"above\",{\"1\":{\"193\":1,\"321\":1,\"939\":1,\"1623\":1}}],[\"abscissa\",{\"1\":{\"1202\":1}}],[\"abstrcat\",{\"0\":{\"1166\":1}}],[\"abstracthandlerlist\",{\"1\":{\"1627\":5}}],[\"abstracthandler\",{\"1\":{\"1626\":1,\"1627\":1}}],[\"abstraction\",{\"1\":{\"1492\":1,\"1501\":1}}],[\"abstract\",{\"0\":{\"5\":1,\"69\":1,\"162\":1,\"171\":1,\"189\":1,\"193\":1,\"233\":1,\"248\":1,\"250\":1,\"278\":1,\"320\":1,\"441\":1,\"463\":1,\"514\":1,\"542\":1,\"567\":1,\"570\":1,\"580\":1,\"599\":1,\"664\":1,\"669\":1,\"775\":1,\"824\":1,\"841\":1,\"1008\":1,\"1118\":1,\"1151\":1,\"1310\":1,\"1350\":1,\"1363\":1,\"1371\":1,\"1393\":1,\"1395\":1,\"1409\":1,\"1411\":1,\"1413\":1,\"1437\":1,\"1457\":1,\"1468\":1,\"1490\":1,\"1505\":1,\"1513\":1,\"1531\":1,\"1540\":1,\"1549\":1,\"1560\":1,\"1569\":1,\"1589\":1,\"1605\":1},\"1\":{\"1011\":1,\"1084\":1,\"1355\":1}}],[\"abservations\",{\"0\":{\"1120\":1}}],[\"absence\",{\"1\":{\"751\":1}}],[\"absolute=1\",{\"1\":{\"1162\":1}}],[\"absolute\",{\"1\":{\"547\":1,\"843\":1,\"1079\":1}}],[\"absorb\",{\"1\":{\"542\":1}}],[\"abs\",{\"1\":{\"35\":2,\"36\":1}}],[\"abcd\",{\"1\":{\"313\":1,\"317\":1,\"396\":1,\"478\":2,\"479\":2,\"972\":2}}],[\"abcdefdfs\",{\"1\":{\"375\":1}}],[\"abcdefgh\",{\"1\":{\"375\":2}}],[\"abcdefg\",{\"1\":{\"313\":1,\"314\":3}}],[\"abcde\",{\"1\":{\"301\":2}}],[\"abc\",{\"1\":{\"8\":1,\"314\":3,\"478\":2,\"479\":4,\"1274\":1}}],[\"a\",{\"0\":{\"204\":1,\"236\":1,\"245\":1,\"277\":1,\"322\":1,\"568\":1,\"593\":1,\"784\":1,\"1093\":1},\"1\":{\"8\":1,\"9\":21,\"10\":14,\"11\":6,\"15\":7,\"21\":8,\"25\":3,\"42\":1,\"54\":1,\"87\":2,\"91\":24,\"98\":3,\"102\":1,\"103\":3,\"179\":2,\"182\":1,\"194\":22,\"196\":7,\"197\":3,\"203\":5,\"204\":9,\"216\":1,\"217\":2,\"227\":2,\"234\":10,\"235\":5,\"236\":15,\"237\":5,\"243\":9,\"244\":1,\"245\":26,\"250\":5,\"251\":2,\"255\":5,\"256\":9,\"261\":2,\"274\":1,\"289\":1,\"291\":2,\"303\":4,\"309\":1,\"316\":1,\"321\":5,\"339\":2,\"340\":3,\"341\":5,\"342\":1,\"343\":11,\"354\":1,\"361\":5,\"366\":1,\"387\":2,\"388\":2,\"396\":1,\"406\":1,\"408\":4,\"420\":1,\"421\":6,\"422\":13,\"426\":26,\"427\":17,\"431\":11,\"465\":3,\"479\":4,\"480\":1,\"499\":1,\"502\":3,\"542\":5,\"543\":6,\"546\":2,\"548\":5,\"549\":7,\"550\":1,\"551\":2,\"552\":7,\"553\":1,\"555\":1,\"556\":2,\"557\":5,\"558\":10,\"559\":20,\"562\":13,\"564\":5,\"565\":1,\"566\":2,\"568\":1,\"572\":1,\"573\":3,\"575\":1,\"576\":4,\"580\":2,\"582\":3,\"584\":6,\"592\":2,\"593\":3,\"597\":2,\"599\":3,\"600\":3,\"602\":1,\"604\":2,\"621\":1,\"623\":2,\"624\":3,\"658\":1,\"675\":2,\"676\":2,\"677\":2,\"681\":9,\"682\":11,\"692\":2,\"702\":1,\"707\":2,\"717\":2,\"718\":1,\"744\":1,\"746\":1,\"747\":3,\"748\":2,\"750\":2,\"751\":8,\"774\":2,\"776\":3,\"784\":1,\"785\":5,\"786\":1,\"792\":1,\"793\":1,\"794\":1,\"843\":1,\"848\":1,\"850\":3,\"851\":3,\"855\":1,\"881\":4,\"891\":1,\"892\":2,\"896\":3,\"898\":1,\"910\":2,\"917\":1,\"923\":1,\"925\":1,\"931\":1,\"933\":2,\"937\":1,\"939\":1,\"940\":2,\"941\":2,\"942\":1,\"943\":1,\"957\":1,\"973\":1,\"975\":1,\"978\":2,\"982\":1,\"986\":1,\"988\":1,\"991\":2,\"1022\":2,\"1055\":4,\"1056\":3,\"1060\":2,\"1072\":1,\"1074\":1,\"1075\":2,\"1076\":2,\"1078\":1,\"1079\":4,\"1080\":1,\"1081\":1,\"1084\":3,\"1095\":1,\"1098\":2,\"1099\":3,\"1101\":1,\"1107\":2,\"1118\":6,\"1125\":2,\"1126\":1,\"1127\":1,\"1130\":2,\"1142\":1,\"1143\":3,\"1145\":3,\"1181\":2,\"1186\":1,\"1189\":3,\"1191\":1,\"1196\":2,\"1198\":1,\"1201\":2,\"1202\":6,\"1203\":1,\"1204\":1,\"1208\":1,\"1209\":1,\"1212\":5,\"1216\":2,\"1219\":6,\"1221\":2,\"1226\":2,\"1228\":9,\"1231\":4,\"1239\":2,\"1246\":1,\"1247\":1,\"1248\":3,\"1259\":1,\"1269\":2,\"1272\":1,\"1278\":2,\"1279\":2,\"1355\":1,\"1366\":1,\"1376\":2,\"1381\":4,\"1383\":2,\"1386\":1,\"1388\":4,\"1405\":2,\"1418\":1,\"1422\":2,\"1424\":2,\"1425\":1,\"1427\":1,\"1445\":3,\"1446\":2,\"1459\":1,\"1463\":5,\"1465\":1,\"1474\":2,\"1475\":1,\"1481\":8,\"1483\":4,\"1485\":3,\"1487\":4,\"1490\":1,\"1491\":1,\"1492\":3,\"1493\":3,\"1494\":2,\"1495\":2,\"1496\":1,\"1497\":1,\"1498\":1,\"1501\":10,\"1502\":1,\"1507\":2,\"1508\":2,\"1509\":3,\"1536\":4,\"1545\":1,\"1551\":1,\"1591\":5,\"1592\":6,\"1602\":4,\"1609\":2,\"1611\":4,\"1616\":1,\"1618\":2,\"1619\":2,\"1620\":5,\"1623\":27}}],[\"affordable\",{\"1\":{\"1623\":1}}],[\"affinity\",{\"1\":{\"599\":1}}],[\"affect\",{\"1\":{\"235\":1}}],[\"afterhandler\",{\"1\":{\"1626\":1}}],[\"after\",{\"0\":{\"357\":1},\"1\":{\"172\":1,\"321\":1,\"385\":1,\"418\":6,\"548\":1,\"550\":1,\"707\":1,\"786\":1,\"940\":1,\"982\":1,\"1074\":2,\"1185\":1,\"1204\":2,\"1212\":1,\"1388\":1,\"1406\":1,\"1623\":2}}],[\"af\",{\"1\":{\"8\":1,\"949\":2}}],[\"aemv8\",{\"1\":{\"1485\":1}}],[\"aes\",{\"1\":{\"1263\":1,\"1645\":1}}],[\"aeb\",{\"1\":{\"479\":1}}],[\"aebdc\",{\"1\":{\"479\":4}}],[\"aeiou\",{\"1\":{\"390\":1}}],[\"ae\",{\"1\":{\"8\":1}}],[\"advertisements\",{\"1\":{\"1623\":1}}],[\"advantage\",{\"1\":{\"1623\":1}}],[\"advantages\",{\"1\":{\"492\":1,\"775\":1,\"1623\":2}}],[\"advanced\",{\"1\":{\"1177\":1,\"1464\":2,\"1485\":1,\"1491\":1}}],[\"adoc\",{\"1\":{\"1434\":1}}],[\"adamoptimizer\",{\"1\":{\"1212\":4}}],[\"adapt\",{\"1\":{\"558\":1}}],[\"adaptation\",{\"1\":{\"546\":1}}],[\"adc\",{\"1\":{\"1020\":1}}],[\"admin\",{\"1\":{\"864\":3,\"1055\":1}}],[\"administrator\",{\"1\":{\"664\":1}}],[\"adln\",{\"1\":{\"718\":1}}],[\"adrp指令根据\",{\"1\":{\"530\":1}}],[\"adrp\",{\"0\":{\"530\":1},\"1\":{\"530\":7}}],[\"adb\",{\"0\":{\"1266\":1},\"1\":{\"266\":2,\"1227\":1,\"1228\":2,\"1231\":2,\"1268\":1,\"1269\":6,\"1270\":2,\"1271\":2,\"1272\":3,\"1274\":2,\"1275\":2,\"1276\":3,\"1277\":1,\"1278\":2,\"1279\":1,\"1281\":4,\"1282\":1,\"1284\":2,\"1285\":4,\"1287\":16},\"2\":{\"1289\":1}}],[\"adjustment\",{\"1\":{\"1591\":2}}],[\"adjusting\",{\"1\":{\"1536\":1}}],[\"adjust\",{\"1\":{\"1219\":1}}],[\"adjustable\",{\"1\":{\"1055\":1}}],[\"adjacent\",{\"1\":{\"236\":1}}],[\"adjlist\",{\"1\":{\"89\":1}}],[\"addhandler\",{\"1\":{\"1627\":1}}],[\"added\",{\"1\":{\"1316\":1,\"1571\":1}}],[\"adder\",{\"1\":{\"236\":1}}],[\"add`\",{\"1\":{\"1186\":1}}],[\"addall\",{\"1\":{\"703\":1}}],[\"addrlen\",{\"1\":{\"950\":3,\"952\":1}}],[\"addrstrlen\",{\"1\":{\"949\":1}}],[\"addr=$remote\",{\"1\":{\"761\":1}}],[\"addr\",{\"1\":{\"521\":1,\"530\":1,\"761\":1,\"949\":10,\"950\":1,\"955\":2,\"1464\":1}}],[\"addressability\",{\"1\":{\"600\":1}}],[\"addresses\",{\"1\":{\"583\":1,\"584\":1,\"599\":1,\"1509\":1}}],[\"address\",{\"1\":{\"194\":2,\"195\":1,\"196\":1,\"203\":2,\"204\":1,\"212\":1,\"236\":2,\"243\":2,\"245\":9,\"250\":3,\"252\":1,\"255\":5,\"256\":2,\"260\":1,\"261\":4,\"555\":1,\"559\":1,\"572\":1,\"575\":1,\"582\":1,\"583\":2,\"585\":1,\"587\":1,\"599\":1,\"601\":1,\"602\":1,\"604\":2,\"798\":1,\"991\":1,\"1054\":1,\"1341\":2,\"1380\":4,\"1381\":6,\"1464\":2,\"1484\":1,\"1487\":6,\"1490\":2,\"1491\":2,\"1492\":2,\"1494\":2,\"1495\":1,\"1496\":1,\"1497\":2,\"1498\":2,\"1499\":1,\"1507\":2,\"1509\":1,\"1620\":2}}],[\"addoption\",{\"1\":{\"383\":1}}],[\"adds\",{\"1\":{\"245\":2,\"576\":1,\"1508\":1,\"1611\":1}}],[\"adding\",{\"1\":{\"245\":1}}],[\"additionally\",{\"1\":{\"256\":1,\"1481\":1}}],[\"additional\",{\"1\":{\"227\":2,\"245\":1,\"361\":1,\"1421\":1}}],[\"addition\",{\"1\":{\"227\":1,\"556\":1,\"562\":2,\"1219\":1,\"1623\":1}}],[\"add\",{\"0\":{\"748\":1,\"1076\":1,\"1080\":1,\"1422\":1,\"1434\":1},\"1\":{\"75\":8,\"79\":1,\"80\":1,\"84\":1,\"88\":6,\"91\":8,\"194\":1,\"460\":1,\"502\":4,\"504\":1,\"507\":1,\"514\":1,\"692\":10,\"693\":2,\"703\":10,\"766\":1,\"806\":2,\"843\":2,\"858\":2,\"892\":1,\"896\":1,\"923\":1,\"943\":1,\"955\":1,\"957\":1,\"961\":1,\"1052\":2,\"1054\":1,\"1055\":3,\"1056\":4,\"1057\":1,\"1073\":1,\"1077\":1,\"1080\":2,\"1101\":4,\"1105\":2,\"1113\":1,\"1142\":1,\"1185\":2,\"1186\":5,\"1219\":5,\"1239\":1,\"1241\":1,\"1246\":1,\"1248\":1,\"1250\":1,\"1422\":3,\"1423\":1,\"1424\":1,\"1429\":2,\"1434\":5,\"1446\":2,\"1449\":2,\"1463\":3,\"1545\":1,\"1570\":1,\"1607\":1,\"1627\":1,\"1634\":1}}],[\"ad\",{\"1\":{\"8\":1}}],[\"幻灯片页\",{\"0\":{\"2\":1}}],[\"啥都不说了\",{\"1\":{\"1\":1}}],[\"你就把生成的那个文件夹删除了\",{\"1\":{\"1419\":1}}],[\"你想重新\",{\"1\":{\"1419\":1}}],[\"你也可是设置成不跟踪master分支\",{\"1\":{\"1253\":1}}],[\"你也没办法在第\",{\"1\":{\"155\":1}}],[\"你必须先拉取别人的变更\",{\"1\":{\"1250\":1}}],[\"你后推送\",{\"1\":{\"1250\":1}}],[\"你希望自己五年或者十年后在哪里\",{\"1\":{\"1033\":1}}],[\"你的源代码和\",{\"1\":{\"1419\":1}}],[\"你的本地sf就会从origin\",{\"1\":{\"1253\":1}}],[\"你的目标应该是定期刷新\",{\"1\":{\"1034\":1}}],[\"你的目标是什么\",{\"0\":{\"1032\":1}}],[\"你的产品或者服务是什么\",{\"1\":{\"1031\":1}}],[\"你的函数可以返回索引\",{\"1\":{\"33\":1}}],[\"你有什么可以卖\",{\"1\":{\"1031\":1}}],[\"你现在是一个商人\",{\"1\":{\"1030\":1}}],[\"你能不能也很快的找出所有和为s的连续正数序列\",{\"1\":{\"165\":1}}],[\"你能在你最喜欢的那天吃到你最喜欢的糖果吗\",{\"0\":{\"155\":1},\"1\":{\"144\":1,\"155\":1}}],[\"你没法在每天吃\",{\"1\":{\"155\":1}}],[\"你应该先完成课程\",{\"1\":{\"86\":1}}],[\"你只要返回\",{\"1\":{\"86\":1}}],[\"你需要设定一个目标\",{\"1\":{\"1032\":1}}],[\"你需要添加以下代码行\",{\"1\":{\"291\":1}}],[\"你需要找到该数组中和为\",{\"1\":{\"151\":1}}],[\"你需要让组成和的完全平方数的个数最少\",{\"1\":{\"132\":1}}],[\"你需要先完成课程\",{\"1\":{\"86\":2}}],[\"你需要在页面\",{\"1\":{\"0\":1}}],[\"你不能在对角线方向上移动或移动到边界外\",{\"1\":{\"74\":1}}],[\"你可以使用相应的解压缩工具结合\",{\"1\":{\"1454\":1}}],[\"你可以使用不同的命令和工具来进行文件和目录的压缩和解压缩\",{\"1\":{\"1454\":1}}],[\"你可以在第\",{\"1\":{\"155\":1}}],[\"你可以在这里放置你的主体内容\",{\"1\":{\"0\":1}}],[\"你可以假设字典中没有重复的单词\",{\"1\":{\"138\":1}}],[\"你可以假设该网格的四条边均被水包围\",{\"1\":{\"76\":1}}],[\"你可以自由地在房间之间来回走动\",{\"1\":{\"75\":1}}],[\"你可以往上\",{\"1\":{\"74\":1}}],[\"你可以按\",{\"1\":{\"14\":1}}],[\"你可以\",{\"1\":{\"12\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
