import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a as n,b as s,d as e,w as d,f as a}from"./app-22cda79c.js";const u="/assets/value-result-7f8a9117.jpg",r={},k=a(`<h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><h3 id="data-struct" tabindex="-1"><a class="header-anchor" href="#data-struct" aria-hidden="true">#</a> Data Struct</h3><p>地址转化函数：<code>inet_pton(AF_INET, &quot;127.0.0.1&quot;, &amp;serv.sin_addr.s_addr);</code> 和 <code>inet_ntop</code>。 其中 p 表示<strong>表达(presentation)</strong>, n 表示 <strong>数值(numeric)</strong></p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span>INET_ADDRSTRLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>套接字结构体为：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">{</span>
    uint_8  sin_len<span class="token punctuation">;</span>
    <span class="token class-name">sa_family_t</span> sin_family<span class="token punctuation">;</span>
    <span class="token class-name">in_port_t</span>   sin_port<span class="token punctuation">;</span> <span class="token comment">// 16-bit</span>

    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span>

    <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span>
    <span class="token class-name">in_addr_t</span>   s_addr<span class="token punctuation">;</span> <span class="token comment">// 32-bit IPV4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="值-结果参数" tabindex="-1"><a class="header-anchor" href="#值-结果参数" aria-hidden="true">#</a> 值-结果参数</h3><p>问题：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>为什么 addrlen 要以指针的方式传递？</p><ul><li>因为 addrlen 是<strong>值-结果参数</strong>: 套接字地址结构从<strong>内核到进程</strong>方向的传递。</li></ul><ol><li><p>从进程到内核传递套接字地址结构的函数有 3 个：bind, connect 和 sendto; 这些函数的一个参数是指向某个套接字地址结构的指针，另一个参数是该结构的整数大小。</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv<span class="token punctuation">;</span>
<span class="token comment">// fill in serv</span>
<span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>SA <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>serv<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>从内核到进程传递套接字地址结构的函数有 4 个：accept, recvfrom, getsockname 和 getpeername; 这些函数的其中两个参数是指向某个套接字地址结构的指针和指向表示该结构大小的整数变量的指针。</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_un</span> cli<span class="token punctuation">;</span>
<span class="token class-name">socklen_t</span> len<span class="token punctuation">;</span>

len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getpeername</span><span class="token punctuation">(</span>unixfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>SA <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>cli<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><img src="`+u+`" alt="value-result"></p><p>如图中所示，当函数被调用时，结构大小是一个 <strong>值(value)</strong> , 它告诉内核该结构的大小，这样内核在写该结构时不至于越界；当函数返回时，结构大小又是一个 <strong>结果(result)</strong> , 它告诉内核在该结构中究竟存储了多少信息。这种类型的参数称为 <strong>value-result</strong> 参数。</p></li></ol><blockquote><p>所有的套接字函数都是内核中的系统调用。</p></blockquote><p>除了系统调用之外，操作系统还可以通过异常(如缺页异常)和中断(如0x80)从用户态切换到内核态。</p><h3 id="listen" tabindex="-1"><a class="header-anchor" href="#listen" aria-hidden="true">#</a> listen()</h3><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>当 socket 函数创建了一个套接字时，它被假设为一个 <strong>主动套接字</strong>，也就是说，它是一个将调用 connect() 发起连接的客户端套接字。listen() 函数把一个未连接的套接字转化为 <strong>被动套接字</strong>。指示内核应该接受指向该套接字的连接请求。</p><blockquote><p>本函数通常在调用 socket 和 bind 这两个函数之后，并在调用 accept 函数之前调用。</p></blockquote>`,18),v=n("em",null,"backlog",-1),_=a(`<ol><li><p>未完成连接队列(incomplete connection queue): SYN 分节已由某个客户端发出并到达服务器，而服务器正在等待完成相应的 TCP 三路握手过程；这些套接字处于 SYN_RCVD 状态；<br> 在三路握手正常完成的前提下，未完成连接队列中的任何一项在其中的存留时间就是一个 RTT, RTT 的取值取决于特定的客户与服务器。</p></li><li><p>已完成连接的队列(completed connection queue): 每个已完成 TCP 三路握手的客户端对应1其中的一项；这些套接字处于 ESTABLISHED 状态。</p></li></ol><p>两队列之和不超过 backlog.</p><p>当进程调用 accept 函数之后，已完成连接队列中的对头项将返回给进程，或者如果该队列为空，那么进程将被投入休眠，直到 TCP 在该队列放入一项才唤醒它。</p><h3 id="accept" tabindex="-1"><a class="header-anchor" href="#accept" aria-hidden="true">#</a> accept()</h3><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>cliaddr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在 accept() 函数中，我们称它的第一个参数为 <strong>监听套接字(listening socket)</strong> 描述符，称它的第二个参数为 <strong>已连接套接字(connected socket)</strong> 描述符。</p><p>监听套接字由 socket 创建，随后用于 bind 和 listen 的第一个参数。一个服务器通常仅仅创建一个监听套接字，它在该服务器的生命周期内一直存在。</p><p>已连接套接字由内核为每个服务器进程接受的客户端创建，当服务器完成对某个客户的服务时，相应的已连接套接字就被关闭。</p><h2 id="select-poll-and-epoll" tabindex="-1"><a class="header-anchor" href="#select-poll-and-epoll" aria-hidden="true">#</a> select, poll and epoll</h2><h3 id="select-的缺点" tabindex="-1"><a class="header-anchor" href="#select-的缺点" aria-hidden="true">#</a> select 的缺点</h3><ol><li><p>单个进程能够监视的文件描述符的数量存在最大限制(_FD_SETSIZE)，通常是 1024。由于 select 采用轮询的方式扫描文件描述符，文件描述符越多，性能越差</p></li><li><p>内核/用户空间拷贝问题，select 需要复制大量的数组，产生了巨大的开销</p></li><li><p>select 返回的是含有整个句柄的数组，需要遍历整个数组才能发现哪些句柄发生了事件</p></li><li><p>select 的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行 IO，那么之后再次 select 调用还是会将这些文件描述符通知进程。</p></li></ol><p>相比于 select 模型，poll 使用链表保存文件描述符，因此没有了监视文件数量(缺点 1)的限制，但其他三个缺点依然存在。</p><p>假设有 100 万个客户端同时与一个服务器保持着 TCP 连接，在 select/poll 时代，服务器进程每次都把 100 万个连接告诉操作系统（从用户态复制句柄数据结构到内核态），让操作系统内核去查询这些套接字上是否有事件发生，轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll 一般只能处理几千的并发连接。</p><h2 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll" aria-hidden="true">#</a> epoll</h2><p>epoll 主要有三个方法：</p><ol><li><p><code>epoll_create(int __size)</code>: 返回一个 epfd 文件描述符，红黑树的根节点</p></li><li><p><code>int epoll_ctl (int __epfd, int __op, int __fd, struct epoll_event *__event)</code></p></li><li><p><code>int epoll_wait (int __epfd, struct epoll_event *__events, int __maxevents, int __timeout);</code></p></li></ol><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">epoll_event</span>
<span class="token punctuation">{</span>
  <span class="token keyword">uint32_t</span> events<span class="token punctuation">;</span>  <span class="token comment">/* Epoll events */</span>
  epoll_data_t data<span class="token punctuation">;</span>    <span class="token comment">/* User data variable */</span>
<span class="token punctuation">}</span>
</code></pre></div><p>events 包括：</p><ul><li><p>EPOLLIN</p></li><li><p>EPOLLOUT</p></li><li><p>EPOLLERR</p></li></ul><p>判断是否已连接的客户端：<code>!all[i] &amp; EPOLLIN</code></p><p>判断是否新连接： <code>fd == lfd</code>, 有新连接时，调用 accept() 接受该连接请求。</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">union</span> epoll_data
<span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> u32<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> u64<span class="token punctuation">;</span>
<span class="token punctuation">}</span> epoll_data_t<span class="token punctuation">;</span>
</code></pre></div><p><code>*ptr</code> 的用法：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">sockinfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>sockInfo<span class="token punctuation">;</span>

sockInfo<span class="token operator">*</span> sinfo <span class="token operator">=</span> <span class="token punctuation">(</span>sockInfo<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sockInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sinfo<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> lfd<span class="token punctuation">;</span>
sinfo<span class="token operator">-&gt;</span>sock <span class="token operator">=</span> serv_addr<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">epoll_event</span> ev<span class="token punctuation">;</span>
<span class="token comment">// *ptr</span>
cv<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr <span class="token operator">=</span> sinfo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>令 ptr 指向这个结构体，传入 <code>epoll_ctl()</code> 即可。</p><p>更复杂的带回调的 <code>epoll_data_t</code> 例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">myevent_s</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span> <span class="token comment">// 要监听的文件描述符</span>
    <span class="token keyword">int</span> events<span class="token punctuation">;</span> <span class="token comment">// 对应的监听事件</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">;</span> <span class="token comment">// 指向 myevent_s 的函数指针</span>
    <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>call_back<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> events<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回调函数</span>
    <span class="token keyword">int</span> status<span class="token punctuation">;</span> <span class="token comment">// 1：在红黑树上监听；0：不监听</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token keyword">long</span> last_active<span class="token punctuation">;</span> <span class="token comment">// time(NULL) 记录每次加入红黑树 g_efd 的时间值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>epoll_ctl 的 op 操作：</p><ol><li><p>EPOLL_CTL_ADD</p></li><li><p>EPOLL_CTL_MOD</p></li><li><p>EPOLL_CTL_DEL</p></li></ol><h2 id="epoll-三种工作模式" tabindex="-1"><a class="header-anchor" href="#epoll-三种工作模式" aria-hidden="true">#</a> epoll 三种工作模式</h2>`,30),b=a("<li><p>水平触发模式（默认模式）- LT</p><ul><li><p>只要 fd 对应的缓冲区有数据，<code>epoll_wait</code> 就返回，例如读缓冲区的 buf 设置过小，就会使得读操作次数变多，<code>epoll_wait</code> 调用变多，直到读完缓冲区中的数据；</p></li><li><p>返回的次数和发送数据的次数没有关系；</p></li><li><p><code>epoll_wait</code> 调用次数越多，系统开销越大；</p></li><li><p>在 EPOLL_OUT 中，<code>epoll_wait</code> 会一直返回，缓冲区能写数据，该函数会返回，缓冲区满的时候，不返回。<strong>本质上是检测写缓冲区是否可以写。</strong></p></li></ul></li><li><p>边沿触发模式 - ET</p><ul><li><p><code>ev.events = EPOLLIN | EPOLLET</code></p></li><li><p>fd - 默认阻塞属性</p></li><li><p>客户端给 server 发数据：发一次数据 server 的 <code>epoll_wait</code> 返回一次；</p></li><li><p>缓冲区中要是有没发完的数据，除非新数据到达，剩余的数据才会被发送出来，<strong>不在乎数据是否读完</strong>；</p></li><li><p>可以减少系统开销，提高 <code>epoll_wait</code> 的效率；</p></li><li><p>如果数据读不完，如何全部读出来？</p><p><code>while(recv())</code> 数据读完之后 <code>recv</code> 会阻塞，需要<strong>设置 fd 非阻塞</strong>，也就是边沿非阻塞触发模式。</p></li><li><p>EPOLL_OUT 中，第一次设置的时候 <code>epoll_wait</code> 会返回一次，然后就不返回了，除非满缓冲区被读，从 满 -&gt; 不满的时候再返回一次，然后不再返回。</p></li></ul></li>",2),m={href:"https://github.com/chenweigao/socket-epoll/blob/master/cpp_webserver/nonblock_et_epoll.c",target:"_blank",rel:"noopener noreferrer"},h=a(`<ul><li><p>效率最高</p></li><li><p>如何设置非阻塞？</p><ol><li><p><code>open()</code>: 修改 flags: <code>O_WDRW | O_NONBLUCK</code>, 使得文件描述符设置为非阻塞。适用于终端文件 dev/tty</p></li><li><p><code>fcntl()</code>:</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>
flag <span class="token operator">|=</span> ONNBLOCK<span class="token punctuation">;</span>
<span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ol></li><li><p>将缓冲区的数据全读出，特别是针对缓冲区大小不够的情况</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">send</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div></li></ul>`,1),f=a(`<h3 id="突破文件描述符上限" tabindex="-1"><a class="header-anchor" href="#突破文件描述符上限" aria-hidden="true">#</a> 突破文件描述符上限</h3><p>查看受计算机限制的文件描述符上限：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /proc/sys/fs/file-max
</code></pre></div><p>通过配置修改上限值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># see open files&#39;s num: 1024</span>
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-a</span>

<span class="token function">vi</span> /etc/security/limits.conf

<span class="token comment"># add lines</span>
*   soft    nofile  <span class="token number">8000</span>
*   hard    nofile  <span class="token number">8000</span>

<span class="token comment"># temp setting</span>
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span> <span class="token number">2000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="libevent-install" tabindex="-1"><a class="header-anchor" href="#libevent-install" aria-hidden="true">#</a> Libevent Install</h2><div class="hint-container tip"><p class="hint-container-title">简介</p><p>libevent 封装了 socket 通信、IO 多路转接；精简，专注于网络，性能高；跨平台；<strong>事件驱动</strong>。</p></div><h3 id="linux-install" tabindex="-1"><a class="header-anchor" href="#linux-install" aria-hidden="true">#</a> Linux Install</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 检测安装环境，生成 makefile</span>
./configure
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre></div><p><code>make install</code> 会将数据拷贝到对应的目录，如果目录不存在，则创建该目录。</p><p>默认目录是：</p><ul><li><p><code>/usr/local/include</code></p></li><li><p><code>/usr/local/bin</code></p></li><li><p><code>/usr/local/lib</code></p></li></ul><p>验证是否安装成功：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> sample/
gcc hello-world.c <span class="token parameter variable">-o</span> hello-world <span class="token parameter variable">-l</span> event

./hello-world
<span class="token function">nc</span> localhost <span class="token number">9995</span>
</code></pre></div><h3 id="window-install" tabindex="-1"><a class="header-anchor" href="#window-install" aria-hidden="true">#</a> Window Install</h3><p>使用 VS 的开发者命令行，然后输入：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>nmake /f Makefile.nmake
</code></pre></div><p>编译完成后会看到三个 lib 文件，在 VS 的设置中，添加附加依赖项和附加包含项即可，分别包含这三个 lib 文件和 include 文件。</p><p>在运行时，会产生一些错误：</p><ol><li><p><code>#define _CRT_SECURE_NO_WARNINGS</code> 添加这行，对应 window 下的 <code>strerror</code> 错误；</p></li><li><p><code>#pragma comment(lib, &quot;ws2_32.lib&quot;)</code> 对应 winsock相关的问题。</p></li></ol><h2 id="libevent-框架概述" tabindex="-1"><a class="header-anchor" href="#libevent-框架概述" aria-hidden="true">#</a> Libevent 框架概述</h2><ol><li><p>事件的底层处理框架</p><ol><li>一个函数</li></ol></li><li><p>消息循环</p><ol><li>一个函数</li></ol></li><li><p><strong>创建事件</strong></p><ol><li>不带缓冲区 - event <ol><li>几个函数</li></ol></li><li>带缓冲区 - bufferevent <ol><li>几个函数</li></ol></li></ol></li><li><p>资源的释放</p><ol><li>几个函数</li></ol></li></ol>`,22),g={href:"https://github.com/chenweigao/socket-epoll/blob/master/cpp_webserver/bufferevent_server.c",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[n("p",null,[s("创建一个事件处理框架："),n("code",null,"struct event_base* base = event_base_new();"),s(" （流水线或设备初始化完成）")])],-1),y=n("p",null,"创建一个事件，并将事件添加到框架上：",-1),E=n("li",null,[n("p",null,[s("（服务端）使用 "),n("strong",null,"链接监听器"),s(" 直接创建: "),n("code",null,"struct evconnlistener* listen = evconnlistener_new_bind();"),s(", 函数中要求实现 "),n("code",null,"listen_cb"),s(" 函数回调；")])],-1),L=n("code",null,"struct event* ev = event_new()",-1),x=n("code",null,"event_add()",-1),T={href:"https://github.com/chenweigao/socket-epoll/blob/master/cpp_webserver/libevent_read_fifo.c",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,[s("如果要使用终端标准输入，可以使用 stdin 的文件描述符创建一个事件："),n("code",null,"struct events* ev_in = event_new(base, STDIN_FILENO, EV_READ | EV_PERSIST, read_terminal, NULL);")],-1),O=n("li",null,[n("p",null,[s("开始事件循环: "),n("code",null,"event_base_dispatch(base);")])],-1),I=n("li",null,[n("p",null,[s("释放资源: "),n("code",null,"evconnlistener_free(listen);"),s(", "),n("code",null,"event_base_free(base);"),s(" and "),n("code",null,"event_free();")])],-1),S=n("h2",{id:"bufferevent",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#bufferevent","aria-hidden":"true"},"#"),s(" bufferevent")],-1),P=n("code",null,"bufferevent",-1),R=n("code",null,"event",-1),C={href:"https://github.com/libevent/libevent/blob/master/sample/hello-world.c",target:"_blank",rel:"noopener noreferrer"},D=a('<ul><li><p>读：只要缓冲区有数据，就会被通知；</p></li><li><p>写：一般用不掉，自动发送并且返回回调。</p></li></ul><p><code>listen_cb</code> 回调中：</p><ol><li><p>创建一个带缓冲区的事件：<code>struct bufferevent* bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);</code></p></li><li><p>然后 <code>bufferevent_setcb(bev, read_cb, write_cb, event_cb, NULL);</code></p></li><li><p>然后分别实现三个回调:</p><ul><li><p>以 <code>read_cb()</code> 为例，读写回调函数原型为：<code>typedef void (*bufferevent_data_cb)(struct bufferevent *bev, void *ctx);</code></p></li><li><p>事件回调函数原型为：<code>typedef void (*bufferevent_event_cb)(struct bufferevent *bev, short what, void *ctx);</code> <code>what</code> 包括的有: <code>BEV_EVENT_*</code>;</p></li></ul></li><li><p>释放资源：使用 <code>bufferent_free()</code>.</p></li></ol><div class="hint-container warning"><p class="hint-container-title">bug avoid</p><p>在初始化 <code>listen_cb</code> 的回调函数中，会使用读缓冲区和写缓冲区，bufferevent 默认读缓冲区是不可用的；</p><p>一般情况下，我们将这两个缓冲区都 <code>bufferevent_enable()</code>, 防止出现段异常</p></div><p>在套接字通信中，客户端连接服务器使用：<code>int bufferevent_socket_connect(struct bufferevent *, const struct sockaddr *, int);</code></p>',5);function F(V,U){const o=p("RouterLink"),t=p("ExternalLinkIcon");return c(),i("div",null,[k,n("p",null,[s("第二个参数规定了内核应该为相应套接字排队的最大连接个数，比如 36。对于这个参数 "),v,s(", 内核为任何一个给定的套接字维护"),e(o,{to:"/blogs/Networks/networks.html#%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97"},{default:d(()=>[s("两个队列")]),_:1}),s("：")]),_,n("ol",null,[b,n("li",null,[n("p",null,[s("边沿非阻塞触发模式- "),n("a",m,[s("代码实现"),e(t)])]),h])]),f,n("p",null,[s("总结其使用方法是："),n("a",g,[s("参考程序 bufferevent_server.c"),e(t)])]),n("ol",null,[w,n("li",null,[y,n("ul",null,[E,n("li",null,[n("p",null,[s("使用 "),L,s(" and "),x,s(", "),n("a",T,[s("参考这里的 40 - 44 行"),e(t)])])])]),N]),O,I]),S,n("p",null,[P,s(" 相比于 "),R,s(" 是创建带缓冲区的事件，包括读缓冲区和写缓冲区，参考"),n("a",C,[s("libevent 官网示例"),e(t)]),s("：")]),D])}const B=l(r,[["render",F],["__file","epoll.html.vue"]]);export{B as default};
