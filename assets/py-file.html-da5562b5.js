import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as i,f as a}from"./app-22cda79c.js";const l={},u=a(`<p>本文主要研究 Python 文件操作。</p><div class="hint-container info"><p class="hint-container-title">打开大文件的工具</p><p>很多时候，自带的工具打开大文件是很慢的，我们可以使用 <code>EmEditor</code> 工具，免费版还是很好用的。</p></div><h2 id="file-api" tabindex="-1"><a class="header-anchor" href="#file-api" aria-hidden="true">#</a> File API</h2><h3 id="exists" tabindex="-1"><a class="header-anchor" href="#exists" aria-hidden="true">#</a> exists</h3><p>可以使用如下的逻辑来判断我们的函数是否存在：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>s<span class="token punctuation">.</span>file_split<span class="token punctuation">)</span><span class="token punctuation">:</span>
    logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;The file {} is not exists! please check your path!&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>file_split<span class="token punctuation">)</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;sys.path is {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># if in __main__</span>
</code></pre></div><h3 id="listdir" tabindex="-1"><a class="header-anchor" href="#listdir" aria-hidden="true">#</a> listdir()</h3><p>很多时候我们需要遍历一个文件夹下面的所有文件，可以这样实现：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>file_dir <span class="token operator">=</span> <span class="token string">r&#39;&#39;</span>
<span class="token keyword">for</span> anr_file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>file_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    parse_anr<span class="token punctuation">(</span>anr_file<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container danger"><p class="hint-container-title">😭😭😭 BUG</p><p>切记 anr_file 最好传入文件的路径，而不是文件名本身。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> anr_file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>file_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_dir<span class="token punctuation">,</span> anr_file<span class="token punctuation">)</span>
    parse_anr<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
</code></pre></div><p>在这个地方进行一个对比，以便于引起注意。</p></div><h3 id="rename-folder" tabindex="-1"><a class="header-anchor" href="#rename-folder" aria-hidden="true">#</a> Rename Folder</h3><p>如果想对文件进行重命名的话，可以使用 <code>os.rename()</code>, 下面这是一个例子：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
new_folder_name <span class="token operator">=</span> <span class="token string">r&quot;anr/anr_{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%Y%m%d_%H%M_%S&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">r&quot;anr/anr&quot;</span><span class="token punctuation">,</span> new_folder_name<span class="token punctuation">)</span>
</code></pre></div><p>在这个例子中，我们使用了时间戳，命名后的文件类似于: <em>anr/anr_20230303_1115_14</em>。</p><h2 id="file-path" tabindex="-1"><a class="header-anchor" href="#file-path" aria-hidden="true">#</a> File path</h2><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> windows</h3><p>在 windows 下面，python 的路径可以有以下的写法：</p><ol><li>使用双下划线避免转码问题；</li><li>使用 <code>r&#39;xxx&#39;</code> 可以避免双下划线；这种做法的优点在于，可以直接复制文件的路径使用；</li><li><code>os.path</code> 模块的使用；</li></ol><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h3><p>window 下的路径如果继续想在 linux 下面使用，可以使用两种方式：</p><ol><li><p><code>os.step</code> 模块；这个保证了下划线是可以和操作系统匹配的</p></li><li><p><code>os.path</code> 模块；</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&#39;folder_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;file_name&#39;</span><span class="token punctuation">)</span>
</code></pre></div></li></ol><h2 id="linecache" tabindex="-1"><a class="header-anchor" href="#linecache" aria-hidden="true">#</a> linecache</h2>`,22),r={href:"https://docs.python.org/3/library/linecache.html#module-linecache",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="linecache-getline" tabindex="-1"><a class="header-anchor" href="#linecache-getline" aria-hidden="true">#</a> linecache.getline()</h3><p><code>linecache</code> 可以用来指定行号，然后读取这一行的元素。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> linecache
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> linecache<span class="token punctuation">.</span>getline<span class="token punctuation">(</span>linecache<span class="token punctuation">.</span>__file__<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
<span class="token string">&#39;import sys\\n&#39;</span>
</code></pre></div><p>😂😂😂 需要注意的是，8 表示第 9 行元素，<code>linecache</code> 取值默认<strong>从 0 开始</strong>。</p><p>这个函数会返回文件对应的这行结果，举例来说：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_line_content_by_line_num</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> line_num<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 参数校验</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> line_num <span class="token keyword">and</span> self<span class="token punctuation">.</span>_line_num <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;give a line num!&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> line_num<span class="token punctuation">:</span>
        line_num <span class="token operator">=</span> self<span class="token punctuation">.</span>_line_num
        content <span class="token operator">=</span> linecache<span class="token punctuation">.</span>getline<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">,</span> line_num<span class="token punctuation">)</span>
        <span class="token keyword">return</span> content
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的测试用例和输出：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test01</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    line_num <span class="token operator">=</span> <span class="token number">7187</span>
    res <span class="token operator">=</span> self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>get_line_content_by_line_num<span class="token punctuation">(</span>line_num<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    
<span class="token comment"># [TID 003c7e] I/ecmascript: 0000541c:aa1003f5 	mov	x21, x16</span>
</code></pre></div><p>需要注意的一个小细节是，<code>getline()</code>函数，而不是 <code>getlines()</code>, 这两个的功能是不一样的。</p><h3 id="linecache-getlines" tabindex="-1"><a class="header-anchor" href="#linecache-getlines" aria-hidden="true">#</a> linecache.getlines()</h3><p><code>getlines()</code> 可以用来获取这个文件的所有行，我们也可以根据这个函数来获取范围行的元素，如下所示：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
        file_lines <span class="token operator">=</span> linecache<span class="token punctuation">.</span>getlines<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span>
</code></pre></div><h3 id="mutil-lines" tabindex="-1"><a class="header-anchor" href="#mutil-lines" aria-hidden="true">#</a> mutil lines</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            next_line <span class="token operator">=</span> linecache<span class="token punctuation">.</span>getline<span class="token punctuation">(</span>f<span class="token punctuation">.</span>name<span class="token punctuation">,</span> idx <span class="token operator">+</span> j<span class="token punctuation">)</span>
            <span class="token keyword">if</span> next_line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                ops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>next_line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>目前得到文件中的连续行用该方法比较不错。比较 <code>linecache.getlines()</code> 更不容易出 bug, 但是为了方便起见，我们还是有限使用 <code>linecache.getlines()</code> 来取值。</p><h2 id="line-after-match-xx" tabindex="-1"><a class="header-anchor" href="#line-after-match-xx" aria-hidden="true">#</a> line after match xx</h2><p>代码找到匹配行开始往下数的第 xx 行<strong>注意是单独的一行！</strong>，例子为第 4 行(find the header then just take the next xx lines)。</p><h3 id="no-1-itertools-islice" tabindex="-1"><a class="header-anchor" href="#no-1-itertools-islice" aria-hidden="true">#</a> No.1 - itertools.islice</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> itertools <span class="token keyword">import</span> islice

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;words.txt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token keyword">if</span> line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;Heading&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>islice<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
line to be extracted
</code></pre></div><p>需要注意，这种方法可能会使得迭代以外终止，所以不是很好用，等以后加深理解了再研究吧！</p><h3 id="no-2-linecache-getline" tabindex="-1"><a class="header-anchor" href="#no-2-linecache-getline" aria-hidden="true">#</a> No.2 - linecache.getline</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> linecache <span class="token keyword">import</span> getline
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;words.txt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> ind<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;Heading&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>getline<span class="token punctuation">(</span>f<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ind <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
line to be extracted
</code></pre></div><h3 id="no-3-linecache-getline" tabindex="-1"><a class="header-anchor" href="#no-3-linecache-getline" aria-hidden="true">#</a> No.3 - linecache.getline</h3><p>mutils lines, don&#39;t break.</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> linecache <span class="token keyword">import</span> getline
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;words.txt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> ind<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;Heading&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>getline<span class="token punctuation">(</span>f<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ind <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

line to be extracted

other line to be extracted
</code></pre></div><div class="hint-container note"><p class="hint-container-title">小技巧：使 line 的编号从 1 开始</p><p>我们在 python 的文件处理中，很多时候行号都是从 0 开始的，上面代码中使用了 <code>enumerate(f,1)</code> 来方便了我们的操作，值得借鉴！</p><p>其原理可以大概解释如下：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
    
<span class="token number">1</span> <span class="token number">12</span>
<span class="token number">2</span> <span class="token number">13</span>
<span class="token number">3</span> <span class="token number">14</span>
<span class="token number">4</span> <span class="token number">15</span>
</code></pre></div><p>只是把下标变成了从 <code>1</code> 开始，但是并没有跳过第一个元素哦。</p></div><h2 id="file-rights" tabindex="-1"><a class="header-anchor" href="#file-rights" aria-hidden="true">#</a> File Rights</h2><table><thead><tr><th>模式</th><th>操作</th><th>文件不存在</th><th>是否覆盖</th></tr></thead><tbody><tr><td>r</td><td>read 只读</td><td>报错</td><td>-</td></tr><tr><td>w</td><td>write 可写</td><td>创建</td><td>是</td></tr><tr><td>a</td><td>append 文件后追加</td><td>创建</td><td>否 追加</td></tr><tr><td>r+</td><td>可读 可写</td><td>报错</td><td>是</td></tr><tr><td>w+</td><td>可读 可写</td><td>创建</td><td>是</td></tr><tr><td>a+</td><td>可读 可写</td><td>创建</td><td>否 追加</td></tr></tbody></table><ul><li><code>a</code> 是可访问可修改的吗？<br> 不是。<code>a</code>表示在文件后追加写，append。<code>a+</code> 既可以追加到文件中，也可以读取文件中的内容，而 <code>a</code> 是不可以读操作的。</li></ul><details class="hint-container details"><summary>BCD fopen() 手册</summary><blockquote><p>The argument mode points to a string beginning with one of the following sequences (Additional characters may follow these sequences.):</p></blockquote><ul><li><p><code>r</code> Open text file for <strong>reading</strong>. The stream is positioned at the <strong>beginning</strong> of the file.</p></li><li><p><code>r+</code> Open for <strong>reading and writing</strong>. The stream is positioned at the <strong>beginning</strong> of the file.</p></li><li><p><code>w</code> Truncate file to <strong>zero length</strong> or create text file for <strong>writing</strong>. The stream is positioned at the <strong>beginning</strong> of the file.</p></li><li><p><code>w+</code> Open for <strong>reading and writing</strong>. The file is created if it does not exist, otherwise it is <strong>truncated</strong>. The stream is positioned at the <strong>beginning</strong> of the file.</p></li><li><p><code>a</code> Open for <strong>writing</strong>. The file is created if it does not exist. The stream is positioned at the <strong>end</strong> of the file. Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening fseek(3) or similar.</p></li><li><p><code>a+</code> Open for <strong>reading and writing</strong>. The file is created if it does not exist. The stream is positioned at the <strong>end</strong> of the file. Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening fseek(3) or similar.</p></li></ul></details>`,30);function k(h,g){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("linecache"),i(t)]),s(" 是 Python 3.10 自带的文件处理模块。")]),d])}const y=e(l,[["render",k],["__file","py-file.html.vue"]]);export{y as default};
