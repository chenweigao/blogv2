import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-22cda79c.js";const p={},e=t(`<h2 id="data-download-and-extract" tabindex="-1"><a class="header-anchor" href="#data-download-and-extract" aria-hidden="true">#</a> Data Download and Extract</h2><p>Taking <em>cifar10</em> as an example,</p><div class="language-python" data-ext="py"><pre class="language-python"><code>DATA_URL <span class="token operator">=</span> <span class="token string">&#39;https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz&#39;</span>

filename <span class="token operator">=</span> DATA_URL<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
<span class="token comment">#output: path\\filename</span>
</code></pre></div><p>A programming skill can be use to display the download progress bar:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">_progress</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> block_size<span class="token punctuation">,</span> total_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
  sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;\\r&gt;&gt; Downloading %s %.1%%&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span>
                                                 <span class="token number">100.0</span> <span class="token operator">*</span> count <span class="token operator">*</span> block_size <span class="token operator">/</span> total_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
  sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>In this code, the function <code>write()</code> is just same as function <code>print()</code>, but it can be better used in file status print.</p><p>If you want to download models form internet, some <strong>URL</strong> API can be used:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> six<span class="token punctuation">.</span>moves <span class="token keyword">import</span> urllib
files<span class="token punctuation">,</span> header <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>DATA_URL<span class="token punctuation">,</span> filepath<span class="token punctuation">,</span> _progress<span class="token punctuation">)</span>
</code></pre></div><p>Then show the file info such as file size:</p><div class="language-python" data-ext="py"><pre class="language-python"><code>statinfo <span class="token operator">=</span> os<span class="token punctuation">.</span>stat<span class="token punctuation">(</span>files<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Successfully download&#39;</span><span class="token punctuation">,</span> files<span class="token punctuation">,</span> statinfo<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span> <span class="token string">&#39;bytes.&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>If you download a compressed file( the general is tar.gz file) and want to decompress it:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tarfile
tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> <span class="token string">&#39;r:gz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>your_file_path<span class="token punctuation">)</span>
</code></pre></div><p>Now, the file was successfully download and extracted.</p><h2 id="tensorflow-persistent-storage" tabindex="-1"><a class="header-anchor" href="#tensorflow-persistent-storage" aria-hidden="true">#</a> Tensorflow Persistent Storage</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf 

v <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;v&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> variables <span class="token keyword">in</span> tf<span class="token punctuation">.</span>global_variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span>variables<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

ema <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>ExponentialMovingAverage<span class="token punctuation">(</span><span class="token number">0.99</span><span class="token punctuation">)</span>
maintain_average_op <span class="token operator">=</span> ema<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>global_variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> variables <span class="token keyword">in</span> tf<span class="token punctuation">.</span>global_variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span>variables<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span> 
    init_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init_op<span class="token punctuation">)</span>

    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>assign<span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>maintain_average_op<span class="token punctuation">)</span>
    saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span><span class="token string">&quot;model/model.ckpt&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span>ema<span class="token punctuation">.</span>average<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then use it:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf 

v <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">&#39;v&#39;</span><span class="token punctuation">)</span>
ema <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>ExponentialMovingAverage<span class="token punctuation">(</span><span class="token number">0.99</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ema<span class="token punctuation">.</span>variables_to_restore<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#output: {u&#39;v/ExponentialMovingAverage&#39;: &lt;tf.Variable &#39;v:0&#39; shape=() dtype=float32_ref&gt;}</span>

saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span>ema<span class="token punctuation">.</span>variables_to_restore<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span> 
    saver<span class="token punctuation">.</span>restore<span class="token punctuation">(</span>sess<span class="token punctuation">,</span><span class="token string">&quot;model/model.ckpt&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if want to read checkpoint:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf 

reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>NewCheckpointReader<span class="token punctuation">(</span><span class="token string">&#39;model/model.ckpt&#39;</span><span class="token punctuation">)</span>

all_variables <span class="token operator">=</span> reader<span class="token punctuation">.</span>get_variable_to_shape_map<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> variable_name <span class="token keyword">in</span> all_variables<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>variable_name<span class="token punctuation">,</span>all_variables<span class="token punctuation">[</span>variable_name<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span><span class="token string">&quot;v&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="command-parameter" tabindex="-1"><a class="header-anchor" href="#command-parameter" aria-hidden="true">#</a> Command Parameter</h2><h3 id="argparse" tabindex="-1"><a class="header-anchor" href="#argparse" aria-hidden="true">#</a> Argparse</h3><p>In python, argparse is an useful function addition to call the command parameter. In the project of deep learning, we can use it to adjust parameter easily. To use it:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> argparse
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys

parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Basic model parameters.</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--batch_size&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>
                    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Number of images to process in a batch&#39;</span><span class="token punctuation">)</span>

parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--data_dir&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;./mnist_data&#39;</span><span class="token punctuation">,</span>
                    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Path to the MNIST data directory.&#39;</span><span class="token punctuation">)</span>

parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--model_dir&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;./mnist_model&#39;</span><span class="token punctuation">,</span>
                    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;The directory where the model will be stored.&#39;</span><span class="token punctuation">)</span>

parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--train_epochs&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>
                    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Number of epochs to train.&#39;</span><span class="token punctuation">)</span>

parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>
    <span class="token string">&#39;--data_format&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
    choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;channels_first&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;channels_last&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;A flag to override the data format used in the model. channels_first &#39;</span>
         <span class="token string">&#39;provides a performance boost on GPU but is not always compatible &#39;</span>
         <span class="token string">&#39;with CPU. If left unspecified, the data format will be chosen &#39;</span>
         <span class="token string">&#39;automatically based on whether TensorFlow was built for CPU or GPU.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, we use the import to initialize, then we call the argparse.ArgumentParser() to generate a parser, the is the command parameter, it is really a good trick for coding.</p><p>###tf.app.flags</p><p>The another way is to use <strong>tf.app.flags</strong> API:</p><div class="language-python" data-ext="py"><pre class="language-python"><code>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span>
    <span class="token string">&#39;dataset_name&#39;</span><span class="token punctuation">,</span>
    <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token string">&#39;The name of the dataset to convert, one of &quot;cifar10&quot;, &quot;flowers&quot;, &quot;mnist&quot;.&#39;</span><span class="token punctuation">)</span>

tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span>
    <span class="token string">&#39;dataset_dir&#39;</span><span class="token punctuation">,</span>
    <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token string">&#39;The directory where the output TFRecords and temporary files are saved.&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>What you can also use is <strong>DEFINE_string, DEFINE_boolean, DEFINE_integer, DEFINE_float</strong>, and then make a judgement and use it:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>FLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGS
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> <span class="token keyword">not</span> FLAGS<span class="token punctuation">.</span>dataset_name<span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;You must supply the dataset name with --dataset_name&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token keyword">not</span> FLAGS<span class="token punctuation">.</span>dataset_dir<span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;You must supply the dataset directory with --dataset_dir&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> FLAGS<span class="token punctuation">.</span>dataset_name <span class="token operator">==</span> <span class="token string">&#39;cifar10&#39;</span><span class="token punctuation">:</span>
    download_and_convert_cifar10<span class="token punctuation">.</span>run<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>dataset_dir<span class="token punctuation">)</span>
  <span class="token keyword">elif</span> FLAGS<span class="token punctuation">.</span>dataset_name <span class="token operator">==</span> <span class="token string">&#39;flowers&#39;</span><span class="token punctuation">:</span>
    download_and_convert_flowers<span class="token punctuation">.</span>run<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>dataset_dir<span class="token punctuation">)</span>
  <span class="token keyword">elif</span> FLAGS<span class="token punctuation">.</span>dataset_name <span class="token operator">==</span> <span class="token string">&#39;mnist&#39;</span><span class="token punctuation">:</span>
    download_and_convert_mnist<span class="token punctuation">.</span>run<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>dataset_dir<span class="token punctuation">)</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>
        <span class="token string">&#39;dataset_name [%s] was not recognized.&#39;</span> <span class="token operator">%</span> FLAGS<span class="token punctuation">.</span>dataset_name<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
  tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file-io" tabindex="-1"><a class="header-anchor" href="#file-io" aria-hidden="true">#</a> File IO</h2><h3 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h3><p>If the output is numbers, it is better to use <strong>array</strong> to input and output, which is more effective than a list:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> array <span class="token keyword">import</span> array
<span class="token keyword">from</span> random <span class="token keyword">import</span> random
floats_file <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;floats_file.bin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># new file &#39;floats.bin&#39; with size 0 bytes</span>
floats_file<span class="token punctuation">.</span>tofile<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>
<span class="token comment">#log to file, size is 79.2M</span>
fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

floats_file2 <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;floats_file&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span>
floats_file2<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token comment">#remeber there are two parameters</span>
fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># floats_file == floats_file2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The array.tofile and array.fromfile are very fast (if want to load millions double-precision floats from a binary file)</p>`,34),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","tensorflowio.html.vue"]]);export{k as default};
