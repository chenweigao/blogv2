import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as i,c as l,d as s,a as n,b as p,f as a}from"./app-22cda79c.js";const r={},u=a('<h1 id="notifier" tabindex="-1"><a class="header-anchor" href="#notifier" aria-hidden="true">#</a> Notifier</h1><h2 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract" aria-hidden="true">#</a> Abstract</h2><p>我们简单研究一下内核的 notify 机制。</p><p>大多数内核子系统都是相互独立的，但是某个子系统可能会对其他子系统产生的事件感兴趣。为了满足这个需求，让某个子系统在发生某个事件的时候通知其他的子系统，Linux kernel 提供了<strong>通知链</strong>的机制，通知链表只能够在内核的子系统之间使用，而不能够在内核与用户空间之间进行事件的通知。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文分析的代码主要集中于：<code>notifier.c</code> 和 <code>notifier.h</code> 中。</p></div><h2 id="notifier-struct" tabindex="-1"><a class="header-anchor" href="#notifier-struct" aria-hidden="true">#</a> Notifier Struct</h2><h3 id="notifier-chain-notifier-head" tabindex="-1"><a class="header-anchor" href="#notifier-chain-notifier-head" aria-hidden="true">#</a> notifier_chain(notifier_head)</h3><p>我们需要了解到，通知链可以分为 4 种<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>，如下表所示：</p><table><thead><tr><th>通知链(notifier.c)</th><th>定义</th></tr></thead><tbody><tr><td>原子通知链 atomic_notifier_head</td><td>采用<strong>自旋锁</strong>，通知链元素的回调函数（当事件发生时要执行的函数）在中断或原子操作上下文中运行，不允许阻塞。</td></tr><tr><td>可阻塞通知链 blocking_notifier_head</td><td>通知链使用<strong>信号量</strong>实现回调函数的加锁，通知链元素的回调函数在进程上下文中运行，允许阻塞。</td></tr><tr><td>原始通知链 raw_notifier_head</td><td>对通知链元素的回调函数<strong>没有任何限制</strong>，所有锁和保护机制都由调用者维护。</td></tr><tr><td>SRCU 通知链 srcu_notifier_head</td><td>可阻塞通知链的一种变体，采用<strong>互斥锁</strong>和叫做<strong>可睡眠的读拷贝更新机制</strong> (Sleep-able Read-Copy Update)。</td></tr></tbody></table><p>这几种通知链的区别是在<strong>执行通知链上的回调函数时是否有安全保护措施</strong>。</p>',10),k=a(`<p>上图主要阐述了这 4 中 notifier_chain 中都有共同的 notifier_block, 阐述了 notifier 和 notifier_block 的关系。</p><h3 id="atomic-notifier-head" tabindex="-1"><a class="header-anchor" href="#atomic-notifier-head" aria-hidden="true">#</a> atomic_notifier_head</h3><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> <span class="token punctuation">{</span>
	<span class="token class-name">spinlock_t</span> lock<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> __rcu <span class="token operator">*</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>其中 <code>spinlock_t</code> 在 kernel 中表示自旋锁。自旋锁是用来避免竞争条件的一种机制。</p><p>要初始化这个 head, 我们可以这么做：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATOMIC_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> name <span class="token operator">=</span>			</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token function">ATOMIC_NOTIFIER_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATOMIC_NOTIFIER_INIT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>				</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>lock <span class="token operator">=</span> <span class="token function">__SPIN_LOCK_UNLOCKED</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span></span></span>
</code></pre></div><p>或者使用对象直接初始化：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATOMIC_INIT_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
</code></pre></div><h3 id="blocking-notifier-head" tabindex="-1"><a class="header-anchor" href="#blocking-notifier-head" aria-hidden="true">#</a> blocking_notifier_head</h3><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">blocking_notifier_head</span> <span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> rwsem<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> __rcu <span class="token operator">*</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><code>blocking_notifier_head</code> 基于信号量的机制，本文不加以深入研究了。</p><p>初始化类似于上文：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLOCKING_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">blocking_notifier_head</span> name <span class="token operator">=</span>			</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token function">BLOCKING_NOTIFIER_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLOCKING_NOTIFIER_INIT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>				</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>rwsem <span class="token operator">=</span> <span class="token function">__RWSEM_INITIALIZER</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>rwsem<span class="token punctuation">)</span><span class="token punctuation">,</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">BLOCKING_INIT_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token function">init_rwsem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">-&gt;</span>rwsem<span class="token punctuation">)</span><span class="token punctuation">;</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="raw-notifier-head" tabindex="-1"><a class="header-anchor" href="#raw-notifier-head" aria-hidden="true">#</a> raw_notifier_head</h3><p>其定义如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">raw_notifier_head</span> <span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> __rcu <span class="token operator">*</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>比较纯粹的调用链，其初始化过程如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RAW_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span>					</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">raw_notifier_head</span> name <span class="token operator">=</span>				</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token function">RAW_NOTIFIER_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RAW_NOTIFIER_INIT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span>	<span class="token punctuation">{</span>				</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">RAW_INIT_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="srcu-notifier-head" tabindex="-1"><a class="header-anchor" href="#srcu-notifier-head" aria-hidden="true">#</a> srcu_notifier_head</h3><p>其定义如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">srcu_notifier_head</span> <span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">mutex</span> mutex<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">srcu_struct</span> srcu<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> __rcu <span class="token operator">*</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>这个能不能用依赖于宏定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_TREE_SRCU</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_SRCU_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token keyword">static</span> <span class="token function">DEFINE_PER_CPU</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">srcu_data</span><span class="token punctuation">,</span> name</span><span class="token punctuation">##</span><span class="token expression">_head_srcu_data<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
	<span class="token expression">mod <span class="token keyword">struct</span> <span class="token class-name">srcu_notifier_head</span> name <span class="token operator">=</span>			</span><span class="token punctuation">\\</span>
			<span class="token expression"><span class="token function">SRCU_NOTIFIER_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name</span><span class="token punctuation">##</span><span class="token expression">_head_srcu_data<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_SRCU_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression">mod <span class="token keyword">struct</span> <span class="token class-name">srcu_notifier_head</span> name <span class="token operator">=</span>			</span><span class="token punctuation">\\</span>
			<span class="token expression"><span class="token function">SRCU_NOTIFIER_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义后其初始化过程为：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SRCU_NOTIFIER_INIT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pcpu<span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token punctuation">{</span>							</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>mutex <span class="token operator">=</span> <span class="token function">__MUTEX_INITIALIZER</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>mutex<span class="token punctuation">)</span><span class="token punctuation">,</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>					</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>srcu <span class="token operator">=</span> <span class="token function">__SRCU_STRUCT_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>srcu<span class="token punctuation">,</span> pcpu<span class="token punctuation">)</span><span class="token punctuation">,</span>	</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token punctuation">}</span></span></span>
</code></pre></div><p>暂时研究到这，以后如果有使用了再加以研究。</p><h3 id="notifier-block" tabindex="-1"><a class="header-anchor" href="#notifier-block" aria-hidden="true">#</a> notifier_block</h3><p>通知链表(也称作通知块，挂在通知链上面，上文有图)， <code>notifier_block</code> 的数据结构定义如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>notifier_call<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
    <span class="token keyword">int</span> priority<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>我们对参数进行分析：</p><table><thead><tr><th>参数</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>notifier_call</td><td>函数指针</td><td>表示这个节点所对应的要运行的那个函数</td></tr><tr><td>next</td><td>notifier_block *</td><td>指向下一个节点，当前事件发生时还要继续指向的节点</td></tr><tr><td>priority</td><td>int</td><td>表示该通知的优先级，同一条链上面的 notifier_block 是按照优先级排列的，数字越大，优先级越高。</td></tr></tbody></table><p>注意到在 5.17.4 内核中，我们对结构体的定义发生了变化：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// notifier.h</span>
<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token punctuation">{</span>
	<span class="token class-name">notifier_fn_t</span> notifier_call<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> __rcu <span class="token operator">*</span>next<span class="token punctuation">;</span>
	<span class="token keyword">int</span> priority<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// notifier_fn_t</span>
<span class="token keyword">typedef</span>	<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">notifier_fn_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">,</span>
			<span class="token keyword">unsigned</span> <span class="token keyword">long</span> action<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们对这个版本的参数也进行分析：</p><table><thead><tr><th>参数</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>notifier_call</td><td>notifier_fn_t</td><td>宏定义的一个函数指针，对原来的 int (*notifier_call) 进行了一个封装</td></tr><tr><td>next</td><td>notifier_block*</td><td>还是指向下一个节点的 notifier_block</td></tr><tr><td>priority</td><td>int</td><td></td></tr></tbody></table><p>我们可以看到，新版的内核对函数指正进行了封装。个人理解这样做的好处在于，在阅读源码的时候，能更加方便的理解参数的含义。</p><p>新封装的函数指针 <code>notifier_fn_t</code> 的参数理解如下：</p><table><thead><tr><th>参数</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>nb</td><td>notifier_block *</td><td></td></tr><tr><td>action</td><td>unsigned long</td><td>用于指明事件的类型；通知都是一个整数</td></tr><tr><td>data</td><td>void *</td><td>void 类型的内存地址，在不同的子系统中表示不同的信息。</td></tr></tbody></table><p>对于第三个参数，需要注意的是：我们在设计自己的通知链系统可以用第三个入参实现在通知系统和被通知系统之间<em>数据的传递</em>，以便被通知系统的工作可以更加紧凑、高效。</p><h2 id="apis" tabindex="-1"><a class="header-anchor" href="#apis" aria-hidden="true">#</a> APIs</h2><h3 id="abstract-1" tabindex="-1"><a class="header-anchor" href="#abstract-1" aria-hidden="true">#</a> Abstract</h3><p>API 主要可以分为三类，如下图所示（无视那个虚线，为了排版）：</p>`,42),d=a(`<h3 id="notifier-chain-register" tabindex="-1"><a class="header-anchor" href="#notifier-chain-register" aria-hidden="true">#</a> notifier_chain_register</h3><p>通知链需要进行注册（注意到注册的时候要保证通知链存在，需要的前置步骤是后文的 init 部分，或者前文的 struct 部分也有介绍），对于一个链表的注册，需要一个表头，指向这个通知链表的第一个元素，注册函数的定义如下（Linux 内核中有很多的注册函数，我们拿一个举例）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// notifier.c</span>
<span class="token comment">// Returns 0 on success, %-EEXIST on error</span>
<span class="token keyword">int</span> <span class="token function">atomic_notifier_chain_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret<span class="token punctuation">;</span>

	<span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nh<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
	ret <span class="token operator">=</span> <span class="token function">notifier_chain_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nh<span class="token operator">-&gt;</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nh<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数的作用是 <em>Add notifier to an atomic notifier chain</em>, 就是在原子调用链中增加一个 notifier, 参数含义如下：</p><table><thead><tr><th>参数</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>nh</td><td>atomic_notifier_head*</td><td>Pointer to head of the atomic notifier chain. <br>指向调用链头部的一个指针。</td></tr><tr><td>n</td><td>notifier_block*</td><td>前文分析过的 notifier_block</td></tr></tbody></table><p>第 9 行，使用了一个自旋锁，这是由 <code>atomic_notifier_head</code> 中的 <code>lock</code> 属性决定的。</p><p>atomic_notifier_head 的定义如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> <span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span> lock<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> __rcu <span class="token operator">*</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>具体分析见上文。</p><h4 id="notifier-chain-register-1" tabindex="-1"><a class="header-anchor" href="#notifier-chain-register-1" aria-hidden="true">#</a> notifier_chain_register</h4><p>静态方法 notifier_chain_register 的实现如下：</p><blockquote><p>Notifier chain core routines. The exported routines below are layered on top of these, with appropriate locking added.</p></blockquote><p>notifier chain 的核心代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">notifier_chain_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span><span class="token operator">*</span>nl<span class="token punctuation">,</span>
				   <span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>nl<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>nl<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">WARN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;notifier callback %ps already registered&quot;</span><span class="token punctuation">,</span>
			     n<span class="token operator">-&gt;</span>notifier_call<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>priority <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>nl<span class="token punctuation">)</span><span class="token operator">-&gt;</span>priority<span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		nl <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>nl<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	n<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token operator">*</span>nl<span class="token punctuation">;</span>
	<span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span><span class="token operator">*</span>nl<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>n1</code> 在调用的时候作为 <code>head</code> 传入，确保 <code>n</code> 的优先级比 <code>n1</code> 低。</p><h3 id="notifier-chain-unregister" tabindex="-1"><a class="header-anchor" href="#notifier-chain-unregister" aria-hidden="true">#</a> notifier_chain_unregister</h3><p>类似的，我们还有一个卸载函数 <code>notifier_chain_unregister</code>， 其定义如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">notifier_chain_unregister</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span><span class="token operator">*</span>nl<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其含义是将节点 n 从 nl 指向的链表中删除。</p><h3 id="notifier-call-chain" tabindex="-1"><a class="header-anchor" href="#notifier-call-chain" aria-hidden="true">#</a> notifier_call_chain</h3><blockquote><p>notifier_call_chain - Informs the registered notifiers about an event.</p><p>notifier_call_chain returns the value returned by the last notifier function called.</p></blockquote><p><code>notifier_call_chain</code> 的作用是：当有事件发生的时候，使用该函数通知链表发送消息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// notifier.c</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">notifier_call_chain</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span><span class="token operator">*</span>nl<span class="token punctuation">,</span>
			       <span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">,</span>
			       <span class="token keyword">int</span> nr_to_call<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nr_calls<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> NOTIFY_DONE<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">,</span> <span class="token operator">*</span>next_nb<span class="token punctuation">;</span>

	nb <span class="token operator">=</span> <span class="token function">rcu_dereference_raw</span><span class="token punctuation">(</span><span class="token operator">*</span>nl<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>nb <span class="token operator">&amp;&amp;</span> nr_to_call<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		next_nb <span class="token operator">=</span> <span class="token function">rcu_dereference_raw</span><span class="token punctuation">(</span>nb<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_NOTIFIERS</span></span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">func_ptr_is_kernel_text</span><span class="token punctuation">(</span>nb<span class="token operator">-&gt;</span>notifier_call<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">WARN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Invalid notifier called!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			nb <span class="token operator">=</span> next_nb<span class="token punctuation">;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
		ret <span class="token operator">=</span> nb<span class="token operator">-&gt;</span><span class="token function">notifier_call</span><span class="token punctuation">(</span>nb<span class="token punctuation">,</span> val<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>nr_calls<span class="token punctuation">)</span>
			<span class="token punctuation">(</span><span class="token operator">*</span>nr_calls<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&amp;</span> NOTIFY_STOP_MASK<span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		nb <span class="token operator">=</span> next_nb<span class="token punctuation">;</span>
		nr_to_call<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">NOKPROBE_SYMBOL</span><span class="token punctuation">(</span>notifier_call_chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数比较长，但是比较重要，我们首先分析这个函数的参数：</p><table><thead><tr><th>参数</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>nl</td><td>notifier_block **</td><td>Pointer to head of the blocking notifier chain<br>这个是指向链表头结点</td></tr><tr><td>val</td><td>unsigned long</td><td>Value passed unmodified to notifier function<br>如何理解这个 passed unmodified? ❓❓❓</td></tr><tr><td>v</td><td>void*</td><td>Pointer passed unmodified to notifier function</td></tr><tr><td>nr_to_call</td><td>int</td><td>Number of notifier functions to be called. Don&#39;t care value of this parameter is -1.<br>要调用的通知函数的数量。</td></tr><tr><td>nr_calls</td><td>int*</td><td>Records the number of notifications sent. Don&#39;t care value of this field is NULL.</td></tr></tbody></table><p>我们这个函数实现大致可以概括如下：</p><ol><li><p>遍历链表 nl, 拿到当前的 notifier_block <code>nb</code> 和下一个 <code>next_nb</code></p></li><li><p>对于当前的 <code>nb</code>, 调用 <code>nb-&gt;notifier_call</code> 函数指针，我们结合这个函数的指针来看：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token comment">// notifier_fn_t notifier_call in notifier_block</span>
<span class="token keyword">typedef</span>	<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">notifier_fn_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">,</span>
			<span class="token keyword">unsigned</span> <span class="token keyword">long</span> action<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// notifier_call_chain</span>
ret <span class="token operator">=</span> nb<span class="token operator">-&gt;</span><span class="token function">notifier_call</span><span class="token punctuation">(</span>nb<span class="token punctuation">,</span> val<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样参数就可以对应起来了，🔴🔴🔴 还需要根据调用继续理解。</p></li><li><p>当前的通知过后，继续通知下一个。</p></li></ol><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="usage-init" tabindex="-1"><a class="header-anchor" href="#usage-init" aria-hidden="true">#</a> Usage: init</h3><p>在上文研究了 notifier 的基本机制以后，我们现在来研究如何使用。</p><p>在前面我们提到，通知链有四种，我们在使用的时候，需要了解到我们的场景中，需要使用哪个调用链。</p><p>我们在 <code>notifier.h</code> 文件中搜索通知链的大写名称即可看到不同类通知链的初始化函数，我们拿 <code>ATOMIC_NOTIFIER_HEAD</code> 举例（上文也研究过了）：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATOMIC_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span>				</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> name <span class="token operator">=</span>			</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token function">ATOMIC_NOTIFIER_INIT</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATOMIC_NOTIFIER_INIT</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>				</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>lock <span class="token operator">=</span> <span class="token function">__SPIN_LOCK_UNLOCKED</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span></span></span>
</code></pre></div><p>以上两者是等价的，我们初始化的方式要对比定义来看比较直观：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> <span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span> lock<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> __rcu <span class="token operator">*</span>head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>哈哈哈，十分巧妙！</p><p>如果我们有一个现成的 <code>atomic_notifier_head</code> 通知链对象，我们可以调用以下的初始化方法：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATOMIC_INIT_NOTIFIER_HEAD</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>	</span><span class="token punctuation">\\</span>
		<span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
</code></pre></div><p>一般而言，我们要使用通知链的话，是这么玩的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> dock_notifier_list<span class="token punctuation">;</span>
<span class="token function">ATOMIC_INIT_NOTIFIER_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dock_notifier_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样，我们就拥有通知链了。</p><h3 id="usage-register-unregister-and-call" tabindex="-1"><a class="header-anchor" href="#usage-register-unregister-and-call" aria-hidden="true">#</a> Usage: register, unregister and call</h3><p>init 通知链以后，我们还需要往通知链上面注册、卸载通知块，或者遍历通知块。这里的通知块指的是 <code>notifier_block</code>, 内核提供的通知链的接口我们在上文已经进行了研究，为了方便理解，我们再对其进行一个归类总结，主要可以分为三类，其源码定义如下：</p><p>register：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">atomic_notifier_chain_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">blocking_notifier_chain_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blocking_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">raw_notifier_chain_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">raw_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">srcu_notifier_chain_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">srcu_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>unregister:</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">atomic_notifier_chain_unregister</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">blocking_notifier_chain_unregister</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blocking_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">raw_notifier_chain_unregister</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">raw_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">srcu_notifier_chain_unregister</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">srcu_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>call:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">atomic_notifier_call_chain</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">atomic_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">blocking_notifier_call_chain</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blocking_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">raw_notifier_call_chain</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">raw_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">srcu_notifier_call_chain</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">srcu_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">blocking_notifier_call_chain_robust</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blocking_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> val_up<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> val_down<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">raw_notifier_call_chain_robust</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">raw_notifier_head</span> <span class="token operator">*</span>nh<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> val_up<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> val_down<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage-example" tabindex="-1"><a class="header-anchor" href="#usage-example" aria-hidden="true">#</a> Usage: example</h3><p>上述这四类通知链的基本 API 又构成了内核中其他子系统定义、操作自己通知链的基础。例如 Netlink 定义了一个原子通知链，所以，它对原子通知链的基本API又封装了一层，以形成自己的特色:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token function">ATOMIC_NOTIFIER_HEAD</span><span class="token punctuation">(</span>netlink_chain<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">netlink_register_notifier</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">atomic_notifier_chain_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>netlink_chain<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>netlink_register_notifier<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">netlink_unregister_notifier</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">atomic_notifier_chain_unregister</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>netlink_chain<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>netlink_unregister_notifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网络事件也有一个原子通知链 <code>net/core/netevent.c</code>, 只列举接口名称：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">register_netevent_notifier</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">unregister_netevent_notifier</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">notifier_block</span> <span class="token operator">*</span>nb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">call_netevent_notifiers</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="how-notifier-works" tabindex="-1"><a class="header-anchor" href="#how-notifier-works" aria-hidden="true">#</a> How notifier works</h2><p>通知链的运作机制包括两个角色：</p><ol><li><p>被通知者：对某一事件感兴趣的一方。定义了当事件发生的时候，相应的处理函数，即回调函数，被通知者将其注册到通知链中。</p></li><li><p>通知者：事件的通知者。检测到某个事件或者产生某个事件的时候，通知所有对该事件产生兴趣的一方，通知者需要<strong>定义一个通知链</strong>，并在其中保存每一个被通知者对事件的回调函数。</p><p>通知这个过程本质上就是遍历通知链中的每一项，然后调用相应的回调函数。</p></li></ol><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><h3 id="something" tabindex="-1"><a class="header-anchor" href="#something" aria-hidden="true">#</a> Something</h3><p>我们以后在阅读调用链相关的源码的时候，可以参考以下的方法：</p><ol><li>注册通知链回调函数的系统和提供通知链的系统之间一定存在某种联系，且本系统需要那个系统对某个重要事件进行响应</li><li>看本系统注册的通知链回调函数的实现：它对哪些事情感兴趣，是怎么处理的？</li><li>提供通知链对象的系统有哪些事件？</li></ol><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><hr class="footnotes-sep">`,63),_={class:"footnotes"},m={class:"footnotes-list"},v={id:"footnote1",class:"footnote-item"},h={href:"https://learning-kernel.readthedocs.io/en/latest/kernel-notifier.html",target:"_blank",rel:"noopener noreferrer"},f=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function b(g,y){const t=e("Mermaid"),o=e("ExternalLinkIcon");return i(),l("div",null,[u,s(t,{id:"mermaid-75",code:"eJyNz0EOgyAQBdC1PcVcwB6hi667aro3OKJMaqEZhnj9KqbSBkzcMMnnMeH3o5vQKBa43U8APrQDq7cB64R60jxnAB2xRiFn4XGNwcaUuBdh89WN0aqLQtt1brIdHT7JDkcsq+kI84xh161nssIBZU6qrGITv7Zc/b4sNYP6XINRfpmXKu0sd9vTWbs/mFxer7zxA8XKk38="}),k,s(t,{id:"mermaid-319",code:"eJyN0MEOwiAMgOG7T9GjxmRP4dGTL7DUitjIICksHozvLjplbsOxI+0f8qVk0PsdoxZsVgAnFkWBnYX9IT7fWxCl2QclcI8jgC1gcA1TbV3gMyup6YJs62+23nyyo3F0ZauLoeCt2HihdjZ6JG9rF4r7sGjOpBl1psq5R1kvJzTG/0fHbffDHHcaDaHT/Yg4DF64dM6q6ohx9nPkNH0Cwi/H6w=="}),d,n("section",_,[n("ol",m,[n("li",v,[n("p",null,[n("a",h,[p("linux内核通知链"),s(o)]),p(),f])])])])])}const I=c(r,[["render",b],["__file","notifier.html.vue"]]);export{I as default};
