import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as s,d as c,f as i}from"./app-22cda79c.js";const l={},u=i(`<h2 id="asm" tabindex="-1"><a class="header-anchor" href="#asm" aria-hidden="true">#</a> __asm</h2><p>Example<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">__asm</span> <span class="token punctuation">(</span><span class="token string">&quot;ADD %[result], %[input_i], %[input_j]&quot;</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token string">&quot;=r&quot;</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>input_i<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>input_j<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Result of %d + %d = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们仔细研究上述的例子，可以看到，其内嵌了一条 <code>ADD</code> 指令，其语法如下所示：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>__asm <span class="token punctuation">[</span><span class="token keyword">volatile</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Basic inline assembly syntax */</span>
</code></pre></div><p>其中的 code 就是我们需要内嵌的汇编代码，其中 <code>[volatile]</code> 是可选的，后续我们再对此进行说明。</p><p>如果将 code 展开的话，如下所示：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/* Extended inline assembly syntax */</span> 
__asm <span class="token punctuation">[</span><span class="token keyword">volatile</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>code_template 
       <span class="token operator">:</span> output_operand_list 
      <span class="token punctuation">[</span><span class="token operator">:</span> input_operand_list 
      <span class="token punctuation">[</span><span class="token operator">:</span> clobbered_register_list<span class="token punctuation">]</span><span class="token punctuation">]</span> 
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>我们总共有 3 个 <strong>”:“</strong>, 每一个后面都有不同的含义，下面对其进行具体说明。（注意 <em>[]</em> 符号包含住表示的是这个参数是可选的）</p><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> output</h3><p>第一个 ：冒号后面跟汇编代码的输出；有几个细节需要注意：</p><ul><li>&quot;=r&quot; 而不是 &quot;r&quot;, 在输出中</li><li><code>%[variable]</code> 的 % 是在最前面的</li></ul><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h3><p>第二个后面跟汇编代码的输入，如下所示：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">__asm</span> <span class="token punctuation">(</span><span class="token string">&quot;ADD R0, %[input_i], %[input_j]&quot;</span>
    <span class="token operator">:</span>  <span class="token comment">/* This is an empty output operand list */</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>input_i<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>input_j<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在这个例子中，我们将 <code>input_i</code> 和 <code>input_j</code> 的值相加放入寄存器 <code>R0</code> 中，每一个 input 都使用逗号分隔开，三个字段 <code>[input_i] &quot;r&quot; (i)</code> 的含义分别是符号名称，约束字符串和 C 表达式。</p><h3 id="clobbered-register-list" tabindex="-1"><a class="header-anchor" href="#clobbered-register-list" aria-hidden="true">#</a> clobbered_register_list</h3><p>这个里面指定寄存器，嵌入式汇编代码中指定的寄存器可能会产生冲突，因此需要把这些寄存器列举出来，表示其可以在编译的时候被重命名。</p><h2 id="real-example" tabindex="-1"><a class="header-anchor" href="#real-example" aria-hidden="true">#</a> Real Example</h2><h3 id="prfm" tabindex="-1"><a class="header-anchor" href="#prfm" aria-hidden="true">#</a> prfm</h3><p>下面例子是实战中写的汇编示例，使用了 <code>prfm</code> 指令：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  #<span class="token keyword">if</span> <span class="token function">defined</span><span class="token punctuation">(</span>__arm__<span class="token punctuation">)</span>
  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
      <span class="token string">&quot;add %[result], %[input_i], %[input_j]\\n\\t&quot;</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token string">&quot;+r&quot;</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token punctuation">[</span>input_i<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>input_j<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
    <span class="token string">&quot;prfm pldl2strm, [%[ptr], #256]&quot;</span>
    <span class="token operator">:</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>ref<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  #endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="builtin-prefetch" tabindex="-1"><a class="header-anchor" href="#builtin-prefetch" aria-hidden="true">#</a> __builtin_prefetch()</h3><p><code>__builtin_prefetch()</code> 接口的使用，我们列举几个 art 的例子，看一下大佬门是怎么使用预取，保证提前量，或者将预取的功效发挥到最大的：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>mark_stack_pos_ <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> prefetch_fifo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> kFifoSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mirror<span class="token double-colon punctuation">::</span>Object<span class="token operator">*</span> <span class="token keyword">const</span> mark_stack_obj <span class="token operator">=</span> mark_stack_<span class="token punctuation">[</span><span class="token operator">--</span>mark_stack_pos_<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">AsMirrorPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DCHECK</span><span class="token punctuation">(</span>mark_stack_obj <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__builtin_prefetch</span><span class="token punctuation">(</span>mark_stack_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    prefetch_fifo<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mark_stack_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">UNLIKELY</span><span class="token punctuation">(</span>prefetch_fifo<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
obj <span class="token operator">=</span> prefetch_fifo<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
prefetch_fifo<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的预取位置在 <code>push_back</code> 前面，因为堆栈操作需要一定的时延，所以说利用这个时延在堆栈之前进行预取。</p><p>其次就是利用 fifo 数据结构，但是在实践中使用该方法，并无太大的增益。</p><h3 id="prefetch-in-for-loop" tabindex="-1"><a class="header-anchor" href="#prefetch-in-for-loop" aria-hidden="true">#</a> prefetch in for loop</h3><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">uint8_t</span><span class="token operator">*</span> begin <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint8_t</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>new_run<span class="token punctuation">)</span> <span class="token operator">+</span> headerSizes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_of_bytes<span class="token punctuation">;</span> i <span class="token operator">+=</span> kPrefetchStride<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">__builtin_prefetch</span><span class="token punctuation">(</span>begin <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果需要保证提前量，可以如下例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  size_t bytes_freed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_ptrs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mirror<span class="token double-colon punctuation">::</span>Object<span class="token operator">*</span> ptr <span class="token operator">=</span> ptrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> size_t look_ahead <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kPrefetchDuringDlMallocFreeList <span class="token operator">&amp;&amp;</span> i <span class="token operator">+</span> look_ahead <span class="token operator">&lt;</span> num_ptrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// The head of chunk for the allocation is sizeof(size_t) behind the allocation.</span>
      <span class="token function">__builtin_prefetch</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ptrs<span class="token punctuation">[</span>i <span class="token operator">+</span> look_ahead<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bytes_freed <span class="token operator">+=</span> <span class="token function">AllocationSizeNonvirtual</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mrs-pmu" tabindex="-1"><a class="header-anchor" href="#mrs-pmu" aria-hidden="true">#</a> mrs pmu</h3><p>下面这个是读取 PMU 寄存器中的数据的示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">uint64_t</span> <span class="token function">arch_counter_get_cntpct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">uint64_t</span> cval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__aarch64__<span class="token punctuation">)</span></span></span>
  __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
    <span class="token comment">// &quot;mrs %[res], PMCCNTR_EL0&quot;</span>
    <span class="token string">&quot;mrs %[res], CNTVCT_EL0&quot;</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token string">&quot;=r&quot;</span> <span class="token punctuation">(</span>cval<span class="token punctuation">)</span>
    <span class="token operator">:</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// LOG(INFO) &lt;&lt; &quot;[PREFETCH], COUNTER IS &quot; &lt;&lt; cval;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">return</span> cval<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CNTVCT_EL0</code> 寄存器为一个不需要开启用户态访问权限也能访问到的寄存器。</p><h3 id="memcpy" tabindex="-1"><a class="header-anchor" href="#memcpy" aria-hidden="true">#</a> memcpy</h3><p>下面这个是嵌入 <code>memecpy</code> 的例子：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__aarch64__<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span></span></span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// copy len 16</span>
    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ldp x5, x4 ,[%[src], #8]\\n\\t&quot;</span>
    <span class="token string">&quot;stp x5, x4 ,[%[dst], #8]\\n\\t&quot;</span>
    <span class="token operator">:</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>from_ref<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dst<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>to_ref<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token string">&quot;x4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x5&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// copy length 24</span>
    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ldp x5, x4 ,[%[src], #8]\\n\\t&quot;</span>
    <span class="token string">&quot;ldr x6 ,[%[src], #24]\\n\\t&quot;</span>
    <span class="token string">&quot;stp x5, x4 ,[%[dst], #8]\\n\\t&quot;</span>
    <span class="token string">&quot;str x6 ,[%[dst], #24]\\n\\t&quot;</span>
    <span class="token operator">:</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>from_ref<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dst<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>to_ref<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token string">&quot;x4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x6&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// copy length 32</span>
    __asm__ <span class="token function">__volatile__</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ldp x5, x4 ,[%[src], #8]\\n\\t&quot;</span>
    <span class="token string">&quot;ldp x7, x6 ,[%[src], #24]\\n\\t&quot;</span>
    <span class="token string">&quot;stp x5, x4 ,[%[dst], #8]\\n\\t&quot;</span>
    <span class="token string">&quot;stp x7, x6 ,[%[dst], #24]\\n\\t&quot;</span>
    <span class="token operator">:</span>
    <span class="token operator">:</span> <span class="token punctuation">[</span>src<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>from_ref<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dst<span class="token punctuation">]</span> <span class="token string">&quot;r&quot;</span> <span class="token punctuation">(</span>to_ref<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token string">&quot;x4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x7&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
	<span class="token comment">// some code</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子比较长，但是可以供参考，这是比较完备的举例。</p><hr class="footnotes-sep">`,40),r={class:"footnotes"},k={class:"footnotes-list"},d={id:"footnote1",class:"footnote-item"},v={href:"https://developer.arm.com/documentation/100748/0616/Using-Assembly-and-Intrinsics-in-C-or-C---Code/Writing-inline-assembly-code",target:"_blank",rel:"noopener noreferrer"},m=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function _(b,f){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("section",r,[n("ol",k,[n("li",d,[n("p",null,[n("a",v,[s("ARM 官方文档"),c(a)]),s(),m])])])])])}const q=t(l,[["render",_],["__file","arm_inline_assembly.html.vue"]]);export{q as default};
