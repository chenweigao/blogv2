const n=JSON.parse('{"key":"v-ad41f4c0","path":"/others/tmp/code_simple.html","title":"如何让业务代码有扩展性","lang":"zh-CN","frontmatter":{"description":"如何让业务代码有扩展性 Demo 实现 1. 定义 handler package cc.weigao.test01.handler; import org.aopalliance.intercept.Invocation; import org.springframework.core.Ordered; public interface AbstractHandler extends Ordered { default boolean preHandler(Invocation invocation) { return true; } default void afterHandler(Invocation invocation) { } }","head":[["meta",{"property":"og:url","content":"https://vueblog.weigao.cc/others/tmp/code_simple.html"}],["meta",{"property":"og:site_name","content":"WW"}],["meta",{"property":"og:title","content":"如何让业务代码有扩展性"}],["meta",{"property":"og:description","content":"如何让业务代码有扩展性 Demo 实现 1. 定义 handler package cc.weigao.test01.handler; import org.aopalliance.intercept.Invocation; import org.springframework.core.Ordered; public interface AbstractHandler extends Ordered { default boolean preHandler(Invocation invocation) { return true; } default void afterHandler(Invocation invocation) { } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Someone"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何让业务代码有扩展性\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Someone\\",\\"url\\":\\"https://www.weigao.cc\\"}]}"]]},"headers":[{"level":2,"title":"Demo 实现","slug":"demo-实现","link":"#demo-实现","children":[{"level":3,"title":"1. 定义 handler","slug":"_1-定义-handler","link":"#_1-定义-handler","children":[]},{"level":3,"title":"2. 创建处理器 chain","slug":"_2-创建处理器-chain","link":"#_2-创建处理器-chain","children":[]},{"level":3,"title":"3. 定义 Invocation 类","slug":"_3-定义-invocation-类","link":"#_3-定义-invocation-类","children":[]},{"level":3,"title":"4. 业务逻辑和责任链整合","slug":"_4-业务逻辑和责任链整合","link":"#_4-业务逻辑和责任链整合","children":[]}]}],"git":{},"readingTime":{"minutes":0.52,"words":156},"filePathRelative":"others/tmp/code_simple.md","excerpt":"<h1> 如何让业务代码有扩展性</h1>\\n<h2> Demo 实现</h2>\\n<h3> 1. 定义 handler</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">cc<span class=\\"token punctuation\\">.</span>weigao<span class=\\"token punctuation\\">.</span>test01<span class=\\"token punctuation\\">.</span>handler</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>aopalliance<span class=\\"token punctuation\\">.</span>intercept<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Invocation</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>core<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Ordered</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">AbstractHandler</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Ordered</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">preHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Invocation</span> invocation<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">afterHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Invocation</span> invocation<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
