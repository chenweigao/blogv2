import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,f as t}from"./app-22cda79c.js";const e={},o=t(`<h2 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract" aria-hidden="true">#</a> Abstract</h2><p>本文主要研究 art 中的 dex2oat 模块。</p><p>写作本文的目的在于，笔者在研究 <code>getCharNoCheck</code> 的 native 实现的时候，发现其调用的路径是与 dex2oat 有关的，所以对这个模块进行简单的研究；</p><p>第一阶段本文主要研究，Andriod 运行时 art 加载 oat 文件的过程分析，写作时间2022年10月28日；</p><p>第二阶段主要对本文进行补充，包括 oat 文件结构的研究；</p><h2 id="art-oat" tabindex="-1"><a class="header-anchor" href="#art-oat" aria-hidden="true">#</a> Art &amp; oat</h2><h3 id="oat-文件的产生" tabindex="-1"><a class="header-anchor" href="#oat-文件的产生" aria-hidden="true">#</a> oat 文件的产生</h3><p>首先需要弄明白，oat 文件是如何产生的？首先是 Art 虚拟机的创建过程，我们在前文已经进行了研究。</p><p>@todo</p><h3 id="dex2oat-什么时候被触发" tabindex="-1"><a class="header-anchor" href="#dex2oat-什么时候被触发" aria-hidden="true">#</a> dex2oat 什么时候被触发</h3><p>dex2oat 进程的启动，可以分为两类：</p><ol><li><p>Installd 进程触发的 dex2oat</p><ul><li><p>应用安装；包括普通安装和通过 shellCmd 安装，安装一个 app 的过程中需要编译 dex 文件，会通知 Installd 来触发一个 dex2oat 进程</p></li><li><p>开机扫描，开机过程中，PMS 扫描已安装 app 过程，判断需要优化时，则会对 installd 发出通知</p></li><li><p>BackgroundDexOptService，空闲时段或者开机之后触发的 Backgroud 的 Job，会通知 installd 进行dex2oat</p></li><li><p>OTADexoptService, 疑似 OTA 过程中触发</p></li></ul></li><li><p>由 app 中直接调用的 dex2oat；App 进程 fork 出一个子进程，子进程用来执行 dex2oat, 编译相关的 dex, 父进程进行 waitpid 等待，等待完成后再运行其他逻辑。</p><ul><li><p>微信安装后的首次启动，有 dex2oat 的调用；</p></li><li><p>淘宝安装后的首次搜索，有 dex2oat 的调用</p></li></ul></li></ol><h2 id="dex2oat-code" tabindex="-1"><a class="header-anchor" href="#dex2oat-code" aria-hidden="true">#</a> dex2oat code</h2><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> main()</h3><p>dex2oat 的 main 函数定义如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// art/dex2oat/dex2oat.cc</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>art<span class="token double-colon punctuation">::</span><span class="token function">Dex2oat</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Everything was done, do an explicit exit here to avoid running Runtime destructors that take</span>
  <span class="token comment">// time (bug 10645725) unless we&#39;re a debug or instrumented build or running on a memory tool.</span>
  <span class="token comment">// Note: The Dex2Oat class should not destruct the runtime in this case.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>art<span class="token double-colon punctuation">::</span>kIsDebugBuild <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>art<span class="token double-colon punctuation">::</span>kIsPGOInstrumentation <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>art<span class="token double-colon punctuation">::</span>kRunningOnMemoryTool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    art<span class="token double-colon punctuation">::</span><span class="token function">FastExit</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 main 函数中，调用了 <code>Dex2oat</code>；</p>`,17),p=[o];function c(i,l){return n(),s("div",null,p)}const u=a(e,[["render",c],["__file","art_dex2oat.html.vue"]]);export{u as default};
