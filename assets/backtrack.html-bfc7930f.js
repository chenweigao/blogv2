const e=JSON.parse('{"key":"v-274a102e","path":"/algorithm/backtrack.html","title":"Backtrack","lang":"zh-CN","frontmatter":{"title":"Backtrack","date":"2021-01-15T00:00:00.000Z","description":"Abstract 回溯法（英语：backtracking）是暴力搜索法中的一种。 对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束补偿问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。","head":[["meta",{"property":"og:url","content":"https://vueblog.weigao.cc/algorithm/backtrack.html"}],["meta",{"property":"og:site_name","content":"WW"}],["meta",{"property":"og:title","content":"Backtrack"}],["meta",{"property":"og:description","content":"Abstract 回溯法（英语：backtracking）是暴力搜索法中的一种。 对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于约束补偿问题（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Someone"}],["meta",{"property":"article:published_time","content":"2021-01-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Backtrack\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Someone\\",\\"url\\":\\"https://www.weigao.cc\\"}]}"]]},"headers":[{"level":2,"title":"Abstract","slug":"abstract","link":"#abstract","children":[]},{"level":2,"title":"模板","slug":"模板","link":"#模板","children":[]},{"level":2,"title":"例题解析","slug":"例题解析","link":"#例题解析","children":[{"level":3,"title":"LC17 电话号码的字母组合","slug":"lc17-电话号码的字母组合","link":"#lc17-电话号码的字母组合","children":[]},{"level":3,"title":"LC22 括号生成","slug":"lc22-括号生成","link":"#lc22-括号生成","children":[]},{"level":3,"title":"LC39 组合总数","slug":"lc39-组合总数","link":"#lc39-组合总数","children":[]},{"level":3,"title":"LC40 组合总数II","slug":"lc40-组合总数ii","link":"#lc40-组合总数ii","children":[]},{"level":3,"title":"LC46 全排列","slug":"lc46-全排列","link":"#lc46-全排列","children":[]},{"level":3,"title":"LC47 全排列II","slug":"lc47-全排列ii","link":"#lc47-全排列ii","children":[]},{"level":3,"title":"LC77 组合","slug":"lc77-组合","link":"#lc77-组合","children":[]},{"level":3,"title":"LC473 火柴拼正方形","slug":"lc473-火柴拼正方形","link":"#lc473-火柴拼正方形","children":[]}]}],"git":{},"readingTime":{"minutes":11.03,"words":3309},"filePathRelative":"algorithm/backtrack.md","localizedDate":"2021年1月15日","excerpt":"<h2> Abstract</h2>\\n<p><strong>回溯法</strong>（英语：backtracking）是<a href=\\"https://zh.wikipedia.org/wiki/%E6%9A%B4%E5%8A%9B%E6%90%9C%E5%B0%8B%E6%B3%95\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">暴力搜索法</a>中的一种。</p>\\n<p>对于某些计算问题而言，回溯法是一种可以找出所有（或一部分）解的一般性算法，尤其适用于<a href=\\"https://zh.wikipedia.org/wiki/%E7%BA%A6%E6%9D%9F%E8%A1%A5%E5%81%BF%E9%97%AE%E9%A2%98\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">约束补偿问题</a>（在解决约束满足问题时，我们逐步构造更多的候选解，并且在确定某一部分候选解不可能补全成正确解之后放弃继续搜索这个部分候选解本身及其可以拓展出的子候选解，转而测试其他的部分候选解）。</p>\\n","autoDesc":true}');export{e as data};
