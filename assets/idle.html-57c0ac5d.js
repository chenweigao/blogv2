const e=JSON.parse('{"key":"v-73cae827","path":"/linux/kernel/idle.html","title":"Idle","lang":"zh-CN","frontmatter":{"title":"Idle","date":"2023-03-16T00:00:00.000Z","author":"weigao","category":["Kernel"],"description":"Abstract 本文主要研究 kernel 中的 idle 机制以及代码实现。 Function Flow 我们先对大体上的函数调用栈进行一个简单的示意图总结： cpuidle_enter_state() 之后的流程可以参考 tick_broadcast_oneshot_control() 的分析。 cpu_startup_entry 笔者在实际的业务场景中抓取过 idle 函数的调用栈，大概如下所示： [] [pid:0,cpu6,swapper/6,0] show_stack+0x14/0x1c [] [pid:0,cpu6,swapper/6,1] dump_stack_lvl+0xb8/0x108 [] [pid:0,cpu6,swapper/6,2] dump_stack+0x14/0x1c [] [pid:0,cpu6,swapper/6,3] cpuidle_select+0x20/0x54 [] [pid:0,cpu6,swapper/6,4] 0xffffffe55f4d072c [] [pid:0,cpu6,swapper/6,5] cpu_startup_entry+0x20/0x24 [] [pid:0,cpu6,swapper/6,6] secondary_start_kernel+0x1e8/0x208 [] [pid:0,cpu6,swapper/6,7]CPU: 6 PID: 0 Comm: swapper/6 VIP: 00 [] [pid:0,cpu6,swapper/6,8]TGID: 0 Comm: swapper/6 [] [pid:0,cpu6,swapper/6,9]Hardware name: xxx (DT) &nbsp;&nbsp;&nbsp;","head":[["meta",{"property":"og:url","content":"https://vueblog.weigao.cc/linux/kernel/idle.html"}],["meta",{"property":"og:site_name","content":"WW"}],["meta",{"property":"og:title","content":"Idle"}],["meta",{"property":"og:description","content":"Abstract 本文主要研究 kernel 中的 idle 机制以及代码实现。 Function Flow 我们先对大体上的函数调用栈进行一个简单的示意图总结： cpuidle_enter_state() 之后的流程可以参考 tick_broadcast_oneshot_control() 的分析。 cpu_startup_entry 笔者在实际的业务场景中抓取过 idle 函数的调用栈，大概如下所示： [] [pid:0,cpu6,swapper/6,0] show_stack+0x14/0x1c [] [pid:0,cpu6,swapper/6,1] dump_stack_lvl+0xb8/0x108 [] [pid:0,cpu6,swapper/6,2] dump_stack+0x14/0x1c [] [pid:0,cpu6,swapper/6,3] cpuidle_select+0x20/0x54 [] [pid:0,cpu6,swapper/6,4] 0xffffffe55f4d072c [] [pid:0,cpu6,swapper/6,5] cpu_startup_entry+0x20/0x24 [] [pid:0,cpu6,swapper/6,6] secondary_start_kernel+0x1e8/0x208 [] [pid:0,cpu6,swapper/6,7]CPU: 6 PID: 0 Comm: swapper/6 VIP: 00 [] [pid:0,cpu6,swapper/6,8]TGID: 0 Comm: swapper/6 [] [pid:0,cpu6,swapper/6,9]Hardware name: xxx (DT) &nbsp;&nbsp;&nbsp;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"weigao"}],["meta",{"property":"article:published_time","content":"2023-03-16T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Idle\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-16T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"weigao\\"}]}"]]},"headers":[{"level":2,"title":"Abstract","slug":"abstract","link":"#abstract","children":[]},{"level":2,"title":"Function Flow","slug":"function-flow","link":"#function-flow","children":[]},{"level":2,"title":"cpu_startup_entry","slug":"cpu-startup-entry","link":"#cpu-startup-entry","children":[]},{"level":2,"title":"do_idle","slug":"do-idle","link":"#do-idle","children":[]},{"level":2,"title":"local_irq_dis(en)able","slug":"local-irq-dis-en-able","link":"#local-irq-dis-en-able","children":[]},{"level":2,"title":"cpuidle_idle_call","slug":"cpuidle-idle-call","link":"#cpuidle-idle-call","children":[]},{"level":2,"title":"call_cpuidle","slug":"call-cpuidle","link":"#call-cpuidle","children":[]},{"level":2,"title":"cpuidle_enter_state()","slug":"cpuidle-enter-state","link":"#cpuidle-enter-state","children":[{"level":3,"title":"broadcast","slug":"broadcast","link":"#broadcast","children":[]},{"level":3,"title":"CPUIDLE_FLAG_TLB_FLUSHED","slug":"cpuidle-flag-tlb-flushed","link":"#cpuidle-flag-tlb-flushed","children":[]},{"level":3,"title":"sched_idle_set_state","slug":"sched-idle-set-state","link":"#sched-idle-set-state","children":[]},{"level":3,"title":"rcu_idle_enter","slug":"rcu-idle-enter","link":"#rcu-idle-enter","children":[]},{"level":3,"title":"enter","slug":"enter","link":"#enter","children":[]},{"level":3,"title":"rcu_idle_exit","slug":"rcu-idle-exit","link":"#rcu-idle-exit","children":[]},{"level":3,"title":"critical_timings","slug":"critical-timings","link":"#critical-timings","children":[]}]},{"level":2,"title":"idle polling","slug":"idle-polling","link":"#idle-polling","children":[]},{"level":2,"title":"DEFINE_PER_CPU","slug":"define-per-cpu","link":"#define-per-cpu","children":[]},{"level":2,"title":"Idle Data Struct","slug":"idle-data-struct","link":"#idle-data-struct","children":[{"level":3,"title":"Abstract","slug":"abstract-1","link":"#abstract-1","children":[]},{"level":3,"title":"cpuidle core","slug":"cpuidle-core","link":"#cpuidle-core","children":[]},{"level":3,"title":"cpuidle device","slug":"cpuidle-device","link":"#cpuidle-device","children":[]},{"level":3,"title":"cpuidle driver","slug":"cpuidle-driver","link":"#cpuidle-driver","children":[]}]},{"level":2,"title":"Something Else","slug":"something-else","link":"#something-else","children":[{"level":3,"title":"tickless","slug":"tickless","link":"#tickless","children":[]},{"level":3,"title":"WFI","slug":"wfi","link":"#wfi","children":[]}]}],"git":{},"readingTime":{"minutes":18.5,"words":5550},"filePathRelative":"linux/kernel/idle.md","localizedDate":"2023年3月16日","excerpt":"<h2> Abstract</h2>\\n<p>本文主要研究 kernel 中的 idle 机制以及代码实现。</p>\\n<h2> Function Flow</h2>\\n<p>我们先对大体上的函数调用栈进行一个简单的示意图总结：</p>\\n<p>cpuidle_enter_state() 之后的流程可以参考 tick_broadcast_oneshot_control() 的分析。</p>\\n<h2> cpu_startup_entry</h2>\\n<p>笔者在实际的业务场景中抓取过 idle 函数的调用栈，大概如下所示：</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>[] [pid:0,cpu6,swapper/6,0] show_stack+0x14/0x1c\\n[] [pid:0,cpu6,swapper/6,1] dump_stack_lvl+0xb8/0x108\\n[] [pid:0,cpu6,swapper/6,2] dump_stack+0x14/0x1c\\n[] [pid:0,cpu6,swapper/6,3] cpuidle_select+0x20/0x54\\n[] [pid:0,cpu6,swapper/6,4] 0xffffffe55f4d072c\\n[] [pid:0,cpu6,swapper/6,5] cpu_startup_entry+0x20/0x24\\n[] [pid:0,cpu6,swapper/6,6] secondary_start_kernel+0x1e8/0x208\\n[] [pid:0,cpu6,swapper/6,7]CPU: 6 PID: 0 Comm: swapper/6 VIP: 00\\n[] [pid:0,cpu6,swapper/6,8]TGID: 0 Comm: swapper/6\\n[] [pid:0,cpu6,swapper/6,9]Hardware name: xxx (DT)\\n</code></pre><div class=\\"highlight-lines\\"><br><br><br><div class=\\"highlight-line\\">&nbsp;</div><br><div class=\\"highlight-line\\">&nbsp;</div><div class=\\"highlight-line\\">&nbsp;</div><br><br><br></div><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
