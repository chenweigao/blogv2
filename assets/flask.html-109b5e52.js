import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as r,a as n,b as a,d as s,f as t}from"./app-22cda79c.js";const c={},l=t('<p><a href="#socketio">How to build socketio in Flask project : socketio</a></p><p>Flask <strong>variable, <a href="#blueprint">blueprint</a></strong> and install from <strong><a href="#requirement.txt">requirement.txt</a></strong>, some basic knowledge about <strong>WSGI, Nginx and Django</strong>.</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>',3),d=n("thead",null,[n("tr",null,[n("th",null,"NAME"),n("th",null,"URL"),n("th",null,"DESCRIPTION")])],-1),u=n("td",null,"flask_socketio",-1),h={href:"https://github.com/miguelgrinberg/flack",target:"_blank",rel:"noopener noreferrer"},k=n("td",null,[a("a project using "),n("code",null,"flask_socketio")],-1),g=n("td",null,null,-1),v={href:"https://flask-socketio.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},m=n("td",null,[n("code",null,"flask_socketio "),a(" official tutorial")],-1),b=n("td",null,"blueprint",-1),y={href:"http://flask.pocoo.org/docs/1.0/blueprints/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://flask.pocoo.org/docs/1.0/blueprints/",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="socketio" tabindex="-1"><a class="header-anchor" href="#socketio" aria-hidden="true">#</a> SocketIO</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> flask-socketio
</code></pre></div><h2 id="flask-structure" tabindex="-1"><a class="header-anchor" href="#flask-structure" aria-hidden="true">#</a> Flask Structure</h2><p><strong>application context and request context</strong>：</p><table><thead><tr><th>variable</th><th>context</th><th>description</th></tr></thead><tbody><tr><td><code>current_app</code></td><td>application context</td><td>The application instance for the active application.</td></tr><tr><td><code>g</code></td><td>ac</td><td></td></tr><tr><td><code>request</code></td><td>request context</td><td></td></tr><tr><td><code>session</code></td><td>rc</td><td></td></tr></tbody></table><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> current_app
</code></pre></div>`,6),x={href:"http://flask.pocoo.org/docs/1.0/api/#flask.g",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"g",-1),j=n("code",null,"get_db",-1),q=n("h2",{id:"blueprint",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#blueprint","aria-hidden":"true"},"#"),a(" Blueprint")],-1),I={href:"http://flask.pocoo.org/docs/1.0/blueprints/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>We use the <code>create_app()</code> so that the application is created at runtime.</p><p>A blueprint is similar to an application in that it can also define routes. The difference is that routes associated with a blueprint are in a dormant state until the blueprint is registered with an application, at which point the routes become part of it.</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># app/main/__init__.py</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprint
main <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span>
</code></pre></div><p>The constructor for this class takes two required arguments: <strong>the blueprint name</strong> and <strong>the model or package where the blueprint is located</strong>(always default <code>__name__</code>).</p><h2 id="virtual-environment" tabindex="-1"><a class="header-anchor" href="#virtual-environment" aria-hidden="true">#</a> Virtual environment</h2><h3 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> installation</h3><p>Take Linux system as example:</p><div class="language-python" data-ext="py"><pre class="language-python"><code>pip install virtualenv
</code></pre></div><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> usage</h3><div class="language-python" data-ext="py"><pre class="language-python"><code>cd <span class="token punctuation">[</span>project directory<span class="token punctuation">]</span>
virtualenv venv
</code></pre></div><p>该命令执行后，将在当前目录中建立一个venv目录，该目录复制了一份完整的当前系统的python环境。之后运行python时可以直接运行该项目的bin文件夹中的命令。</p><p>例：在当前虚环境下安装Tornado组件：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token punctuation">.</span><span class="token operator">/</span>venv<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>pip install tornado
</code></pre></div><p>或者在该虚环境中运行python程序：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token punctuation">.</span><span class="token operator">/</span>venv<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python xxxx<span class="token punctuation">.</span>py
</code></pre></div><p>也可以使用<code>activate</code>命令启动虚环境，之后不必再显示地调用虚环境bin文件夹中的命令：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>source <span class="token punctuation">.</span><span class="token operator">/</span>venv<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>activate
</code></pre></div><p>退出虚拟环境使用<code>deactive</code>：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> xxx<span class="token punctuation">:</span><span class="token operator">~</span><span class="token operator">/</span>xxx$ deactivate
</code></pre></div><h2 id="requirement-txt" tabindex="-1"><a class="header-anchor" href="#requirement-txt" aria-hidden="true">#</a> requirement.txt</h2><p>Install from <code>requirement.txt</code>:</p><div class="language-python" data-ext="py"><pre class="language-python"><code>pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt
</code></pre></div><p>generate a <code>requirement.txt</code> from current project:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;</span> requirement.txt
</code></pre></div><h2 id="pipenv" tabindex="-1"><a class="header-anchor" href="#pipenv" aria-hidden="true">#</a> pipenv</h2>`,25),N={href:"https://pipenv.readthedocs.io/en/latest/install/",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>Install pipenv:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pipenv

pipenv shell

pipenv <span class="token function">install</span> package-name

<span class="token comment"># if you want lock the environment</span>
pipenv lock
</code></pre></div><p>退出可以使用 <code>exit</code> 或者 <code>Ctrl+D</code>.</p><h2 id="video-streaming-with-flask" tabindex="-1"><a class="header-anchor" href="#video-streaming-with-flask" aria-hidden="true">#</a> Video Streaming with Flask</h2><h2 id="flask-script" tabindex="-1"><a class="header-anchor" href="#flask-script" aria-hidden="true">#</a> Flask Script</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># manage.py</span>
<span class="token keyword">import</span> os
<span class="token keyword">from</span> app <span class="token keyword">import</span> create_app<span class="token punctuation">,</span> db
<span class="token keyword">from</span> app<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token punctuation">,</span> Role
<span class="token keyword">from</span> flask<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span> Shell
<span class="token keyword">from</span> flask<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>migrate <span class="token keyword">import</span> Migrate<span class="token punctuation">,</span> MigrateCommand

app <span class="token operator">=</span> create_app<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&#39;FLASK_CONFIG&#39;</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span>
manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>
migrate <span class="token operator">=</span> Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span> db<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">make_shell_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>app<span class="token operator">=</span>app<span class="token punctuation">,</span> db<span class="token operator">=</span>db<span class="token punctuation">,</span> User<span class="token operator">=</span>User<span class="token punctuation">,</span> Role<span class="token operator">=</span>Role<span class="token punctuation">)</span>

manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">&quot;shell&quot;</span><span class="token punctuation">,</span> Shell<span class="token punctuation">(</span>make_context<span class="token operator">=</span>make_shell_context<span class="token punctuation">)</span><span class="token punctuation">)</span>
manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">&#39;db&#39;</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="web-server" tabindex="-1"><a class="header-anchor" href="#web-server" aria-hidden="true">#</a> Web Server</h2><p>目前主流的Web服务器包括<strong>Nginx, Apache, lighthttpd, IIS, etc..</strong>，Python服务端程序在Linux平台下使用最广泛的是Nginx。</p><h3 id="wsgi" tabindex="-1"><a class="header-anchor" href="#wsgi" aria-hidden="true">#</a> WSGI</h3><p>Web Server Gateway Interface<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>, 为Python语言定义Web服务器和服务端程序的通用接口规范。</p><h3 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx
<span class="token function">sudo</span> <span class="token function">service</span> nginx start/status/stop/restart
</code></pre></div><h2 id="django" tabindex="-1"><a class="header-anchor" href="#django" aria-hidden="true">#</a> Django</h2><h3 id="installation-1" tabindex="-1"><a class="header-anchor" href="#installation-1" aria-hidden="true">#</a> Installation</h3><div class="language-python" data-ext="py"><pre class="language-python"><code>pip3 install django
</code></pre></div><p>测试是否安装成功：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>python3
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> django
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>django<span class="token punctuation">.</span>VERSION<span class="token punctuation">)</span>
</code></pre></div><h3 id="establish-application" tabindex="-1"><a class="header-anchor" href="#establish-application" aria-hidden="true">#</a> Establish application</h3><p>建立项目：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>django<span class="token operator">-</span>admin startproject <span class="token punctuation">[</span>project<span class="token operator">-</span>name<span class="token punctuation">]</span>
</code></pre></div><p>建立应用：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>python manage<span class="token punctuation">.</span>py startapp <span class="token punctuation">[</span>app<span class="token operator">-</span>name<span class="token punctuation">]</span>
</code></pre></div><p>例如，在当前目录中创建一个项目<em>my_project</em>, 并且拥有特定的目录结构：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>djangp<span class="token operator">-</span>admin startproject my_project
cd my_project
python3 manage<span class="token punctuation">.</span>py startapp my_app
</code></pre></div><p>完成之后目录结构类似于：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>my_project/
	manage.py
	my_project/
		__init__.py
		settings.py
		urls.py
		wsgi.py
	my_app/
		__init__.py
		admin.py
		apps.py
		migrations/
			__init__.py
		models.py
		tests.py
		views.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内置web服务器运行：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>python manage<span class="token punctuation">.</span>py runserver <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">:</span><span class="token number">8001</span>
</code></pre></div><p>生成数据移植文件：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>python manage<span class="token punctuation">.</span>py makemigrations app
</code></pre></div><p>移植到数据库：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>python manage<span class="token punctuation">.</span>py migrate
</code></pre></div><h2 id="new-words" tabindex="-1"><a class="header-anchor" href="#new-words" aria-hidden="true">#</a> New Words</h2><table><thead><tr><th style="text-align:center;">words</th><th style="text-align:center;">means</th></tr></thead><tbody><tr><td style="text-align:center;">PK</td><td style="text-align:center;">primary key</td></tr><tr><td style="text-align:center;">FK</td><td style="text-align:center;">foregin key</td></tr><tr><td style="text-align:center;">CRUD</td><td style="text-align:center;">create, retrieve, update and delete</td></tr></tbody></table><hr class="footnotes-sep">`,35),T={class:"footnotes"},F={class:"footnotes-list"},M={id:"footnote1",class:"footnote-item"},R={href:"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface",target:"_blank",rel:"noopener noreferrer"},B=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function C(E,V){const e=p("ExternalLinkIcon");return i(),r("div",null,[l,n("table",null,[d,n("tbody",null,[n("tr",null,[u,n("td",null,[n("a",h,[a("https://github.com/miguelgrinberg/flack"),s(e)])]),k]),n("tr",null,[g,n("td",null,[n("a",v,[a("https://flask-socketio.readthedocs.io/en/latest/"),s(e)])]),m]),n("tr",null,[b,n("td",null,[n("a",y,[a("http://flask.pocoo.org/docs/1.0/blueprints/"),s(e)])]),n("td",null,[n("a",f,[a("official tutorial"),s(e)])])])])]),_,n("p",null,[n("a",x,[w,s(e)]),a(" is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if "),j,a(" is called a second time in the same request.")]),q,n("p",null,[n("a",I,[a("Tutorial : Modular Applications with Blueprints"),s(e)])]),S,n("p",null,[a("目前流行的取代 virtual envirment 的方式就是 "),n("a",N,[a("pipenv"),s(e)])]),W,n("section",T,[n("ol",F,[n("li",M,[n("p",null,[n("a",R,[a("WSGI, wiki"),s(e)]),a(),B])])])])])}const A=o(c,[["render",C],["__file","flask.html.vue"]]);export{A as default};
