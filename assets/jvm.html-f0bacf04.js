import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,e as d,d as s,a,b as n,f as e}from"./app-22cda79c.js";const r="/assets/image-20221019222303732-939bed54.png",u="/assets/image-20221019220125896-7b1212a3.png",m="/assets/jvm_mem-09311bb6.svg",k="/assets/jvm_mem2-886d376d.svg",h={},b=a("p",null,"本文主要结合软硬件去研究 JVM 中的 JIT 和 AOT 技术，主要针对 ART 虚拟机，提炼出 JAVA 虚拟机相关的基础知识和软硬件结合点。",-1),v=e('<h2 id="art-概述" tabindex="-1"><a class="header-anchor" href="#art-概述" aria-hidden="true">#</a> Art 概述</h2><p>常见的几个 JAVA 虚拟机：</p><ul><li>HotSpot: 比较流行、广泛</li><li>Dalvik VM: 运行在安卓上，没有完全遵守 JAVA 虚拟机规范</li><li>Art VM: 安卓 5.0 以后把 Dalvik 虚拟机替换成了 Art</li></ul><p>思考为什么 Dalvik VM 没有遵守 JAVA 虚拟机规范呢？这是因为 JAVA 程序有跨平台的需求，但是安卓的平台是较为固定的，设备目标明确。对比于 HotSpot, 主要是有两点区别：</p><ol><li>不直接运行 class 文件，执行的是编译后的 dex 字节码文件</li><li>结构基于寄存器指令结构，而不是 JVM 的栈指令集结构</li></ol><h2 id="aot-jit" tabindex="-1"><a class="header-anchor" href="#aot-jit" aria-hidden="true">#</a> AOT &amp; JIT</h2><p>AOT 是提前编译技术，JIT 是即时编译技术。</p><p>下图可以简单说明 AOT 和 JIT 的执行过程：</p>',8),g=e('<div class="hint-container warning"><p class="hint-container-title">❌❌❌</p><p>注意，这是一个很新手入门的图，不是完全准确，后续随着理解的深入，需要将这个图替换掉</p></div><p>从上面的图中，可以学到以下几点：</p><ol><li><p>AOT 预编译成 SO 以后还需要再经过以下编译器，最终生成机器码；这个过程确认一下是否这样的</p></li><li><p>JIT 从字节码中寻找热点代码编译为机器码，放入代码缓存，下次执行的时候直接跳过解释器，执行机器码</p><ol><li>这里面分为 C1 和 C2 编译器，注意 C1 和 C2 都是再后台运行的，只是运行的时间不同</li></ol></li><li><p>AOT 操作将部分字节码提前编译未机器代码库，然后启动程序，减少字节码解释</p></li></ol><h3 id="aot" tabindex="-1"><a class="header-anchor" href="#aot" aria-hidden="true">#</a> AOT</h3><p>AOT 存在着一些挑战：</p><ol><li>动态类加载；这是一个 AOT 面临的较为严重的问题，编译器无法预测程序执行的时候需要加载哪些类，如果预测错误的话，就产生了错误的编译；这些需要预知的信息包括静态字段的地址，对象实例字段的偏移量或者任何调用的实际目标</li><li>AOT 会牺牲平台无关性和代码质量</li></ol><h2 id="解释器与编译器" tabindex="-1"><a class="header-anchor" href="#解释器与编译器" aria-hidden="true">#</a> 解释器与编译器</h2><p>主流的商用 JAVA 虚拟机都采取了解释器与编译器并存的运行架构，但是要注意并不是所有的 JAVA 虚拟机都是这样的。<br> 对于解释器而言，其优势在于：当程序需要快速启动和执行的时候，解释器可以先发挥作用，此时解释器直接解释执行 JAVA 字节码；这种方法的好处是可以省去编译的时间，立即运行。<br> 对于编译器而言，在程序启动后，可以把越来越多的代码编译成本地代码，减少解释器的中间消耗，获得更高的执行效率。</p><p>如何判断 JVM 是用的解释器模式、编译器模式或者混合模式呢？我们可以求助于 <code>java -version</code> 来帮助解答这个问题。下面是运行该命令后的输出：</p><p><img src="'+r+'" alt="image-20221019222303732"></p><p>再提一下，sharing 表示 class data sharing. Server 编译器也叫 C2 编译器，与之对应的 Clinet 叫做 C1 编译器。</p><h2 id="aot-过程" tabindex="-1"><a class="header-anchor" href="#aot-过程" aria-hidden="true">#</a> AOT 过程</h2><h3 id="java-代码到-so" tabindex="-1"><a class="header-anchor" href="#java-代码到-so" aria-hidden="true">#</a> JAVA 代码到 so</h3><p>我们思考一个问题，给定一段 JAVA 代码，如何将 JAVA 代码转化为二进制呢？<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>（我们在分析 AOT 性能的时候会将二进制反汇编，分析这个反汇编文件中的指令）。</p><p>其路径如下：</p>',15),f=e(`<p>例如我们有一个 class 名为 <code>**JaotCompilation</code>, 其经过的转化过程如下：</p><p>首先使用 JAVA 编译器得到 <code>.class</code> 文件：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>javac JaotCompilation.java
</code></pre></div><p>然后 pass 生成的 <code>JaotCompilation.class</code> 文件到 AOT 编译器中，可以使用的命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>jaotc <span class="token parameter variable">--output</span> jaotCompilation.so JaotCompilation.class
</code></pre></div><p>然后就会在当下目录下生成 <code>jaotCompilation.so</code> 这个 .so 文件。</p><h3 id="使用-aot-产物" tabindex="-1"><a class="header-anchor" href="#使用-aot-产物" aria-hidden="true">#</a> 使用 AOT 产物</h3><p>我们在上一步将 JAVA 代码转化成了 .so 文件，那么在实际中，是如何使用的呢？</p><p>在 JVM 中有个选项，<code>-XX:AOTLibrary</code>, 传入 so 库的路径（绝对路径或者相对路径都可以）；如果要更省事的话，可以将 library 拷贝到 java home 的 lib 文件夹下面，此时只需要传递名字即可。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-XX:AOTLibrary</span><span class="token operator">=</span>./jaotCompilation.so JaotCompilation
</code></pre></div><p>执行这个命令之后，可以验证一下 so 是不是被正常加载了，可以增加 <code>-XX:+PrintAOT</code> 进行观察：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-XX:+PrintAOT</span> <span class="token parameter variable">-XX:AOTLibrary</span><span class="token operator">=</span>./jaotCompilation.so JaotCompilation
</code></pre></div><p>如果顺利的话，应该是可以看到已经加载的库；注意这是加载而不是被使用，可以指定 <code>-verbose</code> 选项看是否被实际调用了。</p><blockquote><p>The AOT compiled library contains a <strong>class fingerprint</strong>, which must match the fingerprint of the <strong>.class</strong> file.</p></blockquote><p>上述文字的意思是说如果我们修改了 <code>JaotCompilation.java</code> 的代码的时候，如果没有使用 AOT 编译被修改的 .class 文件，会发生错误；因此在每一次修改代码的时候，我们都要对 AOT 进行重新编译。</p><h2 id="aot-编译选项" tabindex="-1"><a class="header-anchor" href="#aot-编译选项" aria-hidden="true">#</a> AOT 编译选项</h2><p>我们可以给 AOT 的编译指定一些选项，将需要的选项写在文件中，然后使能。</p><p><code>complileCommands.txt</code>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>compileOnly java.lang.*
</code></pre></div><p>指定只需要编译的 scope, 然后把这个选项用进去：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>jaotc <span class="token parameter variable">--output</span> javaBaseLang.so <span class="token parameter variable">--module</span> java.base --compile-commands compileCommands.txt
</code></pre></div><h3 id="warm-up-which-class" tabindex="-1"><a class="header-anchor" href="#warm-up-which-class" aria-hidden="true">#</a> warm-up which class</h3><p>我们可以用看一下哪些类实际上在 JVM 预热期间被调用了，命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-XX:+UnlockDiagnosticVMOptions</span> <span class="token parameter variable">-XX:+LogTouchedMethods</span> <span class="token parameter variable">-XX:+PrintTouchedMethodsAtExit</span> JaotCompilation
</code></pre></div><h3 id="single-class" tabindex="-1"><a class="header-anchor" href="#single-class" aria-hidden="true">#</a> single class</h3><p>可以只编译一个类，指定类名即可：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>jaotc <span class="token parameter variable">--output</span> javaBaseString.so --class-name java.lang.String
</code></pre></div><h3 id="分层编译" tabindex="-1"><a class="header-anchor" href="#分层编译" aria-hidden="true">#</a> 分层编译</h3><p>默认情况下，始终使用 AOT 的代码，也就是说 so 库中包含的类不会进行 JIT 编译，如果我们想在库中包含 profiling 信息，则可以增加 <code>compile-for-tiered</code> 来实现我们的目的：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>jaotc <span class="token parameter variable">--output</span> jaotCompilation.so --compile-for-tiered JaotCompilation.class
</code></pre></div><p>上述预编译的代码会被一直使用，直到字节码变成符合 JIT 编译的时候。</p><h2 id="class-文件格式" tabindex="-1"><a class="header-anchor" href="#class-文件格式" aria-hidden="true">#</a> class 文件格式</h2><h3 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract" aria-hidden="true">#</a> Abstract</h3><p>本章主要是对 java 中的 class 文件进行研究，通过对书籍 《深入理解 Android: JAVA 虚拟机ART》的研究和简单的例子，研究 <code>.class</code> 文件中的奥秘。</p><p>在开始研究之前，我们使用一个简单的 JAVA 程序，如下所示：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如上文我们研究的，可以分别使用 <code>javac</code> 和 <code>jaotc</code> 生成 <code>.class</code> 和 <code>.so</code> 文件，此处不再赘述。</p><p>对于生成的 class 文件，可以使用 <code>javap</code> 命令来进行解析(注意传入的 Class 名称，提前生成好 Class 文件)，如下所示：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>javap <span class="token parameter variable">-verbose</span> Foo
</code></pre></div><p>上述命令可以对我们的 <code>Sample.class</code> 文件进行解析，解析的输出如下所示(基于 Java 19 分析出的结果，可能和其他版本略有不同)：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Classfile /mnt/c/Users/Administrator/Documents/_code/wsl2/jvm_demo/class/Foo.class
  Last modified Oct <span class="token number">19</span>, <span class="token number">2022</span><span class="token punctuation">;</span> size <span class="token number">303</span> bytes
  SHA-256 checksum 5a29b77322e4ee4fc0b22ee7030de4231135616732d86e3e7a8dfc3d8246b879
  Compiled from <span class="token string">&quot;Foo.java&quot;</span>
public class Foo implements java.io.Serializable
  minor version: <span class="token number">0</span>
  major version: <span class="token number">63</span>
  flags: <span class="token punctuation">(</span>0x0021<span class="token punctuation">)</span> ACC_PUBLIC, ACC_SUPER
  this_class: <span class="token comment">#7                          // Foo</span>
  super_class: <span class="token comment">#2                         // java/lang/Object</span>
  interfaces: <span class="token number">1</span>, fields: <span class="token number">0</span>, methods: <span class="token number">2</span>, attributes: <span class="token number">1</span>
Constant pool:
   <span class="token comment">#1 = Methodref          #2.#3          // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
   <span class="token comment">#2 = Class              #4             // java/lang/Object</span>
   <span class="token comment">#3 = NameAndType        #5:#6          // &quot;&lt;init&gt;&quot;:()V</span>
   <span class="token comment">#4 = Utf8               java/lang/Object</span>
   <span class="token comment">#5 = Utf8               &lt;init&gt;</span>
   <span class="token comment">#6 = Utf8               ()V</span>
   <span class="token comment">#7 = Class              #8             // Foo</span>
   <span class="token comment">#8 = Utf8               Foo</span>
   <span class="token comment">#9 = Class              #10            // java/io/Serializable</span>
  <span class="token comment">#10 = Utf8               java/io/Serializable</span>
  <span class="token comment">#11 = Utf8               Code</span>
  <span class="token comment">#12 = Utf8               LineNumberTable</span>
  <span class="token comment">#13 = Utf8               bar</span>
  <span class="token comment">#14 = Utf8               StackMapTable</span>
  <span class="token comment">#15 = Utf8               SourceFile</span>
  <span class="token comment">#16 = Utf8               Foo.java</span>
<span class="token punctuation">{</span>
  public Foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V
    flags: <span class="token punctuation">(</span>0x0001<span class="token punctuation">)</span> ACC_PUBLIC
    Code:
      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span>: aload_0
         <span class="token number">1</span>: invokespecial <span class="token comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
         <span class="token number">4</span>: <span class="token builtin class-name">return</span>
      LineNumberTable:
        line <span class="token number">2</span>: <span class="token number">0</span>

  public void bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor: <span class="token punctuation">(</span><span class="token punctuation">)</span>V
    flags: <span class="token punctuation">(</span>0x0001<span class="token punctuation">)</span> ACC_PUBLIC
    Code:
      <span class="token assign-left variable">stack</span><span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">locals</span><span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">args_size</span><span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span>: bipush        <span class="token number">31</span>
         <span class="token number">2</span>: istore_1
         <span class="token number">3</span>: iload_1
         <span class="token number">4</span>: ifle          <span class="token number">10</span>
         <span class="token number">7</span>: bipush        <span class="token number">42</span>
         <span class="token number">9</span>: istore_2
        <span class="token number">10</span>: <span class="token builtin class-name">return</span>
      LineNumberTable:
        line <span class="token number">4</span>: <span class="token number">0</span>
        line <span class="token number">5</span>: <span class="token number">3</span>
        line <span class="token number">6</span>: <span class="token number">7</span>
        line <span class="token number">8</span>: <span class="token number">10</span>
      StackMapTable: number_of_entries <span class="token operator">=</span> <span class="token number">1</span>
        frame_type <span class="token operator">=</span> <span class="token number">252</span> /* append */
          offset_delta <span class="token operator">=</span> <span class="token number">10</span>
          locals <span class="token operator">=</span> <span class="token punctuation">[</span> int <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
SourceFile: <span class="token string">&quot;Foo.java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的解析结果可以分为几个部分：</p><ol><li><p>类声明</p></li><li><p>源文件名</p></li><li><p>Class 文件结构信息</p></li><li><p>常量池</p></li><li><p>方法元数据（30行）</p><ol><li>注意到有些方法元数据中会出现 StackMapTable；分支控制流的方法会带有 StackMapTable，记录每个基本块开头处操作数栈的类型状态</li></ol></li><li><p>字节码（46行，Code 开始的部分 2 行严格来说属于方法元数据）</p></li></ol><p>上图中的结果需要注意的几点在于：</p><ol><li>Constant Pool: 常量池；</li><li>xx</li></ol><h4 id="class-文件就是字节码么" tabindex="-1"><a class="header-anchor" href="#class-文件就是字节码么" aria-hidden="true">#</a> class 文件就是字节码么？</h4><p>不是。除了字节码以外，class 文件还记录了很多信息（上文已经提及了 class 文件的具体构成）：</p><ul><li>结构信息 <ul><li>Class 文件格式版本号</li><li>各部分的数量与大小</li></ul></li><li>元数据 <ul><li>类、继承的超类、实现的接口声明信息</li><li>常量池</li><li>...</li></ul></li><li>方法信息 <ul><li>字节码</li><li>异常处理器表</li><li>...</li></ul></li></ul><p>字节码只代表程序逻辑，只是 class 文件众多组成部分其中之一。</p><h3 id="constant-pool" tabindex="-1"><a class="header-anchor" href="#constant-pool" aria-hidden="true">#</a> Constant Pool</h3><p>常量池对应的数据结构伪代码就是一个类型为 <code>cp_info</code> 的数组，如下所示：</p><div class="language-c" data-ext="c"><pre class="language-c"><code>cp_info <span class="token punctuation">{</span> <span class="token comment">// u1表示该域对应一个字节长度，u 表示 unsigned</span>
    u1 tag<span class="token punctuation">;</span> <span class="token comment">// 每一个 cp_info 的第一个字节表明该常量项的类型</span>
    u1 info<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 常量项的具体内容</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>tag</code> 字段用于表示该常量的类型，<code>info</code> 数组是常量的具体内容。</p><h3 id="jvm-基本结构" tabindex="-1"><a class="header-anchor" href="#jvm-基本结构" aria-hidden="true">#</a> JVM 基本结构</h3><p>了解 class 文件是怎么解析的，需要首先了解一下 JVM 的基本结构：</p><p><img src="`+u+'" alt="image-20221019220125896"></p><div class="hint-container tip"><p class="hint-container-title">JAVA 虚拟机</p><p>在这需要说明以下，什么才算做 java 虚拟机？通过 JCK 测试的，实现 JVM 规范的就可以。</p></div><p>我们说的一般的 JVM 都是基于栈结构的，所以自然会有一个方法调用栈，每个 Java 线程都拥有一个 Java 方法调用栈，该栈与其他线程不共享；每次方法被调用的时候都会在调用栈上面分配一个栈帧，方法的一次调用结束（包括抛出异常）后对应的栈帧都会被自动撤销。</p><p>每一个 Java 栈帧都包括：</p><ul><li>局部变量区</li><li>操作数栈</li><li>指向方法已解析的常量池的引用</li><li>其他一些 VM 内部实现需要的数据</li></ul><p>这个栈帧的设计比较巧妙，比如说前后两个栈帧之间可以共享一部分数据用来传递参数（局部变量区栈帧 slot 的复用，这又是一个很大的话题了）</p><h2 id="dex-文件格式" tabindex="-1"><a class="header-anchor" href="#dex-文件格式" aria-hidden="true">#</a> Dex 文件格式</h2><h3 id="abstract-1" tabindex="-1"><a class="header-anchor" href="#abstract-1" aria-hidden="true">#</a> Abstract</h3><p>DEX 文件格式一般是 Android 平台上和传统的 class 文件对应的 java 字节码文件，其针对移动设备做了一些定制化处理。</p><p>在我们开始之前，首先研究一下 Dex 文件是如何生成的，可以用下图来加以概述：</p>',65),j=e(`<p>在 Dalvik 或者 ART 中，class 文件是不能被直接解释执行的，需要经过 dx 将 class 文件进行翻译、重构、解释、压缩等处理，生成 .dex 文件。</p><h3 id="dex-vs-class" tabindex="-1"><a class="header-anchor" href="#dex-vs-class" aria-hidden="true">#</a> Dex vs class</h3><p>dex 文件和 class 文件存在很多区别，简单列举如下：</p><ol><li>一个 class 文件对应一个 Java 源码文件，而一个 Dex 文件可以对应多个 Java 源码文件；在 PC 平台上，每一个 Java 文件都对应生成一个同名的 class 文件，这些文件统一打包成 Jar 包；而在安卓平台上，这些 Java 源码会最终编译、合并到一个名为 classes.dex 的文件中去。</li><li>PC 平台上 class 文件的字节序是 Big Endian, 而安卓平台的 Dex 文件的字节序是 Little Endian, 其原因是 ARM CPU 可能也采用的是 Little Endian.</li><li>Dex 文件新定义了 <strong>LEB128</strong> 的数据类型，其全称为 Little Endian Based 128, 用于表示 32 比特位长度的数据。</li></ol><h3 id="dex-文件格式-1" tabindex="-1"><a class="header-anchor" href="#dex-文件格式-1" aria-hidden="true">#</a> Dex 文件格式</h3><p>我们想要得到 dex 文件的话，只需要把一个任意的 APK 文件解压缩，就可以得到若干个 dex 文件。</p><p>使用 010 editor 可以对这个 dex 文件进行解析，就可以观察文件的结构信息。</p><table><thead><tr><th>Name</th><th>Value</th><th>Start</th><th>Size</th><th>Comment</th></tr></thead><tbody><tr><td>struct header_item dex_header</td><td>0h</td><td>0h</td><td>70h</td><td>Dex file header</td></tr><tr><td>struct string_id_list dex_string_ids</td><td>66454 strings</td><td>70h</td><td>40E58h</td><td>String ID list</td></tr><tr><td>struct type_id_list dex_type_ids</td><td>9994 types</td><td>40EC8h</td><td>9C28h</td><td>Type ID list</td></tr><tr><td>struct proto_id_list dex_proto_ids</td><td>14661 prototypes</td><td>4AAF0h</td><td>2AF3Ch</td><td>Method prototype ID list</td></tr><tr><td>struct field_id_list dex_field_ids</td><td>50403 fields</td><td>75A2Ch</td><td>62718h</td><td>Field ID list</td></tr><tr><td>struct method_id_list dex_method_ids</td><td>65503 methods</td><td>D8144h</td><td>7FEF8h</td><td>Method ID list</td></tr><tr><td>struct class_def_item_list dex_class_defs</td><td>7957 classes</td><td>15803Ch</td><td>3E2A0h</td><td>Class definitions list</td></tr><tr><td>struct map_list_type dex_map_list</td><td>18 items</td><td>8ADDB0h</td><td>DCh</td><td>Map list</td></tr></tbody></table><h2 id="java-内存布局" tabindex="-1"><a class="header-anchor" href="#java-内存布局" aria-hidden="true">#</a> JAVA 内存布局</h2><p>我们需要研究一下 JAVA 的内存布局情况。主要带着问题：🟥🟧🟨 JAVA 数组中是如何存储到数组的长度属性的？压缩又是怎么使能的？</p><h3 id="length" tabindex="-1"><a class="header-anchor" href="#length" aria-hidden="true">#</a> length()</h3><p>对于压缩使能这个问题，在此需要解释一下，我们在看汇编的时候有一段这样的代码：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>// length() dex_method_idx=3308
0x001bad20: b9400820	ldr w0, [x1, #8]
0x001bad24: 53017c00	lsr w0, w0, #1
0x001bad28: d65f03c0	ret
</code></pre></div><p>对应的源代码如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token constant">STRING_COMPRESSION_ENABLED</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">STRING_COMPRESSION_ENABLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这是一段计算字符串 <code>length</code> 的函数，我们可以看到，如果是使能了 <code>STRING_COMPRESSION_ENABLED</code> 的话，其 length 需要 <code>count</code> 无符号右移一位才行；查阅资料后表明这是因为最后一位是压缩的标志位。但是具体为什么要这么做，这么做的好处在哪，需要更加深入的研究。</p><h3 id="java-对象内存构成" tabindex="-1"><a class="header-anchor" href="#java-对象内存构成" aria-hidden="true">#</a> JAVA 对象内存构成</h3><p>JAVA 中通过 <code>new()</code> 可以创建一个新的对象，对象分配后存在于堆中并给其分配一个内存地址，在堆中的 JAVA 对象主要包含三个部分<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>（以表格形式给出）</p><table><thead><tr><th>内存区域</th><th>英文名称</th><th>说明</th></tr></thead><tbody><tr><td>对象头</td><td>Object Header</td><td>包括堆对象的布局、类型、GC 状态、同步状态和标识 hash code</td></tr><tr><td>实例数据</td><td>Instance Data</td><td>存放类的数据信息，父类的信息，对象字段属性信息</td></tr><tr><td>对齐填充</td><td>Padding</td><td>为了字节对齐，不是必须的</td></tr></tbody></table><p>下面我们的研究将分别通过对象头、实例数据、对齐填充展开。</p><p>下图可以比较清晰的说明 Java 的内存构成：</p><p><img src="`+m+'" alt="jvm_mem"></p><p>JAVA 的内存对象布局分为两种：第一种是普通的 JAVA 对象实例，第二种是 JAVA 数组实例，数组实例中会存储 length 元素。</p><p>对于这几个内存区域具体的大小，我们以 32 HotSpot 中的 <code>java.lang.Integer</code> 存储为例，其在内存中的布局大小如下图所示：</p><p><img src="'+k+'" alt="jvm_mem2"></p><p>对象头固定大小为 8 个字节，接下来就会存储对象中的实际数据，后面的 padding 视情况而定。</p><h3 id="对象头-object-header" tabindex="-1"><a class="header-anchor" href="#对象头-object-header" aria-hidden="true">#</a> 对象头(Object Header)</h3><p>在 hotspot 术语表<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>中可以找到 object header 的相关定义：</p><blockquote><p>Common structure at the beginning of every GC-managed heap object. (Every oop points to an object header.) Includes fundamental information about the heap object&#39;s layout, type, GC state, synchronization state, and identity hash code. Consists of <strong>two words</strong>. In arrays it is immediately followed by a <strong>length field</strong>. Note that both Java objects and VM-internal objects have a common object header format.</p></blockquote><p>上述文字先是描述了对象头结构中都包含了哪些信息，而后描述了其中包含了两个字；除此之外，如果是个 array 类型，还会跟随一个 <code>length</code> 字段。（<em>此时我们的问题已经解决了：JAVA 数组在 object header 中存储数组的长度信息</em>）</p><p>对于对象头中包含的两个字：<strong>Mark word</strong> 和 <strong>Klass pointer</strong>, 我们将分别研究。</p>',31),A=e(`<h4 id="mark-word" tabindex="-1"><a class="header-anchor" href="#mark-word" aria-hidden="true">#</a> Mark Word</h4><blockquote><p>The first word of every object header. Usually a set of bitfields including synchronization state and identity hash code. May also be a pointer (with characteristic low bit encoding) to synchronization related information. During GC, may contain GC state bits.</p></blockquote><p>用于存储对象自身的运行时数据，在 32 位 JVM 中长度是 32bit, 64 位 JVM 中长度是 64bit, 对应路径 <code>/openjdk/hotspot/src/share/vm/oops</code>, 对应代码 <code>markOop.hpp</code>, 其构成可以从注释中获得（google 搜索文件名即可搜到）：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Bit-format of an object header (most significant first, big endian layout below):</span>
<span class="token comment">//</span>
<span class="token comment">//  32 bits:</span>
<span class="token comment">//  --------</span>
<span class="token comment">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span>
<span class="token comment">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span>
<span class="token comment">//             size:32 ------------------------------------------&gt;| (CMS free block)</span>
<span class="token comment">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span>
<span class="token comment">//</span>
<span class="token comment">//  64 bits:</span>
<span class="token comment">//  --------</span>
<span class="token comment">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span>
<span class="token comment">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span>
<span class="token comment">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span>
<span class="token comment">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span>
<span class="token comment">//</span>
<span class="token comment">//  unused:25 hash:31 --&gt;| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; normal object)</span>
<span class="token comment">//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; biased object)</span>
<span class="token comment">//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span>
<span class="token comment">//  unused:21 size:35 --&gt;| cms_free:1 unused:7 ------------------&gt;| (COOPs &amp;&amp; CMS free block)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述描述较为清晰，在此需要解释一下几个类型（为什么会有不同的状态，这是因为 Mark Word 在不同的锁状态下存储的内容不同）：</p><ol><li>biased object, 类比于 biased_lock 意思是偏向锁</li><li>CMS free object, 类比于轻量级锁</li><li>CMS promoted object, 类比于重量级锁</li></ol><p>@todo 表格 or 图片</p><ul><li><strong>lock</strong>: 表示锁标志位；11 的时候为 GC 状态，只有后 2 位的 lock 标志位有效</li><li><strong>age</strong>: 分代年龄：表示对象被 GC 的次数，到达阈值以后，对象被转移到老年代；最大值是 15, 因为该标志位最大位数是 4 位</li></ul><h4 id="klass-pointer" tabindex="-1"><a class="header-anchor" href="#klass-pointer" aria-hidden="true">#</a> Klass Pointer</h4><blockquote><p>The second word of every object header. Points to another object (a metaobject) which describes the layout and behavior of the original object. For Java objects, the &quot;klass&quot; contains a C++ style &quot;vtable&quot;.</p></blockquote><p>类型指针，对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p>也叫类元数据指针，</p><h3 id="实例数据-instance-data" tabindex="-1"><a class="header-anchor" href="#实例数据-instance-data" aria-hidden="true">#</a> 实例数据(Instance Data)</h3><p>如果对象中有属性字段，则这里会有数据信息。</p><h3 id="对齐填充-padding" tabindex="-1"><a class="header-anchor" href="#对齐填充-padding" aria-hidden="true">#</a> 对齐填充(Padding)</h3><p>对象可以有对齐数据也可以没有。</p><div class="hint-container tip"><p class="hint-container-title">😋😋😋 关于对齐填充与 cache line 的关系</p><p>对齐填充的目的是为了将对象的大小对齐到 8N 个字节，以此来补齐对象头和实例数据占用内存之后的剩余空间的大小；</p><p>这么做的好处在于，确保对象的字段可以出现在同一个 cache line 之中；如果不进行对齐的话，可能会出现跨 cache line 存储的情况出现；导致此对象读取的时候需要读两个 cache line, 或者更新的时候污染两个 cache line.</p></div><h3 id="实战-demo" tabindex="-1"><a class="header-anchor" href="#实战-demo" aria-hidden="true">#</a> 实战 demo</h3><h4 id="基本构成研究" tabindex="-1"><a class="header-anchor" href="#基本构成研究" aria-hidden="true">#</a> 基本构成研究</h4><p>本章节通过一个实战的 demo 来展示 JAVA 对象在内存中的布局情况。</p><p>首先增加 <code>openjdk.jol.core</code> 包到项目中；</p><p>我们编写一个简单的类 <code>A.class</code> 来观察一下这个类的内存分布：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后在 main 函数中如下写：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java_object<span class="token punctuation">.</span></span><span class="token class-name">A</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jol<span class="token punctuation">.</span>info<span class="token punctuation">.</span></span><span class="token class-name">ClassLayout</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>此时就可以在控制台看到 A class 内存布局的打印，如下所示：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>java_object.A object internals:
OFF  SZ   TYPE DESCRIPTION               VALUE
  0   8        (object header: mark)     0x0000000000000001 (non-biasable; age: 0)
  8   4        (object header: class)    0xf800c041
 12   4        (object alignment gap)    
Instance size: 16 bytes
Space losses: 0 bytes internal + 4 bytes external = 4 bytes total
</code></pre></div><ul><li>OFF: 偏移地址，单位字节</li><li>SZ: SIZE, 大小</li><li>TYPE DESCRIPTION: 类型描述；我们可以看到，这个类的内存布局只有一个 object header</li><li>VALUE: 内存中当前存储的值</li></ul><p>OK，了解了基本构成以后，我们现在可以做一些更加深入的研究。</p><h4 id="数组的内存布局" tabindex="-1"><a class="header-anchor" href="#数组的内存布局" aria-hidden="true">#</a> 数组的内存布局</h4><p>为了更加清晰直观的说明本章开头提出的那个问题，我们在类中构造一个数组，以此来观察有数组元素的类的内存布局是什么样子的。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// A.class</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后打印出来的内存布局如下所示(main 函数未做修改)：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>java_object.A object internals:
OFF  SZ     TYPE DESCRIPTION               VALUE
  0   8          (object header: mark)     0x0000000000000001 (non-biasable; age: 0)
  8   4          (object header: class)    0xf800c041
 12   4   char[] A.arrayA                  [a, c, e]
Instance size: 16 bytes
Space losses: 0 bytes internal + 0 bytes external = 0 bytes total
</code></pre></div><p>可以看到，数组 <code>arrayA</code> 被当做 class A 的内部元素保存起来了，并没有产生引用或者是 header, 我们直接使用一个对象数组，来看看有什么变化。修改 main 函数如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jol<span class="token punctuation">.</span>info<span class="token punctuation">.</span></span><span class="token class-name">ClassLayout</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//        A a = new A();</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayB <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;g&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>arrayB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>对应的输出如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[C object internals:
OFF  SZ   TYPE DESCRIPTION               VALUE
  0   8        (object header: mark)     0x0000000000000001 (non-biasable; age: 0)
  8   4        (object header: class)    0xf800003f
 12   4        (array length)            5
 12   4        (alignment/padding gap)   
 16  10  
 char [C.&lt;elements&gt;             N/A
 26   6        (object alignment gap)    
Instance size: 32 bytes
Space losses: 4 bytes internal + 6 bytes external = 10 bytes total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到，新增了 array length 的类型描述字段，这个描述字段中的值为 array 的长度 5.</li><li>array 的字段位于 Mark Word 和 Kclass Pointer 之后，占 4 位</li></ul><hr class="footnotes-sep">`,40),_={class:"footnotes"},x={class:"footnotes-list"},y={id:"footnote1",class:"footnote-item"},C={href:"https://www.baeldung.com/ahead-of-time-compilation",target:"_blank",rel:"noopener noreferrer"},J=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),w={id:"footnote2",class:"footnote-item"},T={href:"https://www.cnblogs.com/jajian/p/13681781.html",target:"_blank",rel:"noopener noreferrer"},V=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),O={id:"footnote3",class:"footnote-item"},S={href:"https://openjdk.org/groups/hotspot/docs/HotSpotGlossary.html",target:"_blank",rel:"noopener noreferrer"},M=a("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1);function F(E,I){const t=p("Mermaid"),o=p("ExternalLinkIcon");return l(),i("div",null,[b,d(" more "),v,s(t,{id:"mermaid-51",code:"eJxLL0osyFAIceFSAAJnDS/HMEdNXV27mqzEssTkGpdoDT1nH8fgYM1YBZCoo39IjSFQrDhfwS0zJ1UzFqzNECina6dgFO2cmJyRChEzgog5G0ZHOxsqOOfnFuRkphbFokoaASWN0CVdwJI1Xp4hNQqu0dGeeSWpRQVFqUAyFuwIBQOgC5wy8xKLKoFaU2COANoCkYTwQFaAeQBqGTot"}),g,s(t,{id:"mermaid-129",code:"eJxLL0osyFDwCeJSAALHaC/HMEcF5/yU1FgFXV27mqzEssTkGgUnDb3knMTiYk2wKieQlAJQLr8EKOeioVecr8kFAOn5FDk="}),f,s(t,{id:"mermaid-427",code:"eJxLL0osyFDwCeJSAAJnDa/EskQF5/yUVE1dXTuFmiwgN7lGwQUi7lRZkpoMklMAS6ZU1Ci4argk5pRlZmPIpVbkF5TUKLhp+BeUZOZmVqWmKKCrhFhpqKEHsgXVPqBgck5icTGyTUAxoKno5gNFgWZVaHIBAKjPPiE="}),j,s(t,{id:"mermaid-736",code:"eJxLL0osyFDwCeJSAAJnDQ3/pKzU5BIFj9TElNQiTU1dXTsFl2jfxKJshfD8opRYBV09XQXD6GgLhaTKktTYWIg2BZAy12jvnMTiYoWA/My8ktQiiFKj6GgTTKVu0TmpeeklGVb5BSWZ+XmJORDFxkiKAeV3K8U="}),A,a("section",_,[a("ol",x,[a("li",y,[a("p",null,[a("a",C,[n("https://www.baeldung.com/ahead-of-time-compilation"),s(o)]),n(),J])]),a("li",w,[a("p",null,[a("a",T,[n("java 内存对象布局"),s(o)]),n(),V])]),a("li",O,[a("p",null,[a("a",S,[n("HotSpot Glossary of Terms"),s(o)]),n(),M])])])])])}const P=c(h,[["render",F],["__file","jvm.html.vue"]]);export{P as default};
