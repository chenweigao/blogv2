import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,e as u,a as n,b as s,d as a,f as e}from"./app-22cda79c.js";const r="/assets/llvm_ir-f0c56b5f.svg",d={},k=n("p",null,"这篇文章是一个关于 JAVA Art/Davlik 虚拟机的一个杂谈，整理了一些问题和感悟。",-1),v=n("ul",null,[n("li",null,"栈式虚拟机 vs 寄存器虚拟机"),n("li",null,"IR")],-1),m=e('<h2 id="栈-vs-寄存器虚拟机" tabindex="-1"><a class="header-anchor" href="#栈-vs-寄存器虚拟机" aria-hidden="true">#</a> 栈 vs 寄存器虚拟机</h2><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p>常见的虚拟机可以分为两种，一种是基于堆栈（表达式栈）的虚拟机，一种是基于寄存器的虚拟机，Davlik 就是基于寄存器的虚拟机。关于这两个方面的优劣，在这进行一个简单的研究。</p><blockquote><p>所谓“表达式栈”就是用来存放表达式临时值的地方。“基于虚拟寄存器”的做法是给每个临时值都赋予一个“临时变量”的名字；而“基于表达式栈”则不赋予“临时变量”的名，总是通过栈来隐式操作临时值。</p></blockquote><blockquote><p>对于解释器来说，解释器开销主要来自解释器循环（fetch-decode/dispatch-execute 循环）中的 fetch 与 decode/dispatch，反而真正用于执行程序逻辑的 execute 部分并不是大头。每条指令都要经历一轮 FDX 循环。因而减少指令条数可以导致 F与 D 的开销减少，于是就提升了解释器速度<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。</p></blockquote><p>上述文字说了一个问题，就是解释器的开销的前端 bound 较大，所以说减少指令数量可以一定程度上提高性能。</p><p>有几个对比：</p><ol><li>源代码的生成难度：差别不大，栈更简单一些</li><li>同样逻辑的代码大小：基于栈 &lt; 基于寄存器</li><li>同样逻辑的指令条数：基于栈 &gt; 基于寄存器</li><li>简易实现中数据移动次数：基于栈 &gt; 基于寄存器；这里面说的就是堆栈的上下文切换之类的；栈顶缓存技术(top-of-stack caching) 可以大幅度降低基于栈的解释器的数据移动操作</li><li>同等优化下的解释器速度：基于栈 &lt; 基于寄存器</li><li>交由同等优化程度的 JIT 编译器编译后生成的代码速度：基于栈 == 基于寄存器；只要经过合理的编译，得到的结果是一模一样的</li></ol><p>基于以上的说明，我们如果要选择基于寄存器的虚拟机的时候，我们一般是对<strong>解释器的执行速度</strong>有所要求；如果要选择基于栈的虚拟机的时候，其优点是实现简单、传输代码的大小较小；</p><p>而对于带有 JIT 编译器的执行引擎的速度而言，如果 JIT 实现的较好的话，其经过 parse 之后速度是差不多的。</p><h3 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h3><p>早期 JVM 是基于栈的，但是实际上，基于栈的虚拟机并没有减少 Java 代码的传输大小，这是因为 JAVA 是使用 Class 文件为单位来进行传输与存储的，每一个 Class 文件都是独立存储，这是为了 Java 设计之初支持分离编译和按需动态类加载；独立存储的情况下，每一个 Class 文件都必须携带自己的常量池以及用于符号链接的符号引用信息。</p><p>分析 Java 字节码是可以看出来，其只占 Class 文件的小部分，大部分都被常量池占了 -- 这些常量池一般都是存在重叠的，这些都是冗余信息。所以说 Dex 文件的优势就在这显现出来了。</p><p>但是有一个问题是，Dex 文件较小，和虚拟机是基于寄存器的有关吗？其实没有特别大的关联，在字节码部分，Dalvik 的字节码其实比 JVM 的字节码更大。再多说一句，我个人的理解就是 Dex 文件较小是取决于其中的共享常量池等技术，pack200.</p><p>不管如何，基于寄存器的设计还是一个较为新的潮流。</p><p>在这关于 Class 文件的一些槽点，引用<sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup>作者的一些描述，看能否再后续的工作上对这些提出优化的思路：</p><blockquote><p>Class文件方面：</p><ul><li>各种人为的大小限制都跟不上时代了，例如每个方法的字节码最多65535字节；</li><li>要生成StackMapTable太闹心；</li><li>常量池的组织方式不便于直接从文件映射到内存然后高效执行；可以有更高效的组织方式。</li></ul><p>JAR文件方面：</p><ul><li>如前文提的，多个Class文件之间的常量池冗余；</li><li>缺少带有强语义的描述模块的信息；</li><li>等等…</li></ul></blockquote><h3 id="栈顶缓存" tabindex="-1"><a class="header-anchor" href="#栈顶缓存" aria-hidden="true">#</a> 栈顶缓存</h3><p>在最原始的 “基于表达式栈” 的基础上有两个变种，都是利用 “栈顶缓存” 的思路：</p><ol><li>单状态栈顶缓存，1-TOSCA</li><li>多状态栈顶缓存，2-TOSCA</li></ol><p>单状态栈顶缓存：总是把表达式栈的栈顶值放在一个实际寄存器（这个缓存寄存器也叫累加器）里；如果表达式栈有多于一个值，则其余部分分配在栈帧上。</p><p>关于 HotSpot VM 和 Dalvik VM 的解释器，前者是使用 1-TOSCA，后者是用全部映射到栈帧上的方式实现基于虚拟寄存器的指令集（Dalvik 字节码）。</p><p>多状态栈顶缓存有几种不同的做法；本质上其就是一种非常简单使用的、适用于后序遍历表达树的寄存器分配思路<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>。</p><div class="hint-container tip"><p class="hint-container-title">stack slot</p><p>暂时可以理解为栈的一部分。Second chance binpacking 算法（全局寄存器分配的算法之一，一种或线性扫描的算法）中会使用到这个概念。</p></div><h2 id="ir" tabindex="-1"><a class="header-anchor" href="#ir" aria-hidden="true">#</a> IR</h2>',25),b=n("p",null,"如果有个项目急需为某个语言实现一个优化的 JIT 编译器，怎样能在有限的时间内快速做出优化程度足够好的实现呢？",-1),g={href:"https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Intermediate_language%23Intermediate_representation",target:"_blank",rel:"noopener noreferrer"},h={href:"https://link.zhihu.com/?target=http%3A//llvm.org/",target:"_blank",rel:"noopener noreferrer"},f=e('<p>这个是引用知乎上的一个回答中的问题，从中我们可以管中窥豹，看一下 IR 在整个编译器中所处的位置。目前的理解是：IR 是后端的输入，前端的输出。</p><p>LLVM IR 语言目标是成为一种通用中间语言，全称是 Intermediate Representation, 连接着编译器前端和后端；LLVM IR 的存在使得设计一门新的编程语言只需要完成能够生成 LLVM IR 的编译器前端即可，然后就可以轻松使用 LLVM 的各种编译优化、JIT 支持、目标代码生成等功能。</p><p>IR 有三种形式：</p><ol><li>内存中的表示形式，如 BasicBlock, Instruction 这种 cpp 类</li><li>bitcode 表示形式，这是一种序列化二进制的表示形式</li><li>LLVM 汇编文件形式，这也是一种序列化的表示形式，与 bitcode 的区别是汇编文件是可读的、字符串的形式。</li></ol><h3 id="ir-内存模型" tabindex="-1"><a class="header-anchor" href="#ir-内存模型" aria-hidden="true">#</a> IR 内存模型</h3><p>内存中的 IR 模型其实就是对应 LLVM 实现中的 OO 模型，更直白的讲就是一些 cpp 的 class 的定义。</p><p>如下图所示：</p><p><img src="'+r+`" alt="llvm_ir"></p><p>这是一个简单的示意图，从上图中我们可以知道，存在着以下的模块：</p><ul><li>Module 类：这个可以理解为一个完整的编译单元，一般来说，这个编译单元就是一个源码文件，如一个后缀为 cpp 的源文件；一般而言，一个程序会被编译成为一个 Module，多个 Module 之间是相互隔离的，无法获取对方的内容；可以使用 <code>M.dump()</code> 在屏幕上打印出所有的信息。</li><li>Function 类：这个类顾名思义就是对应一个函数单元，可以分为函数定义和函数声明；如图所示，在一个 Module 中，是由多个 func 组成的，Module 的主要组成部分是一个 function 的 list; Function 类有两个很实用的函数：<code>F.dump()</code> 可以打印出全部信息，<code>F.viewCfg()</code> 可以将ControlFlowGraph 按照dot 的方式存到文件里，使用第三方工具可以很舒服地观察它。</li><li>BasicBlock 类：这个类表示一个基本代码块，基本代码块的含义是一段没有控制流逻辑的基本流程，相当于程序流程图中的基本过程（矩形）；其中有多条指令，指令是串行执行的，一个 BasicBlock 会以跳转语句或者 ret 语句结束；每个 BasicBlock 中都有一个唯一的 label, 可以用来跳转目的地址等。</li><li>Instruction 类：指令类是 LLVM 中定义的基本操作，如加减乘除这种算数指令、函数调用指令、跳转指令、返回指令等；</li></ul><p>除此之外，还有基本类型 Value 和 User.</p><ul><li>Value 类：是一个非常基础的基类。一个继承于 Value 的子类表示它的结果可以被其他地方使用；</li><li>User 类：一个继承于 User 的类表示它会使用一个或者多个 Value 对象；</li></ul><p>这两个基本类型会产生 use-def 和 def-use 两个链，前者表示某个 User 使用的 Value 列表，后者表示某个 Value 的 User 列表。</p><ul><li><p>use-def</p><p>由于同一个函数实例可以在多个地方被调用，所以在 LLVM 中就可以查看一个函数被调用的指令列表：</p><div class="language-c" data-ext="c"><pre class="language-c"><code>Function <span class="token operator">*</span>F <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>User <span class="token operator">*</span>U <span class="token operator">:</span> F<span class="token operator">-&gt;</span><span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>Instruction <span class="token operator">*</span>Inst <span class="token operator">=</span> dyn_cast<span class="token operator">&lt;</span>Instruction<span class="token operator">&gt;</span><span class="token punctuation">(</span>U<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;F is used in instruction:\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>Inst <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们不难看出，遍历的函数的 <code>users()</code>.</p></li><li><p>def-user</p><p>对于指令和操作数而言，一个指令可以有一个或者多个操作数；可以对指令的操作数进行遍历：</p><div class="language-c" data-ext="c"><pre class="language-c"><code>Instruction <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>Use <span class="token operator">&amp;</span>U <span class="token operator">:</span> pi<span class="token operator">-&gt;</span><span class="token function">operands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Value <span class="token operator">*</span>v <span class="token operator">=</span> U<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们不难看出，遍历的是指令的 <code>operands()</code>.</p></li></ul><h3 id="汇编形式的-ir" tabindex="-1"><a class="header-anchor" href="#汇编形式的-ir" aria-hidden="true">#</a> 汇编形式的 IR</h3><p>前面第三点所提到的，是一个序列化的表示形式，不同于 bitcode, 其是可读的；如下例子：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token comment">// add.cpp</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>产生汇编形式的 IR:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>clang add.cpp -emit-llvm <span class="token parameter variable">-S</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> add.ll
</code></pre></div><p>注意到如果要产生二进制码形式的 IR 的话，可以如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code> clang add.cpp -emit-llvm <span class="token parameter variable">-c</span> <span class="token parameter variable">-o</span> add.bc
</code></pre></div><p>当然这个二进制的产物是没有可读性的。</p><div class="hint-container tip"><p class="hint-container-title">clang 安装</p><p>使用命令安装 clang:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python-clang
</code></pre></div><p>安装 clang 的时候，由于是依赖库的关系，llvm 也被安装了。</p></div><p>部分的 IR 如下表示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>; ModuleID = &#39;add.cpp&#39;
source_filename = &quot;add.cpp&quot;
target datalayout = &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;
target triple = &quot;x86_64-pc-linux-gnu&quot;

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_Z3addii(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

attributes #0 = { noinline nounwind optnone uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;frame-pointer&quot;=&quot;all&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;min-legal-vector-width&quot;=&quot;0&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;x86-64&quot; &quot;target-features&quot;=&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !&quot;wchar_size&quot;, i32 4}
!1 = !{!&quot;clang version 10.0.0-4ubuntu1 &quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从第 7 行开始就是 add 函数的汇编 IR. 我们简单观察就可以发现，其与源代码的一些对应关系。</p><ul><li>ModuleID：用于编译器区分不用 module 的 ID</li><li>source_filename: 源文件名</li><li>target datalayout: 目标机器架构数据布局 <ul><li><code>e</code>: 内存存储模式为小端模式</li><li>其他更多的信心可以参考手册<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></li></ul></li><li>target triple: 用于描述目标机器信息的一个元组</li></ul><p>我们看 IR 中存在两种符号：<code>@</code> 和 <code>%</code>, 分别表示全局标识符和局部标识符（局部变量）。</p><p>其中局部标识符存在两种分配方式：</p><ol><li>寄存器分配的局部变量：此类局部变量多采用 <code>%1 = some value</code> 的方式进行分配，一般是接受指令返回结果的局部变量</li><li>栈分配的局部变量：使用 <code>alloca</code> 指令在栈帧上分配的局部变量。如 <code>%2 = alloca i32</code>, <code>%2</code> 也是一个指针，访问或存储时必须使用 <code>load</code> or <code>store</code> 指令</li></ol><p>并且需要注意，局部标识符还存在两种命名方式：</p><ol><li>未命名的局部标识符：多采用带前缀的无符号数字表示</li><li>命名的局部标识符：就是有名称，如 <code>%result</code> 这样的形式</li></ol><h3 id="ir-字节码解析" tabindex="-1"><a class="header-anchor" href="#ir-字节码解析" aria-hidden="true">#</a> IR 字节码解析</h3><p>还记得上一步中我们获得的 <code>add.bc</code> 文件吗？由于其时二进制的形式（也可以称之为字节码），所以我们没办法将其直接阅读，但是我们可以自己编写代码，使用 llvm 自带的一些解析函数，来打印出我们想要的信息。本程序参考知乎的文章《LLVM 概述——第一个 LLVM 项目》<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>。</p><p>首先看需要解析字节码的 <code>main.cpp</code> 文件：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 引入相关LLVM头文件</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm/IR/LLVMContext.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm/IR/Function.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm/IR/Module.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm/IRReader/IRReader.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm/Support/SourceMgr.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm/Support/CommandLine.h&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> llvm<span class="token punctuation">;</span>

<span class="token comment">// LLVM上下文全局变量</span>
<span class="token keyword">static</span> ManagedStatic<span class="token operator">&lt;</span>LLVMContext<span class="token operator">&gt;</span> GlobalContext<span class="token punctuation">;</span>

<span class="token comment">// 命令行位置参数全局变量, 这个参数的含义是需要处理的LLVM IR字节码的文件名</span>
<span class="token keyword">static</span> cl<span class="token double-colon punctuation">::</span>opt<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> <span class="token function">InputFilename</span><span class="token punctuation">(</span>cl<span class="token double-colon punctuation">::</span>Positional<span class="token punctuation">,</span> cl<span class="token double-colon punctuation">::</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;filename&gt;.bc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cl<span class="token double-colon punctuation">::</span>Required<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 诊断实例</span>
    SMDiagnostic Err<span class="token punctuation">;</span>
    <span class="token comment">// 格式化命令行参数,</span>
    cl<span class="token double-colon punctuation">::</span><span class="token function">ParseCommandLineOptions</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取并格式化LLVM IR字节码文件, 返回LLVM Module(Module是LLVM IR的顶级容器)</span>
    std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token operator">&lt;</span>Module<span class="token operator">&gt;</span> M <span class="token operator">=</span> <span class="token function">parseIRFile</span><span class="token punctuation">(</span>InputFilename<span class="token punctuation">,</span> Err<span class="token punctuation">,</span> <span class="token operator">*</span>GlobalContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 错误处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>M<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Err<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">errs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历Module中的每一个Function</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Function <span class="token operator">&amp;</span>F<span class="token operator">:</span><span class="token operator">*</span>M<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 过滤掉那些以llvm.开头的无关函数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>F<span class="token punctuation">.</span><span class="token function">isIntrinsic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 打印函数返回类型</span>
            <span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>F<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 打印函数名</span>
            <span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&lt;&lt;</span> F<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">;</span>
            <span class="token comment">// 遍历函数的每一个参数</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Function<span class="token double-colon punctuation">::</span>arg_iterator it <span class="token operator">=</span> F<span class="token punctuation">.</span><span class="token function">arg_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ie <span class="token operator">=</span> F<span class="token punctuation">.</span><span class="token function">arg_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> ie<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 打印参数类型</span>
                <span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> ie <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;)\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个解析用的程序中有以下的细节需要注意：</p><ol><li><code>parseIRFile</code> 加载 Module，然后遍历 Module 中的每一个 Function,</li><li>然后可以打印出 Function 相关的一些信息。</li></ol><p>编译 <code>main.cpp</code> 和执行字节码的命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>clang++ <span class="token variable"><span class="token variable">$(</span>llvm-config <span class="token parameter variable">--cxxflags</span> <span class="token parameter variable">--ldflags</span> <span class="token parameter variable">--libs</span><span class="token variable">)</span></span> main.cpp <span class="token parameter variable">-o</span> main
./main add.bc
</code></pre></div><h2 id="jni" tabindex="-1"><a class="header-anchor" href="#jni" aria-hidden="true">#</a> JNI</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>JNI 的全称是 Java Native Interface, 通过 JNI 技术，可以做到以下几点：</p><ol><li>Java 程序中可以调用 Native 语言写的函数；一般是 C/C++ 编写的函数；</li><li>Native 程序中的函数可以调用 JAVA 层的函数；也就是说 在 C/C++ 中可以调用 JAVA 层的函数；</li></ol><p>仔细思考一下，如果引用了 JNI, 是不是就破坏了 JAVA 的平台无关性呢？其实不尽然，引入 JNI 有以下的好处：</p><ol><li>JAVA 虚拟机是由 Native 语言写的，并不是平台无关的，而 JNI 层可以对 JAVA 层屏蔽平台之间的差异，有助于实现 JAVA 本身平台无关的特性；</li><li>很多程序都用 Native 语言写的，用 JNI 就可以直接使用了，避免了重复造轮子。</li></ol><h3 id="java-调用-native-的函数" tabindex="-1"><a class="header-anchor" href="#java-调用-native-的函数" aria-hidden="true">#</a> JAVA 调用 Native 的函数</h3><p>这个问题是萦绕在初学 JNI 的时候一个很大的问题，到底 Java 是如何调用 Native 的函数的呢？首先先看 Java 世界、JNI 世界和 Native 世界之间的关系：</p>`,48),y=e(`<p>除此之外，为了方便理解，再图上增加了一个 <code>MediaScanner</code> 实例进行说明。</p><ul><li><code>MediaScanner</code> 类中的一些功能需要由 Native 层来实现</li><li>JNI 层对应 <code>media_jni</code> 库，库的名字是 <code>media</code>, <code>jni</code> 表示的是这个一个 JNI 库</li><li>Native 的 <code>libmedia.so</code> 完成了实际的功能</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// media / java / android / media / MediaScanner.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediaScanner</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加载对应的 JNI 库</span>
        <span class="token comment">// 在实际加载动态库的时候会将其拓展称为 libmedia_jni.so</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;media_jni&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用 native_init() 函数</span>
        <span class="token function">native_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ..</span>
    
    <span class="token comment">// native 函数的声明；被 native 标识的函数表示它将由 JNI 层完成</span>
    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">processDirectory</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">MediaScannerClient</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在调用 native 函数之前，需要进行 JNI 库的加载；关于加载 JNI 库的时机，通用的做法是在类的 <code>static</code> 语句中加载，加载的方法是调用 <code>System.loadLibrary</code> 方法，需要注意 JNI 库的加载必须是在 native 函数调用之前；</li><li>JAVA 程序员调用 JNI 中的函数还需要使用 native 关键字声明函数。</li></ol><p>从上我们可以看出，JNI 的使用对于 JAVA 程序员是非常友好的。</p><h3 id="jni-调用过程" tabindex="-1"><a class="header-anchor" href="#jni-调用过程" aria-hidden="true">#</a> JNI 调用过程</h3><p>本小节用实际的代码走读来理解 Java native 函数是怎么被注册、调用的。</p><h3 id="jni-层分析" tabindex="-1"><a class="header-anchor" href="#jni-层分析" aria-hidden="true">#</a> JNI 层分析</h3><p>@todo</p><h3 id="静态注册-vs-动态注册" tabindex="-1"><a class="header-anchor" href="#静态注册-vs-动态注册" aria-hidden="true">#</a> 静态注册 vs 动态注册</h3><h2 id="art-启动过程" tabindex="-1"><a class="header-anchor" href="#art-启动过程" aria-hidden="true">#</a> Art 启动过程</h2><h3 id="art-启动过程-1" tabindex="-1"><a class="header-anchor" href="#art-启动过程-1" aria-hidden="true">#</a> Art 启动过程</h3><ol><li>APK 以进程的形式运行，进程的创建是由 zygote</li><li>进程运行起来以后，初始化 Java VM（每一个进程都有一个 JVM）</li><li>JVM 创建后，就有了 JNINativeInterface，其中包含所有的 JAVA 接口</li><li>Java 运行时的功能简单来说分为：类的加载和函数 Method 的执行</li></ol><p>具体来简单讲述一下其中的细节：</p><p>安卓进程启动调起 apk 在 mainfest 中申明的组件，如 Activity, 调起后的过程如下分析。</p><h3 id="zygote-创建-client" tabindex="-1"><a class="header-anchor" href="#zygote-创建-client" aria-hidden="true">#</a> Zygote 创建 client</h3><p>Zygote 创建进程：其原理是通过 socket 跨进程的调用，<code>Process.start</code> 充当一个 Client 端。</p>`,17),_=e(`<p>我们现在来逐一分析这些代码：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</span>
<span class="token comment">// todo</span>
</code></pre></div><p>@todo 代码有重构，需要弄清楚 S 上面新的逻辑。</p><p>ActivityManagerService 调用 <code>Process.start()</code> 方法，start 实现如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ProcessStartResult</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token comment">/* (省略)args */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">ZYGOTE_PROCESS</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>processClass<span class="token punctuation">,</span> niceName<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span>
                    runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> targetSdkVersion<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span>
                    abi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> appDataDir<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span>
                    zygotePolicyFlags<span class="token punctuation">,</span> isTopApp<span class="token punctuation">,</span> disabledCompatChanges<span class="token punctuation">,</span>
                    pkgDataInfoMap<span class="token punctuation">,</span> whitelistedDataInfoMap<span class="token punctuation">,</span> bindMountAppsData<span class="token punctuation">,</span>
                    bindMountAppStorageDirs<span class="token punctuation">,</span> zygoteArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>start 的时候调用了 ZYGOTE_PROCESS：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * State associated with the zygote process.
     * <span class="token keyword">@hide</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ZygoteProcess</span> <span class="token constant">ZYGOTE_PROCESS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这个方法定义在 <code>ZygoteProcess.java</code> 中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// frameworks/base/core/java/android/os/ZygoteProcess.java</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Process<span class="token punctuation">.</span>ProcessStartResult</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token comment">/* args... */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TODO (chriswailes): Is there a better place to check this value?</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fetchUsapPoolEnabledPropWithMinInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">informZygotesOfUsapPoolStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">startViaZygote</span><span class="token punctuation">(</span>processClass<span class="token punctuation">,</span> niceName<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span>
                    runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> targetSdkVersion<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span>
                    abi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> appDataDir<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> <span class="token comment">/*startChildZygote=*/</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    packageName<span class="token punctuation">,</span> zygotePolicyFlags<span class="token punctuation">,</span> isTopApp<span class="token punctuation">,</span> disabledCompatChanges<span class="token punctuation">,</span>
                    pkgDataInfoMap<span class="token punctuation">,</span> allowlistedDataInfoList<span class="token punctuation">,</span> bindMountAppsData<span class="token punctuation">,</span>
                    bindMountAppStorageDirs<span class="token punctuation">,</span> zygoteArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ZygoteStartFailedEx</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;Starting VM process through Zygote failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;Starting VM process through Zygote failed&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="server-处理" tabindex="-1"><a class="header-anchor" href="#server-处理" aria-hidden="true">#</a> Server 处理</h3><p>Server 端是 app_process 这个进程（该进程以 zygote 作为进程名）中，是一个常驻的系统服务。</p><p>主要是调用 <code>startViaZygote()</code> 方法，由于代码太长，在此只列举部分关键代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// frameworks/base/core/java/android/os/ZygoteProcess.java</span>
<span class="token keyword">private</span> <span class="token class-name">Process<span class="token punctuation">.</span>ProcessStartResult</span> <span class="token function">startViaZygote</span><span class="token punctuation">(</span><span class="token comment">/* args */</span><span class="token punctuation">)</span>
                                                      <span class="token keyword">throws</span> <span class="token class-name">ZygoteStartFailedEx</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> argsForZygote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// --runtime-args, --setuid=, --setgid=,</span>
        <span class="token comment">// and --setgroups= must go first</span>
        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--runtime-args&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--setuid=&quot;</span> <span class="token operator">+</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--setgid=&quot;</span> <span class="token operator">+</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--runtime-flags=&quot;</span> <span class="token operator">+</span> runtimeFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> <span class="token class-name">Zygote</span><span class="token punctuation">.</span><span class="token constant">MOUNT_EXTERNAL_DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--mount-external-default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> <span class="token class-name">Zygote</span><span class="token punctuation">.</span><span class="token constant">MOUNT_EXTERNAL_INSTALLER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--mount-external-installer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> <span class="token class-name">Zygote</span><span class="token punctuation">.</span><span class="token constant">MOUNT_EXTERNAL_PASS_THROUGH</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--mount-external-pass-through&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> <span class="token class-name">Zygote</span><span class="token punctuation">.</span><span class="token constant">MOUNT_EXTERNAL_ANDROID_WRITABLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--mount-external-android-writable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;--target-sdk-version=&quot;</span> <span class="token operator">+</span> targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>

    	<span class="token comment">// 处理一些 args    </span>
    
        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>processClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>extraArgs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>argsForZygote<span class="token punctuation">,</span> extraArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		
    	<span class="token comment">// 定义在：private final Object mLock = new Object();</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The USAP pool can not be used if the application will not use </span>
            <span class="token comment">// the systems graphics driver.  </span>
            <span class="token comment">// If that driver is requested use the Zygote application start path.</span>
            <span class="token comment">// 核心</span>
            <span class="token keyword">return</span> <span class="token function">zygoteSendArgsAndGetResult</span><span class="token punctuation">(</span><span class="token function">openZygoteSocketIfNeeded</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                              zygotePolicyFlags<span class="token punctuation">,</span>
                                              argsForZygote<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>openZygoteSocketIfNeeded()</code> 的实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">&quot;mLock&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">ZygoteState</span> <span class="token function">openZygoteSocketIfNeeded</span><span class="token punctuation">(</span><span class="token class-name">String</span> abi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ZygoteStartFailedEx</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">attemptConnectionToPrimaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> primaryZygoteState<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>mZygoteSecondarySocketAddress <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// The primary zygote didn&#39;t match. Try the secondary.</span>
                <span class="token function">attemptConnectionToSecondaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> secondaryZygoteState<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">&quot;Error connecting to zygote&quot;</span><span class="token punctuation">,</span> ioe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported zygote ABI: &quot;</span> <span class="token operator">+</span> abi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是 socket 跨进程的调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">&quot;mLock&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptConnectionToSecondaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>secondaryZygoteState <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> secondaryZygoteState<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            secondaryZygoteState <span class="token operator">=</span>
                    <span class="token class-name">ZygoteState</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mZygoteSecondarySocketAddress<span class="token punctuation">,</span>
                            mUsapPoolSecondarySocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">maybeSetApiDenylistExemptions</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">maybeSetHiddenApiAccessLogSampleRate</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的 connect 过程如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">ZygoteState</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">LocalSocketAddress</span> zygoteSocketAddress<span class="token punctuation">,</span>
                <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">LocalSocketAddress</span> usapSocketAddress<span class="token punctuation">)</span>
                <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

            <span class="token class-name">DataInputStream</span> zygoteInputStream<span class="token punctuation">;</span>
            <span class="token class-name">BufferedWriter</span> zygoteOutputWriter<span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">LocalSocket</span> zygoteSessionSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>zygoteSocketAddress <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;zygoteSocketAddress can&#39;t be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>zygoteSocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
                zygoteInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                zygoteOutputWriter <span class="token operator">=</span>
                        <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>
                                <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token class-name">Zygote</span><span class="token punctuation">.</span><span class="token constant">SOCKET_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteState</span><span class="token punctuation">(</span>zygoteSocketAddress<span class="token punctuation">,</span> usapSocketAddress<span class="token punctuation">,</span>
                                   zygoteSessionSocket<span class="token punctuation">,</span> zygoteInputStream<span class="token punctuation">,</span> zygoteOutputWriter<span class="token punctuation">,</span>
                                   <span class="token function">getAbiList</span><span class="token punctuation">(</span>zygoteOutputWriter<span class="token punctuation">,</span> zygoteInputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到创建了一个 <code>LocalSocket</code>, 通过 <code>LocalSocket</code> 的通信，来完成进程的创建。</p><h2 id="jni-实例" tabindex="-1"><a class="header-anchor" href="#jni-实例" aria-hidden="true">#</a> JNI 实例</h2><p>这篇博客<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>有一个给 libcore 增加日志的例子，全流程的走了一遍 native 方法创建、注册的过程，而我们选择的例子为 <code>libcore</code> 中 JDK 的实现。</p><h3 id="native-java-analysis" tabindex="-1"><a class="header-anchor" href="#native-java-analysis" aria-hidden="true">#</a> Native java analysis</h3><p>Native Java 的代码如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// libcore/ojluni/src/main/java/java/lang/String.java</span>
<span class="token annotation punctuation">@FastNative</span>
<span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">getCharsNoCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>上述函数使用 <code>@FastNative</code> 注解修饰，函数声明前的 <code>native</code> 表示这是一个 native 方法。</p><p>在 <code>libcore/openjdk_java_files.bp</code> 中可以看到 <code>String.java</code> 文件，表示其在<strong>编译链</strong>中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>filegroup {
    name: &quot;openjdk_javadoc_files&quot;,
    srcs: [
        &quot;ojluni/src/main/java/java/awt/font/NumericShaper.java&quot;,
        // more code ...
        &quot;ojluni/src/main/java/java/lang/String.java&quot;,
        // ...
    ],
    path: &quot;ojluni/src/main/java&quot;,
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jni-实现" tabindex="-1"><a class="header-anchor" href="#jni-实现" aria-hidden="true">#</a> JNI 实现</h3><p>JNI 层负责实现 <code>getCharsNoCheck</code>, 实现过后会被注册，此时就与 Java 层的 native 方法对应起来了，对于 <code>getCharsNoCheck</code> 的注册过程如下：</p><p>在 <code>.hh</code> 中：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// art/runtime/native/java_lang_String.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span>

<span class="token keyword">namespace</span> art <span class="token punctuation">{</span>

<span class="token keyword">void</span> <span class="token function">register_java_lang_String</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace art</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>.cc</code> 中进行注册：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">String_getCharsNoCheck</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject java_this<span class="token punctuation">,</span> jint start<span class="token punctuation">,</span> jint end<span class="token punctuation">,</span>
                                   jcharArray buffer<span class="token punctuation">,</span> jint index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ScopedFastNativeObjectAccess 中保存了 env 对象以及其所在的 Thread 对象</span>
  ScopedFastNativeObjectAccess <span class="token function">soa</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 从 soa.Self 中获取 JNIEnv 所在的线程对象</span>
  StackHandleScope<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token function">hs</span><span class="token punctuation">(</span>soa<span class="token punctuation">.</span><span class="token function">Self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取 buffer 的指针</span>
  Handle<span class="token operator">&lt;</span>mirror<span class="token double-colon punctuation">::</span>CharArray<span class="token operator">&gt;</span> <span class="token function">char_array</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">NewHandle</span><span class="token punctuation">(</span>soa<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">Decode</span><span class="token generic class-name"><span class="token operator">&lt;</span>mirror<span class="token double-colon punctuation">::</span>CharArray<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取 jobject 指针后调用 GetChars</span>
  soa<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">Decode</span><span class="token generic class-name"><span class="token operator">&lt;</span>mirror<span class="token double-colon punctuation">::</span>String<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>java_this<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetChars</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> char_array<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> JNINativeMethod gMethods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> charAt<span class="token punctuation">,</span> <span class="token string">&quot;(I)C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> compareTo<span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;)I&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> concat<span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> doReplace<span class="token punctuation">,</span> <span class="token string">&quot;(CC)Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> fastSubstring<span class="token punctuation">,</span> <span class="token string">&quot;(II)Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> getCharsNoCheck<span class="token punctuation">,</span> <span class="token string">&quot;(II[CI)V&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> intern<span class="token punctuation">,</span> <span class="token string">&quot;()Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> toCharArray<span class="token punctuation">,</span> <span class="token string">&quot;()[C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">register_java_lang_String</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">REGISTER_NATIVE_METHODS</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，我们对 <code>register_java_lang_String</code> 进行了定义，调用这个函数就可以进行 native 函数的注册。</p><p>对于宏 <code>REGISTER_NATIVE_METHODS</code>，其定义如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// art/runtime/native/native_util.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REGISTER_NATIVE_METHODS</span><span class="token expression"><span class="token punctuation">(</span>jni_class_name<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">RegisterNativeMethodsInternal</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token punctuation">(</span>jni_class_name<span class="token punctuation">)</span><span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> <span class="token function">arraysize</span><span class="token punctuation">(</span>gMethods<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace art</span>

ALWAYS_INLINE <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">RegisterNativeMethodsInternal</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span>
                                                        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> jni_class_name<span class="token punctuation">,</span>
                                                        <span class="token keyword">const</span> JNINativeMethod<span class="token operator">*</span> methods<span class="token punctuation">,</span>
                                                        jint method_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ScopedLocalRef<span class="token operator">&lt;</span>jclass<span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> env<span class="token operator">-&gt;</span><span class="token function">FindClass</span><span class="token punctuation">(</span>jni_class_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Couldn&#39;t find class: &quot;</span> <span class="token operator">&lt;&lt;</span> jni_class_name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  jint jni_result <span class="token operator">=</span> env<span class="token operator">-&gt;</span><span class="token function">RegisterNatives</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methods<span class="token punctuation">,</span> method_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">CHECK_EQ</span><span class="token punctuation">(</span>JNI_OK<span class="token punctuation">,</span> jni_result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说 <code>register_java_lang_String()</code> 最终是调用了 <code>RegisterNativeMethodsInternal()</code>, 传入了 class name, 全局的 gMethods, 以及计算出来的 count.</p><p>@todo log 后增加分析结果</p><p>对于宏 <code>FAST_NATIVE_METHOD</code> 我在源码中未找到其定义，但是根据其用法，不难发现，三个参数应该分别是：类名（函数指针）、函数名、函数参数和返回值（signature）。</p><p>那么接下来的问题就只剩下：是谁调用了 <code>register_java_lang_String()</code> 进行了 native 函数的注册呢？我们进行下一章节的旅程。</p><h3 id="initnativemethods" tabindex="-1"><a class="header-anchor" href="#initnativemethods" aria-hidden="true">#</a> InitNativeMethods</h3><p>除此之外，我们搜索全局的<code>register_java_lang_String</code> 发现，还在一处出现：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// art/runtime/runtime.cc</span>
<span class="token keyword">void</span> <span class="token class-name">Runtime</span><span class="token double-colon punctuation">::</span><span class="token function">RegisterRuntimeNativeMethods</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">register_dalvik_system_DexFile</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
  <span class="token function">register_java_lang_String</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">register_java_lang_StringFactory</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个函数的调用也是在这个文件中的 <code>InitNativeMethods</code> 函数（这个文件比较重要，所以全部列举出来了）：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">Runtime</span><span class="token double-colon punctuation">::</span><span class="token function">InitNativeMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">VLOG</span><span class="token punctuation">(</span>startup<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Runtime::InitNativeMethods entering&quot;</span><span class="token punctuation">;</span>
  Thread<span class="token operator">*</span> self <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  JNIEnv<span class="token operator">*</span> env <span class="token operator">=</span> self<span class="token operator">-&gt;</span><span class="token function">GetJniEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Must be in the kNative state for calling native methods (JNI_OnLoad code).</span>
  <span class="token function">CHECK_EQ</span><span class="token punctuation">(</span>self<span class="token operator">-&gt;</span><span class="token function">GetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kNative<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Set up the native methods provided by the runtime itself.</span>
  <span class="token function">RegisterRuntimeNativeMethods</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialize classes used in JNI. The initialization requires runtime native</span>
  <span class="token comment">// methods to be loaded first.</span>
  <span class="token class-name">WellKnownClasses</span><span class="token double-colon punctuation">::</span><span class="token function">Init</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Then set up libjavacore / libopenjdk / libicu_jni ,which are just</span>
  <span class="token comment">// a regular JNI libraries with a regular JNI_OnLoad. Most JNI libraries can</span>
  <span class="token comment">// just use System.loadLibrary, but libcore can&#39;t because it&#39;s the library</span>
  <span class="token comment">// that implements System.loadLibrary!</span>
  <span class="token comment">//</span>
  <span class="token comment">// By setting calling class to java.lang.Object, the caller location for these</span>
  <span class="token comment">// JNI libs is core-oj.jar in the ART APEX, and hence they are loaded from the</span>
  <span class="token comment">// com_android_art linker namespace.</span>

  <span class="token comment">// libicu_jni has to be initialized before libopenjdk{d} due to runtime dependency from</span>
  <span class="token comment">// libopenjdk{d} to Icu4cMetadata native methods in libicu_jni. See http://b/143888405</span>
  <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string error_msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>java_vm_<span class="token operator">-&gt;</span><span class="token function">LoadNativeLibrary</span><span class="token punctuation">(</span>
          env<span class="token punctuation">,</span> <span class="token string">&quot;libicu_jni.so&quot;</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> WellKnownClasses<span class="token double-colon punctuation">::</span>java_lang_Object<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LoadNativeLibrary failed for \\&quot;libicu_jni.so\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> error_msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string error_msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>java_vm_<span class="token operator">-&gt;</span><span class="token function">LoadNativeLibrary</span><span class="token punctuation">(</span>
          env<span class="token punctuation">,</span> <span class="token string">&quot;libjavacore.so&quot;</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> WellKnownClasses<span class="token double-colon punctuation">::</span>java_lang_Object<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LoadNativeLibrary failed for \\&quot;libjavacore.so\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> error_msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> kOpenJdkLibrary <span class="token operator">=</span> kIsDebugBuild
                                                <span class="token operator">?</span> <span class="token string">&quot;libopenjdkd.so&quot;</span>
                                                <span class="token operator">:</span> <span class="token string">&quot;libopenjdk.so&quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string error_msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>java_vm_<span class="token operator">-&gt;</span><span class="token function">LoadNativeLibrary</span><span class="token punctuation">(</span>
          env<span class="token punctuation">,</span> kOpenJdkLibrary<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> WellKnownClasses<span class="token double-colon punctuation">::</span>java_lang_Object<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LoadNativeLibrary failed for \\&quot;&quot;</span> <span class="token operator">&lt;&lt;</span> kOpenJdkLibrary <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> error_msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Initialize well known classes that may invoke runtime native methods.</span>
  <span class="token class-name">WellKnownClasses</span><span class="token double-colon punctuation">::</span><span class="token function">LateInit</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// check startup module ready 后再打印日志</span>
  <span class="token function">VLOG</span><span class="token punctuation">(</span>startup<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Runtime::InitNativeMethods exiting&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第 10 行调用了 <code>RegisterRuntimeNativeMethods</code>, 后面的很多过程也很重要，我们后续再进行研究。</p><p>注意到有一行日志 <code>VLOG(startup) &lt;&lt; &quot;Runtime::InitNativeMethods entering&quot;;</code>, 我们可以通过在日志中查找是否有这个对应的打印来确定启动的时候是否调用到了这个流程（因为调用链还涉及到很多非常复杂的过程，所以我们可以通过这个方式来进行验证）</p><p>@todo 验证后填写结论</p><p>而<code>InitNativeMethods</code> 函数在 <code>Runtime::Start()</code> 中被调用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">Runtime</span><span class="token double-colon punctuation">::</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...code </span>

  <span class="token comment">// InitNativeMethods needs to be after started_ so that the classes</span>
  <span class="token comment">// it touches will have methods linked to the oat file if necessary.</span>
  <span class="token punctuation">{</span>
    ScopedTrace <span class="token function">trace2</span><span class="token punctuation">(</span><span class="token string">&quot;InitNativeMethods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">InitNativeMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// .. code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的过程就是涉及到 JVM 进程的启动等知识了。</p><h2 id="jninativeinterface" tabindex="-1"><a class="header-anchor" href="#jninativeinterface" aria-hidden="true">#</a> JNINativeInterface</h2><p>Art 的 JNINativeInterface 的定义如下(<code>art/runtime/jni/jni_internal.cc</code>):</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">bool</span> kEnableIndexIds<span class="token operator">&gt;</span>
<span class="token keyword">struct</span> <span class="token class-name">JniNativeInterfaceFunctions</span> <span class="token punctuation">{</span>
  <span class="token keyword">using</span> JNIImpl <span class="token operator">=</span> JNI<span class="token operator">&lt;</span>kEnableIndexIds<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> JNINativeInterface gJniNativeInterface <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>  <span class="token comment">// reserved0.</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>  <span class="token comment">// reserved1.</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>  <span class="token comment">// reserved2.</span>
    <span class="token keyword">nullptr</span><span class="token punctuation">,</span>  <span class="token comment">// reserved3.</span>
    JNIImpl<span class="token double-colon punctuation">::</span>GetVersion<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>DefineClass<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>FindClass<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>FromReflectedMethod<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>FromReflectedField<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>ToReflectedMethod<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>GetSuperclass<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>IsAssignableFrom<span class="token punctuation">,</span>
    JNIImpl<span class="token double-colon punctuation">::</span>ToReflectedField<span class="token punctuation">,</span>
    <span class="token comment">// more code</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">`,56),I={class:"footnotes"},w={class:"footnotes-list"},q={id:"footnote1",class:"footnote-item"},S={href:"https://www.zhihu.com/question/35777031/answer/64575683",target:"_blank",rel:"noopener noreferrer"},N=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),j=n("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"↩︎",-1),A={id:"footnote2",class:"footnote-item"},x={href:"https://www.zhihu.com/question/29355187/answer/51935409",target:"_blank",rel:"noopener noreferrer"},L=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),M={id:"footnote3",class:"footnote-item"},J={href:"https://llvm.org/docs/LangRef.html#data-layout",target:"_blank",rel:"noopener noreferrer"},T=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1),E={id:"footnote4",class:"footnote-item"},R={href:"https://zhuanlan.zhihu.com/p/102270840",target:"_blank",rel:"noopener noreferrer"},V=n("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎",-1),F={id:"footnote5",class:"footnote-item"},C={href:"https://blog.csdn.net/u011426115/article/details/113032671",target:"_blank",rel:"noopener noreferrer"},O=n("a",{href:"#footnote-ref5",class:"footnote-backref"},"↩︎",-1);function Z(D,z){const t=o("ExternalLinkIcon"),p=o("Mermaid");return i(),l("div",null,[k,v,u(" more "),m,n("blockquote",null,[b,n("p",null,[s("一个思路：如果有现成的静态编译器后端的话，针对输入的语言写个编译器前端，让它生成现成的后端能接受的"),n("a",g,[s("IR"),a(t)]),s("，直接插到现成的后端上。")]),n("p",null,[s("“有现成的静态编译器后端”门槛挺高，直到"),n("a",h,[s("LLVM"),a(t)]),s("普及之前；不过土豪大厂们早已跨过这门槛，自然会想走这条路。")])]),f,a(p,{id:"mermaid-464",code:"eJxLL0osyFAIceHidNbwcgxzVHiyY9rzqT2aurp2Ci4aXn6eCk83NmkqgLiuGn6JJZllqTAlQC2GGr6pKZmJwcmJeXmpRRBlLoYaOZlJuSDx+Ky8TL3ifKh2hDhIjAsA9w4oeg=="}),y,a(p,{id:"mermaid-556",code:"eJxLL0osyFAIceFSAAJHDcfkksyyzJJKTQVdXbua4pLEohKYUI2CE1zaNzEvMT21KDi1qCwzOVUTrNkJpEUBoiegKD85tbjYJz85OzWlxlkDytcDS0KUO4OVu2hERbr7h7jGBwT5O7sGByOrcIEaCDKkpEbBVSO/IDUvqjI9vyQ1GCzmmeaXmpqSmqLJBQAI2UAj"}),_,n("section",I,[n("ol",w,[n("li",q,[n("p",null,[n("a",S,[s("栈式虚拟机和寄存器式虚拟机？"),a(t)]),s(),N,s(),j])]),n("li",A,[n("p",null,[n("a",x,[s("寄存器分配问题？ - RednaxelaFX的回答 - 知乎 "),a(t)]),s(),L])]),n("li",M,[n("p",null,[n("a",J,[s("llvm data-layout"),a(t)]),s(),T])]),n("li",E,[n("p",null,[n("a",R,[s("LLVM 概述——第一个 LLVM 项目"),a(t)]),s(),V])]),n("li",F,[n("p",null,[n("a",C,[s("Java核心库libcore中添加Log接口任意调用（Android10）"),a(t)]),s(),O])])])])])}const P=c(d,[["render",Z],["__file","jvm_art.html.vue"]]);export{P as default};
