import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,e as i,a as n,b as s,d as t,f as e}from"./app-22cda79c.js";const u={},r=n("p",null,"本文主要是总结 Python 中字典和 hash map 的用法。",-1),d=n("h2",{id:"hash-map",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hash-map","aria-hidden":"true"},"#"),s(" Hash Map")],-1),k=n("p",null,"背景：以前很擅长写这个，现在记性不太好了，今天练习了一下，写在这里备忘一下。",-1),m=n("h3",{id:"implement",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implement","aria-hidden":"true"},"#"),s(" Implement")],-1),h=n("p",null,"Python 中的 Hash Map 使用方法很多，以后会慢慢复习到，现在先写上基本的实现。",-1),v={href:"https://leetcode.com/problems/number-of-good-pairs/",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>对于这个题目的实现如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">numIdenticalPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> <span class="token string">&#39;List[int]&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># 先构建 hash map</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        hash_map <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            res <span class="token operator">+=</span> hash_map<span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> hash_map<span class="token punctuation">.</span>get<span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token comment"># hash_map = {1: 3, 2: 1, 3: 2}</span>
        <span class="token comment"># 这是构造了一个hash_map</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_={href:"https://github.com/chenweigao/_code/blob/master/LeetCode/LC1512_Number_of_good_pairs.py",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="cache-result-pickle" tabindex="-1"><a class="header-anchor" href="#cache-result-pickle" aria-hidden="true">#</a> Cache result: pickle</h2><p>pickle 模块可以把我们只需要一次生成的中间结果缓存起来，比如说 dict, list 都可以进行缓存，下一次直接从这个文件中假造，避免了进一步的分析工作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pickle

file_name <span class="token operator">=</span> <span class="token string">&#39;./output/xxx.pkl&#39;</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>all_data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
        <span class="token keyword">for</span> trace_file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>traces_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;start to parse file &#39;</span><span class="token punctuation">,</span> trace_file<span class="token punctuation">)</span>
            file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>traces_dir<span class="token punctuation">,</span> trace_file<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>parse_trace_file<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>all_data<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="collections-counter" tabindex="-1"><a class="header-anchor" href="#collections-counter" aria-hidden="true">#</a> collections.Counter()</h2><p>这是 python 官方库的实现方式，使用前需要先导入 <code>collections</code> 依赖。</p>`,5),y={href:"https://leetcode-cn.com/problems/unique-number-of-occurrences/",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># LC 1207</span>
<span class="token comment"># algorithm/hash_map_2.py</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
   <span class="token keyword">def</span> <span class="token function">uniqueOccurrences</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> <span class="token string">&#39;List[int]&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
       arr_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
       <span class="token keyword">for</span> n <span class="token keyword">in</span> arr<span class="token punctuation">:</span>
           arr_dict<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> arr_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
       values <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>arr_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> collections
<span class="token keyword">class</span> <span class="token class-name">Solution2</span><span class="token punctuation">:</span>
   <span class="token keyword">def</span> <span class="token function">uniqueOccurrences</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> <span class="token string">&#39;List[int]&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
       arr_dict <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span>arr_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># dict_values([3, 2, 1])</span>
       <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>arr_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr_dict<span class="token punctuation">)</span>

arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uniqueOccurrences<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Solution2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uniqueOccurrences<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该题目中使用了 <code>collections.Counter()</code> 获得字典，而后通过 <code>.values()</code> 拿到字典中的 value 集合，最后通过将其转化为 set 来判断是否与原有字典长度相等达到解决问题的目的。</p><h2 id="ordereddict" tabindex="-1"><a class="header-anchor" href="#ordereddict" aria-hidden="true">#</a> OrderedDict</h2><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><p><code>OrderedDict</code> 是 python3 内置的数据结构，其主要存在两个函数可以供我们使用：</p><ol><li><code>move_to_end</code></li><li><code>popitem</code></li></ol><p>初始化 <code>OrderedDict</code>:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> collections

d <span class="token operator">=</span> collections<span class="token punctuation">.</span>OrderedDict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token string">&#39;abcde&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># &#39;abcde&#39;</span>
d_str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="move-to-end" tabindex="-1"><a class="header-anchor" href="#move-to-end" aria-hidden="true">#</a> move_to_end()</h3><p>使用 <code>move_to_end</code>, 参数 <code>last</code> 指定为 True（默认值），则将特定的元素移动到 dict 的最后面，指定为 False 移动到 dict 的最前面。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将 b 移动到最前面</span>
d<span class="token punctuation">.</span>move_to_end<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token comment"># 将 b 移动到最后面, 默认是 true</span>
d<span class="token punctuation">.</span>move_to_end<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="popitem" tabindex="-1"><a class="header-anchor" href="#popitem" aria-hidden="true">#</a> popitem()</h3><p>使用 <code>popitem</code>，参数 <code>last</code> 指定为 True（默认值），则移除 dict 中最后的元素，指定为 False 则移除 dict 中最左的元素。</p><ol><li><p><code>popitem()</code> 默认参数。删除最后的元素！<code>(&#39;b&#39;, None)</code> 没有了~</p><p>之前的 dict 为：<code>OrderedDict([(&#39;a&#39;, None), (&#39;c&#39;, None), (&#39;d&#39;, None), (&#39;e&#39;, None), (&#39;b&#39;, None)])</code></p><p>使用 <code>popitem()</code>：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>item_of_b <span class="token operator">=</span> d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>将 dict 中的最后一个元素 <strong>b</strong> 进行了删除，成了 <code>OrderedDict([(&#39;a&#39;, None), (&#39;c&#39;, None), (&#39;d&#39;, None), (&#39;e&#39;, None)])</code></p></li><li><p><code>popitem(last=False)</code> 。删除最左边的元素！</p><div class="language-python" data-ext="py"><pre class="language-python"><code>item_of_a <span class="token operator">=</span> d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span>last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre></div><p><code>OrderedDict([(&#39;a&#39;, None), (&#39;c&#39;, None), (&#39;d&#39;, None), (&#39;e&#39;, None), (&#39;b&#39;, None)])</code> --&gt; <code>OrderedDict([(&#39;c&#39;, None), (&#39;d&#39;, None), (&#39;e&#39;, None), (&#39;b&#39;, None)])</code></p></li></ol><h3 id="sort-by-dict-value" tabindex="-1"><a class="header-anchor" href="#sort-by-dict-value" aria-hidden="true">#</a> Sort by dict value</h3><p>使用如下的方式按照 value 排序：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>res_sorted <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> collections<span class="token punctuation">.</span>OrderedDict<span class="token punctuation">(</span>res_sorted<span class="token punctuation">)</span>
</code></pre></div><p>其中 <code>res</code> 是未排序的字典，使用 sorted 以后再将其转化为 <code>OrderedDict</code> 就可以实现按照字典的顺序排序了。</p>`,18);function w(x,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,i("more"),d,k,m,h,n("p",null,[s("LeetCode 的一个题目涉及到了这个问题："),n("a",v,[s("1512. Number of Good Pairs"),t(a)])]),b,n("p",null,[s("具体的"),n("a",_,[s("完整示例"),t(a)]),s("可以参考 GitHub。")]),g,n("p",null,[s("以 leetcode 的 "),n("a",y,[s("1207"),t(a)]),s(" 题目举例来说明用法：")]),f])}const D=p(u,[["render",w],["__file","hash.html.vue"]]);export{D as default};
