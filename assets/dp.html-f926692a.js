import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as i,a as s,b as n,d as e,f as a}from"./app-22cda79c.js";const u={},r=a(`<h1 id="dp" tabindex="-1"><a class="header-anchor" href="#dp" aria-hidden="true">#</a> DP</h1><h2 id="_1-1-fibonacci" tabindex="-1"><a class="header-anchor" href="#_1-1-fibonacci" aria-hidden="true">#</a> 1.1. Fibonacci</h2><blockquote><p>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...<br> 如果设F(n）为该数列的第n项（n∈N*），那么这句话可以写成如下形式：F(n)=F(n-1)+F(n-2)</p></blockquote><h3 id="_1-1-1-递归法" tabindex="-1"><a class="header-anchor" href="#_1-1-1-递归法" aria-hidden="true">#</a> 1.1.1. 递归法</h3><p>Recursive approach：使用递归法，时间复杂度 O(n^2)，空间复杂度 O(n):</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib_recur</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>  n
    <span class="token keyword">return</span> fib_recur<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib_recur<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div>`,6),m={id:"_1-1-2-动态规划",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#_1-1-2-动态规划","aria-hidden":"true"},"#",-1),k=a(`<p>Dynamic programmming approach：使用 DP, 时间复杂度和空间复杂度均为 O(n)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib_dyn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n
    memo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># 使用 range(n) 会数组越界</span>
    memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-3-记忆化搜索" tabindex="-1"><a class="header-anchor" href="#_1-1-3-记忆化搜索" aria-hidden="true">#</a> 1.1.3. 记忆化搜索</h3><p>Memoization of Fibonacci :</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">def</span> <span class="token function">recur_fib</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> N <span class="token keyword">in</span> cache<span class="token punctuation">:</span>
            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>N<span class="token punctuation">]</span>
        <span class="token keyword">if</span> N <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> N
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> recur_fib<span class="token punctuation">(</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> recur_fib<span class="token punctuation">(</span>N <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>

        cache<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> result
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> recur_fib<span class="token punctuation">(</span>N<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-4-使用公式" tabindex="-1"><a class="header-anchor" href="#_1-1-4-使用公式" aria-hidden="true">#</a> 1.1.4. 使用公式</h3><p>Imperative approach使用公式，时间复杂度 O(n), 空间复杂度 O(1)</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib_imp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n
    a <span class="token operator">=</span> <span class="token number">0</span>
    b <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
    <span class="token keyword">return</span> b
</code></pre></div><h2 id="_1-2-记忆化搜索" tabindex="-1"><a class="header-anchor" href="#_1-2-记忆化搜索" aria-hidden="true">#</a> 1.2. 记忆化搜索</h2><h3 id="_1-2-1-记忆化搜索概览" tabindex="-1"><a class="header-anchor" href="#_1-2-1-记忆化搜索概览" aria-hidden="true">#</a> 1.2.1. 记忆化搜索概览</h3><p>记忆化搜索和 DP 是有很多相似之处的，所以把记忆化搜索放在 DP 里面进行研究。</p><p>总的来说，我们写记忆化搜索算法的步骤大致为：</p><ul><li>使用BFS记忆化： <ol><li>写出这道题的暴力搜索程序（如 DFS）</li><li>将这个 DFS 改写城“无需外部变量”的 DFS</li><li>添加记忆化数组</li></ol></li><li>使用状态转移方程记忆化： <ol><li>把这道题目的 DP 和方程写出来</li><li>根据它们写出 DFS 函数</li><li>添加记忆化数组</li></ol></li></ul><p>其优点在于：</p><ol><li>避免搜索到无用状态</li></ol><p>其缺点在于：</p><ol><li>不能滚动数组</li><li>有些优化较难</li><li>效率较低但是不至于 TLE</li></ol><h2 id="_1-3-例题" tabindex="-1"><a class="header-anchor" href="#_1-3-例题" aria-hidden="true">#</a> 1.3. 例题</h2><h3 id="_1-3-1-lc638-大礼包" tabindex="-1"><a class="header-anchor" href="#_1-3-1-lc638-大礼包" aria-hidden="true">#</a> 1.3.1. LC638 大礼包</h3>`,19),h={href:"https://leetcode-cn.com/problems/shopping-offers/",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"这道题目可以利用记忆化搜索的方式去求解。",-1),v=s("p",null,"首先按照例子解释一下这个用例：",-1),g=s("blockquote",null,[s("p",null,"price = [2, 5] // A, B 对应的价格"),s("p",null,"special = [[3, 0, 5], [1, 2, 10]] // 表示折扣, 3A 0B 的大礼包价格是 5"),s("p",null,"needs = [3, 2] // 需要买的总的数量")],-1),y=s("ol",null,[s("li",null,[s("p",null,"我们该怎么合理使用大礼包呢？"),s("p",null,"按照记忆化搜索的思路，我们首先过滤掉无用的状态，即过滤掉不需要计算的大礼包，可以分几种情况来判断哪些大礼包是我们不需要的："),s("ul",null,[s("li",null,"根据题目要求「不能购买超出购物清单指定数量的物品」，如果大礼包里面的所有物品加起来超过我们要买的物品总数了，那么这个大礼包不能要；"),s("li",null,"大礼包不划算则不选这个大礼包（不划算指的是我单独买这些物品，下来大礼包反而贵了）"),s("li",null,"大礼包内不包含我们要买的物品，也不能买")]),s("p",null,"以上的条件就是我们记忆化搜索时可以用来筛选的条件。")]),s("li",null,[s("p",null,"根据题目要求，我们可以写出大致的状态转移方程。"),s("ul",null,[s("li",null,[s("p",null,[n("我们用 "),s("code",null,"dp "),n(" 表示满足购物清单 "),s("code",null,"needs "),n(" 需要的最小花费")])]),s("li",null,[s("p",null,[n("我们思考满足购物清单 "),s("code",null,"needs "),n(" 的最后一次购买，其可以分为两种情况：")]),s("ol",null,[s("li",null,"购买大礼包"),s("li",null,"不购买大礼包")])]),s("li",null,[s("p",null,[n("我们如果购买大礼包的时候，可以遍历每一个大礼包，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"p"),s("mi",null,"r"),s("mi",null,"i"),s("mi",null,"c"),s("msub",null,[s("mi",null,"e"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"price_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 表示第 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),n(" 个大礼包的价格，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mi",null,"e"),s("mi",null,"e"),s("mi",null,"d"),s("msub",null,[s("mi",null,"s"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"needs_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"ee"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"s"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 表示大礼包中的物品清单，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mi",null,"e"),s("mi",null,"e"),s("mi",null,"d"),s("mi",null,"s"),s("mo",null,"−"),s("mi",null,"n"),s("mi",null,"e"),s("mi",null,"e"),s("mi",null,"d"),s("msub",null,[s("mi",null,"s"),s("mi",null,"i")])]),s("annotation",{encoding:"application/x-tex"},"needs - needs_i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"ee"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"ee"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"s"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 表示购物清单 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mi",null,"e"),s("mi",null,"e"),s("mi",null,"d"),s("mi",null,"s")]),s("annotation",{encoding:"application/x-tex"},"needs")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord mathnormal"},"ee"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal"},"s")])])]),n(" 减去第 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),n(" 个大礼包中包含的物品清单后剩余的物品清单。")])])])])],-1),w=a(`<p>先附上官方题解，这个题解目前还有很多的疑问点：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">shoppingOffers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> price<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> special<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> needs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>
        filter_special <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> sp <span class="token keyword">in</span> special<span class="token punctuation">:</span>
            <span class="token comment"># 比如在第一个例子中 i == 2</span>
            <span class="token comment"># 第二个条件表示大礼包是有优惠的，这时候我们选择该礼包</span>
            <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> price<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> sp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                filter_special<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sp<span class="token punctuation">)</span>

        <span class="token decorator annotation punctuation">@lru_cache</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cur_needs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 在不购买大礼包的时候，购买购物清单中所有物品需要的花费</span>
            min_price <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>need <span class="token operator">*</span> price<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> need <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>cur_needs<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> cur_special <span class="token keyword">in</span> filter_special<span class="token punctuation">:</span>
                special_price <span class="token operator">=</span> cur_special<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                nxt_needs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> cur_special<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> cur_needs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                        <span class="token comment"># 不购买多于当前订单数量的物品</span>
                        <span class="token keyword">break</span>
                    <span class="token comment"># 还剩下多少物品需要购买</span>
                    nxt_needs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_needs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cur_special<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token comment"># why, 如果上述遍历完成，满足数量条件，大礼包可以购买</span>
                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nxt_needs<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">:</span>
                    min_price <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_price<span class="token punctuation">,</span> dfs<span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>nxt_needs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> special_price<span class="token punctuation">)</span>

            <span class="token keyword">return</span> min_price

        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>needs<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的测试用例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>s <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 折扣对应的价格</span>
        price <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
        <span class="token comment"># 表示折扣</span>
        special <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token comment"># 需要买的数量</span>
        needs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

        res <span class="token operator">=</span> self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>shoppingOffers<span class="token punctuation">(</span>price<span class="token punctuation">,</span> special<span class="token punctuation">,</span> needs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-2-跳台阶游戏" tabindex="-1"><a class="header-anchor" href="#_1-3-2-跳台阶游戏" aria-hidden="true">#</a> 1.3.2. 跳台阶游戏</h3><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p></blockquote><p>这是一个换了个考法的斐波那契数列问题：</p><p>第一次跳台阶只有两种选择：</p><ul><li>跳 1 阶，则剩余的跳法为 f(n-1)</li><li>跳 2 阶，则剩余的跳法为 f(n-2)</li></ul><p>所有的跳法就是 f(n-1) + f(n-2), 是不是和斐波那契数列一模一样？至此，就可以使用斐波那契数列的三种解法解决这个问题，只需要注意边界条件即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># write code here</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> n
        a <span class="token operator">=</span> <span class="token number">1</span>
        b <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
        <span class="token keyword">return</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展问题：</p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">jumpFloorII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># write code here</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> n
        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="_1-3-3-矩形覆盖" tabindex="-1"><a class="header-anchor" href="#_1-3-3-矩形覆盖" aria-hidden="true">#</a> 1.3.3. 矩形覆盖</h3>`,15),f=s("blockquote",null,[s("p",null,[n("我们可以用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mo",null,"∗"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2*1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mo",null,"∗"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2*1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 的小矩形无重叠地覆盖一个 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mo",null,"∗"),s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"2*n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),n(" 的大矩形，总共有多少种方法？")])],-1),x=a('<p>矩形覆盖无非就是两种情况：</p><ol><li>刚好填满一列：</li></ol><table><thead><tr><th style="text-align:center;">√</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:center;">√</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="2"><li>横向需要两个填满两列：</li></ol><table><thead><tr><th style="text-align:center;">√</th><th style="text-align:center;">√</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>',5),_=s("p",null,[n("这两种方式都可以实现填满，那么总的方式 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"2"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"f(n) = f(n-1) + f(n-2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},")")])])]),n(" ，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"f(n-1)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])]),n(" 为方法1，填满其中的一列，剩余 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),n(" 列，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"2"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"f(n-2)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},")")])])]),n(" 为方法2，填满其中的两列，剩余 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"n-2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),n(" 列。")],-1),M=s("p",null,"所以代码的编写就和斐波那契数列相同。",-1);function L(N,F){const p=t("Badge"),l=t("ExternalLinkIcon");return c(),i("div",null,[r,s("h3",m,[d,n(" 1.1.2. 动态规划 "),e(p,{text:"reco",type:"tip"})]),k,s("p",null,[s("a",h,[n("638. 大礼包"),e(l)])]),b,v,g,y,w,f,x,_,M])}const S=o(u,[["render",L],["__file","dp.html.vue"]]);export{S as default};
