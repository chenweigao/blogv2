import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,f as p}from"./app-22cda79c.js";const i={},u=p(`<h1 id="high-level-function" tabindex="-1"><a class="header-anchor" href="#high-level-function" aria-hidden="true">#</a> High-level Function</h1><h2 id="str-maketrans" tabindex="-1"><a class="header-anchor" href="#str-maketrans" aria-hidden="true">#</a> str.maketrans()</h2><p>用于创建字符映射的转换表，接收两个字符串参数，第一个参数表示需要转化的字符，第二个参数表示转换的目标。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>in_tab <span class="token operator">=</span> <span class="token string">&#39;aeiou&#39;</span>
out_tab <span class="token operator">=</span> <span class="token string">&#39;12345&#39;</span>
tran_tab <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>in_tab<span class="token punctuation">,</span> out_tab<span class="token punctuation">)</span>
<span class="token comment"># tran_tab: {97: 49, 101: 50, 105: 51, 111: 52, 117: 53}</span>

str_test <span class="token operator">=</span> <span class="token string">&quot;this is string example....wow!!!&quot;</span>
str_test<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>tran_tab<span class="token punctuation">)</span>
<span class="token comment"># th3s 3s str3ng 2x1mpl2....w4w!!!</span>
</code></pre></div><p>注意到 <code>str.maketrans()</code> 可以存在第三个参数，其必须为一个字符串，比如 <code>string.punctuation</code>(表示所有的标点符号), 在指定了第三个参数以后，第三个字符串中所有的字符(对应为其 ASCII 码 <code>ord()</code>)都会在 tran_tab 字典中被映射为 <code>None</code>, 实现的作用为在 <code>translate()</code> 时可以去掉字符串中所有的标点(结果会变成 <code>&#39;th3s 3s 1n 2x1mpl2w4w&#39;</code>)</p>`,5),r={href:"https://github.com/chenweigao/_code/blob/master/LeetCode/LC125_valid_palindrome.py",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="python-import-string" tabindex="-1"><a class="header-anchor" href="#python-import-string" aria-hidden="true">#</a> Python import string</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> string
<span class="token builtin">dir</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
</code></pre></div><p>可以查看 string 的所有参数，然后使用它：</p><ul><li><p><code>string.punctuation</code>: 所有的标点符号...等使用方法;</p></li><li><p><code>string.ascii_letters</code>: 所有的大小写字母；</p></li><li><p><code>string.digits</code>: 所有的数字。</p></li></ul><h2 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count()</h2><p>用于统计字符串里某个字符出现的次数 <code>count()</code> 方法，语法：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>sub<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>sub -- 搜索的子字符串。</li><li>start -- 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li><li>end -- 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li></ul><p>该方法返回子字符串在字符串中出现的次数。</p><p>理解下面这行代码所实现的功能：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>count<span class="token punctuation">,</span> J<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;R&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;L&#39;</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;U&#39;</span><span class="token punctuation">:</span> <span class="token number">1j</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1j</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">,</span> moves<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>第一行代码实现了两个字符串中共同字符的计数。</p><p>第二行代码实现了一个计算坐标的方法。</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map()</h2><p><code>map()</code> 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p><p><code>map()</code> 函数语法：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">map</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre></div><ul><li><p>function -- 函数，有两个参数</p></li><li><p>iterable -- 一个或多个序列</p></li></ul><p>e.g.1. 将一个列表中的整数转化成字符串存储如另一个列表中：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>newList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> number <span class="token keyword">in</span> oldList<span class="token punctuation">:</span> 
    newList<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>用 <code>map()</code> 等效于：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> oldList<span class="token punctuation">)</span>
</code></pre></div><h2 id="int2list-and-list2int" tabindex="-1"><a class="header-anchor" href="#int2list-and-list2int" aria-hidden="true">#</a> int2list and list2int</h2><ul><li>int2list</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">int2list</span><span class="token punctuation">(</span>intNum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>intNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>解析：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;123&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token builtin">map</span> <span class="token builtin">object</span><span class="token operator">&gt;</span> <span class="token comment"># python3 以后 map 返回迭代器</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre></div><ul><li>list2int</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">list2int</span><span class="token punctuation">(</span>aList<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> aList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="isinstance" tabindex="-1"><a class="header-anchor" href="#isinstance" aria-hidden="true">#</a> isinstance()</h2><p>Python 中判断类型的方法</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
</code></pre></div><h2 id="zip" tabindex="-1"><a class="header-anchor" href="#zip" aria-hidden="true">#</a> zip()</h2><p><code>zip(*iterators)</code>: returns a iterator of tuples.</p><p>当最短的迭代器遍历完成以后，停止迭代。</p><p>Example 1:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;heo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;helio&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># zip(&#39;ABCD&#39;, &#39;xy&#39;) --&gt; Ax By</span>
</code></pre></div><h2 id="enumerate" tabindex="-1"><a class="header-anchor" href="#enumerate" aria-hidden="true">#</a> enumerate()</h2><p>Example 2(接上 zip 的例子):</p>`,40),k={href:"https://leetcode.com/problems/longest-common-prefix/",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>

    <span class="token keyword">for</span> i<span class="token punctuation">,</span> _ <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>

test_strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;flower&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;flow&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;flight&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>longestCommonPrefix<span class="token punctuation">(</span>test_strs<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>enumerate()</code> 列举出来的下标从 0 开始，所以使用 <code>[:i]</code> 作为切片 而不是 <code>[:i-1]</code></p></div><h2 id="reduce-lcd-and-gcd" tabindex="-1"><a class="header-anchor" href="#reduce-lcd-and-gcd" aria-hidden="true">#</a> reduce(), lcd and gcd</h2><p><code>functools.reduce</code> 可以应用带有两个参数的函数来将一个可迭代的对象的项转化为单个的值，而干函数的两个参数是下一项和前一次应用该函数的结果。</p><p>e.g. 计算10的阶乘：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> functools
product <span class="token operator">=</span> functools<span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">6</span>
</code></pre></div><h3 id="gcd-and-lcm" tabindex="-1"><a class="header-anchor" href="#gcd-and-lcm" aria-hidden="true">#</a> gcd and lcm</h3>`,8),m={href:"https://github.com/chenweigao/_code/blob/master/python/gcd.py",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/chenweigao/_code/blob/master/python/lcm.py",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>最小公倍数 = 两整数的乘积 / 最大公约数</p><p>lcm(x,y) = x * y / gcd(x,y)</p></div><h2 id="bit-operation" tabindex="-1"><a class="header-anchor" href="#bit-operation" aria-hidden="true">#</a> Bit operation</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>~</td><td>按位取反</td></tr><tr><td>&lt;&lt;</td><td>左移</td></tr><tr><td>&gt;&gt;</td><td>右移</td></tr></tbody></table><p><code>str(bin(x^y).count&#39;1&#39;)</code> 计算了两个整数之间的 Hamming distance.</p><p>Questions: to think what this code did:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#LC693</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">hasAlternatingBits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        num <span class="token operator">=</span> n <span class="token operator">^</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> all()</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">all</span><span class="token punctuation">(</span>iterable<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span>
    Return <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">True</span> <span class="token keyword">for</span> <span class="token builtin">all</span> values x <span class="token keyword">in</span> the iterable<span class="token punctuation">.</span>
If the iterable <span class="token keyword">is</span> empty<span class="token punctuation">,</span> <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">.</span>
</code></pre></div><p>This is <strong>example 1</strong>(LeetCode 728) about the usage:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">selfDividingNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type left: int
        :type right: int
        :rtype: List[int]
        &quot;&quot;&quot;</span>
       <span class="token comment"># return [num for num in range(left, right+1) </span>
   	   <span class="token comment"># if all((int(d) and not num % int(d)) for d in str(num))]</span>
        is_self_dividing <span class="token operator">=</span> <span class="token keyword">lambda</span> num<span class="token punctuation">:</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> 
        <span class="token keyword">and</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>num <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">for</span> digit <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>is_self_dividing<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该段代码使用了 <code>all</code> 的特性，并且在最后返回了一个 filter 的可迭代对象，然后转化成 list,得到结果。</p><p><strong>example 2</strong> (LeetCode 766):</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isToeplitzMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type matrix: List[List[int]]
        :rtype: bool
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token builtin">all</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> matrix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> 
                   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>Tips: <code>len(matrix)</code> gets the number of rows, <code>len(matrix[0])</code> gets the number of columns.</p><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter()</h2><p>假设你想从考试分数的一个列表中删除所有的 0 分，如下的循环可以完成这个任务：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>newList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> number <span class="token keyword">in</span> oldList<span class="token punctuation">:</span>
    <span class="token keyword">if</span> number <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">:</span>
        newList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>
</code></pre></div><p>如果使用 <code>filter()</code> 则只需要如下代码：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>newList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>isPositive<span class="token punctuation">,</span> oldList<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>再使用<code>lambda</code>表达式创建匿名函数：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>newList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> number<span class="token punctuation">:</span> number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> oldList<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> <strong>name</strong></h2><p><code>__name__</code> 这个系统变量显示了当前模块执行过程中的名称，<code>__main__</code> 一般作为函数的入口，或者整个工程开始运行的入口。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#test.py</span>
<span class="token keyword">def</span> <span class="token function">HaveFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;My name is %s&#39;</span> <span class="token operator">%</span> __name__<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Someone else called me! my name is %s&#39;</span> <span class="token operator">%</span> __name__<span class="token punctuation">)</span>
HaveFun<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>output: <code>My name is __mian__</code></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment">#main.py</span>
<span class="token keyword">import</span> test
test<span class="token punctuation">.</span>HaveFun<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>output:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Someone <span class="token keyword">else</span> called me<span class="token operator">!</span> my name is <span class="token builtin class-name">test</span>
Someone <span class="token keyword">else</span> called me<span class="token operator">!</span> my name is <span class="token builtin class-name">test</span>
</code></pre></div><h2 id="random" tabindex="-1"><a class="header-anchor" href="#random" aria-hidden="true">#</a> random()</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> string
src <span class="token operator">=</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters
password <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>利用 <code>random.sample()</code> 生成 4 位随机密码。</p><h2 id="collections" tabindex="-1"><a class="header-anchor" href="#collections" aria-hidden="true">#</a> Collections</h2><h3 id="ordereddict" tabindex="-1"><a class="header-anchor" href="#ordereddict" aria-hidden="true">#</a> OrderedDict</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
</code></pre></div><p><code>OrderedDict</code> 是一个可以记录其插入次序的字典，可以结合排序，构造一个排序的字典。</p><blockquote><p>If the value of a certain key is changed, the position of the key remains unchanged in OrderedDict.<br> Deleting and re-inserting the same key will push it to the back as OrderedDict however maintains the order of insertion.</p></blockquote><ul><li><p><code>move_to_end()</code>: 将该元素放置于字典的尾部</p></li><li><p><code>popitem(last=True)</code>: pop 元素使其成为先进先出队列</p></li></ul>`,37),y={href:"https://github.com/chenweigao/_code/blob/f43526c616e0d3799bbc6d1e2f703ebc2e9ad355/interview/huawei2016_2.py",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="decorators" tabindex="-1"><a class="header-anchor" href="#decorators" aria-hidden="true">#</a> decorators</h2><h3 id="property" tabindex="-1"><a class="header-anchor" href="#property" aria-hidden="true">#</a> @property</h3><p>In Python, <code>property()</code> is a built-in function that creates and returns a property object. The signature of this function is:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">property</span><span class="token punctuation">(</span>fget<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fdel<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre></div><p>where, <code>fget</code> is function to get value of the attribute, <code>fset</code> is function to set value of the attribute, <code>fdel</code> is function to delete the attribute and <code>doc</code> is a string (like a comment).</p>`,5),f={href:"https://www.programiz.com/python-programming/property",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>一般情况下，我们在定义一个类的时候可能会涉及到访问这个类中的私有元素，一般情况下我们会使用一个函数来返回它，但是 Python 中可以使用 <code>@property</code> 装饰器来优雅地实现这个功能。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name

    <span class="token decorator annotation punctuation">@name<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> value

<span class="token comment"># use the value of &#39;name&#39;</span>
c <span class="token operator">=</span> ClassName<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>name
<span class="token comment"># return the self._name&#39;s value</span>
c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;weigao&#39;</span>
<span class="token comment"># ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),w={href:"https://github.com/chenweigao/multi_thread_and_process/blob/master/threading_Thread.py",target:"_blank",rel:"noopener noreferrer"},x=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width

    <span class="token decorator annotation punctuation">@width<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">width</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_width <span class="token operator">=</span> value

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">resolution</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_width <span class="token operator">*</span> <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中，<code>width</code> 为可读写的，而 <code>resolution</code> 为只读属性。</p><h2 id="urllib" tabindex="-1"><a class="header-anchor" href="#urllib" aria-hidden="true">#</a> urllib</h2><h3 id="reading-json-file-from-url" tabindex="-1"><a class="header-anchor" href="#reading-json-file-from-url" aria-hidden="true">#</a> Reading json file from URL</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request
<span class="token keyword">import</span> json

<span class="token keyword">with</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&#39;http://118.24.241.17/path.json&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data_json <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p><code>data_json</code> is the json file we need.</p><h2 id="regular-expression-re-正则表达式" tabindex="-1"><a class="header-anchor" href="#regular-expression-re-正则表达式" aria-hidden="true">#</a> Regular Expression - re 正则表达式</h2>`,7),q={href:"https://deerchao.net/tutorials/regex/regex.htm",target:"_blank",rel:"noopener noreferrer"},L=p(`<p>在 Python 中，如果想使用正则表达式：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;^[1-9]\\d{4,11}$&#39;</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>

pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;some regular expression&#39;</span><span class="token punctuation">)</span>
re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>
<span class="token comment"># find all matched of pattern in sentence</span>
</code></pre></div>`,2),j={href:"https://pypi.org/project/regex/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.python.org/zh-cn/3/library/re.html#module-re",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"re",-1),T=p(`<div class="language-python" data-ext="py"><pre class="language-python"><code>prog <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>
result <span class="token operator">=</span> prog<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>

<span class="token comment"># 等价于</span>
result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span>
</code></pre></div><h2 id="requests" tabindex="-1"><a class="header-anchor" href="#requests" aria-hidden="true">#</a> requests</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse

data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;weigao&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span>

json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token comment"># &#39;{&quot;name&quot;: &quot;weigao&quot;, &quot;age&quot;: 20}&#39;</span>

values <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> json_data<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;data=%7B%22name%22%3A+%22weigao%22%2C+%22age%22%3A+20%7D&#39;</span>

url<span class="token operator">=</span><span class="token string">&#39;http://api.weixin.oa.com/itilalarmcgi/sendmsg&#39;</span>

response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>values<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="networks-and-interprocess-communication" tabindex="-1"><a class="header-anchor" href="#networks-and-interprocess-communication" aria-hidden="true">#</a> Networks and Interprocess Communication</h2><h3 id="coroutines-协程" tabindex="-1"><a class="header-anchor" href="#coroutines-协程" aria-hidden="true">#</a> Coroutines-协程</h3>`,5),z=n("code",null,"async/await",-1),P={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html",target:"_blank",rel:"noopener noreferrer"},D=p(`<p>协程有两个紧密关联的概念：</p><ol><li><p>协程函数：定义形式为 <code>asyncio def</code> 的函数</p></li><li><p>协程对象：调用协程函数所返回的对象</p></li></ol><p>在 Python 中，<strong>单线程 + 异步 I/O</strong> 的编程模型被称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。</p><h3 id="asyncio" tabindex="-1"><a class="header-anchor" href="#asyncio" aria-hidden="true">#</a> asyncio</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
</code></pre></div><ul><li><p>运行一个协程使用 <code>asyncio.run()</code>, 该函数用于函数运行的入口</p></li><li><p>等待一个协程使用 <code>asyncio.sleep(1)</code></p></li><li><p>使用协程并发处理多任务使用 <code>asyncio.gather()</code></p></li></ul>`,6),I=n("code",null,"await",-1),S={href:"https://github.com/chenweigao/multi_thread_and_process/blob/master/asyncio_coroutines.py",target:"_blank",rel:"noopener noreferrer"};function B(A,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("LeetCode 上有题目可以使用该方法求解回文子串，具体可以参考"),n("a",r,[s("代码"),t(a)])]),d,n("p",null,[n("a",k,[s("Leetcode 14. Longest Common Prefix"),t(a)])]),h,n("ul",null,[n("li",null,[n("p",null,[n("a",m,[s("最小公倍数"),t(a)])])]),n("li",null,[n("p",null,[n("a",g,[s("最大公约数"),t(a)])])])]),b,n("p",null,[n("a",y,[s("这是一道华为的笔试题，用于处理一些文件日志功能"),t(a)])]),v,n("p",null,[s("To better understand this, "),n("a",f,[s("see this blog"),t(a)]),s(".")]),_,n("p",null,[s("还有一个例子可以参考这里 "),n("a",w,[s("Thread code"),t(a)])]),x,n("p",null,[n("a",q,[s("参考这篇教程：正则表达式30分钟入门教程"),t(a)])]),L,n("blockquote",null,[n("p",null,[s("第三方模块 "),n("a",j,[s("regex"),t(a)]),s(" , 提供了与标准库 "),n("a",C,[N,t(a)]),s(" 模块兼容的 API 接口，同时，还提供了更多功能和更全面的 Unicode 支持。")])]),T,n("blockquote",null,[n("p",null,[s("协程通过 "),z,s(" 语法进行声明，是编写异步应用的推荐方式。"),n("a",P,[s("官方教程"),t(a)])])]),D,n("p",null,[s("记住协程是 "),I,s(" 对象！"),n("a",S,[s("基础的用法可以参考代码"),t(a)])])])}const H=e(i,[["render",B],["__file","python-function.html.vue"]]);export{H as default};
