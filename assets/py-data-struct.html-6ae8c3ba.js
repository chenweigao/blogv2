import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as e,c,a as n,d as l,w as u,f as a,b as s}from"./app-22cda79c.js";const i={},r=a(`<h1 id="python-data-struct" tabindex="-1"><a class="header-anchor" href="#python-data-struct" aria-hidden="true">#</a> Python Data Struct</h1><h2 id="slicing" tabindex="-1"><a class="header-anchor" href="#slicing" aria-hidden="true">#</a> Slicing</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">&#39;bicycle&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token string">&#39;ycle&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token string">&#39;bic&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token string">&#39;bye&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">&#39;elcycib&#39;</span>
</code></pre></div><p>If you want to <em>reverse a string</em>, the last example is a choice.</p><ul><li>assigning to slices</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre></div><p>what you can see is that <strong>[2,3,4]</strong> is replaced by <strong>[20,30]</strong></p><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h2><ul><li><p>list of list</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> board
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;x&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> board
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre></div><p>The first line is the right way to multiply it,rather than:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> wrong_board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> wrong_board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> wrong_board
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre></div></li><li><p><code>list.sort()</code> &amp; <code>sorted(list)</code></p><p>The <code>list.sort()</code> method sorts a list in-place, that is, without making a copy.</p><p>In contrast, the built-in function <code>sorted(list)</code> creates a new list and returns it.</p></li><li><p>找到列表中每一行的最大元素和每一列的最大元素</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>        row <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>heights<span class="token punctuation">)</span>
        col <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      
        max_row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> row
        max_col <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> col

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>
            max_row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>
                max_col<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> max_col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sort-and-sorted" tabindex="-1"><a class="header-anchor" href="#sort-and-sorted" aria-hidden="true">#</a> sort and sorted</h2>`,11),k={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"skill",-1),m=n("p",null,[s("在对 list 排序时， 可以使用 "),n("code",null,"sorted()"),s(" 或者 "),n("code",null,"sort()"),s(" + "),n("code",null,"deepcopy()"),s(" 两种方式")],-1),g=a(`<ol><li><p>sorted()</p><p>descending order (降序)</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">max_n</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> reverse<span class="token operator">=</span>reverse<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
</code></pre></div></li><li><p>sort() + deepcopy()</p><p>ascending order (升序)</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> copy <span class="token keyword">import</span> deepcopy

<span class="token keyword">def</span> <span class="token function">min_n</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    numbers <span class="token operator">=</span> deepcopy<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
    numbers<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>
</code></pre></div></li></ol><ul><li><p>make list a stack or queue</p><p>The .append and .pop methods make a list usable as a stack or a queue (if you use .append and .pop(0), you get LIFO, Last in First out, behavior).</p><p>But inserting and removing from the left of a list (the 0-index end) is costly because the entire list must be shifted.</p></li><li><p>deques and queues</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
dq <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment"># dq: deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)</span>
dq<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]</span>
<span class="token comment"># this function rotates items from the right end</span>
<span class="token comment"># and when dp.rotate(-3) is from the left</span>
dq<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
dq<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># [3, 4, 5, 6, 7, 8, 9, 11, 22, 33]</span>
<span class="token comment"># default is insert from right</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What is different between <code>append()</code> and <code>extend()</code>? here is an example:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dp
<span class="token comment"># deque([10, 30, 20, 10, 3, 4, 5, 6, 7, 8], maxlen=10)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dp<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># deque([[1, 2], 10, 30, 20, 10, 3, 4, 5, 6, 7], maxlen=10)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dp<span class="token punctuation">.</span>extendleft<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># deque([2, 1, [1, 2], 10, 30, 20, 10, 3, 4, 5], maxlen=10)</span>
</code></pre></div><p>Note that <code>extendleft(iter)</code> works by appending each successive item of the iter argument to the left of the deque, therefore the final position of the items is reversed.</p></li></ul><h2 id="bisect" tabindex="-1"><a class="header-anchor" href="#bisect" aria-hidden="true">#</a> Bisect</h2><p><code>#bisect: [baɪ&#39;sɛkt]</code></p><blockquote><p>Bisection is the general activity of dividing a geometric figure into two equal parts</p></blockquote><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><p>Python 的集合是一个十分方便的对于元素可以操作的序列，除了去掉重复元素外，还可以进行稽核之间的运算。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>student <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jim&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mary&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rose&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>   <span class="token comment"># 输出集合，重复的元素被自动去掉</span>

a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;abracadabra&#39;</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;alacazam&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的差集</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的并集</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的交集</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 中不同时存在的元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>set 的集合运算十分有用，看下面的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type words: List[str]
        :rtype: List[str]
        &quot;&quot;&quot;</span>
        a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;qwertyuiop&#39;</span><span class="token punctuation">)</span>
        b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;asdfghjkl&#39;</span><span class="token punctuation">)</span>
        c <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;zxcvbnm&#39;</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
            w <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">&amp;</span> a <span class="token operator">==</span> w<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>w <span class="token operator">&amp;</span> b <span class="token operator">==</span> w<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>w <span class="token operator">&amp;</span> c <span class="token operator">==</span> w<span class="token punctuation">)</span><span class="token punctuation">:</span>
                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码实现了一个求解某序列是否在键盘的同一行的操作，通过求交集看是否结果等于自身就可以很方便地求解出结果。</p><h3 id="set-usage" tabindex="-1"><a class="header-anchor" href="#set-usage" aria-hidden="true">#</a> set usage</h3><ol><li>使用 set 一般用于 <strong>判断一个值是否存在其中</strong></li><li>when to keep elements sorted and unique.</li></ol><p>Example: 忽略常见单词，只对不在集合中的单词统计出现次数：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;some&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;words&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//code</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>exclude<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> exclude<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//code</span>
<span class="token punctuation">}</span>
</code></pre></div><p>对比如果使用 vector 实现：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;some&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;words&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//code</span>
<span class="token keyword">auto</span> is_exclude <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">binary_search</span><span class="token punctuation">(</span>exclude<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exclude<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//bool binary_search()</span>
<span class="token keyword">auto</span> reply <span class="token operator">=</span> is_exclude <span class="token operator">?</span> <span class="token string">&quot;excluded&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;not excluded&quot;</span><span class="token punctuation">;</span>
</code></pre></div>`,17);function b(v,h){const t=o("RouterLink");return e(),c("div",null,[r,n("div",k,[d,m,n("p",null,[l(t,{to:"/algorithm/python/"},{default:u(()=>[s("example code")]),_:1})])]),g])}const f=p(i,[["render",b],["__file","py-data-struct.html.vue"]]);export{f as default};
