import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a,b as n,d as t,f as s}from"./app-22cda79c.js";const r={},i=s('<h2 id="thread-and-process" tabindex="-1"><a class="header-anchor" href="#thread-and-process" aria-hidden="true">#</a> Thread and Process</h2><ol><li><p>进程</p><p>进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有自己的一个地址空间，至少有 5 种基本状态，他们分别是：初始态，就绪态，执行态，等待态，终止态。</p></li><li><p>线程</p><p>线程是 CPU 调度和分派的基本单位，它可以与同属一个进程的其他线程共享进程所拥有的全部资源。</p></li><li><p>联系</p><p>线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p></li><li><p>区别</p><p>根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。</p><p>开销方面：每个进程都有独立的代码和数据空间（进程上下文），程序之间切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每一个线程都有自己独立的 <strong>运行栈</strong> 和 <strong>程序计数器（PC）</strong>，线程之间的切换开销小。</p><p>内存分配：系统在运行时为每个进程分配不同的内存空间；而对线程而言，除了 CPU 外，系统不会为线程分配内存，线程组之间只能共享资源。</p><p>包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程是多个线程共同完成的；线程是进程的一部分，所以线程也被成为轻量级进程。</p></li><li><p>并发和隔离</p><p>操作系统中有两个重要的概念：并发和隔离。</p><p>并发是为了尽量让硬件利用率高，线程是为了在系统层面做到并发，线程上下文切换效率比进程上下文切换效率高很多，这样可以提高并发效率。</p><p>隔离是并发以后要解决的重要问题，计算机的资源一般是共享的，隔离能保障资源的回收，不影响其他代码的使用。</p></li></ol><h2 id="多进程" tabindex="-1"><a class="header-anchor" href="#多进程" aria-hidden="true">#</a> 多进程</h2><h3 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> fork()</h3><p>程序运行时操作系统会创建一个进程，并为它分配资源，然后把该进程放入就绪队列，进程调取器选中的话就为该进程分配 CPU 时间，程序真正开始运行。</p><p>Linux使用 <code>fork()</code> 来创建子进程，其返回值的含义是：</p><ul><li><p>负数：创建子进程失败</p></li><li><p>0： 返回在子进程中</p></li><li><p>正数：返回在父进程中，该正数为新创建的子进程的 pid</p></li></ul><p>注意到 fork 函数在调用之后会返回<strong>两次</strong>, 他在调用进程中(称为父进程)中返回一次，返回值是新派生进程(子进程)的进程 ID 号；在子进程中又返回一次，进程号为 0。因此，返回值本身告知当前进程是子进程还是父进程。</p><p>fork 在子进程返回 0 而不是父进程的进程 ID 的原因在于：任何子进程只有一个父进程，而且子进程总是可以通过 getppid 取得父进程的进程 ID。相反，父进程可以有很多个子进程，而且无法获得各个子进程的进程 ID。如果父进程想跟踪所有子进程的进程 ID，那么它必须记录每次调用 fork 的返回值。</p><p>注意子进程结束时，父进程应当回收子进程，不然子进程会变成僵尸进程。</p><p>Linux 下查看僵尸进程使用 <code>top</code> 命令，其中的 <code>zombie</code> 前的数量就代表僵尸进程的数量。</p><p>问题：连续调用三次 <code>fork()</code>, 会返回几个进程？</p><p>答：2^3 个。</p><p>多进程相比于多线程而言更加健壮，因为多线程程序只要有一个线程奔溃，整个进程也会奔溃，而一个进程奔溃并不会对另一个进程造成影响，因为进程拥有自己的地址空间。</p><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec" aria-hidden="true">#</a> exec()</h3><p>fork 有两种典型用法：</p><ol><li><p>一个进程创建自身的副本，这样每个副本都可以在另一个副本执行其他任务的同时处理各自的某个操作。网络服务器一般都用这个方法。</p></li><li><p>一个进程想要执行另外一个程序。该进程调用 fork 创建一个自身的副本，然后其中一个副本(通常为子进程)调用 exec 把自身替换成新的程序。shell 就是使用的这个方法。</p></li></ol><p>exec 函数有 6 个，但是只有 execve 是内核中的系统调用，其他 5 个都是调用 execve 的库函数。</p><h2 id="进程间通信" tabindex="-1"><a class="header-anchor" href="#进程间通信" aria-hidden="true">#</a> 进程间通信</h2><p>进程间通信（IPC）的方式包括：信号，管道，共享内存，消息队列，信号量，封装的有 TCP/IP 套接字。</p>',20),d={href:"https://github.com/chenweigao/multi_thread_and_process",target:"_blank",rel:"noopener noreferrer"},h=s(`<h3 id="命名管道-fifo" tabindex="-1"><a class="header-anchor" href="#命名管道-fifo" aria-hidden="true">#</a> 命名管道 FIFO</h3><p>用到 <code>sys/stat.h</code>, <code>unistd.h</code>, <code>linux/stat.h</code> 等头文件。</p><p>命名管道变编程使用 <code>FILE</code> 对象，和文件读写的操作很相似，创建 FIFO 使用：</p><p><code>mkfifo(FIFO_FILE, 0666)</code>:</p><ul><li><p>FIFO_FILR 为宏定义的文件名：<code>#define FIFO_FILE &quot;MYFIFO&quot;</code></p></li><li><p>返回值小于 0 则说明命名管道存在</p></li><li><p>返回值大于 0 则说明创建命名管道成功</p></li><li><p><code>0666</code> 代表权限。在此对权限进行以下说明：</p><table><thead><tr><th style="text-align:center;">读</th><th style="text-align:center;">写</th><th style="text-align:center;">执行</th></tr></thead><tbody><tr><td style="text-align:center;">4</td><td style="text-align:center;">2</td><td style="text-align:center;">1</td></tr></tbody></table><p>从表格中可以看出， <code>6</code> 代表的含义为 4 + 2, 为读和写。四位数字代表特殊权限位，拥有者位，同组用户位，其余用户位。</p></li></ul><p>要进行命名管道的通信，则使用一个 buff 读取文件指针，例如：</p><p><code>FILE* fp = fopen(FIFO_FILE, &quot;r&quot;)</code> 打开命名管道；</p><p><code>fgets(readbuf, 80, fp)</code> 读取命名管道，相应的，可以使用 <code>fputs()</code> 写入命名管道。</p><h3 id="ipc-消息" tabindex="-1"><a class="header-anchor" href="#ipc-消息" aria-hidden="true">#</a> IPC 消息</h3><p>用到 <code>sys/ipc.h</code>, <code>sys/msg.h</code> 等头文件。</p><p>创建一个 ipc 消息的方式一般为：</p><p><code>int msgid = msgget((key_t)1234, 0666|IPC_CREAT);</code></p><p>返回值说明如下：</p><ul><li><p>返回 -1：创建失败</p></li><li><p>否则，成功创建，该消息的 id 为 1234</p></li></ul><p>接收和发送消息使用：</p><ul><li><p><code>msgrcv(msgid, data, BUFSIZE, 0, 0)</code>: 返回 -1 则失败，否则接收到消息值 data.</p></li><li><p><code>msgsnd(msgid, data, BUFSIZE, 0)</code>: 返回 -1 则失败，否则发送消息。</p></li></ul><h3 id="共享内存" tabindex="-1"><a class="header-anchor" href="#共享内存" aria-hidden="true">#</a> 共享内存</h3><p>用到 <code>sys/ipc.h</code>, <code>sys/shm.h</code> 头文件。</p><p>创建一个共享内存的方式一般如下：</p><p><code>int shmid = shmget((key_t)1234, 256, 0666|IPC_CREAT)</code>:</p><ul><li>返回负数：<code>shmget</code> 失败</li></ul><p><code>char *shmptr = shmat(shmid, 0, 0)</code>:</p><ul><li>返回 -1：失败</li></ul><p>然后使用 <code>strcpy</code> 将 <code>shmptr</code> 拷贝出来或者拷贝出去：</p><ul><li><p>write: <code>strcpy(shmptr, char* text)</code></p></li><li><p>read: <code>strcpy(buf, shmptr)</code></p></li></ul><h2 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> SSH</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-f</span> /etc/ssh/ssh_host_rsa_key
<span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> start
</code></pre></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server
<span class="token comment">#ssh config</span>
/etc/ssh/sshd_config
</code></pre></div><p>start server:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart/start
</code></pre></div><p>A bug:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-f</span> /etc/ssh/ssh_host_ed25519_key
</code></pre></div><h2 id="python-file-server" tabindex="-1"><a class="header-anchor" href="#python-file-server" aria-hidden="true">#</a> Python File Server</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> http.server
<span class="token comment">#default port: 8000</span>

python <span class="token parameter variable">-m</span> http.server <span class="token number">80</span>
<span class="token comment">#in port 80</span>
</code></pre></div><h2 id="program-status" tabindex="-1"><a class="header-anchor" href="#program-status" aria-hidden="true">#</a> Program Status</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>

<span class="token builtin class-name">echo</span> %ERRORLEVEL%
<span class="token comment">#windows</span>
</code></pre></div><hr><div class="hint-container tip"><p class="hint-container-title">Shell</p><p>This is a basic note about Linux shell, I have wrote plenty of bash shell, which helps solve problem easily.</p><p>Include <strong>system information, SSH, read -p, shell array, sed, AWK</strong></p></div><h2 id="system-information" tabindex="-1"><a class="header-anchor" href="#system-information" aria-hidden="true">#</a> System Information</h2><p>Sometimes, you may want to see the system kernel version, 2 ways are available :</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>lsb_release <span class="token parameter variable">-a</span>
<span class="token function">cat</span> /etc/issue
</code></pre></div><p>change password for a user:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">passwd</span> root
</code></pre></div><p>echo current time as a file name:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token builtin class-name">test</span> <span class="token operator">&gt;&gt;</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;today&quot;</span> +<span class="token string">&quot;%Y%m%d_%H%M%S&quot;</span><span class="token variable">)</span></span>.txt 
<span class="token comment"># work log</span>
<span class="token function">git</span> log <span class="token parameter variable">-4</span> <span class="token operator">&gt;</span> log/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;today&quot;</span> +<span class="token string">&quot;%Y%m%d&quot;</span><span class="token variable">)</span></span>.txt
</code></pre></div><h2 id="add-choice-for-user-read-p" tabindex="-1"><a class="header-anchor" href="#add-choice-for-user-read-p" aria-hidden="true">#</a> Add Choice for User - Read -p</h2><p><code>read -p</code> is very useful for this, for example:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">read</span> <span class="token parameter variable">-n1</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;What is your system version? 
1: Ubuntu 16.04;
2: Ubuntu 17.10;
3: Ubuntu 18.04;
choose a number between 1, 2 and 3: &quot;</span> answer
<span class="token keyword">case</span> <span class="token variable">$answer</span> <span class="token keyword">in</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">..</span>.<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">..</span>.<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">..</span>.<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Tips</em> :</p><ul><li><code>-n1</code> : -n and 1 are used together, which means <code>read</code> commmand will quit when system accept a single character, no need for Enter.</li><li><code>-s</code> : this options will avoid displaying user <em>passwords</em> on the screen.</li><li><code>-t 5</code>: overtime option, this means that user must complete the input within 5 seconds.</li></ul><h2 id="shell-array" tabindex="-1"><a class="header-anchor" href="#shell-array" aria-hidden="true">#</a> Shell Array</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">arrayName</span><span class="token operator">=</span><span class="token punctuation">(</span>array_content<span class="token punctuation">)</span>
<span class="token comment">#get the content of arrary, or [*]</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${arraryName<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
<span class="token comment">#get the size of array</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>arrayName<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
</code></pre></div><h2 id="sed" tabindex="-1"><a class="header-anchor" href="#sed" aria-hidden="true">#</a> Sed</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">current_plugins_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>dpkg <span class="token parameter variable">-s</span> picoscenes-plugins-demo-rxsbroadcaster-chronos <span class="token operator">|</span> <span class="token function">grep</span> Version <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/Version: //g&#39;</span><span class="token variable">)</span></span>
</code></pre></div><p>This is a basic use of sed, <code>sed &#39;s/Version: //g&#39;</code> means that a select:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Version: <span class="token number">18.0406</span>.2333
</code></pre></div><p>Output is:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token number">18.0406</span>.2333
</code></pre></div><p>That means <strong>replace</strong> &quot;Version: &quot; with <strong>empty</strong>.</p><p>To replace the string in the file, use <code>-i</code>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/GRUB_HIDDEN_TIMEOUT=0/#GRUB_HIDDEN_TIMEOUT=0/g&#39;</span>  /etc/default/
</code></pre></div><p>This is an example that we do the CSI experiment, update the <code>~/etc/default/grub</code> make the new kernel version could be seen.</p><h2 id="tr-and-awk" tabindex="-1"><a class="header-anchor" href="#tr-and-awk" aria-hidden="true">#</a> tr and awk</h2><p><code>tr</code> 可以理解为<code>sed</code>的简化版本</p><p>Usage: <code>tr [OPTION]... SET1 SET2</code></p><ul><li><p>-c, -C, --complement: use the complement of SET1(不常用)</p></li><li><p>-d, -delete: delete characters in SET1</p></li><li><p>-s: replace each sequence of a repeated character, 删除所有重复出现字符序列，只保留第一个</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#将所有的the替换为my</span>
<span class="token function">tr</span> <span class="token parameter variable">-s</span> <span class="token string">&#39;the&#39;</span> <span class="token string">&#39;my&#39;</span>
<span class="token function">tr</span> <span class="token parameter variable">-s</span> <span class="token string">&#39; &#39;</span> <span class="token string">&#39;\\n&#39;</span>

<span class="token comment">#删除所有的the</span>
<span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;the&#39;</span>

<span class="token comment">#小写变大写</span>
<span class="token function">tr</span> <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span> <span class="token punctuation">[</span>A-Z<span class="token punctuation">]</span>

<span class="token comment">#删除连续的重复字母</span>
<span class="token function">tr</span> <span class="token parameter variable">-s</span> <span class="token punctuation">[</span>a-zA-Z<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67),u={href:"https://www.tutorialspoint.com/awk",target:"_blank",rel:"noopener noreferrer"},k=s(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">which</span> <span class="token function">awk</span>
$ usr/bin/awk
</code></pre></div><p>display the complete content of the files using AWK:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{print}&#39;</span> xx.txt
</code></pre></div><p>AWK script:</p><p>create a text file <code>command.awk</code> containing the AWK command:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>print<span class="token punctuation">}</span>
</code></pre></div><p>the use it:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token parameter variable">-f</span> command.awk xx.txt
</code></pre></div><p>Options:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -v option</span>
<span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>Jerry <span class="token string">&#39;BEGIN{printf &quot;Name = %s\\n&quot;, name}&#39;</span>

<span class="token function">awk</span> <span class="token parameter variable">--help</span>
</code></pre></div><p>print column:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{print $3 &quot;\\t&quot; $4}&#39;</span> marks.txt

<span class="token comment"># or in any order</span>
<span class="token function">awk</span> <span class="token string">&#39;{print $4 &quot;\\t&quot; $3}&#39;</span> marks.txt
</code></pre></div><p>there we print the third and the fourth fields.</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;/a/ {print $4 &quot;\\t&quot; $3}&#39;</span> marks.txt
</code></pre></div><p>the pattern, only print 4 lines:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;/a/{++cnt} END {print &quot;Count = &quot;, cnt}&#39;</span> marks.txt
<span class="token comment"># Count = 4(where the marks.txt has 5 lines)</span>
</code></pre></div><blockquote><p><strong>$0</strong> variable stores the entire line and in the absence of a body block, default action is taken, i.e., the print action.</p></blockquote><h2 id="tar" tabindex="-1"><a class="header-anchor" href="#tar" aria-hidden="true">#</a> tar</h2><p>解压一般的 tag.gz:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>
</code></pre></div><p>解压 xz：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>xz <span class="token parameter variable">-d</span> *.tar.xz
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> *.tar
</code></pre></div><h2 id="查看端口号" tabindex="-1"><a class="header-anchor" href="#查看端口号" aria-hidden="true">#</a> 查看端口号</h2><p>查看端口被哪个进程占用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">lsof</span> <span class="token parameter variable">-i:80</span>
</code></pre></div><p>或者</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-ano</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">80</span>
</code></pre></div><h2 id="守护进程" tabindex="-1"><a class="header-anchor" href="#守护进程" aria-hidden="true">#</a> 守护进程</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> python3 webhook.py <span class="token operator">&amp;</span>
</code></pre></div>`,29);function g(m,b){const e=o("ExternalLinkIcon");return c(),l("div",null,[i,a("p",null,[a("a",d,[n("代码实现可以参考 GitHub"),t(e)])]),h,a("p",null,[a("a",u,[n("AWK Tutorial"),t(e)])]),k])}const x=p(r,[["render",g],["__file","linux_os.html.vue"]]);export{x as default};
