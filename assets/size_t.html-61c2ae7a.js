import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c,a as e,b as s,d as i,f as p}from"./app-22cda79c.js";const d={},l=p(`<h1 id="size-t" tabindex="-1"><a class="header-anchor" href="#size-t" aria-hidden="true">#</a> size_t</h1><h2 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract" aria-hidden="true">#</a> Abstract</h2><p>这篇文章主要研究 <code>size_t</code> 的定义和使用，通过这篇文章，希望能做到理解 <code>size_t</code>, 这篇文章思考并解决以下问题：</p><ol><li>什么是 <code>size_t</code>?</li><li>为什么会有 <code>size_t</code>?</li><li><code>size_t</code> 的底层实现原理是什么？</li><li>我们该什么时候使用 <code>size_t</code>?</li></ol><h2 id="size-t-1" tabindex="-1"><a class="header-anchor" href="#size-t-1" aria-hidden="true">#</a> size_t</h2><blockquote><p><code>size_t</code> 是一个与机器相关的 unsigned 类型，在64位系统中为 long long unsigned int，非 64 位系统中为 long unsigned int。</p></blockquote><p>上述是百度百科对于 <code>size_t</code> 的简单说明，我在遇到 <code>size_t</code> 的时候，是在求解一个 leetcode 题目时，我调用了 <code>&lt;string.h&gt;</code> 中的 <code>strlen()</code> 函数，我是这么写的：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>此时 IDE 出现了警告：<em>Clang-Tidy: Narrowing conversion from &#39;unsigned long long&#39; to signed type &#39;int&#39; is implementation-defined.</em></p><p>然后我点进去 <code>strlen()</code> 函数的申明，在源码中如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token class-name">size_t</span> __cdecl <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>_Str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>可以发现，在源码中，<code>strlen()</code> 函数的返回类型是 <code>size_t</code> 而不是我们期望的 <code>int</code>!</p><p>在查阅资料后发现，在标准 C 库中的许多函数使用的参数或者返回值都是使用的字节表示的对象大小，比如说 <code>malloc(n)</code> 函数的参数 <code>n</code> 制定了需要申请的空间大小，我们来看 <code>malloc()</code> 函数的定义：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span>__cdecl <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> _Size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在此之前，我一直使用 <code>int</code> 类型作为这些函数的返回值。</p><p>类似的，<code>memcpy()</code> 的定义如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token keyword">const</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>也是用到了 <code>size_t</code>.</p><h3 id="why-size-t-matters" tabindex="-1"><a class="header-anchor" href="#why-size-t-matters" aria-hidden="true">#</a> why size_t matters</h3><p>why size_t matters?<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> 这篇文章讲述了 <code>size_t</code> 的重要性，本章结合这篇博文，对 <code>size_t</code> 进行一个简单的理解。</p><p><code>size_t</code> 解决了可移植问题。</p><p>我们结合 <code>memcpy()</code> 的定义来理解这个可移植性问题，我们知道 <code>memcpy(s1, s2, n)</code> 的作用是将 s2 指向地址开始的 n 个字节拷贝到 s1 指向的地址，返回 s1, 其可以拷贝任何类型。第三个参数使用 <code>size_t</code> 的好处在于，可以避免使用 int 的时候出现有符号的情况，其次 unsigned int 也可以表示更大的数据范围。在绝大部分的机器上，unsigned int 的数据范围比 int 整整大一倍。</p><p>平台可以自定义 <code>size_t</code> 的类型，int 小于等于数据线宽度，size_t 大于等于地址线宽度。</p><p>目前的 int 普遍是 32 位，而 size_t 在主流平台中都是 64 位。</p><h3 id="size-t-2" tabindex="-1"><a class="header-anchor" href="#size-t-2" aria-hidden="true">#</a> size_t</h3><ul><li><p>从命名上来看，也很直观，含义或者全程就是 &#39;size_type&#39;, 大小的类型，后面加 &#39;_t&#39; 是为了防止命名空间冲突，或者说是一个缩写。</p></li><li><p>size_t 是一种整形的类型，不管其在平台是 unsigned int 还是 unsigned long, 都是整形</p></li><li><p><code>sizeof</code> 运算的结果类型是 <code>size_t</code></p></li><li><p>类似的还有 <code>wchar_t</code>, <code>ptrdiff_t</code>; <code>ptrdiff_t</code> 表示两个指针之间的距离的数据类型。</p></li><li><p>size_t 的可能是这样的：</p></li></ul><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">size_t</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><hr class="footnotes-sep">`,29),r={class:"footnotes"},u={class:"footnotes-list"},_={id:"footnote1",class:"footnote-item"},h={href:"https://jeremybai.github.io/blog/2014/09/10/size-t",target:"_blank",rel:"noopener noreferrer"},k=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function f(g,z){const n=o("ExternalLinkIcon");return t(),c("div",null,[l,e("section",r,[e("ol",u,[e("li",_,[e("p",null,[e("a",h,[s("https://jeremybai.github.io/blog/2014/09/10/size-t"),i(n)]),s(),k])])])])])}const b=a(d,[["render",f],["__file","size_t.html.vue"]]);export{b as default};
