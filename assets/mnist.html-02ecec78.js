import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-22cda79c.js";const p={},o=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#mnist_inference.py</span>
<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

INPUT_NODE <span class="token operator">=</span> <span class="token number">784</span>
OUTPUT_NODE <span class="token operator">=</span> <span class="token number">10</span>
LAYER1_NODE <span class="token operator">=</span> <span class="token number">500</span>

<span class="token keyword">def</span> <span class="token function">get_weight_variable</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weights <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;weights&quot;</span><span class="token punctuation">,</span> shape<span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span>stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> regularizer <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>add_to_collection<span class="token punctuation">(</span><span class="token string">&#39;losses&#39;</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> weights


<span class="token keyword">def</span> <span class="token function">inference</span><span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        weights <span class="token operator">=</span> get_weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span>INPUT_NODE<span class="token punctuation">,</span> LAYER1_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span>
        biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;biases&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>LAYER1_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        layer1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> weights<span class="token punctuation">)</span> <span class="token operator">+</span> biases<span class="token punctuation">)</span>

    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        weights <span class="token operator">=</span> get_weight_variable<span class="token punctuation">(</span><span class="token punctuation">[</span>LAYER1_NODE<span class="token punctuation">,</span> OUTPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span>
        biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;biases&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>OUTPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        layer2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>layer1<span class="token punctuation">,</span> weights<span class="token punctuation">)</span> <span class="token operator">+</span> biases

    <span class="token keyword">return</span> layer2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#mnist_test.py</span>
<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf
<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>examples<span class="token punctuation">.</span>tutorials<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> input_data
<span class="token keyword">import</span> mnist_inference
<span class="token keyword">import</span> os

BATCH_SIZE <span class="token operator">=</span> <span class="token number">100</span>
LEARNING_RATE_BASE <span class="token operator">=</span> <span class="token number">0.8</span>
LEARNING_RATE_DECAY <span class="token operator">=</span> <span class="token number">0.99</span>
REGULARIZATION_RATE <span class="token operator">=</span> <span class="token number">0.0001</span>
TRAINING_STEPS <span class="token operator">=</span> <span class="token number">30000</span>
MOVING_AVERAGE_DECAY <span class="token operator">=</span> <span class="token number">0.99</span>
MODEL_SAVE_PATH <span class="token operator">=</span> <span class="token string">&quot;MNIST_model/&quot;</span>
MODEL_NAME <span class="token operator">=</span> <span class="token string">&quot;mnist_model&quot;</span>


<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>mnist<span class="token punctuation">)</span><span class="token punctuation">:</span>

    x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> mnist_inference<span class="token punctuation">.</span>INPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;x-input&#39;</span><span class="token punctuation">)</span>
    y_ <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> mnist_inference<span class="token punctuation">.</span>OUTPUT_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;y-input&#39;</span><span class="token punctuation">)</span>

    regularizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>l2_regularizer<span class="token punctuation">(</span>REGULARIZATION_RATE<span class="token punctuation">)</span>
    y <span class="token operator">=</span> mnist_inference<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>x<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span>
    global_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> trainable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>


    variable_averages <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>ExponentialMovingAverage<span class="token punctuation">(</span>MOVING_AVERAGE_DECAY<span class="token punctuation">,</span> global_step<span class="token punctuation">)</span>
    variables_averages_op <span class="token operator">=</span> variable_averages<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>trainable_variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    cross_entropy <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sparse_softmax_cross_entropy_with_logits<span class="token punctuation">(</span>logits<span class="token operator">=</span>y<span class="token punctuation">,</span> labels<span class="token operator">=</span>tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">#当分类问题只有一个正确答案时，可以使用sparse_softmax_cross_entropy_with_logits函数来加速交叉熵的计算</span>
    cross_entropy_mean <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>cross_entropy<span class="token punctuation">)</span>
    loss <span class="token operator">=</span> cross_entropy_mean <span class="token operator">+</span> tf<span class="token punctuation">.</span>add_n<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>get_collection<span class="token punctuation">(</span><span class="token string">&#39;losses&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">#总损失等于交叉熵损失和正则化损失的和</span>
    learning_rate <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>exponential_decay<span class="token punctuation">(</span>
        LEARNING_RATE_BASE<span class="token punctuation">,</span>
        global_step<span class="token punctuation">,</span>
        mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>num_examples <span class="token operator">/</span> BATCH_SIZE<span class="token punctuation">,</span> LEARNING_RATE_DECAY<span class="token punctuation">,</span>
		<span class="token comment">#过完所有的训练数据需要的迭代次数，dacay_steps和dacay_rate</span>
        staircase<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    train_step <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> global_step<span class="token operator">=</span>global_step<span class="token punctuation">)</span>
    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>control_dependencies<span class="token punctuation">(</span><span class="token punctuation">[</span>train_step<span class="token punctuation">,</span> variables_averages_op<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        train_op <span class="token operator">=</span> tf<span class="token punctuation">.</span>no_op<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;train&#39;</span><span class="token punctuation">)</span>


    saver <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Saver<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>
        tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>TRAINING_STEPS<span class="token punctuation">)</span><span class="token punctuation">:</span>
            xs<span class="token punctuation">,</span> ys <span class="token operator">=</span> mnist<span class="token punctuation">.</span>train<span class="token punctuation">.</span>next_batch<span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">)</span>
            _<span class="token punctuation">,</span> loss_value<span class="token punctuation">,</span> step <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>train_op<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> global_step<span class="token punctuation">]</span><span class="token punctuation">,</span> feed_dict<span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> xs<span class="token punctuation">,</span> y_<span class="token punctuation">:</span> ys<span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;After %d training step(s), loss on training batch is %g.&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>step<span class="token punctuation">,</span> loss_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
                saver<span class="token punctuation">.</span>save<span class="token punctuation">(</span>sess<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>MODEL_SAVE_PATH<span class="token punctuation">,</span> MODEL_NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> global_step<span class="token operator">=</span>global_step<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    mnist <span class="token operator">=</span> input_data<span class="token punctuation">.</span>read_data_sets<span class="token punctuation">(</span><span class="token string">&quot;../../../datasets/MNIST_data&quot;</span><span class="token punctuation">,</span> one_hot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    train<span class="token punctuation">(</span>mnist<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mnist.train.next_batch(batch_size)</code></p><p>可以方便使用随机梯度下降，从所有的训练数据中读取一小部分作为一个训练batch。<br> 在损失函数中，每次计算一小部分训练数据的损失函数，这一小部分数据被称之为一个<strong>batch</strong>，每次使用一个batch可以大大减少收敛所需要的迭代次数，同时可以使收敛到的结果更加接近梯度下降的效果。<br> 要很好地理解batch存在的意义，可以对比Full Batch Learning的思想；如果batch_size = 1，那么就变成了“在线学习”，在线学习难以达到收敛。所以，选择一个适当的batch size非常重要，过小可能导致不收敛，过大可能导致迭代速度过慢。</p><p>对于<strong>滑动平均模型</strong>，这是一个使模型在测试数据上更robust的方法，在采用随机梯度下降算法训练神经网络时，使用滑动平均模型在很多应用中都可以在一定程度提高数据模型在测试数据上的表现。<br> 要实现这个模型，可以使用TensorFlow提供的</p><p><code>tf.train.ExponentialMovingAverage</code></p><p>在实现时，需要提供一个衰减率(dacay)，用于控制模型的更新速度，一般dacay越大模型越趋于稳定，实际应用中一般会设置为一个很接近1的数字，使得模型可以在训练前期更新地更快。</p><h3 id="lenet实现mnist" tabindex="-1"><a class="header-anchor" href="#lenet实现mnist" aria-hidden="true">#</a> LeNet实现mnist</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf

<span class="token keyword">def</span> <span class="token function">get_weight_variable</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weights <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>
        <span class="token string">&quot;weights&quot;</span><span class="token punctuation">,</span> shape<span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span>stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> regularizer <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        tf<span class="token punctuation">.</span>add_to_collection<span class="token punctuation">(</span><span class="token string">&#39;losses&#39;</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> weights

<span class="token keyword">def</span> <span class="token function">inference</span><span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> train<span class="token punctuation">,</span> regularizer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer1-conv1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        conv1_weights <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;weight&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>
                                        <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span>stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># why [5,5,1,32] there? [卷积核高度，卷积核宽度，通道数，卷积核数量]</span>
		<span class="token comment">#conv2d:Computes a 2-D convolution given 4-D \`input\` and \`filter\` tensors.</span>
        conv1_biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>
            <span class="token string">&quot;bias&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        conv1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> conv1_weights<span class="token punctuation">,</span>
                             strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">&#39;SAME&#39;</span><span class="token punctuation">)</span>
        relu1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>bias_add<span class="token punctuation">(</span>conv1<span class="token punctuation">,</span> conv1_biases<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">#Unlike \`tf.add\`, the type of \`bias\` is allowed to differ from \`value\` in the case where both types are quantized.</span>

    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer2-pool1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        pool1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>relu1<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span>
                               <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">&#39;SAME&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer3-conv2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        conv2_weights <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;weight&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># why [5,5,32,64] there</span>
        conv2_biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>
            <span class="token string">&quot;bias&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        conv2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>relu1<span class="token punctuation">,</span> conv2_weights<span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span>
                             <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">&#39;SAME&#39;</span><span class="token punctuation">)</span>
        relu2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>bias_add<span class="token punctuation">(</span>conv2<span class="token punctuation">,</span> conv2_biases<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer4-pool2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        pool2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>relu2<span class="token punctuation">,</span> ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">[</span>
                               <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">&#39;SAME&#39;</span><span class="token punctuation">)</span>

    pool_shape <span class="token operator">=</span> pool2<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>as_list<span class="token punctuation">(</span><span class="token punctuation">)</span>
    nodes <span class="token operator">=</span> pool_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> pool_shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> pool_shape<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
    reshaped <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>pool2<span class="token punctuation">,</span> <span class="token punctuation">[</span>pool_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nodes<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer5-fc1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        fc1_weights <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span><span class="token string">&quot;weights&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>
                                      nodes<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span>stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># why there 512</span>
        <span class="token keyword">if</span> regularizer <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            tf<span class="token punctuation">.</span>add_to_collection<span class="token punctuation">(</span><span class="token string">&#39;losses&#39;</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">(</span>fc1_weights<span class="token punctuation">)</span><span class="token punctuation">)</span>
        fc1_biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>
            <span class="token string">&quot;bias&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        fc1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>reshaped<span class="token punctuation">,</span> fc1_weights<span class="token punctuation">)</span> <span class="token operator">+</span> fc1_biases<span class="token punctuation">)</span>
        <span class="token comment"># how to think about matmul</span>

        <span class="token keyword">if</span> train<span class="token punctuation">:</span>
            fc1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>fc1<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>variable_scope<span class="token punctuation">(</span><span class="token string">&#39;layer6-fc2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        fc2_weights <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>
            <span class="token string">&quot;weights&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>truncated_normal_initializer<span class="token punctuation">(</span>stddev<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> regularizer <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            tf<span class="token punctuation">.</span>add_to_collection<span class="token punctuation">(</span><span class="token string">&quot;losses&quot;</span><span class="token punctuation">,</span> regularizer<span class="token punctuation">(</span>fc2_weights<span class="token punctuation">)</span><span class="token punctuation">)</span>
        fc2_biases <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>
            <span class="token string">&quot;bias&quot;</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>constant_initializer<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        logit <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>fc1<span class="token punctuation">,</span> fc2_weights<span class="token punctuation">)</span> <span class="token operator">+</span> fc2_biases

    <span class="token keyword">return</span> logit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","mnist.html.vue"]]);export{r as default};
