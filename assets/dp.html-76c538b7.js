const n=JSON.parse('{"key":"v-1d037c54","path":"/algorithm/dp.html","title":"DP","lang":"zh-CN","frontmatter":{"description":"DP 1.1. Fibonacci 斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ... 如果设F(n）为该数列的第n项（n∈N*），那么这句话可以写成如下形式：F(n)=F(n-1)+F(n-2) 1.1.1. 递归法 Recursive approach：使用递归法，时间复杂度 O(n^2)，空间复杂度 O(n): def fib_recur(n): if n &lt; 2: return n return fib_recur(n-1) + fib_recur(n-2)","head":[["meta",{"property":"og:url","content":"https://vueblog.weigao.cc/algorithm/dp.html"}],["meta",{"property":"og:site_name","content":"WW"}],["meta",{"property":"og:title","content":"DP"}],["meta",{"property":"og:description","content":"DP 1.1. Fibonacci 斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ... 如果设F(n）为该数列的第n项（n∈N*），那么这句话可以写成如下形式：F(n)=F(n-1)+F(n-2) 1.1.1. 递归法 Recursive approach：使用递归法，时间复杂度 O(n^2)，空间复杂度 O(n): def fib_recur(n): if n &lt; 2: return n return fib_recur(n-1) + fib_recur(n-2)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Someone"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DP\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Someone\\",\\"url\\":\\"https://www.weigao.cc\\"}]}"]]},"headers":[{"level":2,"title":"1.1. Fibonacci","slug":"_1-1-fibonacci","link":"#_1-1-fibonacci","children":[{"level":3,"title":"1.1.1. 递归法","slug":"_1-1-1-递归法","link":"#_1-1-1-递归法","children":[]},{"level":3,"title":"1.1.2. 动态规划","slug":"_1-1-2-动态规划","link":"#_1-1-2-动态规划","children":[]},{"level":3,"title":"1.1.3. 记忆化搜索","slug":"_1-1-3-记忆化搜索","link":"#_1-1-3-记忆化搜索","children":[]},{"level":3,"title":"1.1.4. 使用公式","slug":"_1-1-4-使用公式","link":"#_1-1-4-使用公式","children":[]}]},{"level":2,"title":"1.2. 记忆化搜索","slug":"_1-2-记忆化搜索","link":"#_1-2-记忆化搜索","children":[{"level":3,"title":"1.2.1. 记忆化搜索概览","slug":"_1-2-1-记忆化搜索概览","link":"#_1-2-1-记忆化搜索概览","children":[]}]},{"level":2,"title":"1.3. 例题","slug":"_1-3-例题","link":"#_1-3-例题","children":[{"level":3,"title":"1.3.1. LC638 大礼包","slug":"_1-3-1-lc638-大礼包","link":"#_1-3-1-lc638-大礼包","children":[]},{"level":3,"title":"1.3.2. 跳台阶游戏","slug":"_1-3-2-跳台阶游戏","link":"#_1-3-2-跳台阶游戏","children":[]},{"level":3,"title":"1.3.3. 矩形覆盖","slug":"_1-3-3-矩形覆盖","link":"#_1-3-3-矩形覆盖","children":[]}]}],"git":{},"readingTime":{"minutes":5.66,"words":1697},"filePathRelative":"algorithm/dp.md","excerpt":"<h1> DP</h1>\\n<h2> 1.1. Fibonacci</h2>\\n<blockquote>\\n<p>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...<br>\\n如果设F(n）为该数列的第n项（n∈N*），那么这句话可以写成如下形式：F(n)=F(n-1)+F(n-2)</p>\\n</blockquote>\\n<h3> 1.1.1. 递归法</h3>\\n<p>Recursive approach：使用递归法，时间复杂度 O(n^2)，空间复杂度 O(n):</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">fib_recur</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">if</span> n <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span>  n\\n    <span class=\\"token keyword\\">return</span> fib_recur<span class=\\"token punctuation\\">(</span>n<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> fib_recur<span class=\\"token punctuation\\">(</span>n<span class=\\"token operator\\">-</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{n as data};
