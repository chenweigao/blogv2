import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as s,b as n,d as t,f as a}from"./app-22cda79c.js";const i={},r=a('<h1 id="slide-window" tabindex="-1"><a class="header-anchor" href="#slide-window" aria-hidden="true">#</a> Slide Window</h1><h2 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract" aria-hidden="true">#</a> Abstract</h2><p>双指针技术可以解决很多问题，在面试中往往能成为加分项。</p><h2 id="problems" tabindex="-1"><a class="header-anchor" href="#problems" aria-hidden="true">#</a> Problems</h2><h3 id="lc2024-考试的最大困扰度" tabindex="-1"><a class="header-anchor" href="#lc2024-考试的最大困扰度" aria-hidden="true">#</a> LC2024 考试的最大困扰度</h3>',5),u=s("p",null,[n("题目要求"),s("br"),n(' 输入：answerKey = "TFFT", k = 1')],-1),d=s("p",null,"输出：3",-1),k=s("p",null,[n(`解释：我们可以将最前面的 'T' 换成 'F' ，得到 answerKey = "FFFT" 。`),s("br"),n(` 或者，我们可以将第二个 'T' 换成 'F' ，得到 answerKey = "TFFF" 。`),s("br"),n(" 两种情况下，都有三个连续的 'F' 。")],-1),m={href:"https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam",target:"_blank",rel:"noopener noreferrer"},h=s("h3",{id:"剑指offer-57-和为-s-的连续正数序列",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#剑指offer-57-和为-s-的连续正数序列","aria-hidden":"true"},"#"),n(" 剑指offer 57 和为 S 的连续正数序列")],-1),b=s("p",null,"遇到连续序列，应当要想到双指针。",-1),v=s("blockquote",null,[s("p",null,"小明很喜欢数学,有一天他在做数学作业时,要求计算出 9~16 的和,他马上就写出了正确答案是 100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为 100 (至少包括两个数)。没多久,他就得到另一组连续正数和为 100 的序列: 18,19,20,21,22。"),s("p",null,"现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!")],-1),g=s("p",null,"这道题目在 leetcode 上也有类似的：",-1),_=s("p",null,[n("输入一个正整数 "),s("code",null,"target"),n(" ，输出所有和为 "),s("code",null,"target"),n(" 的连续正整数序列（至少含有两个数）。")],-1),y=s("p",null,"序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。",-1),f=s("p",null,[s("strong",null,"示例 1：")],-1),w=s("p",null,[n("输入：target = 9"),s("br"),n(" 输出：[[2, 3, 4],[4, 5]]")],-1),x={href:"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/",target:"_blank",rel:"noopener noreferrer"},q=a(`<p>其解法如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">1</span>
        right <span class="token operator">=</span> <span class="token number">2</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            sums <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
            <span class="token keyword">if</span> sums <span class="token operator">==</span> target<span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                right <span class="token operator">+=</span> <span class="token number">1</span>
                sums <span class="token operator">+=</span> right
            <span class="token keyword">elif</span> sums <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                right <span class="token operator">+=</span> <span class="token number">1</span>
                sums <span class="token operator">+=</span> right
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                sums <span class="token operator">-=</span> left
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到一个细节：在相等判断以后应当右移，以免陷入死循环。</p><p><code>sum1</code> 我们套入了区间求和公式：</p>`,4),L=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"s"),s("mi",null,"u"),s("mi",null,"m"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mo",null,"+"),s("mi",null,"r"),s("mo",{stretchy:"false"},")"),s("mo",null,"∗"),s("mo",{stretchy:"false"},"("),s("mi",null,"r"),s("mo",null,"−"),s("mi",null,"l"),s("mo",null,"+"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"}," sum = (l + r) * (r - l + 1) / 2 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},"/2")])])])])],-1),S=a(`<p>公式的含义是，在 <code>[l, r]</code> 区间内的区间和，(首项 + 尾项) * 项数 / 2 的原理。</p><p>我们起始的 right 从 2 开始，当区间和的值比较小的时候，我们把 right 指针右移，如果区间和比较大的时候，我们把 left 指针左移。</p><p>来一个看不懂的解法，可以慢慢理解：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> target <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment"># 最小的target应该是3 -&gt; [1, 2]</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>target<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 观察最大值为(target+1)//2，比如15最大值为8，</span>
            temp <span class="token operator">=</span> target <span class="token operator">-</span> n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
            <span class="token keyword">if</span> temp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> temp <span class="token operator">%</span> n<span class="token punctuation">:</span> <span class="token comment"># 胜哥强</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>temp <span class="token operator">//</span> n <span class="token operator">+</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="和为-s-的两个数" tabindex="-1"><a class="header-anchor" href="#和为-s-的两个数" aria-hidden="true">#</a> 和为 S 的两个数</h3><blockquote><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">FindNumbersWithSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">,</span> tsum<span class="token punctuation">)</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> <span class="token number">0</span>
        r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
            sum1 <span class="token operator">=</span> array<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>r<span class="token punctuation">]</span>
            <span class="token keyword">if</span> sum1 <span class="token operator">==</span> tsum<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            <span class="token keyword">elif</span> sum1 <span class="token operator">&gt;</span> tsum<span class="token punctuation">:</span>
                r <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                l <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> l <span class="token operator">&gt;=</span> r<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lc1513-仅含-1-的子串数" tabindex="-1"><a class="header-anchor" href="#lc1513-仅含-1-的子串数" aria-hidden="true">#</a> LC1513 仅含 1 的子串数</h3>`,8),F=a("<p>给你一个二进制字符串 s（仅由 &#39;0&#39; 和 &#39;1&#39; 组成的字符串）。</p><p>返回所有字符都为 1 的子字符串的数目。</p><p>由于答案可能很大，请你将它对 10^9 + 7 取模后返回。</p><p>示例 1：</p><p>输入：s = &quot;0110111&quot;<br> 输出：9<br> 解释：共有 9 个子字符串仅由 &#39;1&#39; 组成<br> &quot;1&quot; -&gt; 5 次<br> &quot;11&quot; -&gt; 3 次<br> &quot;111&quot; -&gt; 1 次</p>",5),C=s("br",null,null,-1),T={href:"https://leetcode-cn.com/problems/number-of-substrings-with-only-1s",target:"_blank",rel:"noopener noreferrer"},N=s("br",null,null,-1),B=s("p",null,"这个题目可以用滑动窗口，但是也存在其他巧妙的方法。",-1),I=s("h3",{id:"面试题17-18-最短超串",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#面试题17-18-最短超串","aria-hidden":"true"},"#"),n(" 面试题17.18 最短超串")],-1),V=s("p",null,[n("假设你有两个数组，一个长一个短，短的元素均不相同。找到长数组中包含短数组所有的元素的最短子数组，其出现顺序无关紧要。"),s("br"),n(" 返回最短子数组的左端点和右端点，如有多个满足条件的子数组，返回左端点最小的一个。若不存在，返回空数组。")],-1),z=s("p",null,"示例 1:",-1),E=s("p",null,"输入:",-1),K=s("p",null,"big = [7, 5, 9, 0, 2, 1, 3, 5, 7, 9, 1, 1, 5, 8, 8, 9, 7]",-1),M=s("p",null,"small = [1, 5, 9]",-1),A=s("p",null,"输出: [7, 10]",-1),P=s("br",null,null,-1),W={href:"https://leetcode-cn.com/problems/shortest-supersequence-lcci",target:"_blank",rel:"noopener noreferrer"},G=s("br",null,null,-1),O=s("p",null,"求解思路：",-1),j=s("ol",null,[s("li",null,[s("p",null,"设置右指针，然后不停滑动右指针直到满足题目的条件，右指针滑动到最右边则不存在结果")]),s("li",null,[s("p",null,"右指针位置确定后，滑动左指针，直到不满足要求")]),s("li",null,[s("p",null,"使用一个 hash_map 来记录窗口中数字出现的次数")]),s("li")],-1),D=s("h3",{id:"lc905-按奇偶排序数组",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#lc905-按奇偶排序数组","aria-hidden":"true"},"#"),n(" LC905 按奇偶排序数组")],-1),H=a("<p>给你一个整数数组 <code>nums</code>，将 <code>nums</code> 中的的所有偶数元素移动到数组的前面，后跟所有奇数元素。</p><p>返回满足此条件的 <strong>任一数组</strong> 作为答案。</p><p>示例 1：</p><p>输入：nums = [3, 1, 2, 4]<br> 输出：[2, 4, 3, 1]<br> 解释：[4, 2, 3, 1]、[2 ,4, 1, 3] 和 [4, 2, 1, 3] 也会被视作正确答案。</p>",4),J=s("br",null,null,-1),Q={href:"https://leetcode-cn.com/problems/sort-array-by-parity",target:"_blank",rel:"noopener noreferrer"},R=s("br",null,null,-1),U=a(`<p>这道题目是需要我们把<strong>所有的偶数移到奇数前面</strong>， 很容易想到双指针的解法:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sortArrayByParity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> nums
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实现这个解法的时候，需要注意以下几点：</p><ol><li>考虑到边界条件，如果 <code>nums = [0]</code> 这种情况下，双指针的适用性。我们的条件是符合的。</li><li>考虑到每次需要 <code>left +=1</code> 或者 <code>right -= 1</code>, 再加上 <code>while</code> 的判断，我们需要在每次判断的时候判断下是否越界，这点很容易忽视。</li><li>在代码第 5 行，我们判断了 <code>nums[left] % 2 == 0</code>, 也就是说，<code>left</code> 指针指向的到第 9 行代码的时候已经必然是一个奇数了，我们可以放心交换！</li></ol>`,4);function X(Y,Z){const e=o("ExternalLinkIcon");return l(),c("div",null,[r,s("blockquote",null,[u,d,k,s("p",null,[n("来源：力扣（LeetCode）链接："),s("a",m,[n("https://leetcode-cn.com/problems/maximize-the-confusion-of-an-exam"),t(e)]),n(" 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),h,b,v,g,s("blockquote",null,[_,y,f,w,s("p",null,[s("a",x,[n("剑指 Offer 57 - II. 和为s的连续正数序列"),t(e)])])]),q,L,S,s("blockquote",null,[F,s("p",null,[n("来源：力扣（LeetCode）"),C,n(" 链接："),s("a",T,[n("https://leetcode-cn.com/problems/number-of-substrings-with-only-1s"),t(e)]),N,n(" 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),B,I,s("blockquote",null,[V,z,E,K,M,A,s("p",null,[n("来源：力扣（LeetCode）"),P,n(" 链接：<"),s("a",W,[n("https://leetcode-cn.com/problems/shortest-supersequence-lcci"),t(e)]),n(">"),G,n(" 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),O,j,D,s("blockquote",null,[H,s("p",null,[n("来源：力扣（LeetCode）"),J,n(" 链接："),s("a",Q,[n("https://leetcode-cn.com/problems/sort-array-by-parity"),t(e)]),R,n(" 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),U])}const ns=p(i,[["render",X],["__file","slide_window.html.vue"]]);export{ns as default};
