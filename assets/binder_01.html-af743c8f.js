import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p,a as t,f as e}from"./app-22cda79c.js";const o={},c=t("p",null,"本文主要讲述 Binder 流程中的各个阶段，起到一个 Overview 的目的。",-1),l=e(`<h2 id="phases-overview" tabindex="-1"><a class="header-anchor" href="#phases-overview" aria-hidden="true">#</a> Phases Overview</h2><p>我们想对 binder 做性能优化（这块部分如果后续较为完善的话可以考虑独立出去），可以从几个 phase 进行分解：</p><ul><li>🐇🐇 phase 1: app to BpBinder: 从 app 到 Binder 客户端。</li><li>phase 2: BpBinder to driver</li><li>phase 3: driver send logic</li><li>🐇🐇 phase 4: driver to BBinder</li><li>🐇🐇 phase 5: BBinder to server</li><li>phase 6: server logic</li><li>phase 7: server back BBinder</li><li>phase 8: BBinder back driver</li><li>phase 9: driver reply logic</li><li>phase 10: driver back BpBinder</li><li>phase 11: BpBinder back app</li></ul><p>为方便理解，我们引用下面的图来进行参考说明。</p><p><img src="http://gityuan.com/images/binder/binder_start_service/binder_ipc_arch.jpg" alt="binder phases"></p><h2 id="phase-1" tabindex="-1"><a class="header-anchor" href="#phase-1" aria-hidden="true">#</a> Phase 1</h2><p><strong>App to BpBinder</strong>, 图中的 AMP clinet 到 BpBinder 的过程，这个过程主要发生了以下事情：</p><p>在 APP 侧，调用 <code>startService()</code>, 在调用该函数之间，会调用到其他的逻辑，我们分别给出一个 OHOS 的示例和 Android 的示例。</p><h3 id="ohos" tabindex="-1"><a class="header-anchor" href="#ohos" aria-hidden="true">#</a> OHOS</h3><p>列举了两种方式：期约和回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> rpc <span class="token keyword">from</span> <span class="token string">&quot;@ohos.rpc&quot;</span>
<span class="token comment">// 使用期约</span>

<span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rpc<span class="token punctuation">.</span>MessageOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> reply <span class="token operator">=</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 往 data 里写入参数</span>

proxy<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> option<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>errCode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;send request failed, errCode: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>errCode<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 从result.reply里读取结果</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;send request got exception: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        data<span class="token punctuation">.</span><span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        reply<span class="token punctuation">.</span><span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用期约的情况下，客户端完成了几件事情。首先是往 Parcel 对象中写入参数，而后是调用 proxy 的 sendRequest 方法，得到服务端的回复后进行处理。</p><p>我们所说的 App to BpBinder 的过程就是：客户端数据封装 –&gt; 调用 BpBinder(在 OHOS 中称作 Proxy) 提供的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用回调函数</span>
<span class="token keyword">function</span> <span class="token function">sendRequestCallback</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>errCode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;send request failed, errCode: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>errCode<span class="token punctuation">)</span>
                    <span class="token keyword">return</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 从 result.reply 里读取结果</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                result<span class="token punctuation">.</span>reply<span class="token punctuation">.</span><span class="token function">reclaim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rpc<span class="token punctuation">.</span>MessageOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> reply <span class="token operator">=</span> rpc<span class="token punctuation">.</span>MessageParcel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 往 data 里写入参数</span>
proxy<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> option<span class="token punctuation">,</span> sendRequestCallback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用回调函数的过程较为简单，直接是封装数据 –&gt; 发送请求（在我们 phase 1 的过程中）</p><h3 id="android" tabindex="-1"><a class="header-anchor" href="#android" aria-hidden="true">#</a> Android</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ComponentName</span> <span class="token function">startService</span><span class="token punctuation">(</span><span class="token class-name">IApplicationThread</span> caller<span class="token punctuation">,</span> 
                                  <span class="token class-name">Intent</span> service<span class="token punctuation">,</span> <span class="token class-name">String</span> resolvedType<span class="token punctuation">,</span> 
                                  <span class="token class-name">String</span> callingPackage<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取或创建 Parcel 对象</span>
    <span class="token class-name">Parcel</span> data <span class="token operator">=</span> <span class="token class-name">Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Parcel</span> reply <span class="token operator">=</span> <span class="token class-name">Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span><span class="token class-name">IActivityManager</span><span class="token punctuation">.</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeStrongBinder</span><span class="token punctuation">(</span>caller <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> caller<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    service<span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 写入 Parcel 数据</span>
    data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>resolvedType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>callingPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 通过 Binder 传递数据</span>
    mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token constant">START_SERVICE_TRANSACTION</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 读取应答消息的异常情况</span>
    reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据 reply 数据来创建 ComponentName 对象</span>
    <span class="token class-name">ComponentName</span> res <span class="token operator">=</span> <span class="token class-name">ComponentName</span><span class="token punctuation">.</span><span class="token function">readFromParcel</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>

    data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 JS 的过程基本上一致，挑选其中一些细节进行说明：</p><p>➡️➡️ Parcel.obtain() 完成了什么事情？从缓存池中获取一个 Parcel 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Parcel</span> <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// sOwnedPool 为 Parcel 对象的缓存池</span>
    <span class="token keyword">final</span> <span class="token class-name">Parcel</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pool <span class="token operator">=</span> sOwnedPool<span class="token punctuation">;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>pool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Parcel</span> p<span class="token punctuation">;</span>
        <span class="token comment">// POOL_SIZE = 6</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token constant">POOL_SIZE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> pool<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pool<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> p<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//当缓存池没有现成的 Parcel 对象，则直接创建</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Parcel</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 Parcel 对象的创建，我们留到 <strong>Pracel</strong> 章节进行详细说明。</p><h3 id="phase-1-summary" tabindex="-1"><a class="header-anchor" href="#phase-1-summary" aria-hidden="true">#</a> Phase 1 Summary</h3><p>🩸🩸 从上面上个场景的代码分析我们可以看出来，主要的操作耗时还是在 Pracel 过程中。在后续的研究中，我们可以看到 Pracel 对象的创建和 native world 也是息息相关的，所以这一个 phase 是存在一些优化的空间在的。</p><h2 id="phase-2" tabindex="-1"><a class="header-anchor" href="#phase-2" aria-hidden="true">#</a> Phase 2</h2><p><strong>BpBinder to driver</strong>, 这个过程主要是从客户端 native 到 driver 的过程。</p><h3 id="ohos-1" tabindex="-1"><a class="header-anchor" href="#ohos-1" aria-hidden="true">#</a> OHOS</h3><p>从上文我们了解到，客户端会调用 proxy 的 sendRequest 方法，对应的实现如下：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code></code></pre></div><h3 id="android-1" tabindex="-1"><a class="header-anchor" href="#android-1" aria-hidden="true">#</a> Android</h3><p>从上文我们了解到，客户端调用到 native 是通过 mRemote.transact 来实现的，该方法的实现如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BinderProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IBinder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">Parcel</span> data<span class="token punctuation">,</span> <span class="token class-name">Parcel</span> reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> 
        <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
        <span class="token comment">//用于检测 Parcel 大小是否大于 800k</span>
        <span class="token class-name">Binder</span><span class="token punctuation">.</span><span class="token function">checkParcel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">&quot;Unreasonably large binder buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用 native</span>
        <span class="token keyword">return</span> <span class="token function">transactNative</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个方法的功能非常简单，主要完成对 native 方法 <strong>transactNative</strong> 的调用。</p><div class="hint-container note"><p class="hint-container-title">transactNative 参数</p><p>mRemote.transact() 方法中的</p><ul><li>code: START_SERVICE_TRANSACTION,</li><li>data 保存 <code>descriptor</code>，<code>caller</code>, <code>intent</code>, <code>resolvedType</code>, <code>callingPackage</code>, <code>userId</code>这 6 项信息。</li></ul></div><p>transactNative 方法对应的 native 函数为 android_os_BinderProxy_transact.</p><blockquote><p>android_util_Binder.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> jboolean <span class="token function">android_os_BinderProxy_transact</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span>
    jint code<span class="token punctuation">,</span> jobject dataObj<span class="token punctuation">,</span> jobject replyObj<span class="token punctuation">,</span> jint flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">//将 java Parcel 转为 C++ Parcel</span>
    Parcel<span class="token operator">*</span> data <span class="token operator">=</span> <span class="token function">parcelForJavaObject</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> dataObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Parcel<span class="token operator">*</span> reply <span class="token operator">=</span> <span class="token function">parcelForJavaObject</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> replyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//gBinderProxyOffsets.mObject 中保存的是 new BpBinder(handle) 对象</span>
    IBinder<span class="token operator">*</span> target <span class="token operator">=</span> <span class="token punctuation">(</span>IBinder<span class="token operator">*</span><span class="token punctuation">)</span> env<span class="token operator">-&gt;</span><span class="token function">GetLongField</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> gBinderProxyOffsets<span class="token punctuation">.</span>mObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">//此处便是 BpBinder::transact()</span>
    status_t err <span class="token operator">=</span> target<span class="token operator">-&gt;</span><span class="token function">transact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">//最后根据 transact 执行具体情况，抛出相应的 Exception</span>
    <span class="token function">signalExceptionForError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> err<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">,</span> data<span class="token operator">-&gt;</span><span class="token function">dataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抛开无关细节，主要是调用 target-&gt;transact 方法，target 是一个 BpBinder 对象：</p><blockquote><p>BpBinder.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>status_t <span class="token class-name">BpBinder</span><span class="token double-colon punctuation">::</span><span class="token function">transact</span><span class="token punctuation">(</span>
    <span class="token keyword">uint32_t</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mAlive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        status_t status <span class="token operator">=</span> <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">transact</span><span class="token punctuation">(</span>
            mHandle<span class="token punctuation">,</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> DEAD_OBJECT<span class="token punctuation">)</span> mAlive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> DEAD_OBJECT<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数采取了单例模式，确保每个线程只有一个实例对象。主要还是调用到 IPCThreadState::transact 方法：</p><blockquote><p>IPCThreadState.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>status_t <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> handle<span class="token punctuation">,</span>
                                  <span class="token keyword">uint32_t</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span>
                                  Parcel<span class="token operator">*</span> reply<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    status_t err <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">errorCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据错误检查</span>
    flags <span class="token operator">|=</span> TF_ACCEPT_FDS<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 传输数据</span>
        err <span class="token operator">=</span> <span class="token function">writeTransactionData</span><span class="token punctuation">(</span>BC_TRANSACTION<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reply<span class="token punctuation">)</span> reply<span class="token operator">-&gt;</span><span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>mLastError <span class="token operator">=</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 默认情况下，都是采用非 oneway 的方式, 也就是需要等待服务端的返回结果、同步</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> TF_ONE_WAY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reply<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// reply 对象不为空</span>
            err <span class="token operator">=</span> <span class="token function">waitForResponse</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            Parcel fakeReply<span class="token punctuation">;</span>
            err <span class="token operator">=</span> <span class="token function">waitForResponse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fakeReply<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">waitForResponse</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常情况下会走同步模式，也就是 oneway。两个模式都会调用到 waitForResponse 函数。</p><p>在看 waitForResponse 函数之间，我们先简单说明一下 transact 的主要过程：</p><p>首先、执行 writeTransactionData（第 10 行）向 mOut 写入数据，此时 mIn 还没有数据；</p><p>然后执行 waitForResponse 方法，该方法循环执行，直到收到应答消息，此间调用 talkWithDriver 和驱动交互，收到应答消息后写入 mIn, 根据响应码分类操作。</p><p>如果我们不再往下研究的话，此时客户端视角下的通信已经完成了，而我们的 phase 2 就是到此为止。</p><p>writeTransactionData 的实现大致如下：</p><blockquote><p>IPCThreadState.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>status_t <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">writeTransactionData</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span> cmd<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> binderFlags<span class="token punctuation">,</span>
    <span class="token keyword">int32_t</span> handle<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> Parcel<span class="token operator">&amp;</span> data<span class="token punctuation">,</span> status_t<span class="token operator">*</span> statusBuffer<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    binder_transaction_data tr<span class="token punctuation">;</span>

    tr<span class="token punctuation">.</span>target<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">.</span>target<span class="token punctuation">.</span>handle <span class="token operator">=</span> handle<span class="token punctuation">;</span> <span class="token comment">// handle 指向 AMS</span>
    tr<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>            <span class="token comment">// START_SERVICE_TRANSACTION</span>
    tr<span class="token punctuation">.</span>flags <span class="token operator">=</span> binderFlags<span class="token punctuation">;</span>    <span class="token comment">// 0</span>
    tr<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">.</span>sender_pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">.</span>sender_euid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> status_t err <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">errorCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// data 为 startService 相关信息</span>
        tr<span class="token punctuation">.</span>data_size <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">ipcDataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// mDataSize</span>
        tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>buffer <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">ipcData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mData 指针</span>
        tr<span class="token punctuation">.</span>offsets_size <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">ipcObjectsCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>binder_size_t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mObjectsSize</span>
        tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>offsets <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">ipcObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mObjects 指针</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    mOut<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// cmd = BC_TRANSACTION</span>
    mOut<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 写入 binder_transaction_data数据</span>
    <span class="token keyword">return</span> NO_ERROR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>23-24 行将数据写入了 mOut, 写入的类型是 binder_transaction_data 类型。</p><p>waitForResponse 的实现大概如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>status_t <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">waitForResponse</span><span class="token punctuation">(</span>Parcel <span class="token operator">*</span>reply<span class="token punctuation">,</span> status_t <span class="token operator">*</span>acquireResult<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int32_t</span> cmd<span class="token punctuation">;</span>
    <span class="token keyword">int32_t</span> err<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token function">talkWithDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> NO_ERROR<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        err <span class="token operator">=</span> mIn<span class="token punctuation">.</span><span class="token function">errorCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> NO_ERROR<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//当存在 error 则退出循环</span>

         <span class="token comment">//每当跟 Driver 交互一次，若 mIn 收到数据则往下执行一次 BR 命令</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mIn<span class="token punctuation">.</span><span class="token function">dataAvail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

        cmd <span class="token operator">=</span> mIn<span class="token punctuation">.</span><span class="token function">readInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> BR_TRANSACTION_COMPLETE<span class="token operator">:</span>
            <span class="token comment">//只有当不需要 reply, 也就是 oneway 时才会跳出循环,否则还需要等待.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reply <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>acquireResult<span class="token punctuation">)</span> <span class="token keyword">goto</span> finish<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">case</span> BR_DEAD_REPLY<span class="token operator">:</span>
            err <span class="token operator">=</span> DEAD_OBJECT<span class="token punctuation">;</span>         <span class="token keyword">goto</span> finish<span class="token punctuation">;</span>
        <span class="token keyword">case</span> BR_FAILED_REPLY<span class="token operator">:</span>
            err <span class="token operator">=</span> FAILED_TRANSACTION<span class="token punctuation">;</span>  <span class="token keyword">goto</span> finish<span class="token punctuation">;</span>
        <span class="token keyword">case</span> BR_REPLY<span class="token operator">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">goto</span> finish<span class="token punctuation">;</span>

        <span class="token keyword">default</span><span class="token operator">:</span>
            err <span class="token operator">=</span> <span class="token function">executeCommand</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token keyword">goto</span> finish<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

finish<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reply<span class="token punctuation">)</span> reply<span class="token operator">-&gt;</span><span class="token function">setError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将发送的错误代码返回给最初的调用者</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面又引入了关键的操作：talkWithDriver 和 executeCommand;</p><p>这两者的功能是：执行 binder 读写操作，也就是 BINDER_WRITE_READ, 会经过 syscall, 进入 Binder 驱动，调用驱动中的 binder_ioctl 函数。在 default 的情况下，会调用后者；其他情况下是在 talkWithDriver 对 executeCommand 进行调用。</p><p>OK，Phase 2 到此为止。</p><h3 id="phase-2-summary" tabindex="-1"><a class="header-anchor" href="#phase-2-summary" aria-hidden="true">#</a> Phase 2 Summary</h3><p>总结一下，BpBinder 到 Binder Driver 做了什么事情？</p><p>首先，我们找到 native 层的方法，</p>`,59);function i(u,r){return s(),a("div",null,[c,p(" more "),l])}const v=n(o,[["render",i],["__file","binder_01.html.vue"]]);export{v as default};
