import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as i,c as l,e as u,d as a,a as n,b as t,f as e}from"./app-22cda79c.js";const r={},d=n("p",null,"本篇文章主要是研究 ART 虚拟机中的 native 方法相关的处理流程，凡是涉及到 native 相关的，都会在本篇文章中进行收录。",-1),k=n("ol",null,[n("li",null,"JNI 原理、基础知识"),n("li",null,"Java native 函数的定义、使用以及编译"),n("li",null,"JNI 层的实现"),n("li",null,"native 函数注册的流程、函数等")],-1),v=e('<h2 id="abstract" tabindex="-1"><a class="header-anchor" href="#abstract" aria-hidden="true">#</a> Abstract</h2><p>本文分为几个部分：</p><ol><li>第一个部分研究 <code>libcore</code> 中的一个 <code>@FastNative</code> 例子，通过这个例子简单了解 Java native 函数的基本调用流程；</li><li>native 函数的总结：分为几张图标进行说明；</li></ol><h2 id="jni" tabindex="-1"><a class="header-anchor" href="#jni" aria-hidden="true">#</a> JNI</h2><h3 id="abstract-1" tabindex="-1"><a class="header-anchor" href="#abstract-1" aria-hidden="true">#</a> Abstract</h3><p>JNI 的全称是 Java Native Interface, 通过 JNI 技术，可以做到以下几点：</p><ol><li>Java 程序中可以调用 Native 语言写的函数；一般是 C/C++ 编写的函数；</li><li>Native 程序中的函数可以调用 JAVA 层的函数；也就是说 在 C/C++ 中可以调用 JAVA 层的函数；</li></ol><p>仔细思考一下，如果引用了 JNI, 是不是就破坏了 JAVA 的平台无关性呢？其实不尽然，引入 JNI 有以下的好处：</p><ol><li>JAVA 虚拟机是由 Native 语言写的，并不是平台无关的，而 JNI 层可以对 JAVA 层屏蔽平台之间的差异，有助于实现 JAVA 本身平台无关的特性；</li><li>很多程序都用 Native 语言写的，用 JNI 就可以直接使用了，避免了重复造轮子。</li></ol><h3 id="java-world-to-native-world" tabindex="-1"><a class="header-anchor" href="#java-world-to-native-world" aria-hidden="true">#</a> JAVA World to Native World</h3><p>这个问题是萦绕在初学 JNI 的时候一个很大的问题，到底 Java 是如何调用 Native 的函数的呢？首先先看 Java 世界、JNI 世界和 Native 世界之间的关系：</p>',11),m=e(`<p>除此之外，为了方便理解，再图上增加了一个 <code>MediaScanner</code> 实例进行说明。</p><ul><li><code>MediaScanner</code> 类中的一些功能需要由 Native 层来实现</li><li>JNI 层对应 <code>media_jni</code> 库，库的名字是 <code>media</code>, <code>jni</code> 表示的是这个一个 JNI 库</li><li>Native 的 <code>libmedia.so</code> 完成了实际的功能</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// media / java / android / media / MediaScanner.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediaScanner</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加载对应的 JNI 库</span>
        <span class="token comment">// 在实际加载动态库的时候会将其拓展称为 libmedia_jni.so</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;media_jni&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用 native_init() 函数</span>
        <span class="token function">native_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ..</span>
    
    <span class="token comment">// native 函数的声明；被 native 标识的函数表示它将由 JNI 层完成</span>
    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">processDirectory</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">MediaScannerClient</span> client<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// ..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>在调用 native 函数之前，需要进行 JNI 库的加载；关于加载 JNI 库的时机，通用的做法是在类的 <code>static</code> 语句中加载，加载的方法是调用 <code>System.loadLibrary</code> 方法，需要注意 JNI 库的加载必须是在 native 函数调用之前；</li><li>JAVA 程序员调用 JNI 中的函数还需要使用 native 关键字声明函数。</li></ol><p>从上我们可以看出，JNI 的使用对于 JAVA 程序员是非常友好的。</p><h3 id="jni-层分析" tabindex="-1"><a class="header-anchor" href="#jni-层分析" aria-hidden="true">#</a> JNI 层分析</h3><p>@todo</p><h3 id="静态注册-vs-动态注册" tabindex="-1"><a class="header-anchor" href="#静态注册-vs-动态注册" aria-hidden="true">#</a> 静态注册 vs 动态注册</h3><p>@todo</p><h2 id="jni-code-analysis" tabindex="-1"><a class="header-anchor" href="#jni-code-analysis" aria-hidden="true">#</a> JNI Code Analysis</h2><p>这篇博客<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>有一个给 libcore 增加日志的例子，全流程的走了一遍 native 方法创建、注册的过程，而我们选择的例子为 <code>libcore</code> 中 JDK 的实现。</p><h3 id="java-native" tabindex="-1"><a class="header-anchor" href="#java-native" aria-hidden="true">#</a> Java Native</h3><p>Native Java 的代码如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// libcore/ojluni/src/main/java/java/lang/String.java</span>
<span class="token annotation punctuation">@FastNative</span>
<span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">getCharsNoCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>上述函数使用 <code>@FastNative</code> 注解修饰，函数声明前的 <code>native</code> 表示这是一个 native 方法。</p><p>在 <code>libcore/openjdk_java_files.bp</code> 中可以看到 <code>String.java</code> 文件，表示其在<strong>编译链</strong>中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>filegroup {
    name: &quot;openjdk_javadoc_files&quot;,
    srcs: [
        &quot;ojluni/src/main/java/java/awt/font/NumericShaper.java&quot;,
        // more code ...
        &quot;ojluni/src/main/java/java/lang/String.java&quot;,
        // ...
    ],
    path: &quot;ojluni/src/main/java&quot;,
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jni-定义" tabindex="-1"><a class="header-anchor" href="#jni-定义" aria-hidden="true">#</a> JNI 定义</h3><h4 id="register-java-lang-string" tabindex="-1"><a class="header-anchor" href="#register-java-lang-string" aria-hidden="true">#</a> register_java_lang_String</h4><p>JNI 层负责实现 <code>getCharsNoCheck</code>, 实现过后会被注册，此时就与 Java 层的 native 方法对应起来了，对于 <code>getCharsNoCheck</code> 的注册过程如下：</p><p>在 <code>.hh</code> 中：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// art/runtime/native/java_lang_String.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span>

<span class="token keyword">namespace</span> art <span class="token punctuation">{</span>

<span class="token keyword">void</span> <span class="token function">register_java_lang_String</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace art</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// ART_RUNTIME_NATIVE_JAVA_LANG_STRING_H_</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>.cc</code> 中进行注册：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">String_getCharsNoCheck</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject java_this<span class="token punctuation">,</span> jint start<span class="token punctuation">,</span> jint end<span class="token punctuation">,</span>
                                   jcharArray buffer<span class="token punctuation">,</span> jint index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ScopedFastNativeObjectAccess 中保存了 env 对象以及其所在的 Thread 对象</span>
  ScopedFastNativeObjectAccess <span class="token function">soa</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 从 soa.Self 中获取 JNIEnv 所在的线程对象</span>
  StackHandleScope<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token function">hs</span><span class="token punctuation">(</span>soa<span class="token punctuation">.</span><span class="token function">Self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取 buffer 的指针</span>
  Handle<span class="token operator">&lt;</span>mirror<span class="token double-colon punctuation">::</span>CharArray<span class="token operator">&gt;</span> <span class="token function">char_array</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">NewHandle</span><span class="token punctuation">(</span>soa<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">Decode</span><span class="token generic class-name"><span class="token operator">&lt;</span>mirror<span class="token double-colon punctuation">::</span>CharArray<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取 jobject 指针后调用 GetChars</span>
  soa<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">Decode</span><span class="token generic class-name"><span class="token operator">&lt;</span>mirror<span class="token double-colon punctuation">::</span>String<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>java_this<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetChars</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> char_array<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> JNINativeMethod gMethods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> charAt<span class="token punctuation">,</span> <span class="token string">&quot;(I)C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> compareTo<span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;)I&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> concat<span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> doReplace<span class="token punctuation">,</span> <span class="token string">&quot;(CC)Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> fastSubstring<span class="token punctuation">,</span> <span class="token string">&quot;(II)Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> getCharsNoCheck<span class="token punctuation">,</span> <span class="token string">&quot;(II[CI)V&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> intern<span class="token punctuation">,</span> <span class="token string">&quot;()Ljava/lang/String;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">FAST_NATIVE_METHOD</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> toCharArray<span class="token punctuation">,</span> <span class="token string">&quot;()[C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">register_java_lang_String</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">REGISTER_NATIVE_METHODS</span><span class="token punctuation">(</span><span class="token string">&quot;java/lang/String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，我们对 <code>register_java_lang_String</code> 进行了定义，调用这个函数就可以进行 native 函数的注册。</p><h4 id="register-native-methods" tabindex="-1"><a class="header-anchor" href="#register-native-methods" aria-hidden="true">#</a> REGISTER_NATIVE_METHODS</h4><p>对于宏 <code>REGISTER_NATIVE_METHODS</code>，其定义如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// art/runtime/native/native_util.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">REGISTER_NATIVE_METHODS</span><span class="token expression"><span class="token punctuation">(</span>jni_class_name<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">RegisterNativeMethodsInternal</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token punctuation">(</span>jni_class_name<span class="token punctuation">)</span><span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> <span class="token function">arraysize</span><span class="token punctuation">(</span>gMethods<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token punctuation">}</span>  <span class="token comment">// namespace art</span>

ALWAYS_INLINE <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">RegisterNativeMethodsInternal</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span>
                                                        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> jni_class_name<span class="token punctuation">,</span>
                                                        <span class="token keyword">const</span> JNINativeMethod<span class="token operator">*</span> methods<span class="token punctuation">,</span>
                                                        jint method_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ScopedLocalRef<span class="token operator">&lt;</span>jclass<span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> env<span class="token operator">-&gt;</span><span class="token function">FindClass</span><span class="token punctuation">(</span>jni_class_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Couldn&#39;t find class: &quot;</span> <span class="token operator">&lt;&lt;</span> jni_class_name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  jint jni_result <span class="token operator">=</span> env<span class="token operator">-&gt;</span><span class="token function">RegisterNatives</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> methods<span class="token punctuation">,</span> method_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">CHECK_EQ</span><span class="token punctuation">(</span>JNI_OK<span class="token punctuation">,</span> jni_result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说 <code>register_java_lang_String()</code> 最终是调用了 <code>RegisterNativeMethodsInternal()</code>, 传入了 class name, 全局的 gMethods, 以及计算出来的 count.</p><p>@todo log 后增加分析结果</p><p>对于宏 <code>FAST_NATIVE_METHOD</code> 我在源码中未找到其定义，但是根据其用法，不难发现，三个参数应该分别是：类名（函数指针）、函数名、函数参数和返回值（signature）。</p><p>那么接下来的问题就只剩下：是谁调用了 <code>register_java_lang_String()</code> 进行了 native 函数的注册呢？我们进行下一章节的旅程。</p><h3 id="jni-注册" tabindex="-1"><a class="header-anchor" href="#jni-注册" aria-hidden="true">#</a> JNI 注册</h3><h4 id="initnativemethods" tabindex="-1"><a class="header-anchor" href="#initnativemethods" aria-hidden="true">#</a> InitNativeMethods</h4><p>除此之外，我们搜索全局的<code>register_java_lang_String</code> 发现，还在一处出现：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// art/runtime/runtime.cc</span>
<span class="token keyword">void</span> <span class="token class-name">Runtime</span><span class="token double-colon punctuation">::</span><span class="token function">RegisterRuntimeNativeMethods</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">register_dalvik_system_DexFile</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
  <span class="token function">register_java_lang_String</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">register_java_lang_StringFactory</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个函数的调用也是在这个文件中的 <code>InitNativeMethods</code> 函数（这个文件比较重要，所以全部列举出来了）：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">Runtime</span><span class="token double-colon punctuation">::</span><span class="token function">InitNativeMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">VLOG</span><span class="token punctuation">(</span>startup<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Runtime::InitNativeMethods entering&quot;</span><span class="token punctuation">;</span>
  Thread<span class="token operator">*</span> self <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token double-colon punctuation">::</span><span class="token function">Current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  JNIEnv<span class="token operator">*</span> env <span class="token operator">=</span> self<span class="token operator">-&gt;</span><span class="token function">GetJniEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Must be in the kNative state for calling native methods (JNI_OnLoad code).</span>
  <span class="token function">CHECK_EQ</span><span class="token punctuation">(</span>self<span class="token operator">-&gt;</span><span class="token function">GetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kNative<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Set up the native methods provided by the runtime itself.</span>
  <span class="token function">RegisterRuntimeNativeMethods</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialize classes used in JNI. The initialization requires runtime native</span>
  <span class="token comment">// methods to be loaded first.</span>
  <span class="token class-name">WellKnownClasses</span><span class="token double-colon punctuation">::</span><span class="token function">Init</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Then set up libjavacore / libopenjdk / libicu_jni ,which are just</span>
  <span class="token comment">// a regular JNI libraries with a regular JNI_OnLoad. Most JNI libraries can</span>
  <span class="token comment">// just use System.loadLibrary, but libcore can&#39;t because it&#39;s the library</span>
  <span class="token comment">// that implements System.loadLibrary!</span>
  <span class="token comment">//</span>
  <span class="token comment">// By setting calling class to java.lang.Object, the caller location for these</span>
  <span class="token comment">// JNI libs is core-oj.jar in the ART APEX, and hence they are loaded from the</span>
  <span class="token comment">// com_android_art linker namespace.</span>

  <span class="token comment">// libicu_jni has to be initialized before libopenjdk{d} due to runtime dependency from</span>
  <span class="token comment">// libopenjdk{d} to Icu4cMetadata native methods in libicu_jni. See http://b/143888405</span>
  <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string error_msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>java_vm_<span class="token operator">-&gt;</span><span class="token function">LoadNativeLibrary</span><span class="token punctuation">(</span>
          env<span class="token punctuation">,</span> <span class="token string">&quot;libicu_jni.so&quot;</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> WellKnownClasses<span class="token double-colon punctuation">::</span>java_lang_Object<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LoadNativeLibrary failed for \\&quot;libicu_jni.so\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> error_msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string error_msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>java_vm_<span class="token operator">-&gt;</span><span class="token function">LoadNativeLibrary</span><span class="token punctuation">(</span>
          env<span class="token punctuation">,</span> <span class="token string">&quot;libjavacore.so&quot;</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> WellKnownClasses<span class="token double-colon punctuation">::</span>java_lang_Object<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LoadNativeLibrary failed for \\&quot;libjavacore.so\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> error_msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> kOpenJdkLibrary <span class="token operator">=</span> kIsDebugBuild
                                                <span class="token operator">?</span> <span class="token string">&quot;libopenjdkd.so&quot;</span>
                                                <span class="token operator">:</span> <span class="token string">&quot;libopenjdk.so&quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string error_msg<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>java_vm_<span class="token operator">-&gt;</span><span class="token function">LoadNativeLibrary</span><span class="token punctuation">(</span>
          env<span class="token punctuation">,</span> kOpenJdkLibrary<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> WellKnownClasses<span class="token double-colon punctuation">::</span>java_lang_Object<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">LOG</span><span class="token punctuation">(</span>FATAL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LoadNativeLibrary failed for \\&quot;&quot;</span> <span class="token operator">&lt;&lt;</span> kOpenJdkLibrary <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> error_msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Initialize well known classes that may invoke runtime native methods.</span>
  <span class="token class-name">WellKnownClasses</span><span class="token double-colon punctuation">::</span><span class="token function">LateInit</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// check startup module ready 后再打印日志</span>
  <span class="token function">VLOG</span><span class="token punctuation">(</span>startup<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Runtime::InitNativeMethods exiting&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第 10 行调用了 <code>RegisterRuntimeNativeMethods</code>, 后面的很多过程也很重要，我们后续再进行研究。</p><div class="hint-container tip"><p class="hint-container-title">Runtime::InitNativeMethods entering</p><p>注意到有一行日志 <code>VLOG(startup) &lt;&lt; &quot;Runtime::InitNativeMethods entering&quot;;</code>, 我们可以通过在日志中查找是否有这个对应的打印来确定启动的时候是否调用到了这个流程（因为调用链还涉及到很多非常复杂的过程，所以我们可以通过这个方式来进行验证）</p><p>@todo 验证后填写结论</p></div><h4 id="runtime-start" tabindex="-1"><a class="header-anchor" href="#runtime-start" aria-hidden="true">#</a> Runtime::Start</h4><p>而<code>InitNativeMethods</code> 函数在 <code>Runtime::Start()</code> 中被调用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">Runtime</span><span class="token double-colon punctuation">::</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...code </span>

  <span class="token comment">// InitNativeMethods needs to be after started_ so that the classes</span>
  <span class="token comment">// it touches will have methods linked to the oat file if necessary.</span>
  <span class="token punctuation">{</span>
    ScopedTrace <span class="token function">trace2</span><span class="token punctuation">(</span><span class="token string">&quot;InitNativeMethods&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">InitNativeMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// .. code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的过程就是涉及到 JVM 进程的启动等知识了。</p><hr class="footnotes-sep">`,45),b={class:"footnotes"},h={class:"footnotes-list"},g={id:"footnote1",class:"footnote-item"},_={href:"https://blog.csdn.net/u011426115/article/details/113032671",target:"_blank",rel:"noopener noreferrer"},f=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function N(j,I){const o=s("Mermaid"),p=s("ExternalLinkIcon");return i(),l("div",null,[d,k,u(" more "),v,a(o,{id:"mermaid-86",code:"eJxLL0osyFAIceFSUHDW8HIMc1R4smPa86k9mrq6dgouGl5+ngpPNzZpKoC4rhp+iSWZZakwJSA9hhq+qSmZicHJiXl5qUUQdS6GGjmZSbkg8fisvEy94nyofoQ4SIwLADWPKOg="}),m,n("section",b,[n("ol",h,[n("li",g,[n("p",null,[n("a",_,[t("Java核心库libcore中添加Log接口任意调用（Android10）"),a(p)]),t(),f])])])])])}const A=c(r,[["render",N],["__file","art_jni.html.vue"]]);export{A as default};
