import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as k,c as d,d as a,w as e,a as n,b as s,f as l}from"./app-22cda79c.js";const b={},v=l(`<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>kernel 侧实现：kernel/linux-5.10/drivers/android/binder.c</p><p>native 侧实现：system/libhwbinder</p><p>💯💯 本文主要是针对 binder 的理解进行的行为，代码列举和文字之间关联度不高，如果想了解原理但是不想对代码进行走读的，可以跳过代码解析的部分，以免陷入太多的细节。</p><h2 id="ipc-通信" tabindex="-1"><a class="header-anchor" href="#ipc-通信" aria-hidden="true">#</a> IPC 通信</h2><p>binder 相比于传统的 IPC 通信拥有比较大的优势：其只需要进行一次拷贝。IPC 通信的原理大致如下：</p><h2 id="binder-线程池" tabindex="-1"><a class="header-anchor" href="#binder-线程池" aria-hidden="true">#</a> Binder 线程池</h2><p>关于 binder 线程是如何管理，binder 线程池是如何创建的？在 Android 中，不管是 app 进程，还是 system_server 进程，都是在进程 fork 完成以后，在新进程中执行 <code>onZygoteInit()</code> 函数的过程中，启动创建 binder 线程池。</p><p>线程池创建好之后，就可以使用 binder 线程了，通常而言，binder 线程的命名格式为 <code>binder_x</code>, 通过 <code>spawnPooledThread</code> 方法创建<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。</p><p>binder 线程可以分为主线程和普通线程，还有一种其他的 binder 线程：</p><ol><li>主线程：进程创建过程中调用 <code>startThreadPool()</code> 再进入 <code>spawnPooledThread(true)</code>, 创建 binder 主线程，名称是 binder_PID_1, 这个主线程不会退出</li><li>普通线程：Binder Driver 根据是否有空闲的 binder 线程来决定是否创建 binder 线程，回调 <code>spawnPooledThread(false)</code>, false 表示不是主线程</li><li>其他线程：没有通过 <code>spawnPooledThread</code> 方法，而是直接调用 <code>IPC.joinThreadPool()</code>, 将当前线程加入 binder 线程队列（默认的参数 isMain 是 true）。</li></ol><h3 id="startthreadpool" tabindex="-1"><a class="header-anchor" href="#startthreadpool" aria-hidden="true">#</a> startThreadPool()</h3><blockquote><p>system/libhwbinder/ProcessState.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">ProcessState</span><span class="token double-colon punctuation">::</span><span class="token function">startThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    AutoMutex <span class="token function">_l</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 多线程同步</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mThreadPoolStarted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mThreadPoolStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mSpawnThreadOnStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">spawnPooledThread</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mThreadPoolStarted</code> 保证每个进程只会启动一个 binder 线程池；然后我们调用 <code>spawnPooledThread(true)</code>;</p><h4 id="spawnpooledthread" tabindex="-1"><a class="header-anchor" href="#spawnpooledthread" aria-hidden="true">#</a> spawnPooledThread()</h4><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">ProcessState</span><span class="token double-colon punctuation">::</span><span class="token function">spawnPooledThread</span><span class="token punctuation">(</span><span class="token keyword">bool</span> isMain<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mThreadPoolStarted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String8 name <span class="token operator">=</span> <span class="token function">makeBinderThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">ALOGV</span><span class="token punctuation">(</span><span class="token string">&quot;Spawning new pooled thread, name=%s\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sp<span class="token operator">&lt;</span>Thread<span class="token operator">&gt;</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">PoolThread</span><span class="token punctuation">(</span>isMain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol><li>给 binder 线程起名，名称是 <code>name.appendFormat(&quot;HwBinder:%d_%X&quot;, pid, s);</code>, 其中 <code>s</code> 表示一个原子的计数</li><li>创建 <code>PoolThread</code> 并运行，我们下面研究这个函数。</li></ol><h4 id="poolthread" tabindex="-1"><a class="header-anchor" href="#poolthread" aria-hidden="true">#</a> PoolThread</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">PoolThread</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Thread</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">PoolThread</span><span class="token punctuation">(</span><span class="token keyword">bool</span> isMain<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">mIsMain</span><span class="token punctuation">(</span>isMain<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">threadLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">joinThreadPool</span><span class="token punctuation">(</span>mIsMain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token keyword">bool</span> mIsMain<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从函数名看起来是创建线程池，其实就只是创建一个线程，该 PoolThread 继承 Thread 类。<code>t-&gt;run()</code> 方法最终调用 PoolThread 的 threadLoop() 方法。</p><p>这段函数的重点就是 <code>joinThreadPool</code>, 我们下个章节进行详细的分析。</p><h4 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h4><p>总结一下 <code>startThreadPool</code> 这个函数，其本质上就是调用 <code>joinThreadPool</code> 函数进行 binder 线程池的创建，为了达到这个目的，其做了以下事情：</p><ol><li>多线程同步</li><li>binder 线程命名</li><li>创建 binder 线程并加入线程池</li></ol><h3 id="ipc-jointhreadpool" tabindex="-1"><a class="header-anchor" href="#ipc-jointhreadpool" aria-hidden="true">#</a> IPC.joinThreadPool()</h3><p>该函数时 Android framework 中负责讲 binder 线程加入线程池的函数。</p><p>当应用程序需要与另一个进程通信时，可以通过 Binder 技术创建一个 Binder 代理对象，并在该对象上调用<strong>远程方法</strong>以实现跨进程通信。在服务端，每个 Binder 代理对象对应一个 IBinder 接口的实现类，通过这个实现类与客户端进行交互。</p><p>客户端向服务端发起请求时，请求会发送到服务端的线程池中等待处理。服务端的线程池是由 <code>IPCThreadState </code> 类维护的，当服务端的进程启动时，IPCThreadState 创建了一个名为 &quot;Binder:xxx_xxx&quot; 的 binder 线程，并将其加入到默认的 Handler 线程池中。客户端请求到达服务端后，它会被分配给 Handler 线程池中的某个线程进行处理。</p><p>而 <code>joinThreadPool(bool isMain)</code> 函数就是将当前线程加入到 Binder 线程池中，以便在服务端接收客户端请求时能够被分配到该线程处理。参数 isMain 指示是否将当前线程作为主线程加入到线程池中，如果是，则当前线程将开始处理消息循环。否则，它将被加入到线程池中等待任务分配。</p><h4 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code" aria-hidden="true">#</a> source code</h4><blockquote><p>system/libhwbinder/IPCThreadState.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">joinThreadPool</span><span class="token punctuation">(</span><span class="token keyword">bool</span> isMain<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//创建Binder线程</span>
    mOut<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span>isMain <span class="token operator">?</span> BC_ENTER_LOOPER <span class="token operator">:</span> BC_REGISTER_LOOPER<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_sched_policy</span><span class="token punctuation">(</span>mMyThreadId<span class="token punctuation">,</span> SP_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置前台调度策略</span>

    status_t result<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token function">processPendingDerefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清除队列的引用[</span>
        result <span class="token operator">=</span> <span class="token function">getAndExecuteCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//处理下一条指令</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> NO_ERROR <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> TIMED_OUT
                <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> <span class="token operator">-</span>ECONNREFUSED <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> <span class="token operator">-</span>EBADF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> TIMED_OUT <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isMain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">////非主线程出现timeout则线程退出</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token operator">-</span>ECONNREFUSED <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> <span class="token operator">-</span>EBADF<span class="token punctuation">)</span><span class="token punctuation">;</span>

    mOut<span class="token punctuation">.</span><span class="token function">writeInt32</span><span class="token punctuation">(</span>BC_EXIT_LOOPER<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线程退出循环</span>
    <span class="token function">talkWithDriver</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false代表bwr数据的read_buffer为空</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mOut.writeInt32(isMain ? BC_ENTER_LOOPER : BC_REGISTER_LOOPER);</code> 如果是主线程的话，则 <strong>BC_ENTER_LOOPER</strong>; 此时的状态是： mOut 中有值，mIn 是空。我们看接下来的 <code>result = getAndExecuteCommand();</code> 是怎么处理这种 case 的。</p><h4 id="getandexecutecommand" tabindex="-1"><a class="header-anchor" href="#getandexecutecommand" aria-hidden="true">#</a> getAndExecuteCommand()</h4><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>status_t <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">getAndExecuteCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    status_t result<span class="token punctuation">;</span>
    <span class="token keyword">int32_t</span> cmd<span class="token punctuation">;</span>

    result <span class="token operator">=</span> <span class="token function">talkWithDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//与binder进行交互</span>
    <span class="token comment">// ... 省略这部分代码，暂时不关注</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们可以看到，这个时候调用了 <code>talkWithDriver()</code> 函数。</p><h4 id="talkwithdriver" tabindex="-1"><a class="header-anchor" href="#talkwithdriver" aria-hidden="true">#</a> talkWithDriver()</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// mOut有数据，mIn还没有数据 doReceive默认值为true</span>
status_t <span class="token class-name">IPCThreadState</span><span class="token double-colon punctuation">::</span><span class="token function">talkWithDriver</span><span class="token punctuation">(</span><span class="token keyword">bool</span> doReceive<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    binder_write_read bwr<span class="token punctuation">;</span>
    
    <span class="token comment">// This is what we&#39;ll read.</span>
    <span class="token comment">// 是读写场景中的哪个？</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>doReceive <span class="token operator">&amp;&amp;</span> needRead<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bwr<span class="token punctuation">.</span>read_size <span class="token operator">=</span> mIn<span class="token punctuation">.</span><span class="token function">dataCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bwr<span class="token punctuation">.</span>read_buffer <span class="token operator">=</span> <span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span>mIn<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        bwr<span class="token punctuation">.</span>read_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        bwr<span class="token punctuation">.</span>read_buffer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
    
    <span class="token comment">// 当同时没有输入和输出数据则直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bwr<span class="token punctuation">.</span>write_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bwr<span class="token punctuation">.</span>read_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> NO_ERROR<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    bwr<span class="token punctuation">.</span>write_size <span class="token operator">=</span> outAvail<span class="token punctuation">;</span>
    bwr<span class="token punctuation">.</span>write_buffer <span class="token operator">=</span> <span class="token punctuation">(</span>uintptr_t<span class="token punctuation">)</span>mOut<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token comment">//ioctl执行binder读写操作，经过syscall，进入Binder驱动。调用Binder_ioctl</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>mProcess<span class="token operator">-&gt;</span>mDriverFD<span class="token punctuation">,</span> BINDER_WRITE_READ<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bwr<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            err <span class="token operator">=</span> NO_ERROR<span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token operator">-</span>EINTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的分析中我们知道，我们需要处理 <code>mOut</code> 中写入的命令，所以前面的判断逻辑根据这个来走读。主要关注 do..while 循环中的 <code>ioctl</code>: 我们可以看到，此时是把我们上面写的 <code>BC_ENTER_LOOPER</code> 发送给了 binder 驱动，对 binder 驱动而言，就是调用到 <code>binder_thread_write</code> 来进行处理了。</p><h2 id="binder-application-layer" tabindex="-1"><a class="header-anchor" href="#binder-application-layer" aria-hidden="true">#</a> Binder Application Layer</h2><p>本篇主要讲述在应用层，binder 是如何体现出来的。</p><h2 id="binder-framework-native" tabindex="-1"><a class="header-anchor" href="#binder-framework-native" aria-hidden="true">#</a> Binder Framework &amp; Native</h2><p>本章主要讲述在 Framework 和 native 层，binder 的实现。</p><h3 id="bbinder" tabindex="-1"><a class="header-anchor" href="#bbinder" aria-hidden="true">#</a> BBinder</h3><p>也叫做 Base Binder, 是 Binder 通信机制的基类。</p><p>BBinder 是 Binder 通信机制的基类，它实现了 IBinder 接口并提供了一些基本的 Binder 功能。</p><p>BBinder 可以作为服务端的基类，开发者可以继承 BBinder 来创建自定义的 Binder 服务端对象。</p><p>BBinder 提供了一些方法来处理跨进程通信的底层细节，如线程同步、Parcel 数据封装等。</p><h3 id="bpbinder" tabindex="-1"><a class="header-anchor" href="#bpbinder" aria-hidden="true">#</a> BpBinder</h3><p>也叫做 Proxy Binder。</p><p>BpBinder 是 Binder 通信机制的代理类，它通过代理方式与远程的 Binder 通信。</p><p>BpBinder 通过向系统的 Binder 驱动发送请求，将请求转发给远程的 Binder 服务端对象，并将响应结果返回给调用方。</p><p>BpBinder 通常作为客户端使用，它隐藏了与底层 Binder 通信的复杂性，提供了简单的接口供开发者使用。</p><h2 id="binder-driver" tabindex="-1"><a class="header-anchor" href="#binder-driver" aria-hidden="true">#</a> Binder Driver</h2><h3 id="binder-ioctl" tabindex="-1"><a class="header-anchor" href="#binder-ioctl" aria-hidden="true">#</a> binder_ioctl()</h3><p>binder_ioctl() 函数是 native 层调用下来之后的第一个函数，其重要性自然不言而喻。</p><p>在上层我们使用 ioclt 调用到 binder 设备，类似于：</p><blockquote><p>ipc/native/src/mock/source/binder_connector.cpp</p></blockquote><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// bool BinderConnector::OpenDriver()</span>
<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> BINDER_VERSION<span class="token punctuation">,</span> <span class="token operator">&amp;</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其中 fd 表示 binder 的文件设备，通过 open() 系统调用打开：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token comment">// bool BinderConnector::OpenDriver()</span>
<span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>deviceName_<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其中 deviceName_ 是：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// binder_connector.cpp</span>
<span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>DRIVER_NAME <span class="token operator">=</span> <span class="token string">&quot;/dev/binder&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>也就是说，我们通过 fd 文件设备，打开 binder 设备，调用到了 binder deriver 中。</p><p>在 binder driver 中，会先去调用 binder_ioctl() 函数，那么，上层的设备是如何与该入口函数对应起来的呢？</p><blockquote><p>drivers/android/binder.c</p></blockquote><ol><li><p>在 init binder 的时候，指定 binder 设备对应的 fops:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">init_binder_device</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    
	<span class="token keyword">struct</span> <span class="token class-name">binder_device</span> <span class="token operator">*</span>binder_device<span class="token punctuation">;</span>

	binder_device <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>binder_device<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>

	binder_device<span class="token operator">-&gt;</span>miscdev<span class="token punctuation">.</span>fops <span class="token operator">=</span> <span class="token operator">&amp;</span>binder_fops<span class="token punctuation">;</span>
	
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义 binder_fops:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> binder_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>poll <span class="token operator">=</span> binder_poll<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> binder_ioctl<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>compat_ioctl <span class="token operator">=</span> compat_ptr_ioctl<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>mmap <span class="token operator">=</span> binder_mmap<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>open <span class="token operator">=</span> binder_open<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>flush <span class="token operator">=</span> binder_flush<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>release <span class="token operator">=</span> binder_release<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>may_pollfree <span class="token operator">=</span> true<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在结构体 binder_fops 的定义中，第 4 行代码指向了 binder_ioctl() 函数。</p></li></ol><p>如此一来，我们就将 native 层的 ioctl() 和 driver 层的函数进行了对应。</p><p>在 binder_ioctl() 中，我们可以根据上层传入的 cmd 进行相对应的操作：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">binder_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
	thread <span class="token operator">=</span> <span class="token function">binder_get_thread</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> BINDER_WRITE_READ<span class="token operator">:</span>
		ret <span class="token operator">=</span> <span class="token function">binder_ioctl_write_read</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> BINDER_SET_MAX_THREADS<span class="token operator">:</span> 
            
	<span class="token keyword">case</span> BINDER_SET_CONTEXT_MGR_EXT<span class="token operator">:</span> 
            
	<span class="token keyword">case</span> BINDER_SET_CONTEXT_MGR<span class="token operator">:</span>
		<span class="token comment">// ..</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我们经常会使用到的 <code>BINDER_WRITE_READ</code> 命令，根据这个命令调用到 binder_ioctl_write_read() 中去，最终实现 driver 层的功能。</p><div class="hint-container tip"><p class="hint-container-title">One More Thing</p><p>在 binder driver 这个章节中，我们还会从各个角度深入分析 binder_ioctl() 函数。让我们拭目以待。</p></div><h3 id="binder-transaction" tabindex="-1"><a class="header-anchor" href="#binder-transaction" aria-hidden="true">#</a> binder_transaction()</h3><blockquote><p>drivers/staging/android/binder.c</p></blockquote><p>BC_TRANSACTION（会调用 binder_transaction() 函数） 简单来说流程如下：</p><ol><li>找到目标进程或线程。</li><li>将用户空间的数据拷贝到目前进程空间，并解析 flat_binder_object。</li><li>将传输入栈到当前线程中。</li><li>将 BINDER_WORK_TRANSACTION 加入到目标队列，将 BINDER_WORK_TRANSACTION_COMPLETE 加入到当前线程队列。</li><li>唤醒目标进程或线程进行处理。</li></ol><p>接下来，我们需要分析一下这个重要函数的源码：</p>`,78),m=n("div",{class:"language-c","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"binder_transaction"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_proc"),s(),n("span",{class:"token operator"},"*"),s("proc"),n("span",{class:"token punctuation"},","),s(`
                   `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_thread"),s(),n("span",{class:"token operator"},"*"),s("thread"),n("span",{class:"token punctuation"},","),s(`
                   `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_transaction_data"),s(),n("span",{class:"token operator"},"*"),s("tr"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" reply"),n("span",{class:"token punctuation"},")"),s(`
`)])])],-1),_=n("p",null,[s("上述为函数的定义，函数细节请看详细分析: details"),n("sup",{class:"footnote-ref"},[n("a",{href:"#footnote2"},"[2]"),n("a",{class:"footnote-anchor",id:"footnote-ref2"})]),s("。")],-1),f=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"binder_transaction"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_proc"),s(),n("span",{class:"token operator"},"*"),s("proc"),n("span",{class:"token punctuation"},","),s(`
                   `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_thread"),s(),n("span",{class:"token operator"},"*"),s("thread"),n("span",{class:"token punctuation"},","),s(`
                   `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_transaction_data"),s(),n("span",{class:"token operator"},"*"),s("tr"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" reply"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("reply"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tr"),n("span",{class:"token operator"},"->"),s("target"),n("span",{class:"token punctuation"},"."),s("handle"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 根据handle找到相应的binder实体"),s(`
            `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_ref"),s(),n("span",{class:"token operator"},"*"),s("ref"),n("span",{class:"token punctuation"},";"),s(`
            ref `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"binder_get_ref"),n("span",{class:"token punctuation"},"("),s("proc"),n("span",{class:"token punctuation"},","),s(" tr"),n("span",{class:"token operator"},"->"),s("target"),n("span",{class:"token punctuation"},"."),s("handle"),n("span",{class:"token punctuation"},","),s(" true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            target_node `),n("span",{class:"token operator"},"="),s(" ref"),n("span",{class:"token operator"},"->"),s("node"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// handle为0时为service manager的binder实体"),s(`
            target_node `),n("span",{class:"token operator"},"="),s(" binder_context_mgr_node"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        e`),n("span",{class:"token operator"},"->"),s("to_node "),n("span",{class:"token operator"},"="),s(" target_node"),n("span",{class:"token operator"},"->"),s("debug_id"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// binder实体的binder_proc"),s(`
        target_proc `),n("span",{class:"token operator"},"="),s(" target_node"),n("span",{class:"token operator"},"->"),s("proc"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),n("span",{class:"token punctuation"},"("),s("tr"),n("span",{class:"token operator"},"->"),s("flags "),n("span",{class:"token operator"},"&"),s(" TF_ONE_WAY"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(" thread"),n("span",{class:"token operator"},"->"),s("transaction_stack"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_transaction"),s(),n("span",{class:"token operator"},"*"),s("tmp"),n("span",{class:"token punctuation"},";"),s(`
            tmp `),n("span",{class:"token operator"},"="),s(" thread"),n("span",{class:"token operator"},"->"),s("transaction_stack"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            `),n("span",{class:"token comment"},"// 如果是同步传输，寻找是否传输栈中是否有来自对端的传输，如果有就使用对端线程处理传输"),s(`
            `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("tmp"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tmp"),n("span",{class:"token operator"},"->"),s("from "),n("span",{class:"token operator"},"&&"),s(" tmp"),n("span",{class:"token operator"},"->"),s("from"),n("span",{class:"token operator"},"->"),s("proc "),n("span",{class:"token operator"},"=="),s(" target_proc"),n("span",{class:"token punctuation"},")"),s(`
                    target_thread `),n("span",{class:"token operator"},"="),s(" tmp"),n("span",{class:"token operator"},"->"),s("from"),n("span",{class:"token punctuation"},";"),s(`
                tmp `),n("span",{class:"token operator"},"="),s(" tmp"),n("span",{class:"token operator"},"->"),s("from_parent"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 找到对端线程这使用线程todo list，否则使用进程todo list"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target_thread"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        e`),n("span",{class:"token operator"},"->"),s("to_thread "),n("span",{class:"token operator"},"="),s(" target_thread"),n("span",{class:"token operator"},"->"),s("pid"),n("span",{class:"token punctuation"},";"),s(`
        target_list `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("target_thread"),n("span",{class:"token operator"},"->"),s("todo"),n("span",{class:"token punctuation"},";"),s(`
        target_wait `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("target_thread"),n("span",{class:"token operator"},"->"),s("wait"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
        target_list `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("target_proc"),n("span",{class:"token operator"},"->"),s("todo"),n("span",{class:"token punctuation"},";"),s(`
        target_wait `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("target_proc"),n("span",{class:"token operator"},"->"),s("wait"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    e`),n("span",{class:"token operator"},"->"),s("to_proc "),n("span",{class:"token operator"},"="),s(" target_proc"),n("span",{class:"token operator"},"->"),s("pid"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 分配binder transaction"),s(`
    t `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"kzalloc"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("t"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" GFP_KERNEL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token comment"},"// 分配binder_work用于处理传输完成"),s(`
    tcomplete `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"kzalloc"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("tcomplete"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" GFP_KERNEL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token comment"},"// 同步的非reply传输，设置当前线程为from"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("reply "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token punctuation"},"("),s("tr"),n("span",{class:"token operator"},"->"),s("flags "),n("span",{class:"token operator"},"&"),s(" TF_ONE_WAY"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        t`),n("span",{class:"token operator"},"->"),s("from "),n("span",{class:"token operator"},"="),s(" thread"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
        t`),n("span",{class:"token operator"},"->"),s("from "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("sender_euid "),n("span",{class:"token operator"},"="),s(" proc"),n("span",{class:"token operator"},"->"),s("tsk"),n("span",{class:"token operator"},"->"),s("cred"),n("span",{class:"token operator"},"->"),s("euid"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 设置传输的目标进程和线程"),s(`
    t`),n("span",{class:"token operator"},"->"),s("to_proc "),n("span",{class:"token operator"},"="),s(" target_proc"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("to_thread "),n("span",{class:"token operator"},"="),s(" target_thread"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("code "),n("span",{class:"token operator"},"="),s(" tr"),n("span",{class:"token operator"},"->"),s("code"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("flags "),n("span",{class:"token operator"},"="),s(" tr"),n("span",{class:"token operator"},"->"),s("flags"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("priority "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"task_nice"),n("span",{class:"token punctuation"},"("),s("current"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    
    `),n("span",{class:"token comment"},"// 从目标进程中分配传输空间"),s(`
    t`),n("span",{class:"token operator"},"->"),s("buffer "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"binder_alloc_buf"),n("span",{class:"token punctuation"},"("),s("target_proc"),n("span",{class:"token punctuation"},","),s(" tr"),n("span",{class:"token operator"},"->"),s("data_size"),n("span",{class:"token punctuation"},","),s(`
        tr`),n("span",{class:"token operator"},"->"),s("offsets_size"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"!"),s("reply "),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("flags "),n("span",{class:"token operator"},"&"),s(" TF_ONE_WAY"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    t`),n("span",{class:"token operator"},"->"),s("buffer"),n("span",{class:"token operator"},"->"),s("allow_user_free "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("buffer"),n("span",{class:"token operator"},"->"),s("debug_id "),n("span",{class:"token operator"},"="),s(" t"),n("span",{class:"token operator"},"->"),s("debug_id"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("buffer"),n("span",{class:"token operator"},"->"),s("transaction "),n("span",{class:"token operator"},"="),s(" t"),n("span",{class:"token punctuation"},";"),s(`
    t`),n("span",{class:"token operator"},"->"),s("buffer"),n("span",{class:"token operator"},"->"),s("target_node "),n("span",{class:"token operator"},"="),s(" target_node"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 增加binder实体的引用计数"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target_node"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"binder_inc_node"),n("span",{class:"token punctuation"},"("),s("target_node"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    offp `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"binder_size_t"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("buffer"),n("span",{class:"token operator"},"->"),s("data "),n("span",{class:"token operator"},"+"),s(`
                 `),n("span",{class:"token function"},"ALIGN"),n("span",{class:"token punctuation"},"("),s("tr"),n("span",{class:"token operator"},"->"),s("data_size"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 拷贝用户数据到binder实体的传输空间中"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"copy_from_user"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("buffer"),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(" __user "),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"uintptr_t"),n("span",{class:"token punctuation"},")"),s(`
               tr`),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"."),s("ptr"),n("span",{class:"token punctuation"},"."),s("buffer"),n("span",{class:"token punctuation"},","),s(" tr"),n("span",{class:"token operator"},"->"),s("data_size"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 拷贝用户数据的flat_binder_object对象信息"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"copy_from_user"),n("span",{class:"token punctuation"},"("),s("offp"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(" __user "),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"uintptr_t"),n("span",{class:"token punctuation"},")"),s(`
               tr`),n("span",{class:"token operator"},"->"),s("data"),n("span",{class:"token punctuation"},"."),s("ptr"),n("span",{class:"token punctuation"},"."),s("offsets"),n("span",{class:"token punctuation"},","),s(" tr"),n("span",{class:"token operator"},"->"),s("offsets_size"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    off_end `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("offp "),n("span",{class:"token operator"},"+"),s(" tr"),n("span",{class:"token operator"},"->"),s("offsets_size"),n("span",{class:"token punctuation"},";"),s(`
    off_min `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 处理flat_binder_object对象信息"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},";"),s(" offp "),n("span",{class:"token operator"},"<"),s(" off_end"),n("span",{class:"token punctuation"},";"),s(" offp"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"flat_binder_object"),s(),n("span",{class:"token operator"},"*"),s("fp"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
        fp `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"flat_binder_object"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("buffer"),n("span",{class:"token operator"},"->"),s("data "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token operator"},"*"),s("offp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        off_min `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"*"),s("offp "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"flat_binder_object"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"switch"),s(),n("span",{class:"token punctuation"},"("),s("fp"),n("span",{class:"token operator"},"->"),s("type"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 类型为binder实体，用于server注册"),s(`
        `),n("span",{class:"token keyword"},"case"),s(" BINDER_TYPE_BINDER"),n("span",{class:"token operator"},":"),s(`
        `),n("span",{class:"token keyword"},"case"),s(" BINDER_TYPE_WEAK_BINDER"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_ref"),s(),n("span",{class:"token operator"},"*"),s("ref"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"// 如果找不到binder实体就创建一个"),s(`
            `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_node"),s(),n("span",{class:"token operator"},"*"),s("node "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"binder_get_node"),n("span",{class:"token punctuation"},"("),s("proc"),n("span",{class:"token punctuation"},","),s(" fp"),n("span",{class:"token operator"},"->"),s("binder"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                node `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"binder_new_node"),n("span",{class:"token punctuation"},"("),s("proc"),n("span",{class:"token punctuation"},","),s(" fp"),n("span",{class:"token operator"},"->"),s("binder"),n("span",{class:"token punctuation"},","),s(" fp"),n("span",{class:"token operator"},"->"),s("cookie"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            `),n("span",{class:"token comment"},"// 在目标进程中创建引用"),s(`
            ref `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"binder_get_ref_for_node"),n("span",{class:"token punctuation"},"("),s("target_proc"),n("span",{class:"token punctuation"},","),s(" node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            `),n("span",{class:"token comment"},"// 修改binder对象的类型为handle"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fp"),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"=="),s(" BINDER_TYPE_BINDER"),n("span",{class:"token punctuation"},")"),s(`
                fp`),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"="),s(" BINDER_TYPE_HANDLE"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"else"),s(`
                fp`),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"="),s(" BINDER_TYPE_WEAK_HANDLE"),n("span",{class:"token punctuation"},";"),s(`
            fp`),n("span",{class:"token operator"},"->"),s("binder "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"// 将引用的handle赋值给对象"),s(`
            fp`),n("span",{class:"token operator"},"->"),s("handle "),n("span",{class:"token operator"},"="),s(" ref"),n("span",{class:"token operator"},"->"),s("desc"),n("span",{class:"token punctuation"},";"),s(`
            fp`),n("span",{class:"token operator"},"->"),s("cookie "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token comment"},"// 增加引用计数"),s(`
            `),n("span",{class:"token function"},"binder_inc_ref"),n("span",{class:"token punctuation"},"("),s("ref"),n("span",{class:"token punctuation"},","),s(" fp"),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"=="),s(" BINDER_TYPE_HANDLE"),n("span",{class:"token punctuation"},","),s(`
                       `),n("span",{class:"token operator"},"&"),s("thread"),n("span",{class:"token operator"},"->"),s("todo"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 类型为binder引用，client向server传输"),s(`
        `),n("span",{class:"token keyword"},"case"),s(" BINDER_TYPE_HANDLE"),n("span",{class:"token operator"},":"),s(`
        `),n("span",{class:"token keyword"},"case"),s(" BINDER_TYPE_WEAK_HANDLE"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 获取当前进程中的binder引用"),s(`
            `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_ref"),s(),n("span",{class:"token operator"},"*"),s("ref "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"binder_get_ref"),n("span",{class:"token punctuation"},"("),s(`
                    proc`),n("span",{class:"token punctuation"},","),s(" fp"),n("span",{class:"token operator"},"->"),s("handle"),n("span",{class:"token punctuation"},","),s(`
                    fp`),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"=="),s(" BINDER_TYPE_HANDLE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("ref"),n("span",{class:"token operator"},"->"),s("node"),n("span",{class:"token operator"},"->"),s("proc "),n("span",{class:"token operator"},"=="),s(" target_proc"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token comment"},"// 如果binder传输发生在同一进程中则直接使用binder实体"),s(`
                `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fp"),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"=="),s(" BINDER_TYPE_HANDLE"),n("span",{class:"token punctuation"},")"),s(`
                    fp`),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"="),s(" BINDER_TYPE_BINDER"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"else"),s(`
                    fp`),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"="),s(" BINDER_TYPE_WEAK_BINDER"),n("span",{class:"token punctuation"},";"),s(`
                fp`),n("span",{class:"token operator"},"->"),s("binder "),n("span",{class:"token operator"},"="),s(" ref"),n("span",{class:"token operator"},"->"),s("node"),n("span",{class:"token operator"},"->"),s("ptr"),n("span",{class:"token punctuation"},";"),s(`
                fp`),n("span",{class:"token operator"},"->"),s("cookie "),n("span",{class:"token operator"},"="),s(" ref"),n("span",{class:"token operator"},"->"),s("node"),n("span",{class:"token operator"},"->"),s("cookie"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token function"},"binder_inc_node"),n("span",{class:"token punctuation"},"("),s("ref"),n("span",{class:"token operator"},"->"),s("node"),n("span",{class:"token punctuation"},","),s(" fp"),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"=="),s(" BINDER_TYPE_BINDER"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"binder_ref"),s(),n("span",{class:"token operator"},"*"),s("new_ref"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token comment"},"// 在目标进程中创建binder引用"),s(`
                new_ref `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"binder_get_ref_for_node"),n("span",{class:"token punctuation"},"("),s("target_proc"),n("span",{class:"token punctuation"},","),s(" ref"),n("span",{class:"token operator"},"->"),s("node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
                fp`),n("span",{class:"token operator"},"->"),s("binder "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
                fp`),n("span",{class:"token operator"},"->"),s("handle "),n("span",{class:"token operator"},"="),s(" new_ref"),n("span",{class:"token operator"},"->"),s("desc"),n("span",{class:"token punctuation"},";"),s(`
                fp`),n("span",{class:"token operator"},"->"),s("cookie "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token function"},"binder_inc_ref"),n("span",{class:"token punctuation"},"("),s("new_ref"),n("span",{class:"token punctuation"},","),s(" fp"),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"=="),s(" BINDER_TYPE_HANDLE"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 类型为文件描述符，用于共享文件或内存"),s(`
        `),n("span",{class:"token keyword"},"case"),s(" BINDER_TYPE_FD"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("reply"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),n("span",{class:"token punctuation"},"("),s("t"),n("span",{class:"token operator"},"->"),s("flags "),n("span",{class:"token operator"},"&"),s(" TF_ONE_WAY"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 当前线程的传输入栈"),s(`
        t`),n("span",{class:"token operator"},"->"),s("need_reply "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        t`),n("span",{class:"token operator"},"->"),s("from_parent "),n("span",{class:"token operator"},"="),s(" thread"),n("span",{class:"token operator"},"->"),s("transaction_stack"),n("span",{class:"token punctuation"},";"),s(`
        thread`),n("span",{class:"token operator"},"->"),s("transaction_stack "),n("span",{class:"token operator"},"="),s(" t"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 异步传输使用aync todo list"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target_node"),n("span",{class:"token operator"},"->"),s("has_async_transaction"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            target_list `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),s("target_node"),n("span",{class:"token operator"},"->"),s("async_todo"),n("span",{class:"token punctuation"},";"),s(`
            target_wait `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"NULL"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(`
            target_node`),n("span",{class:"token operator"},"->"),s("has_async_transaction "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 将传输添加到目标队列中"),s(`
    t`),n("span",{class:"token operator"},"->"),s("work"),n("span",{class:"token punctuation"},"."),s("type "),n("span",{class:"token operator"},"="),s(" BINDER_WORK_TRANSACTION"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"list_add_tail"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("t"),n("span",{class:"token operator"},"->"),s("work"),n("span",{class:"token punctuation"},"."),s("entry"),n("span",{class:"token punctuation"},","),s(" target_list"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 将传输完成添加到当前线程todo队列中"),s(`
    tcomplete`),n("span",{class:"token operator"},"->"),s("type "),n("span",{class:"token operator"},"="),s(" BINDER_WORK_TRANSACTION_COMPLETE"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"list_add_tail"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("tcomplete"),n("span",{class:"token operator"},"->"),s("entry"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("thread"),n("span",{class:"token operator"},"->"),s("todo"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 唤醒目标线程或进程"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("target_wait"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"wake_up_interruptible"),n("span",{class:"token punctuation"},"("),s("target_wait"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=l(`<p>这个函数是 binder driver 的关键函数，虽然很长很复杂，但是值得细细品味。</p><h2 id="binder-protocol" tabindex="-1"><a class="header-anchor" href="#binder-protocol" aria-hidden="true">#</a> Binder Protocol</h2><p>向 binder driver 通信的时候，需要确定基本的通讯协议（请求码），其中又分为 BC_PROTOCOL 和 BR_PROTOCOL:</p><ul><li><strong>BC_PROTOCOL</strong>: 应用程序向 binder 驱动设备发送请求消息</li><li><strong>BR_PROTOCOL</strong>: binder 驱动设备向应用程序发送消息</li></ul><p>这些协议都定义在 <code>enum binder_driver_command_protocol</code> 结构体(binder.h)中：</p><blockquote><p>/linux/android/binder.h</p></blockquote><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">binder_driver_command_protocol</span> <span class="token punctuation">{</span>
	BC_TRANSACTION <span class="token operator">=</span> <span class="token function">_IOW</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	BC_REPLY <span class="token operator">=</span> <span class="token function">_IOW</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其中 <code>_IOW</code> 宏定义如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOW</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>size<span class="token punctuation">)</span>	<span class="token function">_IOC</span><span class="token punctuation">(</span>_IOC_WRITE<span class="token punctuation">,</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">_IOC_TYPECHECK</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOC</span><span class="token expression"><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>type<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>size<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> _IOC_DIRSHIFT<span class="token punctuation">)</span> <span class="token operator">|</span> </span><span class="token punctuation">\\</span>
	 <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> _IOC_TYPESHIFT<span class="token punctuation">)</span> <span class="token operator">|</span> </span><span class="token punctuation">\\</span>
	 <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span>   <span class="token operator">&lt;&lt;</span> _IOC_NRSHIFT<span class="token punctuation">)</span> <span class="token operator">|</span> </span><span class="token punctuation">\\</span>
	 <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> _IOC_SIZESHIFT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
</code></pre></div><h3 id="abstract-of-bc-protocol" tabindex="-1"><a class="header-anchor" href="#abstract-of-bc-protocol" aria-hidden="true">#</a> Abstract of BC_PROTOCOL</h3><p>我们先对 BC_PROTOCOL 进行研究。</p><p>应用程序向 binder 驱动发送请求消息共 15 条<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>：</p><table><thead><tr><th style="text-align:left;">请求码</th><th style="text-align:left;">作用</th><th style="text-align:left;">使用场景</th></tr></thead><tbody><tr><td style="text-align:left;">BC_TRANSACTION</td><td style="text-align:left;">Client向Binder驱动发送请求数据</td><td style="text-align:left;">transact()</td></tr><tr><td style="text-align:left;">BC_REPLY</td><td style="text-align:left;">Server向Binder驱动发送请求数据</td><td style="text-align:left;">sendReply()</td></tr><tr><td style="text-align:left;">BC_FREE_BUFFER</td><td style="text-align:left;">释放内存</td><td style="text-align:left;">freeBuffer()</td></tr><tr><td style="text-align:left;">BC_ACQUIRE</td><td style="text-align:left;">binder_ref强引用加1</td><td style="text-align:left;">incStrongHandle()</td></tr><tr><td style="text-align:left;">BC_RELEASE</td><td style="text-align:left;">binder_ref强引用减1</td><td style="text-align:left;">decStrongHandle()</td></tr><tr><td style="text-align:left;">BC_INCREFS</td><td style="text-align:left;">binder_ref弱引用加1</td><td style="text-align:left;">incWeakHandle()</td></tr><tr><td style="text-align:left;">BC_DECREFS</td><td style="text-align:left;">binder_ref弱引用减1</td><td style="text-align:left;">decWeakHandle()</td></tr><tr><td style="text-align:left;">BC_ACQUIRE_DONE</td><td style="text-align:left;">binder_node强引用减1完成</td><td style="text-align:left;">executeCommand()</td></tr><tr><td style="text-align:left;">BC_INCREFS_DONE</td><td style="text-align:left;">binder_node弱引用减1完成</td><td style="text-align:left;">executeCommand()</td></tr><tr><td style="text-align:left;">BC_REGISTER_LOOPER</td><td style="text-align:left;">创建新的Binder线程</td><td style="text-align:left;">joinThreadPool()</td></tr><tr><td style="text-align:left;">BC_ENTER_LOOPER</td><td style="text-align:left;">Binder主线程进入looper</td><td style="text-align:left;">joinThreadPool()</td></tr><tr><td style="text-align:left;">BC_EXIT_LOOPER</td><td style="text-align:left;">Binder线程线程退出looper</td><td style="text-align:left;">joinThreadPool()</td></tr><tr><td style="text-align:left;">BC_REQUEST_DEATH_NOTIFICATION</td><td style="text-align:left;">注册死亡通知</td><td style="text-align:left;">requestDeathNotification()</td></tr><tr><td style="text-align:left;">BC_CLEAR_DEATH_NOTIFICATION</td><td style="text-align:left;">取消注册死亡通知</td><td style="text-align:left;">clearDeathNotification()</td></tr><tr><td style="text-align:left;">BC_DEAD_BINDER_DONE</td><td style="text-align:left;">已完成binder的死亡通知</td><td style="text-align:left;">executeCommand()</td></tr></tbody></table><p>我们接下来对这些协议进行一一分析。</p><h3 id="bc-transaction-bc-reply" tabindex="-1"><a class="header-anchor" href="#bc-transaction-bc-reply" aria-hidden="true">#</a> BC_TRANSACTION &amp; BC_REPLY</h3><p>这是最常用的协议，用于向 binder 驱动发起请求或者应答数据，传递的参数就是 <code>binder_transaction_data</code> 结构体。</p><p>该传输过程中涉及到的函数列表：</p><ul><li>binder_ioctl</li><li>binder_ioctl_write_read</li><li><strong>binder_thread_write</strong>: 协议的直接调用处，我们从此处开始研究</li><li>binder_transaction: 函数较为复杂，单独新开章节研究</li></ul><p>为了方便理解，我们用一张图来进行表述：</p>`,19),w=l(`<blockquote><p>drivers/android/binder.c</p></blockquote><h4 id="binder-thread-write" tabindex="-1"><a class="header-anchor" href="#binder-thread-write" aria-hidden="true">#</a> binder_thread_write()</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binder_thread_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_proc</span> <span class="token operator">*</span>proc<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">binder_thread</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span>
            <span class="token class-name">binder_uintptr_t</span> binder_buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span>
            <span class="token class-name">binder_size_t</span> <span class="token operator">*</span>consumed<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    	<span class="token keyword">void</span> __user <span class="token operator">*</span>ptr <span class="token operator">=</span> buffer <span class="token operator">+</span> <span class="token operator">*</span>consumed<span class="token punctuation">;</span>
    	<span class="token comment">// ...</span>
        <span class="token keyword">case</span> BC_TRANSACTION<span class="token operator">:</span>
        <span class="token keyword">case</span> BC_REPLY<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">binder_transaction_data</span> tr<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
            ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">binder_transaction</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> thread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> cmd <span class="token operator">==</span> BC_REPLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面分别研究 binder_ioctl() 函数和 binder_ioctl_write_read() 函数在这个 case 中的应用：</p><h4 id="binder-ioctl-1" tabindex="-1"><a class="header-anchor" href="#binder-ioctl-1" aria-hidden="true">#</a> binder_ioctl()</h4><p>binder_ioctl 函数是上层调用下来以后的入口函数，在本章研究的 BC_TRANSACTION &amp; BC_REPLY 流程中，会进入 case BINDER_WRITE_READ, 这是由 native 层传递过来的 command.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">binder_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> BINDER_WRITE_READ<span class="token operator">:</span>
		ret <span class="token operator">=</span> <span class="token function">binder_ioctl_write_read</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
			<span class="token keyword">goto</span> err<span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="binder-ioctl-write-read" tabindex="-1"><a class="header-anchor" href="#binder-ioctl-write-read" aria-hidden="true">#</a> binder_ioctl_write_read()</h4><p>binder 通信，上层会传递 <strong>BINDER_WRITE_READ</strong> cmd, 从 该 case 里面调用到 binder_ioctl_write_read() 函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binder_ioctl_write_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>
				<span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">,</span>
				<span class="token keyword">struct</span> <span class="token class-name">binder_thread</span> <span class="token operator">*</span>thread<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">binder_proc</span> <span class="token operator">*</span>proc <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">_IOC_SIZE</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> __user <span class="token operator">*</span>ubuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">binder_write_read</span> bwr<span class="token punctuation">;</span>
	
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bwr<span class="token punctuation">,</span> ubuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bwr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		ret <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 需要写数据</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bwr<span class="token punctuation">.</span>write_size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
		ret <span class="token operator">=</span> <span class="token function">binder_thread_write</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> thread<span class="token punctuation">,</span>
					  bwr<span class="token punctuation">.</span>write_buffer<span class="token punctuation">,</span>
					  bwr<span class="token punctuation">.</span>write_size<span class="token punctuation">,</span>
					  <span class="token operator">&amp;</span>bwr<span class="token punctuation">.</span>write_consumed<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
        <span class="token comment">// ...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们是真正调用进了 <code>binder_thread_write</code>, 也就是上面我们那个 case 所在的地方。</p><h3 id="bc-free-buffer" tabindex="-1"><a class="header-anchor" href="#bc-free-buffer" aria-hidden="true">#</a> BC_FREE_BUFFER</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">case</span> BC_FREE_BUFFER<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token class-name">binder_uintptr_t</span> data_ptr<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">binder_buffer</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>
	
    <span class="token comment">// 获取用户空间数据</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_user</span><span class="token punctuation">(</span>data_ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">binder_uintptr_t</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
    ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">binder_uintptr_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">// 从 buffer 树中找到对应的 binder_buffer</span>
    buffer <span class="token operator">=</span> <span class="token function">binder_alloc_prepare_to_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc<span class="token operator">-&gt;</span>alloc<span class="token punctuation">,</span>
                                          data_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">binder_free_buf</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> thread<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="br-transaction-complete" tabindex="-1"><a class="header-anchor" href="#br-transaction-complete" aria-hidden="true">#</a> BR_TRANSACTION_COMPLETE</h3><p>Client 在执行 <strong>BINDER_WRITE_READ</strong> 时，先通过 binder_thread_write() 写数据，将 <strong>BINDER_WORK_TRANSACTION_COMPLETE</strong> 放入工作队列。紧接着就执行 binder_thread_read() 读取返回数据。这里会将命令 BR_TRANSACTION_COMPLETE 返回给 Client 线程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binder_thread_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">binder_proc</span> <span class="token operator">*</span>proc<span class="token punctuation">,</span>
                  <span class="token keyword">struct</span> <span class="token class-name">binder_thread</span> <span class="token operator">*</span>thread<span class="token punctuation">,</span>
                  <span class="token class-name">binder_uintptr_t</span> binder_buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span>
                  <span class="token class-name">binder_size_t</span> <span class="token operator">*</span>consumed<span class="token punctuation">,</span> <span class="token keyword">int</span> non_block<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// 第一次读时，插入命令 BR_NOOP 返回给用户</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>consumed <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">put_user</span><span class="token punctuation">(</span>BR_NOOP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
        ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

retry<span class="token operator">:</span>
    <span class="token comment">// 当前线程没有传输并且 todo 队列为空时，处理进程的工作队列</span>
    wait_for_proc_work <span class="token operator">=</span> thread<span class="token operator">-&gt;</span>transaction_stack <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span>
                <span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token operator">-&gt;</span>todo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    thread<span class="token operator">-&gt;</span>looper <span class="token operator">|=</span> BINDER_LOOPER_STATE_WAITING<span class="token punctuation">;</span>
    <span class="token comment">// 如果处理进程工作队列，则当前线程为空闲线程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wait_for_proc_work<span class="token punctuation">)</span>
        proc<span class="token operator">-&gt;</span>ready_threads<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// 等待进程或线程工作队列被唤醒</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wait_for_proc_work<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            ret <span class="token operator">=</span> <span class="token function">wait_event_freezable_exclusive</span><span class="token punctuation">(</span>proc<span class="token operator">-&gt;</span>wait<span class="token punctuation">,</span> <span class="token function">binder_has_proc_work</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            ret <span class="token operator">=</span> <span class="token function">wait_event_freezable</span><span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span>wait<span class="token punctuation">,</span> <span class="token function">binder_has_thread_work</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// 唤醒后，开始处理传输，空闲线程减1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wait_for_proc_work<span class="token punctuation">)</span>
        proc<span class="token operator">-&gt;</span>ready_threads<span class="token operator">--</span><span class="token punctuation">;</span>
    thread<span class="token operator">-&gt;</span>looper <span class="token operator">&amp;=</span> <span class="token operator">~</span>BINDER_LOOPER_STATE_WAITING<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
       <span class="token comment">// 优先处理线程工作队列，再处理进程工作队列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token operator">-&gt;</span>todo<span class="token punctuation">)</span><span class="token punctuation">)</span>
            w <span class="token operator">=</span> <span class="token function">list_first_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token operator">-&gt;</span>todo<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">binder_work</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc<span class="token operator">-&gt;</span>todo<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> wait_for_proc_work<span class="token punctuation">)</span>
            w <span class="token operator">=</span> <span class="token function">list_first_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc<span class="token operator">-&gt;</span>todo<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">binder_work</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">-</span> buffer <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>thread<span class="token operator">-&gt;</span>looper <span class="token operator">&amp;</span> BINDER_LOOPER_STATE_NEED_RETURN<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">/* no data added */</span>
                <span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>w<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">case</span> BINDER_WORK_TRANSACTION_COMPLETE<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 发送命令BR_TRANSACTION_COMPLETE给用户</span>
            cmd <span class="token operator">=</span> BR_TRANSACTION_COMPLETE<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">put_user</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
            ptr <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token operator">-&gt;</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">kfree</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">binder_stats_deleted</span><span class="token punctuation">(</span>BINDER_STAT_TRANSACTION_COMPLETE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="br-transaction" tabindex="-1"><a class="header-anchor" href="#br-transaction" aria-hidden="true">#</a> BR_TRANSACTION</h3><p>Server 端线程启动后就调用 talkWithDriver() 等待读取数据。Binder 驱动处理 Client 发送的 BC_TRANSACTION 命令后，会唤醒 Server 线程。Server 线程读取数据进行处理同样是在 binder_thread_read() 中完成的。</p><h2 id="mmap-技术" tabindex="-1"><a class="header-anchor" href="#mmap-技术" aria-hidden="true">#</a> mmap 技术</h2><p>mmap(), 或者称之为内存映射技术，是实现 binder 的重要技术之一。</p><p>mmap() 可以将一个文件、一段物理内存或者其他对象映射到<strong>进程的虚拟地址空间</strong>。在内存映射技术中，操作系统会为每个映射的文件或设备创建一个虚拟地址空间，然后将该虚拟地址空间中的每个地址都映射到文件或设备的实际物理地址上。</p><p>❤️❤️ 对于这句话的理解，物理内存（物理页）–&gt; 虚拟内存（虚拟页）；物理页是内核管理物理页的基本单位。</p><p>❌❌ 目前来看：这种映射本身操作系统就会完成，那么 mmap 做了什么呢？</p><p>mmap 有一个重要的理念：访问文件（如果映射的是文件）就像是访问内存一样。</p><h2 id="pracel" tabindex="-1"><a class="header-anchor" href="#pracel" aria-hidden="true">#</a> Pracel</h2><h3 id="call-stack" tabindex="-1"><a class="header-anchor" href="#call-stack" aria-hidden="true">#</a> Call Stack</h3><p>来研究一下序列化、反序列化的过程。</p><blockquote><p>ipc/native/src/mock/source/binder_invoker.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">BinderInvoker</span><span class="token double-colon punctuation">::</span><span class="token function">WriteTransaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> flags<span class="token punctuation">,</span> <span class="token keyword">int32_t</span> handle<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> code<span class="token punctuation">,</span> <span class="token keyword">const</span> MessageParcel <span class="token operator">&amp;</span>data<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">int32_t</span> <span class="token operator">*</span>status<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    binder_transaction_data tr <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    tr<span class="token punctuation">.</span>target<span class="token punctuation">.</span>handle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token punctuation">)</span>handle<span class="token punctuation">;</span>
    tr<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    tr<span class="token punctuation">.</span>flags <span class="token operator">=</span> flags<span class="token punctuation">;</span>
    tr<span class="token punctuation">.</span>flags <span class="token operator">|=</span> TF_ACCEPT_FDS<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">GetDataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Send this parcel&#39;s data through the binder.</span>
        tr<span class="token punctuation">.</span>data_size <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">GetDataSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token punctuation">(</span>binder_uintptr_t<span class="token punctuation">)</span>data<span class="token punctuation">.</span><span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span>offsets_size <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">GetOffsetsSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>binder_size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>offsets <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">GetObjectOffsets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Send this parcel&#39;s status through the binder.</span>
        tr<span class="token punctuation">.</span>flags <span class="token operator">|=</span> TF_STATUS_CODE<span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span>data_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>uintptr_t<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span>offsets_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        tr<span class="token punctuation">.</span>data<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>offsets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>output_<span class="token punctuation">.</span><span class="token function">WriteInt32</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ZLOGE</span><span class="token punctuation">(</span>LABEL<span class="token punctuation">,</span> <span class="token string">&quot;WriteTransaction Command failure&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> output_<span class="token punctuation">.</span><span class="token function">WriteBuffer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>binder_transaction_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码是客户端❓写 ipc 通信所需要的数据，data 是一个 <code>MessageParcel</code> 对象，从这就可以猜测出，在 native 层，是依靠这个对象来进行数据的传输的。</p><p>来看定义：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MessageParcel</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Parcel</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><p>其集成了 Parcel 接口，所以我们需要找到 Parcel 的实现。</p><p>➡️➡️ 客户端</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token class-name">TestAbilityProxy</span><span class="token double-colon punctuation">::</span><span class="token function">TestPingService</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>u16string <span class="token operator">&amp;</span>dummy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MessageOption option<span class="token punctuation">;</span>
    MessageParcel dataParcel<span class="token punctuation">,</span> replyParcel<span class="token punctuation">;</span>
    dataParcel<span class="token punctuation">.</span><span class="token function">WriteString16</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">SendRequest</span><span class="token punctuation">(</span>TRANS_ID_PING_ABILITY<span class="token punctuation">,</span> dataParcel<span class="token punctuation">,</span> replyParcel<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> ERR_NONE<span class="token punctuation">)</span> <span class="token operator">?</span> replyParcel<span class="token punctuation">.</span><span class="token function">ReadInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>第 5 行调用到了 SendRequest 方法，</p><p>➡️➡️ JNI 层</p><blockquote><p>ipc/native/src/jni/source/ohos_rpc_message_parcel.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/*
 * Class:     ohos.rpc.MessageParcel
 * Method:    nativeWriteRawData
 * Signature: ([BI)Z
 */</span>
jboolean JNICALL <span class="token function">Java_ohos_rpc_MessageParcel_nativeWriteRawData</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject object<span class="token punctuation">,</span> jobject rawData<span class="token punctuation">,</span> jint size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MessageParcel <span class="token operator">*</span>nativeParcel <span class="token operator">=</span> <span class="token function">JavaOhosRpcMessageParcelGetNative</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nativeParcel <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ZLOGE</span><span class="token punctuation">(</span>LABEL<span class="token punctuation">,</span> <span class="token string">&quot;could not get native parcel for raw data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    jbyte <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>jbyte <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>env<span class="token operator">-&gt;</span><span class="token function">GetPrimitiveArrayCritical</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>jarray<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> JNI_FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> result <span class="token operator">=</span> nativeParcel<span class="token operator">-&gt;</span><span class="token function">WriteRawData</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    env<span class="token operator">-&gt;</span><span class="token function">ReleasePrimitiveArrayCritical</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>jarray<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result <span class="token operator">?</span> JNI_TRUE <span class="token operator">:</span> JNI_FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JNI 层函数网上看，函数映射（看注释里面的 Method 也能知道）：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">{</span> <span class="token string">&quot;nativeWriteRawData&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;([BI)Z&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>Java_ohos_rpc_MessageParcel_nativeWriteRawData <span class="token punctuation">}</span>
</code></pre></div><p>其中 nativeWriteRawData 是给 JNI 的上层使用的，但是并没有找到其调用的地方。💊💊💊</p><p>➡️➡️ native 层</p><p>18 行我们可以看到，调用了 MessageParcel 的 WriteRawData 方法：</p><blockquote><p>ipc/native/src/core/source/message_parcel.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">MessageParcel</span><span class="token double-colon punctuation">::</span><span class="token function">WriteRawData</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> size <span class="token operator">&gt;</span> MAX_RAWDATA_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kernelMappedWrite_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WriteInt32</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> MIN_RAWDATA_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">WriteUnpadBuffer</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">AshmemCreate</span><span class="token punctuation">(</span><span class="token string">&quot;Parcel RawData&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pracel-object-java" tabindex="-1"><a class="header-anchor" href="#pracel-object-java" aria-hidden="true">#</a> Pracel Object(Java)</h3><p>todo: 本章研究 Pracel 对象的创建等操作<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,49),y={href:"https://juejin.cn/post/6956031662916534279",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.aliyun.com/article/933229",target:"_blank",rel:"noopener noreferrer"},E={href:"https://blog.csdn.net/itachi85/article/details/102713845",target:"_blank",rel:"noopener noreferrer"},R=n("hr",{class:"footnotes-sep"},null,-1),T={class:"footnotes"},B={class:"footnotes-list"},I={id:"footnote1",class:"footnote-item"},N={href:"http://gityuan.com/2016/10/29/binder-thread-pool/",target:"_blank",rel:"noopener noreferrer"},O=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),x={id:"footnote2",class:"footnote-item"},P={href:"https://segmentfault.com/a/1190000020534070",target:"_blank",rel:"noopener noreferrer"},C=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),A={id:"footnote3",class:"footnote-item"},D={href:"http://gityuan.com/2014/01/05/binder-driver/",target:"_blank",rel:"noopener noreferrer"},S=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1),L={id:"footnote4",class:"footnote-item"},z={href:"http://gityuan.com/2016/09/04/binder-start-service/",target:"_blank",rel:"noopener noreferrer"},M=n("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎",-1);function W(F,j){const i=c("Tabs"),u=c("Mermaid"),t=c("ExternalLinkIcon");return k(),d("div",null,[v,a(i,{id:"301",data:[{id:"defines"},{id:"binder_transaction"}]},{title0:e(({value:p,isActive:o})=>[s("binder_transaction")]),title1:e(({value:p,isActive:o})=>[s("detalis")]),tab0:e(({value:p,isActive:o})=>[m,_]),tab1:e(({value:p,isActive:o})=>[f]),_:1}),h,a(u,{id:"mermaid-574",code:"eJxVzt0KgjAUB/D7nuJc1oXSEwjqdiGExRIiRMacEwfm4riQYg+fn0Hn7nz8f5y6NYNsBFrIyA7GCvNSd5VCro20bQGeF7goSQll/MaSjHJGQ+Ig+jvjA2qrOCpRFbMSged7AcS5NM83r9E8+KtX+FuOO6drKAf0l2ivPwoCODqyX2HbTNwiH+YcWdGtmZAo5hkL02sYZ8k5BYMwThi9nO4O6PajRdH1QlptumL3Bb4ATHQ="}),w,n("ol",null,[n("li",null,[n("p",null,[n("a",y,[s("mmap 接口解析：《一文读懂 mmap 原理》"),a(t)])])]),n("li",null,[n("p",null,[n("a",g,[s("IPC 通信与 binder 基础介绍：《Android Binder原理图解》"),a(t)])])]),n("li",null,[n("p",null,[n("a",E,[s("binder 基本原理：《Android Binder原理（一）学习Binder前必须要了解的知识点》"),a(t)])])])]),R,n("section",T,[n("ol",B,[n("li",I,[n("p",null,[n("a",N,[s("binder 线程池"),a(t)]),s(),O])]),n("li",x,[n("p",null,[n("a",P,[s("Binder驱动之最简单的通信"),a(t)]),s(),C])]),n("li",A,[n("p",null,[n("a",D,[s("5.5 探究Binder Driver"),a(t)]),s(),S])]),n("li",L,[n("p",null,[n("a",z,[s("彻底理解Android Binder通信架构"),a(t)]),s(),M])])])])])}const H=r(b,[["render",W],["__file","binder.html.vue"]]);export{H as default};
