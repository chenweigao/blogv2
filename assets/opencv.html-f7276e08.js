import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as e}from"./app-22cda79c.js";const t={},o=e(`<p>OpenCV (Open Source Computer Vision Library) is an open source computer vision and machine learning software library. OpenCV was built to provide a common infrastructure for computer vision applications and to accelerate the use of machine perception in the commercial products.<br> Being a BSD-licensed product, OpenCV makes it easy for businesses to utilize and modify the code.</p><details><summary>To use the camera to find the frame face</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>video_capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
process_this_frame <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># Grab a single frame of video</span>
    ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> video_capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Resize frame of video to 1/4 size for faster face recognition processing</span>
    small_frame <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fx<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> fy<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>

    <span class="token comment"># Convert the image from BGR color (which OpenCV uses) to RGB color (which face_recognition uses)</span>
    rgb_small_frame <span class="token operator">=</span> small_frame<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token comment"># Only process every other frame of video to save time</span>
    <span class="token keyword">if</span> process_this_frame<span class="token punctuation">:</span>
        <span class="token comment"># Find all the faces and face encodings in the current frame of video</span>
        f_face_locations <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_locations<span class="token punctuation">(</span>rgb_small_frame<span class="token punctuation">)</span>
        f_face_encodings <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>face_encodings<span class="token punctuation">(</span>
            rgb_small_frame<span class="token punctuation">,</span> f_face_locations<span class="token punctuation">)</span>
        <span class="token comment"># print(f_face_encodings)</span>
        <span class="token keyword">for</span> f_face_encoding <span class="token keyword">in</span> f_face_encodings<span class="token punctuation">:</span>
            <span class="token keyword">match</span> <span class="token operator">=</span> face_recognition<span class="token punctuation">.</span>compare_faces<span class="token punctuation">(</span>face_encodings<span class="token punctuation">,</span> f_face_encoding<span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>face_correct_names<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>face_correct_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    process_this_frame <span class="token operator">=</span> <span class="token keyword">not</span> process_this_frame
    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;Video2&#39;</span><span class="token punctuation">,</span> frame<span class="token punctuation">)</span>
    <span class="token comment"># Hit &#39;q&#39; on the keyboard to quit!</span>
    <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;q&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>

video_capture<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="basic" tabindex="-1"><a class="header-anchor" href="#basic" aria-hidden="true">#</a> Basic</h2><h3 id="load-and-display-an-image" tabindex="-1"><a class="header-anchor" href="#load-and-display-an-image" aria-hidden="true">#</a> Load and Display an Image</h3><blockquote><p>Then create a Mat object that will store the data of the loaded image.</p></blockquote><h4 id="imread" tabindex="-1"><a class="header-anchor" href="#imread" aria-hidden="true">#</a> <code>imread()</code></h4><ul><li><p>First argument is filename</p></li><li><p>Second argument specifies the format:</p><ol><li>IMREAD_UNCHANGED (&lt;0) loads the image as is (including the alpha channel if present)</li><li>IMREAD_GRAYSCALE ( 0) loads the image as an intensity one</li><li>IMREAD_COLOR (&gt;0) loads the image in the <strong>RGB format</strong></li></ol></li></ul><h4 id="namedwindow" tabindex="-1"><a class="header-anchor" href="#namedwindow" aria-hidden="true">#</a> <code>namedWindow()</code></h4><ul><li><em>WINDOW_AUTOSIZE</em></li><li><em>WINDOW_NORMAL</em></li></ul><h3 id="modify-and-save-an-image" tabindex="-1"><a class="header-anchor" href="#modify-and-save-an-image" aria-hidden="true">#</a> Modify and Save an Image</h3><h4 id="cvtcolor" tabindex="-1"><a class="header-anchor" href="#cvtcolor" aria-hidden="true">#</a> <code>cvtColor()</code></h4><blockquote><p><code>cvtColor( image, gray_image, COLOR_BGR2GRAY );</code></p></blockquote><h4 id="imwrite" tabindex="-1"><a class="header-anchor" href="#imwrite" aria-hidden="true">#</a> <code>imwrite()</code></h4><blockquote><p><code>imwrite( &quot;../../images/Gray_Image.jpg&quot;, gray_image );</code></p></blockquote><p>Save your transformed image in a file on disk (using <code>cv::imwrite</code> )</p><p>Write the Mat gray_image to a new file.</p><h2 id="core-module" tabindex="-1"><a class="header-anchor" href="#core-module" aria-hidden="true">#</a> Core Module</h2><h3 id="mat" tabindex="-1"><a class="header-anchor" href="#mat" aria-hidden="true">#</a> Mat</h3><p>How OpenCV stores and handles images?</p><ul><li>Mat</li><li>Mat is that you no longer need to manually allocate its memory and release it as soon as you do not need it</li></ul><p><code>uchar* cv::Mat::ptr(int i)</code>: Returns a pointer to the specified matrix row.</p>`,21),i=[o];function c(p,l){return a(),s("div",null,i)}const d=n(t,[["render",c],["__file","opencv.html.vue"]]);export{d as default};
