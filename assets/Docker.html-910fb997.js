import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c,a,b as s,d as o,f as n}from"./app-22cda79c.js";const l="/assets/wsl-945b845c.png",i={},d=n(`<h2 id="docker-usage" tabindex="-1"><a class="header-anchor" href="#docker-usage" aria-hidden="true">#</a> Docker Usage</h2><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql" aria-hidden="true">#</a> postgresql</h3><p>postgresql:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5432</span>:5432 <span class="token parameter variable">--name</span> postgresql <span class="token parameter variable">-v</span> pgdata:/var/lib/postgresql/data <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span>pg123456 postgres
</code></pre></div><p>dpage/pgadmin4:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5433</span>:80 <span class="token parameter variable">--name</span> pgadmin4 <span class="token parameter variable">-e</span> <span class="token assign-left variable">PGADMIN_DEFAULT_EMAIL</span><span class="token operator">=</span>mail@weigao.cc <span class="token parameter variable">-e</span> <span class="token assign-left variable">PGADMIN_DEFAULT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> dpage/pgadmin4
</code></pre></div><p>登录 pgadamin 的时候，账号为邮箱，密码 123456 如上所设置。</p><p>在创建 pg server 的时候，密码为 pg123456 如上配置，服务器的地址用如下方式获取：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> postgresql <span class="token function">bash</span>

root@b4afa86fb3b3:/<span class="token comment"># cat /etc/hosts</span>
<span class="token number">127.0</span>.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
<span class="token number">172.17</span>.0.3      b4afa86fb3b3 <span class="token comment"># 容器的 IP</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们使用 <code>172.17.0.3:5432</code> 连接数据库即可。</p><h3 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySql</h3>`,11),u={href:"http://docs.nigeerhuo.com/docker/",target:"_blank",rel:"noopener noreferrer"},k=n(`<p>使用 Docker 一步搞定 MySql 的安装：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql-dokcer <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-d</span> mysql:latest
</code></pre></div><p>上述命令的字段含义是：</p><ol><li><code>-p 3306:3306</code>：将运行容器内部的 3306 端口桥接到宿主机的 3306 端口。左边的属于宿主机，右边的属于容器。</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>：设置容器使用的环境变量。<code>MYSQL_ROOT_PASSWORD=123456</code> 指定了mysql server的密码是123456. (默认用户名是root)。</li><li><code>-d</code>：后台运行容器。</li></ol><h3 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mongo-docker <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">27077</span>:27017 mongo:latest
</code></pre></div>`,6),h={href:"https://studio3t.com/",target:"_blank",rel:"noopener noreferrer"},b=n(`<h3 id="jenkins" tabindex="-1"><a class="header-anchor" href="#jenkins" aria-hidden="true">#</a> Jenkins</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">18088</span>:8080 <span class="token parameter variable">--name</span> jenkins-docker <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 jenkins/jenkins:lts
</code></pre></div><p>需要注意的是，Jenkins 会使用两个端口映射到宿主机上面，向外暴露的是 8080 服务，我们在本地只需要连接 18088 端口即可。</p><p>连接到 localhost:18088 后，会提示配置密码，需要进入容器查看密码。</p><p>容器启动以后，需要进入容器对 Jenkins 进行简单的配置：</p><ol><li><p>进入容器</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> jenkins-docker <span class="token function">bash</span>
</code></pre></div></li><li><p>查看密码文件内容</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/jenkins_home/secrets/initialAdminPassword
</code></pre></div><p>此时会得到类似于 <code>13e19c5410b145e59dbf70916ed4a3fb</code> 这样的输出，输入到浏览器端，即可进入。此时会自动安装一些插件，等待插件安装完成，然后设置账号密码，配置完成。</p></li></ol><h3 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat" aria-hidden="true">#</a> Tomcat</h3><p>指定 Tomcat 版本进行安装：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> tomcat-docker-8.0 <span class="token parameter variable">-d</span>  <span class="token parameter variable">-p</span> <span class="token number">9999</span>:8080 tomcat:8.0
</code></pre></div><p>安装完成之后，想要把本地的文件拷贝到容器中：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> ./.  tomcat-docker-8.0:/home
<span class="token comment"># 或者拷贝 war</span>
<span class="token function">docker</span> <span class="token function">cp</span> foo.war tomcat-docker-8.0:/foo.war
</code></pre></div><h2 id="spring-boot-with-docker" tabindex="-1"><a class="header-anchor" href="#spring-boot-with-docker" aria-hidden="true">#</a> Spring-boot with Docker</h2><p>使用 Dokcer + Spring-boot 构建项目。</p><div class="hint-container warning"><p class="hint-container-title">Docker in wsl</p><p>这次尝试在 WSL 上面安装了 Docker，要注意到 WSL 是用了 <code>SysV init</code> 的命令而不是 <code>systemd</code>, 所以在启动 Docker 的时候使用</p><p><code>service docker start</code>，不必使用 systemctl.</p></div><h2 id="tools" tabindex="-1"><a class="header-anchor" href="#tools" aria-hidden="true">#</a> Tools</h2><h3 id="portainer" tabindex="-1"><a class="header-anchor" href="#portainer" aria-hidden="true">#</a> portainer</h3><p>portainer 是一个 web 的 docker 管理工具。</p><p><img src="`+l+`" alt="wsl"></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create portainer_data
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">--name</span> portainer <span class="token parameter variable">--restart</span> always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data portainer/portainer
</code></pre></div>`,19),g={href:"http://localhost:9000",target:"_blank",rel:"noopener noreferrer"},m=a("h2",{id:"config",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#config","aria-hidden":"true"},"#"),s(" Config")],-1),v=a("h3",{id:"wsl",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#wsl","aria-hidden":"true"},"#"),s(" WSL")],-1),f=a("p",null,"在 WSL 上开启 docker 守护进程：",-1),_={href:"https://docs.docker.com/desktop/windows/wsl/",target:"_blank",rel:"noopener noreferrer"},x=n(`<p>将 WSL 转化为 WSL2：</p><div class="language-powershell" data-ext="powershell"><pre class="language-powershell"><code>wsl<span class="token punctuation">.</span>exe <span class="token operator">-</span>l <span class="token operator">-</span>v

wsl<span class="token punctuation">.</span>exe <span class="token operator">--</span><span class="token function">set-version</span> <span class="token punctuation">(</span>distro name<span class="token punctuation">)</span> 2

wsl<span class="token punctuation">.</span>exe <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2

wsl <span class="token operator">--</span><span class="token function">set-default</span> &lt;distro name&gt; <span class="token punctuation">.</span>

</code></pre></div><p>下面这一步可以省略，如果不是 WSL 需要手动开启：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">DOCKER_HOST</span><span class="token operator">=</span>tcp://127.0.0.1:2375
</code></pre></div><h3 id="切换镜像仓到国内" tabindex="-1"><a class="header-anchor" href="#切换镜像仓到国内" aria-hidden="true">#</a> 切换镜像仓到国内</h3><div class="language-json" data-ext="json"><pre class="language-json"><code>  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;https://registry.docker-cn.com&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://dockerhub.azk8s.cn&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://reg-mirror.qiniu.com&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>
  <span class="token punctuation">]</span>
</code></pre></div><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2>`,7),w={href:"https://docs.docker.com/install/linux/docker-ce/ubuntu/#os-requirements",target:"_blank",rel:"noopener noreferrer"},S=n(`<li><p>Test whether the Docker is installed correctly (Ubuntu 16.04)</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> container run hello-world

<span class="token function">docker</span> <span class="token parameter variable">--version</span>

<span class="token function">sudo</span> <span class="token function">docker</span> info

<span class="token function">sudo</span> <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token punctuation">(</span>-all<span class="token punctuation">)</span>
</code></pre></div></li><li><p>List the versions available in your repo:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-cache</span> madison docker-ce
</code></pre></div></li>`,2),q=n(`<h2 id="containers" tabindex="-1"><a class="header-anchor" href="#containers" aria-hidden="true">#</a> Containers</h2><p>Make sure all is set up:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run hello-world
</code></pre></div><p>Run the app, before this, a <code>Dockerfile</code> should be created:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">4000</span>:80 friendlyhello

<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">4000</span>:80 friendlyhello
<span class="token comment"># run on background</span>
</code></pre></div><p>将 Docker 的 80 端口映射出去至 4000 端口，如果是在后台运行的话，可查看：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> container <span class="token function">ls</span>

<span class="token comment">#stop</span>
<span class="token function">sudo</span> <span class="token function">docker</span> container stop 1fa4a<span class="token punctuation">..</span>.
</code></pre></div><h2 id="share-images" tabindex="-1"><a class="header-anchor" href="#share-images" aria-hidden="true">#</a> Share images</h2><ol><li><p>Login</p></li><li><p>Tag the image</p></li><li><p>Push the image</p></li><li><p>Pull</p></li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> login

<span class="token function">sudo</span> <span class="token function">docker</span> tag friendlyhello weigaochen/get-started:part2
<span class="token comment"># docker tag image username/respository:tag</span>

<span class="token function">sudo</span> <span class="token function">docker</span> image <span class="token function">ls</span>
<span class="token function">sudo</span> <span class="token function">docker</span> push weigaochen/get-started:part2

<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">4000</span>:801 weigaochen/get-started:part2
</code></pre></div><h2 id="services" tabindex="-1"><a class="header-anchor" href="#services" aria-hidden="true">#</a> Services</h2><ul><li><p>通过 <code>docker-compose.yml</code> 来配置，在其中引用已经 Published 的 image</p><blockquote><p>A <code>docker-compose.yml</code> file is a YAML file that defines how Docker containers should behave in production.</p></blockquote></li><li><p>Run the new load-balanced app</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> swarm init
<span class="token function">sudo</span> <span class="token function">docker</span> stack deploy <span class="token parameter variable">-c</span> docker-compose.yml getstartedlab
</code></pre></div><p>注意到其中的 <code>getstartedlab</code> 是我们给 app 起的一个名字</p></li><li><p>查看：<code>sudo docker service ls</code></p><p>注意到 <code>NAME</code> 属性的值为 <code>getstartedlab_web</code>.</p></li></ul><h3 id="task" tabindex="-1"><a class="header-anchor" href="#task" aria-hidden="true">#</a> Task</h3><blockquote><p>A single container running in a service is called a task.</p></blockquote><p>Let us list the <strong>task</strong>:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ps</span> getstartedlab_web
</code></pre></div><p>如果顺利的话，这时候可以看到 5 个 task: <code>getstartedlab_web.1</code> 至 <code>getstartedlab_web.5</code>, 原因是我们在 <code>docker-compose.yml</code> 文件中配置了 5 个 <code>replices</code>.</p><h2 id="swarms" tabindex="-1"><a class="header-anchor" href="#swarms" aria-hidden="true">#</a> Swarms</h2><p><strong>KEYWORDS</strong>: swarm manager, workers, swarm clusters</p>`,19);function y(D,L){const e=p("ExternalLinkIcon");return r(),c("div",null,[d,a("p",null,[s("参考文献: "),a("a",u,[s("docker 绿皮书"),o(e)])]),k,a("p",null,[s("此时可以用连接工具 "),a("a",h,[s("https://studio3t.com/"),o(e)]),s(" 测试并连接到 27077 端口。")]),b,a("p",null,[s("然后访问 "),a("a",g,[s("http://localhost:9000"),o(e)]),s(", 就可以进入 portainer 的设置界面。")]),m,v,f,a("p",null,[a("a",_,[s("参考文档"),o(e)])]),x,a("ol",null,[a("li",null,[a("p",null,[s("Follow the "),a("a",w,[s("tutorial"),o(e)])])]),S]),q])}const T=t(i,[["render",y],["__file","Docker.html.vue"]]);export{T as default};
