import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as i,a,b as s,d as n,f as t}from"./app-22cda79c.js";const l={},r=a("h1",{id:"git",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),s(" Git")],-1),d=a("h2",{id:"github-host-加速",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#github-host-加速","aria-hidden":"true"},"#"),s(" GitHub Host 加速")],-1),g={href:"https://github.com/oldj/SwitchHosts/releases",target:"_blank",rel:"noopener noreferrer"},h=a("p",null,"添加一条规则：",-1),u={class:"hint-container tip"},b=a("p",{class:"hint-container-title"},"SwitchHosts Rule",-1),f=a("p",null,"方案名：GitHub（可以自行命名）",-1),k=a("p",null,"类型：远程",-1),v={href:"https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts",target:"_blank",rel:"noopener noreferrer"},m=a("p",null,"自动更新：1个小时",-1),x=t(`<h2 id="ssh-server" tabindex="-1"><a class="header-anchor" href="#ssh-server" aria-hidden="true">#</a> SSH Server</h2><p>Clone form server file using SSH:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone ssh://root@120.78.71.220:22/~/data
</code></pre></div><p>Connect using ssh:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> root@174.137.62.75
</code></pre></div><p>ssh key:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>ssh-keygen
</code></pre></div><h2 id="repo" tabindex="-1"><a class="header-anchor" href="#repo" aria-hidden="true">#</a> repo</h2><h3 id="workflow-usage" tabindex="-1"><a class="header-anchor" href="#workflow-usage" aria-hidden="true">#</a> Workflow Usage</h3><p>repo 的工作流可以参考这个文档(注意有中文版，可以切换语言查看)<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>，其流程大概可以总结为以下步骤：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>repo start
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token builtin class-name">.</span>
repo upload
</code></pre></div><p>其中几个 repo 专有的命令如下表格所示[^2]：</p><table><thead><tr><th>command</th><th>description</th><th>example</th></tr></thead><tbody><tr><td>repo init</td><td>Initializes a new client.</td><td></td></tr><tr><td>repo sync</td><td>Syncs the client to the repositories.</td><td></td></tr><tr><td>repo start</td><td>Starts a new branch.</td><td></td></tr><tr><td>repo status</td><td>Shows the status of the current branch.</td><td></td></tr><tr><td>repo upload</td><td>Uploads changes to the review server.</td><td></td></tr></tbody></table><p>以下是使用的例子（简单的 workflow, 后文会详细研究每一个命令）：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>repo <span class="token function">sync</span> PROJECT0 PROJECT1 <span class="token punctuation">..</span>. PROJECTN
repo start BRANCH_NAME <span class="token builtin class-name">.</span>
repo status <span class="token builtin class-name">.</span>
</code></pre></div><p>如果我们要给特定的项目创建分支，则：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>repo start BRANCH_NAME PROJECT_NAME
</code></pre></div><p>切换分支还是使用 <code>checkout</code> 命令，但是查看分支可以使用</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch
repo branches
</code></pre></div><p>如果要查看修改，则使用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>repo <span class="token function">diff</span>

<span class="token comment"># or</span>
<span class="token builtin class-name">cd</span> ~/WORKING_DIRECTORY/PROJECT
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span>
</code></pre></div><p>修改完后，我们同步最新改动并提交我们的改动：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>repo <span class="token function">sync</span>
repo upload
</code></pre></div><h3 id="repo-init" tabindex="-1"><a class="header-anchor" href="#repo-init" aria-hidden="true">#</a> repo init</h3><p>我们需要一个 xml 文件来制定 init 的，一般而言这个 xml 文件在远程，可以使用 <code>-u</code> 参数进行指定，官方对此的使用说明如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>repo init <span class="token parameter variable">-u</span> url <span class="token punctuation">[</span>options<span class="token punctuation">]</span>
</code></pre></div><p>在当前目录中安装 Repo。这样会创建一个 <code>.repo/</code> 目录，其中包含存放 Repo 源代码和标准 Android 清单文件的 Git 代码库。</p><p>如果我们要重新 init, 则删除这个 <code>.repo/</code> 目录即可。</p><p>需要注意的是，这个 <code>.repo/</code> 目录是影响到所有得子目录的，这个和 git 的原理类似。</p><p>选项：</p><ul><li><code>-u</code>: 指定从中检索清单代码库的网址。常见清单位于 <code>https://android.googlesource.com/platform/manifest</code>。</li><li><code>-m</code>: 选择代码库中的清单文件。如果未选择清单名称，则默认为 <code>default.xml</code>。</li><li><code>-b</code>：指定修订版本，即特定的 manifest-branch。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>注意</strong>：对于所有剩余的 Repo 命令，当前的工作目录必须是 <code>.repo/</code> 的父目录或该父目录的子目录。</p></div><h2 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset" aria-hidden="true">#</a> Git Reset</h2><p>在某次提交后如果发现自己忘记添加某些文件，或者写错了提交信息，可以使用<code>--amend</code>选项</p><p>一个使用 --amend 的例子：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;initial commit&quot;</span>
<span class="token function">git</span> <span class="token function">add</span> forgotten_file
<span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre></div><p>撤销已暂存的文件</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD reset.md
</code></pre></div><p>舍弃对文件的修改</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>
<span class="token function">git</span> checkout -- <span class="token builtin class-name">.</span>
</code></pre></div><p>！但是要主要到，<code>git checkout</code>是一条非常危险的命令，执行该命令以后，任何对文件作出的修改都会丢失，因为上述命令用之前版本的文件做了覆盖。</p><p>回到远程仓库的状态</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token parameter variable">--all</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> rest <span class="token parameter variable">--hard</span> origin/master
</code></pre></div><p>放弃所有更改</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token builtin class-name">.</span>
</code></pre></div><h3 id="删除新增文件" tabindex="-1"><a class="header-anchor" href="#删除新增文件" aria-hidden="true">#</a> 删除新增文件</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clean <span class="token parameter variable">-xdff</span>
</code></pre></div><p>注意这个是把新增的未保存到缓冲区的文件给删除掉</p><p>如果是改动过的，就继续使用 <code>git checkout – .</code> 就可以了。</p><h2 id="git-config" tabindex="-1"><a class="header-anchor" href="#git-config" aria-hidden="true">#</a> Git Config</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token operator">&lt;</span>useremail<span class="token operator">&gt;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.editor emacs

<span class="token function">git</span> config <span class="token parameter variable">--list</span>
<span class="token function">git</span> config user.name
</code></pre></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token operator">&lt;</span>verb<span class="token operator">&gt;</span>
</code></pre></div><p>cache the config:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper cache
<span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper store
</code></pre></div><p>如果遇到了 443 的问题，则可以重置 git 的配置：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper store
</code></pre></div><h2 id="github-accelerate" tabindex="-1"><a class="header-anchor" href="#github-accelerate" aria-hidden="true">#</a> GitHub Accelerate</h2>`,57),_=a("li",null,[a("p",null,[s("Update the host in "),a("code",null,"C:\\Windows\\System32\\drivers\\etc")])],-1),E={href:"http://tool.chinaz.com/dns",target:"_blank",rel:"noopener noreferrer"},R=a("li",null,[a("p",null,"Found the IP and update hosts as the follow example:")],-1),G=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token number">13.250</span>.177.223 github.com
<span class="token number">151.101</span>.228.133 assets-cdn.github.com
<span class="token number">151.101</span>.73.194 github.global.ssl.fastly.net
</code></pre></div><h2 id="git-clone" tabindex="-1"><a class="header-anchor" href="#git-clone" aria-hidden="true">#</a> Git Clone</h2><p>克隆较慢时使用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> ulr
</code></pre></div><h2 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> Tag</h2><p>show tag:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag
<span class="token function">git</span> tag <span class="token parameter variable">-l</span>
</code></pre></div><p>add tag:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">&quot;my first version&quot;</span>
</code></pre></div><p>push tags to origin:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin v1.0
</code></pre></div><p>强制推送使用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-f</span> origin branch_name
</code></pre></div><h2 id="status" tabindex="-1"><a class="header-anchor" href="#status" aria-hidden="true">#</a> Status</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
<span class="token function">git</span> status <span class="token parameter variable">-s</span>
<span class="token comment"># ??: untrack</span>
<span class="token comment"># M : Modified</span>
<span class="token comment"># A : Modified new file</span>
</code></pre></div><h2 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore" aria-hidden="true">#</a> .gitignore</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> .gitignore
*.<span class="token punctuation">[</span>oa<span class="token punctuation">]</span>
*~

<span class="token comment">#Example</span>
*.a
<span class="token operator">!</span>lib.a <span class="token comment"># 仍然跟踪 lib.a, 即使上一行指令要忽略</span>
/TODO <span class="token comment"># 忽略当前目录的 todo 文件</span>
build/ <span class="token comment"># 忽略 build/ 目录下的所有文件</span>
doc/*.txt <span class="token comment"># 忽略 doc/notes.txt, 而不忽略 doc/server/arch.txt</span>
doc/**/*.pdf <span class="token comment"># 忽略 doc/ 目录下的所有.pdf文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果改动文件不生效的话，使用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;update .gitignore&#39;</span>
</code></pre></div>`,19),w={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},A=t(`<h2 id="differ" tabindex="-1"><a class="header-anchor" href="#differ" aria-hidden="true">#</a> Differ</h2><p>如果想知道具体的变更内容，而不像 <code>git status</code> 那么宽泛，可以使用 <code>git diff</code></p><p>查看有哪些已暂存的内容会进入下一次提交，该命令将暂存的变更与上一次提交的内容相比较:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--staged</span>
<span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span>
</code></pre></div><p>如果要把文件保存在工作目录，但从暂存区移除该文件:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> README
<span class="token function">git</span> <span class="token function">rm</span> log/<span class="token punctuation">\\</span>*.log

<span class="token function">git</span> <span class="token function">mv</span> README.md README
</code></pre></div><p>查看提交历史:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log
<span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token parameter variable">-2</span>
</code></pre></div><p>查看简略信息:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--stat</span>
</code></pre></div><h2 id="remote" tabindex="-1"><a class="header-anchor" href="#remote" aria-hidden="true">#</a> Remote</h2><p>列出远程仓库的简短名称:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote
</code></pre></div><p>显示出Git存储的每个远程仓库对应的 URL:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre></div><p>检查远程仓库，列出远程仓库的 url 地址以及每个分支的跟踪信息：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote show origin
</code></pre></div><p>添加一个远程仓库，并给它起一个简短的名称以便于引用:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
</code></pre></div><p>删除远程仓库</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">rm</span> <span class="token operator">&lt;</span>rep-name<span class="token operator">&gt;</span>
</code></pre></div><p>从远程仓库获取和拉取数据:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch <span class="token punctuation">[</span>remote-name<span class="token punctuation">]</span>
<span class="token comment"># e.g. git fetch pb</span>
</code></pre></div><p>将变更推送到远程仓库:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
</code></pre></div><p>需要注意的一点是，推送变更时需要拥有远程仓库的写权限，并且克隆后没有任何其他人向远程仓库推送过数据。如果别人和你都clone了这个仓库，而他先推送，你后推送，那么你的这次推送会直接被拒绝。你必须先拉取别人的变更，将其整合到你的工作成果中，然后才能推送。</p><h2 id="git-别名" tabindex="-1"><a class="header-anchor" href="#git-别名" aria-hidden="true">#</a> Git 别名</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.co checkout
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.br branch
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.unstage <span class="token string">&#39;reset HEAD --&#39;</span>
<span class="token comment"># git unstage filaA == git reset HEAD --fileA</span>
</code></pre></div><h2 id="git-branch" tabindex="-1"><a class="header-anchor" href="#git-branch" aria-hidden="true">#</a> Git Branch</h2><p>分支意味着偏离开发主线并继续你自己的工作而不影响主线开发，分支机制是Git的“杀手锏”！</p><p>当你创建一个新分支的时候会发生什么？实际上，Git会创建一个可移动的新指针供你使用。</p><p>创建分支:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch testing
</code></pre></div><p>列出所有分支:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch
</code></pre></div><p>切换分支:</p><p><code>checkout</code> 命令会改变 HEAD 指针，使其指向 testing 分支，在 Gi t中，HEAD 是一个指向当前所在的本地分支的指针</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout testing
</code></pre></div><p>分支与合并, 创建并切换到该分支，一般使用这个快速创建分支：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> testing
</code></pre></div><p>切换回master分支:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout master
</code></pre></div><p>合并分支:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge testing
</code></pre></div><p>删除分支:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> testing
</code></pre></div><p>注意到在merge的时候会有提示&quot;fast-forward&quot;，这由于当前的master分支所指向的提交是要并入的testing分支的直接上游，因为Git会将master分支指针向前移动。</p><p>合并冲突处理，配置合并工具：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config merge.tool vimdiff
<span class="token function">git</span> config merge.conflictstyle <span class="token function">diff3</span>
</code></pre></div><h3 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h3><p>查看每个分支上的最新提交:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-v</span>
</code></pre></div><p>查看哪些分支已经合并入当前分支的:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">--merged</span>
<span class="token function">git</span> branch --no-merged
</code></pre></div><p>远程分支</p><p>如果从Git服务器clone到本地，Git的 clone 命令会自动把这台服务器命名为 origin，使用<code>git clone -o &lt;yourname&gt;</code>便可以修改远程仓库的默认名称为：your name/master。</p><p>如果你在本地的 master 分支上进行了一些工作，与此同时，别人向 Git 服务器推送了数据，更新了服务器上的 master 分支，这时你的提交历史就与服务器上的历史产生了偏离。</p><p>于是要与服务器同步，下面的命令会查询 origin 对应的服务器地址，并从服务器取得本地尚未包含的数据，然后更新本地数据库，最后把 origin/master 指针移动到最新的位置上去。</p><p>与服务器同步:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch origin
</code></pre></div><p>与其他人共享serverfix分支:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin serverfix
<span class="token function">git</span> push <span class="token punctuation">(</span>remote<span class="token punctuation">)</span> <span class="token punctuation">(</span>branch<span class="token punctuation">)</span>
</code></pre></div><p>等价于下述代码的省略形式:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin serverfix:serverfix
</code></pre></div><p>第一个为本地分支名，第二个为远程分支名，可把远程分支重命名</p><p>跟踪分支</p><p>当你克隆一个远程仓库时，Git默认情况下会自动地创建跟踪这远程origin/master分支的本地master分支。除此之外，你也可是设置成不跟踪master分支。</p><p><code>git checkout --track origin/serverfix</code></p><p>或者<code>git checkout -b sf origin/serverfix</code></p><p>完成上述命令以后，你的本地sf就会从origin/server上获取数据。</p><p>拉取</p><p><code>git fetch</code>命令会拉取本地没有的远程最新更改数据，但它只会从服务器上拉取数据，然后让你自己进行合并。</p><p><code>git pull</code>命令在大多数情况下基本等同于执行<code>git fetch</code>之后紧跟着执行了<code>git merge</code>命令。</p><p>一般来说，显示地直接使用fetch和merge命令比使用git pull要更好，因为git pull的机制常常使人迷惑。</p><p>删除远程服务器上的master分支:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> serverfix
</code></pre></div><p>上述操作只是删除了远程服务器上的分支指针，Git会保留数据一段时间知道下一次触发垃圾回收。</p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2><hr class="footnotes-sep">`,79),H={class:"footnotes"},C={class:"footnotes-list"},S={id:"footnote1",class:"footnote-item"},y={href:"https://source.android.com/setup/create/coding-tasks",target:"_blank",rel:"noopener noreferrer"},D=a("br",null,null,-1),N={href:"https://source.android.com/setup/develop/repo#init",target:"_blank",rel:"noopener noreferrer"},M=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function O(T,q){const e=c("ExternalLinkIcon");return p(),i("div",null,[r,d,a("p",null,[s("下载软件："),a("a",g,[s("SwitchHosts"),n(e)])]),h,a("div",u,[b,f,k,a("p",null,[s("URL 地址："),a("a",v,[s("https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts"),n(e)])]),m]),x,a("ol",null,[_,a("li",null,[a("p",null,[s("Visit  "),a("a",E,[s("http://tool.chinaz.com/dns"),n(e)])])]),R]),G,a("p",null,[s("除此之外，还可以参考"),a("a",w,[s("GitHub官方示例"),n(e)])]),A,a("section",H,[a("ol",C,[a("li",S,[a("p",null,[a("a",y,[s("Source Control Workflow"),n(e)]),D,s(" [^2 ]: "),a("a",N,[s("Repo 命令参考资料"),n(e)]),s(),M])])])])])}const P=o(l,[["render",O],["__file","git.html.vue"]]);export{P as default};
