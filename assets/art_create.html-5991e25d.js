const n=JSON.parse('{"key":"v-3704c261","path":"/java/art/art_create.html","title":"ART Create","lang":"zh-CN","frontmatter":{"title":"ART Create","date":"2022-10-28T00:00:00.000Z","tag":["jvm","java"],"category":["JAVA"],"description":"Abstract Art 的创建过程是一个很复杂的命题，所以我们单独开设一章来对这个过程进行学习。 @todo 增加全局的流程图。 Art Create JNI_CreateJavaVM 当我们选择了 ART 运行时，Zygote 进程在启动过程中，会调用 libart.so 里面的函数 JNI_CreateVM 来创建一个 art 虚拟机，这个函数的实现如下： // art/runtime/jni/java_vm_ext.cc // JNI Invocation interface. extern \\"C\\" jint JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) { ScopedTrace trace(__FUNCTION__); const JavaVMInitArgs* args = static_cast&lt;JavaVMInitArgs*&gt;(vm_args); if (JavaVMExt::IsBadJniVersion(args-&gt;version)) { LOG(ERROR) &lt;&lt; \\"Bad JNI version passed to CreateJavaVM: \\" &lt;&lt; args-&gt;version; return JNI_EVERSION; } RuntimeOptions options; for (int i = 0; i &lt; args-&gt;nOptions; ++i) { JavaVMOption* option = &amp;args-&gt;options[i]; options.push_back(std::make_pair(std::string(option-&gt;optionString), option-&gt;extraInfo)); } bool ignore_unrecognized = args-&gt;ignoreUnrecognized; if (!Runtime::Create(options, ignore_unrecognized)) { return JNI_ERR; } // Initialize native loader. This step makes sure we have // everything set up before we start using JNI. android::InitializeNativeLoader(); Runtime* runtime = Runtime::Current(); bool started = runtime-&gt;Start(); if (!started) { delete Thread::Current()-&gt;GetJniEnv(); delete runtime-&gt;GetJavaVM(); LOG(WARNING) &lt;&lt; \\"CreateJavaVM failed\\"; return JNI_ERR; } *p_env = Thread::Current()-&gt;GetJniEnv(); *p_vm = runtime-&gt;GetJavaVM(); return JNI_OK; }","head":[["meta",{"property":"og:url","content":"https://vueblog.weigao.cc/java/art/art_create.html"}],["meta",{"property":"og:site_name","content":"WW"}],["meta",{"property":"og:title","content":"ART Create"}],["meta",{"property":"og:description","content":"Abstract Art 的创建过程是一个很复杂的命题，所以我们单独开设一章来对这个过程进行学习。 @todo 增加全局的流程图。 Art Create JNI_CreateJavaVM 当我们选择了 ART 运行时，Zygote 进程在启动过程中，会调用 libart.so 里面的函数 JNI_CreateVM 来创建一个 art 虚拟机，这个函数的实现如下： // art/runtime/jni/java_vm_ext.cc // JNI Invocation interface. extern \\"C\\" jint JNI_CreateJavaVM(JavaVM** p_vm, JNIEnv** p_env, void* vm_args) { ScopedTrace trace(__FUNCTION__); const JavaVMInitArgs* args = static_cast&lt;JavaVMInitArgs*&gt;(vm_args); if (JavaVMExt::IsBadJniVersion(args-&gt;version)) { LOG(ERROR) &lt;&lt; \\"Bad JNI version passed to CreateJavaVM: \\" &lt;&lt; args-&gt;version; return JNI_EVERSION; } RuntimeOptions options; for (int i = 0; i &lt; args-&gt;nOptions; ++i) { JavaVMOption* option = &amp;args-&gt;options[i]; options.push_back(std::make_pair(std::string(option-&gt;optionString), option-&gt;extraInfo)); } bool ignore_unrecognized = args-&gt;ignoreUnrecognized; if (!Runtime::Create(options, ignore_unrecognized)) { return JNI_ERR; } // Initialize native loader. This step makes sure we have // everything set up before we start using JNI. android::InitializeNativeLoader(); Runtime* runtime = Runtime::Current(); bool started = runtime-&gt;Start(); if (!started) { delete Thread::Current()-&gt;GetJniEnv(); delete runtime-&gt;GetJavaVM(); LOG(WARNING) &lt;&lt; \\"CreateJavaVM failed\\"; return JNI_ERR; } *p_env = Thread::Current()-&gt;GetJniEnv(); *p_vm = runtime-&gt;GetJavaVM(); return JNI_OK; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Someone"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2022-10-28T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ART Create\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-28T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Someone\\",\\"url\\":\\"https://www.weigao.cc\\"}]}"]]},"headers":[{"level":2,"title":"Abstract","slug":"abstract","link":"#abstract","children":[]},{"level":2,"title":"Art Create","slug":"art-create","link":"#art-create","children":[{"level":3,"title":"JNI_CreateJavaVM","slug":"jni-createjavavm","link":"#jni-createjavavm","children":[]},{"level":3,"title":"Runtime::Create","slug":"runtime-create","link":"#runtime-create","children":[]},{"level":3,"title":"Runtime::Init()","slug":"runtime-init","link":"#runtime-init","children":[]}]}],"git":{},"readingTime":{"minutes":2.15,"words":644},"filePathRelative":"java/art/art_create.md","localizedDate":"2022年10月28日","excerpt":"<h2> Abstract</h2>\\n<p>Art 的创建过程是一个很复杂的命题，所以我们单独开设一章来对这个过程进行学习。</p>\\n<p>@todo 增加全局的流程图。</p>\\n<h2> Art Create</h2>\\n<h3> JNI_CreateJavaVM</h3>\\n<p>当我们选择了 ART 运行时，Zygote 进程在启动过程中，会调用 <code>libart.so</code> 里面的函数 <code>JNI_CreateVM</code> 来<strong>创建一个 art 虚拟机</strong>，这个函数的实现如下：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// art/runtime/jni/java_vm_ext.cc</span>\\n<span class=\\"token comment\\">// JNI Invocation interface.</span>\\n\\nextern <span class=\\"token string\\">\\"C\\"</span> jint <span class=\\"token class-name\\">JNI_CreateJavaVM</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">JavaVM</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span> p_vm<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">JNIEnv</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span> p_env<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> vm_args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">ScopedTrace</span> <span class=\\"token function\\">trace</span><span class=\\"token punctuation\\">(</span>__FUNCTION__<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token class-name\\">JavaVMInitArgs</span><span class=\\"token operator\\">*</span> args <span class=\\"token operator\\">=</span> static_cast<span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">JavaVMInitArgs</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>vm_args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">JavaVMExt</span><span class=\\"token operator\\">::</span><span class=\\"token class-name\\">IsBadJniVersion</span><span class=\\"token punctuation\\">(</span>args<span class=\\"token operator\\">-&gt;</span>version<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">LOG</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">ERROR</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Bad JNI version passed to CreateJavaVM: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> args<span class=\\"token operator\\">-&gt;</span>version<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token constant\\">JNI_EVERSION</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token class-name\\">RuntimeOptions</span> options<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> args<span class=\\"token operator\\">-&gt;</span>nOptions<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">JavaVMOption</span><span class=\\"token operator\\">*</span> option <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>args<span class=\\"token operator\\">-&gt;</span>options<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    options<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push_back</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token operator\\">::</span><span class=\\"token function\\">make_pair</span><span class=\\"token punctuation\\">(</span>std<span class=\\"token operator\\">::</span><span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>option<span class=\\"token operator\\">-&gt;</span>optionString<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> option<span class=\\"token operator\\">-&gt;</span>extraInfo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  bool ignore_unrecognized <span class=\\"token operator\\">=</span> args<span class=\\"token operator\\">-&gt;</span>ignoreUnrecognized<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token class-name\\">Runtime</span><span class=\\"token operator\\">::</span><span class=\\"token class-name\\">Create</span><span class=\\"token punctuation\\">(</span>options<span class=\\"token punctuation\\">,</span> ignore_unrecognized<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token constant\\">JNI_ERR</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// Initialize native loader. This step makes sure we have</span>\\n  <span class=\\"token comment\\">// everything set up before we start using JNI.</span>\\n  android<span class=\\"token operator\\">::</span><span class=\\"token class-name\\">InitializeNativeLoader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token class-name\\">Runtime</span><span class=\\"token operator\\">*</span> runtime <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Runtime</span><span class=\\"token operator\\">::</span><span class=\\"token class-name\\">Current</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  bool started <span class=\\"token operator\\">=</span> runtime<span class=\\"token operator\\">-&gt;</span><span class=\\"token class-name\\">Start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>started<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    delete <span class=\\"token class-name\\">Thread</span><span class=\\"token operator\\">::</span><span class=\\"token class-name\\">Current</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token class-name\\">GetJniEnv</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    delete runtime<span class=\\"token operator\\">-&gt;</span><span class=\\"token class-name\\">GetJavaVM</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">LOG</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">WARNING</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"CreateJavaVM failed\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token constant\\">JNI_ERR</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token operator\\">*</span>p_env <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token operator\\">::</span><span class=\\"token class-name\\">Current</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token class-name\\">GetJniEnv</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token operator\\">*</span>p_vm <span class=\\"token operator\\">=</span> runtime<span class=\\"token operator\\">-&gt;</span><span class=\\"token class-name\\">GetJavaVM</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token constant\\">JNI_OK</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
