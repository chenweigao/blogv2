const e=JSON.parse('{"key":"v-8bc09bc2","path":"/blogs/Cloud_Server/linux_os.html","title":"Linux 进程和线程","lang":"zh-CN","frontmatter":{"title":"Linux 进程和线程","date":"2017-06-08T00:00:00.000Z","tag":["Linux","Thread"],"category":["Linux"],"description":"Thread and Process 进程 进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有自己的一个地址空间，至少有 5 种基本状态，他们分别是：初始态，就绪态，执行态，等待态，终止态。 线程 线程是 CPU 调度和分派的基本单位，它可以与同属一个进程的其他线程共享进程所拥有的全部资源。 联系 线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。 区别 根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。 开销方面：每个进程都有独立的代码和数据空间（进程上下文），程序之间切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每一个线程都有自己独立的 运行栈 和 程序计数器（PC），线程之间的切换开销小。 内存分配：系统在运行时为每个进程分配不同的内存空间；而对线程而言，除了 CPU 外，系统不会为线程分配内存，线程组之间只能共享资源。 包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程是多个线程共同完成的；线程是进程的一部分，所以线程也被成为轻量级进程。 并发和隔离 操作系统中有两个重要的概念：并发和隔离。 并发是为了尽量让硬件利用率高，线程是为了在系统层面做到并发，线程上下文切换效率比进程上下文切换效率高很多，这样可以提高并发效率。 隔离是并发以后要解决的重要问题，计算机的资源一般是共享的，隔离能保障资源的回收，不影响其他代码的使用。","head":[["meta",{"property":"og:url","content":"https://vueblog.weigao.cc/blogs/Cloud_Server/linux_os.html"}],["meta",{"property":"og:site_name","content":"WW"}],["meta",{"property":"og:title","content":"Linux 进程和线程"}],["meta",{"property":"og:description","content":"Thread and Process 进程 进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有自己的一个地址空间，至少有 5 种基本状态，他们分别是：初始态，就绪态，执行态，等待态，终止态。 线程 线程是 CPU 调度和分派的基本单位，它可以与同属一个进程的其他线程共享进程所拥有的全部资源。 联系 线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。 区别 根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。 开销方面：每个进程都有独立的代码和数据空间（进程上下文），程序之间切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每一个线程都有自己独立的 运行栈 和 程序计数器（PC），线程之间的切换开销小。 内存分配：系统在运行时为每个进程分配不同的内存空间；而对线程而言，除了 CPU 外，系统不会为线程分配内存，线程组之间只能共享资源。 包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程是多个线程共同完成的；线程是进程的一部分，所以线程也被成为轻量级进程。 并发和隔离 操作系统中有两个重要的概念：并发和隔离。 并发是为了尽量让硬件利用率高，线程是为了在系统层面做到并发，线程上下文切换效率比进程上下文切换效率高很多，这样可以提高并发效率。 隔离是并发以后要解决的重要问题，计算机的资源一般是共享的，隔离能保障资源的回收，不影响其他代码的使用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Someone"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:published_time","content":"2017-06-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux 进程和线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-06-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Someone\\",\\"url\\":\\"https://www.weigao.cc\\"}]}"]]},"headers":[{"level":2,"title":"Thread and Process","slug":"thread-and-process","link":"#thread-and-process","children":[]},{"level":2,"title":"多进程","slug":"多进程","link":"#多进程","children":[{"level":3,"title":"fork()","slug":"fork","link":"#fork","children":[]},{"level":3,"title":"exec()","slug":"exec","link":"#exec","children":[]}]},{"level":2,"title":"进程间通信","slug":"进程间通信","link":"#进程间通信","children":[{"level":3,"title":"命名管道 FIFO","slug":"命名管道-fifo","link":"#命名管道-fifo","children":[]},{"level":3,"title":"IPC 消息","slug":"ipc-消息","link":"#ipc-消息","children":[]},{"level":3,"title":"共享内存","slug":"共享内存","link":"#共享内存","children":[]}]},{"level":2,"title":"SSH","slug":"ssh","link":"#ssh","children":[]},{"level":2,"title":"Python File Server","slug":"python-file-server","link":"#python-file-server","children":[]},{"level":2,"title":"Program Status","slug":"program-status","link":"#program-status","children":[]},{"level":2,"title":"System Information","slug":"system-information","link":"#system-information","children":[]},{"level":2,"title":"Add Choice for User - Read -p","slug":"add-choice-for-user-read-p","link":"#add-choice-for-user-read-p","children":[]},{"level":2,"title":"Shell Array","slug":"shell-array","link":"#shell-array","children":[]},{"level":2,"title":"Sed","slug":"sed","link":"#sed","children":[]},{"level":2,"title":"tr and awk","slug":"tr-and-awk","link":"#tr-and-awk","children":[]},{"level":2,"title":"tar","slug":"tar","link":"#tar","children":[]},{"level":2,"title":"查看端口号","slug":"查看端口号","link":"#查看端口号","children":[]},{"level":2,"title":"守护进程","slug":"守护进程","link":"#守护进程","children":[]}],"git":{},"readingTime":{"minutes":7.86,"words":2357},"filePathRelative":"blogs/Cloud&Server/linux_os.md","localizedDate":"2017年6月8日","excerpt":"<h2> Thread and Process</h2>\\n<ol>\\n<li>\\n<p>进程</p>\\n<p>进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有自己的一个地址空间，至少有 5 种基本状态，他们分别是：初始态，就绪态，执行态，等待态，终止态。</p>\\n</li>\\n<li>\\n<p>线程</p>\\n<p>线程是 CPU 调度和分派的基本单位，它可以与同属一个进程的其他线程共享进程所拥有的全部资源。</p>\\n</li>\\n<li>\\n<p>联系</p>\\n<p>线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p>\\n</li>\\n<li>\\n<p>区别</p>\\n<p>根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。</p>\\n<p>开销方面：每个进程都有独立的代码和数据空间（进程上下文），程序之间切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每一个线程都有自己独立的 <strong>运行栈</strong> 和 <strong>程序计数器（PC）</strong>，线程之间的切换开销小。</p>\\n<p>内存分配：系统在运行时为每个进程分配不同的内存空间；而对线程而言，除了 CPU 外，系统不会为线程分配内存，线程组之间只能共享资源。</p>\\n<p>包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程是多个线程共同完成的；线程是进程的一部分，所以线程也被成为轻量级进程。</p>\\n</li>\\n<li>\\n<p>并发和隔离</p>\\n<p>操作系统中有两个重要的概念：并发和隔离。</p>\\n<p>并发是为了尽量让硬件利用率高，线程是为了在系统层面做到并发，线程上下文切换效率比进程上下文切换效率高很多，这样可以提高并发效率。</p>\\n<p>隔离是并发以后要解决的重要问题，计算机的资源一般是共享的，隔离能保障资源的回收，不影响其他代码的使用。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
