import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e as t,a as p,f as e}from"./app-22cda79c.js";const o={},c=p("p",null,"本文主要研究 pandas, 主要是一些常见的用法和笔记。",-1),l=e(`<h2 id="dataframe" tabindex="-1"><a class="header-anchor" href="#dataframe" aria-hidden="true">#</a> DataFrame</h2><p>DataFrame 是 pandas 中常用的数据结构，掌握其用法对整体 pandas 使用的理解十分重要。</p><h3 id="read-csv" tabindex="-1"><a class="header-anchor" href="#read-csv" aria-hidden="true">#</a> read_csv()</h3><p>💚💚💚 不只是可以读 csv 哦。</p><p>在实际场景中，笔者存在一个需要读取大的 txt 文件的操作，使用 <code>read_csv()</code> 接口可以实现这个功能，在项目中的示例代码如下所示：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token keyword">def</span> <span class="token function">get_all_pattern_pandas</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
    all_lines <span class="token operator">=</span> df<span class="token punctuation">.</span>itertuples<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> rows <span class="token keyword">in</span> more_itertools<span class="token punctuation">.</span>grouper<span class="token punctuation">(</span>all_lines<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pattern_len<span class="token punctuation">,</span> incomplete<span class="token operator">=</span><span class="token string">&#39;ignore&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
</code></pre></div><p>上述代码中有些细节需要注意：</p><ol><li><code>pd.read_csv()</code> 返回了 df 对象；我们传入了 <code>header=None</code> 可以使得不产生制表的 header, 而 <code>sep=&#39;\\t&#39;</code> 就是分割 txt 文件常用的分割符</li><li><code>df.itertuples()</code> 可以产生 df 的迭代器对象，是比较快速的迭代方法</li><li><code>more_itertools.grouper()</code> 是滑动窗口的接口，可以参考 <em>&lt;Itertools&gt;</em> 那篇文章</li></ol><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><h3 id="获取某列的数据" tabindex="-1"><a class="header-anchor" href="#获取某列的数据" aria-hidden="true">#</a> 获取某列的数据</h3><p>我们有时候可能只需要获取某一列的数据，其用法如下：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">.</span>application_log_file<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_html<span class="token punctuation">(</span><span class="token string">&#39;tiktok.html&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>在例子中，我们使用空格进行分割，然后拿到第 16 列的数据；注意经过测试，这个数组是不能指定 -1 等值的，只能从前往后开始数。</p>`,13);function u(i,r){return n(),s("div",null,[c,t(" more "),l])}const h=a(o,[["render",u],["__file","pandas.html.vue"]]);export{h as default};
