const n=JSON.parse('{"key":"v-8f008b74","path":"/architecture/arm/arm_inline_assembly.html","title":"Arm In-line Assembly","lang":"zh-CN","frontmatter":{"title":"Arm In-line Assembly","date":"2022-12-03T00:00:00.000Z","category":["Arm"],"description":"__asm Example[1]: #include &lt;stdio.h&gt; int add(int i, int j) { int res = 0; __asm (\\"ADD %[result], %[input_i], %[input_j]\\" : [result] \\"=r\\" (res) : [input_i] \\"r\\" (i), [input_j] \\"r\\" (j) ); return res; } int main(void) { int a = 1; int b = 2; int c = 0; c = add(a,b); printf(\\"Result of %d + %d = %d\\\\n\\", a, b, c); } 我们仔细研究上述的例子，可以看到，其内嵌了一条 ADD 指令，其语法如下所示： __asm [volatile] (code); /* Basic inline assembly syntax */ 其中的 code 就是我们需要内嵌的汇编代码，其中 [volatile] 是可选的，后续我们再对此进行说明。 如果将 code 展开的话，如下所示： /* Extended inline assembly syntax */ __asm [volatile] (code_template : output_operand_list [: input_operand_list [: clobbered_register_list]] ); 我们总共有 3 个 ”:“, 每一个后面都有不同的含义，下面对其进行具体说明。（注意 [] 符号包含住表示的是这个参数是可选的）","head":[["meta",{"property":"og:url","content":"https://vueblog.weigao.cc/architecture/arm/arm_inline_assembly.html"}],["meta",{"property":"og:site_name","content":"WW"}],["meta",{"property":"og:title","content":"Arm In-line Assembly"}],["meta",{"property":"og:description","content":"__asm Example[1]: #include &lt;stdio.h&gt; int add(int i, int j) { int res = 0; __asm (\\"ADD %[result], %[input_i], %[input_j]\\" : [result] \\"=r\\" (res) : [input_i] \\"r\\" (i), [input_j] \\"r\\" (j) ); return res; } int main(void) { int a = 1; int b = 2; int c = 0; c = add(a,b); printf(\\"Result of %d + %d = %d\\\\n\\", a, b, c); } 我们仔细研究上述的例子，可以看到，其内嵌了一条 ADD 指令，其语法如下所示： __asm [volatile] (code); /* Basic inline assembly syntax */ 其中的 code 就是我们需要内嵌的汇编代码，其中 [volatile] 是可选的，后续我们再对此进行说明。 如果将 code 展开的话，如下所示： /* Extended inline assembly syntax */ __asm [volatile] (code_template : output_operand_list [: input_operand_list [: clobbered_register_list]] ); 我们总共有 3 个 ”:“, 每一个后面都有不同的含义，下面对其进行具体说明。（注意 [] 符号包含住表示的是这个参数是可选的）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Someone"}],["meta",{"property":"article:published_time","content":"2022-12-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Arm In-line Assembly\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Someone\\",\\"url\\":\\"https://www.weigao.cc\\"}]}"]]},"headers":[{"level":2,"title":"__asm","slug":"asm","link":"#asm","children":[{"level":3,"title":"output","slug":"output","link":"#output","children":[]},{"level":3,"title":"input","slug":"input","link":"#input","children":[]},{"level":3,"title":"clobbered_register_list","slug":"clobbered-register-list","link":"#clobbered-register-list","children":[]}]},{"level":2,"title":"Real Example","slug":"real-example","link":"#real-example","children":[{"level":3,"title":"prfm","slug":"prfm","link":"#prfm","children":[]},{"level":3,"title":"__builtin_prefetch()","slug":"builtin-prefetch","link":"#builtin-prefetch","children":[]},{"level":3,"title":"prefetch in for loop","slug":"prefetch-in-for-loop","link":"#prefetch-in-for-loop","children":[]},{"level":3,"title":"mrs pmu","slug":"mrs-pmu","link":"#mrs-pmu","children":[]},{"level":3,"title":"memcpy","slug":"memcpy","link":"#memcpy","children":[]}]}],"git":{},"readingTime":{"minutes":3.28,"words":984},"filePathRelative":"architecture/arm/arm_inline_assembly.md","localizedDate":"2022年12月3日","excerpt":"<h2> __asm</h2>\\n<p>Example<sup class=\\"footnote-ref\\"><a href=\\"#footnote1\\">[1]</a><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\"></a></sup><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\">:</a></p><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\">\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> j<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">int</span> res <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">__asm</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ADD %[result], %[input_i], %[input_j]\\"</span>\\n    <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>result<span class=\\"token punctuation\\">]</span> <span class=\\"token string\\">\\"=r\\"</span> <span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>input_i<span class=\\"token punctuation\\">]</span> <span class=\\"token string\\">\\"r\\"</span> <span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>input_j<span class=\\"token punctuation\\">]</span> <span class=\\"token string\\">\\"r\\"</span> <span class=\\"token punctuation\\">(</span>j<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">int</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">int</span> c <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n  c <span class=\\"token operator\\">=</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Result of %d + %d = %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">,</span> c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>我们仔细研究上述的例子，可以看到，其内嵌了一条 <code>ADD</code> 指令，其语法如下所示：</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code>__asm <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">volatile</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">(</span>code<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">/* Basic inline assembly syntax */</span>\\n</code></pre></div><p>其中的 code 就是我们需要内嵌的汇编代码，其中 <code>[volatile]</code> 是可选的，后续我们再对此进行说明。</p>\\n<p>如果将 code 展开的话，如下所示：</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">/* Extended inline assembly syntax */</span> \\n__asm <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">volatile</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">(</span>code_template \\n       <span class=\\"token operator\\">:</span> output_operand_list \\n      <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">:</span> input_operand_list \\n      <span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">:</span> clobbered_register_list<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span> \\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div><p>我们总共有 3 个 <strong>”:“</strong>,  每一个后面都有不同的含义，下面对其进行具体说明。（注意 <em>[]</em> 符号包含住表示的是这个参数是可选的）</p>\\n</a>","autoDesc":true}');export{n as data};
