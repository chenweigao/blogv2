import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as t,e as r,a,b as s,d,f as n}from"./app-22cda79c.js";const c={},i=a("p",null,"本文主要介绍了 MySql 中涉及到的工具软件，以及 MySql 的查找、插入和删除操作；除此之外还介绍了简单的索引知识和存储引擎；还列举了 DAG 图的设计代码。",-1),k=n(`<h2 id="tools-mysql-工具软件" tabindex="-1"><a class="header-anchor" href="#tools-mysql-工具软件" aria-hidden="true">#</a> Tools: MySql 工具软件</h2><ol><li>客户端数据库可视化查询软件 SQLyog</li><li>SQL Server 启动程序 XAMPP</li></ol><h2 id="mysql-command" tabindex="-1"><a class="header-anchor" href="#mysql-command" aria-hidden="true">#</a> MySQL Command</h2><h3 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> Login</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql <span class="token operator">-</span>uroot

<span class="token keyword">use</span> soc<span class="token punctuation">;</span>
<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>

<span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token operator">in</span> table_name<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">limit</span> <span class="token number">1</span> \\G<span class="token punctuation">;</span>
</code></pre></div><h3 id="drop" tabindex="-1"><a class="header-anchor" href="#drop" aria-hidden="true">#</a> DROP</h3><p>删除：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> db_name

<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name
</code></pre></div><p>如果想删除表中所有的数据但是不影响到表的结构：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> table_name
</code></pre></div><h3 id="alter" tabindex="-1"><a class="header-anchor" href="#alter" aria-hidden="true">#</a> ALTER</h3><p>在数据库中插入新的 table 或者说新的列：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name
<span class="token keyword">ADD</span> column_name datatype

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> edge
<span class="token keyword">ADD</span> ancestor <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>
</code></pre></div><p>删除同理：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> edge 
<span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> ancestor
</code></pre></div><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> JOIN</h3><p>在 MySQL 中，主要是 <code>INNER JOIN</code>, 表示内连接，可以同时连接两个表进行组合查询：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> table_name1
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table_name2 
<span class="token keyword">ON</span> table_name1<span class="token punctuation">.</span>column_name<span class="token operator">=</span>table_name2<span class="token punctuation">.</span>column_name
</code></pre></div><h2 id="mysql-vs-dag" tabindex="-1"><a class="header-anchor" href="#mysql-vs-dag" aria-hidden="true">#</a> MySql vs DAG</h2>`,19),h={href:"https://www.codeproject.com/Articles/22824/A-Model-to-Represent-Directed-Acyclic-Graphs-DAG-o",target:"_blank",rel:"noopener noreferrer"},u=n(`<p>&lt;&lt;&lt; @/docs/.vuepress/code/sql/DAG.sql</p><h2 id="index-索引" tabindex="-1"><a class="header-anchor" href="#index-索引" aria-hidden="true">#</a> Index 索引</h2><h3 id="explain" tabindex="-1"><a class="header-anchor" href="#explain" aria-hidden="true">#</a> explain</h3><p>对于建立的索引，想查看其性能如何：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">tables</span> <span class="token keyword">where</span> c1<span class="token operator">=</span><span class="token string">&#39;a1&#39;</span><span class="token operator">and</span> c2<span class="token operator">=</span><span class="token string">&#39;c2&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>使用 explain 命令即可。</p><h3 id="索引类型" tabindex="-1"><a class="header-anchor" href="#索引类型" aria-hidden="true">#</a> 索引类型</h3><ol><li>唯一索引 -- UNIQUE</li></ol><p>此索引的每一个索引值只对应唯一的数据记录；索引的值必须唯一，但是允许有空值（注意和主键不同）。</p><ol start="2"><li><p>主键索引</p></li><li><p>组合索引</p></li><li><p>全文索引</p></li></ol><p>非常消耗磁盘空间</p><h3 id="索引内部数据结构" tabindex="-1"><a class="header-anchor" href="#索引内部数据结构" aria-hidden="true">#</a> 索引内部数据结构</h3><p>MySQL 数据库可以分为三种类型，分别为：</p><ol><li>BTree B+Tree</li></ol><p>B 树，即平衡二叉树，是一个二叉树，查找的时候使用二分查找。<br> B+ 树，Mysql 的索引主要实现结构。</p><ol start="2"><li>散列索引</li></ol><p>通过 hash 函数来定位的一种索引。</p><ol start="3"><li>位图索引</li></ol><p>位图索引是一个针对多个字段的简单查询设计一种特殊的索引，适用范围比较小，只适用于字段值固定并且值的种类很少的情况。比如说性别，只有男和女，或者状态等等。</p><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> 存储引擎</h2><h3 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb" aria-hidden="true">#</a> InnoDB</h3><p>InnoDB 默认是事务存储引擎，默认。</p><p>使用 InnoDB 的时候，会将数据表分为 .frm 和 ibd 两个文件进行存储。</p><p><strong>行锁</strong>设计、支持外检，默认读取操作不会产生锁。</p><p>存储引擎采用聚集(clustered)的方式，每张表都是按照主键的形式进行存储的。</p><h3 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam" aria-hidden="true">#</a> MyISAM</h3><p>不支持事务，<strong>表锁</strong>设计，支持全文索引，不支持事务。</p><p>索引文件 .MYI(MyIndex) 和 数据文件 .MYD(MyData)分离</p><p>缓冲池值缓存索引文件，而不缓存数据文件。</p>`,29);function y(m,w){const e=l("ExternalLinkIcon");return p(),t("div",null,[i,r(" more "),k,a("p",null,[a("a",h,[s("可以参考这一篇博客，讲述了如何使用 MySql + 邻接表存储一个 DAG"),d(e)]),s("，代码如下所示：")]),u])}const q=o(c,[["render",y],["__file","mysql.html.vue"]]);export{q as default};
