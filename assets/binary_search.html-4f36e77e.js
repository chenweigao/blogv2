import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as s,d as t,f as a}from"./app-22cda79c.js";const i="/assets/binary_search_1-bf6a2b00.png",r="/assets/binary_search_2-237baa0d.png",u="/assets/binary_search_3-d6b477be.png",k={},d=a(`<h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><h3 id="_1-二分搜索模板" tabindex="-1"><a class="header-anchor" href="#_1-二分搜索模板" aria-hidden="true">#</a> 1. 二分搜索模板</h3><h3 id="_1-1-基本的二分搜索算法" tabindex="-1"><a class="header-anchor" href="#_1-1-基本的二分搜索算法" aria-hidden="true">#</a> 1.1 基本的二分搜索算法</h3><ol><li><p>手工实现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid

        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 Python <code>bisect</code> 库</p><div class="language-python" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">search_2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>
        <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
            <span class="token keyword">return</span> res
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre></div></li></ol><h3 id="_1-2-寻找左侧边界的二分搜索" tabindex="-1"><a class="header-anchor" href="#_1-2-寻找左侧边界的二分搜索" aria-hidden="true">#</a> 1.2 寻找左侧边界的二分搜索</h3><ol><li><p>手工实现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                <span class="token comment"># 暂时不能返回，需要收缩右边界，锁定左侧边界</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token comment"># 检查越界情况。注意这边下面两个条件是二选一的</span>
        <span class="token keyword">if</span> l <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token keyword">or</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">return</span> l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>bisect</code></p><p>手工实现在很多情况下都需要调试，比较慢，因此使用 <code>bisect</code> 比较方便，其使用方式如下：</p><ul><li><p>找到 <em>Find rightmost value less than target</em>：找到小于目标元素，离目标元素最近的元素（肯定在左边）。如 <code>[-1, 1, 3, 5, 9, 12]</code> 目标元素 2, 则返回了 1，表示 2 可以插入到 1 和 3 之间。对应的下标 <code>res - 1</code> 就是 1 的下标。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">search2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>
        <span class="token keyword">if</span> res<span class="token punctuation">:</span>
            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre></div></li><li><p>找到 <em>Find rightmost value less than or equal to target</em></p><div class="language-python" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">search3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span>
        <span class="token keyword">if</span> res<span class="token punctuation">:</span>
            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre></div></li></ul></li></ol><h3 id="_1-3-寻找右侧边界的二分搜索" tabindex="-1"><a class="header-anchor" href="#_1-3-寻找右侧边界的二分搜索" aria-hidden="true">#</a> 1.3 寻找右侧边界的二分搜索</h3><ol><li><p>手工实现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                <span class="token comment"># 暂时不能返回，需要收缩左边界，锁定右侧边界</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token comment"># 检查越界情况。注意这边下面两个条件是二选一的</span>
        <span class="token keyword">if</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">return</span> r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用库</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">find_gt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">&#39;Find leftmost value greater than x&#39;</span>
    i <span class="token operator">=</span> bisect_right<span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
    <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">raise</span> ValueError

<span class="token keyword">def</span> <span class="token function">find_ge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">&#39;Find leftmost item greater than or equal to x&#39;</span>
    i <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
    <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">raise</span> ValueError
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_1-3-参考" tabindex="-1"><a class="header-anchor" href="#_1-3-参考" aria-hidden="true">#</a> 1.3 参考</h3><p>在二分查找中，要特别注意边界的问题，二分查找的边界，分为 <code>[left, right)</code> 和 <code>[left, right]</code>.</p><ul><li>初始化时，形式为 <code>left = 0, right = n</code>, 其中 <code>n</code> 表示数组的长度，由于数组取不到下标 <code>n</code>, 故为左闭右开区间；</li><li>初始化时，形式为 <code>left = 0, right = n - 1</code>, 故为左闭右闭区间。</li></ul><div class="hint-container danger"><p class="hint-container-title">bug!!!</p><p>对于左闭右开区间(<code>[left, right)</code> )而言，应注意：</p><p>在写代码时，应当注意边界条件：</p><p>如果初始化为左闭右开区间，则当 <code>mid</code> 的值小于要查找的值的时候，<code>left = mid + 1</code> 是正确的</p><p>而当 <code>mid</code> 的值大于要查找的值的时候（这时候需要向左查找），此时如果让 <code>right</code> 赋值为 <code>mid - 1</code>, 则有可能存在 <code>mid - 1</code> 正好是要查找的值的情况，要十分慎重。</p></div>`,12),m={href:"https://github.com/chenweigao/_code/blob/master/cpp/binary_search.cpp",target:"_blank",rel:"noopener noreferrer"},v=a('<ol><li>使用左右闭区间初始化，查找后条件应当变成：<code>left = mid + 1</code> and <code>right = mid -1</code>, 否则会出现死循环；</li><li>使用左闭右开区间初始化，查找后条件应当是：<code>left = mid + 1</code> and <code>right = mid</code>;</li><li><code>left</code> 初值为 <code>-1</code>, 循环条件使用 <code>while(left + 1 != right)</code>;</li><li>对边界条件专门进行判断。</li></ol><h2 id="二分查找思路整理" tabindex="-1"><a class="header-anchor" href="#二分查找思路整理" aria-hidden="true">#</a> 二分查找思路整理</h2><p>有下面的例子，可以分为四种问题，提出二分查找：</p><p><img src="'+i+'" alt="binary_search_1"></p><p>从一个新的角度区理解这个问题，该问题可以变为：<strong>找出图中的蓝红边界，即求出未知数K</strong>。</p><p><img src="'+r+`" alt="binary_search_2"></p><p>针对此问题，可以写出伪代码如下所示：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> N
<span class="token keyword">while</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> r
  m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> 取下界
  <span class="token keyword">if</span> isBlue<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
    l <span class="token operator">=</span> m
  <span class="token keyword">else</span>
    r <span class="token operator">=</span> m
<span class="token keyword">return</span> l <span class="token keyword">or</span> r
</code></pre></div><p>有了以上的伪代码，图1 中的问题答案分别为：</p><p><img src="`+u+'" alt="binary_search_3"></p>',10),b={href:"https://www.bilibili.com/video/BV1d54y1q7k7",target:"_blank",rel:"noopener noreferrer"},h=a(`<h2 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><h3 id="wiki-伪代码" tabindex="-1"><a class="header-anchor" href="#wiki-伪代码" aria-hidden="true">#</a> wiki 伪代码</h3><div class="hint-container tip"><p class="hint-container-title">记住口诀</p><p><strong>mid 在前，先小后大，先左后右</strong></p><p>解析：mid 总是在比较的左边：mid &lt; target; 先写 mid 小于，对应左边 l = mid + 1; 再写 mid 大于，对应右边。</p></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>function <span class="token function">binary_search</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> n<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token operator">:</span>
    L <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">0</span>
    R <span class="token operator">:</span><span class="token operator">=</span> n − <span class="token number">1</span>
    <span class="token keyword">while</span> L <span class="token operator">&lt;=</span> R<span class="token operator">:</span>
        m <span class="token operator">:</span><span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>L <span class="token operator">+</span> R<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> A<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> T<span class="token operator">:</span>
            L <span class="token operator">:</span><span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> A<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;</span> T<span class="token operator">:</span>
            R <span class="token operator">:</span><span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token operator">:</span>
            <span class="token keyword">return</span> m
    <span class="token keyword">return</span> unsuccessful
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找插入位置" tabindex="-1"><a class="header-anchor" href="#查找插入位置" aria-hidden="true">#</a> 查找插入位置</h3><p>二分查找有序序列中某个元素的位置，如果没找到，则返回其需要插入的位置(LC 035):</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">return</span> l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bisect" tabindex="-1"><a class="header-anchor" href="#bisect" aria-hidden="true">#</a> bisect</h3><p>或者使用 Python 自带的 <strong>bisect</strong>:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> bisect
nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bisect<span class="token punctuation">.</span>bisect<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>注意到，<code>bisect()</code> 默认会查找元素需要插入的位置，如果是重复的元素，则会返回其最右侧可以插入的位置，使用 <code>bisect_left()</code> 可以返回其左侧位置。</p><h3 id="向上、下取整" tabindex="-1"><a class="header-anchor" href="#向上、下取整" aria-hidden="true">#</a> 向上、下取整</h3>`,12),g=n("ol",null,[n("li",null,[n("p",null,[s("使用 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"A"),n("mo",null,"+"),n("mi",null,"B"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("mi",null,"B")])]),n("annotation",{encoding:"application/x-tex"},"\\frac {(A+B-1)} {B}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.355em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.01em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.485em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen mtight"},"("),n("span",{class:"mord mathnormal mtight"},"A"),n("span",{class:"mbin mtight"},"+"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05017em"}},"B"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1"),n("span",{class:"mclose mtight"},")")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])]),s(" 计算")])]),n("li",null,[n("p",null,[s("使用 "),n("code",null,"math.ceil()"),s(" 和 "),n("code",null,"math.floor()"),s(":")])])],-1),y=a(`<div class="language-python" data-ext="py"><pre class="language-python"><code>imprt math
math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 1 or 7//4</span>
<span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">2.6</span><span class="token punctuation">)</span> <span class="token comment"># 3 四舍五入</span>
</code></pre></div>`,1),f=n("p",null,[s("一般而言，我们在快速排序或者二分查找中如果要计算 mid, 则可以使用 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mi",null,"i"),n("mi",null,"d"),n("mo",null,"="),n("mi",null,"l"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"t"),n("mo",null,"+"),n("mfrac",null,[n("mrow",null,[n("mi",null,"r"),n("mi",null,"i"),n("mi",null,"g"),n("mi",null,"h"),n("mi",null,"t"),n("mo",null,"−"),n("mi",null,"l"),n("mi",null,"e"),n("mi",null,"f"),n("mi",null,"t")]),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"mid = left + \\frac{right - left}{2}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"mi"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.2772em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.9322em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.4461em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r"),n("span",{class:"mord mathnormal mtight"},"i"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mord mathnormal mtight"},"h"),n("span",{class:"mord mathnormal mtight"},"t"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal mtight"},"e"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal mtight"},"t")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])]),s(" 来计算"),n("sup",{class:"footnote-ref"},[n("a",{href:"#footnote1"},"[1]"),n("a",{class:"footnote-anchor",id:"footnote-ref1"})]),s("。")],-1),w=a(`<h2 id="problems" tabindex="-1"><a class="header-anchor" href="#problems" aria-hidden="true">#</a> Problems</h2><h3 id="查找二维数组中是否存在某个元素" tabindex="-1"><a class="header-anchor" href="#查找二维数组中是否存在某个元素" aria-hidden="true">#</a> 查找二维数组中是否存在某个元素</h3><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。<br> 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
利用二分查找的思想：
需要遍历每一行得到最后的答案，这个操作顺便复习一下二分查找
&quot;&quot;&quot;</span>

<span class="token keyword">def</span> <span class="token function">find_in_array_binary_search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> alist<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> <span class="token number">0</span>
        r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token comment"># mid = l + (r - l) // 2</span>
            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> target <span class="token operator">&gt;</span> alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注意到这里用到了 <strong>先小(&lt;)后大(&gt;), 先左(l)后右</strong> 的口诀。</p></div><h3 id="完全平方数" tabindex="-1"><a class="header-anchor" href="#完全平方数" aria-hidden="true">#</a> 完全平方数</h3><p>使用二分查找判断某个数是否完全平方数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">isPerfectSquare</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    using binary search
    &#39;&#39;&#39;</span>
    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num
    <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> mid <span class="token operator">*</span> mid <span class="token operator">==</span> num<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> mid <span class="token operator">*</span> mid <span class="token operator">&lt;</span> num<span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字在排序数组中出现的次数" tabindex="-1"><a class="header-anchor" href="#数字在排序数组中出现的次数" aria-hidden="true">#</a> 数字在排序数组中出现的次数</h3><blockquote><p>统计一个数字在排序数组中出现的次数。</p></blockquote><p>使用二分查找，首先查找在前面出现的位置 start, 再查找在后面出现的位置 end, 然后相减得到答案。</p><p>这个题目对查找插入位置的概念进行了强化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">GetNumberOfK</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> self<span class="token punctuation">.</span>get_start<span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        end <span class="token operator">=</span> self<span class="token punctuation">.</span>get_end<span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        <span class="token keyword">return</span> end <span class="token operator">-</span> start

    <span class="token keyword">def</span> <span class="token function">get_start</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">return</span> l

    <span class="token keyword">def</span> <span class="token function">get_end</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">return</span> l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="find-peak-element-寻找峰值" tabindex="-1"><a class="header-anchor" href="#find-peak-element-寻找峰值" aria-hidden="true">#</a> Find Peak Element - 寻找峰值</h3><blockquote><p>找寻一个数组的峰值</p><p>输入: nums = [1,2,1,3,5,6,4]</p><p>输出: 1 或 5</p><p>解释: 你的函数可以返回索引 1，其峰值元素为 2；或者返回索引 5， 其峰值元素为 6。</p></blockquote><p>这道题目只要求返回一个峰值，所以可以从前往后遍历，遇到符合条件的返回即可，暴力解法和二分法的代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 暴力求解</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> <span class="token string">&#39;List[int]&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> i<span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>

<span class="token comment"># 二分查找</span>
<span class="token keyword">class</span> <span class="token class-name">SolutionBinarySearch</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> <span class="token string">&#39;List[int]&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        l <span class="token operator">=</span> <span class="token number">0</span>
        r <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid
        <span class="token keyword">if</span> l <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">or</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> l
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lc875-爱吃香蕉的珂珂" tabindex="-1"><a class="header-anchor" href="#lc875-爱吃香蕉的珂珂" aria-hidden="true">#</a> LC875 爱吃香蕉的珂珂</h3>`,18),_=n("p",null,"珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。",-1),x=n("p",null,"珂珂可以决定她吃香蕉的速度 K （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。",-1),L=n("p",null,"珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。",-1),q=n("p",null,"返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。",-1),S=n("br",null,null,-1),B={href:"https://leetcode-cn.com/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},z=n("br",null,null,-1),E=a(`<p>下面两种解法展示了不同边界条件下该如何处理：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> piles<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>piles<span class="token punctuation">)</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            cost <span class="token operator">=</span> self<span class="token punctuation">.</span>check<span class="token punctuation">(</span>mid<span class="token punctuation">,</span> piles<span class="token punctuation">)</span>
            <span class="token comment"># 耗时太多，说明速度太慢了</span>
            <span class="token keyword">if</span> cost <span class="token operator">&gt;</span> h<span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid
        <span class="token keyword">return</span> l

    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> piles<span class="token punctuation">)</span><span class="token punctuation">:</span>
        cost <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> pile <span class="token keyword">in</span> piles<span class="token punctuation">:</span>
            <span class="token keyword">if</span> mid <span class="token operator">&gt;=</span> pile<span class="token punctuation">:</span>
                cost <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># 向上取整</span>
                cost <span class="token operator">+=</span> ceil<span class="token punctuation">(</span>pile <span class="token operator">/</span> mid<span class="token punctuation">)</span>
                <span class="token comment"># cost += (pile + mid - 1) // mid</span>
        <span class="token keyword">return</span> cost
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minEatingSpeed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> piles<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>piles<span class="token punctuation">)</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            cost <span class="token operator">=</span> self<span class="token punctuation">.</span>check<span class="token punctuation">(</span>mid<span class="token punctuation">,</span> piles<span class="token punctuation">)</span>
            <span class="token keyword">if</span> cost <span class="token operator">&gt;</span> h<span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">return</span> l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的两种解法都是可以的，区别在于边界条件的不同，可以参考比较，加以掌握。</p><p>除此之外，我们对上述代码进行一个简单的阐述：</p><ol><li><code>l</code>, <code>r</code> 左右区间的取值。我们根据题目要求分析得知，要求解一个速度，这个速度是每次吃香蕉的速度，这个速度的最小值为 1, 最大值就是这一对香蕉里面最多的那个，速度介于 <code>[1, max(piles)]</code> 之间。分析这个也是求解二分问题的关键。</li><li><code>check</code> 函数的作用是，求解速度为 <code>x</code> 的时候，吃完所有香蕉所需要的时间，其中吃一堆香蕉的时间可以分情况计算，向上取整就是这个速度吃完当前堆的香蕉所需要的时间。我们计算出这个时间，和给定的时间进行比较，如果说计算出来的时间不够吃完所有的香蕉，那么我们需要在右边区间搜索，反之也一样。</li></ol><h3 id="求根号-x-的值" tabindex="-1"><a class="header-anchor" href="#求根号-x-的值" aria-hidden="true">#</a> 求根号 x 的值</h3><p>可以使用二分法，解法一如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># 二分法</span>
        delta <span class="token operator">=</span> <span class="token number">1e-5</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x
        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span>
            <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>mid <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> delta<span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid
            <span class="token keyword">elif</span> mid <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">&gt;</span> x<span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                l <span class="token operator">=</span> mid
        <span class="token keyword">return</span> l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解法二如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> mid <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">&gt;</span> x<span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid
        last <span class="token operator">=</span> mid
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span>
        <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>mid <span class="token operator">-</span> last<span class="token punctuation">)</span> <span class="token operator">&lt;</span> delta<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    <span class="token keyword">return</span> mid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解法一比解法二好很多，可以掌握一下！</p><p>如果是要求结果是整数，则使用以下解法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># 二分法, 要求结果是取整的</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x
        res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> mid <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">:</span>
                res <span class="token operator">=</span> mid
                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lc719-找出第-k-小的数对距离" tabindex="-1"><a class="header-anchor" href="#lc719-找出第-k-小的数对距离" aria-hidden="true">#</a> LC719 找出第 K 小的数对距离</h3>`,15),K={href:"https://leetcode.cn/problems/find-k-th-smallest-pair-distance/",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>我们的解法如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">smallestDistancePair</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># 这道题目为什么可以使用二分？</span>
        <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>mid<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
            <span class="token comment"># 这个函数求解，有多少对数字之间的距离小于等于 mid</span>
            <span class="token comment"># 已知 num, 并且 abs(num - x) &lt;= mid, 由于我们枚举右边界去寻找左边界，则一定存在 num(右边界) &gt; x</span>
            <span class="token comment"># 所以 num - x &lt;= mid --&gt; num - mid &lt;= x, 我们需要找到 x 的位置, 范围是 0 ~ j</span>
            <span class="token comment"># 找到了左边界以后，所有满足的数字对的个数就是 j - i</span>
            res <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> j<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
                i <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> num <span class="token operator">-</span> mid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
                res <span class="token operator">+=</span> j <span class="token operator">-</span> i
            <span class="token keyword">return</span> res

        <span class="token comment"># return bisect_left(range(nums[-1] - nums[0]), k, key=count)</span>
        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token keyword">if</span> count<span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> k<span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> left
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注释里面给出了一些思考的点，主要体现在以下方面：</p><ol><li>对数组 <code>nums</code> 进行排序</li><li>我们假设存在一个 <code>mid</code>, 这个 <code>mid</code> 是我们找到的两个数之间的距离的最大值，我们找到符合条件的数字 <code>x</code>, 规定右边界，寻找左边界</li><li>根据一个右边界，找到所有的左边界，然后统计符合条件的数量，这个数量作为二分查找的条件</li></ol><p>总结来说，这个题目的难点在于想到可以使用二分查找求解。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><hr class="footnotes-sep">`,7),V={class:"footnotes"},F={class:"footnotes-list"},N={id:"footnote1",class:"footnote-item"},T={href:"https://github.com/chenweigao/_code/blob/master/data_struct/binary_search.py",target:"_blank",rel:"noopener noreferrer"},A=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function C(M,j){const p=o("ExternalLinkIcon");return l(),c("div",null,[d,n("p",null,[s("基于此，在写二分查找时，可以基于以下原则："),n("a",m,[s("标准程序参考链接"),t(p)])]),v,n("p",null,[s("参考视频："),n("a",b,[s("https://www.bilibili.com/video/BV1d54y1q7k7"),t(p)])]),h,g,y,f,w,n("blockquote",null,[_,x,L,q,n("p",null,[s("来源：力扣（LeetCode）"),S,s(" 链接："),n("a",B,[s("https://leetcode-cn.com/problems/koko-eating-bananas"),t(p)]),z,s(" 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),E,n("p",null,[n("a",K,[s("719. 找出第 K 小的数对距离"),t(p)])]),P,n("section",V,[n("ol",F,[n("li",N,[n("p",null,[n("a",T,[s("二分查找 python 代码"),t(p)]),s(),A])])])])])}const I=e(k,[["render",C],["__file","binary_search.html.vue"]]);export{I as default};
