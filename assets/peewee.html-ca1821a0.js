import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as l,a as e,b as c,d as r,f as n}from"./app-22cda79c.js";const i={},p=n(`<h2 id="peewee" tabindex="-1"><a class="header-anchor" href="#peewee" aria-hidden="true">#</a> Peewee</h2><p>创建模型和表字段：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> peewee <span class="token keyword">import</span> <span class="token operator">*</span>
mysql_db <span class="token operator">=</span> MySQLDatabase<span class="token punctuation">(</span><span class="token string">&#39;my_database&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">BaseModel</span><span class="token punctuation">(</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        database <span class="token operator">=</span> mysql_db

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    username <span class="token operator">=</span> CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># etc, etc</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        table_name <span class="token operator">=</span> <span class="token string">&quot;database_name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在数据库中使用 sql 语句创建表字段，然后可以使用 <code>User</code> model 对其进行操作。</p><h3 id="query-operators" tabindex="-1"><a class="header-anchor" href="#query-operators" aria-hidden="true">#</a> Query operators</h3>`,5),d={href:"http://docs.peewee-orm.com/en/latest/peewee/query_operators.html",target:"_blank",rel:"noopener noreferrer"},u=n('<p>其中几个需要着重理解注意：</p><table><thead><tr><th style="text-align:center;">Comparison</th><th style="text-align:center;">Meaning</th></tr></thead><tbody><tr><td style="text-align:center;">&lt;&lt;</td><td style="text-align:center;">x IN y</td></tr><tr><td style="text-align:center;">&gt;&gt;</td><td style="text-align:center;">x IS y</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">x LIKE y</td></tr><tr><td style="text-align:center;">**</td><td style="text-align:center;">x ILIKE y</td></tr></tbody></table><p>LIKE 和 ILIKE 操作符可以模糊匹配字符串，LIKE 是一般用法，ILIKE 匹配时则不区分字符串的大小写。</p><div class="hint-container warning"><p class="hint-container-title">ORM vs Python Grammar</p><p>So just remember:</p><ul><li>Use <code>.in_()</code> and <code>.not_in()</code> instead of <code>in</code> and not <code>in</code></li><li>Use <code>&amp;</code> instead of and</li><li>Use <code>|</code> instead of or</li><li>Use <code>~</code> instead of not</li><li>Use <code>.is_null()</code> instead of is None or == None.</li><li>Don’t forget to wrap your comparisons in parentheses when using logical operators.</li></ul></div>',4);function m(k,h){const s=t("ExternalLinkIcon");return o(),l("div",null,[p,e("p",null,[e("a",d,[c("http://docs.peewee-orm.com/en/latest/peewee/query_operators.html"),r(s)])]),u])}const _=a(i,[["render",m],["__file","peewee.html.vue"]]);export{_ as default};
